
GENZERO_AGV_VH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6d4  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800f9a0  0800f9a0  000109a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fc38  0800fc38  00010c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fc40  0800fc40  00010c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fc44  0800fc44  00010c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  0800fc48  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000698  24000060  0800fca8  00011060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240006f8  0800fca8  000116f8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00011060  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f8e8  00000000  00000000  0001108e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000034cf  00000000  00000000  00030976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001898  00000000  00000000  00033e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001333  00000000  00000000  000356e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000362cf  00000000  00000000  00036a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022747  00000000  00000000  0006cce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167250  00000000  00000000  0008f429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f6679  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006aa4  00000000  00000000  001f66bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  001fd160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000060 	.word	0x24000060
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800f988 	.word	0x0800f988

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000064 	.word	0x24000064
 8000308:	0800f988 	.word	0x0800f988

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80005fc:	b4b0      	push	{r4, r5, r7}
 80005fe:	b08f      	sub	sp, #60	@ 0x3c
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000604:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000608:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800060a:	2307      	movs	r3, #7
 800060c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000610:	2307      	movs	r3, #7
 8000612:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000616:	2301      	movs	r3, #1
 8000618:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 800061c:	23ff      	movs	r3, #255	@ 0xff
 800061e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000622:	2364      	movs	r3, #100	@ 0x64
 8000624:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000628:	2308      	movs	r3, #8
 800062a:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	461d      	mov	r5, r3
 8000630:	f107 040c 	add.w	r4, r7, #12
 8000634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800063a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800063c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000640:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	373c      	adds	r7, #60	@ 0x3c
 8000648:	46bd      	mov	sp, r7
 800064a:	bcb0      	pop	{r4, r5, r7}
 800064c:	4770      	bx	lr

0800064e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800064e:	b580      	push	{r7, lr}
 8000650:	b084      	sub	sp, #16
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000658:	2101      	movs	r1, #1
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f9fd 	bl	8000a5a <LoRa_read>
 8000660:	4603      	mov	r3, r0
 8000662:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000664:	7bbb      	ldrb	r3, [r7, #14]
 8000666:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d107      	bne.n	800067e <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	f023 0307 	bic.w	r3, r3, #7
 8000674:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
 800067c:	e03e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d10c      	bne.n	800069e <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000688:	f023 0307 	bic.w	r3, r3, #7
 800068c:	b25b      	sxtb	r3, r3
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	b25b      	sxtb	r3, r3
 8000694:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2201      	movs	r2, #1
 800069a:	61da      	str	r2, [r3, #28]
 800069c:	e02e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	d10c      	bne.n	80006be <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80006a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006a8:	f023 0307 	bic.w	r3, r3, #7
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	f043 0303 	orr.w	r3, r3, #3
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2203      	movs	r2, #3
 80006ba:	61da      	str	r2, [r3, #28]
 80006bc:	e01e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	d10c      	bne.n	80006de <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80006c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006c8:	f023 0307 	bic.w	r3, r3, #7
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	f043 0305 	orr.w	r3, r3, #5
 80006d2:	b25b      	sxtb	r3, r3
 80006d4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2205      	movs	r2, #5
 80006da:	61da      	str	r2, [r3, #28]
 80006dc:	e00e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	2b06      	cmp	r3, #6
 80006e2:	d10b      	bne.n	80006fc <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80006e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006e8:	f023 0307 	bic.w	r3, r3, #7
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	f043 0306 	orr.w	r3, r3, #6
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2206      	movs	r2, #6
 80006fa:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	461a      	mov	r2, r3
 8000700:	2101      	movs	r1, #1
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f000 f9c3 	bl	8000a8e <LoRa_write>
	//HAL_Delay(10);
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4613      	mov	r3, r2
 800071e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	889b      	ldrh	r3, [r3, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	4619      	mov	r1, r3
 800072c:	f007 fa9e 	bl	8007c6c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	6998      	ldr	r0, [r3, #24]
 8000734:	88fa      	ldrh	r2, [r7, #6]
 8000736:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800073a:	68b9      	ldr	r1, [r7, #8]
 800073c:	f00a ff8e 	bl	800b65c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000740:	bf00      	nop
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4618      	mov	r0, r3
 8000748:	f00b fbe8 	bl	800bf1c <HAL_SPI_GetState>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	d1f7      	bne.n	8000742 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6998      	ldr	r0, [r3, #24]
 8000756:	8b3a      	ldrh	r2, [r7, #24]
 8000758:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800075c:	6839      	ldr	r1, [r7, #0]
 800075e:	f00b f96b 	bl	800ba38 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000762:	bf00      	nop
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4618      	mov	r0, r3
 800076a:	f00b fbd7 	bl	800bf1c <HAL_SPI_GetState>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d1f7      	bne.n	8000764 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	889b      	ldrh	r3, [r3, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	4619      	mov	r1, r3
 8000780:	f007 fa74 	bl	8007c6c <HAL_GPIO_WritePin>
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	4613      	mov	r3, r2
 800079a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	889b      	ldrh	r3, [r3, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	f007 fa60 	bl	8007c6c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	6998      	ldr	r0, [r3, #24]
 80007b0:	88fa      	ldrh	r2, [r7, #6]
 80007b2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007b6:	68b9      	ldr	r1, [r7, #8]
 80007b8:	f00a ff50 	bl	800b65c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007bc:	bf00      	nop
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00b fbaa 	bl	800bf1c <HAL_SPI_GetState>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d1f7      	bne.n	80007be <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6998      	ldr	r0, [r3, #24]
 80007d2:	8b3a      	ldrh	r2, [r7, #24]
 80007d4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007d8:	6839      	ldr	r1, [r7, #0]
 80007da:	f00a ff3f 	bl	800b65c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007de:	bf00      	nop
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f00b fb99 	bl	800bf1c <HAL_SPI_GetState>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d1f7      	bne.n	80007e0 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	889b      	ldrh	r3, [r3, #4]
 80007f8:	2201      	movs	r2, #1
 80007fa:	4619      	mov	r1, r3
 80007fc:	f007 fa36 	bl	8007c6c <HAL_GPIO_WritePin>
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000814:	2126      	movs	r1, #38	@ 0x26
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 f91f 	bl	8000a5a <LoRa_read>
 800081c:	4603      	mov	r3, r0
 800081e:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d004      	beq.n	8000830 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e003      	b.n	8000838 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000830:	7bbb      	ldrb	r3, [r7, #14]
 8000832:	f023 0308 	bic.w	r3, r3, #8
 8000836:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	461a      	mov	r2, r3
 800083c:	2126      	movs	r1, #38	@ 0x26
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f000 f925 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000844:	200a      	movs	r0, #10
 8000846:	f002 f83f 	bl	80028c8 <HAL_Delay>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000854:	b580      	push	{r7, lr}
 8000856:	b096      	sub	sp, #88	@ 0x58
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 800085c:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <LoRa_setAutoLDO+0x64>)
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4611      	mov	r1, r2
 8000864:	2250      	movs	r2, #80	@ 0x50
 8000866:	4618      	mov	r0, r3
 8000868:	f00f f880 	bl	800f96c <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000872:	461a      	mov	r2, r3
 8000874:	2301      	movs	r3, #1
 8000876:	4093      	lsls	r3, r2
 8000878:	ee07 3a90 	vmov	s15, r3
 800087c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	3358      	adds	r3, #88	@ 0x58
 800088a:	443b      	add	r3, r7
 800088c:	3b50      	subs	r3, #80	@ 0x50
 800088e:	ed93 6b00 	vldr	d6, [r3]
 8000892:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000896:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800089a:	ee17 3a90 	vmov	r3, s15
 800089e:	2b10      	cmp	r3, #16
 80008a0:	bfcc      	ite	gt
 80008a2:	2301      	movgt	r3, #1
 80008a4:	2300      	movle	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	4619      	mov	r1, r3
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffac 	bl	8000808 <LoRa_setLowDaraRateOptimization>
}
 80008b0:	bf00      	nop
 80008b2:	3758      	adds	r7, #88	@ 0x58
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	0800f9a0 	.word	0x0800f9a0

080008bc <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	04db      	lsls	r3, r3, #19
 80008ca:	115b      	asrs	r3, r3, #5
 80008cc:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	0c1b      	lsrs	r3, r3, #16
 80008d2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80008d4:	7afb      	ldrb	r3, [r7, #11]
 80008d6:	461a      	mov	r2, r3
 80008d8:	2106      	movs	r1, #6
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 f8d7 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 80008e0:	2005      	movs	r0, #5
 80008e2:	f001 fff1 	bl	80028c8 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80008ec:	7afb      	ldrb	r3, [r7, #11]
 80008ee:	461a      	mov	r2, r3
 80008f0:	2107      	movs	r1, #7
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 f8cb 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 80008f8:	2005      	movs	r0, #5
 80008fa:	f001 ffe5 	bl	80028c8 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000902:	7afb      	ldrb	r3, [r7, #11]
 8000904:	461a      	mov	r2, r3
 8000906:	2108      	movs	r1, #8
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f8c0 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 800090e:	2005      	movs	r0, #5
 8000910:	f001 ffda 	bl	80028c8 <HAL_Delay>
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	2b0c      	cmp	r3, #12
 800092a:	dd01      	ble.n	8000930 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 800092c:	230c      	movs	r3, #12
 800092e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	2b06      	cmp	r3, #6
 8000934:	dc01      	bgt.n	800093a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000936:	2307      	movs	r3, #7
 8000938:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800093a:	211e      	movs	r1, #30
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 f88c 	bl	8000a5a <LoRa_read>
 8000942:	4603      	mov	r3, r0
 8000944:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000946:	200a      	movs	r0, #10
 8000948:	f001 ffbe 	bl	80028c8 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	011b      	lsls	r3, r3, #4
 8000952:	b2da      	uxtb	r2, r3
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4413      	add	r3, r2
 800095e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000960:	7bbb      	ldrb	r3, [r7, #14]
 8000962:	461a      	mov	r2, r3
 8000964:	211e      	movs	r1, #30
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f891 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 800096c:	200a      	movs	r0, #10
 800096e:	f001 ffab 	bl	80028c8 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ff6e 	bl	8000854 <LoRa_setAutoLDO>
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	461a      	mov	r2, r3
 8000990:	2109      	movs	r1, #9
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 f87b 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000998:	200a      	movs	r0, #10
 800099a:	f001 ff95 	bl	80028c8 <HAL_Delay>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	2b2c      	cmp	r3, #44	@ 0x2c
 80009bc:	d801      	bhi.n	80009c2 <LoRa_setOCP+0x1a>
		current = 45;
 80009be:	232d      	movs	r3, #45	@ 0x2d
 80009c0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	2bf0      	cmp	r3, #240	@ 0xf0
 80009c6:	d901      	bls.n	80009cc <LoRa_setOCP+0x24>
		current = 240;
 80009c8:	23f0      	movs	r3, #240	@ 0xf0
 80009ca:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	2b78      	cmp	r3, #120	@ 0x78
 80009d0:	d809      	bhi.n	80009e6 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80009d2:	78fb      	ldrb	r3, [r7, #3]
 80009d4:	3b2d      	subs	r3, #45	@ 0x2d
 80009d6:	4a12      	ldr	r2, [pc, #72]	@ (8000a20 <LoRa_setOCP+0x78>)
 80009d8:	fb82 1203 	smull	r1, r2, r2, r3
 80009dc:	1052      	asrs	r2, r2, #1
 80009de:	17db      	asrs	r3, r3, #31
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	73fb      	strb	r3, [r7, #15]
 80009e4:	e00b      	b.n	80009fe <LoRa_setOCP+0x56>
	else if(current <= 240)
 80009e6:	78fb      	ldrb	r3, [r7, #3]
 80009e8:	2bf0      	cmp	r3, #240	@ 0xf0
 80009ea:	d808      	bhi.n	80009fe <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	331e      	adds	r3, #30
 80009f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a20 <LoRa_setOCP+0x78>)
 80009f2:	fb82 1203 	smull	r1, r2, r2, r3
 80009f6:	1092      	asrs	r2, r2, #2
 80009f8:	17db      	asrs	r3, r3, #31
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	3320      	adds	r3, #32
 8000a02:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	461a      	mov	r2, r3
 8000a08:	210b      	movs	r1, #11
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f83f 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000a10:	200a      	movs	r0, #10
 8000a12:	f001 ff59 	bl	80028c8 <HAL_Delay>
}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	66666667 	.word	0x66666667

08000a24 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000a2c:	211e      	movs	r1, #30
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f000 f813 	bl	8000a5a <LoRa_read>
 8000a34:	4603      	mov	r3, r0
 8000a36:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	f043 0307 	orr.w	r3, r3, #7
 8000a3e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000a40:	7bbb      	ldrb	r3, [r7, #14]
 8000a42:	461a      	mov	r2, r3
 8000a44:	211e      	movs	r1, #30
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 f821 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000a4c:	200a      	movs	r0, #10
 8000a4e:	f001 ff3b 	bl	80028c8 <HAL_Delay>
}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af02      	add	r7, sp, #8
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	460b      	mov	r3, r1
 8000a64:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000a66:	78fb      	ldrb	r3, [r7, #3]
 8000a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000a70:	f107 030f 	add.w	r3, r7, #15
 8000a74:	f107 010e 	add.w	r1, r7, #14
 8000a78:	2201      	movs	r2, #1
 8000a7a:	9200      	str	r2, [sp, #0]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff fe46 	bl	8000710 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af02      	add	r7, sp, #8
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	460b      	mov	r3, r1
 8000a98:	70fb      	strb	r3, [r7, #3]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000a9e:	78fb      	ldrb	r3, [r7, #3]
 8000aa0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000aa8:	78bb      	ldrb	r3, [r7, #2]
 8000aaa:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000aac:	f107 030f 	add.w	r3, r7, #15
 8000ab0:	f107 010e 	add.w	r1, r7, #14
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	9200      	str	r2, [sp, #0]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fe66 	bl	800078c <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

	return 1;
 8000ad0:	2301      	movs	r3, #1
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000ae6:	2105      	movs	r1, #5
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fdb0 	bl	800064e <LoRa_gotoMode>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000af6:	b590      	push	{r4, r7, lr}
 8000af8:	b089      	sub	sp, #36	@ 0x24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	4613      	mov	r3, r2
 8000b02:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
 8000b0c:	e007      	b.n	8000b1e <LoRa_receive+0x28>
		data[i]=0;
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	68ba      	ldr	r2, [r7, #8]
 8000b12:	4413      	add	r3, r2
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	dbf3      	blt.n	8000b0e <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000b26:	2101      	movs	r1, #1
 8000b28:	68f8      	ldr	r0, [r7, #12]
 8000b2a:	f7ff fd90 	bl	800064e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000b2e:	2112      	movs	r1, #18
 8000b30:	68f8      	ldr	r0, [r7, #12]
 8000b32:	f7ff ff92 	bl	8000a5a <LoRa_read>
 8000b36:	4603      	mov	r3, r0
 8000b38:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000b3a:	7cfb      	ldrb	r3, [r7, #19]
 8000b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d02f      	beq.n	8000ba4 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000b44:	22ff      	movs	r2, #255	@ 0xff
 8000b46:	2112      	movs	r1, #18
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	f7ff ffa0 	bl	8000a8e <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000b4e:	2113      	movs	r1, #19
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f7ff ff82 	bl	8000a5a <LoRa_read>
 8000b56:	4603      	mov	r3, r0
 8000b58:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	68f8      	ldr	r0, [r7, #12]
 8000b5e:	f7ff ff7c 	bl	8000a5a <LoRa_read>
 8000b62:	4603      	mov	r3, r0
 8000b64:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000b66:	7cfb      	ldrb	r3, [r7, #19]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	210d      	movs	r1, #13
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f7ff ff8e 	bl	8000a8e <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000b72:	7cba      	ldrb	r2, [r7, #18]
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4293      	cmp	r3, r2
 8000b78:	bf28      	it	cs
 8000b7a:	4613      	movcs	r3, r2
 8000b7c:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	e00b      	b.n	8000b9c <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	18d4      	adds	r4, r2, r3
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	f7ff ff64 	bl	8000a5a <LoRa_read>
 8000b92:	4603      	mov	r3, r0
 8000b94:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	7ffb      	ldrb	r3, [r7, #31]
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dbef      	blt.n	8000b84 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000ba4:	2105      	movs	r1, #5
 8000ba6:	68f8      	ldr	r0, [r7, #12]
 8000ba8:	f7ff fd51 	bl	800064e <LoRa_gotoMode>
    return min;
 8000bac:	7ffb      	ldrb	r3, [r7, #31]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	@ 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd90      	pop	{r4, r7, pc}

08000bb6 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ff82 	bl	8000ac8 <LoRa_isvalid>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 8096 	beq.w	8000cf8 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff fd3d 	bl	800064e <LoRa_gotoMode>
			HAL_Delay(10);
 8000bd4:	200a      	movs	r0, #10
 8000bd6:	f001 fe77 	bl	80028c8 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000bda:	2101      	movs	r1, #1
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ff3c 	bl	8000a5a <LoRa_read>
 8000be2:	4603      	mov	r3, r0
 8000be4:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000be6:	200a      	movs	r0, #10
 8000be8:	f001 fe6e 	bl	80028c8 <HAL_Delay>
			data = read | 0x80;
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bf2:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000bf4:	7bbb      	ldrb	r3, [r7, #14]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ff47 	bl	8000a8e <LoRa_write>
			HAL_Delay(100);
 8000c00:	2064      	movs	r0, #100	@ 0x64
 8000c02:	f001 fe61 	bl	80028c8 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a1b      	ldr	r3, [r3, #32]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fe55 	bl	80008bc <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000c18:	4619      	mov	r1, r3
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff feb0 	bl	8000980 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000c26:	4619      	mov	r1, r3
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff febd 	bl	80009a8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000c2e:	2223      	movs	r2, #35	@ 0x23
 8000c30:	210c      	movs	r1, #12
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ff2b 	bl	8000a8e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff fef3 	bl	8000a24 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff fe68 	bl	800091c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000c4c:	22ff      	movs	r2, #255	@ 0xff
 8000c4e:	211f      	movs	r1, #31
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff1c 	bl	8000a8e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c60:	011b      	lsls	r3, r3, #4
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	4413      	add	r3, r2
 8000c70:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000c72:	7bbb      	ldrb	r3, [r7, #14]
 8000c74:	461a      	mov	r2, r3
 8000c76:	211d      	movs	r1, #29
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff08 	bl	8000a8e <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff fde8 	bl	8000854 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	461a      	mov	r2, r3
 8000c90:	2120      	movs	r1, #32
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff fefb 	bl	8000a8e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	2121      	movs	r1, #33	@ 0x21
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff fef3 	bl	8000a8e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000ca8:	2140      	movs	r1, #64	@ 0x40
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff fed5 	bl	8000a5a <LoRa_read>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8000cba:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000cbc:	7bbb      	ldrb	r3, [r7, #14]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	2140      	movs	r1, #64	@ 0x40
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fee3 	bl	8000a8e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000cc8:	2101      	movs	r1, #1
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff fcbf 	bl	800064e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000cd6:	200a      	movs	r0, #10
 8000cd8:	f001 fdf6 	bl	80028c8 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000cdc:	2142      	movs	r1, #66	@ 0x42
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff febb 	bl	8000a5a <LoRa_read>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	2b12      	cmp	r3, #18
 8000cec:	d101      	bne.n	8000cf2 <LoRa_init+0x13c>
				return LORA_OK;
 8000cee:	23c8      	movs	r3, #200	@ 0xc8
 8000cf0:	e004      	b.n	8000cfc <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8000cf2:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8000cf6:	e001      	b.n	8000cfc <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8000cf8:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ir_array_init>:
                   int      *ir_sen_read_line_old_val,
          volatile uint8_t  *ir_sen_on_line_total_num,
          volatile uint8_t  *ir_sen_on_line_mid_num,
		  volatile uint8_t  *ir_sen_on_line_left_num,
          volatile uint8_t  *ir_sen_on_line_right_num,
             const uint16_t *ir_sen_threshold){
 8000d04:	b480      	push	{r7}
 8000d06:	b087      	sub	sp, #28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	603b      	str	r3, [r7, #0]

    for(uint8_t i = 0; i < 10; i++){
 8000d12:	2300      	movs	r3, #0
 8000d14:	75fb      	strb	r3, [r7, #23]
 8000d16:	e025      	b.n	8000d64 <ir_array_init+0x60>
        //ir_struct->ir_sen_val_dma[i] = ir_sen_val_dma[i];
        ir_struct->ir_sen_val_cal[i] = ir_sen_val_cal[i];
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	441a      	add	r2, r3
 8000d20:	7dfb      	ldrb	r3, [r7, #23]
 8000d22:	8812      	ldrh	r2, [r2, #0]
 8000d24:	b291      	uxth	r1, r2
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	3308      	adds	r3, #8
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	4413      	add	r3, r2
 8000d2e:	460a      	mov	r2, r1
 8000d30:	809a      	strh	r2, [r3, #4]
        ir_struct->ir_sen_max_val[i] = ir_sen_max_val[i];
 8000d32:	7dfb      	ldrb	r3, [r7, #23]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	7dfa      	ldrb	r2, [r7, #23]
 8000d3c:	8819      	ldrh	r1, [r3, #0]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	3214      	adds	r2, #20
 8000d42:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        ir_struct->ir_sen_min_val[i] = ir_sen_min_val[i];
 8000d46:	7dfb      	ldrb	r3, [r7, #23]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	441a      	add	r2, r3
 8000d4e:	7dfb      	ldrb	r3, [r7, #23]
 8000d50:	8811      	ldrh	r1, [r2, #0]
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	331c      	adds	r3, #28
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4413      	add	r3, r2
 8000d5a:	460a      	mov	r2, r1
 8000d5c:	809a      	strh	r2, [r3, #4]
    for(uint8_t i = 0; i < 10; i++){
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
 8000d60:	3301      	adds	r3, #1
 8000d62:	75fb      	strb	r3, [r7, #23]
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	2b09      	cmp	r3, #9
 8000d68:	d9d6      	bls.n	8000d18 <ir_array_init+0x14>
    }
    ir_struct->ir_sen_channel_num = *ir_sen_channel_num;
 8000d6a:	6a3b      	ldr	r3, [r7, #32]
 8000d6c:	781a      	ldrb	r2, [r3, #0]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    ir_struct->ir_sen_read_line_val = *ir_sen_read_line_val;
 8000d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    ir_struct->ir_sen_read_line_old_val = *ir_sen_read_line_old_val;
 8000d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	655a      	str	r2, [r3, #84]	@ 0x54
    ir_struct->ir_sen_on_line_total_num = *ir_sen_on_line_total_num;
 8000d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    ir_struct->ir_sen_on_line_mid_num = *ir_sen_on_line_mid_num;
 8000d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    ir_struct->ir_sen_on_line_left_num = *ir_sen_on_line_left_num;
 8000da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
    ir_struct->ir_sen_on_line_right_num = *ir_sen_on_line_right_num;
 8000dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
    ir_struct->ir_sen_threshold = *ir_sen_threshold;
 8000db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dba:	881a      	ldrh	r2, [r3, #0]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

}
 8000dc2:	bf00      	nop
 8000dc4:	371c      	adds	r7, #28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <HAL_GPIO_EXTI_Callback>:
//		Station_id[3] = uid[3];
//		Station_id[4] = uid[4];
//	}
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d102      	bne.n	8000de6 <HAL_GPIO_EXTI_Callback+0x16>
		Station = 0;
 8000de0:	4b18      	ldr	r3, [pc, #96]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_1){
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d102      	bne.n	8000df2 <HAL_GPIO_EXTI_Callback+0x22>
		Station = 1;
 8000dec:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x74>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_2){
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	d102      	bne.n	8000dfe <HAL_GPIO_EXTI_Callback+0x2e>
		Station = 2;
 8000df8:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x74>)
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_3){
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	2b08      	cmp	r3, #8
 8000e02:	d102      	bne.n	8000e0a <HAL_GPIO_EXTI_Callback+0x3a>
		Station = 3;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	@ (8000e44 <HAL_GPIO_EXTI_Callback+0x74>)
 8000e06:	2203      	movs	r2, #3
 8000e08:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_4){
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	2b10      	cmp	r3, #16
 8000e0e:	d103      	bne.n	8000e18 <HAL_GPIO_EXTI_Callback+0x48>
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_7);
 8000e10:	2180      	movs	r1, #128	@ 0x80
 8000e12:	480d      	ldr	r0, [pc, #52]	@ (8000e48 <HAL_GPIO_EXTI_Callback+0x78>)
 8000e14:	f006 ff43 	bl	8007c9e <HAL_GPIO_TogglePin>
	}

	if(GPIO_Pin == myLoRa.DIO0_pin){
 8000e18:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <HAL_GPIO_EXTI_Callback+0x7c>)
 8000e1a:	8a9b      	ldrh	r3, [r3, #20]
 8000e1c:	88fa      	ldrh	r2, [r7, #6]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d10b      	bne.n	8000e3a <HAL_GPIO_EXTI_Callback+0x6a>
		LoRa_receive(&myLoRa, LoraRxBuffer, 128);
 8000e22:	2280      	movs	r2, #128	@ 0x80
 8000e24:	490a      	ldr	r1, [pc, #40]	@ (8000e50 <HAL_GPIO_EXTI_Callback+0x80>)
 8000e26:	4809      	ldr	r0, [pc, #36]	@ (8000e4c <HAL_GPIO_EXTI_Callback+0x7c>)
 8000e28:	f7ff fe65 	bl	8000af6 <LoRa_receive>
		HAL_GPIO_TogglePin(LORA_RX_LED_GPIO_Port, LORA_RX_LED_Pin);
 8000e2c:	2140      	movs	r1, #64	@ 0x40
 8000e2e:	4809      	ldr	r0, [pc, #36]	@ (8000e54 <HAL_GPIO_EXTI_Callback+0x84>)
 8000e30:	f006 ff35 	bl	8007c9e <HAL_GPIO_TogglePin>
		lora_receive_toggle = 255;
 8000e34:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <HAL_GPIO_EXTI_Callback+0x88>)
 8000e36:	22ff      	movs	r2, #255	@ 0xff
 8000e38:	701a      	strb	r2, [r3, #0]

	}
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	240005bc 	.word	0x240005bc
 8000e48:	58021800 	.word	0x58021800
 8000e4c:	240005c0 	.word	0x240005c0
 8000e50:	24000670 	.word	0x24000670
 8000e54:	58020c00 	.word	0x58020c00
 8000e58:	240006f0 	.word	0x240006f0

08000e5c <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]
	//rs485_time2 = HAL_GetTick();
	//rs485_exc_time = rs485_time2 - rs485_time1;

//	rs485_fail_check = 0;
	if(huart->Instance == USART1){
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea8 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d108      	bne.n	8000e84 <HAL_UARTEx_RxEventCallback+0x28>
		m2_driver.rs485_isbusy = 0;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <HAL_UARTEx_RxEventCallback+0x50>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, m2_driver.rs485_RxData, 16);
 8000e7a:	2210      	movs	r2, #16
 8000e7c:	490c      	ldr	r1, [pc, #48]	@ (8000eb0 <HAL_UARTEx_RxEventCallback+0x54>)
 8000e7e:	480d      	ldr	r0, [pc, #52]	@ (8000eb4 <HAL_UARTEx_RxEventCallback+0x58>)
 8000e80:	f00e fca9 	bl	800f7d6 <HAL_UARTEx_ReceiveToIdle_IT>
	}
	if(huart->Instance == USART3){
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb8 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d108      	bne.n	8000ea0 <HAL_UARTEx_RxEventCallback+0x44>
		m1_driver.rs485_isbusy = 0;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <HAL_UARTEx_RxEventCallback+0x60>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		HAL_UARTEx_ReceiveToIdle_IT(&huart3, m1_driver.rs485_RxData, 16);
 8000e96:	2210      	movs	r2, #16
 8000e98:	4909      	ldr	r1, [pc, #36]	@ (8000ec0 <HAL_UARTEx_RxEventCallback+0x64>)
 8000e9a:	480a      	ldr	r0, [pc, #40]	@ (8000ec4 <HAL_UARTEx_RxEventCallback+0x68>)
 8000e9c:	f00e fc9b 	bl	800f7d6 <HAL_UARTEx_ReceiveToIdle_IT>
	}


}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40011000 	.word	0x40011000
 8000eac:	2400047c 	.word	0x2400047c
 8000eb0:	2400048c 	.word	0x2400048c
 8000eb4:	24000320 	.word	0x24000320
 8000eb8:	40004800 	.word	0x40004800
 8000ebc:	24000448 	.word	0x24000448
 8000ec0:	24000458 	.word	0x24000458
 8000ec4:	240003b4 	.word	0x240003b4

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b5b0      	push	{r4, r5, r7, lr}
 8000eca:	b094      	sub	sp, #80	@ 0x50
 8000ecc:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ece:	f001 fc69 	bl	80027a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed2:	f000 f927 	bl	8001124 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ed6:	f000 f997 	bl	8001208 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eda:	f000 fd5b 	bl	8001994 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ede:	f000 fd31 	bl	8001944 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ee2:	f000 f9c5 	bl	8001270 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000ee6:	f000 fad5 	bl	8001494 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8000eea:	f000 fc93 	bl	8001814 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000eee:	f000 fc2d 	bl	800174c <MX_TIM2_Init>
  MX_SPI1_Init();
 8000ef2:	f000 fbd5 	bl	80016a0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000ef6:	f000 fcd9 	bl	80018ac <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  m1_driver.rs485_id = 0x01;
 8000efa:	4b64      	ldr	r3, [pc, #400]	@ (800108c <main+0x1c4>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
  m1_driver.rs485_huart = &huart3;
 8000f00:	4b62      	ldr	r3, [pc, #392]	@ (800108c <main+0x1c4>)
 8000f02:	4a63      	ldr	r2, [pc, #396]	@ (8001090 <main+0x1c8>)
 8000f04:	60da      	str	r2, [r3, #12]
  m1_driver.rs485_enable_port = RS485_M2_TX_EN_GPIO_Port;
 8000f06:	4b61      	ldr	r3, [pc, #388]	@ (800108c <main+0x1c4>)
 8000f08:	4a62      	ldr	r2, [pc, #392]	@ (8001094 <main+0x1cc>)
 8000f0a:	605a      	str	r2, [r3, #4]
  m1_driver.rs485_enable_pin = RS485_M2_TX_EN_Pin;
 8000f0c:	4b5f      	ldr	r3, [pc, #380]	@ (800108c <main+0x1c4>)
 8000f0e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f12:	811a      	strh	r2, [r3, #8]

  m2_driver.rs485_id = 0x02;
 8000f14:	4b60      	ldr	r3, [pc, #384]	@ (8001098 <main+0x1d0>)
 8000f16:	2202      	movs	r2, #2
 8000f18:	701a      	strb	r2, [r3, #0]
  m2_driver.rs485_huart = &huart1;
 8000f1a:	4b5f      	ldr	r3, [pc, #380]	@ (8001098 <main+0x1d0>)
 8000f1c:	4a5f      	ldr	r2, [pc, #380]	@ (800109c <main+0x1d4>)
 8000f1e:	60da      	str	r2, [r3, #12]
  m2_driver.rs485_enable_port = RS485_M1_TX_EN_GPIO_Port;
 8000f20:	4b5d      	ldr	r3, [pc, #372]	@ (8001098 <main+0x1d0>)
 8000f22:	4a5f      	ldr	r2, [pc, #380]	@ (80010a0 <main+0x1d8>)
 8000f24:	605a      	str	r2, [r3, #4]
  m2_driver.rs485_enable_pin = RS485_M1_TX_EN_Pin;
 8000f26:	4b5c      	ldr	r3, [pc, #368]	@ (8001098 <main+0x1d0>)
 8000f28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f2c:	811a      	strh	r2, [r3, #8]

  rs485_init(&m1_driver);
 8000f2e:	4857      	ldr	r0, [pc, #348]	@ (800108c <main+0x1c4>)
 8000f30:	f000 fed4 	bl	8001cdc <rs485_init>
  rs485_init(&m2_driver);
 8000f34:	4858      	ldr	r0, [pc, #352]	@ (8001098 <main+0x1d0>)
 8000f36:	f000 fed1 	bl	8001cdc <rs485_init>
//  HAL_UARTEx_ReceiveToIdle_IT(&huart3, rs485m2_RxData, 16);
  //HAL_UART_Receive_DMA(&huart1, rs485_RxData, 16);



  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4859      	ldr	r0, [pc, #356]	@ (80010a4 <main+0x1dc>)
 8000f3e:	f00b f93b 	bl	800c1b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f42:	2104      	movs	r1, #4
 8000f44:	4857      	ldr	r0, [pc, #348]	@ (80010a4 <main+0x1dc>)
 8000f46:	f00b f937 	bl	800c1b8 <HAL_TIM_PWM_Start>
  //motor_enable_velocity_mode(0x01);
  //motor_enable_velocity_mode(0x02);



  myLoRa = newLoRa();
 8000f4a:	4c57      	ldr	r4, [pc, #348]	@ (80010a8 <main+0x1e0>)
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fb54 	bl	80005fc <newLoRa>
 8000f54:	4625      	mov	r5, r4
 8000f56:	463c      	mov	r4, r7
 8000f58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f60:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000f64:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = LORA_NSS_GPIO_Port;
 8000f68:	4b4f      	ldr	r3, [pc, #316]	@ (80010a8 <main+0x1e0>)
 8000f6a:	4a50      	ldr	r2, [pc, #320]	@ (80010ac <main+0x1e4>)
 8000f6c:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = LORA_NSS_Pin;
 8000f6e:	4b4e      	ldr	r3, [pc, #312]	@ (80010a8 <main+0x1e0>)
 8000f70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f74:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = LORA_RST_GPIO_Port;
 8000f76:	4b4c      	ldr	r3, [pc, #304]	@ (80010a8 <main+0x1e0>)
 8000f78:	4a4c      	ldr	r2, [pc, #304]	@ (80010ac <main+0x1e4>)
 8000f7a:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = LORA_RST_Pin;
 8000f7c:	4b4a      	ldr	r3, [pc, #296]	@ (80010a8 <main+0x1e0>)
 8000f7e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f82:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = LORA_DIO0_GPIO_Port;
 8000f84:	4b48      	ldr	r3, [pc, #288]	@ (80010a8 <main+0x1e0>)
 8000f86:	4a49      	ldr	r2, [pc, #292]	@ (80010ac <main+0x1e4>)
 8000f88:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = LORA_DIO0_Pin;
 8000f8a:	4b47      	ldr	r3, [pc, #284]	@ (80010a8 <main+0x1e0>)
 8000f8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f90:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8000f92:	4b45      	ldr	r3, [pc, #276]	@ (80010a8 <main+0x1e0>)
 8000f94:	4a46      	ldr	r2, [pc, #280]	@ (80010b0 <main+0x1e8>)
 8000f96:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 433;             // default = 433 MHz
 8000f98:	4b43      	ldr	r3, [pc, #268]	@ (80010a8 <main+0x1e0>)
 8000f9a:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8000f9e:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 8000fa0:	4b41      	ldr	r3, [pc, #260]	@ (80010a8 <main+0x1e0>)
 8000fa2:	2207      	movs	r2, #7
 8000fa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  myLoRa.bandWidth             = BW_125KHz;       // default = BW_125KHz
 8000fa8:	4b3f      	ldr	r3, [pc, #252]	@ (80010a8 <main+0x1e0>)
 8000faa:	2207      	movs	r2, #7
 8000fac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 8000fb0:	4b3d      	ldr	r3, [pc, #244]	@ (80010a8 <main+0x1e0>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 8000fb8:	4b3b      	ldr	r3, [pc, #236]	@ (80010a8 <main+0x1e0>)
 8000fba:	22ff      	movs	r2, #255	@ 0xff
 8000fbc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  myLoRa.overCurrentProtection = 100;             // default = 100 mA
 8000fc0:	4b39      	ldr	r3, [pc, #228]	@ (80010a8 <main+0x1e0>)
 8000fc2:	2264      	movs	r2, #100	@ 0x64
 8000fc4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  myLoRa.preamble              = 8;              // default = 8;
 8000fc8:	4b37      	ldr	r3, [pc, #220]	@ (80010a8 <main+0x1e0>)
 8000fca:	2208      	movs	r2, #8
 8000fcc:	851a      	strh	r2, [r3, #40]	@ 0x28

  if(LoRa_init(&myLoRa) == LORA_OK){
 8000fce:	4836      	ldr	r0, [pc, #216]	@ (80010a8 <main+0x1e0>)
 8000fd0:	f7ff fdf1 	bl	8000bb6 <LoRa_init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2bc8      	cmp	r3, #200	@ 0xc8
 8000fd8:	d102      	bne.n	8000fe0 <main+0x118>
	  LoRa_stat = 1;
 8000fda:	4b36      	ldr	r3, [pc, #216]	@ (80010b4 <main+0x1ec>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	801a      	strh	r2, [r3, #0]
  }

  LoRa_startReceiving(&myLoRa);
 8000fe0:	4831      	ldr	r0, [pc, #196]	@ (80010a8 <main+0x1e0>)
 8000fe2:	f7ff fd7c 	bl	8000ade <LoRa_startReceiving>

  LoraTxBuffer[0] = 0xAA;
 8000fe6:	4b34      	ldr	r3, [pc, #208]	@ (80010b8 <main+0x1f0>)
 8000fe8:	22aa      	movs	r2, #170	@ 0xaa
 8000fea:	701a      	strb	r2, [r3, #0]
  LoraTxBuffer[1] = 0xBB;
 8000fec:	4b32      	ldr	r3, [pc, #200]	@ (80010b8 <main+0x1f0>)
 8000fee:	22bb      	movs	r2, #187	@ 0xbb
 8000ff0:	705a      	strb	r2, [r3, #1]
  LoraTxBuffer[2] = 0xCC;
 8000ff2:	4b31      	ldr	r3, [pc, #196]	@ (80010b8 <main+0x1f0>)
 8000ff4:	22cc      	movs	r2, #204	@ 0xcc
 8000ff6:	709a      	strb	r2, [r3, #2]

  //LoRa_transmit(&myLoRa, LoraTxBuffer, 3, 500);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) front_array.ir_sen_val_dma, line_sensor_front_channel_number);
 8000ff8:	230a      	movs	r3, #10
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	492f      	ldr	r1, [pc, #188]	@ (80010bc <main+0x1f4>)
 8000ffe:	4830      	ldr	r0, [pc, #192]	@ (80010c0 <main+0x1f8>)
 8001000:	f002 f990 	bl	8003324 <HAL_ADC_Start_DMA>
  ir_array_init(&front_array,
 8001004:	4b2f      	ldr	r3, [pc, #188]	@ (80010c4 <main+0x1fc>)
 8001006:	9307      	str	r3, [sp, #28]
 8001008:	4b2f      	ldr	r3, [pc, #188]	@ (80010c8 <main+0x200>)
 800100a:	9306      	str	r3, [sp, #24]
 800100c:	4b2f      	ldr	r3, [pc, #188]	@ (80010cc <main+0x204>)
 800100e:	9305      	str	r3, [sp, #20]
 8001010:	4b2f      	ldr	r3, [pc, #188]	@ (80010d0 <main+0x208>)
 8001012:	9304      	str	r3, [sp, #16]
 8001014:	4b2f      	ldr	r3, [pc, #188]	@ (80010d4 <main+0x20c>)
 8001016:	9303      	str	r3, [sp, #12]
 8001018:	4b2f      	ldr	r3, [pc, #188]	@ (80010d8 <main+0x210>)
 800101a:	9302      	str	r3, [sp, #8]
 800101c:	4b2f      	ldr	r3, [pc, #188]	@ (80010dc <main+0x214>)
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	4b2f      	ldr	r3, [pc, #188]	@ (80010e0 <main+0x218>)
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	4b2f      	ldr	r3, [pc, #188]	@ (80010e4 <main+0x21c>)
 8001026:	4a30      	ldr	r2, [pc, #192]	@ (80010e8 <main+0x220>)
 8001028:	4930      	ldr	r1, [pc, #192]	@ (80010ec <main+0x224>)
 800102a:	4824      	ldr	r0, [pc, #144]	@ (80010bc <main+0x1f4>)
 800102c:	f7ff fe6a 	bl	8000d04 <ir_array_init>
                &line_sensor_front_on_line_left_number,
                &line_sensor_front_on_line_right_number,
                &line_sensor_front_threshold);


  HAL_ADC_Start_DMA(&hadc3, (uint32_t*) back_array.ir_sen_val_dma, line_sensor_back_channel_number);
 8001030:	230a      	movs	r3, #10
 8001032:	461a      	mov	r2, r3
 8001034:	492e      	ldr	r1, [pc, #184]	@ (80010f0 <main+0x228>)
 8001036:	482f      	ldr	r0, [pc, #188]	@ (80010f4 <main+0x22c>)
 8001038:	f002 f974 	bl	8003324 <HAL_ADC_Start_DMA>
  ir_array_init(&back_array,
 800103c:	4b2e      	ldr	r3, [pc, #184]	@ (80010f8 <main+0x230>)
 800103e:	9307      	str	r3, [sp, #28]
 8001040:	4b2e      	ldr	r3, [pc, #184]	@ (80010fc <main+0x234>)
 8001042:	9306      	str	r3, [sp, #24]
 8001044:	4b2e      	ldr	r3, [pc, #184]	@ (8001100 <main+0x238>)
 8001046:	9305      	str	r3, [sp, #20]
 8001048:	4b2e      	ldr	r3, [pc, #184]	@ (8001104 <main+0x23c>)
 800104a:	9304      	str	r3, [sp, #16]
 800104c:	4b2e      	ldr	r3, [pc, #184]	@ (8001108 <main+0x240>)
 800104e:	9303      	str	r3, [sp, #12]
 8001050:	4b2e      	ldr	r3, [pc, #184]	@ (800110c <main+0x244>)
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	4b2e      	ldr	r3, [pc, #184]	@ (8001110 <main+0x248>)
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	4b2e      	ldr	r3, [pc, #184]	@ (8001114 <main+0x24c>)
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	4b2e      	ldr	r3, [pc, #184]	@ (8001118 <main+0x250>)
 800105e:	4a2f      	ldr	r2, [pc, #188]	@ (800111c <main+0x254>)
 8001060:	492f      	ldr	r1, [pc, #188]	@ (8001120 <main+0x258>)
 8001062:	4823      	ldr	r0, [pc, #140]	@ (80010f0 <main+0x228>)
 8001064:	f7ff fe4e 	bl	8000d04 <ir_array_init>

//	  motor_enable_velocity_mode(0x01);
//	  motor_enable_velocity_mode(0x02);
//	  HAL_Delay(10);
//
	  rs485_enable_velocity_mode(&m1_driver);
 8001068:	4808      	ldr	r0, [pc, #32]	@ (800108c <main+0x1c4>)
 800106a:	f000 feca 	bl	8001e02 <rs485_enable_velocity_mode>
	  rs485_set_speed(&m1_driver, 100, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2164      	movs	r1, #100	@ 0x64
 8001072:	4806      	ldr	r0, [pc, #24]	@ (800108c <main+0x1c4>)
 8001074:	f000 fe6d 	bl	8001d52 <rs485_set_speed>
	  rs485_enable_velocity_mode(&m2_driver);
 8001078:	4807      	ldr	r0, [pc, #28]	@ (8001098 <main+0x1d0>)
 800107a:	f000 fec2 	bl	8001e02 <rs485_enable_velocity_mode>
	  rs485_set_speed(&m2_driver, 100, 1);
 800107e:	2201      	movs	r2, #1
 8001080:	2164      	movs	r1, #100	@ 0x64
 8001082:	4805      	ldr	r0, [pc, #20]	@ (8001098 <main+0x1d0>)
 8001084:	f000 fe65 	bl	8001d52 <rs485_set_speed>
  {
 8001088:	bf00      	nop
 800108a:	e7ed      	b.n	8001068 <main+0x1a0>
 800108c:	24000448 	.word	0x24000448
 8001090:	240003b4 	.word	0x240003b4
 8001094:	58021000 	.word	0x58021000
 8001098:	2400047c 	.word	0x2400047c
 800109c:	24000320 	.word	0x24000320
 80010a0:	58020400 	.word	0x58020400
 80010a4:	240002d4 	.word	0x240002d4
 80010a8:	240005c0 	.word	0x240005c0
 80010ac:	58021800 	.word	0x58021800
 80010b0:	2400024c 	.word	0x2400024c
 80010b4:	240005ec 	.word	0x240005ec
 80010b8:	240005f0 	.word	0x240005f0
 80010bc:	240004ec 	.word	0x240004ec
 80010c0:	2400007c 	.word	0x2400007c
 80010c4:	0800f9f2 	.word	0x0800f9f2
 80010c8:	240004e2 	.word	0x240004e2
 80010cc:	240004e0 	.word	0x240004e0
 80010d0:	240004e1 	.word	0x240004e1
 80010d4:	240004e3 	.word	0x240004e3
 80010d8:	240004b0 	.word	0x240004b0
 80010dc:	240004e8 	.word	0x240004e8
 80010e0:	0800f9f0 	.word	0x0800f9f0
 80010e4:	24000014 	.word	0x24000014
 80010e8:	24000000 	.word	0x24000000
 80010ec:	240004b8 	.word	0x240004b8
 80010f0:	24000554 	.word	0x24000554
 80010f4:	240000ec 	.word	0x240000ec
 80010f8:	0800f9f4 	.word	0x0800f9f4
 80010fc:	240004e6 	.word	0x240004e6
 8001100:	240004e4 	.word	0x240004e4
 8001104:	240004e5 	.word	0x240004e5
 8001108:	240004e7 	.word	0x240004e7
 800110c:	240004b4 	.word	0x240004b4
 8001110:	240004ea 	.word	0x240004ea
 8001114:	0800f9f1 	.word	0x0800f9f1
 8001118:	2400003c 	.word	0x2400003c
 800111c:	24000028 	.word	0x24000028
 8001120:	240004cc 	.word	0x240004cc

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09c      	sub	sp, #112	@ 0x70
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800112e:	224c      	movs	r2, #76	@ 0x4c
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f00e fbee 	bl	800f914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2220      	movs	r2, #32
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f00e fbe8 	bl	800f914 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001144:	2002      	movs	r0, #2
 8001146:	f006 fddf 	bl	8007d08 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800114a:	2300      	movs	r3, #0
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	4b2d      	ldr	r3, [pc, #180]	@ (8001204 <SystemClock_Config+0xe0>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	4a2c      	ldr	r2, [pc, #176]	@ (8001204 <SystemClock_Config+0xe0>)
 8001154:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001158:	6193      	str	r3, [r2, #24]
 800115a:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <SystemClock_Config+0xe0>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001166:	bf00      	nop
 8001168:	4b26      	ldr	r3, [pc, #152]	@ (8001204 <SystemClock_Config+0xe0>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001170:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001174:	d1f8      	bne.n	8001168 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001176:	2303      	movs	r3, #3
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800117a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800117e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001180:	2301      	movs	r3, #1
 8001182:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001184:	2340      	movs	r3, #64	@ 0x40
 8001186:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001188:	2302      	movs	r3, #2
 800118a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118c:	2302      	movs	r3, #2
 800118e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001190:	2302      	movs	r3, #2
 8001192:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001194:	232c      	movs	r3, #44	@ 0x2c
 8001196:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001198:	2301      	movs	r3, #1
 800119a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800119c:	2303      	movs	r3, #3
 800119e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011a4:	230c      	movs	r3, #12
 80011a6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b4:	4618      	mov	r0, r3
 80011b6:	f006 fde1 	bl	8007d7c <HAL_RCC_OscConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80011c0:	f000 fd50 	bl	8001c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c4:	233f      	movs	r3, #63	@ 0x3f
 80011c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c8:	2303      	movs	r3, #3
 80011ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80011d0:	2308      	movs	r3, #8
 80011d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011d4:	2340      	movs	r3, #64	@ 0x40
 80011d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011d8:	2340      	movs	r3, #64	@ 0x40
 80011da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80011e2:	2340      	movs	r3, #64	@ 0x40
 80011e4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	2103      	movs	r1, #3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f007 f9a0 	bl	8008530 <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80011f6:	f000 fd35 	bl	8001c64 <Error_Handler>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3770      	adds	r7, #112	@ 0x70
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	58024800 	.word	0x58024800

08001208 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b0ae      	sub	sp, #184	@ 0xb8
 800120c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800120e:	463b      	mov	r3, r7
 8001210:	22b8      	movs	r2, #184	@ 0xb8
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f00e fb7d 	bl	800f914 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CKPER;
 800121a:	4a14      	ldr	r2, [pc, #80]	@ (800126c <PeriphCommonClock_Config+0x64>)
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001224:	2302      	movs	r3, #2
 8001226:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 8001228:	230f      	movs	r3, #15
 800122a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800122c:	2302      	movs	r3, #2
 800122e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001230:	2302      	movs	r3, #2
 8001232:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001234:	2302      	movs	r3, #2
 8001236:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001238:	23c0      	movs	r3, #192	@ 0xc0
 800123a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 8001240:	f640 3386 	movw	r3, #2950	@ 0xb86
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001246:	2300      	movs	r3, #0
 8001248:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	4618      	mov	r0, r3
 8001254:	f007 fcf8 	bl	8008c48 <HAL_RCCEx_PeriphCLKConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800125e:	f000 fd01 	bl	8001c64 <Error_Handler>
  }
}
 8001262:	bf00      	nop
 8001264:	37b8      	adds	r7, #184	@ 0xb8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	80080000 	.word	0x80080000

08001270 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08c      	sub	sp, #48	@ 0x30
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001276:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001282:	463b      	mov	r3, r7
 8001284:	2224      	movs	r2, #36	@ 0x24
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f00e fb43 	bl	800f914 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800128e:	4b75      	ldr	r3, [pc, #468]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 8001290:	4a75      	ldr	r2, [pc, #468]	@ (8001468 <MX_ADC1_Init+0x1f8>)
 8001292:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001294:	4b73      	ldr	r3, [pc, #460]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 8001296:	2200      	movs	r2, #0
 8001298:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800129a:	4b72      	ldr	r3, [pc, #456]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 800129c:	2208      	movs	r2, #8
 800129e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012a0:	4b70      	ldr	r3, [pc, #448]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 80012a8:	2204      	movs	r2, #4
 80012aa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012ac:	4b6d      	ldr	r3, [pc, #436]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 80012b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 80012ba:	220a      	movs	r2, #10
 80012bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012be:	4b69      	ldr	r3, [pc, #420]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012c6:	4b67      	ldr	r3, [pc, #412]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012cc:	4b65      	ldr	r3, [pc, #404]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012d2:	4b64      	ldr	r3, [pc, #400]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 80012d4:	2203      	movs	r2, #3
 80012d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012d8:	4b62      	ldr	r3, [pc, #392]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 80012da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012de:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012e0:	4b60      	ldr	r3, [pc, #384]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80012e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80012ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012f4:	485b      	ldr	r0, [pc, #364]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 80012f6:	f001 fe0d 	bl	8002f14 <HAL_ADC_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001300:	f000 fcb0 	bl	8001c64 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001308:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800130c:	4619      	mov	r1, r3
 800130e:	4855      	ldr	r0, [pc, #340]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 8001310:	f003 fada 	bl	80048c8 <HAL_ADCEx_MultiModeConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800131a:	f000 fca3 	bl	8001c64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800131e:	4b53      	ldr	r3, [pc, #332]	@ (800146c <MX_ADC1_Init+0x1fc>)
 8001320:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001322:	2306      	movs	r3, #6
 8001324:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8001326:	2305      	movs	r3, #5
 8001328:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800132a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800132e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001330:	2304      	movs	r3, #4
 8001332:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133e:	463b      	mov	r3, r7
 8001340:	4619      	mov	r1, r3
 8001342:	4848      	ldr	r0, [pc, #288]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 8001344:	f002 fb2c 	bl	80039a0 <HAL_ADC_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800134e:	f000 fc89 	bl	8001c64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001352:	4b47      	ldr	r3, [pc, #284]	@ (8001470 <MX_ADC1_Init+0x200>)
 8001354:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001356:	230c      	movs	r3, #12
 8001358:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800135a:	463b      	mov	r3, r7
 800135c:	4619      	mov	r1, r3
 800135e:	4841      	ldr	r0, [pc, #260]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 8001360:	f002 fb1e 	bl	80039a0 <HAL_ADC_ConfigChannel>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800136a:	f000 fc7b 	bl	8001c64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800136e:	4b41      	ldr	r3, [pc, #260]	@ (8001474 <MX_ADC1_Init+0x204>)
 8001370:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001372:	2312      	movs	r3, #18
 8001374:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001376:	463b      	mov	r3, r7
 8001378:	4619      	mov	r1, r3
 800137a:	483a      	ldr	r0, [pc, #232]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 800137c:	f002 fb10 	bl	80039a0 <HAL_ADC_ConfigChannel>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8001386:	f000 fc6d 	bl	8001c64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800138a:	4b3b      	ldr	r3, [pc, #236]	@ (8001478 <MX_ADC1_Init+0x208>)
 800138c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800138e:	2318      	movs	r3, #24
 8001390:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	4619      	mov	r1, r3
 8001396:	4833      	ldr	r0, [pc, #204]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 8001398:	f002 fb02 	bl	80039a0 <HAL_ADC_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 80013a2:	f000 fc5f 	bl	8001c64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80013a6:	4b35      	ldr	r3, [pc, #212]	@ (800147c <MX_ADC1_Init+0x20c>)
 80013a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80013aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b0:	463b      	mov	r3, r7
 80013b2:	4619      	mov	r1, r3
 80013b4:	482b      	ldr	r0, [pc, #172]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 80013b6:	f002 faf3 	bl	80039a0 <HAL_ADC_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80013c0:	f000 fc50 	bl	8001c64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80013c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001480 <MX_ADC1_Init+0x210>)
 80013c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013c8:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80013cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ce:	463b      	mov	r3, r7
 80013d0:	4619      	mov	r1, r3
 80013d2:	4824      	ldr	r0, [pc, #144]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 80013d4:	f002 fae4 	bl	80039a0 <HAL_ADC_ConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 80013de:	f000 fc41 	bl	8001c64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013e2:	4b28      	ldr	r3, [pc, #160]	@ (8001484 <MX_ADC1_Init+0x214>)
 80013e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013e6:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80013ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ec:	463b      	mov	r3, r7
 80013ee:	4619      	mov	r1, r3
 80013f0:	481c      	ldr	r0, [pc, #112]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 80013f2:	f002 fad5 	bl	80039a0 <HAL_ADC_ConfigChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 80013fc:	f000 fc32 	bl	8001c64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001400:	4b21      	ldr	r3, [pc, #132]	@ (8001488 <MX_ADC1_Init+0x218>)
 8001402:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001404:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8001408:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800140a:	463b      	mov	r3, r7
 800140c:	4619      	mov	r1, r3
 800140e:	4815      	ldr	r0, [pc, #84]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 8001410:	f002 fac6 	bl	80039a0 <HAL_ADC_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 800141a:	f000 fc23 	bl	8001c64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800141e:	4b1b      	ldr	r3, [pc, #108]	@ (800148c <MX_ADC1_Init+0x21c>)
 8001420:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001422:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001426:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	4619      	mov	r1, r3
 800142c:	480d      	ldr	r0, [pc, #52]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 800142e:	f002 fab7 	bl	80039a0 <HAL_ADC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC1_Init+0x1cc>
  {
    Error_Handler();
 8001438:	f000 fc14 	bl	8001c64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800143c:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <MX_ADC1_Init+0x220>)
 800143e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001440:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001444:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001446:	463b      	mov	r3, r7
 8001448:	4619      	mov	r1, r3
 800144a:	4806      	ldr	r0, [pc, #24]	@ (8001464 <MX_ADC1_Init+0x1f4>)
 800144c:	f002 faa8 	bl	80039a0 <HAL_ADC_ConfigChannel>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_ADC1_Init+0x1ea>
  {
    Error_Handler();
 8001456:	f000 fc05 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	3730      	adds	r7, #48	@ 0x30
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2400007c 	.word	0x2400007c
 8001468:	40022000 	.word	0x40022000
 800146c:	08600004 	.word	0x08600004
 8001470:	0c900008 	.word	0x0c900008
 8001474:	10c00010 	.word	0x10c00010
 8001478:	14f00020 	.word	0x14f00020
 800147c:	19200040 	.word	0x19200040
 8001480:	1d500080 	.word	0x1d500080
 8001484:	21800100 	.word	0x21800100
 8001488:	25b00200 	.word	0x25b00200
 800148c:	2a000400 	.word	0x2a000400
 8001490:	2e300800 	.word	0x2e300800

08001494 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	@ 0x28
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	2224      	movs	r2, #36	@ 0x24
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f00e fa37 	bl	800f914 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014a6:	4b73      	ldr	r3, [pc, #460]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 80014a8:	4a73      	ldr	r2, [pc, #460]	@ (8001678 <MX_ADC3_Init+0x1e4>)
 80014aa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014ac:	4b71      	ldr	r3, [pc, #452]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014b2:	4b70      	ldr	r3, [pc, #448]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 80014b4:	2208      	movs	r2, #8
 80014b6:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80014b8:	4b6e      	ldr	r3, [pc, #440]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014be:	4b6d      	ldr	r3, [pc, #436]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014c4:	4b6b      	ldr	r3, [pc, #428]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 80014c6:	2204      	movs	r2, #4
 80014c8:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80014ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014d0:	4b68      	ldr	r3, [pc, #416]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 10;
 80014d6:	4b67      	ldr	r3, [pc, #412]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 80014d8:	220a      	movs	r2, #10
 80014da:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014dc:	4b65      	ldr	r3, [pc, #404]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014e4:	4b63      	ldr	r3, [pc, #396]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ea:	4b62      	ldr	r3, [pc, #392]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80014f0:	4b60      	ldr	r3, [pc, #384]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80014f8:	4b5e      	ldr	r3, [pc, #376]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80014fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 8001500:	2203      	movs	r2, #3
 8001502:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001504:	4b5b      	ldr	r3, [pc, #364]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 8001506:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800150a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800150c:	4b59      	ldr	r3, [pc, #356]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 800150e:	2200      	movs	r2, #0
 8001510:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001512:	4b58      	ldr	r3, [pc, #352]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 800151a:	4b56      	ldr	r3, [pc, #344]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 800151c:	2200      	movs	r2, #0
 800151e:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001520:	4854      	ldr	r0, [pc, #336]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 8001522:	f001 fcf7 	bl	8002f14 <HAL_ADC_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_ADC3_Init+0x9c>
  {
    Error_Handler();
 800152c:	f000 fb9a 	bl	8001c64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001530:	2301      	movs	r3, #1
 8001532:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001534:	2306      	movs	r3, #6
 8001536:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_92CYCLES_5;
 8001538:	2305      	movs	r3, #5
 800153a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800153c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001540:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001542:	2304      	movs	r3, #4
 8001544:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	4619      	mov	r1, r3
 8001552:	4848      	ldr	r0, [pc, #288]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 8001554:	f002 fa24 	bl	80039a0 <HAL_ADC_ConfigChannel>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800155e:	f000 fb81 	bl	8001c64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001562:	4b46      	ldr	r3, [pc, #280]	@ (800167c <MX_ADC3_Init+0x1e8>)
 8001564:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001566:	230c      	movs	r3, #12
 8001568:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4619      	mov	r1, r3
 800156e:	4841      	ldr	r0, [pc, #260]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 8001570:	f002 fa16 	bl	80039a0 <HAL_ADC_ConfigChannel>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800157a:	f000 fb73 	bl	8001c64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800157e:	4b40      	ldr	r3, [pc, #256]	@ (8001680 <MX_ADC3_Init+0x1ec>)
 8001580:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001582:	2312      	movs	r3, #18
 8001584:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	4619      	mov	r1, r3
 800158a:	483a      	ldr	r0, [pc, #232]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 800158c:	f002 fa08 	bl	80039a0 <HAL_ADC_ConfigChannel>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001596:	f000 fb65 	bl	8001c64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800159a:	4b3a      	ldr	r3, [pc, #232]	@ (8001684 <MX_ADC3_Init+0x1f0>)
 800159c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800159e:	2318      	movs	r3, #24
 80015a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	4619      	mov	r1, r3
 80015a6:	4833      	ldr	r0, [pc, #204]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 80015a8:	f002 f9fa 	bl	80039a0 <HAL_ADC_ConfigChannel>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_ADC3_Init+0x122>
  {
    Error_Handler();
 80015b2:	f000 fb57 	bl	8001c64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015b6:	4b34      	ldr	r3, [pc, #208]	@ (8001688 <MX_ADC3_Init+0x1f4>)
 80015b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80015ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	4619      	mov	r1, r3
 80015c4:	482b      	ldr	r0, [pc, #172]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 80015c6:	f002 f9eb 	bl	80039a0 <HAL_ADC_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_ADC3_Init+0x140>
  {
    Error_Handler();
 80015d0:	f000 fb48 	bl	8001c64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80015d4:	4b2d      	ldr	r3, [pc, #180]	@ (800168c <MX_ADC3_Init+0x1f8>)
 80015d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80015d8:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80015dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	4824      	ldr	r0, [pc, #144]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 80015e4:	f002 f9dc 	bl	80039a0 <HAL_ADC_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_ADC3_Init+0x15e>
  {
    Error_Handler();
 80015ee:	f000 fb39 	bl	8001c64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80015f2:	4b27      	ldr	r3, [pc, #156]	@ (8001690 <MX_ADC3_Init+0x1fc>)
 80015f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80015f6:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80015fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	4619      	mov	r1, r3
 8001600:	481c      	ldr	r0, [pc, #112]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 8001602:	f002 f9cd 	bl	80039a0 <HAL_ADC_ConfigChannel>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_ADC3_Init+0x17c>
  {
    Error_Handler();
 800160c:	f000 fb2a 	bl	8001c64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001610:	4b20      	ldr	r3, [pc, #128]	@ (8001694 <MX_ADC3_Init+0x200>)
 8001612:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001614:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8001618:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	4619      	mov	r1, r3
 800161e:	4815      	ldr	r0, [pc, #84]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 8001620:	f002 f9be 	bl	80039a0 <HAL_ADC_ConfigChannel>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_ADC3_Init+0x19a>
  {
    Error_Handler();
 800162a:	f000 fb1b 	bl	8001c64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800162e:	4b1a      	ldr	r3, [pc, #104]	@ (8001698 <MX_ADC3_Init+0x204>)
 8001630:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001632:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001636:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	4619      	mov	r1, r3
 800163c:	480d      	ldr	r0, [pc, #52]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 800163e:	f002 f9af 	bl	80039a0 <HAL_ADC_ConfigChannel>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_ADC3_Init+0x1b8>
  {
    Error_Handler();
 8001648:	f000 fb0c 	bl	8001c64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800164c:	4b13      	ldr	r3, [pc, #76]	@ (800169c <MX_ADC3_Init+0x208>)
 800164e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001650:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001654:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	4619      	mov	r1, r3
 800165a:	4806      	ldr	r0, [pc, #24]	@ (8001674 <MX_ADC3_Init+0x1e0>)
 800165c:	f002 f9a0 	bl	80039a0 <HAL_ADC_ConfigChannel>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_ADC3_Init+0x1d6>
  {
    Error_Handler();
 8001666:	f000 fafd 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	3728      	adds	r7, #40	@ 0x28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	240000ec 	.word	0x240000ec
 8001678:	58026000 	.word	0x58026000
 800167c:	04300002 	.word	0x04300002
 8001680:	08600004 	.word	0x08600004
 8001684:	0c900008 	.word	0x0c900008
 8001688:	10c00010 	.word	0x10c00010
 800168c:	14f00020 	.word	0x14f00020
 8001690:	19200040 	.word	0x19200040
 8001694:	1d500080 	.word	0x1d500080
 8001698:	21800100 	.word	0x21800100
 800169c:	25b00200 	.word	0x25b00200

080016a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016a4:	4b27      	ldr	r3, [pc, #156]	@ (8001744 <MX_SPI1_Init+0xa4>)
 80016a6:	4a28      	ldr	r2, [pc, #160]	@ (8001748 <MX_SPI1_Init+0xa8>)
 80016a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016aa:	4b26      	ldr	r3, [pc, #152]	@ (8001744 <MX_SPI1_Init+0xa4>)
 80016ac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80016b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016b2:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <MX_SPI1_Init+0xa4>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016b8:	4b22      	ldr	r3, [pc, #136]	@ (8001744 <MX_SPI1_Init+0xa4>)
 80016ba:	2207      	movs	r2, #7
 80016bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016be:	4b21      	ldr	r3, [pc, #132]	@ (8001744 <MX_SPI1_Init+0xa4>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001744 <MX_SPI1_Init+0xa4>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001744 <MX_SPI1_Init+0xa4>)
 80016cc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80016d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001744 <MX_SPI1_Init+0xa4>)
 80016d4:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80016d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016da:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <MX_SPI1_Init+0xa4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016e0:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <MX_SPI1_Init+0xa4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016e6:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <MX_SPI1_Init+0xa4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80016ec:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <MX_SPI1_Init+0xa4>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016f2:	4b14      	ldr	r3, [pc, #80]	@ (8001744 <MX_SPI1_Init+0xa4>)
 80016f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016fa:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <MX_SPI1_Init+0xa4>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001700:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <MX_SPI1_Init+0xa4>)
 8001702:	2200      	movs	r2, #0
 8001704:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001706:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <MX_SPI1_Init+0xa4>)
 8001708:	2200      	movs	r2, #0
 800170a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800170c:	4b0d      	ldr	r3, [pc, #52]	@ (8001744 <MX_SPI1_Init+0xa4>)
 800170e:	2200      	movs	r2, #0
 8001710:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001712:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <MX_SPI1_Init+0xa4>)
 8001714:	2200      	movs	r2, #0
 8001716:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001718:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <MX_SPI1_Init+0xa4>)
 800171a:	2200      	movs	r2, #0
 800171c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800171e:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <MX_SPI1_Init+0xa4>)
 8001720:	2200      	movs	r2, #0
 8001722:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001724:	4b07      	ldr	r3, [pc, #28]	@ (8001744 <MX_SPI1_Init+0xa4>)
 8001726:	2200      	movs	r2, #0
 8001728:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <MX_SPI1_Init+0xa4>)
 800172c:	2200      	movs	r2, #0
 800172e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001730:	4804      	ldr	r0, [pc, #16]	@ (8001744 <MX_SPI1_Init+0xa4>)
 8001732:	f009 fe6f 	bl	800b414 <HAL_SPI_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800173c:	f000 fa92 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	2400024c 	.word	0x2400024c
 8001748:	40013000 	.word	0x40013000

0800174c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	@ 0x28
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001752:	f107 031c 	add.w	r3, r7, #28
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800175e:	463b      	mov	r3, r7
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
 800176c:	615a      	str	r2, [r3, #20]
 800176e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001770:	4b27      	ldr	r3, [pc, #156]	@ (8001810 <MX_TIM2_Init+0xc4>)
 8001772:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001776:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8001778:	4b25      	ldr	r3, [pc, #148]	@ (8001810 <MX_TIM2_Init+0xc4>)
 800177a:	2240      	movs	r2, #64	@ 0x40
 800177c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177e:	4b24      	ldr	r3, [pc, #144]	@ (8001810 <MX_TIM2_Init+0xc4>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001784:	4b22      	ldr	r3, [pc, #136]	@ (8001810 <MX_TIM2_Init+0xc4>)
 8001786:	22ff      	movs	r2, #255	@ 0xff
 8001788:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178a:	4b21      	ldr	r3, [pc, #132]	@ (8001810 <MX_TIM2_Init+0xc4>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001790:	4b1f      	ldr	r3, [pc, #124]	@ (8001810 <MX_TIM2_Init+0xc4>)
 8001792:	2280      	movs	r2, #128	@ 0x80
 8001794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001796:	481e      	ldr	r0, [pc, #120]	@ (8001810 <MX_TIM2_Init+0xc4>)
 8001798:	f00a fcb7 	bl	800c10a <HAL_TIM_PWM_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80017a2:	f000 fa5f 	bl	8001c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ae:	f107 031c 	add.w	r3, r7, #28
 80017b2:	4619      	mov	r1, r3
 80017b4:	4816      	ldr	r0, [pc, #88]	@ (8001810 <MX_TIM2_Init+0xc4>)
 80017b6:	f00b fadd 	bl	800cd74 <HAL_TIMEx_MasterConfigSynchronization>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80017c0:	f000 fa50 	bl	8001c64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c4:	2360      	movs	r3, #96	@ 0x60
 80017c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80017d0:	2304      	movs	r3, #4
 80017d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017d4:	463b      	mov	r3, r7
 80017d6:	2200      	movs	r2, #0
 80017d8:	4619      	mov	r1, r3
 80017da:	480d      	ldr	r0, [pc, #52]	@ (8001810 <MX_TIM2_Init+0xc4>)
 80017dc:	f00a fe08 	bl	800c3f0 <HAL_TIM_PWM_ConfigChannel>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80017e6:	f000 fa3d 	bl	8001c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017ea:	463b      	mov	r3, r7
 80017ec:	2204      	movs	r2, #4
 80017ee:	4619      	mov	r1, r3
 80017f0:	4807      	ldr	r0, [pc, #28]	@ (8001810 <MX_TIM2_Init+0xc4>)
 80017f2:	f00a fdfd 	bl	800c3f0 <HAL_TIM_PWM_ConfigChannel>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80017fc:	f000 fa32 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001800:	4803      	ldr	r0, [pc, #12]	@ (8001810 <MX_TIM2_Init+0xc4>)
 8001802:	f000 fd9d 	bl	8002340 <HAL_TIM_MspPostInit>

}
 8001806:	bf00      	nop
 8001808:	3728      	adds	r7, #40	@ 0x28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	240002d4 	.word	0x240002d4

08001814 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001818:	4b22      	ldr	r3, [pc, #136]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 800181a:	4a23      	ldr	r2, [pc, #140]	@ (80018a8 <MX_USART1_UART_Init+0x94>)
 800181c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800181e:	4b21      	ldr	r3, [pc, #132]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 8001820:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001824:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001826:	4b1f      	ldr	r3, [pc, #124]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800182c:	4b1d      	ldr	r3, [pc, #116]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001832:	4b1c      	ldr	r3, [pc, #112]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001838:	4b1a      	ldr	r3, [pc, #104]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 800183a:	220c      	movs	r2, #12
 800183c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183e:	4b19      	ldr	r3, [pc, #100]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001844:	4b17      	ldr	r3, [pc, #92]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800184a:	4b16      	ldr	r3, [pc, #88]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 800184c:	2200      	movs	r2, #0
 800184e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001850:	4b14      	ldr	r3, [pc, #80]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 8001852:	2200      	movs	r2, #0
 8001854:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001856:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 8001858:	2200      	movs	r2, #0
 800185a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800185c:	4811      	ldr	r0, [pc, #68]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 800185e:	f00b fb25 	bl	800ceac <HAL_UART_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001868:	f000 f9fc 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800186c:	2100      	movs	r1, #0
 800186e:	480d      	ldr	r0, [pc, #52]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 8001870:	f00d ff35 	bl	800f6de <HAL_UARTEx_SetTxFifoThreshold>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800187a:	f000 f9f3 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800187e:	2100      	movs	r1, #0
 8001880:	4808      	ldr	r0, [pc, #32]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 8001882:	f00d ff6a 	bl	800f75a <HAL_UARTEx_SetRxFifoThreshold>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800188c:	f000 f9ea 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001890:	4804      	ldr	r0, [pc, #16]	@ (80018a4 <MX_USART1_UART_Init+0x90>)
 8001892:	f00d feeb 	bl	800f66c <HAL_UARTEx_DisableFifoMode>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800189c:	f000 f9e2 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	24000320 	.word	0x24000320
 80018a8:	40011000 	.word	0x40011000

080018ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018b0:	4b22      	ldr	r3, [pc, #136]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018b2:	4a23      	ldr	r2, [pc, #140]	@ (8001940 <MX_USART3_UART_Init+0x94>)
 80018b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018b6:	4b21      	ldr	r3, [pc, #132]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018be:	4b1f      	ldr	r3, [pc, #124]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018c4:	4b1d      	ldr	r3, [pc, #116]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018ca:	4b1c      	ldr	r3, [pc, #112]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018d2:	220c      	movs	r2, #12
 80018d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d6:	4b19      	ldr	r3, [pc, #100]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018dc:	4b17      	ldr	r3, [pc, #92]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e2:	4b16      	ldr	r3, [pc, #88]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018e8:	4b14      	ldr	r3, [pc, #80]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ee:	4b13      	ldr	r3, [pc, #76]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018f4:	4811      	ldr	r0, [pc, #68]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018f6:	f00b fad9 	bl	800ceac <HAL_UART_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001900:	f000 f9b0 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001904:	2100      	movs	r1, #0
 8001906:	480d      	ldr	r0, [pc, #52]	@ (800193c <MX_USART3_UART_Init+0x90>)
 8001908:	f00d fee9 	bl	800f6de <HAL_UARTEx_SetTxFifoThreshold>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001912:	f000 f9a7 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001916:	2100      	movs	r1, #0
 8001918:	4808      	ldr	r0, [pc, #32]	@ (800193c <MX_USART3_UART_Init+0x90>)
 800191a:	f00d ff1e 	bl	800f75a <HAL_UARTEx_SetRxFifoThreshold>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001924:	f000 f99e 	bl	8001c64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001928:	4804      	ldr	r0, [pc, #16]	@ (800193c <MX_USART3_UART_Init+0x90>)
 800192a:	f00d fe9f 	bl	800f66c <HAL_UARTEx_DisableFifoMode>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001934:	f000 f996 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	240003b4 	.word	0x240003b4
 8001940:	40004800 	.word	0x40004800

08001944 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800194a:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <MX_DMA_Init+0x4c>)
 800194c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001950:	4a0f      	ldr	r2, [pc, #60]	@ (8001990 <MX_DMA_Init+0x4c>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800195a:	4b0d      	ldr	r3, [pc, #52]	@ (8001990 <MX_DMA_Init+0x4c>)
 800195c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001968:	2200      	movs	r2, #0
 800196a:	2100      	movs	r1, #0
 800196c:	200b      	movs	r0, #11
 800196e:	f003 f968 	bl	8004c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001972:	200b      	movs	r0, #11
 8001974:	f003 f97f 	bl	8004c76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001978:	2200      	movs	r2, #0
 800197a:	2100      	movs	r1, #0
 800197c:	200c      	movs	r0, #12
 800197e:	f003 f960 	bl	8004c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001982:	200c      	movs	r0, #12
 8001984:	f003 f977 	bl	8004c76 <HAL_NVIC_EnableIRQ>

}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	58024400 	.word	0x58024400

08001994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08e      	sub	sp, #56	@ 0x38
 8001998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019aa:	4ba7      	ldr	r3, [pc, #668]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 80019ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019b0:	4aa5      	ldr	r2, [pc, #660]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 80019b2:	f043 0310 	orr.w	r3, r3, #16
 80019b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019ba:	4ba3      	ldr	r3, [pc, #652]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 80019bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019c0:	f003 0310 	and.w	r3, r3, #16
 80019c4:	623b      	str	r3, [r7, #32]
 80019c6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c8:	4b9f      	ldr	r3, [pc, #636]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 80019ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ce:	4a9e      	ldr	r2, [pc, #632]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 80019d0:	f043 0304 	orr.w	r3, r3, #4
 80019d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019d8:	4b9b      	ldr	r3, [pc, #620]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 80019da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	61fb      	str	r3, [r7, #28]
 80019e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019e6:	4b98      	ldr	r3, [pc, #608]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 80019e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ec:	4a96      	ldr	r2, [pc, #600]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 80019ee:	f043 0320 	orr.w	r3, r3, #32
 80019f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019f6:	4b94      	ldr	r3, [pc, #592]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 80019f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019fc:	f003 0320 	and.w	r3, r3, #32
 8001a00:	61bb      	str	r3, [r7, #24]
 8001a02:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a04:	4b90      	ldr	r3, [pc, #576]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 8001a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a0a:	4a8f      	ldr	r2, [pc, #572]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 8001a0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a14:	4b8c      	ldr	r3, [pc, #560]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 8001a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	4b89      	ldr	r3, [pc, #548]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 8001a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a28:	4a87      	ldr	r2, [pc, #540]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a32:	4b85      	ldr	r3, [pc, #532]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a40:	4b81      	ldr	r3, [pc, #516]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a46:	4a80      	ldr	r2, [pc, #512]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a50:	4b7d      	ldr	r3, [pc, #500]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 8001a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a5e:	4b7a      	ldr	r3, [pc, #488]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 8001a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a64:	4a78      	ldr	r2, [pc, #480]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 8001a66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a6e:	4b76      	ldr	r3, [pc, #472]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 8001a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a7c:	4b72      	ldr	r3, [pc, #456]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 8001a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a82:	4a71      	ldr	r2, [pc, #452]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 8001a84:	f043 0308 	orr.w	r3, r3, #8
 8001a88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a8c:	4b6e      	ldr	r3, [pc, #440]	@ (8001c48 <MX_GPIO_Init+0x2b4>)
 8001a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001aa0:	486a      	ldr	r0, [pc, #424]	@ (8001c4c <MX_GPIO_Init+0x2b8>)
 8001aa2:	f006 f8e3 	bl	8007c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN3_Pin|IN4_Pin|IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	213c      	movs	r1, #60	@ 0x3c
 8001aaa:	4869      	ldr	r0, [pc, #420]	@ (8001c50 <MX_GPIO_Init+0x2bc>)
 8001aac:	f006 f8de 	bl	8007c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TRIG_Pin|RS485_M2_TX_EN_Pin, GPIO_PIN_RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8001ab6:	4867      	ldr	r0, [pc, #412]	@ (8001c54 <MX_GPIO_Init+0x2c0>)
 8001ab8:	f006 f8d8 	bl	8007c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_M1_TX_EN_GPIO_Port, RS485_M1_TX_EN_Pin, GPIO_PIN_RESET);
 8001abc:	2200      	movs	r2, #0
 8001abe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ac2:	4865      	ldr	r0, [pc, #404]	@ (8001c58 <MX_GPIO_Init+0x2c4>)
 8001ac4:	f006 f8d2 	bl	8007c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|LORA_TX_LED_Pin, GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001ace:	4863      	ldr	r0, [pc, #396]	@ (8001c5c <MX_GPIO_Init+0x2c8>)
 8001ad0:	f006 f8cc 	bl	8007c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RX_LED_GPIO_Port, LORA_RX_LED_Pin, GPIO_PIN_SET);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	2140      	movs	r1, #64	@ 0x40
 8001ad8:	4861      	ldr	r0, [pc, #388]	@ (8001c60 <MX_GPIO_Init+0x2cc>)
 8001ada:	f006 f8c7 	bl	8007c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LORA_NSS_Pin|LORA_RST_Pin, GPIO_PIN_SET);
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001ae4:	485d      	ldr	r0, [pc, #372]	@ (8001c5c <MX_GPIO_Init+0x2c8>)
 8001ae6:	f006 f8c1 	bl	8007c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_0
 8001aea:	231f      	movs	r3, #31
 8001aec:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001af8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001afc:	4619      	mov	r1, r3
 8001afe:	4855      	ldr	r0, [pc, #340]	@ (8001c54 <MX_GPIO_Init+0x2c0>)
 8001b00:	f005 ff0c 	bl	800791c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	484b      	ldr	r0, [pc, #300]	@ (8001c4c <MX_GPIO_Init+0x2b8>)
 8001b1e:	f005 fefd 	bl	800791c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN3_Pin IN4_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin|IN2_Pin|IN1_Pin;
 8001b22:	233c      	movs	r3, #60	@ 0x3c
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b36:	4619      	mov	r1, r3
 8001b38:	4845      	ldr	r0, [pc, #276]	@ (8001c50 <MX_GPIO_Init+0x2bc>)
 8001b3a:	f005 feef 	bl	800791c <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001b3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b44:	2301      	movs	r3, #1
 8001b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001b50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b54:	4619      	mov	r1, r3
 8001b56:	483f      	ldr	r0, [pc, #252]	@ (8001c54 <MX_GPIO_Init+0x2c0>)
 8001b58:	f005 fee0 	bl	800791c <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_M2_TX_EN_Pin */
  GPIO_InitStruct.Pin = RS485_M2_TX_EN_Pin;
 8001b5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b62:	2301      	movs	r3, #1
 8001b64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RS485_M2_TX_EN_GPIO_Port, &GPIO_InitStruct);
 8001b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b72:	4619      	mov	r1, r3
 8001b74:	4837      	ldr	r0, [pc, #220]	@ (8001c54 <MX_GPIO_Init+0x2c0>)
 8001b76:	f005 fed1 	bl	800791c <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_M1_TX_EN_Pin */
  GPIO_InitStruct.Pin = RS485_M1_TX_EN_Pin;
 8001b7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b80:	2301      	movs	r3, #1
 8001b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RS485_M1_TX_EN_GPIO_Port, &GPIO_InitStruct);
 8001b8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b90:	4619      	mov	r1, r3
 8001b92:	4831      	ldr	r0, [pc, #196]	@ (8001c58 <MX_GPIO_Init+0x2c4>)
 8001b94:	f005 fec2 	bl	800791c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 LORA_NSS_Pin LORA_RST_Pin LORA_TX_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|LORA_NSS_Pin|LORA_RST_Pin|LORA_TX_LED_Pin;
 8001b98:	f44f 43a9 	mov.w	r3, #21632	@ 0x5480
 8001b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001baa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bae:	4619      	mov	r1, r3
 8001bb0:	482a      	ldr	r0, [pc, #168]	@ (8001c5c <MX_GPIO_Init+0x2c8>)
 8001bb2:	f005 feb3 	bl	800791c <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RX_LED_Pin */
  GPIO_InitStruct.Pin = LORA_RX_LED_Pin;
 8001bb6:	2340      	movs	r3, #64	@ 0x40
 8001bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LORA_RX_LED_GPIO_Port, &GPIO_InitStruct);
 8001bc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4824      	ldr	r0, [pc, #144]	@ (8001c60 <MX_GPIO_Init+0x2cc>)
 8001bce:	f005 fea5 	bl	800791c <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO0_Pin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 8001bd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bd8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 8001be2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001be6:	4619      	mov	r1, r3
 8001be8:	481c      	ldr	r0, [pc, #112]	@ (8001c5c <MX_GPIO_Init+0x2c8>)
 8001bea:	f005 fe97 	bl	800791c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	2006      	movs	r0, #6
 8001bf4:	f003 f825 	bl	8004c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bf8:	2006      	movs	r0, #6
 8001bfa:	f003 f83c 	bl	8004c76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	2007      	movs	r0, #7
 8001c04:	f003 f81d 	bl	8004c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c08:	2007      	movs	r0, #7
 8001c0a:	f003 f834 	bl	8004c76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	2008      	movs	r0, #8
 8001c14:	f003 f815 	bl	8004c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001c18:	2008      	movs	r0, #8
 8001c1a:	f003 f82c 	bl	8004c76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	2009      	movs	r0, #9
 8001c24:	f003 f80d 	bl	8004c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001c28:	2009      	movs	r0, #9
 8001c2a:	f003 f824 	bl	8004c76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2100      	movs	r1, #0
 8001c32:	2028      	movs	r0, #40	@ 0x28
 8001c34:	f003 f805 	bl	8004c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c38:	2028      	movs	r0, #40	@ 0x28
 8001c3a:	f003 f81c 	bl	8004c76 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c3e:	bf00      	nop
 8001c40:	3738      	adds	r7, #56	@ 0x38
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	58024400 	.word	0x58024400
 8001c4c:	58020800 	.word	0x58020800
 8001c50:	58020000 	.word	0x58020000
 8001c54:	58021000 	.word	0x58021000
 8001c58:	58020400 	.word	0x58020400
 8001c5c:	58021800 	.word	0x58021800
 8001c60:	58020c00 	.word	0x58020c00

08001c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c68:	b672      	cpsid	i
}
 8001c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <Error_Handler+0x8>

08001c70 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8001c7c:	23ff      	movs	r3, #255	@ 0xff
 8001c7e:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8001c80:	23ff      	movs	r3, #255	@ 0xff
 8001c82:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8001c84:	e013      	b.n	8001cae <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	781a      	ldrb	r2, [r3, #0]
 8001c8e:	7bbb      	ldrb	r3, [r7, #14]
 8001c90:	4053      	eors	r3, r2
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8001c96:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd4 <crc16+0x64>)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	781a      	ldrb	r2, [r3, #0]
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	4053      	eors	r3, r2
 8001ca2:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8001ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8001cd8 <crc16+0x68>)
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	4413      	add	r3, r2
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8001cae:	887b      	ldrh	r3, [r7, #2]
 8001cb0:	1e5a      	subs	r2, r3, #1
 8001cb2:	807a      	strh	r2, [r7, #2]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1e6      	bne.n	8001c86 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	021b      	lsls	r3, r3, #8
 8001cbc:	b21a      	sxth	r2, r3
 8001cbe:	7bbb      	ldrb	r3, [r7, #14]
 8001cc0:	b21b      	sxth	r3, r3
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	b21b      	sxth	r3, r3
 8001cc6:	b29b      	uxth	r3, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	0800f9f8 	.word	0x0800f9f8
 8001cd8:	0800faf8 	.word	0x0800faf8

08001cdc <rs485_init>:
 */


#include "rs485_driver.h"

void rs485_init(rs485_driver *driver){
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_IT(driver->rs485_huart, driver->rs485_RxData, 16);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68d8      	ldr	r0, [r3, #12]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3310      	adds	r3, #16
 8001cec:	2210      	movs	r2, #16
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f00d fd71 	bl	800f7d6 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <rs485_send_data>:

void rs485_send_data(rs485_driver *driver, uint8_t *data){
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
	if(driver->rs485_isbusy == 0){
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d11b      	bne.n	8001d4a <rs485_send_data+0x4e>
		HAL_GPIO_WritePin(driver->rs485_enable_port, driver->rs485_enable_pin, GPIO_PIN_SET);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6858      	ldr	r0, [r3, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	891b      	ldrh	r3, [r3, #8]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f005 ffa5 	bl	8007c6c <HAL_GPIO_WritePin>
		HAL_UART_Transmit(driver->rs485_huart, data, 8, 500);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68d8      	ldr	r0, [r3, #12]
 8001d26:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001d2a:	2208      	movs	r2, #8
 8001d2c:	6839      	ldr	r1, [r7, #0]
 8001d2e:	f00b f90d 	bl	800cf4c <HAL_UART_Transmit>
		HAL_GPIO_WritePin(driver->rs485_enable_port, driver->rs485_enable_pin, GPIO_PIN_RESET);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6858      	ldr	r0, [r3, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	891b      	ldrh	r3, [r3, #8]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f005 ff95 	bl	8007c6c <HAL_GPIO_WritePin>
		driver->rs485_isbusy = 255;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	22ff      	movs	r2, #255	@ 0xff
 8001d46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <rs485_set_speed>:

void rs485_set_speed(rs485_driver *driver, uint16_t speed, uint8_t dir){
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	807b      	strh	r3, [r7, #2]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	707b      	strb	r3, [r7, #1]
	driver->rs485_TxData[0] = driver->rs485_id;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	781a      	ldrb	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f883 2020 	strb.w	r2, [r3, #32]
	driver->rs485_TxData[1] = 0x06;  // Function code
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2206      	movs	r2, #6
 8001d70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	//address 203A -> Target Speed
	driver->rs485_TxData[2] = 0x20;  // High 8 bit register address
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	driver->rs485_TxData[3] = 0x3A;  // Low  8 bit register address
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	223a      	movs	r2, #58	@ 0x3a
 8001d80:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	// Set Speed and Direction
	if(dir == 0){
 8001d84:	787b      	ldrb	r3, [r7, #1]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10b      	bne.n	8001da2 <rs485_set_speed+0x50>
		driver->rs485_TxData[4] = (speed>>8)&0xFF; // High 8 bit register data
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		driver->rs485_TxData[5] = speed&0xFF; // Low  8 bit register address
 8001d98:	887b      	ldrh	r3, [r7, #2]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	}
	if(dir == 1){
 8001da2:	787b      	ldrb	r3, [r7, #1]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d10e      	bne.n	8001dc6 <rs485_set_speed+0x74>
		speed = (~speed) + 1;
 8001da8:	887b      	ldrh	r3, [r7, #2]
 8001daa:	425b      	negs	r3, r3
 8001dac:	807b      	strh	r3, [r7, #2]
		driver->rs485_TxData[4] = (speed>>8)&0xFF; // High 8 bit register data
 8001dae:	887b      	ldrh	r3, [r7, #2]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		driver->rs485_TxData[5] = speed&0xFF; // Low  8 bit register address
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	}
	uint16_t crc = crc16(driver->rs485_TxData, 6);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3320      	adds	r3, #32
 8001dca:	2106      	movs	r1, #6
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff4f 	bl	8001c70 <crc16>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	81fb      	strh	r3, [r7, #14]
	driver->rs485_TxData[6] = crc&0xFF;
 8001dd6:	89fb      	ldrh	r3, [r7, #14]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	driver->rs485_TxData[7] = (crc>>8)&0xFF;
 8001de0:	89fb      	ldrh	r3, [r7, #14]
 8001de2:	0a1b      	lsrs	r3, r3, #8
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	rs485_send_data(driver, driver->rs485_TxData);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3320      	adds	r3, #32
 8001df2:	4619      	mov	r1, r3
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ff81 	bl	8001cfc <rs485_send_data>

}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <rs485_enable_velocity_mode>:

void rs485_enable_velocity_mode(rs485_driver *driver){
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]

	driver->rs485_TxData[0] = driver->rs485_id;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	781a      	ldrb	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f883 2020 	strb.w	r2, [r3, #32]
	driver->rs485_TxData[1] = 0x06;  // Function code
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2206      	movs	r2, #6
 8001e18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	//address 2032 -> Operating Mode
	driver->rs485_TxData[2] = 0x20;  // High 8 bit register address
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	driver->rs485_TxData[3] = 0x32;  // Low  8 bit register address
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2232      	movs	r2, #50	@ 0x32
 8001e28:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	//data 0x03 -> Set Velocity Mode
	driver->rs485_TxData[4] = 0x00;  // High 8 bit register data
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	driver->rs485_TxData[5] = 0x03;  // Low  8 bit register data
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2203      	movs	r2, #3
 8001e38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	uint16_t crc = crc16(driver->rs485_TxData, 6);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3320      	adds	r3, #32
 8001e40:	2106      	movs	r1, #6
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff ff14 	bl	8001c70 <crc16>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	81fb      	strh	r3, [r7, #14]
	driver->rs485_TxData[6] = crc&0xFF;
 8001e4c:	89fb      	ldrh	r3, [r7, #14]
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	driver->rs485_TxData[7] = (crc>>8)&0xFF;
 8001e56:	89fb      	ldrh	r3, [r7, #14]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	rs485_send_data(driver, driver->rs485_TxData);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3320      	adds	r3, #32
 8001e68:	4619      	mov	r1, r3
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ff46 	bl	8001cfc <rs485_send_data>


	driver->rs485_TxData[0] = driver->rs485_id;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	781a      	ldrb	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f883 2020 	strb.w	r2, [r3, #32]
	driver->rs485_TxData[1] = 0x06;  // Function code
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2206      	movs	r2, #6
 8001e7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	//address 2031 -> Control Word
	driver->rs485_TxData[2] = 0x20;  // High 8 bit register address
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2220      	movs	r2, #32
 8001e86:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	driver->rs485_TxData[3] = 0x31;  // Low  8 bit register address
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2231      	movs	r2, #49	@ 0x31
 8001e8e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	//data 0x08 -> Enable Motor
	driver->rs485_TxData[4] = 0x00;  // High 8 bit register data
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	driver->rs485_TxData[5] = 0x08;  // Low  8 bit register data
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2208      	movs	r2, #8
 8001e9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	crc = crc16(driver->rs485_TxData, 6);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3320      	adds	r3, #32
 8001ea6:	2106      	movs	r1, #6
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fee1 	bl	8001c70 <crc16>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	81fb      	strh	r3, [r7, #14]
	driver->rs485_TxData[6] = crc&0xFF;
 8001eb2:	89fb      	ldrh	r3, [r7, #14]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	driver->rs485_TxData[7] = (crc>>8)&0xFF;
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	0a1b      	lsrs	r3, r3, #8
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	rs485_send_data(driver, driver->rs485_TxData);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3320      	adds	r3, #32
 8001ece:	4619      	mov	r1, r3
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ff13 	bl	8001cfc <rs485_send_data>
}
 8001ed6:	bf00      	nop
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <HAL_MspInit+0x30>)
 8001ee8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001eec:	4a08      	ldr	r2, [pc, #32]	@ (8001f10 <HAL_MspInit+0x30>)
 8001eee:	f043 0302 	orr.w	r3, r3, #2
 8001ef2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ef6:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_MspInit+0x30>)
 8001ef8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	58024400 	.word	0x58024400

08001f14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b090      	sub	sp, #64	@ 0x40
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4aa0      	ldr	r2, [pc, #640]	@ (80021b4 <HAL_ADC_MspInit+0x2a0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	f040 80b6 	bne.w	80020a4 <HAL_ADC_MspInit+0x190>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001f38:	4b9f      	ldr	r3, [pc, #636]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 8001f3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f3e:	4a9e      	ldr	r2, [pc, #632]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 8001f40:	f043 0320 	orr.w	r3, r3, #32
 8001f44:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001f48:	4b9b      	ldr	r3, [pc, #620]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 8001f4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f4e:	f003 0320 	and.w	r3, r3, #32
 8001f52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f56:	4b98      	ldr	r3, [pc, #608]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 8001f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f5c:	4a96      	ldr	r2, [pc, #600]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 8001f5e:	f043 0304 	orr.w	r3, r3, #4
 8001f62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f66:	4b94      	ldr	r3, [pc, #592]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 8001f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f74:	4b90      	ldr	r3, [pc, #576]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 8001f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f7a:	4a8f      	ldr	r2, [pc, #572]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f84:	4b8c      	ldr	r3, [pc, #560]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 8001f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	623b      	str	r3, [r7, #32]
 8001f90:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f92:	4b89      	ldr	r3, [pc, #548]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 8001f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f98:	4a87      	ldr	r2, [pc, #540]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 8001f9a:	f043 0302 	orr.w	r3, r3, #2
 8001f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fa2:	4b85      	ldr	r3, [pc, #532]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 8001fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	61fb      	str	r3, [r7, #28]
 8001fae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fb0:	4b81      	ldr	r3, [pc, #516]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 8001fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb6:	4a80      	ldr	r2, [pc, #512]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 8001fb8:	f043 0320 	orr.w	r3, r3, #32
 8001fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fc0:	4b7d      	ldr	r3, [pc, #500]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 8001fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc6:	f003 0320 	and.w	r3, r3, #32
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	69bb      	ldr	r3, [r7, #24]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001fce:	2333      	movs	r3, #51	@ 0x33
 8001fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4876      	ldr	r0, [pc, #472]	@ (80021bc <HAL_ADC_MspInit+0x2a8>)
 8001fe2:	f005 fc9b 	bl	800791c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fe6:	23c0      	movs	r3, #192	@ 0xc0
 8001fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fea:	2303      	movs	r3, #3
 8001fec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4871      	ldr	r0, [pc, #452]	@ (80021c0 <HAL_ADC_MspInit+0x2ac>)
 8001ffa:	f005 fc8f 	bl	800791c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ffe:	2303      	movs	r3, #3
 8002000:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002002:	2303      	movs	r3, #3
 8002004:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800200e:	4619      	mov	r1, r3
 8002010:	486c      	ldr	r0, [pc, #432]	@ (80021c4 <HAL_ADC_MspInit+0x2b0>)
 8002012:	f005 fc83 	bl	800791c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002016:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800201a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800201c:	2303      	movs	r3, #3
 800201e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002024:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002028:	4619      	mov	r1, r3
 800202a:	4867      	ldr	r0, [pc, #412]	@ (80021c8 <HAL_ADC_MspInit+0x2b4>)
 800202c:	f005 fc76 	bl	800791c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002030:	4b66      	ldr	r3, [pc, #408]	@ (80021cc <HAL_ADC_MspInit+0x2b8>)
 8002032:	4a67      	ldr	r2, [pc, #412]	@ (80021d0 <HAL_ADC_MspInit+0x2bc>)
 8002034:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002036:	4b65      	ldr	r3, [pc, #404]	@ (80021cc <HAL_ADC_MspInit+0x2b8>)
 8002038:	2209      	movs	r2, #9
 800203a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800203c:	4b63      	ldr	r3, [pc, #396]	@ (80021cc <HAL_ADC_MspInit+0x2b8>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002042:	4b62      	ldr	r3, [pc, #392]	@ (80021cc <HAL_ADC_MspInit+0x2b8>)
 8002044:	2200      	movs	r2, #0
 8002046:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002048:	4b60      	ldr	r3, [pc, #384]	@ (80021cc <HAL_ADC_MspInit+0x2b8>)
 800204a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800204e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002050:	4b5e      	ldr	r3, [pc, #376]	@ (80021cc <HAL_ADC_MspInit+0x2b8>)
 8002052:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002056:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002058:	4b5c      	ldr	r3, [pc, #368]	@ (80021cc <HAL_ADC_MspInit+0x2b8>)
 800205a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800205e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002060:	4b5a      	ldr	r3, [pc, #360]	@ (80021cc <HAL_ADC_MspInit+0x2b8>)
 8002062:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002066:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002068:	4b58      	ldr	r3, [pc, #352]	@ (80021cc <HAL_ADC_MspInit+0x2b8>)
 800206a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800206e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002070:	4b56      	ldr	r3, [pc, #344]	@ (80021cc <HAL_ADC_MspInit+0x2b8>)
 8002072:	2200      	movs	r2, #0
 8002074:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002076:	4855      	ldr	r0, [pc, #340]	@ (80021cc <HAL_ADC_MspInit+0x2b8>)
 8002078:	f002 fe18 	bl	8004cac <HAL_DMA_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_ADC_MspInit+0x172>
    {
      Error_Handler();
 8002082:	f7ff fdef 	bl	8001c64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a50      	ldr	r2, [pc, #320]	@ (80021cc <HAL_ADC_MspInit+0x2b8>)
 800208a:	659a      	str	r2, [r3, #88]	@ 0x58
 800208c:	4a4f      	ldr	r2, [pc, #316]	@ (80021cc <HAL_ADC_MspInit+0x2b8>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	2100      	movs	r1, #0
 8002096:	2012      	movs	r0, #18
 8002098:	f002 fdd3 	bl	8004c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800209c:	2012      	movs	r0, #18
 800209e:	f002 fdea 	bl	8004c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80020a2:	e083      	b.n	80021ac <HAL_ADC_MspInit+0x298>
  else if(hadc->Instance==ADC3)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a4a      	ldr	r2, [pc, #296]	@ (80021d4 <HAL_ADC_MspInit+0x2c0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d17e      	bne.n	80021ac <HAL_ADC_MspInit+0x298>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80020ae:	4b42      	ldr	r3, [pc, #264]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 80020b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020b4:	4a40      	ldr	r2, [pc, #256]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 80020b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020be:	4b3e      	ldr	r3, [pc, #248]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 80020c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020cc:	4b3a      	ldr	r3, [pc, #232]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 80020ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020d2:	4a39      	ldr	r2, [pc, #228]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 80020d4:	f043 0320 	orr.w	r3, r3, #32
 80020d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020dc:	4b36      	ldr	r3, [pc, #216]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 80020de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e2:	f003 0320 	and.w	r3, r3, #32
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ea:	4b33      	ldr	r3, [pc, #204]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 80020ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f0:	4a31      	ldr	r2, [pc, #196]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 80020f2:	f043 0304 	orr.w	r3, r3, #4
 80020f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020fa:	4b2f      	ldr	r3, [pc, #188]	@ (80021b8 <HAL_ADC_MspInit+0x2a4>)
 80020fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002108:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 800210c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800210e:	2303      	movs	r3, #3
 8002110:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002116:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800211a:	4619      	mov	r1, r3
 800211c:	482a      	ldr	r0, [pc, #168]	@ (80021c8 <HAL_ADC_MspInit+0x2b4>)
 800211e:	f005 fbfd 	bl	800791c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002122:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8002126:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800212a:	f000 fbf1 	bl	8002910 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800212e:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8002132:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002136:	f000 fbeb 	bl	8002910 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 800213a:	4b27      	ldr	r3, [pc, #156]	@ (80021d8 <HAL_ADC_MspInit+0x2c4>)
 800213c:	4a27      	ldr	r2, [pc, #156]	@ (80021dc <HAL_ADC_MspInit+0x2c8>)
 800213e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002140:	4b25      	ldr	r3, [pc, #148]	@ (80021d8 <HAL_ADC_MspInit+0x2c4>)
 8002142:	2273      	movs	r2, #115	@ 0x73
 8002144:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002146:	4b24      	ldr	r3, [pc, #144]	@ (80021d8 <HAL_ADC_MspInit+0x2c4>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800214c:	4b22      	ldr	r3, [pc, #136]	@ (80021d8 <HAL_ADC_MspInit+0x2c4>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002152:	4b21      	ldr	r3, [pc, #132]	@ (80021d8 <HAL_ADC_MspInit+0x2c4>)
 8002154:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002158:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800215a:	4b1f      	ldr	r3, [pc, #124]	@ (80021d8 <HAL_ADC_MspInit+0x2c4>)
 800215c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002160:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002162:	4b1d      	ldr	r3, [pc, #116]	@ (80021d8 <HAL_ADC_MspInit+0x2c4>)
 8002164:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002168:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800216a:	4b1b      	ldr	r3, [pc, #108]	@ (80021d8 <HAL_ADC_MspInit+0x2c4>)
 800216c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002170:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8002172:	4b19      	ldr	r3, [pc, #100]	@ (80021d8 <HAL_ADC_MspInit+0x2c4>)
 8002174:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002178:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800217a:	4b17      	ldr	r3, [pc, #92]	@ (80021d8 <HAL_ADC_MspInit+0x2c4>)
 800217c:	2200      	movs	r2, #0
 800217e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002180:	4815      	ldr	r0, [pc, #84]	@ (80021d8 <HAL_ADC_MspInit+0x2c4>)
 8002182:	f002 fd93 	bl	8004cac <HAL_DMA_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_ADC_MspInit+0x27c>
      Error_Handler();
 800218c:	f7ff fd6a 	bl	8001c64 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a11      	ldr	r2, [pc, #68]	@ (80021d8 <HAL_ADC_MspInit+0x2c4>)
 8002194:	659a      	str	r2, [r3, #88]	@ 0x58
 8002196:	4a10      	ldr	r2, [pc, #64]	@ (80021d8 <HAL_ADC_MspInit+0x2c4>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800219c:	2200      	movs	r2, #0
 800219e:	2100      	movs	r1, #0
 80021a0:	207f      	movs	r0, #127	@ 0x7f
 80021a2:	f002 fd4e 	bl	8004c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80021a6:	207f      	movs	r0, #127	@ 0x7f
 80021a8:	f002 fd65 	bl	8004c76 <HAL_NVIC_EnableIRQ>
}
 80021ac:	bf00      	nop
 80021ae:	3740      	adds	r7, #64	@ 0x40
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40022000 	.word	0x40022000
 80021b8:	58024400 	.word	0x58024400
 80021bc:	58020800 	.word	0x58020800
 80021c0:	58020000 	.word	0x58020000
 80021c4:	58020400 	.word	0x58020400
 80021c8:	58021400 	.word	0x58021400
 80021cc:	2400015c 	.word	0x2400015c
 80021d0:	40020010 	.word	0x40020010
 80021d4:	58026000 	.word	0x58026000
 80021d8:	240001d4 	.word	0x240001d4
 80021dc:	40020028 	.word	0x40020028

080021e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b0ba      	sub	sp, #232	@ 0xe8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021f8:	f107 0318 	add.w	r3, r7, #24
 80021fc:	22b8      	movs	r2, #184	@ 0xb8
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f00d fb87 	bl	800f914 <memset>
  if(hspi->Instance==SPI1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a39      	ldr	r2, [pc, #228]	@ (80022f0 <HAL_SPI_MspInit+0x110>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d16a      	bne.n	80022e6 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002210:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800221c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002220:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002222:	f107 0318 	add.w	r3, r7, #24
 8002226:	4618      	mov	r0, r3
 8002228:	f006 fd0e 	bl	8008c48 <HAL_RCCEx_PeriphCLKConfig>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002232:	f7ff fd17 	bl	8001c64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002236:	4b2f      	ldr	r3, [pc, #188]	@ (80022f4 <HAL_SPI_MspInit+0x114>)
 8002238:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800223c:	4a2d      	ldr	r2, [pc, #180]	@ (80022f4 <HAL_SPI_MspInit+0x114>)
 800223e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002242:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002246:	4b2b      	ldr	r3, [pc, #172]	@ (80022f4 <HAL_SPI_MspInit+0x114>)
 8002248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800224c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002254:	4b27      	ldr	r3, [pc, #156]	@ (80022f4 <HAL_SPI_MspInit+0x114>)
 8002256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800225a:	4a26      	ldr	r2, [pc, #152]	@ (80022f4 <HAL_SPI_MspInit+0x114>)
 800225c:	f043 0308 	orr.w	r3, r3, #8
 8002260:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002264:	4b23      	ldr	r3, [pc, #140]	@ (80022f4 <HAL_SPI_MspInit+0x114>)
 8002266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002272:	4b20      	ldr	r3, [pc, #128]	@ (80022f4 <HAL_SPI_MspInit+0x114>)
 8002274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002278:	4a1e      	ldr	r2, [pc, #120]	@ (80022f4 <HAL_SPI_MspInit+0x114>)
 800227a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800227e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002282:	4b1c      	ldr	r3, [pc, #112]	@ (80022f4 <HAL_SPI_MspInit+0x114>)
 8002284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002290:	2380      	movs	r3, #128	@ 0x80
 8002292:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002296:	2302      	movs	r3, #2
 8002298:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2300      	movs	r3, #0
 80022a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022a8:	2305      	movs	r3, #5
 80022aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022b2:	4619      	mov	r1, r3
 80022b4:	4810      	ldr	r0, [pc, #64]	@ (80022f8 <HAL_SPI_MspInit+0x118>)
 80022b6:	f005 fb31 	bl	800791c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80022ba:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80022be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022d4:	2305      	movs	r3, #5
 80022d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022da:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022de:	4619      	mov	r1, r3
 80022e0:	4806      	ldr	r0, [pc, #24]	@ (80022fc <HAL_SPI_MspInit+0x11c>)
 80022e2:	f005 fb1b 	bl	800791c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80022e6:	bf00      	nop
 80022e8:	37e8      	adds	r7, #232	@ 0xe8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40013000 	.word	0x40013000
 80022f4:	58024400 	.word	0x58024400
 80022f8:	58020c00 	.word	0x58020c00
 80022fc:	58021800 	.word	0x58021800

08002300 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002310:	d10e      	bne.n	8002330 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002312:	4b0a      	ldr	r3, [pc, #40]	@ (800233c <HAL_TIM_PWM_MspInit+0x3c>)
 8002314:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002318:	4a08      	ldr	r2, [pc, #32]	@ (800233c <HAL_TIM_PWM_MspInit+0x3c>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002322:	4b06      	ldr	r3, [pc, #24]	@ (800233c <HAL_TIM_PWM_MspInit+0x3c>)
 8002324:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	58024400 	.word	0x58024400

08002340 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002360:	d11e      	bne.n	80023a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002362:	4b11      	ldr	r3, [pc, #68]	@ (80023a8 <HAL_TIM_MspPostInit+0x68>)
 8002364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002368:	4a0f      	ldr	r2, [pc, #60]	@ (80023a8 <HAL_TIM_MspPostInit+0x68>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002372:	4b0d      	ldr	r3, [pc, #52]	@ (80023a8 <HAL_TIM_MspPostInit+0x68>)
 8002374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002380:	2303      	movs	r3, #3
 8002382:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002390:	2301      	movs	r3, #1
 8002392:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002394:	f107 030c 	add.w	r3, r7, #12
 8002398:	4619      	mov	r1, r3
 800239a:	4804      	ldr	r0, [pc, #16]	@ (80023ac <HAL_TIM_MspPostInit+0x6c>)
 800239c:	f005 fabe 	bl	800791c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80023a0:	bf00      	nop
 80023a2:	3720      	adds	r7, #32
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	58024400 	.word	0x58024400
 80023ac:	58020000 	.word	0x58020000

080023b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b0ba      	sub	sp, #232	@ 0xe8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023c8:	f107 0318 	add.w	r3, r7, #24
 80023cc:	22b8      	movs	r2, #184	@ 0xb8
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f00d fa9f 	bl	800f914 <memset>
  if(huart->Instance==USART1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a55      	ldr	r2, [pc, #340]	@ (8002530 <HAL_UART_MspInit+0x180>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d14f      	bne.n	8002480 <HAL_UART_MspInit+0xd0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023e0:	f04f 0201 	mov.w	r2, #1
 80023e4:	f04f 0300 	mov.w	r3, #0
 80023e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023f2:	f107 0318 	add.w	r3, r7, #24
 80023f6:	4618      	mov	r0, r3
 80023f8:	f006 fc26 	bl	8008c48 <HAL_RCCEx_PeriphCLKConfig>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002402:	f7ff fc2f 	bl	8001c64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002406:	4b4b      	ldr	r3, [pc, #300]	@ (8002534 <HAL_UART_MspInit+0x184>)
 8002408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800240c:	4a49      	ldr	r2, [pc, #292]	@ (8002534 <HAL_UART_MspInit+0x184>)
 800240e:	f043 0310 	orr.w	r3, r3, #16
 8002412:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002416:	4b47      	ldr	r3, [pc, #284]	@ (8002534 <HAL_UART_MspInit+0x184>)
 8002418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002424:	4b43      	ldr	r3, [pc, #268]	@ (8002534 <HAL_UART_MspInit+0x184>)
 8002426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800242a:	4a42      	ldr	r2, [pc, #264]	@ (8002534 <HAL_UART_MspInit+0x184>)
 800242c:	f043 0302 	orr.w	r3, r3, #2
 8002430:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002434:	4b3f      	ldr	r3, [pc, #252]	@ (8002534 <HAL_UART_MspInit+0x184>)
 8002436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002442:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002446:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244a:	2302      	movs	r3, #2
 800244c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002456:	2303      	movs	r3, #3
 8002458:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800245c:	2304      	movs	r3, #4
 800245e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002462:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002466:	4619      	mov	r1, r3
 8002468:	4833      	ldr	r0, [pc, #204]	@ (8002538 <HAL_UART_MspInit+0x188>)
 800246a:	f005 fa57 	bl	800791c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800246e:	2200      	movs	r2, #0
 8002470:	2100      	movs	r1, #0
 8002472:	2025      	movs	r0, #37	@ 0x25
 8002474:	f002 fbe5 	bl	8004c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002478:	2025      	movs	r0, #37	@ 0x25
 800247a:	f002 fbfc 	bl	8004c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800247e:	e053      	b.n	8002528 <HAL_UART_MspInit+0x178>
  else if(huart->Instance==USART3)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a2d      	ldr	r2, [pc, #180]	@ (800253c <HAL_UART_MspInit+0x18c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d14e      	bne.n	8002528 <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800248a:	f04f 0202 	mov.w	r2, #2
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002496:	2300      	movs	r3, #0
 8002498:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800249c:	f107 0318 	add.w	r3, r7, #24
 80024a0:	4618      	mov	r0, r3
 80024a2:	f006 fbd1 	bl	8008c48 <HAL_RCCEx_PeriphCLKConfig>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_UART_MspInit+0x100>
      Error_Handler();
 80024ac:	f7ff fbda 	bl	8001c64 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024b0:	4b20      	ldr	r3, [pc, #128]	@ (8002534 <HAL_UART_MspInit+0x184>)
 80024b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002534 <HAL_UART_MspInit+0x184>)
 80024b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80024c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002534 <HAL_UART_MspInit+0x184>)
 80024c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ce:	4b19      	ldr	r3, [pc, #100]	@ (8002534 <HAL_UART_MspInit+0x184>)
 80024d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024d4:	4a17      	ldr	r2, [pc, #92]	@ (8002534 <HAL_UART_MspInit+0x184>)
 80024d6:	f043 0302 	orr.w	r3, r3, #2
 80024da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024de:	4b15      	ldr	r3, [pc, #84]	@ (8002534 <HAL_UART_MspInit+0x184>)
 80024e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024ec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80024f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002500:	2300      	movs	r3, #0
 8002502:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002506:	2307      	movs	r3, #7
 8002508:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002510:	4619      	mov	r1, r3
 8002512:	4809      	ldr	r0, [pc, #36]	@ (8002538 <HAL_UART_MspInit+0x188>)
 8002514:	f005 fa02 	bl	800791c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002518:	2200      	movs	r2, #0
 800251a:	2100      	movs	r1, #0
 800251c:	2027      	movs	r0, #39	@ 0x27
 800251e:	f002 fb90 	bl	8004c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002522:	2027      	movs	r0, #39	@ 0x27
 8002524:	f002 fba7 	bl	8004c76 <HAL_NVIC_EnableIRQ>
}
 8002528:	bf00      	nop
 800252a:	37e8      	adds	r7, #232	@ 0xe8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40011000 	.word	0x40011000
 8002534:	58024400 	.word	0x58024400
 8002538:	58020400 	.word	0x58020400
 800253c:	40004800 	.word	0x40004800

08002540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <NMI_Handler+0x4>

08002548 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <HardFault_Handler+0x4>

08002550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002554:	bf00      	nop
 8002556:	e7fd      	b.n	8002554 <MemManage_Handler+0x4>

08002558 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800255c:	bf00      	nop
 800255e:	e7fd      	b.n	800255c <BusFault_Handler+0x4>

08002560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002564:	bf00      	nop
 8002566:	e7fd      	b.n	8002564 <UsageFault_Handler+0x4>

08002568 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002596:	f000 f977 	bl	8002888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}

0800259e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80025a2:	2001      	movs	r0, #1
 80025a4:	f005 fb95 	bl	8007cd2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}

080025ac <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80025b0:	2002      	movs	r0, #2
 80025b2:	f005 fb8e 	bl	8007cd2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}

080025ba <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80025be:	2004      	movs	r0, #4
 80025c0:	f005 fb87 	bl	8007cd2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80025c4:	bf00      	nop
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80025cc:	2008      	movs	r0, #8
 80025ce:	f005 fb80 	bl	8007cd2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025dc:	4802      	ldr	r0, [pc, #8]	@ (80025e8 <DMA1_Stream0_IRQHandler+0x10>)
 80025de:	f003 fe8b 	bl	80062f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	2400015c 	.word	0x2400015c

080025ec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80025f0:	4802      	ldr	r0, [pc, #8]	@ (80025fc <DMA1_Stream1_IRQHandler+0x10>)
 80025f2:	f003 fe81 	bl	80062f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	240001d4 	.word	0x240001d4

08002600 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002604:	4802      	ldr	r0, [pc, #8]	@ (8002610 <ADC_IRQHandler+0x10>)
 8002606:	f000 ff69 	bl	80034dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	2400007c 	.word	0x2400007c

08002614 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002618:	4802      	ldr	r0, [pc, #8]	@ (8002624 <USART1_IRQHandler+0x10>)
 800261a:	f00a fd25 	bl	800d068 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	24000320 	.word	0x24000320

08002628 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800262c:	4802      	ldr	r0, [pc, #8]	@ (8002638 <USART3_IRQHandler+0x10>)
 800262e:	f00a fd1b 	bl	800d068 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	240003b4 	.word	0x240003b4

0800263c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_DIO0_Pin);
 8002640:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002644:	f005 fb45 	bl	8007cd2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}

0800264c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002650:	4802      	ldr	r0, [pc, #8]	@ (800265c <ADC3_IRQHandler+0x10>)
 8002652:	f000 ff43 	bl	80034dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	240000ec 	.word	0x240000ec

08002660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002664:	4b32      	ldr	r3, [pc, #200]	@ (8002730 <SystemInit+0xd0>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266a:	4a31      	ldr	r2, [pc, #196]	@ (8002730 <SystemInit+0xd0>)
 800266c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002670:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002674:	4b2f      	ldr	r3, [pc, #188]	@ (8002734 <SystemInit+0xd4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 030f 	and.w	r3, r3, #15
 800267c:	2b06      	cmp	r3, #6
 800267e:	d807      	bhi.n	8002690 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002680:	4b2c      	ldr	r3, [pc, #176]	@ (8002734 <SystemInit+0xd4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f023 030f 	bic.w	r3, r3, #15
 8002688:	4a2a      	ldr	r2, [pc, #168]	@ (8002734 <SystemInit+0xd4>)
 800268a:	f043 0307 	orr.w	r3, r3, #7
 800268e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002690:	4b29      	ldr	r3, [pc, #164]	@ (8002738 <SystemInit+0xd8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a28      	ldr	r2, [pc, #160]	@ (8002738 <SystemInit+0xd8>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800269c:	4b26      	ldr	r3, [pc, #152]	@ (8002738 <SystemInit+0xd8>)
 800269e:	2200      	movs	r2, #0
 80026a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80026a2:	4b25      	ldr	r3, [pc, #148]	@ (8002738 <SystemInit+0xd8>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	4924      	ldr	r1, [pc, #144]	@ (8002738 <SystemInit+0xd8>)
 80026a8:	4b24      	ldr	r3, [pc, #144]	@ (800273c <SystemInit+0xdc>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026ae:	4b21      	ldr	r3, [pc, #132]	@ (8002734 <SystemInit+0xd4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002734 <SystemInit+0xd4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 030f 	bic.w	r3, r3, #15
 80026c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002734 <SystemInit+0xd4>)
 80026c4:	f043 0307 	orr.w	r3, r3, #7
 80026c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80026ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002738 <SystemInit+0xd8>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80026d0:	4b19      	ldr	r3, [pc, #100]	@ (8002738 <SystemInit+0xd8>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80026d6:	4b18      	ldr	r3, [pc, #96]	@ (8002738 <SystemInit+0xd8>)
 80026d8:	2200      	movs	r2, #0
 80026da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80026dc:	4b16      	ldr	r3, [pc, #88]	@ (8002738 <SystemInit+0xd8>)
 80026de:	4a18      	ldr	r2, [pc, #96]	@ (8002740 <SystemInit+0xe0>)
 80026e0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80026e2:	4b15      	ldr	r3, [pc, #84]	@ (8002738 <SystemInit+0xd8>)
 80026e4:	4a17      	ldr	r2, [pc, #92]	@ (8002744 <SystemInit+0xe4>)
 80026e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80026e8:	4b13      	ldr	r3, [pc, #76]	@ (8002738 <SystemInit+0xd8>)
 80026ea:	4a17      	ldr	r2, [pc, #92]	@ (8002748 <SystemInit+0xe8>)
 80026ec:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80026ee:	4b12      	ldr	r3, [pc, #72]	@ (8002738 <SystemInit+0xd8>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80026f4:	4b10      	ldr	r3, [pc, #64]	@ (8002738 <SystemInit+0xd8>)
 80026f6:	4a14      	ldr	r2, [pc, #80]	@ (8002748 <SystemInit+0xe8>)
 80026f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80026fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002738 <SystemInit+0xd8>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002700:	4b0d      	ldr	r3, [pc, #52]	@ (8002738 <SystemInit+0xd8>)
 8002702:	4a11      	ldr	r2, [pc, #68]	@ (8002748 <SystemInit+0xe8>)
 8002704:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002706:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <SystemInit+0xd8>)
 8002708:	2200      	movs	r2, #0
 800270a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800270c:	4b0a      	ldr	r3, [pc, #40]	@ (8002738 <SystemInit+0xd8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a09      	ldr	r2, [pc, #36]	@ (8002738 <SystemInit+0xd8>)
 8002712:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002716:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002718:	4b07      	ldr	r3, [pc, #28]	@ (8002738 <SystemInit+0xd8>)
 800271a:	2200      	movs	r2, #0
 800271c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800271e:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <SystemInit+0xec>)
 8002720:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002724:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002726:	bf00      	nop
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000ed00 	.word	0xe000ed00
 8002734:	52002000 	.word	0x52002000
 8002738:	58024400 	.word	0x58024400
 800273c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002740:	02020200 	.word	0x02020200
 8002744:	01ff0000 	.word	0x01ff0000
 8002748:	01010280 	.word	0x01010280
 800274c:	52004000 	.word	0x52004000

08002750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002750:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002788 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002754:	f7ff ff84 	bl	8002660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002758:	480c      	ldr	r0, [pc, #48]	@ (800278c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800275a:	490d      	ldr	r1, [pc, #52]	@ (8002790 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800275c:	4a0d      	ldr	r2, [pc, #52]	@ (8002794 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800275e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002760:	e002      	b.n	8002768 <LoopCopyDataInit>

08002762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002766:	3304      	adds	r3, #4

08002768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800276a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800276c:	d3f9      	bcc.n	8002762 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800276e:	4a0a      	ldr	r2, [pc, #40]	@ (8002798 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002770:	4c0a      	ldr	r4, [pc, #40]	@ (800279c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002774:	e001      	b.n	800277a <LoopFillZerobss>

08002776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002778:	3204      	adds	r2, #4

0800277a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800277a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800277c:	d3fb      	bcc.n	8002776 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800277e:	f00d f8d1 	bl	800f924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002782:	f7fe fba1 	bl	8000ec8 <main>
  bx  lr
 8002786:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002788:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800278c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002790:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8002794:	0800fc48 	.word	0x0800fc48
  ldr r2, =_sbss
 8002798:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 800279c:	240006f8 	.word	0x240006f8

080027a0 <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027a0:	e7fe      	b.n	80027a0 <BDMA_Channel0_IRQHandler>
	...

080027a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027aa:	2003      	movs	r0, #3
 80027ac:	f002 fa3e 	bl	8004c2c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027b0:	f006 f874 	bl	800889c <HAL_RCC_GetSysClockFreq>
 80027b4:	4602      	mov	r2, r0
 80027b6:	4b15      	ldr	r3, [pc, #84]	@ (800280c <HAL_Init+0x68>)
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	0a1b      	lsrs	r3, r3, #8
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	4913      	ldr	r1, [pc, #76]	@ (8002810 <HAL_Init+0x6c>)
 80027c2:	5ccb      	ldrb	r3, [r1, r3]
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
 80027cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027ce:	4b0f      	ldr	r3, [pc, #60]	@ (800280c <HAL_Init+0x68>)
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002810 <HAL_Init+0x6c>)
 80027d8:	5cd3      	ldrb	r3, [r2, r3]
 80027da:	f003 031f 	and.w	r3, r3, #31
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
 80027e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002814 <HAL_Init+0x70>)
 80027e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002818 <HAL_Init+0x74>)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027ee:	200f      	movs	r0, #15
 80027f0:	f000 f814 	bl	800281c <HAL_InitTick>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e002      	b.n	8002804 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80027fe:	f7ff fb6f 	bl	8001ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	58024400 	.word	0x58024400
 8002810:	0800fbf8 	.word	0x0800fbf8
 8002814:	24000054 	.word	0x24000054
 8002818:	24000050 	.word	0x24000050

0800281c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002824:	4b15      	ldr	r3, [pc, #84]	@ (800287c <HAL_InitTick+0x60>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e021      	b.n	8002874 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002830:	4b13      	ldr	r3, [pc, #76]	@ (8002880 <HAL_InitTick+0x64>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4b11      	ldr	r3, [pc, #68]	@ (800287c <HAL_InitTick+0x60>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	4619      	mov	r1, r3
 800283a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800283e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002842:	fbb2 f3f3 	udiv	r3, r2, r3
 8002846:	4618      	mov	r0, r3
 8002848:	f002 fa23 	bl	8004c92 <HAL_SYSTICK_Config>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e00e      	b.n	8002874 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b0f      	cmp	r3, #15
 800285a:	d80a      	bhi.n	8002872 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800285c:	2200      	movs	r2, #0
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	f04f 30ff 	mov.w	r0, #4294967295
 8002864:	f002 f9ed 	bl	8004c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002868:	4a06      	ldr	r2, [pc, #24]	@ (8002884 <HAL_InitTick+0x68>)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	e000      	b.n	8002874 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
}
 8002874:	4618      	mov	r0, r3
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	2400005c 	.word	0x2400005c
 8002880:	24000050 	.word	0x24000050
 8002884:	24000058 	.word	0x24000058

08002888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800288c:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <HAL_IncTick+0x20>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <HAL_IncTick+0x24>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4413      	add	r3, r2
 8002898:	4a04      	ldr	r2, [pc, #16]	@ (80028ac <HAL_IncTick+0x24>)
 800289a:	6013      	str	r3, [r2, #0]
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	2400005c 	.word	0x2400005c
 80028ac:	240006f4 	.word	0x240006f4

080028b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return uwTick;
 80028b4:	4b03      	ldr	r3, [pc, #12]	@ (80028c4 <HAL_GetTick+0x14>)
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	240006f4 	.word	0x240006f4

080028c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028d0:	f7ff ffee 	bl	80028b0 <HAL_GetTick>
 80028d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e0:	d005      	beq.n	80028ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028e2:	4b0a      	ldr	r3, [pc, #40]	@ (800290c <HAL_Delay+0x44>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4413      	add	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028ee:	bf00      	nop
 80028f0:	f7ff ffde 	bl	80028b0 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d8f7      	bhi.n	80028f0 <HAL_Delay+0x28>
  {
  }
}
 8002900:	bf00      	nop
 8002902:	bf00      	nop
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	2400005c 	.word	0x2400005c

08002910 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800291a:	4b07      	ldr	r3, [pc, #28]	@ (8002938 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	43db      	mvns	r3, r3
 8002922:	401a      	ands	r2, r3
 8002924:	4904      	ldr	r1, [pc, #16]	@ (8002938 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	4313      	orrs	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	58000400 	.word	0x58000400

0800293c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	609a      	str	r2, [r3, #8]
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	609a      	str	r2, [r3, #8]
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	3360      	adds	r3, #96	@ 0x60
 80029b6:	461a      	mov	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4a10      	ldr	r2, [pc, #64]	@ (8002a04 <LL_ADC_SetOffset+0x60>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d10b      	bne.n	80029e0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80029de:	e00b      	b.n	80029f8 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	430b      	orrs	r3, r1
 80029f2:	431a      	orrs	r2, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	601a      	str	r2, [r3, #0]
}
 80029f8:	bf00      	nop
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	58026000 	.word	0x58026000

08002a08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3360      	adds	r3, #96	@ 0x60
 8002a16:	461a      	mov	r2, r3
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f003 031f 	and.w	r3, r3, #31
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	fa01 f303 	lsl.w	r3, r1, r3
 8002a54:	431a      	orrs	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	611a      	str	r2, [r3, #16]
}
 8002a5a:	bf00      	nop
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4a0c      	ldr	r2, [pc, #48]	@ (8002aa8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d00e      	beq.n	8002a9a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	3360      	adds	r3, #96	@ 0x60
 8002a80:	461a      	mov	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	431a      	orrs	r2, r3
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	601a      	str	r2, [r3, #0]
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	58026000 	.word	0x58026000

08002aac <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4a0c      	ldr	r2, [pc, #48]	@ (8002aec <LL_ADC_SetOffsetSaturation+0x40>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d10e      	bne.n	8002ade <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	3360      	adds	r3, #96	@ 0x60
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002ade:	bf00      	nop
 8002ae0:	371c      	adds	r7, #28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	58026000 	.word	0x58026000

08002af0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4a0c      	ldr	r2, [pc, #48]	@ (8002b30 <LL_ADC_SetOffsetSign+0x40>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d10e      	bne.n	8002b22 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	3360      	adds	r3, #96	@ 0x60
 8002b08:	461a      	mov	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002b22:	bf00      	nop
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	58026000 	.word	0x58026000

08002b34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	3360      	adds	r3, #96	@ 0x60
 8002b44:	461a      	mov	r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4a0c      	ldr	r2, [pc, #48]	@ (8002b84 <LL_ADC_SetOffsetState+0x50>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d108      	bne.n	8002b68 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002b66:	e007      	b.n	8002b78 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	601a      	str	r2, [r3, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	371c      	adds	r7, #28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	58026000 	.word	0x58026000

08002b88 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b087      	sub	sp, #28
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	3330      	adds	r3, #48	@ 0x30
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	4413      	add	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	211f      	movs	r1, #31
 8002bda:	fa01 f303 	lsl.w	r3, r1, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	401a      	ands	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	0e9b      	lsrs	r3, r3, #26
 8002be6:	f003 011f 	and.w	r1, r3, #31
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bfa:	bf00      	nop
 8002bfc:	371c      	adds	r7, #28
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f023 0203 	bic.w	r2, r3, #3
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	60da      	str	r2, [r3, #12]
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f043 0201 	orr.w	r2, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	60da      	str	r2, [r3, #12]
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a08      	ldr	r2, [pc, #32]	@ (8002c7c <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d107      	bne.n	8002c6e <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f023 0203 	bic.w	r2, r3, #3
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	60da      	str	r2, [r3, #12]
  }
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	58026000 	.word	0x58026000

08002c80 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c8c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b087      	sub	sp, #28
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	3314      	adds	r3, #20
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	0e5b      	lsrs	r3, r3, #25
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	4413      	add	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	0d1b      	lsrs	r3, r3, #20
 8002cce:	f003 031f 	and.w	r3, r3, #31
 8002cd2:	2107      	movs	r1, #7
 8002cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	401a      	ands	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	0d1b      	lsrs	r3, r3, #20
 8002ce0:	f003 031f 	and.w	r3, r3, #31
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cea:	431a      	orrs	r2, r3
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cf0:	bf00      	nop
 8002cf2:	371c      	adds	r7, #28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4a1a      	ldr	r2, [pc, #104]	@ (8002d74 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d115      	bne.n	8002d3c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	401a      	ands	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f003 0318 	and.w	r3, r3, #24
 8002d26:	4914      	ldr	r1, [pc, #80]	@ (8002d78 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002d28:	40d9      	lsrs	r1, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	400b      	ands	r3, r1
 8002d2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d32:	431a      	orrs	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002d3a:	e014      	b.n	8002d66 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	401a      	ands	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f003 0318 	and.w	r3, r3, #24
 8002d52:	4909      	ldr	r1, [pc, #36]	@ (8002d78 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002d54:	40d9      	lsrs	r1, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	400b      	ands	r3, r1
 8002d5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002d66:	bf00      	nop
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	58026000 	.word	0x58026000
 8002d78:	000fffff 	.word	0x000fffff

08002d7c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 031f 	and.w	r3, r3, #31
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	4b04      	ldr	r3, [pc, #16]	@ (8002dd4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6093      	str	r3, [r2, #8]
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	5fffffc0 	.word	0x5fffffc0

08002dd8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002de8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dec:	d101      	bne.n	8002df2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	4b05      	ldr	r3, [pc, #20]	@ (8002e24 <LL_ADC_EnableInternalRegulator+0x24>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	6fffffc0 	.word	0x6fffffc0

08002e28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e3c:	d101      	bne.n	8002e42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	4b05      	ldr	r3, [pc, #20]	@ (8002e74 <LL_ADC_Enable+0x24>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	f043 0201 	orr.w	r2, r3, #1
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	7fffffc0 	.word	0x7fffffc0

08002e78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <LL_ADC_IsEnabled+0x18>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <LL_ADC_IsEnabled+0x1a>
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	4b05      	ldr	r3, [pc, #20]	@ (8002ec4 <LL_ADC_REG_StartConversion+0x24>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	f043 0204 	orr.w	r2, r3, #4
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	7fffffc0 	.word	0x7fffffc0

08002ec8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d101      	bne.n	8002ee0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d101      	bne.n	8002f06 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b089      	sub	sp, #36	@ 0x24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e1ee      	b.n	800330c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d109      	bne.n	8002f50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7fe ffe9 	bl	8001f14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff ff3f 	bl	8002dd8 <LL_ADC_IsDeepPowerDownEnabled>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d004      	beq.n	8002f6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff ff25 	bl	8002db4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff ff5a 	bl	8002e28 <LL_ADC_IsInternalRegulatorEnabled>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d114      	bne.n	8002fa4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff ff3e 	bl	8002e00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f84:	4b8e      	ldr	r3, [pc, #568]	@ (80031c0 <HAL_ADC_Init+0x2ac>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	099b      	lsrs	r3, r3, #6
 8002f8a:	4a8e      	ldr	r2, [pc, #568]	@ (80031c4 <HAL_ADC_Init+0x2b0>)
 8002f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f90:	099b      	lsrs	r3, r3, #6
 8002f92:	3301      	adds	r3, #1
 8002f94:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f96:	e002      	b.n	8002f9e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f9      	bne.n	8002f98 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff3d 	bl	8002e28 <LL_ADC_IsInternalRegulatorEnabled>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10d      	bne.n	8002fd0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb8:	f043 0210 	orr.w	r2, r3, #16
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fc4:	f043 0201 	orr.w	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff77 	bl	8002ec8 <LL_ADC_REG_IsConversionOngoing>
 8002fda:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f040 8188 	bne.w	80032fa <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f040 8184 	bne.w	80032fa <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002ffa:	f043 0202 	orr.w	r2, r3, #2
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff ff36 	bl	8002e78 <LL_ADC_IsEnabled>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d136      	bne.n	8003080 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a6c      	ldr	r2, [pc, #432]	@ (80031c8 <HAL_ADC_Init+0x2b4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d004      	beq.n	8003026 <HAL_ADC_Init+0x112>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a6a      	ldr	r2, [pc, #424]	@ (80031cc <HAL_ADC_Init+0x2b8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d10e      	bne.n	8003044 <HAL_ADC_Init+0x130>
 8003026:	4868      	ldr	r0, [pc, #416]	@ (80031c8 <HAL_ADC_Init+0x2b4>)
 8003028:	f7ff ff26 	bl	8002e78 <LL_ADC_IsEnabled>
 800302c:	4604      	mov	r4, r0
 800302e:	4867      	ldr	r0, [pc, #412]	@ (80031cc <HAL_ADC_Init+0x2b8>)
 8003030:	f7ff ff22 	bl	8002e78 <LL_ADC_IsEnabled>
 8003034:	4603      	mov	r3, r0
 8003036:	4323      	orrs	r3, r4
 8003038:	2b00      	cmp	r3, #0
 800303a:	bf0c      	ite	eq
 800303c:	2301      	moveq	r3, #1
 800303e:	2300      	movne	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	e008      	b.n	8003056 <HAL_ADC_Init+0x142>
 8003044:	4862      	ldr	r0, [pc, #392]	@ (80031d0 <HAL_ADC_Init+0x2bc>)
 8003046:	f7ff ff17 	bl	8002e78 <LL_ADC_IsEnabled>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	bf0c      	ite	eq
 8003050:	2301      	moveq	r3, #1
 8003052:	2300      	movne	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d012      	beq.n	8003080 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a5a      	ldr	r2, [pc, #360]	@ (80031c8 <HAL_ADC_Init+0x2b4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d004      	beq.n	800306e <HAL_ADC_Init+0x15a>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a58      	ldr	r2, [pc, #352]	@ (80031cc <HAL_ADC_Init+0x2b8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d101      	bne.n	8003072 <HAL_ADC_Init+0x15e>
 800306e:	4a59      	ldr	r2, [pc, #356]	@ (80031d4 <HAL_ADC_Init+0x2c0>)
 8003070:	e000      	b.n	8003074 <HAL_ADC_Init+0x160>
 8003072:	4a59      	ldr	r2, [pc, #356]	@ (80031d8 <HAL_ADC_Init+0x2c4>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4619      	mov	r1, r3
 800307a:	4610      	mov	r0, r2
 800307c:	f7ff fc5e 	bl	800293c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a52      	ldr	r2, [pc, #328]	@ (80031d0 <HAL_ADC_Init+0x2bc>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d129      	bne.n	80030de <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	7e5b      	ldrb	r3, [r3, #25]
 800308e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003094:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800309a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d013      	beq.n	80030cc <HAL_ADC_Init+0x1b8>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b0c      	cmp	r3, #12
 80030aa:	d00d      	beq.n	80030c8 <HAL_ADC_Init+0x1b4>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	2b1c      	cmp	r3, #28
 80030b2:	d007      	beq.n	80030c4 <HAL_ADC_Init+0x1b0>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b18      	cmp	r3, #24
 80030ba:	d101      	bne.n	80030c0 <HAL_ADC_Init+0x1ac>
 80030bc:	2318      	movs	r3, #24
 80030be:	e006      	b.n	80030ce <HAL_ADC_Init+0x1ba>
 80030c0:	2300      	movs	r3, #0
 80030c2:	e004      	b.n	80030ce <HAL_ADC_Init+0x1ba>
 80030c4:	2310      	movs	r3, #16
 80030c6:	e002      	b.n	80030ce <HAL_ADC_Init+0x1ba>
 80030c8:	2308      	movs	r3, #8
 80030ca:	e000      	b.n	80030ce <HAL_ADC_Init+0x1ba>
 80030cc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80030ce:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	e00e      	b.n	80030fc <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	7e5b      	ldrb	r3, [r3, #25]
 80030e2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030e8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030ee:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030f6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d106      	bne.n	8003114 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310a:	3b01      	subs	r3, #1
 800310c:	045b      	lsls	r3, r3, #17
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003118:	2b00      	cmp	r3, #0
 800311a:	d009      	beq.n	8003130 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003120:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003128:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a26      	ldr	r2, [pc, #152]	@ (80031d0 <HAL_ADC_Init+0x2bc>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d115      	bne.n	8003166 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	4b26      	ldr	r3, [pc, #152]	@ (80031dc <HAL_ADC_Init+0x2c8>)
 8003142:	4013      	ands	r3, r2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	69b9      	ldr	r1, [r7, #24]
 800314a:	430b      	orrs	r3, r1
 800314c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	611a      	str	r2, [r3, #16]
 8003164:	e009      	b.n	800317a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	4b1c      	ldr	r3, [pc, #112]	@ (80031e0 <HAL_ADC_Init+0x2cc>)
 800316e:	4013      	ands	r3, r2
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	69b9      	ldr	r1, [r7, #24]
 8003176:	430b      	orrs	r3, r1
 8003178:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fea2 	bl	8002ec8 <LL_ADC_REG_IsConversionOngoing>
 8003184:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff feaf 	bl	8002eee <LL_ADC_INJ_IsConversionOngoing>
 8003190:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	f040 808e 	bne.w	80032b6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b00      	cmp	r3, #0
 800319e:	f040 808a 	bne.w	80032b6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a0a      	ldr	r2, [pc, #40]	@ (80031d0 <HAL_ADC_Init+0x2bc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d11b      	bne.n	80031e4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	7e1b      	ldrb	r3, [r3, #24]
 80031b0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031b8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
 80031be:	e018      	b.n	80031f2 <HAL_ADC_Init+0x2de>
 80031c0:	24000050 	.word	0x24000050
 80031c4:	053e2d63 	.word	0x053e2d63
 80031c8:	40022000 	.word	0x40022000
 80031cc:	40022100 	.word	0x40022100
 80031d0:	58026000 	.word	0x58026000
 80031d4:	40022300 	.word	0x40022300
 80031d8:	58026300 	.word	0x58026300
 80031dc:	fff04007 	.word	0xfff04007
 80031e0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	7e1b      	ldrb	r3, [r3, #24]
 80031e8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	4b46      	ldr	r3, [pc, #280]	@ (8003314 <HAL_ADC_Init+0x400>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	69b9      	ldr	r1, [r7, #24]
 8003202:	430b      	orrs	r3, r1
 8003204:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800320c:	2b01      	cmp	r3, #1
 800320e:	d137      	bne.n	8003280 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003214:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a3f      	ldr	r2, [pc, #252]	@ (8003318 <HAL_ADC_Init+0x404>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d116      	bne.n	800324e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691a      	ldr	r2, [r3, #16]
 8003226:	4b3d      	ldr	r3, [pc, #244]	@ (800331c <HAL_ADC_Init+0x408>)
 8003228:	4013      	ands	r3, r2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003232:	4311      	orrs	r1, r2
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003238:	4311      	orrs	r1, r2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800323e:	430a      	orrs	r2, r1
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	611a      	str	r2, [r3, #16]
 800324c:	e020      	b.n	8003290 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	4b32      	ldr	r3, [pc, #200]	@ (8003320 <HAL_ADC_Init+0x40c>)
 8003256:	4013      	ands	r3, r2
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800325c:	3a01      	subs	r2, #1
 800325e:	0411      	lsls	r1, r2, #16
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003264:	4311      	orrs	r1, r2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800326a:	4311      	orrs	r1, r2
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003270:	430a      	orrs	r2, r1
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0201 	orr.w	r2, r2, #1
 800327c:	611a      	str	r2, [r3, #16]
 800327e:	e007      	b.n	8003290 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0201 	bic.w	r2, r2, #1
 800328e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003318 <HAL_ADC_Init+0x404>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d002      	beq.n	80032b6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f001 f9c3 	bl	800463c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d10c      	bne.n	80032d8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c4:	f023 010f 	bic.w	r1, r3, #15
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	1e5a      	subs	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80032d6:	e007      	b.n	80032e8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 020f 	bic.w	r2, r2, #15
 80032e6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ec:	f023 0303 	bic.w	r3, r3, #3
 80032f0:	f043 0201 	orr.w	r2, r3, #1
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	661a      	str	r2, [r3, #96]	@ 0x60
 80032f8:	e007      	b.n	800330a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032fe:	f043 0210 	orr.w	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800330a:	7ffb      	ldrb	r3, [r7, #31]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3724      	adds	r7, #36	@ 0x24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd90      	pop	{r4, r7, pc}
 8003314:	ffffbffc 	.word	0xffffbffc
 8003318:	58026000 	.word	0x58026000
 800331c:	fc00f81f 	.word	0xfc00f81f
 8003320:	fc00f81e 	.word	0xfc00f81e

08003324 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a60      	ldr	r2, [pc, #384]	@ (80034b8 <HAL_ADC_Start_DMA+0x194>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d004      	beq.n	8003344 <HAL_ADC_Start_DMA+0x20>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a5f      	ldr	r2, [pc, #380]	@ (80034bc <HAL_ADC_Start_DMA+0x198>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d101      	bne.n	8003348 <HAL_ADC_Start_DMA+0x24>
 8003344:	4b5e      	ldr	r3, [pc, #376]	@ (80034c0 <HAL_ADC_Start_DMA+0x19c>)
 8003346:	e000      	b.n	800334a <HAL_ADC_Start_DMA+0x26>
 8003348:	4b5e      	ldr	r3, [pc, #376]	@ (80034c4 <HAL_ADC_Start_DMA+0x1a0>)
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fd16 	bl	8002d7c <LL_ADC_GetMultimode>
 8003350:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fdb6 	bl	8002ec8 <LL_ADC_REG_IsConversionOngoing>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	f040 80a2 	bne.w	80034a8 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800336a:	2b01      	cmp	r3, #1
 800336c:	d101      	bne.n	8003372 <HAL_ADC_Start_DMA+0x4e>
 800336e:	2302      	movs	r3, #2
 8003370:	e09d      	b.n	80034ae <HAL_ADC_Start_DMA+0x18a>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d006      	beq.n	800338e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	2b05      	cmp	r3, #5
 8003384:	d003      	beq.n	800338e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	2b09      	cmp	r3, #9
 800338a:	f040 8086 	bne.w	800349a <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f001 f836 	bl	8004400 <ADC_Enable>
 8003394:	4603      	mov	r3, r0
 8003396:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003398:	7dfb      	ldrb	r3, [r7, #23]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d178      	bne.n	8003490 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80033a2:	4b49      	ldr	r3, [pc, #292]	@ (80034c8 <HAL_ADC_Start_DMA+0x1a4>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a42      	ldr	r2, [pc, #264]	@ (80034bc <HAL_ADC_Start_DMA+0x198>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d002      	beq.n	80033be <HAL_ADC_Start_DMA+0x9a>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	e000      	b.n	80033c0 <HAL_ADC_Start_DMA+0x9c>
 80033be:	4b3e      	ldr	r3, [pc, #248]	@ (80034b8 <HAL_ADC_Start_DMA+0x194>)
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d002      	beq.n	80033ce <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d105      	bne.n	80033da <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033d2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d006      	beq.n	80033f4 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033ea:	f023 0206 	bic.w	r2, r3, #6
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	665a      	str	r2, [r3, #100]	@ 0x64
 80033f2:	e002      	b.n	80033fa <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fe:	4a33      	ldr	r2, [pc, #204]	@ (80034cc <HAL_ADC_Start_DMA+0x1a8>)
 8003400:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003406:	4a32      	ldr	r2, [pc, #200]	@ (80034d0 <HAL_ADC_Start_DMA+0x1ac>)
 8003408:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340e:	4a31      	ldr	r2, [pc, #196]	@ (80034d4 <HAL_ADC_Start_DMA+0x1b0>)
 8003410:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	221c      	movs	r2, #28
 8003418:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0210 	orr.w	r2, r2, #16
 8003430:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a28      	ldr	r2, [pc, #160]	@ (80034d8 <HAL_ADC_Start_DMA+0x1b4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d10f      	bne.n	800345c <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	4619      	mov	r1, r3
 800344a:	4610      	mov	r0, r2
 800344c:	f7ff fbfe 	bl	8002c4c <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fbe9 	bl	8002c2c <LL_ADC_EnableDMAReq>
 800345a:	e007      	b.n	800346c <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003464:	4619      	mov	r1, r3
 8003466:	4610      	mov	r0, r2
 8003468:	f7ff fbcd 	bl	8002c06 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3340      	adds	r3, #64	@ 0x40
 8003476:	4619      	mov	r1, r3
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f001 ff6e 	bl	800535c <HAL_DMA_Start_IT>
 8003480:	4603      	mov	r3, r0
 8003482:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff fd09 	bl	8002ea0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800348e:	e00d      	b.n	80034ac <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8003498:	e008      	b.n	80034ac <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80034a6:	e001      	b.n	80034ac <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034a8:	2302      	movs	r3, #2
 80034aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80034ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40022000 	.word	0x40022000
 80034bc:	40022100 	.word	0x40022100
 80034c0:	40022300 	.word	0x40022300
 80034c4:	58026300 	.word	0x58026300
 80034c8:	fffff0fe 	.word	0xfffff0fe
 80034cc:	08004515 	.word	0x08004515
 80034d0:	080045ed 	.word	0x080045ed
 80034d4:	08004609 	.word	0x08004609
 80034d8:	58026000 	.word	0x58026000

080034dc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08a      	sub	sp, #40	@ 0x28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80034e4:	2300      	movs	r3, #0
 80034e6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a87      	ldr	r2, [pc, #540]	@ (800371c <HAL_ADC_IRQHandler+0x240>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d004      	beq.n	800350c <HAL_ADC_IRQHandler+0x30>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a86      	ldr	r2, [pc, #536]	@ (8003720 <HAL_ADC_IRQHandler+0x244>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d101      	bne.n	8003510 <HAL_ADC_IRQHandler+0x34>
 800350c:	4b85      	ldr	r3, [pc, #532]	@ (8003724 <HAL_ADC_IRQHandler+0x248>)
 800350e:	e000      	b.n	8003512 <HAL_ADC_IRQHandler+0x36>
 8003510:	4b85      	ldr	r3, [pc, #532]	@ (8003728 <HAL_ADC_IRQHandler+0x24c>)
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff fc32 	bl	8002d7c <LL_ADC_GetMultimode>
 8003518:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d017      	beq.n	8003554 <HAL_ADC_IRQHandler+0x78>
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d012      	beq.n	8003554 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b00      	cmp	r3, #0
 8003538:	d105      	bne.n	8003546 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800353e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f001 f9b4 	bl	80048b4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2202      	movs	r2, #2
 8003552:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	d004      	beq.n	8003568 <HAL_ADC_IRQHandler+0x8c>
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10a      	bne.n	800357e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 8083 	beq.w	800367a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d07d      	beq.n	800367a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	2b00      	cmp	r3, #0
 8003588:	d105      	bne.n	8003596 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800358e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff faf4 	bl	8002b88 <LL_ADC_REG_IsTriggerSourceSWStart>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d062      	beq.n	800366c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a5d      	ldr	r2, [pc, #372]	@ (8003720 <HAL_ADC_IRQHandler+0x244>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d002      	beq.n	80035b6 <HAL_ADC_IRQHandler+0xda>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	e000      	b.n	80035b8 <HAL_ADC_IRQHandler+0xdc>
 80035b6:	4b59      	ldr	r3, [pc, #356]	@ (800371c <HAL_ADC_IRQHandler+0x240>)
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	4293      	cmp	r3, r2
 80035be:	d008      	beq.n	80035d2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b05      	cmp	r3, #5
 80035ca:	d002      	beq.n	80035d2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2b09      	cmp	r3, #9
 80035d0:	d104      	bne.n	80035dc <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	623b      	str	r3, [r7, #32]
 80035da:	e00c      	b.n	80035f6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a4f      	ldr	r2, [pc, #316]	@ (8003720 <HAL_ADC_IRQHandler+0x244>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d002      	beq.n	80035ec <HAL_ADC_IRQHandler+0x110>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	e000      	b.n	80035ee <HAL_ADC_IRQHandler+0x112>
 80035ec:	4b4b      	ldr	r3, [pc, #300]	@ (800371c <HAL_ADC_IRQHandler+0x240>)
 80035ee:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d135      	bne.n	800366c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b08      	cmp	r3, #8
 800360c:	d12e      	bne.n	800366c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fc58 	bl	8002ec8 <LL_ADC_REG_IsConversionOngoing>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d11a      	bne.n	8003654 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 020c 	bic.w	r2, r2, #12
 800362c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003632:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800363e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d112      	bne.n	800366c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800364a:	f043 0201 	orr.w	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	661a      	str	r2, [r3, #96]	@ 0x60
 8003652:	e00b      	b.n	800366c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003658:	f043 0210 	orr.w	r2, r3, #16
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003664:	f043 0201 	orr.w	r2, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f96f 	bl	8003950 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	220c      	movs	r2, #12
 8003678:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	f003 0320 	and.w	r3, r3, #32
 8003680:	2b00      	cmp	r3, #0
 8003682:	d004      	beq.n	800368e <HAL_ADC_IRQHandler+0x1b2>
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10b      	bne.n	80036a6 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80a0 	beq.w	80037da <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 809a 	beq.w	80037da <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036aa:	f003 0310 	and.w	r3, r3, #16
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d105      	bne.n	80036be <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff fadc 	bl	8002c80 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80036c8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff fa5a 	bl	8002b88 <LL_ADC_REG_IsTriggerSourceSWStart>
 80036d4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a11      	ldr	r2, [pc, #68]	@ (8003720 <HAL_ADC_IRQHandler+0x244>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d002      	beq.n	80036e6 <HAL_ADC_IRQHandler+0x20a>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	e000      	b.n	80036e8 <HAL_ADC_IRQHandler+0x20c>
 80036e6:	4b0d      	ldr	r3, [pc, #52]	@ (800371c <HAL_ADC_IRQHandler+0x240>)
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d008      	beq.n	8003702 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d005      	beq.n	8003702 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2b06      	cmp	r3, #6
 80036fa:	d002      	beq.n	8003702 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	2b07      	cmp	r3, #7
 8003700:	d104      	bne.n	800370c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	623b      	str	r3, [r7, #32]
 800370a:	e014      	b.n	8003736 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a03      	ldr	r2, [pc, #12]	@ (8003720 <HAL_ADC_IRQHandler+0x244>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00a      	beq.n	800372c <HAL_ADC_IRQHandler+0x250>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	e008      	b.n	800372e <HAL_ADC_IRQHandler+0x252>
 800371c:	40022000 	.word	0x40022000
 8003720:	40022100 	.word	0x40022100
 8003724:	40022300 	.word	0x40022300
 8003728:	58026300 	.word	0x58026300
 800372c:	4b84      	ldr	r3, [pc, #528]	@ (8003940 <HAL_ADC_IRQHandler+0x464>)
 800372e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d047      	beq.n	80037cc <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d007      	beq.n	8003756 <HAL_ADC_IRQHandler+0x27a>
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d03f      	beq.n	80037cc <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003752:	2b00      	cmp	r3, #0
 8003754:	d13a      	bne.n	80037cc <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003760:	2b40      	cmp	r3, #64	@ 0x40
 8003762:	d133      	bne.n	80037cc <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d12e      	bne.n	80037cc <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff fbbb 	bl	8002eee <LL_ADC_INJ_IsConversionOngoing>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d11a      	bne.n	80037b4 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800378c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003792:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800379e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d112      	bne.n	80037cc <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037aa:	f043 0201 	orr.w	r2, r3, #1
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	661a      	str	r2, [r3, #96]	@ 0x60
 80037b2:	e00b      	b.n	80037cc <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b8:	f043 0210 	orr.w	r2, r3, #16
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037c4:	f043 0201 	orr.w	r2, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f001 f849 	bl	8004864 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2260      	movs	r2, #96	@ 0x60
 80037d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d011      	beq.n	8003808 <HAL_ADC_IRQHandler+0x32c>
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00c      	beq.n	8003808 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f8bc 	bl	8003978 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2280      	movs	r2, #128	@ 0x80
 8003806:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380e:	2b00      	cmp	r3, #0
 8003810:	d012      	beq.n	8003838 <HAL_ADC_IRQHandler+0x35c>
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00d      	beq.n	8003838 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003820:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f001 f82f 	bl	800488c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003836:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800383e:	2b00      	cmp	r3, #0
 8003840:	d012      	beq.n	8003868 <HAL_ADC_IRQHandler+0x38c>
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00d      	beq.n	8003868 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003850:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f001 f821 	bl	80048a0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003866:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	2b00      	cmp	r3, #0
 8003870:	d043      	beq.n	80038fa <HAL_ADC_IRQHandler+0x41e>
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	f003 0310 	and.w	r3, r3, #16
 8003878:	2b00      	cmp	r3, #0
 800387a:	d03e      	beq.n	80038fa <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003880:	2b00      	cmp	r3, #0
 8003882:	d102      	bne.n	800388a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003884:	2301      	movs	r3, #1
 8003886:	627b      	str	r3, [r7, #36]	@ 0x24
 8003888:	e021      	b.n	80038ce <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d015      	beq.n	80038bc <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a2a      	ldr	r2, [pc, #168]	@ (8003940 <HAL_ADC_IRQHandler+0x464>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d004      	beq.n	80038a4 <HAL_ADC_IRQHandler+0x3c8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a29      	ldr	r2, [pc, #164]	@ (8003944 <HAL_ADC_IRQHandler+0x468>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d101      	bne.n	80038a8 <HAL_ADC_IRQHandler+0x3cc>
 80038a4:	4b28      	ldr	r3, [pc, #160]	@ (8003948 <HAL_ADC_IRQHandler+0x46c>)
 80038a6:	e000      	b.n	80038aa <HAL_ADC_IRQHandler+0x3ce>
 80038a8:	4b28      	ldr	r3, [pc, #160]	@ (800394c <HAL_ADC_IRQHandler+0x470>)
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fa74 	bl	8002d98 <LL_ADC_GetMultiDMATransfer>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00b      	beq.n	80038ce <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80038b6:	2301      	movs	r3, #1
 80038b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ba:	e008      	b.n	80038ce <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80038ca:	2301      	movs	r3, #1
 80038cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80038ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d10e      	bne.n	80038f2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038e4:	f043 0202 	orr.w	r2, r3, #2
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f84d 	bl	800398c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2210      	movs	r2, #16
 80038f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003900:	2b00      	cmp	r3, #0
 8003902:	d018      	beq.n	8003936 <HAL_ADC_IRQHandler+0x45a>
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800390a:	2b00      	cmp	r3, #0
 800390c:	d013      	beq.n	8003936 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003912:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800391e:	f043 0208 	orr.w	r2, r3, #8
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800392e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 ffa1 	bl	8004878 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003936:	bf00      	nop
 8003938:	3728      	adds	r7, #40	@ 0x28
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40022000 	.word	0x40022000
 8003944:	40022100 	.word	0x40022100
 8003948:	40022300 	.word	0x40022300
 800394c:	58026300 	.word	0x58026300

08003950 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80039a0:	b590      	push	{r4, r7, lr}
 80039a2:	b0b9      	sub	sp, #228	@ 0xe4
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039ba:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4aab      	ldr	r2, [pc, #684]	@ (8003c70 <HAL_ADC_ConfigChannel+0x2d0>)
 80039c2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d102      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x34>
 80039ce:	2302      	movs	r3, #2
 80039d0:	f000 bcfe 	b.w	80043d0 <HAL_ADC_ConfigChannel+0xa30>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff fa71 	bl	8002ec8 <LL_ADC_REG_IsConversionOngoing>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f040 84e2 	bne.w	80043b2 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	db38      	blt.n	8003a68 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a9e      	ldr	r2, [pc, #632]	@ (8003c74 <HAL_ADC_ConfigChannel+0x2d4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d033      	beq.n	8003a68 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d108      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x7e>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	0e9b      	lsrs	r3, r3, #26
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	2201      	movs	r2, #1
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	e01d      	b.n	8003a5a <HAL_ADC_ConfigChannel+0xba>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a2a:	fa93 f3a3 	rbit	r3, r3
 8003a2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003a42:	2320      	movs	r3, #32
 8003a44:	e004      	b.n	8003a50 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003a46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a4a:	fab3 f383 	clz	r3, r3
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	2201      	movs	r2, #1
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6812      	ldr	r2, [r2, #0]
 8003a5e:	69d1      	ldr	r1, [r2, #28]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	430b      	orrs	r3, r1
 8003a66:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6818      	ldr	r0, [r3, #0]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	6859      	ldr	r1, [r3, #4]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	461a      	mov	r2, r3
 8003a76:	f7ff f89a 	bl	8002bae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff fa22 	bl	8002ec8 <LL_ADC_REG_IsConversionOngoing>
 8003a84:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff fa2e 	bl	8002eee <LL_ADC_INJ_IsConversionOngoing>
 8003a92:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f040 8270 	bne.w	8003f80 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003aa0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f040 826b 	bne.w	8003f80 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	6819      	ldr	r1, [r3, #0]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f7ff f8f5 	bl	8002ca6 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a6c      	ldr	r2, [pc, #432]	@ (8003c74 <HAL_ADC_ConfigChannel+0x2d4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d10d      	bne.n	8003ae2 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	695a      	ldr	r2, [r3, #20]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	08db      	lsrs	r3, r3, #3
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ae0:	e032      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ae2:	4b65      	ldr	r3, [pc, #404]	@ (8003c78 <HAL_ADC_ConfigChannel+0x2d8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003aea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003aee:	d10b      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x168>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	089b      	lsrs	r3, r3, #2
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	e01d      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x1a4>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10b      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0x18e>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	089b      	lsrs	r3, r3, #2
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	e00a      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x1a4>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	695a      	ldr	r2, [r3, #20]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	089b      	lsrs	r3, r3, #2
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d048      	beq.n	8003be2 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	6919      	ldr	r1, [r3, #16]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b60:	f7fe ff20 	bl	80029a4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a42      	ldr	r2, [pc, #264]	@ (8003c74 <HAL_ADC_ConfigChannel+0x2d4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d119      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6919      	ldr	r1, [r3, #16]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f7fe ffb8 	bl	8002af0 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6818      	ldr	r0, [r3, #0]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	6919      	ldr	r1, [r3, #16]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d102      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x1f8>
 8003b92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b96:	e000      	b.n	8003b9a <HAL_ADC_ConfigChannel+0x1fa>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f7fe ff86 	bl	8002aac <LL_ADC_SetOffsetSaturation>
 8003ba0:	e1ee      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6919      	ldr	r1, [r3, #16]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d102      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x21a>
 8003bb4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003bb8:	e000      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x21c>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f7fe ff53 	bl	8002a68 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	6919      	ldr	r1, [r3, #16]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	7e1b      	ldrb	r3, [r3, #24]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d102      	bne.n	8003bd8 <HAL_ADC_ConfigChannel+0x238>
 8003bd2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003bd6:	e000      	b.n	8003bda <HAL_ADC_ConfigChannel+0x23a>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f7fe ff2a 	bl	8002a34 <LL_ADC_SetDataRightShift>
 8003be0:	e1ce      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a23      	ldr	r2, [pc, #140]	@ (8003c74 <HAL_ADC_ConfigChannel+0x2d4>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	f040 8181 	bne.w	8003ef0 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fe ff07 	bl	8002a08 <LL_ADC_GetOffsetChannel>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10a      	bne.n	8003c1a <HAL_ADC_ConfigChannel+0x27a>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fe fefc 	bl	8002a08 <LL_ADC_GetOffsetChannel>
 8003c10:	4603      	mov	r3, r0
 8003c12:	0e9b      	lsrs	r3, r3, #26
 8003c14:	f003 021f 	and.w	r2, r3, #31
 8003c18:	e01e      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x2b8>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fe fef1 	bl	8002a08 <LL_ADC_GetOffsetChannel>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c30:	fa93 f3a3 	rbit	r3, r3
 8003c34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003c38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c3c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003c40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003c48:	2320      	movs	r3, #32
 8003c4a:	e004      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003c4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c50:	fab3 f383 	clz	r3, r3
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	461a      	mov	r2, r3
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10b      	bne.n	8003c7c <HAL_ADC_ConfigChannel+0x2dc>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	0e9b      	lsrs	r3, r3, #26
 8003c6a:	f003 031f 	and.w	r3, r3, #31
 8003c6e:	e01e      	b.n	8003cae <HAL_ADC_ConfigChannel+0x30e>
 8003c70:	47ff0000 	.word	0x47ff0000
 8003c74:	58026000 	.word	0x58026000
 8003c78:	5c001000 	.word	0x5c001000
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c88:	fa93 f3a3 	rbit	r3, r3
 8003c8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003c90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003c98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003ca0:	2320      	movs	r3, #32
 8003ca2:	e004      	b.n	8003cae <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003ca4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003ca8:	fab3 f383 	clz	r3, r3
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d106      	bne.n	8003cc0 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe ff3a 	bl	8002b34 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe fe9e 	bl	8002a08 <LL_ADC_GetOffsetChannel>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10a      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x34c>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2101      	movs	r1, #1
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fe fe93 	bl	8002a08 <LL_ADC_GetOffsetChannel>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	0e9b      	lsrs	r3, r3, #26
 8003ce6:	f003 021f 	and.w	r2, r3, #31
 8003cea:	e01e      	b.n	8003d2a <HAL_ADC_ConfigChannel+0x38a>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe fe88 	bl	8002a08 <LL_ADC_GetOffsetChannel>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d02:	fa93 f3a3 	rbit	r3, r3
 8003d06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003d0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003d12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003d1a:	2320      	movs	r3, #32
 8003d1c:	e004      	b.n	8003d28 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003d1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d22:	fab3 f383 	clz	r3, r3
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	461a      	mov	r2, r3
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d105      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x3a2>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	0e9b      	lsrs	r3, r3, #26
 8003d3c:	f003 031f 	and.w	r3, r3, #31
 8003d40:	e018      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x3d4>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d4e:	fa93 f3a3 	rbit	r3, r3
 8003d52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003d56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d5a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003d5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003d66:	2320      	movs	r3, #32
 8003d68:	e004      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8003d6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d6e:	fab3 f383 	clz	r3, r3
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d106      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2101      	movs	r1, #1
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fe fed7 	bl	8002b34 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2102      	movs	r1, #2
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fe fe3b 	bl	8002a08 <LL_ADC_GetOffsetChannel>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x412>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2102      	movs	r1, #2
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fe fe30 	bl	8002a08 <LL_ADC_GetOffsetChannel>
 8003da8:	4603      	mov	r3, r0
 8003daa:	0e9b      	lsrs	r3, r3, #26
 8003dac:	f003 021f 	and.w	r2, r3, #31
 8003db0:	e01e      	b.n	8003df0 <HAL_ADC_ConfigChannel+0x450>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2102      	movs	r1, #2
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fe fe25 	bl	8002a08 <LL_ADC_GetOffsetChannel>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003dc8:	fa93 f3a3 	rbit	r3, r3
 8003dcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003dd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003dd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003dd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003de0:	2320      	movs	r3, #32
 8003de2:	e004      	b.n	8003dee <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003de4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003de8:	fab3 f383 	clz	r3, r3
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	461a      	mov	r2, r3
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d105      	bne.n	8003e08 <HAL_ADC_ConfigChannel+0x468>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	0e9b      	lsrs	r3, r3, #26
 8003e02:	f003 031f 	and.w	r3, r3, #31
 8003e06:	e014      	b.n	8003e32 <HAL_ADC_ConfigChannel+0x492>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e10:	fa93 f3a3 	rbit	r3, r3
 8003e14:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003e16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003e1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003e24:	2320      	movs	r3, #32
 8003e26:	e004      	b.n	8003e32 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003e28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e2c:	fab3 f383 	clz	r3, r3
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d106      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2102      	movs	r1, #2
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe fe78 	bl	8002b34 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2103      	movs	r1, #3
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe fddc 	bl	8002a08 <LL_ADC_GetOffsetChannel>
 8003e50:	4603      	mov	r3, r0
 8003e52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10a      	bne.n	8003e70 <HAL_ADC_ConfigChannel+0x4d0>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2103      	movs	r1, #3
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fe fdd1 	bl	8002a08 <LL_ADC_GetOffsetChannel>
 8003e66:	4603      	mov	r3, r0
 8003e68:	0e9b      	lsrs	r3, r3, #26
 8003e6a:	f003 021f 	and.w	r2, r3, #31
 8003e6e:	e017      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0x500>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2103      	movs	r1, #3
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fe fdc6 	bl	8002a08 <LL_ADC_GetOffsetChannel>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e82:	fa93 f3a3 	rbit	r3, r3
 8003e86:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003e88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e8a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003e8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003e92:	2320      	movs	r3, #32
 8003e94:	e003      	b.n	8003e9e <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8003e96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e98:	fab3 f383 	clz	r3, r3
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d105      	bne.n	8003eb8 <HAL_ADC_ConfigChannel+0x518>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	0e9b      	lsrs	r3, r3, #26
 8003eb2:	f003 031f 	and.w	r3, r3, #31
 8003eb6:	e011      	b.n	8003edc <HAL_ADC_ConfigChannel+0x53c>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ec0:	fa93 f3a3 	rbit	r3, r3
 8003ec4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003ec6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ec8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003eca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003ed0:	2320      	movs	r3, #32
 8003ed2:	e003      	b.n	8003edc <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003ed4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ed6:	fab3 f383 	clz	r3, r3
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d14f      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2103      	movs	r1, #3
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fe fe23 	bl	8002b34 <LL_ADC_SetOffsetState>
 8003eee:	e047      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ef6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	069b      	lsls	r3, r3, #26
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d107      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f12:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	069b      	lsls	r3, r3, #26
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d107      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f36:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	069b      	lsls	r3, r3, #26
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d107      	bne.n	8003f5c <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f5a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	069b      	lsls	r3, r3, #26
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d107      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f7e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fe ff77 	bl	8002e78 <LL_ADC_IsEnabled>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f040 8219 	bne.w	80043c4 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6819      	ldr	r1, [r3, #0]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f7fe feac 	bl	8002cfc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4aa1      	ldr	r2, [pc, #644]	@ (8004230 <HAL_ADC_ConfigChannel+0x890>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	f040 812e 	bne.w	800420c <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10b      	bne.n	8003fd8 <HAL_ADC_ConfigChannel+0x638>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	0e9b      	lsrs	r3, r3, #26
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	f003 031f 	and.w	r3, r3, #31
 8003fcc:	2b09      	cmp	r3, #9
 8003fce:	bf94      	ite	ls
 8003fd0:	2301      	movls	r3, #1
 8003fd2:	2300      	movhi	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	e019      	b.n	800400c <HAL_ADC_ConfigChannel+0x66c>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fe0:	fa93 f3a3 	rbit	r3, r3
 8003fe4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003fea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003ff0:	2320      	movs	r3, #32
 8003ff2:	e003      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003ff4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ff6:	fab3 f383 	clz	r3, r3
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	2b09      	cmp	r3, #9
 8004004:	bf94      	ite	ls
 8004006:	2301      	movls	r3, #1
 8004008:	2300      	movhi	r3, #0
 800400a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800400c:	2b00      	cmp	r3, #0
 800400e:	d079      	beq.n	8004104 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004018:	2b00      	cmp	r3, #0
 800401a:	d107      	bne.n	800402c <HAL_ADC_ConfigChannel+0x68c>
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	0e9b      	lsrs	r3, r3, #26
 8004022:	3301      	adds	r3, #1
 8004024:	069b      	lsls	r3, r3, #26
 8004026:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800402a:	e015      	b.n	8004058 <HAL_ADC_ConfigChannel+0x6b8>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004032:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004034:	fa93 f3a3 	rbit	r3, r3
 8004038:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800403a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800403c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800403e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8004044:	2320      	movs	r3, #32
 8004046:	e003      	b.n	8004050 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8004048:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800404a:	fab3 f383 	clz	r3, r3
 800404e:	b2db      	uxtb	r3, r3
 8004050:	3301      	adds	r3, #1
 8004052:	069b      	lsls	r3, r3, #26
 8004054:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004060:	2b00      	cmp	r3, #0
 8004062:	d109      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x6d8>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	0e9b      	lsrs	r3, r3, #26
 800406a:	3301      	adds	r3, #1
 800406c:	f003 031f 	and.w	r3, r3, #31
 8004070:	2101      	movs	r1, #1
 8004072:	fa01 f303 	lsl.w	r3, r1, r3
 8004076:	e017      	b.n	80040a8 <HAL_ADC_ConfigChannel+0x708>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004080:	fa93 f3a3 	rbit	r3, r3
 8004084:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004088:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800408a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004090:	2320      	movs	r3, #32
 8004092:	e003      	b.n	800409c <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8004094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004096:	fab3 f383 	clz	r3, r3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	3301      	adds	r3, #1
 800409e:	f003 031f 	and.w	r3, r3, #31
 80040a2:	2101      	movs	r1, #1
 80040a4:	fa01 f303 	lsl.w	r3, r1, r3
 80040a8:	ea42 0103 	orr.w	r1, r2, r3
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10a      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x72e>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	0e9b      	lsrs	r3, r3, #26
 80040be:	3301      	adds	r3, #1
 80040c0:	f003 021f 	and.w	r2, r3, #31
 80040c4:	4613      	mov	r3, r2
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	4413      	add	r3, r2
 80040ca:	051b      	lsls	r3, r3, #20
 80040cc:	e018      	b.n	8004100 <HAL_ADC_ConfigChannel+0x760>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d6:	fa93 f3a3 	rbit	r3, r3
 80040da:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80040dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040de:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80040e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 80040e6:	2320      	movs	r3, #32
 80040e8:	e003      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 80040ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ec:	fab3 f383 	clz	r3, r3
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	3301      	adds	r3, #1
 80040f4:	f003 021f 	and.w	r2, r3, #31
 80040f8:	4613      	mov	r3, r2
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	4413      	add	r3, r2
 80040fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004100:	430b      	orrs	r3, r1
 8004102:	e07e      	b.n	8004202 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800410c:	2b00      	cmp	r3, #0
 800410e:	d107      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x780>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	0e9b      	lsrs	r3, r3, #26
 8004116:	3301      	adds	r3, #1
 8004118:	069b      	lsls	r3, r3, #26
 800411a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800411e:	e015      	b.n	800414c <HAL_ADC_ConfigChannel+0x7ac>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004128:	fa93 f3a3 	rbit	r3, r3
 800412c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800412e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8004138:	2320      	movs	r3, #32
 800413a:	e003      	b.n	8004144 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 800413c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800413e:	fab3 f383 	clz	r3, r3
 8004142:	b2db      	uxtb	r3, r3
 8004144:	3301      	adds	r3, #1
 8004146:	069b      	lsls	r3, r3, #26
 8004148:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004154:	2b00      	cmp	r3, #0
 8004156:	d109      	bne.n	800416c <HAL_ADC_ConfigChannel+0x7cc>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	0e9b      	lsrs	r3, r3, #26
 800415e:	3301      	adds	r3, #1
 8004160:	f003 031f 	and.w	r3, r3, #31
 8004164:	2101      	movs	r1, #1
 8004166:	fa01 f303 	lsl.w	r3, r1, r3
 800416a:	e017      	b.n	800419c <HAL_ADC_ConfigChannel+0x7fc>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	fa93 f3a3 	rbit	r3, r3
 8004178:	61bb      	str	r3, [r7, #24]
  return result;
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8004184:	2320      	movs	r3, #32
 8004186:	e003      	b.n	8004190 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	fab3 f383 	clz	r3, r3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	3301      	adds	r3, #1
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	2101      	movs	r1, #1
 8004198:	fa01 f303 	lsl.w	r3, r1, r3
 800419c:	ea42 0103 	orr.w	r1, r2, r3
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10d      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x828>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	0e9b      	lsrs	r3, r3, #26
 80041b2:	3301      	adds	r3, #1
 80041b4:	f003 021f 	and.w	r2, r3, #31
 80041b8:	4613      	mov	r3, r2
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	4413      	add	r3, r2
 80041be:	3b1e      	subs	r3, #30
 80041c0:	051b      	lsls	r3, r3, #20
 80041c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041c6:	e01b      	b.n	8004200 <HAL_ADC_ConfigChannel+0x860>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	fa93 f3a3 	rbit	r3, r3
 80041d4:	60fb      	str	r3, [r7, #12]
  return result;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80041e0:	2320      	movs	r3, #32
 80041e2:	e003      	b.n	80041ec <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	fab3 f383 	clz	r3, r3
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	3301      	adds	r3, #1
 80041ee:	f003 021f 	and.w	r2, r3, #31
 80041f2:	4613      	mov	r3, r2
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	4413      	add	r3, r2
 80041f8:	3b1e      	subs	r3, #30
 80041fa:	051b      	lsls	r3, r3, #20
 80041fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004200:	430b      	orrs	r3, r1
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	6892      	ldr	r2, [r2, #8]
 8004206:	4619      	mov	r1, r3
 8004208:	f7fe fd4d 	bl	8002ca6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	f280 80d7 	bge.w	80043c4 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a06      	ldr	r2, [pc, #24]	@ (8004234 <HAL_ADC_ConfigChannel+0x894>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d004      	beq.n	800422a <HAL_ADC_ConfigChannel+0x88a>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a04      	ldr	r2, [pc, #16]	@ (8004238 <HAL_ADC_ConfigChannel+0x898>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d10a      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x8a0>
 800422a:	4b04      	ldr	r3, [pc, #16]	@ (800423c <HAL_ADC_ConfigChannel+0x89c>)
 800422c:	e009      	b.n	8004242 <HAL_ADC_ConfigChannel+0x8a2>
 800422e:	bf00      	nop
 8004230:	47ff0000 	.word	0x47ff0000
 8004234:	40022000 	.word	0x40022000
 8004238:	40022100 	.word	0x40022100
 800423c:	40022300 	.word	0x40022300
 8004240:	4b65      	ldr	r3, [pc, #404]	@ (80043d8 <HAL_ADC_ConfigChannel+0xa38>)
 8004242:	4618      	mov	r0, r3
 8004244:	f7fe fba0 	bl	8002988 <LL_ADC_GetCommonPathInternalCh>
 8004248:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a62      	ldr	r2, [pc, #392]	@ (80043dc <HAL_ADC_ConfigChannel+0xa3c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d004      	beq.n	8004260 <HAL_ADC_ConfigChannel+0x8c0>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a61      	ldr	r2, [pc, #388]	@ (80043e0 <HAL_ADC_ConfigChannel+0xa40>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d10e      	bne.n	800427e <HAL_ADC_ConfigChannel+0x8de>
 8004260:	485e      	ldr	r0, [pc, #376]	@ (80043dc <HAL_ADC_ConfigChannel+0xa3c>)
 8004262:	f7fe fe09 	bl	8002e78 <LL_ADC_IsEnabled>
 8004266:	4604      	mov	r4, r0
 8004268:	485d      	ldr	r0, [pc, #372]	@ (80043e0 <HAL_ADC_ConfigChannel+0xa40>)
 800426a:	f7fe fe05 	bl	8002e78 <LL_ADC_IsEnabled>
 800426e:	4603      	mov	r3, r0
 8004270:	4323      	orrs	r3, r4
 8004272:	2b00      	cmp	r3, #0
 8004274:	bf0c      	ite	eq
 8004276:	2301      	moveq	r3, #1
 8004278:	2300      	movne	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	e008      	b.n	8004290 <HAL_ADC_ConfigChannel+0x8f0>
 800427e:	4859      	ldr	r0, [pc, #356]	@ (80043e4 <HAL_ADC_ConfigChannel+0xa44>)
 8004280:	f7fe fdfa 	bl	8002e78 <LL_ADC_IsEnabled>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	bf0c      	ite	eq
 800428a:	2301      	moveq	r3, #1
 800428c:	2300      	movne	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 8084 	beq.w	800439e <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a53      	ldr	r2, [pc, #332]	@ (80043e8 <HAL_ADC_ConfigChannel+0xa48>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d132      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x966>
 80042a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d12c      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a4c      	ldr	r2, [pc, #304]	@ (80043e4 <HAL_ADC_ConfigChannel+0xa44>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	f040 8086 	bne.w	80043c4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a47      	ldr	r2, [pc, #284]	@ (80043dc <HAL_ADC_ConfigChannel+0xa3c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d004      	beq.n	80042cc <HAL_ADC_ConfigChannel+0x92c>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a46      	ldr	r2, [pc, #280]	@ (80043e0 <HAL_ADC_ConfigChannel+0xa40>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d101      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x930>
 80042cc:	4a47      	ldr	r2, [pc, #284]	@ (80043ec <HAL_ADC_ConfigChannel+0xa4c>)
 80042ce:	e000      	b.n	80042d2 <HAL_ADC_ConfigChannel+0x932>
 80042d0:	4a41      	ldr	r2, [pc, #260]	@ (80043d8 <HAL_ADC_ConfigChannel+0xa38>)
 80042d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042da:	4619      	mov	r1, r3
 80042dc:	4610      	mov	r0, r2
 80042de:	f7fe fb40 	bl	8002962 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042e2:	4b43      	ldr	r3, [pc, #268]	@ (80043f0 <HAL_ADC_ConfigChannel+0xa50>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	099b      	lsrs	r3, r3, #6
 80042e8:	4a42      	ldr	r2, [pc, #264]	@ (80043f4 <HAL_ADC_ConfigChannel+0xa54>)
 80042ea:	fba2 2303 	umull	r2, r3, r2, r3
 80042ee:	099b      	lsrs	r3, r3, #6
 80042f0:	3301      	adds	r3, #1
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80042f6:	e002      	b.n	80042fe <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1f9      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004304:	e05e      	b.n	80043c4 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a3b      	ldr	r2, [pc, #236]	@ (80043f8 <HAL_ADC_ConfigChannel+0xa58>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d120      	bne.n	8004352 <HAL_ADC_ConfigChannel+0x9b2>
 8004310:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004314:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d11a      	bne.n	8004352 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a30      	ldr	r2, [pc, #192]	@ (80043e4 <HAL_ADC_ConfigChannel+0xa44>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d14e      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a2c      	ldr	r2, [pc, #176]	@ (80043dc <HAL_ADC_ConfigChannel+0xa3c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d004      	beq.n	800433a <HAL_ADC_ConfigChannel+0x99a>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a2a      	ldr	r2, [pc, #168]	@ (80043e0 <HAL_ADC_ConfigChannel+0xa40>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d101      	bne.n	800433e <HAL_ADC_ConfigChannel+0x99e>
 800433a:	4a2c      	ldr	r2, [pc, #176]	@ (80043ec <HAL_ADC_ConfigChannel+0xa4c>)
 800433c:	e000      	b.n	8004340 <HAL_ADC_ConfigChannel+0x9a0>
 800433e:	4a26      	ldr	r2, [pc, #152]	@ (80043d8 <HAL_ADC_ConfigChannel+0xa38>)
 8004340:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004344:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004348:	4619      	mov	r1, r3
 800434a:	4610      	mov	r0, r2
 800434c:	f7fe fb09 	bl	8002962 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004350:	e038      	b.n	80043c4 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a29      	ldr	r2, [pc, #164]	@ (80043fc <HAL_ADC_ConfigChannel+0xa5c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d133      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0xa24>
 800435c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004360:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d12d      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1d      	ldr	r2, [pc, #116]	@ (80043e4 <HAL_ADC_ConfigChannel+0xa44>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d128      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a19      	ldr	r2, [pc, #100]	@ (80043dc <HAL_ADC_ConfigChannel+0xa3c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d004      	beq.n	8004386 <HAL_ADC_ConfigChannel+0x9e6>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a17      	ldr	r2, [pc, #92]	@ (80043e0 <HAL_ADC_ConfigChannel+0xa40>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d101      	bne.n	800438a <HAL_ADC_ConfigChannel+0x9ea>
 8004386:	4a19      	ldr	r2, [pc, #100]	@ (80043ec <HAL_ADC_ConfigChannel+0xa4c>)
 8004388:	e000      	b.n	800438c <HAL_ADC_ConfigChannel+0x9ec>
 800438a:	4a13      	ldr	r2, [pc, #76]	@ (80043d8 <HAL_ADC_ConfigChannel+0xa38>)
 800438c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004390:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004394:	4619      	mov	r1, r3
 8004396:	4610      	mov	r0, r2
 8004398:	f7fe fae3 	bl	8002962 <LL_ADC_SetCommonPathInternalCh>
 800439c:	e012      	b.n	80043c4 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043a2:	f043 0220 	orr.w	r2, r3, #32
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80043b0:	e008      	b.n	80043c4 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043b6:	f043 0220 	orr.w	r2, r3, #32
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80043cc:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	37e4      	adds	r7, #228	@ 0xe4
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd90      	pop	{r4, r7, pc}
 80043d8:	58026300 	.word	0x58026300
 80043dc:	40022000 	.word	0x40022000
 80043e0:	40022100 	.word	0x40022100
 80043e4:	58026000 	.word	0x58026000
 80043e8:	c7520000 	.word	0xc7520000
 80043ec:	40022300 	.word	0x40022300
 80043f0:	24000050 	.word	0x24000050
 80043f4:	053e2d63 	.word	0x053e2d63
 80043f8:	c3210000 	.word	0xc3210000
 80043fc:	cb840000 	.word	0xcb840000

08004400 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f7fe fd33 	bl	8002e78 <LL_ADC_IsEnabled>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d16e      	bne.n	80044f6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	4b38      	ldr	r3, [pc, #224]	@ (8004500 <ADC_Enable+0x100>)
 8004420:	4013      	ands	r3, r2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00d      	beq.n	8004442 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800442a:	f043 0210 	orr.w	r2, r3, #16
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004436:	f043 0201 	orr.w	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e05a      	b.n	80044f8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f7fe fd02 	bl	8002e50 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800444c:	f7fe fa30 	bl	80028b0 <HAL_GetTick>
 8004450:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a2b      	ldr	r2, [pc, #172]	@ (8004504 <ADC_Enable+0x104>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d004      	beq.n	8004466 <ADC_Enable+0x66>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a29      	ldr	r2, [pc, #164]	@ (8004508 <ADC_Enable+0x108>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d101      	bne.n	800446a <ADC_Enable+0x6a>
 8004466:	4b29      	ldr	r3, [pc, #164]	@ (800450c <ADC_Enable+0x10c>)
 8004468:	e000      	b.n	800446c <ADC_Enable+0x6c>
 800446a:	4b29      	ldr	r3, [pc, #164]	@ (8004510 <ADC_Enable+0x110>)
 800446c:	4618      	mov	r0, r3
 800446e:	f7fe fc85 	bl	8002d7c <LL_ADC_GetMultimode>
 8004472:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a23      	ldr	r2, [pc, #140]	@ (8004508 <ADC_Enable+0x108>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d002      	beq.n	8004484 <ADC_Enable+0x84>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	e000      	b.n	8004486 <ADC_Enable+0x86>
 8004484:	4b1f      	ldr	r3, [pc, #124]	@ (8004504 <ADC_Enable+0x104>)
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6812      	ldr	r2, [r2, #0]
 800448a:	4293      	cmp	r3, r2
 800448c:	d02c      	beq.n	80044e8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d130      	bne.n	80044f6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004494:	e028      	b.n	80044e8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe fcec 	bl	8002e78 <LL_ADC_IsEnabled>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d104      	bne.n	80044b0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fe fcd0 	bl	8002e50 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044b0:	f7fe f9fe 	bl	80028b0 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d914      	bls.n	80044e8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d00d      	beq.n	80044e8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d0:	f043 0210 	orr.w	r2, r3, #16
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044dc:	f043 0201 	orr.w	r2, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e007      	b.n	80044f8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d1cf      	bne.n	8004496 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	8000003f 	.word	0x8000003f
 8004504:	40022000 	.word	0x40022000
 8004508:	40022100 	.word	0x40022100
 800450c:	40022300 	.word	0x40022300
 8004510:	58026300 	.word	0x58026300

08004514 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004520:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004526:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800452a:	2b00      	cmp	r3, #0
 800452c:	d14b      	bne.n	80045c6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004532:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	d021      	beq.n	800458c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f7fe fb1b 	bl	8002b88 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d032      	beq.n	80045be <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d12b      	bne.n	80045be <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800456a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004576:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d11f      	bne.n	80045be <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004582:	f043 0201 	orr.w	r2, r3, #1
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	661a      	str	r2, [r3, #96]	@ 0x60
 800458a:	e018      	b.n	80045be <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d111      	bne.n	80045be <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800459e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d105      	bne.n	80045be <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045b6:	f043 0201 	orr.w	r2, r3, #1
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f7ff f9c6 	bl	8003950 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80045c4:	e00e      	b.n	80045e4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f7ff f9da 	bl	800398c <HAL_ADC_ErrorCallback>
}
 80045d8:	e004      	b.n	80045e4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	4798      	blx	r3
}
 80045e4:	bf00      	nop
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f7ff f9b2 	bl	8003964 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004600:	bf00      	nop
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004614:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800461a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004626:	f043 0204 	orr.w	r2, r3, #4
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f7ff f9ac 	bl	800398c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004634:	bf00      	nop
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a6c      	ldr	r2, [pc, #432]	@ (80047fc <ADC_ConfigureBoostMode+0x1c0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d004      	beq.n	8004658 <ADC_ConfigureBoostMode+0x1c>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a6b      	ldr	r2, [pc, #428]	@ (8004800 <ADC_ConfigureBoostMode+0x1c4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d109      	bne.n	800466c <ADC_ConfigureBoostMode+0x30>
 8004658:	4b6a      	ldr	r3, [pc, #424]	@ (8004804 <ADC_ConfigureBoostMode+0x1c8>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004660:	2b00      	cmp	r3, #0
 8004662:	bf14      	ite	ne
 8004664:	2301      	movne	r3, #1
 8004666:	2300      	moveq	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	e008      	b.n	800467e <ADC_ConfigureBoostMode+0x42>
 800466c:	4b66      	ldr	r3, [pc, #408]	@ (8004808 <ADC_ConfigureBoostMode+0x1cc>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004674:	2b00      	cmp	r3, #0
 8004676:	bf14      	ite	ne
 8004678:	2301      	movne	r3, #1
 800467a:	2300      	moveq	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d01c      	beq.n	80046bc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004682:	f004 fa85 	bl	8008b90 <HAL_RCC_GetHCLKFreq>
 8004686:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004690:	d010      	beq.n	80046b4 <ADC_ConfigureBoostMode+0x78>
 8004692:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004696:	d873      	bhi.n	8004780 <ADC_ConfigureBoostMode+0x144>
 8004698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800469c:	d002      	beq.n	80046a4 <ADC_ConfigureBoostMode+0x68>
 800469e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046a2:	d16d      	bne.n	8004780 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	0c1b      	lsrs	r3, r3, #16
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b0:	60fb      	str	r3, [r7, #12]
        break;
 80046b2:	e068      	b.n	8004786 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	089b      	lsrs	r3, r3, #2
 80046b8:	60fb      	str	r3, [r7, #12]
        break;
 80046ba:	e064      	b.n	8004786 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80046bc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80046c0:	f04f 0100 	mov.w	r1, #0
 80046c4:	f005 fc60 	bl	8009f88 <HAL_RCCEx_GetPeriphCLKFreq>
 80046c8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80046d2:	d051      	beq.n	8004778 <ADC_ConfigureBoostMode+0x13c>
 80046d4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80046d8:	d854      	bhi.n	8004784 <ADC_ConfigureBoostMode+0x148>
 80046da:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80046de:	d047      	beq.n	8004770 <ADC_ConfigureBoostMode+0x134>
 80046e0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80046e4:	d84e      	bhi.n	8004784 <ADC_ConfigureBoostMode+0x148>
 80046e6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80046ea:	d03d      	beq.n	8004768 <ADC_ConfigureBoostMode+0x12c>
 80046ec:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80046f0:	d848      	bhi.n	8004784 <ADC_ConfigureBoostMode+0x148>
 80046f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046f6:	d033      	beq.n	8004760 <ADC_ConfigureBoostMode+0x124>
 80046f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046fc:	d842      	bhi.n	8004784 <ADC_ConfigureBoostMode+0x148>
 80046fe:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004702:	d029      	beq.n	8004758 <ADC_ConfigureBoostMode+0x11c>
 8004704:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004708:	d83c      	bhi.n	8004784 <ADC_ConfigureBoostMode+0x148>
 800470a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800470e:	d01a      	beq.n	8004746 <ADC_ConfigureBoostMode+0x10a>
 8004710:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004714:	d836      	bhi.n	8004784 <ADC_ConfigureBoostMode+0x148>
 8004716:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800471a:	d014      	beq.n	8004746 <ADC_ConfigureBoostMode+0x10a>
 800471c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004720:	d830      	bhi.n	8004784 <ADC_ConfigureBoostMode+0x148>
 8004722:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004726:	d00e      	beq.n	8004746 <ADC_ConfigureBoostMode+0x10a>
 8004728:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800472c:	d82a      	bhi.n	8004784 <ADC_ConfigureBoostMode+0x148>
 800472e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004732:	d008      	beq.n	8004746 <ADC_ConfigureBoostMode+0x10a>
 8004734:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004738:	d824      	bhi.n	8004784 <ADC_ConfigureBoostMode+0x148>
 800473a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800473e:	d002      	beq.n	8004746 <ADC_ConfigureBoostMode+0x10a>
 8004740:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004744:	d11e      	bne.n	8004784 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	0c9b      	lsrs	r3, r3, #18
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	fbb2 f3f3 	udiv	r3, r2, r3
 8004754:	60fb      	str	r3, [r7, #12]
        break;
 8004756:	e016      	b.n	8004786 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	091b      	lsrs	r3, r3, #4
 800475c:	60fb      	str	r3, [r7, #12]
        break;
 800475e:	e012      	b.n	8004786 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	095b      	lsrs	r3, r3, #5
 8004764:	60fb      	str	r3, [r7, #12]
        break;
 8004766:	e00e      	b.n	8004786 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	099b      	lsrs	r3, r3, #6
 800476c:	60fb      	str	r3, [r7, #12]
        break;
 800476e:	e00a      	b.n	8004786 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	09db      	lsrs	r3, r3, #7
 8004774:	60fb      	str	r3, [r7, #12]
        break;
 8004776:	e006      	b.n	8004786 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	0a1b      	lsrs	r3, r3, #8
 800477c:	60fb      	str	r3, [r7, #12]
        break;
 800477e:	e002      	b.n	8004786 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004780:	bf00      	nop
 8004782:	e000      	b.n	8004786 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004784:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	085b      	lsrs	r3, r3, #1
 800478a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4a1f      	ldr	r2, [pc, #124]	@ (800480c <ADC_ConfigureBoostMode+0x1d0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d808      	bhi.n	80047a6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80047a2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80047a4:	e025      	b.n	80047f2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4a19      	ldr	r2, [pc, #100]	@ (8004810 <ADC_ConfigureBoostMode+0x1d4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d80a      	bhi.n	80047c4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047c0:	609a      	str	r2, [r3, #8]
}
 80047c2:	e016      	b.n	80047f2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4a13      	ldr	r2, [pc, #76]	@ (8004814 <ADC_ConfigureBoostMode+0x1d8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d80a      	bhi.n	80047e2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047de:	609a      	str	r2, [r3, #8]
}
 80047e0:	e007      	b.n	80047f2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80047f0:	609a      	str	r2, [r3, #8]
}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40022000 	.word	0x40022000
 8004800:	40022100 	.word	0x40022100
 8004804:	40022300 	.word	0x40022300
 8004808:	58026300 	.word	0x58026300
 800480c:	005f5e10 	.word	0x005f5e10
 8004810:	00bebc20 	.word	0x00bebc20
 8004814:	017d7840 	.word	0x017d7840

08004818 <LL_ADC_IsEnabled>:
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <LL_ADC_IsEnabled+0x18>
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <LL_ADC_IsEnabled+0x1a>
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <LL_ADC_REG_IsConversionOngoing>:
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 0304 	and.w	r3, r3, #4
 800484e:	2b04      	cmp	r3, #4
 8004850:	d101      	bne.n	8004856 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004852:	2301      	movs	r3, #1
 8004854:	e000      	b.n	8004858 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80048c8:	b590      	push	{r4, r7, lr}
 80048ca:	b0a3      	sub	sp, #140	@ 0x8c
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d101      	bne.n	80048e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80048e2:	2302      	movs	r3, #2
 80048e4:	e0c1      	b.n	8004a6a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80048ee:	2300      	movs	r3, #0
 80048f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80048f2:	2300      	movs	r3, #0
 80048f4:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a5e      	ldr	r2, [pc, #376]	@ (8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d102      	bne.n	8004906 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004900:	4b5d      	ldr	r3, [pc, #372]	@ (8004a78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	e001      	b.n	800490a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10b      	bne.n	8004928 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004914:	f043 0220 	orr.w	r2, r3, #32
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0a0      	b.n	8004a6a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff ff87 	bl	800483e <LL_ADC_REG_IsConversionOngoing>
 8004930:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff ff80 	bl	800483e <LL_ADC_REG_IsConversionOngoing>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	f040 8081 	bne.w	8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004946:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800494a:	2b00      	cmp	r3, #0
 800494c:	d17c      	bne.n	8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a48      	ldr	r2, [pc, #288]	@ (8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d004      	beq.n	8004962 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a46      	ldr	r2, [pc, #280]	@ (8004a78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d101      	bne.n	8004966 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004962:	4b46      	ldr	r3, [pc, #280]	@ (8004a7c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004964:	e000      	b.n	8004968 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004966:	4b46      	ldr	r3, [pc, #280]	@ (8004a80 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004968:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d039      	beq.n	80049e6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004972:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	431a      	orrs	r2, r3
 8004980:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004982:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a3a      	ldr	r2, [pc, #232]	@ (8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d004      	beq.n	8004998 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a39      	ldr	r2, [pc, #228]	@ (8004a78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d10e      	bne.n	80049b6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004998:	4836      	ldr	r0, [pc, #216]	@ (8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800499a:	f7ff ff3d 	bl	8004818 <LL_ADC_IsEnabled>
 800499e:	4604      	mov	r4, r0
 80049a0:	4835      	ldr	r0, [pc, #212]	@ (8004a78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049a2:	f7ff ff39 	bl	8004818 <LL_ADC_IsEnabled>
 80049a6:	4603      	mov	r3, r0
 80049a8:	4323      	orrs	r3, r4
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	bf0c      	ite	eq
 80049ae:	2301      	moveq	r3, #1
 80049b0:	2300      	movne	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	e008      	b.n	80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80049b6:	4833      	ldr	r0, [pc, #204]	@ (8004a84 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80049b8:	f7ff ff2e 	bl	8004818 <LL_ADC_IsEnabled>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	bf0c      	ite	eq
 80049c2:	2301      	moveq	r3, #1
 80049c4:	2300      	movne	r3, #0
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d047      	beq.n	8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80049cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004a88 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80049d2:	4013      	ands	r3, r2
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	6811      	ldr	r1, [r2, #0]
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	6892      	ldr	r2, [r2, #8]
 80049dc:	430a      	orrs	r2, r1
 80049de:	431a      	orrs	r2, r3
 80049e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049e2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049e4:	e03a      	b.n	8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80049e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049f0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d004      	beq.n	8004a06 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a1d      	ldr	r2, [pc, #116]	@ (8004a78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d10e      	bne.n	8004a24 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004a06:	481b      	ldr	r0, [pc, #108]	@ (8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a08:	f7ff ff06 	bl	8004818 <LL_ADC_IsEnabled>
 8004a0c:	4604      	mov	r4, r0
 8004a0e:	481a      	ldr	r0, [pc, #104]	@ (8004a78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a10:	f7ff ff02 	bl	8004818 <LL_ADC_IsEnabled>
 8004a14:	4603      	mov	r3, r0
 8004a16:	4323      	orrs	r3, r4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	bf0c      	ite	eq
 8004a1c:	2301      	moveq	r3, #1
 8004a1e:	2300      	movne	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	e008      	b.n	8004a36 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004a24:	4817      	ldr	r0, [pc, #92]	@ (8004a84 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004a26:	f7ff fef7 	bl	8004818 <LL_ADC_IsEnabled>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	bf0c      	ite	eq
 8004a30:	2301      	moveq	r3, #1
 8004a32:	2300      	movne	r3, #0
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d010      	beq.n	8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004a3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	4b12      	ldr	r3, [pc, #72]	@ (8004a88 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004a44:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a46:	e009      	b.n	8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a4c:	f043 0220 	orr.w	r2, r3, #32
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004a5a:	e000      	b.n	8004a5e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004a66:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	378c      	adds	r7, #140	@ 0x8c
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd90      	pop	{r4, r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40022000 	.word	0x40022000
 8004a78:	40022100 	.word	0x40022100
 8004a7c:	40022300 	.word	0x40022300
 8004a80:	58026300 	.word	0x58026300
 8004a84:	58026000 	.word	0x58026000
 8004a88:	fffff0e0 	.word	0xfffff0e0

08004a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004acc <__NVIC_SetPriorityGrouping+0x40>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004ab4:	4b06      	ldr	r3, [pc, #24]	@ (8004ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004aba:	4a04      	ldr	r2, [pc, #16]	@ (8004acc <__NVIC_SetPriorityGrouping+0x40>)
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	60d3      	str	r3, [r2, #12]
}
 8004ac0:	bf00      	nop
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	e000ed00 	.word	0xe000ed00
 8004ad0:	05fa0000 	.word	0x05fa0000

08004ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ad8:	4b04      	ldr	r3, [pc, #16]	@ (8004aec <__NVIC_GetPriorityGrouping+0x18>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	0a1b      	lsrs	r3, r3, #8
 8004ade:	f003 0307 	and.w	r3, r3, #7
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	e000ed00 	.word	0xe000ed00

08004af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	4603      	mov	r3, r0
 8004af8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	db0b      	blt.n	8004b1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b02:	88fb      	ldrh	r3, [r7, #6]
 8004b04:	f003 021f 	and.w	r2, r3, #31
 8004b08:	4907      	ldr	r1, [pc, #28]	@ (8004b28 <__NVIC_EnableIRQ+0x38>)
 8004b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	2001      	movs	r0, #1
 8004b12:	fa00 f202 	lsl.w	r2, r0, r2
 8004b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	e000e100 	.word	0xe000e100

08004b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	4603      	mov	r3, r0
 8004b34:	6039      	str	r1, [r7, #0]
 8004b36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	db0a      	blt.n	8004b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	490c      	ldr	r1, [pc, #48]	@ (8004b78 <__NVIC_SetPriority+0x4c>)
 8004b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b4a:	0112      	lsls	r2, r2, #4
 8004b4c:	b2d2      	uxtb	r2, r2
 8004b4e:	440b      	add	r3, r1
 8004b50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b54:	e00a      	b.n	8004b6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	4908      	ldr	r1, [pc, #32]	@ (8004b7c <__NVIC_SetPriority+0x50>)
 8004b5c:	88fb      	ldrh	r3, [r7, #6]
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	3b04      	subs	r3, #4
 8004b64:	0112      	lsls	r2, r2, #4
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	440b      	add	r3, r1
 8004b6a:	761a      	strb	r2, [r3, #24]
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	e000e100 	.word	0xe000e100
 8004b7c:	e000ed00 	.word	0xe000ed00

08004b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b089      	sub	sp, #36	@ 0x24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	f1c3 0307 	rsb	r3, r3, #7
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	bf28      	it	cs
 8004b9e:	2304      	movcs	r3, #4
 8004ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	2b06      	cmp	r3, #6
 8004ba8:	d902      	bls.n	8004bb0 <NVIC_EncodePriority+0x30>
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	3b03      	subs	r3, #3
 8004bae:	e000      	b.n	8004bb2 <NVIC_EncodePriority+0x32>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	43da      	mvns	r2, r3
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	401a      	ands	r2, r3
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd2:	43d9      	mvns	r1, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bd8:	4313      	orrs	r3, r2
         );
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3724      	adds	r7, #36	@ 0x24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bf8:	d301      	bcc.n	8004bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e00f      	b.n	8004c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8004c28 <SysTick_Config+0x40>)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c06:	210f      	movs	r1, #15
 8004c08:	f04f 30ff 	mov.w	r0, #4294967295
 8004c0c:	f7ff ff8e 	bl	8004b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c10:	4b05      	ldr	r3, [pc, #20]	@ (8004c28 <SysTick_Config+0x40>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c16:	4b04      	ldr	r3, [pc, #16]	@ (8004c28 <SysTick_Config+0x40>)
 8004c18:	2207      	movs	r2, #7
 8004c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	e000e010 	.word	0xe000e010

08004c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7ff ff29 	bl	8004a8c <__NVIC_SetPriorityGrouping>
}
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b086      	sub	sp, #24
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	4603      	mov	r3, r0
 8004c4a:	60b9      	str	r1, [r7, #8]
 8004c4c:	607a      	str	r2, [r7, #4]
 8004c4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c50:	f7ff ff40 	bl	8004ad4 <__NVIC_GetPriorityGrouping>
 8004c54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	68b9      	ldr	r1, [r7, #8]
 8004c5a:	6978      	ldr	r0, [r7, #20]
 8004c5c:	f7ff ff90 	bl	8004b80 <NVIC_EncodePriority>
 8004c60:	4602      	mov	r2, r0
 8004c62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c66:	4611      	mov	r1, r2
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff ff5f 	bl	8004b2c <__NVIC_SetPriority>
}
 8004c6e:	bf00      	nop
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b082      	sub	sp, #8
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff ff33 	bl	8004af0 <__NVIC_EnableIRQ>
}
 8004c8a:	bf00      	nop
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7ff ffa4 	bl	8004be8 <SysTick_Config>
 8004ca0:	4603      	mov	r3, r0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004cb4:	f7fd fdfc 	bl	80028b0 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e312      	b.n	80052ea <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a66      	ldr	r2, [pc, #408]	@ (8004e64 <HAL_DMA_Init+0x1b8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d04a      	beq.n	8004d64 <HAL_DMA_Init+0xb8>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a65      	ldr	r2, [pc, #404]	@ (8004e68 <HAL_DMA_Init+0x1bc>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d045      	beq.n	8004d64 <HAL_DMA_Init+0xb8>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a63      	ldr	r2, [pc, #396]	@ (8004e6c <HAL_DMA_Init+0x1c0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d040      	beq.n	8004d64 <HAL_DMA_Init+0xb8>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a62      	ldr	r2, [pc, #392]	@ (8004e70 <HAL_DMA_Init+0x1c4>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d03b      	beq.n	8004d64 <HAL_DMA_Init+0xb8>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a60      	ldr	r2, [pc, #384]	@ (8004e74 <HAL_DMA_Init+0x1c8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d036      	beq.n	8004d64 <HAL_DMA_Init+0xb8>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a5f      	ldr	r2, [pc, #380]	@ (8004e78 <HAL_DMA_Init+0x1cc>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d031      	beq.n	8004d64 <HAL_DMA_Init+0xb8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a5d      	ldr	r2, [pc, #372]	@ (8004e7c <HAL_DMA_Init+0x1d0>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d02c      	beq.n	8004d64 <HAL_DMA_Init+0xb8>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a5c      	ldr	r2, [pc, #368]	@ (8004e80 <HAL_DMA_Init+0x1d4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d027      	beq.n	8004d64 <HAL_DMA_Init+0xb8>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a5a      	ldr	r2, [pc, #360]	@ (8004e84 <HAL_DMA_Init+0x1d8>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d022      	beq.n	8004d64 <HAL_DMA_Init+0xb8>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a59      	ldr	r2, [pc, #356]	@ (8004e88 <HAL_DMA_Init+0x1dc>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d01d      	beq.n	8004d64 <HAL_DMA_Init+0xb8>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a57      	ldr	r2, [pc, #348]	@ (8004e8c <HAL_DMA_Init+0x1e0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d018      	beq.n	8004d64 <HAL_DMA_Init+0xb8>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a56      	ldr	r2, [pc, #344]	@ (8004e90 <HAL_DMA_Init+0x1e4>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d013      	beq.n	8004d64 <HAL_DMA_Init+0xb8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a54      	ldr	r2, [pc, #336]	@ (8004e94 <HAL_DMA_Init+0x1e8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00e      	beq.n	8004d64 <HAL_DMA_Init+0xb8>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a53      	ldr	r2, [pc, #332]	@ (8004e98 <HAL_DMA_Init+0x1ec>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d009      	beq.n	8004d64 <HAL_DMA_Init+0xb8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a51      	ldr	r2, [pc, #324]	@ (8004e9c <HAL_DMA_Init+0x1f0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d004      	beq.n	8004d64 <HAL_DMA_Init+0xb8>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a50      	ldr	r2, [pc, #320]	@ (8004ea0 <HAL_DMA_Init+0x1f4>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d101      	bne.n	8004d68 <HAL_DMA_Init+0xbc>
 8004d64:	2301      	movs	r3, #1
 8004d66:	e000      	b.n	8004d6a <HAL_DMA_Init+0xbe>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 813c 	beq.w	8004fe8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a37      	ldr	r2, [pc, #220]	@ (8004e64 <HAL_DMA_Init+0x1b8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d04a      	beq.n	8004e20 <HAL_DMA_Init+0x174>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a36      	ldr	r2, [pc, #216]	@ (8004e68 <HAL_DMA_Init+0x1bc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d045      	beq.n	8004e20 <HAL_DMA_Init+0x174>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a34      	ldr	r2, [pc, #208]	@ (8004e6c <HAL_DMA_Init+0x1c0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d040      	beq.n	8004e20 <HAL_DMA_Init+0x174>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a33      	ldr	r2, [pc, #204]	@ (8004e70 <HAL_DMA_Init+0x1c4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d03b      	beq.n	8004e20 <HAL_DMA_Init+0x174>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a31      	ldr	r2, [pc, #196]	@ (8004e74 <HAL_DMA_Init+0x1c8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d036      	beq.n	8004e20 <HAL_DMA_Init+0x174>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a30      	ldr	r2, [pc, #192]	@ (8004e78 <HAL_DMA_Init+0x1cc>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d031      	beq.n	8004e20 <HAL_DMA_Init+0x174>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a2e      	ldr	r2, [pc, #184]	@ (8004e7c <HAL_DMA_Init+0x1d0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d02c      	beq.n	8004e20 <HAL_DMA_Init+0x174>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a2d      	ldr	r2, [pc, #180]	@ (8004e80 <HAL_DMA_Init+0x1d4>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d027      	beq.n	8004e20 <HAL_DMA_Init+0x174>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a2b      	ldr	r2, [pc, #172]	@ (8004e84 <HAL_DMA_Init+0x1d8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d022      	beq.n	8004e20 <HAL_DMA_Init+0x174>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a2a      	ldr	r2, [pc, #168]	@ (8004e88 <HAL_DMA_Init+0x1dc>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d01d      	beq.n	8004e20 <HAL_DMA_Init+0x174>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a28      	ldr	r2, [pc, #160]	@ (8004e8c <HAL_DMA_Init+0x1e0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d018      	beq.n	8004e20 <HAL_DMA_Init+0x174>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a27      	ldr	r2, [pc, #156]	@ (8004e90 <HAL_DMA_Init+0x1e4>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d013      	beq.n	8004e20 <HAL_DMA_Init+0x174>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a25      	ldr	r2, [pc, #148]	@ (8004e94 <HAL_DMA_Init+0x1e8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d00e      	beq.n	8004e20 <HAL_DMA_Init+0x174>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a24      	ldr	r2, [pc, #144]	@ (8004e98 <HAL_DMA_Init+0x1ec>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d009      	beq.n	8004e20 <HAL_DMA_Init+0x174>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a22      	ldr	r2, [pc, #136]	@ (8004e9c <HAL_DMA_Init+0x1f0>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d004      	beq.n	8004e20 <HAL_DMA_Init+0x174>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a21      	ldr	r2, [pc, #132]	@ (8004ea0 <HAL_DMA_Init+0x1f4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d108      	bne.n	8004e32 <HAL_DMA_Init+0x186>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0201 	bic.w	r2, r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	e007      	b.n	8004e42 <HAL_DMA_Init+0x196>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0201 	bic.w	r2, r2, #1
 8004e40:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e42:	e02f      	b.n	8004ea4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e44:	f7fd fd34 	bl	80028b0 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b05      	cmp	r3, #5
 8004e50:	d928      	bls.n	8004ea4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2203      	movs	r2, #3
 8004e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e242      	b.n	80052ea <HAL_DMA_Init+0x63e>
 8004e64:	40020010 	.word	0x40020010
 8004e68:	40020028 	.word	0x40020028
 8004e6c:	40020040 	.word	0x40020040
 8004e70:	40020058 	.word	0x40020058
 8004e74:	40020070 	.word	0x40020070
 8004e78:	40020088 	.word	0x40020088
 8004e7c:	400200a0 	.word	0x400200a0
 8004e80:	400200b8 	.word	0x400200b8
 8004e84:	40020410 	.word	0x40020410
 8004e88:	40020428 	.word	0x40020428
 8004e8c:	40020440 	.word	0x40020440
 8004e90:	40020458 	.word	0x40020458
 8004e94:	40020470 	.word	0x40020470
 8004e98:	40020488 	.word	0x40020488
 8004e9c:	400204a0 	.word	0x400204a0
 8004ea0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1c8      	bne.n	8004e44 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4b83      	ldr	r3, [pc, #524]	@ (80050cc <HAL_DMA_Init+0x420>)
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004eca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ed6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ee2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d107      	bne.n	8004f08 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f00:	4313      	orrs	r3, r2
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b28      	cmp	r3, #40	@ 0x28
 8004f0e:	d903      	bls.n	8004f18 <HAL_DMA_Init+0x26c>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f16:	d91f      	bls.n	8004f58 <HAL_DMA_Init+0x2ac>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f1e:	d903      	bls.n	8004f28 <HAL_DMA_Init+0x27c>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b42      	cmp	r3, #66	@ 0x42
 8004f26:	d917      	bls.n	8004f58 <HAL_DMA_Init+0x2ac>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b46      	cmp	r3, #70	@ 0x46
 8004f2e:	d903      	bls.n	8004f38 <HAL_DMA_Init+0x28c>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b48      	cmp	r3, #72	@ 0x48
 8004f36:	d90f      	bls.n	8004f58 <HAL_DMA_Init+0x2ac>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b4e      	cmp	r3, #78	@ 0x4e
 8004f3e:	d903      	bls.n	8004f48 <HAL_DMA_Init+0x29c>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b52      	cmp	r3, #82	@ 0x52
 8004f46:	d907      	bls.n	8004f58 <HAL_DMA_Init+0x2ac>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b73      	cmp	r3, #115	@ 0x73
 8004f4e:	d905      	bls.n	8004f5c <HAL_DMA_Init+0x2b0>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	2b77      	cmp	r3, #119	@ 0x77
 8004f56:	d801      	bhi.n	8004f5c <HAL_DMA_Init+0x2b0>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e000      	b.n	8004f5e <HAL_DMA_Init+0x2b2>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f68:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f023 0307 	bic.w	r3, r3, #7
 8004f80:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d117      	bne.n	8004fc4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00e      	beq.n	8004fc4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f002 fb2e 	bl	8007608 <DMA_CheckFifoParam>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d008      	beq.n	8004fc4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2240      	movs	r2, #64	@ 0x40
 8004fb6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e192      	b.n	80052ea <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f002 fa69 	bl	80074a4 <DMA_CalcBaseAndBitshift>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fda:	f003 031f 	and.w	r3, r3, #31
 8004fde:	223f      	movs	r2, #63	@ 0x3f
 8004fe0:	409a      	lsls	r2, r3
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	609a      	str	r2, [r3, #8]
 8004fe6:	e0c8      	b.n	800517a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a38      	ldr	r2, [pc, #224]	@ (80050d0 <HAL_DMA_Init+0x424>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d022      	beq.n	8005038 <HAL_DMA_Init+0x38c>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a37      	ldr	r2, [pc, #220]	@ (80050d4 <HAL_DMA_Init+0x428>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d01d      	beq.n	8005038 <HAL_DMA_Init+0x38c>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a35      	ldr	r2, [pc, #212]	@ (80050d8 <HAL_DMA_Init+0x42c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d018      	beq.n	8005038 <HAL_DMA_Init+0x38c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a34      	ldr	r2, [pc, #208]	@ (80050dc <HAL_DMA_Init+0x430>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d013      	beq.n	8005038 <HAL_DMA_Init+0x38c>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a32      	ldr	r2, [pc, #200]	@ (80050e0 <HAL_DMA_Init+0x434>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00e      	beq.n	8005038 <HAL_DMA_Init+0x38c>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a31      	ldr	r2, [pc, #196]	@ (80050e4 <HAL_DMA_Init+0x438>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d009      	beq.n	8005038 <HAL_DMA_Init+0x38c>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a2f      	ldr	r2, [pc, #188]	@ (80050e8 <HAL_DMA_Init+0x43c>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d004      	beq.n	8005038 <HAL_DMA_Init+0x38c>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a2e      	ldr	r2, [pc, #184]	@ (80050ec <HAL_DMA_Init+0x440>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d101      	bne.n	800503c <HAL_DMA_Init+0x390>
 8005038:	2301      	movs	r3, #1
 800503a:	e000      	b.n	800503e <HAL_DMA_Init+0x392>
 800503c:	2300      	movs	r3, #0
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 8092 	beq.w	8005168 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a21      	ldr	r2, [pc, #132]	@ (80050d0 <HAL_DMA_Init+0x424>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d021      	beq.n	8005092 <HAL_DMA_Init+0x3e6>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a20      	ldr	r2, [pc, #128]	@ (80050d4 <HAL_DMA_Init+0x428>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d01c      	beq.n	8005092 <HAL_DMA_Init+0x3e6>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a1e      	ldr	r2, [pc, #120]	@ (80050d8 <HAL_DMA_Init+0x42c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d017      	beq.n	8005092 <HAL_DMA_Init+0x3e6>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1d      	ldr	r2, [pc, #116]	@ (80050dc <HAL_DMA_Init+0x430>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d012      	beq.n	8005092 <HAL_DMA_Init+0x3e6>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a1b      	ldr	r2, [pc, #108]	@ (80050e0 <HAL_DMA_Init+0x434>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d00d      	beq.n	8005092 <HAL_DMA_Init+0x3e6>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1a      	ldr	r2, [pc, #104]	@ (80050e4 <HAL_DMA_Init+0x438>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d008      	beq.n	8005092 <HAL_DMA_Init+0x3e6>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a18      	ldr	r2, [pc, #96]	@ (80050e8 <HAL_DMA_Init+0x43c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d003      	beq.n	8005092 <HAL_DMA_Init+0x3e6>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a17      	ldr	r2, [pc, #92]	@ (80050ec <HAL_DMA_Init+0x440>)
 8005090:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2202      	movs	r2, #2
 8005096:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4b10      	ldr	r3, [pc, #64]	@ (80050f0 <HAL_DMA_Init+0x444>)
 80050ae:	4013      	ands	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	2b40      	cmp	r3, #64	@ 0x40
 80050b8:	d01c      	beq.n	80050f4 <HAL_DMA_Init+0x448>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	2b80      	cmp	r3, #128	@ 0x80
 80050c0:	d102      	bne.n	80050c8 <HAL_DMA_Init+0x41c>
 80050c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80050c6:	e016      	b.n	80050f6 <HAL_DMA_Init+0x44a>
 80050c8:	2300      	movs	r3, #0
 80050ca:	e014      	b.n	80050f6 <HAL_DMA_Init+0x44a>
 80050cc:	fe10803f 	.word	0xfe10803f
 80050d0:	58025408 	.word	0x58025408
 80050d4:	5802541c 	.word	0x5802541c
 80050d8:	58025430 	.word	0x58025430
 80050dc:	58025444 	.word	0x58025444
 80050e0:	58025458 	.word	0x58025458
 80050e4:	5802546c 	.word	0x5802546c
 80050e8:	58025480 	.word	0x58025480
 80050ec:	58025494 	.word	0x58025494
 80050f0:	fffe000f 	.word	0xfffe000f
 80050f4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	68d2      	ldr	r2, [r2, #12]
 80050fa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005104:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800510c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005114:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800511c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005124:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	461a      	mov	r2, r3
 800513a:	4b6e      	ldr	r3, [pc, #440]	@ (80052f4 <HAL_DMA_Init+0x648>)
 800513c:	4413      	add	r3, r2
 800513e:	4a6e      	ldr	r2, [pc, #440]	@ (80052f8 <HAL_DMA_Init+0x64c>)
 8005140:	fba2 2303 	umull	r2, r3, r2, r3
 8005144:	091b      	lsrs	r3, r3, #4
 8005146:	009a      	lsls	r2, r3, #2
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f002 f9a9 	bl	80074a4 <DMA_CalcBaseAndBitshift>
 8005152:	4603      	mov	r3, r0
 8005154:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800515a:	f003 031f 	and.w	r3, r3, #31
 800515e:	2201      	movs	r2, #1
 8005160:	409a      	lsls	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	605a      	str	r2, [r3, #4]
 8005166:	e008      	b.n	800517a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2240      	movs	r2, #64	@ 0x40
 800516c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2203      	movs	r2, #3
 8005172:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e0b7      	b.n	80052ea <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a5f      	ldr	r2, [pc, #380]	@ (80052fc <HAL_DMA_Init+0x650>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d072      	beq.n	800526a <HAL_DMA_Init+0x5be>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a5d      	ldr	r2, [pc, #372]	@ (8005300 <HAL_DMA_Init+0x654>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d06d      	beq.n	800526a <HAL_DMA_Init+0x5be>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a5c      	ldr	r2, [pc, #368]	@ (8005304 <HAL_DMA_Init+0x658>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d068      	beq.n	800526a <HAL_DMA_Init+0x5be>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a5a      	ldr	r2, [pc, #360]	@ (8005308 <HAL_DMA_Init+0x65c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d063      	beq.n	800526a <HAL_DMA_Init+0x5be>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a59      	ldr	r2, [pc, #356]	@ (800530c <HAL_DMA_Init+0x660>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d05e      	beq.n	800526a <HAL_DMA_Init+0x5be>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a57      	ldr	r2, [pc, #348]	@ (8005310 <HAL_DMA_Init+0x664>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d059      	beq.n	800526a <HAL_DMA_Init+0x5be>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a56      	ldr	r2, [pc, #344]	@ (8005314 <HAL_DMA_Init+0x668>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d054      	beq.n	800526a <HAL_DMA_Init+0x5be>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a54      	ldr	r2, [pc, #336]	@ (8005318 <HAL_DMA_Init+0x66c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d04f      	beq.n	800526a <HAL_DMA_Init+0x5be>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a53      	ldr	r2, [pc, #332]	@ (800531c <HAL_DMA_Init+0x670>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d04a      	beq.n	800526a <HAL_DMA_Init+0x5be>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a51      	ldr	r2, [pc, #324]	@ (8005320 <HAL_DMA_Init+0x674>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d045      	beq.n	800526a <HAL_DMA_Init+0x5be>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a50      	ldr	r2, [pc, #320]	@ (8005324 <HAL_DMA_Init+0x678>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d040      	beq.n	800526a <HAL_DMA_Init+0x5be>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a4e      	ldr	r2, [pc, #312]	@ (8005328 <HAL_DMA_Init+0x67c>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d03b      	beq.n	800526a <HAL_DMA_Init+0x5be>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a4d      	ldr	r2, [pc, #308]	@ (800532c <HAL_DMA_Init+0x680>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d036      	beq.n	800526a <HAL_DMA_Init+0x5be>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a4b      	ldr	r2, [pc, #300]	@ (8005330 <HAL_DMA_Init+0x684>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d031      	beq.n	800526a <HAL_DMA_Init+0x5be>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a4a      	ldr	r2, [pc, #296]	@ (8005334 <HAL_DMA_Init+0x688>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d02c      	beq.n	800526a <HAL_DMA_Init+0x5be>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a48      	ldr	r2, [pc, #288]	@ (8005338 <HAL_DMA_Init+0x68c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d027      	beq.n	800526a <HAL_DMA_Init+0x5be>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a47      	ldr	r2, [pc, #284]	@ (800533c <HAL_DMA_Init+0x690>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d022      	beq.n	800526a <HAL_DMA_Init+0x5be>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a45      	ldr	r2, [pc, #276]	@ (8005340 <HAL_DMA_Init+0x694>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d01d      	beq.n	800526a <HAL_DMA_Init+0x5be>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a44      	ldr	r2, [pc, #272]	@ (8005344 <HAL_DMA_Init+0x698>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d018      	beq.n	800526a <HAL_DMA_Init+0x5be>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a42      	ldr	r2, [pc, #264]	@ (8005348 <HAL_DMA_Init+0x69c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d013      	beq.n	800526a <HAL_DMA_Init+0x5be>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a41      	ldr	r2, [pc, #260]	@ (800534c <HAL_DMA_Init+0x6a0>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d00e      	beq.n	800526a <HAL_DMA_Init+0x5be>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a3f      	ldr	r2, [pc, #252]	@ (8005350 <HAL_DMA_Init+0x6a4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d009      	beq.n	800526a <HAL_DMA_Init+0x5be>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a3e      	ldr	r2, [pc, #248]	@ (8005354 <HAL_DMA_Init+0x6a8>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d004      	beq.n	800526a <HAL_DMA_Init+0x5be>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a3c      	ldr	r2, [pc, #240]	@ (8005358 <HAL_DMA_Init+0x6ac>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d101      	bne.n	800526e <HAL_DMA_Init+0x5c2>
 800526a:	2301      	movs	r3, #1
 800526c:	e000      	b.n	8005270 <HAL_DMA_Init+0x5c4>
 800526e:	2300      	movs	r3, #0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d032      	beq.n	80052da <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f002 fa43 	bl	8007700 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	2b80      	cmp	r3, #128	@ 0x80
 8005280:	d102      	bne.n	8005288 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800529c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d010      	beq.n	80052c8 <HAL_DMA_Init+0x61c>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b08      	cmp	r3, #8
 80052ac:	d80c      	bhi.n	80052c8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f002 fac0 	bl	8007834 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80052c4:	605a      	str	r2, [r3, #4]
 80052c6:	e008      	b.n	80052da <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	a7fdabf8 	.word	0xa7fdabf8
 80052f8:	cccccccd 	.word	0xcccccccd
 80052fc:	40020010 	.word	0x40020010
 8005300:	40020028 	.word	0x40020028
 8005304:	40020040 	.word	0x40020040
 8005308:	40020058 	.word	0x40020058
 800530c:	40020070 	.word	0x40020070
 8005310:	40020088 	.word	0x40020088
 8005314:	400200a0 	.word	0x400200a0
 8005318:	400200b8 	.word	0x400200b8
 800531c:	40020410 	.word	0x40020410
 8005320:	40020428 	.word	0x40020428
 8005324:	40020440 	.word	0x40020440
 8005328:	40020458 	.word	0x40020458
 800532c:	40020470 	.word	0x40020470
 8005330:	40020488 	.word	0x40020488
 8005334:	400204a0 	.word	0x400204a0
 8005338:	400204b8 	.word	0x400204b8
 800533c:	58025408 	.word	0x58025408
 8005340:	5802541c 	.word	0x5802541c
 8005344:	58025430 	.word	0x58025430
 8005348:	58025444 	.word	0x58025444
 800534c:	58025458 	.word	0x58025458
 8005350:	5802546c 	.word	0x5802546c
 8005354:	58025480 	.word	0x58025480
 8005358:	58025494 	.word	0x58025494

0800535c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e226      	b.n	80057c6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800537e:	2b01      	cmp	r3, #1
 8005380:	d101      	bne.n	8005386 <HAL_DMA_Start_IT+0x2a>
 8005382:	2302      	movs	r3, #2
 8005384:	e21f      	b.n	80057c6 <HAL_DMA_Start_IT+0x46a>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b01      	cmp	r3, #1
 8005398:	f040 820a 	bne.w	80057b0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a68      	ldr	r2, [pc, #416]	@ (8005550 <HAL_DMA_Start_IT+0x1f4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d04a      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a66      	ldr	r2, [pc, #408]	@ (8005554 <HAL_DMA_Start_IT+0x1f8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d045      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a65      	ldr	r2, [pc, #404]	@ (8005558 <HAL_DMA_Start_IT+0x1fc>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d040      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a63      	ldr	r2, [pc, #396]	@ (800555c <HAL_DMA_Start_IT+0x200>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d03b      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a62      	ldr	r2, [pc, #392]	@ (8005560 <HAL_DMA_Start_IT+0x204>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d036      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a60      	ldr	r2, [pc, #384]	@ (8005564 <HAL_DMA_Start_IT+0x208>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d031      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a5f      	ldr	r2, [pc, #380]	@ (8005568 <HAL_DMA_Start_IT+0x20c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d02c      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a5d      	ldr	r2, [pc, #372]	@ (800556c <HAL_DMA_Start_IT+0x210>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d027      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a5c      	ldr	r2, [pc, #368]	@ (8005570 <HAL_DMA_Start_IT+0x214>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d022      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a5a      	ldr	r2, [pc, #360]	@ (8005574 <HAL_DMA_Start_IT+0x218>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d01d      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a59      	ldr	r2, [pc, #356]	@ (8005578 <HAL_DMA_Start_IT+0x21c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d018      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a57      	ldr	r2, [pc, #348]	@ (800557c <HAL_DMA_Start_IT+0x220>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d013      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a56      	ldr	r2, [pc, #344]	@ (8005580 <HAL_DMA_Start_IT+0x224>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00e      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a54      	ldr	r2, [pc, #336]	@ (8005584 <HAL_DMA_Start_IT+0x228>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d009      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a53      	ldr	r2, [pc, #332]	@ (8005588 <HAL_DMA_Start_IT+0x22c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d004      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a51      	ldr	r2, [pc, #324]	@ (800558c <HAL_DMA_Start_IT+0x230>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d108      	bne.n	800545c <HAL_DMA_Start_IT+0x100>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0201 	bic.w	r2, r2, #1
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	e007      	b.n	800546c <HAL_DMA_Start_IT+0x110>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 0201 	bic.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f001 fe6a 	bl	800714c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a34      	ldr	r2, [pc, #208]	@ (8005550 <HAL_DMA_Start_IT+0x1f4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d04a      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a33      	ldr	r2, [pc, #204]	@ (8005554 <HAL_DMA_Start_IT+0x1f8>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d045      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a31      	ldr	r2, [pc, #196]	@ (8005558 <HAL_DMA_Start_IT+0x1fc>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d040      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a30      	ldr	r2, [pc, #192]	@ (800555c <HAL_DMA_Start_IT+0x200>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d03b      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a2e      	ldr	r2, [pc, #184]	@ (8005560 <HAL_DMA_Start_IT+0x204>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d036      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a2d      	ldr	r2, [pc, #180]	@ (8005564 <HAL_DMA_Start_IT+0x208>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d031      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a2b      	ldr	r2, [pc, #172]	@ (8005568 <HAL_DMA_Start_IT+0x20c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d02c      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a2a      	ldr	r2, [pc, #168]	@ (800556c <HAL_DMA_Start_IT+0x210>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d027      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a28      	ldr	r2, [pc, #160]	@ (8005570 <HAL_DMA_Start_IT+0x214>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d022      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a27      	ldr	r2, [pc, #156]	@ (8005574 <HAL_DMA_Start_IT+0x218>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d01d      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a25      	ldr	r2, [pc, #148]	@ (8005578 <HAL_DMA_Start_IT+0x21c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d018      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a24      	ldr	r2, [pc, #144]	@ (800557c <HAL_DMA_Start_IT+0x220>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d013      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a22      	ldr	r2, [pc, #136]	@ (8005580 <HAL_DMA_Start_IT+0x224>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00e      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a21      	ldr	r2, [pc, #132]	@ (8005584 <HAL_DMA_Start_IT+0x228>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d009      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a1f      	ldr	r2, [pc, #124]	@ (8005588 <HAL_DMA_Start_IT+0x22c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d004      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1e      	ldr	r2, [pc, #120]	@ (800558c <HAL_DMA_Start_IT+0x230>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d101      	bne.n	800551c <HAL_DMA_Start_IT+0x1c0>
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <HAL_DMA_Start_IT+0x1c2>
 800551c:	2300      	movs	r3, #0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d036      	beq.n	8005590 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f023 021e 	bic.w	r2, r3, #30
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0216 	orr.w	r2, r2, #22
 8005534:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553a:	2b00      	cmp	r3, #0
 800553c:	d03e      	beq.n	80055bc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f042 0208 	orr.w	r2, r2, #8
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	e035      	b.n	80055bc <HAL_DMA_Start_IT+0x260>
 8005550:	40020010 	.word	0x40020010
 8005554:	40020028 	.word	0x40020028
 8005558:	40020040 	.word	0x40020040
 800555c:	40020058 	.word	0x40020058
 8005560:	40020070 	.word	0x40020070
 8005564:	40020088 	.word	0x40020088
 8005568:	400200a0 	.word	0x400200a0
 800556c:	400200b8 	.word	0x400200b8
 8005570:	40020410 	.word	0x40020410
 8005574:	40020428 	.word	0x40020428
 8005578:	40020440 	.word	0x40020440
 800557c:	40020458 	.word	0x40020458
 8005580:	40020470 	.word	0x40020470
 8005584:	40020488 	.word	0x40020488
 8005588:	400204a0 	.word	0x400204a0
 800558c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f023 020e 	bic.w	r2, r3, #14
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 020a 	orr.w	r2, r2, #10
 80055a2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d007      	beq.n	80055bc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0204 	orr.w	r2, r2, #4
 80055ba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a83      	ldr	r2, [pc, #524]	@ (80057d0 <HAL_DMA_Start_IT+0x474>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d072      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a82      	ldr	r2, [pc, #520]	@ (80057d4 <HAL_DMA_Start_IT+0x478>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d06d      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a80      	ldr	r2, [pc, #512]	@ (80057d8 <HAL_DMA_Start_IT+0x47c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d068      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a7f      	ldr	r2, [pc, #508]	@ (80057dc <HAL_DMA_Start_IT+0x480>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d063      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a7d      	ldr	r2, [pc, #500]	@ (80057e0 <HAL_DMA_Start_IT+0x484>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d05e      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a7c      	ldr	r2, [pc, #496]	@ (80057e4 <HAL_DMA_Start_IT+0x488>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d059      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a7a      	ldr	r2, [pc, #488]	@ (80057e8 <HAL_DMA_Start_IT+0x48c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d054      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a79      	ldr	r2, [pc, #484]	@ (80057ec <HAL_DMA_Start_IT+0x490>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d04f      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a77      	ldr	r2, [pc, #476]	@ (80057f0 <HAL_DMA_Start_IT+0x494>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d04a      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a76      	ldr	r2, [pc, #472]	@ (80057f4 <HAL_DMA_Start_IT+0x498>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d045      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a74      	ldr	r2, [pc, #464]	@ (80057f8 <HAL_DMA_Start_IT+0x49c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d040      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a73      	ldr	r2, [pc, #460]	@ (80057fc <HAL_DMA_Start_IT+0x4a0>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d03b      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a71      	ldr	r2, [pc, #452]	@ (8005800 <HAL_DMA_Start_IT+0x4a4>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d036      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a70      	ldr	r2, [pc, #448]	@ (8005804 <HAL_DMA_Start_IT+0x4a8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d031      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a6e      	ldr	r2, [pc, #440]	@ (8005808 <HAL_DMA_Start_IT+0x4ac>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d02c      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a6d      	ldr	r2, [pc, #436]	@ (800580c <HAL_DMA_Start_IT+0x4b0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d027      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a6b      	ldr	r2, [pc, #428]	@ (8005810 <HAL_DMA_Start_IT+0x4b4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d022      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a6a      	ldr	r2, [pc, #424]	@ (8005814 <HAL_DMA_Start_IT+0x4b8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d01d      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a68      	ldr	r2, [pc, #416]	@ (8005818 <HAL_DMA_Start_IT+0x4bc>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d018      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a67      	ldr	r2, [pc, #412]	@ (800581c <HAL_DMA_Start_IT+0x4c0>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d013      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a65      	ldr	r2, [pc, #404]	@ (8005820 <HAL_DMA_Start_IT+0x4c4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00e      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a64      	ldr	r2, [pc, #400]	@ (8005824 <HAL_DMA_Start_IT+0x4c8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d009      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a62      	ldr	r2, [pc, #392]	@ (8005828 <HAL_DMA_Start_IT+0x4cc>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d004      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a61      	ldr	r2, [pc, #388]	@ (800582c <HAL_DMA_Start_IT+0x4d0>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d101      	bne.n	80056b0 <HAL_DMA_Start_IT+0x354>
 80056ac:	2301      	movs	r3, #1
 80056ae:	e000      	b.n	80056b2 <HAL_DMA_Start_IT+0x356>
 80056b0:	2300      	movs	r3, #0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d01a      	beq.n	80056ec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d007      	beq.n	80056d4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056d2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d007      	beq.n	80056ec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056ea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a37      	ldr	r2, [pc, #220]	@ (80057d0 <HAL_DMA_Start_IT+0x474>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d04a      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a36      	ldr	r2, [pc, #216]	@ (80057d4 <HAL_DMA_Start_IT+0x478>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d045      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a34      	ldr	r2, [pc, #208]	@ (80057d8 <HAL_DMA_Start_IT+0x47c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d040      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a33      	ldr	r2, [pc, #204]	@ (80057dc <HAL_DMA_Start_IT+0x480>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d03b      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a31      	ldr	r2, [pc, #196]	@ (80057e0 <HAL_DMA_Start_IT+0x484>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d036      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a30      	ldr	r2, [pc, #192]	@ (80057e4 <HAL_DMA_Start_IT+0x488>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d031      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a2e      	ldr	r2, [pc, #184]	@ (80057e8 <HAL_DMA_Start_IT+0x48c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d02c      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a2d      	ldr	r2, [pc, #180]	@ (80057ec <HAL_DMA_Start_IT+0x490>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d027      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a2b      	ldr	r2, [pc, #172]	@ (80057f0 <HAL_DMA_Start_IT+0x494>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d022      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a2a      	ldr	r2, [pc, #168]	@ (80057f4 <HAL_DMA_Start_IT+0x498>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d01d      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a28      	ldr	r2, [pc, #160]	@ (80057f8 <HAL_DMA_Start_IT+0x49c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d018      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a27      	ldr	r2, [pc, #156]	@ (80057fc <HAL_DMA_Start_IT+0x4a0>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d013      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a25      	ldr	r2, [pc, #148]	@ (8005800 <HAL_DMA_Start_IT+0x4a4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00e      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a24      	ldr	r2, [pc, #144]	@ (8005804 <HAL_DMA_Start_IT+0x4a8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d009      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a22      	ldr	r2, [pc, #136]	@ (8005808 <HAL_DMA_Start_IT+0x4ac>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d004      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a21      	ldr	r2, [pc, #132]	@ (800580c <HAL_DMA_Start_IT+0x4b0>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d108      	bne.n	800579e <HAL_DMA_Start_IT+0x442>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	e012      	b.n	80057c4 <HAL_DMA_Start_IT+0x468>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f042 0201 	orr.w	r2, r2, #1
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	e009      	b.n	80057c4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80057c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3718      	adds	r7, #24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	40020010 	.word	0x40020010
 80057d4:	40020028 	.word	0x40020028
 80057d8:	40020040 	.word	0x40020040
 80057dc:	40020058 	.word	0x40020058
 80057e0:	40020070 	.word	0x40020070
 80057e4:	40020088 	.word	0x40020088
 80057e8:	400200a0 	.word	0x400200a0
 80057ec:	400200b8 	.word	0x400200b8
 80057f0:	40020410 	.word	0x40020410
 80057f4:	40020428 	.word	0x40020428
 80057f8:	40020440 	.word	0x40020440
 80057fc:	40020458 	.word	0x40020458
 8005800:	40020470 	.word	0x40020470
 8005804:	40020488 	.word	0x40020488
 8005808:	400204a0 	.word	0x400204a0
 800580c:	400204b8 	.word	0x400204b8
 8005810:	58025408 	.word	0x58025408
 8005814:	5802541c 	.word	0x5802541c
 8005818:	58025430 	.word	0x58025430
 800581c:	58025444 	.word	0x58025444
 8005820:	58025458 	.word	0x58025458
 8005824:	5802546c 	.word	0x5802546c
 8005828:	58025480 	.word	0x58025480
 800582c:	58025494 	.word	0x58025494

08005830 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005838:	f7fd f83a 	bl	80028b0 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e2dc      	b.n	8005e02 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d008      	beq.n	8005866 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2280      	movs	r2, #128	@ 0x80
 8005858:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e2cd      	b.n	8005e02 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a76      	ldr	r2, [pc, #472]	@ (8005a44 <HAL_DMA_Abort+0x214>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d04a      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a74      	ldr	r2, [pc, #464]	@ (8005a48 <HAL_DMA_Abort+0x218>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d045      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a73      	ldr	r2, [pc, #460]	@ (8005a4c <HAL_DMA_Abort+0x21c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d040      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a71      	ldr	r2, [pc, #452]	@ (8005a50 <HAL_DMA_Abort+0x220>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d03b      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a70      	ldr	r2, [pc, #448]	@ (8005a54 <HAL_DMA_Abort+0x224>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d036      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a6e      	ldr	r2, [pc, #440]	@ (8005a58 <HAL_DMA_Abort+0x228>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d031      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a6d      	ldr	r2, [pc, #436]	@ (8005a5c <HAL_DMA_Abort+0x22c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d02c      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a6b      	ldr	r2, [pc, #428]	@ (8005a60 <HAL_DMA_Abort+0x230>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d027      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a6a      	ldr	r2, [pc, #424]	@ (8005a64 <HAL_DMA_Abort+0x234>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d022      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a68      	ldr	r2, [pc, #416]	@ (8005a68 <HAL_DMA_Abort+0x238>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d01d      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a67      	ldr	r2, [pc, #412]	@ (8005a6c <HAL_DMA_Abort+0x23c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d018      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a65      	ldr	r2, [pc, #404]	@ (8005a70 <HAL_DMA_Abort+0x240>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d013      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a64      	ldr	r2, [pc, #400]	@ (8005a74 <HAL_DMA_Abort+0x244>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00e      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a62      	ldr	r2, [pc, #392]	@ (8005a78 <HAL_DMA_Abort+0x248>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d009      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a61      	ldr	r2, [pc, #388]	@ (8005a7c <HAL_DMA_Abort+0x24c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d004      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a5f      	ldr	r2, [pc, #380]	@ (8005a80 <HAL_DMA_Abort+0x250>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d101      	bne.n	800590a <HAL_DMA_Abort+0xda>
 8005906:	2301      	movs	r3, #1
 8005908:	e000      	b.n	800590c <HAL_DMA_Abort+0xdc>
 800590a:	2300      	movs	r3, #0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d013      	beq.n	8005938 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 021e 	bic.w	r2, r2, #30
 800591e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695a      	ldr	r2, [r3, #20]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800592e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	e00a      	b.n	800594e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 020e 	bic.w	r2, r2, #14
 8005946:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a3c      	ldr	r2, [pc, #240]	@ (8005a44 <HAL_DMA_Abort+0x214>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d072      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a3a      	ldr	r2, [pc, #232]	@ (8005a48 <HAL_DMA_Abort+0x218>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d06d      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a39      	ldr	r2, [pc, #228]	@ (8005a4c <HAL_DMA_Abort+0x21c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d068      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a37      	ldr	r2, [pc, #220]	@ (8005a50 <HAL_DMA_Abort+0x220>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d063      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a36      	ldr	r2, [pc, #216]	@ (8005a54 <HAL_DMA_Abort+0x224>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d05e      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a34      	ldr	r2, [pc, #208]	@ (8005a58 <HAL_DMA_Abort+0x228>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d059      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a33      	ldr	r2, [pc, #204]	@ (8005a5c <HAL_DMA_Abort+0x22c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d054      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a31      	ldr	r2, [pc, #196]	@ (8005a60 <HAL_DMA_Abort+0x230>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d04f      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a30      	ldr	r2, [pc, #192]	@ (8005a64 <HAL_DMA_Abort+0x234>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d04a      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005a68 <HAL_DMA_Abort+0x238>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d045      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a2d      	ldr	r2, [pc, #180]	@ (8005a6c <HAL_DMA_Abort+0x23c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d040      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a2b      	ldr	r2, [pc, #172]	@ (8005a70 <HAL_DMA_Abort+0x240>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d03b      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005a74 <HAL_DMA_Abort+0x244>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d036      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a28      	ldr	r2, [pc, #160]	@ (8005a78 <HAL_DMA_Abort+0x248>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d031      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a27      	ldr	r2, [pc, #156]	@ (8005a7c <HAL_DMA_Abort+0x24c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d02c      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a25      	ldr	r2, [pc, #148]	@ (8005a80 <HAL_DMA_Abort+0x250>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d027      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a24      	ldr	r2, [pc, #144]	@ (8005a84 <HAL_DMA_Abort+0x254>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d022      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a22      	ldr	r2, [pc, #136]	@ (8005a88 <HAL_DMA_Abort+0x258>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d01d      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a21      	ldr	r2, [pc, #132]	@ (8005a8c <HAL_DMA_Abort+0x25c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d018      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a1f      	ldr	r2, [pc, #124]	@ (8005a90 <HAL_DMA_Abort+0x260>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d013      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8005a94 <HAL_DMA_Abort+0x264>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d00e      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1c      	ldr	r2, [pc, #112]	@ (8005a98 <HAL_DMA_Abort+0x268>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d009      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1b      	ldr	r2, [pc, #108]	@ (8005a9c <HAL_DMA_Abort+0x26c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d004      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a19      	ldr	r2, [pc, #100]	@ (8005aa0 <HAL_DMA_Abort+0x270>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d132      	bne.n	8005aa4 <HAL_DMA_Abort+0x274>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e031      	b.n	8005aa6 <HAL_DMA_Abort+0x276>
 8005a42:	bf00      	nop
 8005a44:	40020010 	.word	0x40020010
 8005a48:	40020028 	.word	0x40020028
 8005a4c:	40020040 	.word	0x40020040
 8005a50:	40020058 	.word	0x40020058
 8005a54:	40020070 	.word	0x40020070
 8005a58:	40020088 	.word	0x40020088
 8005a5c:	400200a0 	.word	0x400200a0
 8005a60:	400200b8 	.word	0x400200b8
 8005a64:	40020410 	.word	0x40020410
 8005a68:	40020428 	.word	0x40020428
 8005a6c:	40020440 	.word	0x40020440
 8005a70:	40020458 	.word	0x40020458
 8005a74:	40020470 	.word	0x40020470
 8005a78:	40020488 	.word	0x40020488
 8005a7c:	400204a0 	.word	0x400204a0
 8005a80:	400204b8 	.word	0x400204b8
 8005a84:	58025408 	.word	0x58025408
 8005a88:	5802541c 	.word	0x5802541c
 8005a8c:	58025430 	.word	0x58025430
 8005a90:	58025444 	.word	0x58025444
 8005a94:	58025458 	.word	0x58025458
 8005a98:	5802546c 	.word	0x5802546c
 8005a9c:	58025480 	.word	0x58025480
 8005aa0:	58025494 	.word	0x58025494
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ab4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ab8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a6d      	ldr	r2, [pc, #436]	@ (8005c74 <HAL_DMA_Abort+0x444>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d04a      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a6b      	ldr	r2, [pc, #428]	@ (8005c78 <HAL_DMA_Abort+0x448>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d045      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a6a      	ldr	r2, [pc, #424]	@ (8005c7c <HAL_DMA_Abort+0x44c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d040      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a68      	ldr	r2, [pc, #416]	@ (8005c80 <HAL_DMA_Abort+0x450>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d03b      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a67      	ldr	r2, [pc, #412]	@ (8005c84 <HAL_DMA_Abort+0x454>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d036      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a65      	ldr	r2, [pc, #404]	@ (8005c88 <HAL_DMA_Abort+0x458>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d031      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a64      	ldr	r2, [pc, #400]	@ (8005c8c <HAL_DMA_Abort+0x45c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d02c      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a62      	ldr	r2, [pc, #392]	@ (8005c90 <HAL_DMA_Abort+0x460>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d027      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a61      	ldr	r2, [pc, #388]	@ (8005c94 <HAL_DMA_Abort+0x464>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d022      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a5f      	ldr	r2, [pc, #380]	@ (8005c98 <HAL_DMA_Abort+0x468>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d01d      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a5e      	ldr	r2, [pc, #376]	@ (8005c9c <HAL_DMA_Abort+0x46c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d018      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a5c      	ldr	r2, [pc, #368]	@ (8005ca0 <HAL_DMA_Abort+0x470>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d013      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a5b      	ldr	r2, [pc, #364]	@ (8005ca4 <HAL_DMA_Abort+0x474>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d00e      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a59      	ldr	r2, [pc, #356]	@ (8005ca8 <HAL_DMA_Abort+0x478>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d009      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a58      	ldr	r2, [pc, #352]	@ (8005cac <HAL_DMA_Abort+0x47c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d004      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a56      	ldr	r2, [pc, #344]	@ (8005cb0 <HAL_DMA_Abort+0x480>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d108      	bne.n	8005b6c <HAL_DMA_Abort+0x33c>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0201 	bic.w	r2, r2, #1
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	e007      	b.n	8005b7c <HAL_DMA_Abort+0x34c>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 0201 	bic.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005b7c:	e013      	b.n	8005ba6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b7e:	f7fc fe97 	bl	80028b0 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b05      	cmp	r3, #5
 8005b8a:	d90c      	bls.n	8005ba6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2203      	movs	r2, #3
 8005b96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e12d      	b.n	8005e02 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1e5      	bne.n	8005b7e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a2f      	ldr	r2, [pc, #188]	@ (8005c74 <HAL_DMA_Abort+0x444>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d04a      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a2d      	ldr	r2, [pc, #180]	@ (8005c78 <HAL_DMA_Abort+0x448>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d045      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a2c      	ldr	r2, [pc, #176]	@ (8005c7c <HAL_DMA_Abort+0x44c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d040      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a2a      	ldr	r2, [pc, #168]	@ (8005c80 <HAL_DMA_Abort+0x450>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d03b      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a29      	ldr	r2, [pc, #164]	@ (8005c84 <HAL_DMA_Abort+0x454>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d036      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a27      	ldr	r2, [pc, #156]	@ (8005c88 <HAL_DMA_Abort+0x458>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d031      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a26      	ldr	r2, [pc, #152]	@ (8005c8c <HAL_DMA_Abort+0x45c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d02c      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a24      	ldr	r2, [pc, #144]	@ (8005c90 <HAL_DMA_Abort+0x460>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d027      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a23      	ldr	r2, [pc, #140]	@ (8005c94 <HAL_DMA_Abort+0x464>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d022      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a21      	ldr	r2, [pc, #132]	@ (8005c98 <HAL_DMA_Abort+0x468>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d01d      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a20      	ldr	r2, [pc, #128]	@ (8005c9c <HAL_DMA_Abort+0x46c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d018      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a1e      	ldr	r2, [pc, #120]	@ (8005ca0 <HAL_DMA_Abort+0x470>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d013      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ca4 <HAL_DMA_Abort+0x474>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d00e      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a1b      	ldr	r2, [pc, #108]	@ (8005ca8 <HAL_DMA_Abort+0x478>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d009      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a1a      	ldr	r2, [pc, #104]	@ (8005cac <HAL_DMA_Abort+0x47c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d004      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a18      	ldr	r2, [pc, #96]	@ (8005cb0 <HAL_DMA_Abort+0x480>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d101      	bne.n	8005c56 <HAL_DMA_Abort+0x426>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <HAL_DMA_Abort+0x428>
 8005c56:	2300      	movs	r3, #0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d02b      	beq.n	8005cb4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c60:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c66:	f003 031f 	and.w	r3, r3, #31
 8005c6a:	223f      	movs	r2, #63	@ 0x3f
 8005c6c:	409a      	lsls	r2, r3
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	609a      	str	r2, [r3, #8]
 8005c72:	e02a      	b.n	8005cca <HAL_DMA_Abort+0x49a>
 8005c74:	40020010 	.word	0x40020010
 8005c78:	40020028 	.word	0x40020028
 8005c7c:	40020040 	.word	0x40020040
 8005c80:	40020058 	.word	0x40020058
 8005c84:	40020070 	.word	0x40020070
 8005c88:	40020088 	.word	0x40020088
 8005c8c:	400200a0 	.word	0x400200a0
 8005c90:	400200b8 	.word	0x400200b8
 8005c94:	40020410 	.word	0x40020410
 8005c98:	40020428 	.word	0x40020428
 8005c9c:	40020440 	.word	0x40020440
 8005ca0:	40020458 	.word	0x40020458
 8005ca4:	40020470 	.word	0x40020470
 8005ca8:	40020488 	.word	0x40020488
 8005cac:	400204a0 	.word	0x400204a0
 8005cb0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cb8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cbe:	f003 031f 	and.w	r3, r3, #31
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	409a      	lsls	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a4f      	ldr	r2, [pc, #316]	@ (8005e0c <HAL_DMA_Abort+0x5dc>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d072      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a4d      	ldr	r2, [pc, #308]	@ (8005e10 <HAL_DMA_Abort+0x5e0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d06d      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a4c      	ldr	r2, [pc, #304]	@ (8005e14 <HAL_DMA_Abort+0x5e4>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d068      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a4a      	ldr	r2, [pc, #296]	@ (8005e18 <HAL_DMA_Abort+0x5e8>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d063      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a49      	ldr	r2, [pc, #292]	@ (8005e1c <HAL_DMA_Abort+0x5ec>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d05e      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a47      	ldr	r2, [pc, #284]	@ (8005e20 <HAL_DMA_Abort+0x5f0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d059      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a46      	ldr	r2, [pc, #280]	@ (8005e24 <HAL_DMA_Abort+0x5f4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d054      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a44      	ldr	r2, [pc, #272]	@ (8005e28 <HAL_DMA_Abort+0x5f8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d04f      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a43      	ldr	r2, [pc, #268]	@ (8005e2c <HAL_DMA_Abort+0x5fc>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d04a      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a41      	ldr	r2, [pc, #260]	@ (8005e30 <HAL_DMA_Abort+0x600>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d045      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a40      	ldr	r2, [pc, #256]	@ (8005e34 <HAL_DMA_Abort+0x604>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d040      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a3e      	ldr	r2, [pc, #248]	@ (8005e38 <HAL_DMA_Abort+0x608>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d03b      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a3d      	ldr	r2, [pc, #244]	@ (8005e3c <HAL_DMA_Abort+0x60c>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d036      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a3b      	ldr	r2, [pc, #236]	@ (8005e40 <HAL_DMA_Abort+0x610>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d031      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a3a      	ldr	r2, [pc, #232]	@ (8005e44 <HAL_DMA_Abort+0x614>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d02c      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a38      	ldr	r2, [pc, #224]	@ (8005e48 <HAL_DMA_Abort+0x618>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d027      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a37      	ldr	r2, [pc, #220]	@ (8005e4c <HAL_DMA_Abort+0x61c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d022      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a35      	ldr	r2, [pc, #212]	@ (8005e50 <HAL_DMA_Abort+0x620>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d01d      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a34      	ldr	r2, [pc, #208]	@ (8005e54 <HAL_DMA_Abort+0x624>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d018      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a32      	ldr	r2, [pc, #200]	@ (8005e58 <HAL_DMA_Abort+0x628>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d013      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a31      	ldr	r2, [pc, #196]	@ (8005e5c <HAL_DMA_Abort+0x62c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00e      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a2f      	ldr	r2, [pc, #188]	@ (8005e60 <HAL_DMA_Abort+0x630>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d009      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a2e      	ldr	r2, [pc, #184]	@ (8005e64 <HAL_DMA_Abort+0x634>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d004      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a2c      	ldr	r2, [pc, #176]	@ (8005e68 <HAL_DMA_Abort+0x638>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d101      	bne.n	8005dbe <HAL_DMA_Abort+0x58e>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e000      	b.n	8005dc0 <HAL_DMA_Abort+0x590>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d015      	beq.n	8005df0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005dcc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00c      	beq.n	8005df0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005de0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005de4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005dee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40020010 	.word	0x40020010
 8005e10:	40020028 	.word	0x40020028
 8005e14:	40020040 	.word	0x40020040
 8005e18:	40020058 	.word	0x40020058
 8005e1c:	40020070 	.word	0x40020070
 8005e20:	40020088 	.word	0x40020088
 8005e24:	400200a0 	.word	0x400200a0
 8005e28:	400200b8 	.word	0x400200b8
 8005e2c:	40020410 	.word	0x40020410
 8005e30:	40020428 	.word	0x40020428
 8005e34:	40020440 	.word	0x40020440
 8005e38:	40020458 	.word	0x40020458
 8005e3c:	40020470 	.word	0x40020470
 8005e40:	40020488 	.word	0x40020488
 8005e44:	400204a0 	.word	0x400204a0
 8005e48:	400204b8 	.word	0x400204b8
 8005e4c:	58025408 	.word	0x58025408
 8005e50:	5802541c 	.word	0x5802541c
 8005e54:	58025430 	.word	0x58025430
 8005e58:	58025444 	.word	0x58025444
 8005e5c:	58025458 	.word	0x58025458
 8005e60:	5802546c 	.word	0x5802546c
 8005e64:	58025480 	.word	0x58025480
 8005e68:	58025494 	.word	0x58025494

08005e6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e237      	b.n	80062ee <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d004      	beq.n	8005e94 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2280      	movs	r2, #128	@ 0x80
 8005e8e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e22c      	b.n	80062ee <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a5c      	ldr	r2, [pc, #368]	@ (800600c <HAL_DMA_Abort_IT+0x1a0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d04a      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a5b      	ldr	r2, [pc, #364]	@ (8006010 <HAL_DMA_Abort_IT+0x1a4>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d045      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a59      	ldr	r2, [pc, #356]	@ (8006014 <HAL_DMA_Abort_IT+0x1a8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d040      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a58      	ldr	r2, [pc, #352]	@ (8006018 <HAL_DMA_Abort_IT+0x1ac>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d03b      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a56      	ldr	r2, [pc, #344]	@ (800601c <HAL_DMA_Abort_IT+0x1b0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d036      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a55      	ldr	r2, [pc, #340]	@ (8006020 <HAL_DMA_Abort_IT+0x1b4>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d031      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a53      	ldr	r2, [pc, #332]	@ (8006024 <HAL_DMA_Abort_IT+0x1b8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d02c      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a52      	ldr	r2, [pc, #328]	@ (8006028 <HAL_DMA_Abort_IT+0x1bc>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d027      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a50      	ldr	r2, [pc, #320]	@ (800602c <HAL_DMA_Abort_IT+0x1c0>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d022      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a4f      	ldr	r2, [pc, #316]	@ (8006030 <HAL_DMA_Abort_IT+0x1c4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d01d      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a4d      	ldr	r2, [pc, #308]	@ (8006034 <HAL_DMA_Abort_IT+0x1c8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d018      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a4c      	ldr	r2, [pc, #304]	@ (8006038 <HAL_DMA_Abort_IT+0x1cc>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d013      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a4a      	ldr	r2, [pc, #296]	@ (800603c <HAL_DMA_Abort_IT+0x1d0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d00e      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a49      	ldr	r2, [pc, #292]	@ (8006040 <HAL_DMA_Abort_IT+0x1d4>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d009      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a47      	ldr	r2, [pc, #284]	@ (8006044 <HAL_DMA_Abort_IT+0x1d8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d004      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a46      	ldr	r2, [pc, #280]	@ (8006048 <HAL_DMA_Abort_IT+0x1dc>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d101      	bne.n	8005f38 <HAL_DMA_Abort_IT+0xcc>
 8005f34:	2301      	movs	r3, #1
 8005f36:	e000      	b.n	8005f3a <HAL_DMA_Abort_IT+0xce>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 8086 	beq.w	800604c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2204      	movs	r2, #4
 8005f44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a2f      	ldr	r2, [pc, #188]	@ (800600c <HAL_DMA_Abort_IT+0x1a0>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d04a      	beq.n	8005fe8 <HAL_DMA_Abort_IT+0x17c>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a2e      	ldr	r2, [pc, #184]	@ (8006010 <HAL_DMA_Abort_IT+0x1a4>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d045      	beq.n	8005fe8 <HAL_DMA_Abort_IT+0x17c>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a2c      	ldr	r2, [pc, #176]	@ (8006014 <HAL_DMA_Abort_IT+0x1a8>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d040      	beq.n	8005fe8 <HAL_DMA_Abort_IT+0x17c>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a2b      	ldr	r2, [pc, #172]	@ (8006018 <HAL_DMA_Abort_IT+0x1ac>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d03b      	beq.n	8005fe8 <HAL_DMA_Abort_IT+0x17c>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a29      	ldr	r2, [pc, #164]	@ (800601c <HAL_DMA_Abort_IT+0x1b0>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d036      	beq.n	8005fe8 <HAL_DMA_Abort_IT+0x17c>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a28      	ldr	r2, [pc, #160]	@ (8006020 <HAL_DMA_Abort_IT+0x1b4>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d031      	beq.n	8005fe8 <HAL_DMA_Abort_IT+0x17c>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a26      	ldr	r2, [pc, #152]	@ (8006024 <HAL_DMA_Abort_IT+0x1b8>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d02c      	beq.n	8005fe8 <HAL_DMA_Abort_IT+0x17c>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a25      	ldr	r2, [pc, #148]	@ (8006028 <HAL_DMA_Abort_IT+0x1bc>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d027      	beq.n	8005fe8 <HAL_DMA_Abort_IT+0x17c>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a23      	ldr	r2, [pc, #140]	@ (800602c <HAL_DMA_Abort_IT+0x1c0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d022      	beq.n	8005fe8 <HAL_DMA_Abort_IT+0x17c>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a22      	ldr	r2, [pc, #136]	@ (8006030 <HAL_DMA_Abort_IT+0x1c4>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d01d      	beq.n	8005fe8 <HAL_DMA_Abort_IT+0x17c>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a20      	ldr	r2, [pc, #128]	@ (8006034 <HAL_DMA_Abort_IT+0x1c8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d018      	beq.n	8005fe8 <HAL_DMA_Abort_IT+0x17c>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a1f      	ldr	r2, [pc, #124]	@ (8006038 <HAL_DMA_Abort_IT+0x1cc>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d013      	beq.n	8005fe8 <HAL_DMA_Abort_IT+0x17c>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800603c <HAL_DMA_Abort_IT+0x1d0>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00e      	beq.n	8005fe8 <HAL_DMA_Abort_IT+0x17c>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a1c      	ldr	r2, [pc, #112]	@ (8006040 <HAL_DMA_Abort_IT+0x1d4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d009      	beq.n	8005fe8 <HAL_DMA_Abort_IT+0x17c>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a1a      	ldr	r2, [pc, #104]	@ (8006044 <HAL_DMA_Abort_IT+0x1d8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d004      	beq.n	8005fe8 <HAL_DMA_Abort_IT+0x17c>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a19      	ldr	r2, [pc, #100]	@ (8006048 <HAL_DMA_Abort_IT+0x1dc>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d108      	bne.n	8005ffa <HAL_DMA_Abort_IT+0x18e>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0201 	bic.w	r2, r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	e178      	b.n	80062ec <HAL_DMA_Abort_IT+0x480>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0201 	bic.w	r2, r2, #1
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	e16f      	b.n	80062ec <HAL_DMA_Abort_IT+0x480>
 800600c:	40020010 	.word	0x40020010
 8006010:	40020028 	.word	0x40020028
 8006014:	40020040 	.word	0x40020040
 8006018:	40020058 	.word	0x40020058
 800601c:	40020070 	.word	0x40020070
 8006020:	40020088 	.word	0x40020088
 8006024:	400200a0 	.word	0x400200a0
 8006028:	400200b8 	.word	0x400200b8
 800602c:	40020410 	.word	0x40020410
 8006030:	40020428 	.word	0x40020428
 8006034:	40020440 	.word	0x40020440
 8006038:	40020458 	.word	0x40020458
 800603c:	40020470 	.word	0x40020470
 8006040:	40020488 	.word	0x40020488
 8006044:	400204a0 	.word	0x400204a0
 8006048:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 020e 	bic.w	r2, r2, #14
 800605a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a6c      	ldr	r2, [pc, #432]	@ (8006214 <HAL_DMA_Abort_IT+0x3a8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d04a      	beq.n	80060fc <HAL_DMA_Abort_IT+0x290>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a6b      	ldr	r2, [pc, #428]	@ (8006218 <HAL_DMA_Abort_IT+0x3ac>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d045      	beq.n	80060fc <HAL_DMA_Abort_IT+0x290>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a69      	ldr	r2, [pc, #420]	@ (800621c <HAL_DMA_Abort_IT+0x3b0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d040      	beq.n	80060fc <HAL_DMA_Abort_IT+0x290>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a68      	ldr	r2, [pc, #416]	@ (8006220 <HAL_DMA_Abort_IT+0x3b4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d03b      	beq.n	80060fc <HAL_DMA_Abort_IT+0x290>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a66      	ldr	r2, [pc, #408]	@ (8006224 <HAL_DMA_Abort_IT+0x3b8>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d036      	beq.n	80060fc <HAL_DMA_Abort_IT+0x290>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a65      	ldr	r2, [pc, #404]	@ (8006228 <HAL_DMA_Abort_IT+0x3bc>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d031      	beq.n	80060fc <HAL_DMA_Abort_IT+0x290>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a63      	ldr	r2, [pc, #396]	@ (800622c <HAL_DMA_Abort_IT+0x3c0>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d02c      	beq.n	80060fc <HAL_DMA_Abort_IT+0x290>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a62      	ldr	r2, [pc, #392]	@ (8006230 <HAL_DMA_Abort_IT+0x3c4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d027      	beq.n	80060fc <HAL_DMA_Abort_IT+0x290>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a60      	ldr	r2, [pc, #384]	@ (8006234 <HAL_DMA_Abort_IT+0x3c8>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d022      	beq.n	80060fc <HAL_DMA_Abort_IT+0x290>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a5f      	ldr	r2, [pc, #380]	@ (8006238 <HAL_DMA_Abort_IT+0x3cc>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d01d      	beq.n	80060fc <HAL_DMA_Abort_IT+0x290>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a5d      	ldr	r2, [pc, #372]	@ (800623c <HAL_DMA_Abort_IT+0x3d0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d018      	beq.n	80060fc <HAL_DMA_Abort_IT+0x290>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a5c      	ldr	r2, [pc, #368]	@ (8006240 <HAL_DMA_Abort_IT+0x3d4>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d013      	beq.n	80060fc <HAL_DMA_Abort_IT+0x290>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a5a      	ldr	r2, [pc, #360]	@ (8006244 <HAL_DMA_Abort_IT+0x3d8>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d00e      	beq.n	80060fc <HAL_DMA_Abort_IT+0x290>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a59      	ldr	r2, [pc, #356]	@ (8006248 <HAL_DMA_Abort_IT+0x3dc>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d009      	beq.n	80060fc <HAL_DMA_Abort_IT+0x290>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a57      	ldr	r2, [pc, #348]	@ (800624c <HAL_DMA_Abort_IT+0x3e0>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d004      	beq.n	80060fc <HAL_DMA_Abort_IT+0x290>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a56      	ldr	r2, [pc, #344]	@ (8006250 <HAL_DMA_Abort_IT+0x3e4>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d108      	bne.n	800610e <HAL_DMA_Abort_IT+0x2a2>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0201 	bic.w	r2, r2, #1
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	e007      	b.n	800611e <HAL_DMA_Abort_IT+0x2b2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 0201 	bic.w	r2, r2, #1
 800611c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a3c      	ldr	r2, [pc, #240]	@ (8006214 <HAL_DMA_Abort_IT+0x3a8>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d072      	beq.n	800620e <HAL_DMA_Abort_IT+0x3a2>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a3a      	ldr	r2, [pc, #232]	@ (8006218 <HAL_DMA_Abort_IT+0x3ac>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d06d      	beq.n	800620e <HAL_DMA_Abort_IT+0x3a2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a39      	ldr	r2, [pc, #228]	@ (800621c <HAL_DMA_Abort_IT+0x3b0>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d068      	beq.n	800620e <HAL_DMA_Abort_IT+0x3a2>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a37      	ldr	r2, [pc, #220]	@ (8006220 <HAL_DMA_Abort_IT+0x3b4>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d063      	beq.n	800620e <HAL_DMA_Abort_IT+0x3a2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a36      	ldr	r2, [pc, #216]	@ (8006224 <HAL_DMA_Abort_IT+0x3b8>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d05e      	beq.n	800620e <HAL_DMA_Abort_IT+0x3a2>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a34      	ldr	r2, [pc, #208]	@ (8006228 <HAL_DMA_Abort_IT+0x3bc>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d059      	beq.n	800620e <HAL_DMA_Abort_IT+0x3a2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a33      	ldr	r2, [pc, #204]	@ (800622c <HAL_DMA_Abort_IT+0x3c0>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d054      	beq.n	800620e <HAL_DMA_Abort_IT+0x3a2>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a31      	ldr	r2, [pc, #196]	@ (8006230 <HAL_DMA_Abort_IT+0x3c4>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d04f      	beq.n	800620e <HAL_DMA_Abort_IT+0x3a2>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a30      	ldr	r2, [pc, #192]	@ (8006234 <HAL_DMA_Abort_IT+0x3c8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d04a      	beq.n	800620e <HAL_DMA_Abort_IT+0x3a2>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a2e      	ldr	r2, [pc, #184]	@ (8006238 <HAL_DMA_Abort_IT+0x3cc>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d045      	beq.n	800620e <HAL_DMA_Abort_IT+0x3a2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a2d      	ldr	r2, [pc, #180]	@ (800623c <HAL_DMA_Abort_IT+0x3d0>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d040      	beq.n	800620e <HAL_DMA_Abort_IT+0x3a2>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a2b      	ldr	r2, [pc, #172]	@ (8006240 <HAL_DMA_Abort_IT+0x3d4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d03b      	beq.n	800620e <HAL_DMA_Abort_IT+0x3a2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a2a      	ldr	r2, [pc, #168]	@ (8006244 <HAL_DMA_Abort_IT+0x3d8>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d036      	beq.n	800620e <HAL_DMA_Abort_IT+0x3a2>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a28      	ldr	r2, [pc, #160]	@ (8006248 <HAL_DMA_Abort_IT+0x3dc>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d031      	beq.n	800620e <HAL_DMA_Abort_IT+0x3a2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a27      	ldr	r2, [pc, #156]	@ (800624c <HAL_DMA_Abort_IT+0x3e0>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d02c      	beq.n	800620e <HAL_DMA_Abort_IT+0x3a2>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a25      	ldr	r2, [pc, #148]	@ (8006250 <HAL_DMA_Abort_IT+0x3e4>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d027      	beq.n	800620e <HAL_DMA_Abort_IT+0x3a2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a24      	ldr	r2, [pc, #144]	@ (8006254 <HAL_DMA_Abort_IT+0x3e8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d022      	beq.n	800620e <HAL_DMA_Abort_IT+0x3a2>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a22      	ldr	r2, [pc, #136]	@ (8006258 <HAL_DMA_Abort_IT+0x3ec>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d01d      	beq.n	800620e <HAL_DMA_Abort_IT+0x3a2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a21      	ldr	r2, [pc, #132]	@ (800625c <HAL_DMA_Abort_IT+0x3f0>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d018      	beq.n	800620e <HAL_DMA_Abort_IT+0x3a2>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a1f      	ldr	r2, [pc, #124]	@ (8006260 <HAL_DMA_Abort_IT+0x3f4>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d013      	beq.n	800620e <HAL_DMA_Abort_IT+0x3a2>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a1e      	ldr	r2, [pc, #120]	@ (8006264 <HAL_DMA_Abort_IT+0x3f8>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d00e      	beq.n	800620e <HAL_DMA_Abort_IT+0x3a2>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006268 <HAL_DMA_Abort_IT+0x3fc>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d009      	beq.n	800620e <HAL_DMA_Abort_IT+0x3a2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a1b      	ldr	r2, [pc, #108]	@ (800626c <HAL_DMA_Abort_IT+0x400>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d004      	beq.n	800620e <HAL_DMA_Abort_IT+0x3a2>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a19      	ldr	r2, [pc, #100]	@ (8006270 <HAL_DMA_Abort_IT+0x404>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d132      	bne.n	8006274 <HAL_DMA_Abort_IT+0x408>
 800620e:	2301      	movs	r3, #1
 8006210:	e031      	b.n	8006276 <HAL_DMA_Abort_IT+0x40a>
 8006212:	bf00      	nop
 8006214:	40020010 	.word	0x40020010
 8006218:	40020028 	.word	0x40020028
 800621c:	40020040 	.word	0x40020040
 8006220:	40020058 	.word	0x40020058
 8006224:	40020070 	.word	0x40020070
 8006228:	40020088 	.word	0x40020088
 800622c:	400200a0 	.word	0x400200a0
 8006230:	400200b8 	.word	0x400200b8
 8006234:	40020410 	.word	0x40020410
 8006238:	40020428 	.word	0x40020428
 800623c:	40020440 	.word	0x40020440
 8006240:	40020458 	.word	0x40020458
 8006244:	40020470 	.word	0x40020470
 8006248:	40020488 	.word	0x40020488
 800624c:	400204a0 	.word	0x400204a0
 8006250:	400204b8 	.word	0x400204b8
 8006254:	58025408 	.word	0x58025408
 8006258:	5802541c 	.word	0x5802541c
 800625c:	58025430 	.word	0x58025430
 8006260:	58025444 	.word	0x58025444
 8006264:	58025458 	.word	0x58025458
 8006268:	5802546c 	.word	0x5802546c
 800626c:	58025480 	.word	0x58025480
 8006270:	58025494 	.word	0x58025494
 8006274:	2300      	movs	r3, #0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d028      	beq.n	80062cc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006284:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006288:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800628e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006294:	f003 031f 	and.w	r3, r3, #31
 8006298:	2201      	movs	r2, #1
 800629a:	409a      	lsls	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80062a8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00c      	beq.n	80062cc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062c0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80062ca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d003      	beq.n	80062ec <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop

080062f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08a      	sub	sp, #40	@ 0x28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006304:	4b67      	ldr	r3, [pc, #412]	@ (80064a4 <HAL_DMA_IRQHandler+0x1ac>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a67      	ldr	r2, [pc, #412]	@ (80064a8 <HAL_DMA_IRQHandler+0x1b0>)
 800630a:	fba2 2303 	umull	r2, r3, r2, r3
 800630e:	0a9b      	lsrs	r3, r3, #10
 8006310:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006316:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800631c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a5f      	ldr	r2, [pc, #380]	@ (80064ac <HAL_DMA_IRQHandler+0x1b4>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d04a      	beq.n	80063ca <HAL_DMA_IRQHandler+0xd2>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a5d      	ldr	r2, [pc, #372]	@ (80064b0 <HAL_DMA_IRQHandler+0x1b8>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d045      	beq.n	80063ca <HAL_DMA_IRQHandler+0xd2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a5c      	ldr	r2, [pc, #368]	@ (80064b4 <HAL_DMA_IRQHandler+0x1bc>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d040      	beq.n	80063ca <HAL_DMA_IRQHandler+0xd2>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a5a      	ldr	r2, [pc, #360]	@ (80064b8 <HAL_DMA_IRQHandler+0x1c0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d03b      	beq.n	80063ca <HAL_DMA_IRQHandler+0xd2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a59      	ldr	r2, [pc, #356]	@ (80064bc <HAL_DMA_IRQHandler+0x1c4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d036      	beq.n	80063ca <HAL_DMA_IRQHandler+0xd2>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a57      	ldr	r2, [pc, #348]	@ (80064c0 <HAL_DMA_IRQHandler+0x1c8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d031      	beq.n	80063ca <HAL_DMA_IRQHandler+0xd2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a56      	ldr	r2, [pc, #344]	@ (80064c4 <HAL_DMA_IRQHandler+0x1cc>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d02c      	beq.n	80063ca <HAL_DMA_IRQHandler+0xd2>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a54      	ldr	r2, [pc, #336]	@ (80064c8 <HAL_DMA_IRQHandler+0x1d0>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d027      	beq.n	80063ca <HAL_DMA_IRQHandler+0xd2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a53      	ldr	r2, [pc, #332]	@ (80064cc <HAL_DMA_IRQHandler+0x1d4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d022      	beq.n	80063ca <HAL_DMA_IRQHandler+0xd2>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a51      	ldr	r2, [pc, #324]	@ (80064d0 <HAL_DMA_IRQHandler+0x1d8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d01d      	beq.n	80063ca <HAL_DMA_IRQHandler+0xd2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a50      	ldr	r2, [pc, #320]	@ (80064d4 <HAL_DMA_IRQHandler+0x1dc>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d018      	beq.n	80063ca <HAL_DMA_IRQHandler+0xd2>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a4e      	ldr	r2, [pc, #312]	@ (80064d8 <HAL_DMA_IRQHandler+0x1e0>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d013      	beq.n	80063ca <HAL_DMA_IRQHandler+0xd2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a4d      	ldr	r2, [pc, #308]	@ (80064dc <HAL_DMA_IRQHandler+0x1e4>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d00e      	beq.n	80063ca <HAL_DMA_IRQHandler+0xd2>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a4b      	ldr	r2, [pc, #300]	@ (80064e0 <HAL_DMA_IRQHandler+0x1e8>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d009      	beq.n	80063ca <HAL_DMA_IRQHandler+0xd2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a4a      	ldr	r2, [pc, #296]	@ (80064e4 <HAL_DMA_IRQHandler+0x1ec>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d004      	beq.n	80063ca <HAL_DMA_IRQHandler+0xd2>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a48      	ldr	r2, [pc, #288]	@ (80064e8 <HAL_DMA_IRQHandler+0x1f0>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d101      	bne.n	80063ce <HAL_DMA_IRQHandler+0xd6>
 80063ca:	2301      	movs	r3, #1
 80063cc:	e000      	b.n	80063d0 <HAL_DMA_IRQHandler+0xd8>
 80063ce:	2300      	movs	r3, #0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 842b 	beq.w	8006c2c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063da:	f003 031f 	and.w	r3, r3, #31
 80063de:	2208      	movs	r2, #8
 80063e0:	409a      	lsls	r2, r3
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	4013      	ands	r3, r2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 80a2 	beq.w	8006530 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a2e      	ldr	r2, [pc, #184]	@ (80064ac <HAL_DMA_IRQHandler+0x1b4>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d04a      	beq.n	800648c <HAL_DMA_IRQHandler+0x194>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a2d      	ldr	r2, [pc, #180]	@ (80064b0 <HAL_DMA_IRQHandler+0x1b8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d045      	beq.n	800648c <HAL_DMA_IRQHandler+0x194>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a2b      	ldr	r2, [pc, #172]	@ (80064b4 <HAL_DMA_IRQHandler+0x1bc>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d040      	beq.n	800648c <HAL_DMA_IRQHandler+0x194>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a2a      	ldr	r2, [pc, #168]	@ (80064b8 <HAL_DMA_IRQHandler+0x1c0>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d03b      	beq.n	800648c <HAL_DMA_IRQHandler+0x194>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a28      	ldr	r2, [pc, #160]	@ (80064bc <HAL_DMA_IRQHandler+0x1c4>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d036      	beq.n	800648c <HAL_DMA_IRQHandler+0x194>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a27      	ldr	r2, [pc, #156]	@ (80064c0 <HAL_DMA_IRQHandler+0x1c8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d031      	beq.n	800648c <HAL_DMA_IRQHandler+0x194>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a25      	ldr	r2, [pc, #148]	@ (80064c4 <HAL_DMA_IRQHandler+0x1cc>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d02c      	beq.n	800648c <HAL_DMA_IRQHandler+0x194>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a24      	ldr	r2, [pc, #144]	@ (80064c8 <HAL_DMA_IRQHandler+0x1d0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d027      	beq.n	800648c <HAL_DMA_IRQHandler+0x194>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a22      	ldr	r2, [pc, #136]	@ (80064cc <HAL_DMA_IRQHandler+0x1d4>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d022      	beq.n	800648c <HAL_DMA_IRQHandler+0x194>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a21      	ldr	r2, [pc, #132]	@ (80064d0 <HAL_DMA_IRQHandler+0x1d8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d01d      	beq.n	800648c <HAL_DMA_IRQHandler+0x194>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a1f      	ldr	r2, [pc, #124]	@ (80064d4 <HAL_DMA_IRQHandler+0x1dc>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d018      	beq.n	800648c <HAL_DMA_IRQHandler+0x194>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a1e      	ldr	r2, [pc, #120]	@ (80064d8 <HAL_DMA_IRQHandler+0x1e0>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d013      	beq.n	800648c <HAL_DMA_IRQHandler+0x194>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a1c      	ldr	r2, [pc, #112]	@ (80064dc <HAL_DMA_IRQHandler+0x1e4>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00e      	beq.n	800648c <HAL_DMA_IRQHandler+0x194>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a1b      	ldr	r2, [pc, #108]	@ (80064e0 <HAL_DMA_IRQHandler+0x1e8>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d009      	beq.n	800648c <HAL_DMA_IRQHandler+0x194>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a19      	ldr	r2, [pc, #100]	@ (80064e4 <HAL_DMA_IRQHandler+0x1ec>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d004      	beq.n	800648c <HAL_DMA_IRQHandler+0x194>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a18      	ldr	r2, [pc, #96]	@ (80064e8 <HAL_DMA_IRQHandler+0x1f0>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d12f      	bne.n	80064ec <HAL_DMA_IRQHandler+0x1f4>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0304 	and.w	r3, r3, #4
 8006496:	2b00      	cmp	r3, #0
 8006498:	bf14      	ite	ne
 800649a:	2301      	movne	r3, #1
 800649c:	2300      	moveq	r3, #0
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	e02e      	b.n	8006500 <HAL_DMA_IRQHandler+0x208>
 80064a2:	bf00      	nop
 80064a4:	24000050 	.word	0x24000050
 80064a8:	1b4e81b5 	.word	0x1b4e81b5
 80064ac:	40020010 	.word	0x40020010
 80064b0:	40020028 	.word	0x40020028
 80064b4:	40020040 	.word	0x40020040
 80064b8:	40020058 	.word	0x40020058
 80064bc:	40020070 	.word	0x40020070
 80064c0:	40020088 	.word	0x40020088
 80064c4:	400200a0 	.word	0x400200a0
 80064c8:	400200b8 	.word	0x400200b8
 80064cc:	40020410 	.word	0x40020410
 80064d0:	40020428 	.word	0x40020428
 80064d4:	40020440 	.word	0x40020440
 80064d8:	40020458 	.word	0x40020458
 80064dc:	40020470 	.word	0x40020470
 80064e0:	40020488 	.word	0x40020488
 80064e4:	400204a0 	.word	0x400204a0
 80064e8:	400204b8 	.word	0x400204b8
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0308 	and.w	r3, r3, #8
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	bf14      	ite	ne
 80064fa:	2301      	movne	r3, #1
 80064fc:	2300      	moveq	r3, #0
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	d015      	beq.n	8006530 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0204 	bic.w	r2, r2, #4
 8006512:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006518:	f003 031f 	and.w	r3, r3, #31
 800651c:	2208      	movs	r2, #8
 800651e:	409a      	lsls	r2, r3
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006528:	f043 0201 	orr.w	r2, r3, #1
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006534:	f003 031f 	and.w	r3, r3, #31
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	fa22 f303 	lsr.w	r3, r2, r3
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	d06e      	beq.n	8006624 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a69      	ldr	r2, [pc, #420]	@ (80066f0 <HAL_DMA_IRQHandler+0x3f8>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d04a      	beq.n	80065e6 <HAL_DMA_IRQHandler+0x2ee>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a67      	ldr	r2, [pc, #412]	@ (80066f4 <HAL_DMA_IRQHandler+0x3fc>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d045      	beq.n	80065e6 <HAL_DMA_IRQHandler+0x2ee>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a66      	ldr	r2, [pc, #408]	@ (80066f8 <HAL_DMA_IRQHandler+0x400>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d040      	beq.n	80065e6 <HAL_DMA_IRQHandler+0x2ee>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a64      	ldr	r2, [pc, #400]	@ (80066fc <HAL_DMA_IRQHandler+0x404>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d03b      	beq.n	80065e6 <HAL_DMA_IRQHandler+0x2ee>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a63      	ldr	r2, [pc, #396]	@ (8006700 <HAL_DMA_IRQHandler+0x408>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d036      	beq.n	80065e6 <HAL_DMA_IRQHandler+0x2ee>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a61      	ldr	r2, [pc, #388]	@ (8006704 <HAL_DMA_IRQHandler+0x40c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d031      	beq.n	80065e6 <HAL_DMA_IRQHandler+0x2ee>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a60      	ldr	r2, [pc, #384]	@ (8006708 <HAL_DMA_IRQHandler+0x410>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d02c      	beq.n	80065e6 <HAL_DMA_IRQHandler+0x2ee>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a5e      	ldr	r2, [pc, #376]	@ (800670c <HAL_DMA_IRQHandler+0x414>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d027      	beq.n	80065e6 <HAL_DMA_IRQHandler+0x2ee>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a5d      	ldr	r2, [pc, #372]	@ (8006710 <HAL_DMA_IRQHandler+0x418>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d022      	beq.n	80065e6 <HAL_DMA_IRQHandler+0x2ee>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a5b      	ldr	r2, [pc, #364]	@ (8006714 <HAL_DMA_IRQHandler+0x41c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d01d      	beq.n	80065e6 <HAL_DMA_IRQHandler+0x2ee>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a5a      	ldr	r2, [pc, #360]	@ (8006718 <HAL_DMA_IRQHandler+0x420>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d018      	beq.n	80065e6 <HAL_DMA_IRQHandler+0x2ee>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a58      	ldr	r2, [pc, #352]	@ (800671c <HAL_DMA_IRQHandler+0x424>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d013      	beq.n	80065e6 <HAL_DMA_IRQHandler+0x2ee>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a57      	ldr	r2, [pc, #348]	@ (8006720 <HAL_DMA_IRQHandler+0x428>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d00e      	beq.n	80065e6 <HAL_DMA_IRQHandler+0x2ee>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a55      	ldr	r2, [pc, #340]	@ (8006724 <HAL_DMA_IRQHandler+0x42c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d009      	beq.n	80065e6 <HAL_DMA_IRQHandler+0x2ee>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a54      	ldr	r2, [pc, #336]	@ (8006728 <HAL_DMA_IRQHandler+0x430>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d004      	beq.n	80065e6 <HAL_DMA_IRQHandler+0x2ee>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a52      	ldr	r2, [pc, #328]	@ (800672c <HAL_DMA_IRQHandler+0x434>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d10a      	bne.n	80065fc <HAL_DMA_IRQHandler+0x304>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	bf14      	ite	ne
 80065f4:	2301      	movne	r3, #1
 80065f6:	2300      	moveq	r3, #0
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	e003      	b.n	8006604 <HAL_DMA_IRQHandler+0x30c>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2300      	movs	r3, #0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00d      	beq.n	8006624 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800660c:	f003 031f 	and.w	r3, r3, #31
 8006610:	2201      	movs	r2, #1
 8006612:	409a      	lsls	r2, r3
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800661c:	f043 0202 	orr.w	r2, r3, #2
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006628:	f003 031f 	and.w	r3, r3, #31
 800662c:	2204      	movs	r2, #4
 800662e:	409a      	lsls	r2, r3
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	4013      	ands	r3, r2
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 808f 	beq.w	8006758 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a2c      	ldr	r2, [pc, #176]	@ (80066f0 <HAL_DMA_IRQHandler+0x3f8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d04a      	beq.n	80066da <HAL_DMA_IRQHandler+0x3e2>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a2a      	ldr	r2, [pc, #168]	@ (80066f4 <HAL_DMA_IRQHandler+0x3fc>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d045      	beq.n	80066da <HAL_DMA_IRQHandler+0x3e2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a29      	ldr	r2, [pc, #164]	@ (80066f8 <HAL_DMA_IRQHandler+0x400>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d040      	beq.n	80066da <HAL_DMA_IRQHandler+0x3e2>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a27      	ldr	r2, [pc, #156]	@ (80066fc <HAL_DMA_IRQHandler+0x404>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d03b      	beq.n	80066da <HAL_DMA_IRQHandler+0x3e2>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a26      	ldr	r2, [pc, #152]	@ (8006700 <HAL_DMA_IRQHandler+0x408>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d036      	beq.n	80066da <HAL_DMA_IRQHandler+0x3e2>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a24      	ldr	r2, [pc, #144]	@ (8006704 <HAL_DMA_IRQHandler+0x40c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d031      	beq.n	80066da <HAL_DMA_IRQHandler+0x3e2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a23      	ldr	r2, [pc, #140]	@ (8006708 <HAL_DMA_IRQHandler+0x410>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d02c      	beq.n	80066da <HAL_DMA_IRQHandler+0x3e2>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a21      	ldr	r2, [pc, #132]	@ (800670c <HAL_DMA_IRQHandler+0x414>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d027      	beq.n	80066da <HAL_DMA_IRQHandler+0x3e2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a20      	ldr	r2, [pc, #128]	@ (8006710 <HAL_DMA_IRQHandler+0x418>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d022      	beq.n	80066da <HAL_DMA_IRQHandler+0x3e2>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a1e      	ldr	r2, [pc, #120]	@ (8006714 <HAL_DMA_IRQHandler+0x41c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d01d      	beq.n	80066da <HAL_DMA_IRQHandler+0x3e2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a1d      	ldr	r2, [pc, #116]	@ (8006718 <HAL_DMA_IRQHandler+0x420>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d018      	beq.n	80066da <HAL_DMA_IRQHandler+0x3e2>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a1b      	ldr	r2, [pc, #108]	@ (800671c <HAL_DMA_IRQHandler+0x424>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d013      	beq.n	80066da <HAL_DMA_IRQHandler+0x3e2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a1a      	ldr	r2, [pc, #104]	@ (8006720 <HAL_DMA_IRQHandler+0x428>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00e      	beq.n	80066da <HAL_DMA_IRQHandler+0x3e2>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a18      	ldr	r2, [pc, #96]	@ (8006724 <HAL_DMA_IRQHandler+0x42c>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d009      	beq.n	80066da <HAL_DMA_IRQHandler+0x3e2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a17      	ldr	r2, [pc, #92]	@ (8006728 <HAL_DMA_IRQHandler+0x430>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d004      	beq.n	80066da <HAL_DMA_IRQHandler+0x3e2>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a15      	ldr	r2, [pc, #84]	@ (800672c <HAL_DMA_IRQHandler+0x434>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d12a      	bne.n	8006730 <HAL_DMA_IRQHandler+0x438>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	bf14      	ite	ne
 80066e8:	2301      	movne	r3, #1
 80066ea:	2300      	moveq	r3, #0
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	e023      	b.n	8006738 <HAL_DMA_IRQHandler+0x440>
 80066f0:	40020010 	.word	0x40020010
 80066f4:	40020028 	.word	0x40020028
 80066f8:	40020040 	.word	0x40020040
 80066fc:	40020058 	.word	0x40020058
 8006700:	40020070 	.word	0x40020070
 8006704:	40020088 	.word	0x40020088
 8006708:	400200a0 	.word	0x400200a0
 800670c:	400200b8 	.word	0x400200b8
 8006710:	40020410 	.word	0x40020410
 8006714:	40020428 	.word	0x40020428
 8006718:	40020440 	.word	0x40020440
 800671c:	40020458 	.word	0x40020458
 8006720:	40020470 	.word	0x40020470
 8006724:	40020488 	.word	0x40020488
 8006728:	400204a0 	.word	0x400204a0
 800672c:	400204b8 	.word	0x400204b8
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2300      	movs	r3, #0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00d      	beq.n	8006758 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006740:	f003 031f 	and.w	r3, r3, #31
 8006744:	2204      	movs	r2, #4
 8006746:	409a      	lsls	r2, r3
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006750:	f043 0204 	orr.w	r2, r3, #4
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800675c:	f003 031f 	and.w	r3, r3, #31
 8006760:	2210      	movs	r2, #16
 8006762:	409a      	lsls	r2, r3
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	4013      	ands	r3, r2
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 80a6 	beq.w	80068ba <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a85      	ldr	r2, [pc, #532]	@ (8006988 <HAL_DMA_IRQHandler+0x690>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d04a      	beq.n	800680e <HAL_DMA_IRQHandler+0x516>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a83      	ldr	r2, [pc, #524]	@ (800698c <HAL_DMA_IRQHandler+0x694>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d045      	beq.n	800680e <HAL_DMA_IRQHandler+0x516>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a82      	ldr	r2, [pc, #520]	@ (8006990 <HAL_DMA_IRQHandler+0x698>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d040      	beq.n	800680e <HAL_DMA_IRQHandler+0x516>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a80      	ldr	r2, [pc, #512]	@ (8006994 <HAL_DMA_IRQHandler+0x69c>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d03b      	beq.n	800680e <HAL_DMA_IRQHandler+0x516>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a7f      	ldr	r2, [pc, #508]	@ (8006998 <HAL_DMA_IRQHandler+0x6a0>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d036      	beq.n	800680e <HAL_DMA_IRQHandler+0x516>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a7d      	ldr	r2, [pc, #500]	@ (800699c <HAL_DMA_IRQHandler+0x6a4>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d031      	beq.n	800680e <HAL_DMA_IRQHandler+0x516>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a7c      	ldr	r2, [pc, #496]	@ (80069a0 <HAL_DMA_IRQHandler+0x6a8>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d02c      	beq.n	800680e <HAL_DMA_IRQHandler+0x516>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a7a      	ldr	r2, [pc, #488]	@ (80069a4 <HAL_DMA_IRQHandler+0x6ac>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d027      	beq.n	800680e <HAL_DMA_IRQHandler+0x516>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a79      	ldr	r2, [pc, #484]	@ (80069a8 <HAL_DMA_IRQHandler+0x6b0>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d022      	beq.n	800680e <HAL_DMA_IRQHandler+0x516>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a77      	ldr	r2, [pc, #476]	@ (80069ac <HAL_DMA_IRQHandler+0x6b4>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d01d      	beq.n	800680e <HAL_DMA_IRQHandler+0x516>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a76      	ldr	r2, [pc, #472]	@ (80069b0 <HAL_DMA_IRQHandler+0x6b8>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d018      	beq.n	800680e <HAL_DMA_IRQHandler+0x516>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a74      	ldr	r2, [pc, #464]	@ (80069b4 <HAL_DMA_IRQHandler+0x6bc>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d013      	beq.n	800680e <HAL_DMA_IRQHandler+0x516>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a73      	ldr	r2, [pc, #460]	@ (80069b8 <HAL_DMA_IRQHandler+0x6c0>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00e      	beq.n	800680e <HAL_DMA_IRQHandler+0x516>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a71      	ldr	r2, [pc, #452]	@ (80069bc <HAL_DMA_IRQHandler+0x6c4>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d009      	beq.n	800680e <HAL_DMA_IRQHandler+0x516>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a70      	ldr	r2, [pc, #448]	@ (80069c0 <HAL_DMA_IRQHandler+0x6c8>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d004      	beq.n	800680e <HAL_DMA_IRQHandler+0x516>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a6e      	ldr	r2, [pc, #440]	@ (80069c4 <HAL_DMA_IRQHandler+0x6cc>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d10a      	bne.n	8006824 <HAL_DMA_IRQHandler+0x52c>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0308 	and.w	r3, r3, #8
 8006818:	2b00      	cmp	r3, #0
 800681a:	bf14      	ite	ne
 800681c:	2301      	movne	r3, #1
 800681e:	2300      	moveq	r3, #0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	e009      	b.n	8006838 <HAL_DMA_IRQHandler+0x540>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0304 	and.w	r3, r3, #4
 800682e:	2b00      	cmp	r3, #0
 8006830:	bf14      	ite	ne
 8006832:	2301      	movne	r3, #1
 8006834:	2300      	moveq	r3, #0
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	d03e      	beq.n	80068ba <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006840:	f003 031f 	and.w	r3, r3, #31
 8006844:	2210      	movs	r2, #16
 8006846:	409a      	lsls	r2, r3
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d018      	beq.n	800688c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d108      	bne.n	800687a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686c:	2b00      	cmp	r3, #0
 800686e:	d024      	beq.n	80068ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	4798      	blx	r3
 8006878:	e01f      	b.n	80068ba <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800687e:	2b00      	cmp	r3, #0
 8006880:	d01b      	beq.n	80068ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	4798      	blx	r3
 800688a:	e016      	b.n	80068ba <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006896:	2b00      	cmp	r3, #0
 8006898:	d107      	bne.n	80068aa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0208 	bic.w	r2, r2, #8
 80068a8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d003      	beq.n	80068ba <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068be:	f003 031f 	and.w	r3, r3, #31
 80068c2:	2220      	movs	r2, #32
 80068c4:	409a      	lsls	r2, r3
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	4013      	ands	r3, r2
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 8110 	beq.w	8006af0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a2c      	ldr	r2, [pc, #176]	@ (8006988 <HAL_DMA_IRQHandler+0x690>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d04a      	beq.n	8006970 <HAL_DMA_IRQHandler+0x678>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a2b      	ldr	r2, [pc, #172]	@ (800698c <HAL_DMA_IRQHandler+0x694>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d045      	beq.n	8006970 <HAL_DMA_IRQHandler+0x678>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a29      	ldr	r2, [pc, #164]	@ (8006990 <HAL_DMA_IRQHandler+0x698>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d040      	beq.n	8006970 <HAL_DMA_IRQHandler+0x678>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a28      	ldr	r2, [pc, #160]	@ (8006994 <HAL_DMA_IRQHandler+0x69c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d03b      	beq.n	8006970 <HAL_DMA_IRQHandler+0x678>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a26      	ldr	r2, [pc, #152]	@ (8006998 <HAL_DMA_IRQHandler+0x6a0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d036      	beq.n	8006970 <HAL_DMA_IRQHandler+0x678>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a25      	ldr	r2, [pc, #148]	@ (800699c <HAL_DMA_IRQHandler+0x6a4>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d031      	beq.n	8006970 <HAL_DMA_IRQHandler+0x678>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a23      	ldr	r2, [pc, #140]	@ (80069a0 <HAL_DMA_IRQHandler+0x6a8>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d02c      	beq.n	8006970 <HAL_DMA_IRQHandler+0x678>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a22      	ldr	r2, [pc, #136]	@ (80069a4 <HAL_DMA_IRQHandler+0x6ac>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d027      	beq.n	8006970 <HAL_DMA_IRQHandler+0x678>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a20      	ldr	r2, [pc, #128]	@ (80069a8 <HAL_DMA_IRQHandler+0x6b0>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d022      	beq.n	8006970 <HAL_DMA_IRQHandler+0x678>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a1f      	ldr	r2, [pc, #124]	@ (80069ac <HAL_DMA_IRQHandler+0x6b4>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d01d      	beq.n	8006970 <HAL_DMA_IRQHandler+0x678>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a1d      	ldr	r2, [pc, #116]	@ (80069b0 <HAL_DMA_IRQHandler+0x6b8>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d018      	beq.n	8006970 <HAL_DMA_IRQHandler+0x678>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1c      	ldr	r2, [pc, #112]	@ (80069b4 <HAL_DMA_IRQHandler+0x6bc>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d013      	beq.n	8006970 <HAL_DMA_IRQHandler+0x678>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1a      	ldr	r2, [pc, #104]	@ (80069b8 <HAL_DMA_IRQHandler+0x6c0>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00e      	beq.n	8006970 <HAL_DMA_IRQHandler+0x678>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a19      	ldr	r2, [pc, #100]	@ (80069bc <HAL_DMA_IRQHandler+0x6c4>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d009      	beq.n	8006970 <HAL_DMA_IRQHandler+0x678>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a17      	ldr	r2, [pc, #92]	@ (80069c0 <HAL_DMA_IRQHandler+0x6c8>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d004      	beq.n	8006970 <HAL_DMA_IRQHandler+0x678>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a16      	ldr	r2, [pc, #88]	@ (80069c4 <HAL_DMA_IRQHandler+0x6cc>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d12b      	bne.n	80069c8 <HAL_DMA_IRQHandler+0x6d0>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0310 	and.w	r3, r3, #16
 800697a:	2b00      	cmp	r3, #0
 800697c:	bf14      	ite	ne
 800697e:	2301      	movne	r3, #1
 8006980:	2300      	moveq	r3, #0
 8006982:	b2db      	uxtb	r3, r3
 8006984:	e02a      	b.n	80069dc <HAL_DMA_IRQHandler+0x6e4>
 8006986:	bf00      	nop
 8006988:	40020010 	.word	0x40020010
 800698c:	40020028 	.word	0x40020028
 8006990:	40020040 	.word	0x40020040
 8006994:	40020058 	.word	0x40020058
 8006998:	40020070 	.word	0x40020070
 800699c:	40020088 	.word	0x40020088
 80069a0:	400200a0 	.word	0x400200a0
 80069a4:	400200b8 	.word	0x400200b8
 80069a8:	40020410 	.word	0x40020410
 80069ac:	40020428 	.word	0x40020428
 80069b0:	40020440 	.word	0x40020440
 80069b4:	40020458 	.word	0x40020458
 80069b8:	40020470 	.word	0x40020470
 80069bc:	40020488 	.word	0x40020488
 80069c0:	400204a0 	.word	0x400204a0
 80069c4:	400204b8 	.word	0x400204b8
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	bf14      	ite	ne
 80069d6:	2301      	movne	r3, #1
 80069d8:	2300      	moveq	r3, #0
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 8087 	beq.w	8006af0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069e6:	f003 031f 	and.w	r3, r3, #31
 80069ea:	2220      	movs	r2, #32
 80069ec:	409a      	lsls	r2, r3
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d139      	bne.n	8006a72 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f022 0216 	bic.w	r2, r2, #22
 8006a0c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	695a      	ldr	r2, [r3, #20]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a1c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d103      	bne.n	8006a2e <HAL_DMA_IRQHandler+0x736>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d007      	beq.n	8006a3e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 0208 	bic.w	r2, r2, #8
 8006a3c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a42:	f003 031f 	and.w	r3, r3, #31
 8006a46:	223f      	movs	r2, #63	@ 0x3f
 8006a48:	409a      	lsls	r2, r3
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 834a 	beq.w	80070fc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	4798      	blx	r3
          }
          return;
 8006a70:	e344      	b.n	80070fc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d018      	beq.n	8006ab2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d108      	bne.n	8006aa0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d02c      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	4798      	blx	r3
 8006a9e:	e027      	b.n	8006af0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d023      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	4798      	blx	r3
 8006ab0:	e01e      	b.n	8006af0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10f      	bne.n	8006ae0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0210 	bic.w	r2, r2, #16
 8006ace:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d003      	beq.n	8006af0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 8306 	beq.w	8007106 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 8088 	beq.w	8006c18 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2204      	movs	r2, #4
 8006b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a7a      	ldr	r2, [pc, #488]	@ (8006d00 <HAL_DMA_IRQHandler+0xa08>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d04a      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x8b8>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a79      	ldr	r2, [pc, #484]	@ (8006d04 <HAL_DMA_IRQHandler+0xa0c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d045      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x8b8>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a77      	ldr	r2, [pc, #476]	@ (8006d08 <HAL_DMA_IRQHandler+0xa10>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d040      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x8b8>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a76      	ldr	r2, [pc, #472]	@ (8006d0c <HAL_DMA_IRQHandler+0xa14>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d03b      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x8b8>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a74      	ldr	r2, [pc, #464]	@ (8006d10 <HAL_DMA_IRQHandler+0xa18>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d036      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x8b8>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a73      	ldr	r2, [pc, #460]	@ (8006d14 <HAL_DMA_IRQHandler+0xa1c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d031      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x8b8>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a71      	ldr	r2, [pc, #452]	@ (8006d18 <HAL_DMA_IRQHandler+0xa20>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d02c      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x8b8>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a70      	ldr	r2, [pc, #448]	@ (8006d1c <HAL_DMA_IRQHandler+0xa24>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d027      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x8b8>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a6e      	ldr	r2, [pc, #440]	@ (8006d20 <HAL_DMA_IRQHandler+0xa28>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d022      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x8b8>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a6d      	ldr	r2, [pc, #436]	@ (8006d24 <HAL_DMA_IRQHandler+0xa2c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d01d      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x8b8>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a6b      	ldr	r2, [pc, #428]	@ (8006d28 <HAL_DMA_IRQHandler+0xa30>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d018      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x8b8>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a6a      	ldr	r2, [pc, #424]	@ (8006d2c <HAL_DMA_IRQHandler+0xa34>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d013      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x8b8>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a68      	ldr	r2, [pc, #416]	@ (8006d30 <HAL_DMA_IRQHandler+0xa38>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00e      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x8b8>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a67      	ldr	r2, [pc, #412]	@ (8006d34 <HAL_DMA_IRQHandler+0xa3c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d009      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x8b8>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a65      	ldr	r2, [pc, #404]	@ (8006d38 <HAL_DMA_IRQHandler+0xa40>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d004      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x8b8>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a64      	ldr	r2, [pc, #400]	@ (8006d3c <HAL_DMA_IRQHandler+0xa44>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d108      	bne.n	8006bc2 <HAL_DMA_IRQHandler+0x8ca>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0201 	bic.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	e007      	b.n	8006bd2 <HAL_DMA_IRQHandler+0x8da>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 0201 	bic.w	r2, r2, #1
 8006bd0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d307      	bcc.n	8006bee <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1f2      	bne.n	8006bd2 <HAL_DMA_IRQHandler+0x8da>
 8006bec:	e000      	b.n	8006bf0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006bee:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d004      	beq.n	8006c08 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2203      	movs	r2, #3
 8006c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006c06:	e003      	b.n	8006c10 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 8272 	beq.w	8007106 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	4798      	blx	r3
 8006c2a:	e26c      	b.n	8007106 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a43      	ldr	r2, [pc, #268]	@ (8006d40 <HAL_DMA_IRQHandler+0xa48>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d022      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x984>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a42      	ldr	r2, [pc, #264]	@ (8006d44 <HAL_DMA_IRQHandler+0xa4c>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d01d      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x984>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a40      	ldr	r2, [pc, #256]	@ (8006d48 <HAL_DMA_IRQHandler+0xa50>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d018      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x984>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a3f      	ldr	r2, [pc, #252]	@ (8006d4c <HAL_DMA_IRQHandler+0xa54>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d013      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x984>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a3d      	ldr	r2, [pc, #244]	@ (8006d50 <HAL_DMA_IRQHandler+0xa58>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00e      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x984>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a3c      	ldr	r2, [pc, #240]	@ (8006d54 <HAL_DMA_IRQHandler+0xa5c>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d009      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x984>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a3a      	ldr	r2, [pc, #232]	@ (8006d58 <HAL_DMA_IRQHandler+0xa60>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d004      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x984>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a39      	ldr	r2, [pc, #228]	@ (8006d5c <HAL_DMA_IRQHandler+0xa64>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d101      	bne.n	8006c80 <HAL_DMA_IRQHandler+0x988>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e000      	b.n	8006c82 <HAL_DMA_IRQHandler+0x98a>
 8006c80:	2300      	movs	r3, #0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 823f 	beq.w	8007106 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c94:	f003 031f 	and.w	r3, r3, #31
 8006c98:	2204      	movs	r2, #4
 8006c9a:	409a      	lsls	r2, r3
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 80cd 	beq.w	8006e40 <HAL_DMA_IRQHandler+0xb48>
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 80c7 	beq.w	8006e40 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cb6:	f003 031f 	and.w	r3, r3, #31
 8006cba:	2204      	movs	r2, #4
 8006cbc:	409a      	lsls	r2, r3
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d049      	beq.n	8006d60 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d109      	bne.n	8006cea <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 8210 	beq.w	8007100 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ce8:	e20a      	b.n	8007100 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 8206 	beq.w	8007100 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cfc:	e200      	b.n	8007100 <HAL_DMA_IRQHandler+0xe08>
 8006cfe:	bf00      	nop
 8006d00:	40020010 	.word	0x40020010
 8006d04:	40020028 	.word	0x40020028
 8006d08:	40020040 	.word	0x40020040
 8006d0c:	40020058 	.word	0x40020058
 8006d10:	40020070 	.word	0x40020070
 8006d14:	40020088 	.word	0x40020088
 8006d18:	400200a0 	.word	0x400200a0
 8006d1c:	400200b8 	.word	0x400200b8
 8006d20:	40020410 	.word	0x40020410
 8006d24:	40020428 	.word	0x40020428
 8006d28:	40020440 	.word	0x40020440
 8006d2c:	40020458 	.word	0x40020458
 8006d30:	40020470 	.word	0x40020470
 8006d34:	40020488 	.word	0x40020488
 8006d38:	400204a0 	.word	0x400204a0
 8006d3c:	400204b8 	.word	0x400204b8
 8006d40:	58025408 	.word	0x58025408
 8006d44:	5802541c 	.word	0x5802541c
 8006d48:	58025430 	.word	0x58025430
 8006d4c:	58025444 	.word	0x58025444
 8006d50:	58025458 	.word	0x58025458
 8006d54:	5802546c 	.word	0x5802546c
 8006d58:	58025480 	.word	0x58025480
 8006d5c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f003 0320 	and.w	r3, r3, #32
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d160      	bne.n	8006e2c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a7f      	ldr	r2, [pc, #508]	@ (8006f6c <HAL_DMA_IRQHandler+0xc74>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d04a      	beq.n	8006e0a <HAL_DMA_IRQHandler+0xb12>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a7d      	ldr	r2, [pc, #500]	@ (8006f70 <HAL_DMA_IRQHandler+0xc78>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d045      	beq.n	8006e0a <HAL_DMA_IRQHandler+0xb12>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a7c      	ldr	r2, [pc, #496]	@ (8006f74 <HAL_DMA_IRQHandler+0xc7c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d040      	beq.n	8006e0a <HAL_DMA_IRQHandler+0xb12>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a7a      	ldr	r2, [pc, #488]	@ (8006f78 <HAL_DMA_IRQHandler+0xc80>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d03b      	beq.n	8006e0a <HAL_DMA_IRQHandler+0xb12>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a79      	ldr	r2, [pc, #484]	@ (8006f7c <HAL_DMA_IRQHandler+0xc84>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d036      	beq.n	8006e0a <HAL_DMA_IRQHandler+0xb12>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a77      	ldr	r2, [pc, #476]	@ (8006f80 <HAL_DMA_IRQHandler+0xc88>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d031      	beq.n	8006e0a <HAL_DMA_IRQHandler+0xb12>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a76      	ldr	r2, [pc, #472]	@ (8006f84 <HAL_DMA_IRQHandler+0xc8c>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d02c      	beq.n	8006e0a <HAL_DMA_IRQHandler+0xb12>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a74      	ldr	r2, [pc, #464]	@ (8006f88 <HAL_DMA_IRQHandler+0xc90>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d027      	beq.n	8006e0a <HAL_DMA_IRQHandler+0xb12>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a73      	ldr	r2, [pc, #460]	@ (8006f8c <HAL_DMA_IRQHandler+0xc94>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d022      	beq.n	8006e0a <HAL_DMA_IRQHandler+0xb12>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a71      	ldr	r2, [pc, #452]	@ (8006f90 <HAL_DMA_IRQHandler+0xc98>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d01d      	beq.n	8006e0a <HAL_DMA_IRQHandler+0xb12>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a70      	ldr	r2, [pc, #448]	@ (8006f94 <HAL_DMA_IRQHandler+0xc9c>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d018      	beq.n	8006e0a <HAL_DMA_IRQHandler+0xb12>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a6e      	ldr	r2, [pc, #440]	@ (8006f98 <HAL_DMA_IRQHandler+0xca0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d013      	beq.n	8006e0a <HAL_DMA_IRQHandler+0xb12>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a6d      	ldr	r2, [pc, #436]	@ (8006f9c <HAL_DMA_IRQHandler+0xca4>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00e      	beq.n	8006e0a <HAL_DMA_IRQHandler+0xb12>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a6b      	ldr	r2, [pc, #428]	@ (8006fa0 <HAL_DMA_IRQHandler+0xca8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d009      	beq.n	8006e0a <HAL_DMA_IRQHandler+0xb12>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a6a      	ldr	r2, [pc, #424]	@ (8006fa4 <HAL_DMA_IRQHandler+0xcac>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d004      	beq.n	8006e0a <HAL_DMA_IRQHandler+0xb12>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a68      	ldr	r2, [pc, #416]	@ (8006fa8 <HAL_DMA_IRQHandler+0xcb0>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d108      	bne.n	8006e1c <HAL_DMA_IRQHandler+0xb24>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 0208 	bic.w	r2, r2, #8
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	e007      	b.n	8006e2c <HAL_DMA_IRQHandler+0xb34>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f022 0204 	bic.w	r2, r2, #4
 8006e2a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 8165 	beq.w	8007100 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e3e:	e15f      	b.n	8007100 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e44:	f003 031f 	and.w	r3, r3, #31
 8006e48:	2202      	movs	r2, #2
 8006e4a:	409a      	lsls	r2, r3
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	4013      	ands	r3, r2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 80c5 	beq.w	8006fe0 <HAL_DMA_IRQHandler+0xce8>
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f003 0302 	and.w	r3, r3, #2
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 80bf 	beq.w	8006fe0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e66:	f003 031f 	and.w	r3, r3, #31
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	409a      	lsls	r2, r3
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d018      	beq.n	8006eae <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d109      	bne.n	8006e9a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f000 813a 	beq.w	8007104 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e98:	e134      	b.n	8007104 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 8130 	beq.w	8007104 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006eac:	e12a      	b.n	8007104 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f003 0320 	and.w	r3, r3, #32
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f040 8089 	bne.w	8006fcc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a2b      	ldr	r2, [pc, #172]	@ (8006f6c <HAL_DMA_IRQHandler+0xc74>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d04a      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xc62>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a29      	ldr	r2, [pc, #164]	@ (8006f70 <HAL_DMA_IRQHandler+0xc78>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d045      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xc62>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a28      	ldr	r2, [pc, #160]	@ (8006f74 <HAL_DMA_IRQHandler+0xc7c>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d040      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xc62>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a26      	ldr	r2, [pc, #152]	@ (8006f78 <HAL_DMA_IRQHandler+0xc80>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d03b      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xc62>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a25      	ldr	r2, [pc, #148]	@ (8006f7c <HAL_DMA_IRQHandler+0xc84>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d036      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xc62>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a23      	ldr	r2, [pc, #140]	@ (8006f80 <HAL_DMA_IRQHandler+0xc88>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d031      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xc62>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a22      	ldr	r2, [pc, #136]	@ (8006f84 <HAL_DMA_IRQHandler+0xc8c>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d02c      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xc62>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a20      	ldr	r2, [pc, #128]	@ (8006f88 <HAL_DMA_IRQHandler+0xc90>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d027      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xc62>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8006f8c <HAL_DMA_IRQHandler+0xc94>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d022      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xc62>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a1d      	ldr	r2, [pc, #116]	@ (8006f90 <HAL_DMA_IRQHandler+0xc98>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d01d      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xc62>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a1c      	ldr	r2, [pc, #112]	@ (8006f94 <HAL_DMA_IRQHandler+0xc9c>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d018      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xc62>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a1a      	ldr	r2, [pc, #104]	@ (8006f98 <HAL_DMA_IRQHandler+0xca0>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d013      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xc62>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a19      	ldr	r2, [pc, #100]	@ (8006f9c <HAL_DMA_IRQHandler+0xca4>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d00e      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xc62>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a17      	ldr	r2, [pc, #92]	@ (8006fa0 <HAL_DMA_IRQHandler+0xca8>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d009      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xc62>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a16      	ldr	r2, [pc, #88]	@ (8006fa4 <HAL_DMA_IRQHandler+0xcac>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d004      	beq.n	8006f5a <HAL_DMA_IRQHandler+0xc62>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a14      	ldr	r2, [pc, #80]	@ (8006fa8 <HAL_DMA_IRQHandler+0xcb0>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d128      	bne.n	8006fac <HAL_DMA_IRQHandler+0xcb4>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 0214 	bic.w	r2, r2, #20
 8006f68:	601a      	str	r2, [r3, #0]
 8006f6a:	e027      	b.n	8006fbc <HAL_DMA_IRQHandler+0xcc4>
 8006f6c:	40020010 	.word	0x40020010
 8006f70:	40020028 	.word	0x40020028
 8006f74:	40020040 	.word	0x40020040
 8006f78:	40020058 	.word	0x40020058
 8006f7c:	40020070 	.word	0x40020070
 8006f80:	40020088 	.word	0x40020088
 8006f84:	400200a0 	.word	0x400200a0
 8006f88:	400200b8 	.word	0x400200b8
 8006f8c:	40020410 	.word	0x40020410
 8006f90:	40020428 	.word	0x40020428
 8006f94:	40020440 	.word	0x40020440
 8006f98:	40020458 	.word	0x40020458
 8006f9c:	40020470 	.word	0x40020470
 8006fa0:	40020488 	.word	0x40020488
 8006fa4:	400204a0 	.word	0x400204a0
 8006fa8:	400204b8 	.word	0x400204b8
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 020a 	bic.w	r2, r2, #10
 8006fba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 8097 	beq.w	8007104 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fde:	e091      	b.n	8007104 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fe4:	f003 031f 	and.w	r3, r3, #31
 8006fe8:	2208      	movs	r2, #8
 8006fea:	409a      	lsls	r2, r3
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	4013      	ands	r3, r2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 8088 	beq.w	8007106 <HAL_DMA_IRQHandler+0xe0e>
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f003 0308 	and.w	r3, r3, #8
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 8082 	beq.w	8007106 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a41      	ldr	r2, [pc, #260]	@ (800710c <HAL_DMA_IRQHandler+0xe14>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d04a      	beq.n	80070a2 <HAL_DMA_IRQHandler+0xdaa>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a3f      	ldr	r2, [pc, #252]	@ (8007110 <HAL_DMA_IRQHandler+0xe18>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d045      	beq.n	80070a2 <HAL_DMA_IRQHandler+0xdaa>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a3e      	ldr	r2, [pc, #248]	@ (8007114 <HAL_DMA_IRQHandler+0xe1c>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d040      	beq.n	80070a2 <HAL_DMA_IRQHandler+0xdaa>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a3c      	ldr	r2, [pc, #240]	@ (8007118 <HAL_DMA_IRQHandler+0xe20>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d03b      	beq.n	80070a2 <HAL_DMA_IRQHandler+0xdaa>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a3b      	ldr	r2, [pc, #236]	@ (800711c <HAL_DMA_IRQHandler+0xe24>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d036      	beq.n	80070a2 <HAL_DMA_IRQHandler+0xdaa>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a39      	ldr	r2, [pc, #228]	@ (8007120 <HAL_DMA_IRQHandler+0xe28>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d031      	beq.n	80070a2 <HAL_DMA_IRQHandler+0xdaa>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a38      	ldr	r2, [pc, #224]	@ (8007124 <HAL_DMA_IRQHandler+0xe2c>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d02c      	beq.n	80070a2 <HAL_DMA_IRQHandler+0xdaa>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a36      	ldr	r2, [pc, #216]	@ (8007128 <HAL_DMA_IRQHandler+0xe30>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d027      	beq.n	80070a2 <HAL_DMA_IRQHandler+0xdaa>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a35      	ldr	r2, [pc, #212]	@ (800712c <HAL_DMA_IRQHandler+0xe34>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d022      	beq.n	80070a2 <HAL_DMA_IRQHandler+0xdaa>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a33      	ldr	r2, [pc, #204]	@ (8007130 <HAL_DMA_IRQHandler+0xe38>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d01d      	beq.n	80070a2 <HAL_DMA_IRQHandler+0xdaa>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a32      	ldr	r2, [pc, #200]	@ (8007134 <HAL_DMA_IRQHandler+0xe3c>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d018      	beq.n	80070a2 <HAL_DMA_IRQHandler+0xdaa>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a30      	ldr	r2, [pc, #192]	@ (8007138 <HAL_DMA_IRQHandler+0xe40>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d013      	beq.n	80070a2 <HAL_DMA_IRQHandler+0xdaa>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a2f      	ldr	r2, [pc, #188]	@ (800713c <HAL_DMA_IRQHandler+0xe44>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d00e      	beq.n	80070a2 <HAL_DMA_IRQHandler+0xdaa>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a2d      	ldr	r2, [pc, #180]	@ (8007140 <HAL_DMA_IRQHandler+0xe48>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d009      	beq.n	80070a2 <HAL_DMA_IRQHandler+0xdaa>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a2c      	ldr	r2, [pc, #176]	@ (8007144 <HAL_DMA_IRQHandler+0xe4c>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d004      	beq.n	80070a2 <HAL_DMA_IRQHandler+0xdaa>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a2a      	ldr	r2, [pc, #168]	@ (8007148 <HAL_DMA_IRQHandler+0xe50>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d108      	bne.n	80070b4 <HAL_DMA_IRQHandler+0xdbc>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 021c 	bic.w	r2, r2, #28
 80070b0:	601a      	str	r2, [r3, #0]
 80070b2:	e007      	b.n	80070c4 <HAL_DMA_IRQHandler+0xdcc>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 020e 	bic.w	r2, r2, #14
 80070c2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070c8:	f003 031f 	and.w	r3, r3, #31
 80070cc:	2201      	movs	r2, #1
 80070ce:	409a      	lsls	r2, r3
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d009      	beq.n	8007106 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	4798      	blx	r3
 80070fa:	e004      	b.n	8007106 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80070fc:	bf00      	nop
 80070fe:	e002      	b.n	8007106 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007100:	bf00      	nop
 8007102:	e000      	b.n	8007106 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007104:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007106:	3728      	adds	r7, #40	@ 0x28
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	40020010 	.word	0x40020010
 8007110:	40020028 	.word	0x40020028
 8007114:	40020040 	.word	0x40020040
 8007118:	40020058 	.word	0x40020058
 800711c:	40020070 	.word	0x40020070
 8007120:	40020088 	.word	0x40020088
 8007124:	400200a0 	.word	0x400200a0
 8007128:	400200b8 	.word	0x400200b8
 800712c:	40020410 	.word	0x40020410
 8007130:	40020428 	.word	0x40020428
 8007134:	40020440 	.word	0x40020440
 8007138:	40020458 	.word	0x40020458
 800713c:	40020470 	.word	0x40020470
 8007140:	40020488 	.word	0x40020488
 8007144:	400204a0 	.word	0x400204a0
 8007148:	400204b8 	.word	0x400204b8

0800714c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800715e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007164:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a7f      	ldr	r2, [pc, #508]	@ (8007368 <DMA_SetConfig+0x21c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d072      	beq.n	8007256 <DMA_SetConfig+0x10a>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a7d      	ldr	r2, [pc, #500]	@ (800736c <DMA_SetConfig+0x220>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d06d      	beq.n	8007256 <DMA_SetConfig+0x10a>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a7c      	ldr	r2, [pc, #496]	@ (8007370 <DMA_SetConfig+0x224>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d068      	beq.n	8007256 <DMA_SetConfig+0x10a>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a7a      	ldr	r2, [pc, #488]	@ (8007374 <DMA_SetConfig+0x228>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d063      	beq.n	8007256 <DMA_SetConfig+0x10a>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a79      	ldr	r2, [pc, #484]	@ (8007378 <DMA_SetConfig+0x22c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d05e      	beq.n	8007256 <DMA_SetConfig+0x10a>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a77      	ldr	r2, [pc, #476]	@ (800737c <DMA_SetConfig+0x230>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d059      	beq.n	8007256 <DMA_SetConfig+0x10a>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a76      	ldr	r2, [pc, #472]	@ (8007380 <DMA_SetConfig+0x234>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d054      	beq.n	8007256 <DMA_SetConfig+0x10a>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a74      	ldr	r2, [pc, #464]	@ (8007384 <DMA_SetConfig+0x238>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d04f      	beq.n	8007256 <DMA_SetConfig+0x10a>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a73      	ldr	r2, [pc, #460]	@ (8007388 <DMA_SetConfig+0x23c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d04a      	beq.n	8007256 <DMA_SetConfig+0x10a>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a71      	ldr	r2, [pc, #452]	@ (800738c <DMA_SetConfig+0x240>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d045      	beq.n	8007256 <DMA_SetConfig+0x10a>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a70      	ldr	r2, [pc, #448]	@ (8007390 <DMA_SetConfig+0x244>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d040      	beq.n	8007256 <DMA_SetConfig+0x10a>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a6e      	ldr	r2, [pc, #440]	@ (8007394 <DMA_SetConfig+0x248>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d03b      	beq.n	8007256 <DMA_SetConfig+0x10a>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a6d      	ldr	r2, [pc, #436]	@ (8007398 <DMA_SetConfig+0x24c>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d036      	beq.n	8007256 <DMA_SetConfig+0x10a>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a6b      	ldr	r2, [pc, #428]	@ (800739c <DMA_SetConfig+0x250>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d031      	beq.n	8007256 <DMA_SetConfig+0x10a>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a6a      	ldr	r2, [pc, #424]	@ (80073a0 <DMA_SetConfig+0x254>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d02c      	beq.n	8007256 <DMA_SetConfig+0x10a>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a68      	ldr	r2, [pc, #416]	@ (80073a4 <DMA_SetConfig+0x258>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d027      	beq.n	8007256 <DMA_SetConfig+0x10a>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a67      	ldr	r2, [pc, #412]	@ (80073a8 <DMA_SetConfig+0x25c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d022      	beq.n	8007256 <DMA_SetConfig+0x10a>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a65      	ldr	r2, [pc, #404]	@ (80073ac <DMA_SetConfig+0x260>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d01d      	beq.n	8007256 <DMA_SetConfig+0x10a>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a64      	ldr	r2, [pc, #400]	@ (80073b0 <DMA_SetConfig+0x264>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d018      	beq.n	8007256 <DMA_SetConfig+0x10a>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a62      	ldr	r2, [pc, #392]	@ (80073b4 <DMA_SetConfig+0x268>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d013      	beq.n	8007256 <DMA_SetConfig+0x10a>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a61      	ldr	r2, [pc, #388]	@ (80073b8 <DMA_SetConfig+0x26c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d00e      	beq.n	8007256 <DMA_SetConfig+0x10a>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a5f      	ldr	r2, [pc, #380]	@ (80073bc <DMA_SetConfig+0x270>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d009      	beq.n	8007256 <DMA_SetConfig+0x10a>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a5e      	ldr	r2, [pc, #376]	@ (80073c0 <DMA_SetConfig+0x274>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d004      	beq.n	8007256 <DMA_SetConfig+0x10a>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a5c      	ldr	r2, [pc, #368]	@ (80073c4 <DMA_SetConfig+0x278>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d101      	bne.n	800725a <DMA_SetConfig+0x10e>
 8007256:	2301      	movs	r3, #1
 8007258:	e000      	b.n	800725c <DMA_SetConfig+0x110>
 800725a:	2300      	movs	r3, #0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00d      	beq.n	800727c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007268:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800726e:	2b00      	cmp	r3, #0
 8007270:	d004      	beq.n	800727c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800727a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a39      	ldr	r2, [pc, #228]	@ (8007368 <DMA_SetConfig+0x21c>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d04a      	beq.n	800731c <DMA_SetConfig+0x1d0>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a38      	ldr	r2, [pc, #224]	@ (800736c <DMA_SetConfig+0x220>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d045      	beq.n	800731c <DMA_SetConfig+0x1d0>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a36      	ldr	r2, [pc, #216]	@ (8007370 <DMA_SetConfig+0x224>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d040      	beq.n	800731c <DMA_SetConfig+0x1d0>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a35      	ldr	r2, [pc, #212]	@ (8007374 <DMA_SetConfig+0x228>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d03b      	beq.n	800731c <DMA_SetConfig+0x1d0>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a33      	ldr	r2, [pc, #204]	@ (8007378 <DMA_SetConfig+0x22c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d036      	beq.n	800731c <DMA_SetConfig+0x1d0>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a32      	ldr	r2, [pc, #200]	@ (800737c <DMA_SetConfig+0x230>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d031      	beq.n	800731c <DMA_SetConfig+0x1d0>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a30      	ldr	r2, [pc, #192]	@ (8007380 <DMA_SetConfig+0x234>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d02c      	beq.n	800731c <DMA_SetConfig+0x1d0>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a2f      	ldr	r2, [pc, #188]	@ (8007384 <DMA_SetConfig+0x238>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d027      	beq.n	800731c <DMA_SetConfig+0x1d0>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a2d      	ldr	r2, [pc, #180]	@ (8007388 <DMA_SetConfig+0x23c>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d022      	beq.n	800731c <DMA_SetConfig+0x1d0>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a2c      	ldr	r2, [pc, #176]	@ (800738c <DMA_SetConfig+0x240>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d01d      	beq.n	800731c <DMA_SetConfig+0x1d0>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a2a      	ldr	r2, [pc, #168]	@ (8007390 <DMA_SetConfig+0x244>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d018      	beq.n	800731c <DMA_SetConfig+0x1d0>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a29      	ldr	r2, [pc, #164]	@ (8007394 <DMA_SetConfig+0x248>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d013      	beq.n	800731c <DMA_SetConfig+0x1d0>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a27      	ldr	r2, [pc, #156]	@ (8007398 <DMA_SetConfig+0x24c>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d00e      	beq.n	800731c <DMA_SetConfig+0x1d0>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a26      	ldr	r2, [pc, #152]	@ (800739c <DMA_SetConfig+0x250>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d009      	beq.n	800731c <DMA_SetConfig+0x1d0>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a24      	ldr	r2, [pc, #144]	@ (80073a0 <DMA_SetConfig+0x254>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d004      	beq.n	800731c <DMA_SetConfig+0x1d0>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a23      	ldr	r2, [pc, #140]	@ (80073a4 <DMA_SetConfig+0x258>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d101      	bne.n	8007320 <DMA_SetConfig+0x1d4>
 800731c:	2301      	movs	r3, #1
 800731e:	e000      	b.n	8007322 <DMA_SetConfig+0x1d6>
 8007320:	2300      	movs	r3, #0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d059      	beq.n	80073da <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800732a:	f003 031f 	and.w	r3, r3, #31
 800732e:	223f      	movs	r2, #63	@ 0x3f
 8007330:	409a      	lsls	r2, r3
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007344:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	2b40      	cmp	r3, #64	@ 0x40
 8007354:	d138      	bne.n	80073c8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007366:	e086      	b.n	8007476 <DMA_SetConfig+0x32a>
 8007368:	40020010 	.word	0x40020010
 800736c:	40020028 	.word	0x40020028
 8007370:	40020040 	.word	0x40020040
 8007374:	40020058 	.word	0x40020058
 8007378:	40020070 	.word	0x40020070
 800737c:	40020088 	.word	0x40020088
 8007380:	400200a0 	.word	0x400200a0
 8007384:	400200b8 	.word	0x400200b8
 8007388:	40020410 	.word	0x40020410
 800738c:	40020428 	.word	0x40020428
 8007390:	40020440 	.word	0x40020440
 8007394:	40020458 	.word	0x40020458
 8007398:	40020470 	.word	0x40020470
 800739c:	40020488 	.word	0x40020488
 80073a0:	400204a0 	.word	0x400204a0
 80073a4:	400204b8 	.word	0x400204b8
 80073a8:	58025408 	.word	0x58025408
 80073ac:	5802541c 	.word	0x5802541c
 80073b0:	58025430 	.word	0x58025430
 80073b4:	58025444 	.word	0x58025444
 80073b8:	58025458 	.word	0x58025458
 80073bc:	5802546c 	.word	0x5802546c
 80073c0:	58025480 	.word	0x58025480
 80073c4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	60da      	str	r2, [r3, #12]
}
 80073d8:	e04d      	b.n	8007476 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a29      	ldr	r2, [pc, #164]	@ (8007484 <DMA_SetConfig+0x338>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d022      	beq.n	800742a <DMA_SetConfig+0x2de>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a27      	ldr	r2, [pc, #156]	@ (8007488 <DMA_SetConfig+0x33c>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d01d      	beq.n	800742a <DMA_SetConfig+0x2de>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a26      	ldr	r2, [pc, #152]	@ (800748c <DMA_SetConfig+0x340>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d018      	beq.n	800742a <DMA_SetConfig+0x2de>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a24      	ldr	r2, [pc, #144]	@ (8007490 <DMA_SetConfig+0x344>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d013      	beq.n	800742a <DMA_SetConfig+0x2de>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a23      	ldr	r2, [pc, #140]	@ (8007494 <DMA_SetConfig+0x348>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d00e      	beq.n	800742a <DMA_SetConfig+0x2de>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a21      	ldr	r2, [pc, #132]	@ (8007498 <DMA_SetConfig+0x34c>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d009      	beq.n	800742a <DMA_SetConfig+0x2de>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a20      	ldr	r2, [pc, #128]	@ (800749c <DMA_SetConfig+0x350>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d004      	beq.n	800742a <DMA_SetConfig+0x2de>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a1e      	ldr	r2, [pc, #120]	@ (80074a0 <DMA_SetConfig+0x354>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d101      	bne.n	800742e <DMA_SetConfig+0x2e2>
 800742a:	2301      	movs	r3, #1
 800742c:	e000      	b.n	8007430 <DMA_SetConfig+0x2e4>
 800742e:	2300      	movs	r3, #0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d020      	beq.n	8007476 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007438:	f003 031f 	and.w	r3, r3, #31
 800743c:	2201      	movs	r2, #1
 800743e:	409a      	lsls	r2, r3
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	2b40      	cmp	r3, #64	@ 0x40
 8007452:	d108      	bne.n	8007466 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	60da      	str	r2, [r3, #12]
}
 8007464:	e007      	b.n	8007476 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	60da      	str	r2, [r3, #12]
}
 8007476:	bf00      	nop
 8007478:	371c      	adds	r7, #28
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	58025408 	.word	0x58025408
 8007488:	5802541c 	.word	0x5802541c
 800748c:	58025430 	.word	0x58025430
 8007490:	58025444 	.word	0x58025444
 8007494:	58025458 	.word	0x58025458
 8007498:	5802546c 	.word	0x5802546c
 800749c:	58025480 	.word	0x58025480
 80074a0:	58025494 	.word	0x58025494

080074a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a42      	ldr	r2, [pc, #264]	@ (80075bc <DMA_CalcBaseAndBitshift+0x118>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d04a      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a41      	ldr	r2, [pc, #260]	@ (80075c0 <DMA_CalcBaseAndBitshift+0x11c>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d045      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a3f      	ldr	r2, [pc, #252]	@ (80075c4 <DMA_CalcBaseAndBitshift+0x120>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d040      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a3e      	ldr	r2, [pc, #248]	@ (80075c8 <DMA_CalcBaseAndBitshift+0x124>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d03b      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a3c      	ldr	r2, [pc, #240]	@ (80075cc <DMA_CalcBaseAndBitshift+0x128>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d036      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a3b      	ldr	r2, [pc, #236]	@ (80075d0 <DMA_CalcBaseAndBitshift+0x12c>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d031      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a39      	ldr	r2, [pc, #228]	@ (80075d4 <DMA_CalcBaseAndBitshift+0x130>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d02c      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a38      	ldr	r2, [pc, #224]	@ (80075d8 <DMA_CalcBaseAndBitshift+0x134>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d027      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a36      	ldr	r2, [pc, #216]	@ (80075dc <DMA_CalcBaseAndBitshift+0x138>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d022      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a35      	ldr	r2, [pc, #212]	@ (80075e0 <DMA_CalcBaseAndBitshift+0x13c>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d01d      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a33      	ldr	r2, [pc, #204]	@ (80075e4 <DMA_CalcBaseAndBitshift+0x140>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d018      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a32      	ldr	r2, [pc, #200]	@ (80075e8 <DMA_CalcBaseAndBitshift+0x144>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d013      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a30      	ldr	r2, [pc, #192]	@ (80075ec <DMA_CalcBaseAndBitshift+0x148>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00e      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a2f      	ldr	r2, [pc, #188]	@ (80075f0 <DMA_CalcBaseAndBitshift+0x14c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d009      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a2d      	ldr	r2, [pc, #180]	@ (80075f4 <DMA_CalcBaseAndBitshift+0x150>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d004      	beq.n	800754c <DMA_CalcBaseAndBitshift+0xa8>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a2c      	ldr	r2, [pc, #176]	@ (80075f8 <DMA_CalcBaseAndBitshift+0x154>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d101      	bne.n	8007550 <DMA_CalcBaseAndBitshift+0xac>
 800754c:	2301      	movs	r3, #1
 800754e:	e000      	b.n	8007552 <DMA_CalcBaseAndBitshift+0xae>
 8007550:	2300      	movs	r3, #0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d024      	beq.n	80075a0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	b2db      	uxtb	r3, r3
 800755c:	3b10      	subs	r3, #16
 800755e:	4a27      	ldr	r2, [pc, #156]	@ (80075fc <DMA_CalcBaseAndBitshift+0x158>)
 8007560:	fba2 2303 	umull	r2, r3, r2, r3
 8007564:	091b      	lsrs	r3, r3, #4
 8007566:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f003 0307 	and.w	r3, r3, #7
 800756e:	4a24      	ldr	r2, [pc, #144]	@ (8007600 <DMA_CalcBaseAndBitshift+0x15c>)
 8007570:	5cd3      	ldrb	r3, [r2, r3]
 8007572:	461a      	mov	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2b03      	cmp	r3, #3
 800757c:	d908      	bls.n	8007590 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	461a      	mov	r2, r3
 8007584:	4b1f      	ldr	r3, [pc, #124]	@ (8007604 <DMA_CalcBaseAndBitshift+0x160>)
 8007586:	4013      	ands	r3, r2
 8007588:	1d1a      	adds	r2, r3, #4
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	659a      	str	r2, [r3, #88]	@ 0x58
 800758e:	e00d      	b.n	80075ac <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	461a      	mov	r2, r3
 8007596:	4b1b      	ldr	r3, [pc, #108]	@ (8007604 <DMA_CalcBaseAndBitshift+0x160>)
 8007598:	4013      	ands	r3, r2
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	6593      	str	r3, [r2, #88]	@ 0x58
 800759e:	e005      	b.n	80075ac <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr
 80075bc:	40020010 	.word	0x40020010
 80075c0:	40020028 	.word	0x40020028
 80075c4:	40020040 	.word	0x40020040
 80075c8:	40020058 	.word	0x40020058
 80075cc:	40020070 	.word	0x40020070
 80075d0:	40020088 	.word	0x40020088
 80075d4:	400200a0 	.word	0x400200a0
 80075d8:	400200b8 	.word	0x400200b8
 80075dc:	40020410 	.word	0x40020410
 80075e0:	40020428 	.word	0x40020428
 80075e4:	40020440 	.word	0x40020440
 80075e8:	40020458 	.word	0x40020458
 80075ec:	40020470 	.word	0x40020470
 80075f0:	40020488 	.word	0x40020488
 80075f4:	400204a0 	.word	0x400204a0
 80075f8:	400204b8 	.word	0x400204b8
 80075fc:	aaaaaaab 	.word	0xaaaaaaab
 8007600:	0800fc08 	.word	0x0800fc08
 8007604:	fffffc00 	.word	0xfffffc00

08007608 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d120      	bne.n	800765e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007620:	2b03      	cmp	r3, #3
 8007622:	d858      	bhi.n	80076d6 <DMA_CheckFifoParam+0xce>
 8007624:	a201      	add	r2, pc, #4	@ (adr r2, 800762c <DMA_CheckFifoParam+0x24>)
 8007626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762a:	bf00      	nop
 800762c:	0800763d 	.word	0x0800763d
 8007630:	0800764f 	.word	0x0800764f
 8007634:	0800763d 	.word	0x0800763d
 8007638:	080076d7 	.word	0x080076d7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007640:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d048      	beq.n	80076da <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800764c:	e045      	b.n	80076da <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007652:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007656:	d142      	bne.n	80076de <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800765c:	e03f      	b.n	80076de <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007666:	d123      	bne.n	80076b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766c:	2b03      	cmp	r3, #3
 800766e:	d838      	bhi.n	80076e2 <DMA_CheckFifoParam+0xda>
 8007670:	a201      	add	r2, pc, #4	@ (adr r2, 8007678 <DMA_CheckFifoParam+0x70>)
 8007672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007676:	bf00      	nop
 8007678:	08007689 	.word	0x08007689
 800767c:	0800768f 	.word	0x0800768f
 8007680:	08007689 	.word	0x08007689
 8007684:	080076a1 	.word	0x080076a1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	73fb      	strb	r3, [r7, #15]
        break;
 800768c:	e030      	b.n	80076f0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007692:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d025      	beq.n	80076e6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800769e:	e022      	b.n	80076e6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80076a8:	d11f      	bne.n	80076ea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076ae:	e01c      	b.n	80076ea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d902      	bls.n	80076be <DMA_CheckFifoParam+0xb6>
 80076b8:	2b03      	cmp	r3, #3
 80076ba:	d003      	beq.n	80076c4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80076bc:	e018      	b.n	80076f0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	73fb      	strb	r3, [r7, #15]
        break;
 80076c2:	e015      	b.n	80076f0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00e      	beq.n	80076ee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	73fb      	strb	r3, [r7, #15]
    break;
 80076d4:	e00b      	b.n	80076ee <DMA_CheckFifoParam+0xe6>
        break;
 80076d6:	bf00      	nop
 80076d8:	e00a      	b.n	80076f0 <DMA_CheckFifoParam+0xe8>
        break;
 80076da:	bf00      	nop
 80076dc:	e008      	b.n	80076f0 <DMA_CheckFifoParam+0xe8>
        break;
 80076de:	bf00      	nop
 80076e0:	e006      	b.n	80076f0 <DMA_CheckFifoParam+0xe8>
        break;
 80076e2:	bf00      	nop
 80076e4:	e004      	b.n	80076f0 <DMA_CheckFifoParam+0xe8>
        break;
 80076e6:	bf00      	nop
 80076e8:	e002      	b.n	80076f0 <DMA_CheckFifoParam+0xe8>
        break;
 80076ea:	bf00      	nop
 80076ec:	e000      	b.n	80076f0 <DMA_CheckFifoParam+0xe8>
    break;
 80076ee:	bf00      	nop
    }
  }

  return status;
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3714      	adds	r7, #20
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop

08007700 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a38      	ldr	r2, [pc, #224]	@ (80077f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d022      	beq.n	800775e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a36      	ldr	r2, [pc, #216]	@ (80077f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d01d      	beq.n	800775e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a35      	ldr	r2, [pc, #212]	@ (80077fc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d018      	beq.n	800775e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a33      	ldr	r2, [pc, #204]	@ (8007800 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d013      	beq.n	800775e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a32      	ldr	r2, [pc, #200]	@ (8007804 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d00e      	beq.n	800775e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a30      	ldr	r2, [pc, #192]	@ (8007808 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d009      	beq.n	800775e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a2f      	ldr	r2, [pc, #188]	@ (800780c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d004      	beq.n	800775e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a2d      	ldr	r2, [pc, #180]	@ (8007810 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d101      	bne.n	8007762 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800775e:	2301      	movs	r3, #1
 8007760:	e000      	b.n	8007764 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007762:	2300      	movs	r3, #0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d01a      	beq.n	800779e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	b2db      	uxtb	r3, r3
 800776e:	3b08      	subs	r3, #8
 8007770:	4a28      	ldr	r2, [pc, #160]	@ (8007814 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007772:	fba2 2303 	umull	r2, r3, r2, r3
 8007776:	091b      	lsrs	r3, r3, #4
 8007778:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	4b26      	ldr	r3, [pc, #152]	@ (8007818 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800777e:	4413      	add	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	461a      	mov	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a24      	ldr	r2, [pc, #144]	@ (800781c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800778c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f003 031f 	and.w	r3, r3, #31
 8007794:	2201      	movs	r2, #1
 8007796:	409a      	lsls	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800779c:	e024      	b.n	80077e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	3b10      	subs	r3, #16
 80077a6:	4a1e      	ldr	r2, [pc, #120]	@ (8007820 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80077a8:	fba2 2303 	umull	r2, r3, r2, r3
 80077ac:	091b      	lsrs	r3, r3, #4
 80077ae:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	4a1c      	ldr	r2, [pc, #112]	@ (8007824 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d806      	bhi.n	80077c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	4a1b      	ldr	r2, [pc, #108]	@ (8007828 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d902      	bls.n	80077c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	3308      	adds	r3, #8
 80077c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	4b18      	ldr	r3, [pc, #96]	@ (800782c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80077ca:	4413      	add	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	461a      	mov	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a16      	ldr	r2, [pc, #88]	@ (8007830 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80077d8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f003 031f 	and.w	r3, r3, #31
 80077e0:	2201      	movs	r2, #1
 80077e2:	409a      	lsls	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80077e8:	bf00      	nop
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr
 80077f4:	58025408 	.word	0x58025408
 80077f8:	5802541c 	.word	0x5802541c
 80077fc:	58025430 	.word	0x58025430
 8007800:	58025444 	.word	0x58025444
 8007804:	58025458 	.word	0x58025458
 8007808:	5802546c 	.word	0x5802546c
 800780c:	58025480 	.word	0x58025480
 8007810:	58025494 	.word	0x58025494
 8007814:	cccccccd 	.word	0xcccccccd
 8007818:	16009600 	.word	0x16009600
 800781c:	58025880 	.word	0x58025880
 8007820:	aaaaaaab 	.word	0xaaaaaaab
 8007824:	400204b8 	.word	0x400204b8
 8007828:	4002040f 	.word	0x4002040f
 800782c:	10008200 	.word	0x10008200
 8007830:	40020880 	.word	0x40020880

08007834 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	b2db      	uxtb	r3, r3
 8007842:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d04a      	beq.n	80078e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2b08      	cmp	r3, #8
 800784e:	d847      	bhi.n	80078e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a25      	ldr	r2, [pc, #148]	@ (80078ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d022      	beq.n	80078a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a24      	ldr	r2, [pc, #144]	@ (80078f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d01d      	beq.n	80078a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a22      	ldr	r2, [pc, #136]	@ (80078f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d018      	beq.n	80078a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a21      	ldr	r2, [pc, #132]	@ (80078f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d013      	beq.n	80078a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a1f      	ldr	r2, [pc, #124]	@ (80078fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d00e      	beq.n	80078a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a1e      	ldr	r2, [pc, #120]	@ (8007900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d009      	beq.n	80078a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a1c      	ldr	r2, [pc, #112]	@ (8007904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d004      	beq.n	80078a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a1b      	ldr	r2, [pc, #108]	@ (8007908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d101      	bne.n	80078a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80078a0:	2301      	movs	r3, #1
 80078a2:	e000      	b.n	80078a6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80078a4:	2300      	movs	r3, #0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	4b17      	ldr	r3, [pc, #92]	@ (800790c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80078ae:	4413      	add	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	461a      	mov	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a15      	ldr	r2, [pc, #84]	@ (8007910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80078bc:	671a      	str	r2, [r3, #112]	@ 0x70
 80078be:	e009      	b.n	80078d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	4b14      	ldr	r3, [pc, #80]	@ (8007914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80078c4:	4413      	add	r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	461a      	mov	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a11      	ldr	r2, [pc, #68]	@ (8007918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80078d2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	3b01      	subs	r3, #1
 80078d8:	2201      	movs	r2, #1
 80078da:	409a      	lsls	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80078e0:	bf00      	nop
 80078e2:	3714      	adds	r7, #20
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	58025408 	.word	0x58025408
 80078f0:	5802541c 	.word	0x5802541c
 80078f4:	58025430 	.word	0x58025430
 80078f8:	58025444 	.word	0x58025444
 80078fc:	58025458 	.word	0x58025458
 8007900:	5802546c 	.word	0x5802546c
 8007904:	58025480 	.word	0x58025480
 8007908:	58025494 	.word	0x58025494
 800790c:	1600963f 	.word	0x1600963f
 8007910:	58025940 	.word	0x58025940
 8007914:	1000823f 	.word	0x1000823f
 8007918:	40020940 	.word	0x40020940

0800791c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800791c:	b480      	push	{r7}
 800791e:	b089      	sub	sp, #36	@ 0x24
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007926:	2300      	movs	r3, #0
 8007928:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800792a:	4b86      	ldr	r3, [pc, #536]	@ (8007b44 <HAL_GPIO_Init+0x228>)
 800792c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800792e:	e18c      	b.n	8007c4a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	2101      	movs	r1, #1
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	fa01 f303 	lsl.w	r3, r1, r3
 800793c:	4013      	ands	r3, r2
 800793e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 817e 	beq.w	8007c44 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f003 0303 	and.w	r3, r3, #3
 8007950:	2b01      	cmp	r3, #1
 8007952:	d005      	beq.n	8007960 <HAL_GPIO_Init+0x44>
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f003 0303 	and.w	r3, r3, #3
 800795c:	2b02      	cmp	r3, #2
 800795e:	d130      	bne.n	80079c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	2203      	movs	r2, #3
 800796c:	fa02 f303 	lsl.w	r3, r2, r3
 8007970:	43db      	mvns	r3, r3
 8007972:	69ba      	ldr	r2, [r7, #24]
 8007974:	4013      	ands	r3, r2
 8007976:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	68da      	ldr	r2, [r3, #12]
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	005b      	lsls	r3, r3, #1
 8007980:	fa02 f303 	lsl.w	r3, r2, r3
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	4313      	orrs	r3, r2
 8007988:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	69ba      	ldr	r2, [r7, #24]
 800798e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007996:	2201      	movs	r2, #1
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	fa02 f303 	lsl.w	r3, r2, r3
 800799e:	43db      	mvns	r3, r3
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	4013      	ands	r3, r2
 80079a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	091b      	lsrs	r3, r3, #4
 80079ac:	f003 0201 	and.w	r2, r3, #1
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	fa02 f303 	lsl.w	r3, r2, r3
 80079b6:	69ba      	ldr	r2, [r7, #24]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	69ba      	ldr	r2, [r7, #24]
 80079c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f003 0303 	and.w	r3, r3, #3
 80079ca:	2b03      	cmp	r3, #3
 80079cc:	d017      	beq.n	80079fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	2203      	movs	r2, #3
 80079da:	fa02 f303 	lsl.w	r3, r2, r3
 80079de:	43db      	mvns	r3, r3
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	4013      	ands	r3, r2
 80079e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	689a      	ldr	r2, [r3, #8]
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	005b      	lsls	r3, r3, #1
 80079ee:	fa02 f303 	lsl.w	r3, r2, r3
 80079f2:	69ba      	ldr	r2, [r7, #24]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	69ba      	ldr	r2, [r7, #24]
 80079fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f003 0303 	and.w	r3, r3, #3
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d123      	bne.n	8007a52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	08da      	lsrs	r2, r3, #3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	3208      	adds	r2, #8
 8007a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	f003 0307 	and.w	r3, r3, #7
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	220f      	movs	r2, #15
 8007a22:	fa02 f303 	lsl.w	r3, r2, r3
 8007a26:	43db      	mvns	r3, r3
 8007a28:	69ba      	ldr	r2, [r7, #24]
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	691a      	ldr	r2, [r3, #16]
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	f003 0307 	and.w	r3, r3, #7
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	08da      	lsrs	r2, r3, #3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3208      	adds	r2, #8
 8007a4c:	69b9      	ldr	r1, [r7, #24]
 8007a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	005b      	lsls	r3, r3, #1
 8007a5c:	2203      	movs	r2, #3
 8007a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a62:	43db      	mvns	r3, r3
 8007a64:	69ba      	ldr	r2, [r7, #24]
 8007a66:	4013      	ands	r3, r2
 8007a68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f003 0203 	and.w	r2, r3, #3
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	005b      	lsls	r3, r3, #1
 8007a76:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7a:	69ba      	ldr	r2, [r7, #24]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f000 80d8 	beq.w	8007c44 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a94:	4b2c      	ldr	r3, [pc, #176]	@ (8007b48 <HAL_GPIO_Init+0x22c>)
 8007a96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a9a:	4a2b      	ldr	r2, [pc, #172]	@ (8007b48 <HAL_GPIO_Init+0x22c>)
 8007a9c:	f043 0302 	orr.w	r3, r3, #2
 8007aa0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007aa4:	4b28      	ldr	r3, [pc, #160]	@ (8007b48 <HAL_GPIO_Init+0x22c>)
 8007aa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007aaa:	f003 0302 	and.w	r3, r3, #2
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ab2:	4a26      	ldr	r2, [pc, #152]	@ (8007b4c <HAL_GPIO_Init+0x230>)
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	089b      	lsrs	r3, r3, #2
 8007ab8:	3302      	adds	r3, #2
 8007aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	f003 0303 	and.w	r3, r3, #3
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	220f      	movs	r2, #15
 8007aca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ace:	43db      	mvns	r3, r3
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b50 <HAL_GPIO_Init+0x234>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d04a      	beq.n	8007b74 <HAL_GPIO_Init+0x258>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a1c      	ldr	r2, [pc, #112]	@ (8007b54 <HAL_GPIO_Init+0x238>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d02b      	beq.n	8007b3e <HAL_GPIO_Init+0x222>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8007b58 <HAL_GPIO_Init+0x23c>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d025      	beq.n	8007b3a <HAL_GPIO_Init+0x21e>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a1a      	ldr	r2, [pc, #104]	@ (8007b5c <HAL_GPIO_Init+0x240>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d01f      	beq.n	8007b36 <HAL_GPIO_Init+0x21a>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a19      	ldr	r2, [pc, #100]	@ (8007b60 <HAL_GPIO_Init+0x244>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d019      	beq.n	8007b32 <HAL_GPIO_Init+0x216>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a18      	ldr	r2, [pc, #96]	@ (8007b64 <HAL_GPIO_Init+0x248>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d013      	beq.n	8007b2e <HAL_GPIO_Init+0x212>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a17      	ldr	r2, [pc, #92]	@ (8007b68 <HAL_GPIO_Init+0x24c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d00d      	beq.n	8007b2a <HAL_GPIO_Init+0x20e>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a16      	ldr	r2, [pc, #88]	@ (8007b6c <HAL_GPIO_Init+0x250>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d007      	beq.n	8007b26 <HAL_GPIO_Init+0x20a>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a15      	ldr	r2, [pc, #84]	@ (8007b70 <HAL_GPIO_Init+0x254>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d101      	bne.n	8007b22 <HAL_GPIO_Init+0x206>
 8007b1e:	2309      	movs	r3, #9
 8007b20:	e029      	b.n	8007b76 <HAL_GPIO_Init+0x25a>
 8007b22:	230a      	movs	r3, #10
 8007b24:	e027      	b.n	8007b76 <HAL_GPIO_Init+0x25a>
 8007b26:	2307      	movs	r3, #7
 8007b28:	e025      	b.n	8007b76 <HAL_GPIO_Init+0x25a>
 8007b2a:	2306      	movs	r3, #6
 8007b2c:	e023      	b.n	8007b76 <HAL_GPIO_Init+0x25a>
 8007b2e:	2305      	movs	r3, #5
 8007b30:	e021      	b.n	8007b76 <HAL_GPIO_Init+0x25a>
 8007b32:	2304      	movs	r3, #4
 8007b34:	e01f      	b.n	8007b76 <HAL_GPIO_Init+0x25a>
 8007b36:	2303      	movs	r3, #3
 8007b38:	e01d      	b.n	8007b76 <HAL_GPIO_Init+0x25a>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e01b      	b.n	8007b76 <HAL_GPIO_Init+0x25a>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e019      	b.n	8007b76 <HAL_GPIO_Init+0x25a>
 8007b42:	bf00      	nop
 8007b44:	58000080 	.word	0x58000080
 8007b48:	58024400 	.word	0x58024400
 8007b4c:	58000400 	.word	0x58000400
 8007b50:	58020000 	.word	0x58020000
 8007b54:	58020400 	.word	0x58020400
 8007b58:	58020800 	.word	0x58020800
 8007b5c:	58020c00 	.word	0x58020c00
 8007b60:	58021000 	.word	0x58021000
 8007b64:	58021400 	.word	0x58021400
 8007b68:	58021800 	.word	0x58021800
 8007b6c:	58021c00 	.word	0x58021c00
 8007b70:	58022400 	.word	0x58022400
 8007b74:	2300      	movs	r3, #0
 8007b76:	69fa      	ldr	r2, [r7, #28]
 8007b78:	f002 0203 	and.w	r2, r2, #3
 8007b7c:	0092      	lsls	r2, r2, #2
 8007b7e:	4093      	lsls	r3, r2
 8007b80:	69ba      	ldr	r2, [r7, #24]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b86:	4938      	ldr	r1, [pc, #224]	@ (8007c68 <HAL_GPIO_Init+0x34c>)
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	089b      	lsrs	r3, r3, #2
 8007b8c:	3302      	adds	r3, #2
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007b94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	43db      	mvns	r3, r3
 8007ba0:	69ba      	ldr	r2, [r7, #24]
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007bb2:	69ba      	ldr	r2, [r7, #24]
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007bba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007bc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	43db      	mvns	r3, r3
 8007bce:	69ba      	ldr	r2, [r7, #24]
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d003      	beq.n	8007be8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007be0:	69ba      	ldr	r2, [r7, #24]
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007be8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	43db      	mvns	r3, r3
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d003      	beq.n	8007c14 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	43db      	mvns	r3, r3
 8007c24:	69ba      	ldr	r2, [r7, #24]
 8007c26:	4013      	ands	r3, r2
 8007c28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	69ba      	ldr	r2, [r7, #24]
 8007c42:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	3301      	adds	r3, #1
 8007c48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	fa22 f303 	lsr.w	r3, r2, r3
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f47f ae6b 	bne.w	8007930 <HAL_GPIO_Init+0x14>
  }
}
 8007c5a:	bf00      	nop
 8007c5c:	bf00      	nop
 8007c5e:	3724      	adds	r7, #36	@ 0x24
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr
 8007c68:	58000400 	.word	0x58000400

08007c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	807b      	strh	r3, [r7, #2]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c7c:	787b      	ldrb	r3, [r7, #1]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d003      	beq.n	8007c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c82:	887a      	ldrh	r2, [r7, #2]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007c88:	e003      	b.n	8007c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007c8a:	887b      	ldrh	r3, [r7, #2]
 8007c8c:	041a      	lsls	r2, r3, #16
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	619a      	str	r2, [r3, #24]
}
 8007c92:	bf00      	nop
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b085      	sub	sp, #20
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007cb0:	887a      	ldrh	r2, [r7, #2]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	041a      	lsls	r2, r3, #16
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	43d9      	mvns	r1, r3
 8007cbc:	887b      	ldrh	r3, [r7, #2]
 8007cbe:	400b      	ands	r3, r1
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	619a      	str	r2, [r3, #24]
}
 8007cc6:	bf00      	nop
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b082      	sub	sp, #8
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	4603      	mov	r3, r0
 8007cda:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007cdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ce0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007ce4:	88fb      	ldrh	r3, [r7, #6]
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d008      	beq.n	8007cfe <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007cec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007cf0:	88fb      	ldrh	r3, [r7, #6]
 8007cf2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007cf6:	88fb      	ldrh	r3, [r7, #6]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7f9 f869 	bl	8000dd0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007cfe:	bf00      	nop
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
	...

08007d08 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007d10:	4b19      	ldr	r3, [pc, #100]	@ (8007d78 <HAL_PWREx_ConfigSupply+0x70>)
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	f003 0304 	and.w	r3, r3, #4
 8007d18:	2b04      	cmp	r3, #4
 8007d1a:	d00a      	beq.n	8007d32 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007d1c:	4b16      	ldr	r3, [pc, #88]	@ (8007d78 <HAL_PWREx_ConfigSupply+0x70>)
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	f003 0307 	and.w	r3, r3, #7
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d001      	beq.n	8007d2e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e01f      	b.n	8007d6e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	e01d      	b.n	8007d6e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007d32:	4b11      	ldr	r3, [pc, #68]	@ (8007d78 <HAL_PWREx_ConfigSupply+0x70>)
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	f023 0207 	bic.w	r2, r3, #7
 8007d3a:	490f      	ldr	r1, [pc, #60]	@ (8007d78 <HAL_PWREx_ConfigSupply+0x70>)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007d42:	f7fa fdb5 	bl	80028b0 <HAL_GetTick>
 8007d46:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d48:	e009      	b.n	8007d5e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007d4a:	f7fa fdb1 	bl	80028b0 <HAL_GetTick>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d58:	d901      	bls.n	8007d5e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e007      	b.n	8007d6e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d5e:	4b06      	ldr	r3, [pc, #24]	@ (8007d78 <HAL_PWREx_ConfigSupply+0x70>)
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d6a:	d1ee      	bne.n	8007d4a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	58024800 	.word	0x58024800

08007d7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b08c      	sub	sp, #48	@ 0x30
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e3c8      	b.n	8008520 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 8087 	beq.w	8007eaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d9c:	4b88      	ldr	r3, [pc, #544]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007da6:	4b86      	ldr	r3, [pc, #536]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007daa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dae:	2b10      	cmp	r3, #16
 8007db0:	d007      	beq.n	8007dc2 <HAL_RCC_OscConfig+0x46>
 8007db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007db4:	2b18      	cmp	r3, #24
 8007db6:	d110      	bne.n	8007dda <HAL_RCC_OscConfig+0x5e>
 8007db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dba:	f003 0303 	and.w	r3, r3, #3
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d10b      	bne.n	8007dda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dc2:	4b7f      	ldr	r3, [pc, #508]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d06c      	beq.n	8007ea8 <HAL_RCC_OscConfig+0x12c>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d168      	bne.n	8007ea8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e3a2      	b.n	8008520 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007de2:	d106      	bne.n	8007df2 <HAL_RCC_OscConfig+0x76>
 8007de4:	4b76      	ldr	r3, [pc, #472]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a75      	ldr	r2, [pc, #468]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007dee:	6013      	str	r3, [r2, #0]
 8007df0:	e02e      	b.n	8007e50 <HAL_RCC_OscConfig+0xd4>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10c      	bne.n	8007e14 <HAL_RCC_OscConfig+0x98>
 8007dfa:	4b71      	ldr	r3, [pc, #452]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a70      	ldr	r2, [pc, #448]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007e00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e04:	6013      	str	r3, [r2, #0]
 8007e06:	4b6e      	ldr	r3, [pc, #440]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a6d      	ldr	r2, [pc, #436]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007e0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e10:	6013      	str	r3, [r2, #0]
 8007e12:	e01d      	b.n	8007e50 <HAL_RCC_OscConfig+0xd4>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e1c:	d10c      	bne.n	8007e38 <HAL_RCC_OscConfig+0xbc>
 8007e1e:	4b68      	ldr	r3, [pc, #416]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a67      	ldr	r2, [pc, #412]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007e28:	6013      	str	r3, [r2, #0]
 8007e2a:	4b65      	ldr	r3, [pc, #404]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a64      	ldr	r2, [pc, #400]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e34:	6013      	str	r3, [r2, #0]
 8007e36:	e00b      	b.n	8007e50 <HAL_RCC_OscConfig+0xd4>
 8007e38:	4b61      	ldr	r3, [pc, #388]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a60      	ldr	r2, [pc, #384]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e42:	6013      	str	r3, [r2, #0]
 8007e44:	4b5e      	ldr	r3, [pc, #376]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a5d      	ldr	r2, [pc, #372]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d013      	beq.n	8007e80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e58:	f7fa fd2a 	bl	80028b0 <HAL_GetTick>
 8007e5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e5e:	e008      	b.n	8007e72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e60:	f7fa fd26 	bl	80028b0 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	2b64      	cmp	r3, #100	@ 0x64
 8007e6c:	d901      	bls.n	8007e72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e356      	b.n	8008520 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e72:	4b53      	ldr	r3, [pc, #332]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d0f0      	beq.n	8007e60 <HAL_RCC_OscConfig+0xe4>
 8007e7e:	e014      	b.n	8007eaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e80:	f7fa fd16 	bl	80028b0 <HAL_GetTick>
 8007e84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007e86:	e008      	b.n	8007e9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e88:	f7fa fd12 	bl	80028b0 <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	2b64      	cmp	r3, #100	@ 0x64
 8007e94:	d901      	bls.n	8007e9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e342      	b.n	8008520 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007e9a:	4b49      	ldr	r3, [pc, #292]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1f0      	bne.n	8007e88 <HAL_RCC_OscConfig+0x10c>
 8007ea6:	e000      	b.n	8007eaa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 0302 	and.w	r3, r3, #2
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f000 808c 	beq.w	8007fd0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007eb8:	4b41      	ldr	r3, [pc, #260]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ec0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ec2:	4b3f      	ldr	r3, [pc, #252]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d007      	beq.n	8007ede <HAL_RCC_OscConfig+0x162>
 8007ece:	6a3b      	ldr	r3, [r7, #32]
 8007ed0:	2b18      	cmp	r3, #24
 8007ed2:	d137      	bne.n	8007f44 <HAL_RCC_OscConfig+0x1c8>
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	f003 0303 	and.w	r3, r3, #3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d132      	bne.n	8007f44 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ede:	4b38      	ldr	r3, [pc, #224]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0304 	and.w	r3, r3, #4
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d005      	beq.n	8007ef6 <HAL_RCC_OscConfig+0x17a>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e314      	b.n	8008520 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007ef6:	4b32      	ldr	r3, [pc, #200]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f023 0219 	bic.w	r2, r3, #25
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	492f      	ldr	r1, [pc, #188]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007f04:	4313      	orrs	r3, r2
 8007f06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f08:	f7fa fcd2 	bl	80028b0 <HAL_GetTick>
 8007f0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f0e:	e008      	b.n	8007f22 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f10:	f7fa fcce 	bl	80028b0 <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d901      	bls.n	8007f22 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e2fe      	b.n	8008520 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f22:	4b27      	ldr	r3, [pc, #156]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 0304 	and.w	r3, r3, #4
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d0f0      	beq.n	8007f10 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f2e:	4b24      	ldr	r3, [pc, #144]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	061b      	lsls	r3, r3, #24
 8007f3c:	4920      	ldr	r1, [pc, #128]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f42:	e045      	b.n	8007fd0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d026      	beq.n	8007f9a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f023 0219 	bic.w	r2, r3, #25
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	4919      	ldr	r1, [pc, #100]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f5e:	f7fa fca7 	bl	80028b0 <HAL_GetTick>
 8007f62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f64:	e008      	b.n	8007f78 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f66:	f7fa fca3 	bl	80028b0 <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d901      	bls.n	8007f78 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e2d3      	b.n	8008520 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f78:	4b11      	ldr	r3, [pc, #68]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0304 	and.w	r3, r3, #4
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d0f0      	beq.n	8007f66 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f84:	4b0e      	ldr	r3, [pc, #56]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	061b      	lsls	r3, r3, #24
 8007f92:	490b      	ldr	r1, [pc, #44]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	604b      	str	r3, [r1, #4]
 8007f98:	e01a      	b.n	8007fd0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f9a:	4b09      	ldr	r3, [pc, #36]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a08      	ldr	r2, [pc, #32]	@ (8007fc0 <HAL_RCC_OscConfig+0x244>)
 8007fa0:	f023 0301 	bic.w	r3, r3, #1
 8007fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fa6:	f7fa fc83 	bl	80028b0 <HAL_GetTick>
 8007faa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007fac:	e00a      	b.n	8007fc4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fae:	f7fa fc7f 	bl	80028b0 <HAL_GetTick>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d903      	bls.n	8007fc4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e2af      	b.n	8008520 <HAL_RCC_OscConfig+0x7a4>
 8007fc0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007fc4:	4b96      	ldr	r3, [pc, #600]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0304 	and.w	r3, r3, #4
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1ee      	bne.n	8007fae <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0310 	and.w	r3, r3, #16
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d06a      	beq.n	80080b2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fdc:	4b90      	ldr	r3, [pc, #576]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007fe4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007fe6:	4b8e      	ldr	r3, [pc, #568]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 8007fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fea:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	2b08      	cmp	r3, #8
 8007ff0:	d007      	beq.n	8008002 <HAL_RCC_OscConfig+0x286>
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	2b18      	cmp	r3, #24
 8007ff6:	d11b      	bne.n	8008030 <HAL_RCC_OscConfig+0x2b4>
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	f003 0303 	and.w	r3, r3, #3
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d116      	bne.n	8008030 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008002:	4b87      	ldr	r3, [pc, #540]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800800a:	2b00      	cmp	r3, #0
 800800c:	d005      	beq.n	800801a <HAL_RCC_OscConfig+0x29e>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	69db      	ldr	r3, [r3, #28]
 8008012:	2b80      	cmp	r3, #128	@ 0x80
 8008014:	d001      	beq.n	800801a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e282      	b.n	8008520 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800801a:	4b81      	ldr	r3, [pc, #516]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	061b      	lsls	r3, r3, #24
 8008028:	497d      	ldr	r1, [pc, #500]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 800802a:	4313      	orrs	r3, r2
 800802c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800802e:	e040      	b.n	80080b2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	69db      	ldr	r3, [r3, #28]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d023      	beq.n	8008080 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008038:	4b79      	ldr	r3, [pc, #484]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a78      	ldr	r2, [pc, #480]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 800803e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008044:	f7fa fc34 	bl	80028b0 <HAL_GetTick>
 8008048:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800804a:	e008      	b.n	800805e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800804c:	f7fa fc30 	bl	80028b0 <HAL_GetTick>
 8008050:	4602      	mov	r2, r0
 8008052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	2b02      	cmp	r3, #2
 8008058:	d901      	bls.n	800805e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	e260      	b.n	8008520 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800805e:	4b70      	ldr	r3, [pc, #448]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008066:	2b00      	cmp	r3, #0
 8008068:	d0f0      	beq.n	800804c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800806a:	4b6d      	ldr	r3, [pc, #436]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	061b      	lsls	r3, r3, #24
 8008078:	4969      	ldr	r1, [pc, #420]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 800807a:	4313      	orrs	r3, r2
 800807c:	60cb      	str	r3, [r1, #12]
 800807e:	e018      	b.n	80080b2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008080:	4b67      	ldr	r3, [pc, #412]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a66      	ldr	r2, [pc, #408]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 8008086:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800808a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800808c:	f7fa fc10 	bl	80028b0 <HAL_GetTick>
 8008090:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008092:	e008      	b.n	80080a6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008094:	f7fa fc0c 	bl	80028b0 <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d901      	bls.n	80080a6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80080a2:	2303      	movs	r3, #3
 80080a4:	e23c      	b.n	8008520 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080a6:	4b5e      	ldr	r3, [pc, #376]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1f0      	bne.n	8008094 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0308 	and.w	r3, r3, #8
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d036      	beq.n	800812c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d019      	beq.n	80080fa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080c6:	4b56      	ldr	r3, [pc, #344]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 80080c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080ca:	4a55      	ldr	r2, [pc, #340]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 80080cc:	f043 0301 	orr.w	r3, r3, #1
 80080d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080d2:	f7fa fbed 	bl	80028b0 <HAL_GetTick>
 80080d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080d8:	e008      	b.n	80080ec <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080da:	f7fa fbe9 	bl	80028b0 <HAL_GetTick>
 80080de:	4602      	mov	r2, r0
 80080e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d901      	bls.n	80080ec <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e219      	b.n	8008520 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080ec:	4b4c      	ldr	r3, [pc, #304]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 80080ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080f0:	f003 0302 	and.w	r3, r3, #2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d0f0      	beq.n	80080da <HAL_RCC_OscConfig+0x35e>
 80080f8:	e018      	b.n	800812c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080fa:	4b49      	ldr	r3, [pc, #292]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 80080fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080fe:	4a48      	ldr	r2, [pc, #288]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 8008100:	f023 0301 	bic.w	r3, r3, #1
 8008104:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008106:	f7fa fbd3 	bl	80028b0 <HAL_GetTick>
 800810a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800810c:	e008      	b.n	8008120 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800810e:	f7fa fbcf 	bl	80028b0 <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	2b02      	cmp	r3, #2
 800811a:	d901      	bls.n	8008120 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e1ff      	b.n	8008520 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008120:	4b3f      	ldr	r3, [pc, #252]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 8008122:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008124:	f003 0302 	and.w	r3, r3, #2
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1f0      	bne.n	800810e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 0320 	and.w	r3, r3, #32
 8008134:	2b00      	cmp	r3, #0
 8008136:	d036      	beq.n	80081a6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d019      	beq.n	8008174 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008140:	4b37      	ldr	r3, [pc, #220]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a36      	ldr	r2, [pc, #216]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 8008146:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800814a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800814c:	f7fa fbb0 	bl	80028b0 <HAL_GetTick>
 8008150:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008152:	e008      	b.n	8008166 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008154:	f7fa fbac 	bl	80028b0 <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	2b02      	cmp	r3, #2
 8008160:	d901      	bls.n	8008166 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e1dc      	b.n	8008520 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008166:	4b2e      	ldr	r3, [pc, #184]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d0f0      	beq.n	8008154 <HAL_RCC_OscConfig+0x3d8>
 8008172:	e018      	b.n	80081a6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008174:	4b2a      	ldr	r3, [pc, #168]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a29      	ldr	r2, [pc, #164]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 800817a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800817e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008180:	f7fa fb96 	bl	80028b0 <HAL_GetTick>
 8008184:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008186:	e008      	b.n	800819a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008188:	f7fa fb92 	bl	80028b0 <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	2b02      	cmp	r3, #2
 8008194:	d901      	bls.n	800819a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e1c2      	b.n	8008520 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800819a:	4b21      	ldr	r3, [pc, #132]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1f0      	bne.n	8008188 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0304 	and.w	r3, r3, #4
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f000 8086 	beq.w	80082c0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80081b4:	4b1b      	ldr	r3, [pc, #108]	@ (8008224 <HAL_RCC_OscConfig+0x4a8>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a1a      	ldr	r2, [pc, #104]	@ (8008224 <HAL_RCC_OscConfig+0x4a8>)
 80081ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081c0:	f7fa fb76 	bl	80028b0 <HAL_GetTick>
 80081c4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081c6:	e008      	b.n	80081da <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081c8:	f7fa fb72 	bl	80028b0 <HAL_GetTick>
 80081cc:	4602      	mov	r2, r0
 80081ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	2b64      	cmp	r3, #100	@ 0x64
 80081d4:	d901      	bls.n	80081da <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e1a2      	b.n	8008520 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081da:	4b12      	ldr	r3, [pc, #72]	@ (8008224 <HAL_RCC_OscConfig+0x4a8>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d0f0      	beq.n	80081c8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d106      	bne.n	80081fc <HAL_RCC_OscConfig+0x480>
 80081ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 80081f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081f2:	4a0b      	ldr	r2, [pc, #44]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 80081f4:	f043 0301 	orr.w	r3, r3, #1
 80081f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80081fa:	e032      	b.n	8008262 <HAL_RCC_OscConfig+0x4e6>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d111      	bne.n	8008228 <HAL_RCC_OscConfig+0x4ac>
 8008204:	4b06      	ldr	r3, [pc, #24]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 8008206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008208:	4a05      	ldr	r2, [pc, #20]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 800820a:	f023 0301 	bic.w	r3, r3, #1
 800820e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008210:	4b03      	ldr	r3, [pc, #12]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 8008212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008214:	4a02      	ldr	r2, [pc, #8]	@ (8008220 <HAL_RCC_OscConfig+0x4a4>)
 8008216:	f023 0304 	bic.w	r3, r3, #4
 800821a:	6713      	str	r3, [r2, #112]	@ 0x70
 800821c:	e021      	b.n	8008262 <HAL_RCC_OscConfig+0x4e6>
 800821e:	bf00      	nop
 8008220:	58024400 	.word	0x58024400
 8008224:	58024800 	.word	0x58024800
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	2b05      	cmp	r3, #5
 800822e:	d10c      	bne.n	800824a <HAL_RCC_OscConfig+0x4ce>
 8008230:	4b83      	ldr	r3, [pc, #524]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 8008232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008234:	4a82      	ldr	r2, [pc, #520]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 8008236:	f043 0304 	orr.w	r3, r3, #4
 800823a:	6713      	str	r3, [r2, #112]	@ 0x70
 800823c:	4b80      	ldr	r3, [pc, #512]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 800823e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008240:	4a7f      	ldr	r2, [pc, #508]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 8008242:	f043 0301 	orr.w	r3, r3, #1
 8008246:	6713      	str	r3, [r2, #112]	@ 0x70
 8008248:	e00b      	b.n	8008262 <HAL_RCC_OscConfig+0x4e6>
 800824a:	4b7d      	ldr	r3, [pc, #500]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 800824c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800824e:	4a7c      	ldr	r2, [pc, #496]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 8008250:	f023 0301 	bic.w	r3, r3, #1
 8008254:	6713      	str	r3, [r2, #112]	@ 0x70
 8008256:	4b7a      	ldr	r3, [pc, #488]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 8008258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800825a:	4a79      	ldr	r2, [pc, #484]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 800825c:	f023 0304 	bic.w	r3, r3, #4
 8008260:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d015      	beq.n	8008296 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800826a:	f7fa fb21 	bl	80028b0 <HAL_GetTick>
 800826e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008270:	e00a      	b.n	8008288 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008272:	f7fa fb1d 	bl	80028b0 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008280:	4293      	cmp	r3, r2
 8008282:	d901      	bls.n	8008288 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e14b      	b.n	8008520 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008288:	4b6d      	ldr	r3, [pc, #436]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 800828a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800828c:	f003 0302 	and.w	r3, r3, #2
 8008290:	2b00      	cmp	r3, #0
 8008292:	d0ee      	beq.n	8008272 <HAL_RCC_OscConfig+0x4f6>
 8008294:	e014      	b.n	80082c0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008296:	f7fa fb0b 	bl	80028b0 <HAL_GetTick>
 800829a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800829c:	e00a      	b.n	80082b4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800829e:	f7fa fb07 	bl	80028b0 <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d901      	bls.n	80082b4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e135      	b.n	8008520 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082b4:	4b62      	ldr	r3, [pc, #392]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 80082b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082b8:	f003 0302 	and.w	r3, r3, #2
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1ee      	bne.n	800829e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 812a 	beq.w	800851e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80082ca:	4b5d      	ldr	r3, [pc, #372]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082d2:	2b18      	cmp	r3, #24
 80082d4:	f000 80ba 	beq.w	800844c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082dc:	2b02      	cmp	r3, #2
 80082de:	f040 8095 	bne.w	800840c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082e2:	4b57      	ldr	r3, [pc, #348]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a56      	ldr	r2, [pc, #344]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 80082e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ee:	f7fa fadf 	bl	80028b0 <HAL_GetTick>
 80082f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082f4:	e008      	b.n	8008308 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082f6:	f7fa fadb 	bl	80028b0 <HAL_GetTick>
 80082fa:	4602      	mov	r2, r0
 80082fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	2b02      	cmp	r3, #2
 8008302:	d901      	bls.n	8008308 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	e10b      	b.n	8008520 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008308:	4b4d      	ldr	r3, [pc, #308]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1f0      	bne.n	80082f6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008314:	4b4a      	ldr	r3, [pc, #296]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 8008316:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008318:	4b4a      	ldr	r3, [pc, #296]	@ (8008444 <HAL_RCC_OscConfig+0x6c8>)
 800831a:	4013      	ands	r3, r2
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008324:	0112      	lsls	r2, r2, #4
 8008326:	430a      	orrs	r2, r1
 8008328:	4945      	ldr	r1, [pc, #276]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 800832a:	4313      	orrs	r3, r2
 800832c:	628b      	str	r3, [r1, #40]	@ 0x28
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008332:	3b01      	subs	r3, #1
 8008334:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800833c:	3b01      	subs	r3, #1
 800833e:	025b      	lsls	r3, r3, #9
 8008340:	b29b      	uxth	r3, r3
 8008342:	431a      	orrs	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008348:	3b01      	subs	r3, #1
 800834a:	041b      	lsls	r3, r3, #16
 800834c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008350:	431a      	orrs	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008356:	3b01      	subs	r3, #1
 8008358:	061b      	lsls	r3, r3, #24
 800835a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800835e:	4938      	ldr	r1, [pc, #224]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 8008360:	4313      	orrs	r3, r2
 8008362:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008364:	4b36      	ldr	r3, [pc, #216]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 8008366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008368:	4a35      	ldr	r2, [pc, #212]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 800836a:	f023 0301 	bic.w	r3, r3, #1
 800836e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008370:	4b33      	ldr	r3, [pc, #204]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 8008372:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008374:	4b34      	ldr	r3, [pc, #208]	@ (8008448 <HAL_RCC_OscConfig+0x6cc>)
 8008376:	4013      	ands	r3, r2
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800837c:	00d2      	lsls	r2, r2, #3
 800837e:	4930      	ldr	r1, [pc, #192]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 8008380:	4313      	orrs	r3, r2
 8008382:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008384:	4b2e      	ldr	r3, [pc, #184]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 8008386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008388:	f023 020c 	bic.w	r2, r3, #12
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008390:	492b      	ldr	r1, [pc, #172]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 8008392:	4313      	orrs	r3, r2
 8008394:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008396:	4b2a      	ldr	r3, [pc, #168]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 8008398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839a:	f023 0202 	bic.w	r2, r3, #2
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083a2:	4927      	ldr	r1, [pc, #156]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 80083a4:	4313      	orrs	r3, r2
 80083a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80083a8:	4b25      	ldr	r3, [pc, #148]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 80083aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ac:	4a24      	ldr	r2, [pc, #144]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 80083ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083b4:	4b22      	ldr	r3, [pc, #136]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 80083b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b8:	4a21      	ldr	r2, [pc, #132]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 80083ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80083c0:	4b1f      	ldr	r3, [pc, #124]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 80083c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c4:	4a1e      	ldr	r2, [pc, #120]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 80083c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80083ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80083cc:	4b1c      	ldr	r3, [pc, #112]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 80083ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d0:	4a1b      	ldr	r2, [pc, #108]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 80083d2:	f043 0301 	orr.w	r3, r3, #1
 80083d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083d8:	4b19      	ldr	r3, [pc, #100]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a18      	ldr	r2, [pc, #96]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 80083de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e4:	f7fa fa64 	bl	80028b0 <HAL_GetTick>
 80083e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083ea:	e008      	b.n	80083fe <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083ec:	f7fa fa60 	bl	80028b0 <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d901      	bls.n	80083fe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e090      	b.n	8008520 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083fe:	4b10      	ldr	r3, [pc, #64]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d0f0      	beq.n	80083ec <HAL_RCC_OscConfig+0x670>
 800840a:	e088      	b.n	800851e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800840c:	4b0c      	ldr	r3, [pc, #48]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a0b      	ldr	r2, [pc, #44]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 8008412:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008418:	f7fa fa4a 	bl	80028b0 <HAL_GetTick>
 800841c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800841e:	e008      	b.n	8008432 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008420:	f7fa fa46 	bl	80028b0 <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	2b02      	cmp	r3, #2
 800842c:	d901      	bls.n	8008432 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e076      	b.n	8008520 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008432:	4b03      	ldr	r3, [pc, #12]	@ (8008440 <HAL_RCC_OscConfig+0x6c4>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1f0      	bne.n	8008420 <HAL_RCC_OscConfig+0x6a4>
 800843e:	e06e      	b.n	800851e <HAL_RCC_OscConfig+0x7a2>
 8008440:	58024400 	.word	0x58024400
 8008444:	fffffc0c 	.word	0xfffffc0c
 8008448:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800844c:	4b36      	ldr	r3, [pc, #216]	@ (8008528 <HAL_RCC_OscConfig+0x7ac>)
 800844e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008450:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008452:	4b35      	ldr	r3, [pc, #212]	@ (8008528 <HAL_RCC_OscConfig+0x7ac>)
 8008454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008456:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800845c:	2b01      	cmp	r3, #1
 800845e:	d031      	beq.n	80084c4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	f003 0203 	and.w	r2, r3, #3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800846a:	429a      	cmp	r2, r3
 800846c:	d12a      	bne.n	80084c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	091b      	lsrs	r3, r3, #4
 8008472:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800847a:	429a      	cmp	r2, r3
 800847c:	d122      	bne.n	80084c4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008488:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800848a:	429a      	cmp	r2, r3
 800848c:	d11a      	bne.n	80084c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	0a5b      	lsrs	r3, r3, #9
 8008492:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800849a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800849c:	429a      	cmp	r2, r3
 800849e:	d111      	bne.n	80084c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	0c1b      	lsrs	r3, r3, #16
 80084a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d108      	bne.n	80084c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	0e1b      	lsrs	r3, r3, #24
 80084b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d001      	beq.n	80084c8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e02b      	b.n	8008520 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80084c8:	4b17      	ldr	r3, [pc, #92]	@ (8008528 <HAL_RCC_OscConfig+0x7ac>)
 80084ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084cc:	08db      	lsrs	r3, r3, #3
 80084ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d01f      	beq.n	800851e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80084de:	4b12      	ldr	r3, [pc, #72]	@ (8008528 <HAL_RCC_OscConfig+0x7ac>)
 80084e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e2:	4a11      	ldr	r2, [pc, #68]	@ (8008528 <HAL_RCC_OscConfig+0x7ac>)
 80084e4:	f023 0301 	bic.w	r3, r3, #1
 80084e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80084ea:	f7fa f9e1 	bl	80028b0 <HAL_GetTick>
 80084ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80084f0:	bf00      	nop
 80084f2:	f7fa f9dd 	bl	80028b0 <HAL_GetTick>
 80084f6:	4602      	mov	r2, r0
 80084f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d0f9      	beq.n	80084f2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80084fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008528 <HAL_RCC_OscConfig+0x7ac>)
 8008500:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008502:	4b0a      	ldr	r3, [pc, #40]	@ (800852c <HAL_RCC_OscConfig+0x7b0>)
 8008504:	4013      	ands	r3, r2
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800850a:	00d2      	lsls	r2, r2, #3
 800850c:	4906      	ldr	r1, [pc, #24]	@ (8008528 <HAL_RCC_OscConfig+0x7ac>)
 800850e:	4313      	orrs	r3, r2
 8008510:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008512:	4b05      	ldr	r3, [pc, #20]	@ (8008528 <HAL_RCC_OscConfig+0x7ac>)
 8008514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008516:	4a04      	ldr	r2, [pc, #16]	@ (8008528 <HAL_RCC_OscConfig+0x7ac>)
 8008518:	f043 0301 	orr.w	r3, r3, #1
 800851c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3730      	adds	r7, #48	@ 0x30
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	58024400 	.word	0x58024400
 800852c:	ffff0007 	.word	0xffff0007

08008530 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d101      	bne.n	8008544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e19c      	b.n	800887e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008544:	4b8a      	ldr	r3, [pc, #552]	@ (8008770 <HAL_RCC_ClockConfig+0x240>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 030f 	and.w	r3, r3, #15
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	429a      	cmp	r2, r3
 8008550:	d910      	bls.n	8008574 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008552:	4b87      	ldr	r3, [pc, #540]	@ (8008770 <HAL_RCC_ClockConfig+0x240>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f023 020f 	bic.w	r2, r3, #15
 800855a:	4985      	ldr	r1, [pc, #532]	@ (8008770 <HAL_RCC_ClockConfig+0x240>)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	4313      	orrs	r3, r2
 8008560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008562:	4b83      	ldr	r3, [pc, #524]	@ (8008770 <HAL_RCC_ClockConfig+0x240>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 030f 	and.w	r3, r3, #15
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	429a      	cmp	r2, r3
 800856e:	d001      	beq.n	8008574 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e184      	b.n	800887e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0304 	and.w	r3, r3, #4
 800857c:	2b00      	cmp	r3, #0
 800857e:	d010      	beq.n	80085a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	691a      	ldr	r2, [r3, #16]
 8008584:	4b7b      	ldr	r3, [pc, #492]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800858c:	429a      	cmp	r2, r3
 800858e:	d908      	bls.n	80085a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008590:	4b78      	ldr	r3, [pc, #480]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	4975      	ldr	r1, [pc, #468]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0308 	and.w	r3, r3, #8
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d010      	beq.n	80085d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	695a      	ldr	r2, [r3, #20]
 80085b2:	4b70      	ldr	r3, [pc, #448]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 80085b4:	69db      	ldr	r3, [r3, #28]
 80085b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d908      	bls.n	80085d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80085be:	4b6d      	ldr	r3, [pc, #436]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 80085c0:	69db      	ldr	r3, [r3, #28]
 80085c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	496a      	ldr	r1, [pc, #424]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 80085cc:	4313      	orrs	r3, r2
 80085ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0310 	and.w	r3, r3, #16
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d010      	beq.n	80085fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	699a      	ldr	r2, [r3, #24]
 80085e0:	4b64      	ldr	r3, [pc, #400]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 80085e2:	69db      	ldr	r3, [r3, #28]
 80085e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d908      	bls.n	80085fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80085ec:	4b61      	ldr	r3, [pc, #388]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 80085ee:	69db      	ldr	r3, [r3, #28]
 80085f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	495e      	ldr	r1, [pc, #376]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 80085fa:	4313      	orrs	r3, r2
 80085fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 0320 	and.w	r3, r3, #32
 8008606:	2b00      	cmp	r3, #0
 8008608:	d010      	beq.n	800862c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	69da      	ldr	r2, [r3, #28]
 800860e:	4b59      	ldr	r3, [pc, #356]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 8008610:	6a1b      	ldr	r3, [r3, #32]
 8008612:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008616:	429a      	cmp	r2, r3
 8008618:	d908      	bls.n	800862c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800861a:	4b56      	ldr	r3, [pc, #344]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 800861c:	6a1b      	ldr	r3, [r3, #32]
 800861e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	69db      	ldr	r3, [r3, #28]
 8008626:	4953      	ldr	r1, [pc, #332]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 8008628:	4313      	orrs	r3, r2
 800862a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 0302 	and.w	r3, r3, #2
 8008634:	2b00      	cmp	r3, #0
 8008636:	d010      	beq.n	800865a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	68da      	ldr	r2, [r3, #12]
 800863c:	4b4d      	ldr	r3, [pc, #308]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	f003 030f 	and.w	r3, r3, #15
 8008644:	429a      	cmp	r2, r3
 8008646:	d908      	bls.n	800865a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008648:	4b4a      	ldr	r3, [pc, #296]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	f023 020f 	bic.w	r2, r3, #15
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	4947      	ldr	r1, [pc, #284]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 8008656:	4313      	orrs	r3, r2
 8008658:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 0301 	and.w	r3, r3, #1
 8008662:	2b00      	cmp	r3, #0
 8008664:	d055      	beq.n	8008712 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008666:	4b43      	ldr	r3, [pc, #268]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	4940      	ldr	r1, [pc, #256]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 8008674:	4313      	orrs	r3, r2
 8008676:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	2b02      	cmp	r3, #2
 800867e:	d107      	bne.n	8008690 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008680:	4b3c      	ldr	r3, [pc, #240]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d121      	bne.n	80086d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	e0f6      	b.n	800887e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	2b03      	cmp	r3, #3
 8008696:	d107      	bne.n	80086a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008698:	4b36      	ldr	r3, [pc, #216]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d115      	bne.n	80086d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e0ea      	b.n	800887e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d107      	bne.n	80086c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086b0:	4b30      	ldr	r3, [pc, #192]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d109      	bne.n	80086d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e0de      	b.n	800887e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086c0:	4b2c      	ldr	r3, [pc, #176]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 0304 	and.w	r3, r3, #4
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d101      	bne.n	80086d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e0d6      	b.n	800887e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80086d0:	4b28      	ldr	r3, [pc, #160]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	f023 0207 	bic.w	r2, r3, #7
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	4925      	ldr	r1, [pc, #148]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 80086de:	4313      	orrs	r3, r2
 80086e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086e2:	f7fa f8e5 	bl	80028b0 <HAL_GetTick>
 80086e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086e8:	e00a      	b.n	8008700 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086ea:	f7fa f8e1 	bl	80028b0 <HAL_GetTick>
 80086ee:	4602      	mov	r2, r0
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d901      	bls.n	8008700 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80086fc:	2303      	movs	r3, #3
 80086fe:	e0be      	b.n	800887e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008700:	4b1c      	ldr	r3, [pc, #112]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	00db      	lsls	r3, r3, #3
 800870e:	429a      	cmp	r2, r3
 8008710:	d1eb      	bne.n	80086ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0302 	and.w	r3, r3, #2
 800871a:	2b00      	cmp	r3, #0
 800871c:	d010      	beq.n	8008740 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	4b14      	ldr	r3, [pc, #80]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	f003 030f 	and.w	r3, r3, #15
 800872a:	429a      	cmp	r2, r3
 800872c:	d208      	bcs.n	8008740 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800872e:	4b11      	ldr	r3, [pc, #68]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	f023 020f 	bic.w	r2, r3, #15
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	490e      	ldr	r1, [pc, #56]	@ (8008774 <HAL_RCC_ClockConfig+0x244>)
 800873c:	4313      	orrs	r3, r2
 800873e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008740:	4b0b      	ldr	r3, [pc, #44]	@ (8008770 <HAL_RCC_ClockConfig+0x240>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 030f 	and.w	r3, r3, #15
 8008748:	683a      	ldr	r2, [r7, #0]
 800874a:	429a      	cmp	r2, r3
 800874c:	d214      	bcs.n	8008778 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800874e:	4b08      	ldr	r3, [pc, #32]	@ (8008770 <HAL_RCC_ClockConfig+0x240>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f023 020f 	bic.w	r2, r3, #15
 8008756:	4906      	ldr	r1, [pc, #24]	@ (8008770 <HAL_RCC_ClockConfig+0x240>)
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	4313      	orrs	r3, r2
 800875c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800875e:	4b04      	ldr	r3, [pc, #16]	@ (8008770 <HAL_RCC_ClockConfig+0x240>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 030f 	and.w	r3, r3, #15
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	429a      	cmp	r2, r3
 800876a:	d005      	beq.n	8008778 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	e086      	b.n	800887e <HAL_RCC_ClockConfig+0x34e>
 8008770:	52002000 	.word	0x52002000
 8008774:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0304 	and.w	r3, r3, #4
 8008780:	2b00      	cmp	r3, #0
 8008782:	d010      	beq.n	80087a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	691a      	ldr	r2, [r3, #16]
 8008788:	4b3f      	ldr	r3, [pc, #252]	@ (8008888 <HAL_RCC_ClockConfig+0x358>)
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008790:	429a      	cmp	r2, r3
 8008792:	d208      	bcs.n	80087a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008794:	4b3c      	ldr	r3, [pc, #240]	@ (8008888 <HAL_RCC_ClockConfig+0x358>)
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	4939      	ldr	r1, [pc, #228]	@ (8008888 <HAL_RCC_ClockConfig+0x358>)
 80087a2:	4313      	orrs	r3, r2
 80087a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 0308 	and.w	r3, r3, #8
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d010      	beq.n	80087d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	695a      	ldr	r2, [r3, #20]
 80087b6:	4b34      	ldr	r3, [pc, #208]	@ (8008888 <HAL_RCC_ClockConfig+0x358>)
 80087b8:	69db      	ldr	r3, [r3, #28]
 80087ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087be:	429a      	cmp	r2, r3
 80087c0:	d208      	bcs.n	80087d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80087c2:	4b31      	ldr	r3, [pc, #196]	@ (8008888 <HAL_RCC_ClockConfig+0x358>)
 80087c4:	69db      	ldr	r3, [r3, #28]
 80087c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	492e      	ldr	r1, [pc, #184]	@ (8008888 <HAL_RCC_ClockConfig+0x358>)
 80087d0:	4313      	orrs	r3, r2
 80087d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0310 	and.w	r3, r3, #16
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d010      	beq.n	8008802 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	699a      	ldr	r2, [r3, #24]
 80087e4:	4b28      	ldr	r3, [pc, #160]	@ (8008888 <HAL_RCC_ClockConfig+0x358>)
 80087e6:	69db      	ldr	r3, [r3, #28]
 80087e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d208      	bcs.n	8008802 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80087f0:	4b25      	ldr	r3, [pc, #148]	@ (8008888 <HAL_RCC_ClockConfig+0x358>)
 80087f2:	69db      	ldr	r3, [r3, #28]
 80087f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	4922      	ldr	r1, [pc, #136]	@ (8008888 <HAL_RCC_ClockConfig+0x358>)
 80087fe:	4313      	orrs	r3, r2
 8008800:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 0320 	and.w	r3, r3, #32
 800880a:	2b00      	cmp	r3, #0
 800880c:	d010      	beq.n	8008830 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	69da      	ldr	r2, [r3, #28]
 8008812:	4b1d      	ldr	r3, [pc, #116]	@ (8008888 <HAL_RCC_ClockConfig+0x358>)
 8008814:	6a1b      	ldr	r3, [r3, #32]
 8008816:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800881a:	429a      	cmp	r2, r3
 800881c:	d208      	bcs.n	8008830 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800881e:	4b1a      	ldr	r3, [pc, #104]	@ (8008888 <HAL_RCC_ClockConfig+0x358>)
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	4917      	ldr	r1, [pc, #92]	@ (8008888 <HAL_RCC_ClockConfig+0x358>)
 800882c:	4313      	orrs	r3, r2
 800882e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008830:	f000 f834 	bl	800889c <HAL_RCC_GetSysClockFreq>
 8008834:	4602      	mov	r2, r0
 8008836:	4b14      	ldr	r3, [pc, #80]	@ (8008888 <HAL_RCC_ClockConfig+0x358>)
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	0a1b      	lsrs	r3, r3, #8
 800883c:	f003 030f 	and.w	r3, r3, #15
 8008840:	4912      	ldr	r1, [pc, #72]	@ (800888c <HAL_RCC_ClockConfig+0x35c>)
 8008842:	5ccb      	ldrb	r3, [r1, r3]
 8008844:	f003 031f 	and.w	r3, r3, #31
 8008848:	fa22 f303 	lsr.w	r3, r2, r3
 800884c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800884e:	4b0e      	ldr	r3, [pc, #56]	@ (8008888 <HAL_RCC_ClockConfig+0x358>)
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	f003 030f 	and.w	r3, r3, #15
 8008856:	4a0d      	ldr	r2, [pc, #52]	@ (800888c <HAL_RCC_ClockConfig+0x35c>)
 8008858:	5cd3      	ldrb	r3, [r2, r3]
 800885a:	f003 031f 	and.w	r3, r3, #31
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	fa22 f303 	lsr.w	r3, r2, r3
 8008864:	4a0a      	ldr	r2, [pc, #40]	@ (8008890 <HAL_RCC_ClockConfig+0x360>)
 8008866:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008868:	4a0a      	ldr	r2, [pc, #40]	@ (8008894 <HAL_RCC_ClockConfig+0x364>)
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800886e:	4b0a      	ldr	r3, [pc, #40]	@ (8008898 <HAL_RCC_ClockConfig+0x368>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4618      	mov	r0, r3
 8008874:	f7f9 ffd2 	bl	800281c <HAL_InitTick>
 8008878:	4603      	mov	r3, r0
 800887a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800887c:	7bfb      	ldrb	r3, [r7, #15]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3718      	adds	r7, #24
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	58024400 	.word	0x58024400
 800888c:	0800fbf8 	.word	0x0800fbf8
 8008890:	24000054 	.word	0x24000054
 8008894:	24000050 	.word	0x24000050
 8008898:	24000058 	.word	0x24000058

0800889c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800889c:	b480      	push	{r7}
 800889e:	b089      	sub	sp, #36	@ 0x24
 80088a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088a2:	4bb3      	ldr	r3, [pc, #716]	@ (8008b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80088aa:	2b18      	cmp	r3, #24
 80088ac:	f200 8155 	bhi.w	8008b5a <HAL_RCC_GetSysClockFreq+0x2be>
 80088b0:	a201      	add	r2, pc, #4	@ (adr r2, 80088b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80088b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b6:	bf00      	nop
 80088b8:	0800891d 	.word	0x0800891d
 80088bc:	08008b5b 	.word	0x08008b5b
 80088c0:	08008b5b 	.word	0x08008b5b
 80088c4:	08008b5b 	.word	0x08008b5b
 80088c8:	08008b5b 	.word	0x08008b5b
 80088cc:	08008b5b 	.word	0x08008b5b
 80088d0:	08008b5b 	.word	0x08008b5b
 80088d4:	08008b5b 	.word	0x08008b5b
 80088d8:	08008943 	.word	0x08008943
 80088dc:	08008b5b 	.word	0x08008b5b
 80088e0:	08008b5b 	.word	0x08008b5b
 80088e4:	08008b5b 	.word	0x08008b5b
 80088e8:	08008b5b 	.word	0x08008b5b
 80088ec:	08008b5b 	.word	0x08008b5b
 80088f0:	08008b5b 	.word	0x08008b5b
 80088f4:	08008b5b 	.word	0x08008b5b
 80088f8:	08008949 	.word	0x08008949
 80088fc:	08008b5b 	.word	0x08008b5b
 8008900:	08008b5b 	.word	0x08008b5b
 8008904:	08008b5b 	.word	0x08008b5b
 8008908:	08008b5b 	.word	0x08008b5b
 800890c:	08008b5b 	.word	0x08008b5b
 8008910:	08008b5b 	.word	0x08008b5b
 8008914:	08008b5b 	.word	0x08008b5b
 8008918:	0800894f 	.word	0x0800894f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800891c:	4b94      	ldr	r3, [pc, #592]	@ (8008b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 0320 	and.w	r3, r3, #32
 8008924:	2b00      	cmp	r3, #0
 8008926:	d009      	beq.n	800893c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008928:	4b91      	ldr	r3, [pc, #580]	@ (8008b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	08db      	lsrs	r3, r3, #3
 800892e:	f003 0303 	and.w	r3, r3, #3
 8008932:	4a90      	ldr	r2, [pc, #576]	@ (8008b74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008934:	fa22 f303 	lsr.w	r3, r2, r3
 8008938:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800893a:	e111      	b.n	8008b60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800893c:	4b8d      	ldr	r3, [pc, #564]	@ (8008b74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800893e:	61bb      	str	r3, [r7, #24]
      break;
 8008940:	e10e      	b.n	8008b60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008942:	4b8d      	ldr	r3, [pc, #564]	@ (8008b78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008944:	61bb      	str	r3, [r7, #24]
      break;
 8008946:	e10b      	b.n	8008b60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008948:	4b8c      	ldr	r3, [pc, #560]	@ (8008b7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800894a:	61bb      	str	r3, [r7, #24]
      break;
 800894c:	e108      	b.n	8008b60 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800894e:	4b88      	ldr	r3, [pc, #544]	@ (8008b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008952:	f003 0303 	and.w	r3, r3, #3
 8008956:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008958:	4b85      	ldr	r3, [pc, #532]	@ (8008b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800895a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800895c:	091b      	lsrs	r3, r3, #4
 800895e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008962:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008964:	4b82      	ldr	r3, [pc, #520]	@ (8008b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800896e:	4b80      	ldr	r3, [pc, #512]	@ (8008b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008972:	08db      	lsrs	r3, r3, #3
 8008974:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	fb02 f303 	mul.w	r3, r2, r3
 800897e:	ee07 3a90 	vmov	s15, r3
 8008982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008986:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 80e1 	beq.w	8008b54 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2b02      	cmp	r3, #2
 8008996:	f000 8083 	beq.w	8008aa0 <HAL_RCC_GetSysClockFreq+0x204>
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2b02      	cmp	r3, #2
 800899e:	f200 80a1 	bhi.w	8008ae4 <HAL_RCC_GetSysClockFreq+0x248>
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d003      	beq.n	80089b0 <HAL_RCC_GetSysClockFreq+0x114>
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d056      	beq.n	8008a5c <HAL_RCC_GetSysClockFreq+0x1c0>
 80089ae:	e099      	b.n	8008ae4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089b0:	4b6f      	ldr	r3, [pc, #444]	@ (8008b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0320 	and.w	r3, r3, #32
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d02d      	beq.n	8008a18 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089bc:	4b6c      	ldr	r3, [pc, #432]	@ (8008b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	08db      	lsrs	r3, r3, #3
 80089c2:	f003 0303 	and.w	r3, r3, #3
 80089c6:	4a6b      	ldr	r2, [pc, #428]	@ (8008b74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089c8:	fa22 f303 	lsr.w	r3, r2, r3
 80089cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	ee07 3a90 	vmov	s15, r3
 80089d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	ee07 3a90 	vmov	s15, r3
 80089de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089e6:	4b62      	ldr	r3, [pc, #392]	@ (8008b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ee:	ee07 3a90 	vmov	s15, r3
 80089f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80089fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a12:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008a16:	e087      	b.n	8008b28 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	ee07 3a90 	vmov	s15, r3
 8008a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a22:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008b84 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a2a:	4b51      	ldr	r3, [pc, #324]	@ (8008b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a32:	ee07 3a90 	vmov	s15, r3
 8008a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a3e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a5a:	e065      	b.n	8008b28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	ee07 3a90 	vmov	s15, r3
 8008a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a66:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008b88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a6e:	4b40      	ldr	r3, [pc, #256]	@ (8008b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a76:	ee07 3a90 	vmov	s15, r3
 8008a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a82:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a9e:	e043      	b.n	8008b28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	ee07 3a90 	vmov	s15, r3
 8008aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aaa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008b8c <HAL_RCC_GetSysClockFreq+0x2f0>
 8008aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8008b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aba:	ee07 3a90 	vmov	s15, r3
 8008abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ac2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ac6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ade:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008ae2:	e021      	b.n	8008b28 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	ee07 3a90 	vmov	s15, r3
 8008aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008b88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008af6:	4b1e      	ldr	r3, [pc, #120]	@ (8008b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008afe:	ee07 3a90 	vmov	s15, r3
 8008b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b06:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b0a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008b80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b26:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008b28:	4b11      	ldr	r3, [pc, #68]	@ (8008b70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b2c:	0a5b      	lsrs	r3, r3, #9
 8008b2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b32:	3301      	adds	r3, #1
 8008b34:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	ee07 3a90 	vmov	s15, r3
 8008b3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b40:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b4c:	ee17 3a90 	vmov	r3, s15
 8008b50:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008b52:	e005      	b.n	8008b60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008b54:	2300      	movs	r3, #0
 8008b56:	61bb      	str	r3, [r7, #24]
      break;
 8008b58:	e002      	b.n	8008b60 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008b5a:	4b07      	ldr	r3, [pc, #28]	@ (8008b78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008b5c:	61bb      	str	r3, [r7, #24]
      break;
 8008b5e:	bf00      	nop
  }

  return sysclockfreq;
 8008b60:	69bb      	ldr	r3, [r7, #24]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3724      	adds	r7, #36	@ 0x24
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	58024400 	.word	0x58024400
 8008b74:	03d09000 	.word	0x03d09000
 8008b78:	003d0900 	.word	0x003d0900
 8008b7c:	017d7840 	.word	0x017d7840
 8008b80:	46000000 	.word	0x46000000
 8008b84:	4c742400 	.word	0x4c742400
 8008b88:	4a742400 	.word	0x4a742400
 8008b8c:	4bbebc20 	.word	0x4bbebc20

08008b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008b96:	f7ff fe81 	bl	800889c <HAL_RCC_GetSysClockFreq>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	4b10      	ldr	r3, [pc, #64]	@ (8008be0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	0a1b      	lsrs	r3, r3, #8
 8008ba2:	f003 030f 	and.w	r3, r3, #15
 8008ba6:	490f      	ldr	r1, [pc, #60]	@ (8008be4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008ba8:	5ccb      	ldrb	r3, [r1, r3]
 8008baa:	f003 031f 	and.w	r3, r3, #31
 8008bae:	fa22 f303 	lsr.w	r3, r2, r3
 8008bb2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8008be0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	f003 030f 	and.w	r3, r3, #15
 8008bbc:	4a09      	ldr	r2, [pc, #36]	@ (8008be4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008bbe:	5cd3      	ldrb	r3, [r2, r3]
 8008bc0:	f003 031f 	and.w	r3, r3, #31
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8008bca:	4a07      	ldr	r2, [pc, #28]	@ (8008be8 <HAL_RCC_GetHCLKFreq+0x58>)
 8008bcc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008bce:	4a07      	ldr	r2, [pc, #28]	@ (8008bec <HAL_RCC_GetHCLKFreq+0x5c>)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008bd4:	4b04      	ldr	r3, [pc, #16]	@ (8008be8 <HAL_RCC_GetHCLKFreq+0x58>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	58024400 	.word	0x58024400
 8008be4:	0800fbf8 	.word	0x0800fbf8
 8008be8:	24000054 	.word	0x24000054
 8008bec:	24000050 	.word	0x24000050

08008bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008bf4:	f7ff ffcc 	bl	8008b90 <HAL_RCC_GetHCLKFreq>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	4b06      	ldr	r3, [pc, #24]	@ (8008c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bfc:	69db      	ldr	r3, [r3, #28]
 8008bfe:	091b      	lsrs	r3, r3, #4
 8008c00:	f003 0307 	and.w	r3, r3, #7
 8008c04:	4904      	ldr	r1, [pc, #16]	@ (8008c18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c06:	5ccb      	ldrb	r3, [r1, r3]
 8008c08:	f003 031f 	and.w	r3, r3, #31
 8008c0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	58024400 	.word	0x58024400
 8008c18:	0800fbf8 	.word	0x0800fbf8

08008c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008c20:	f7ff ffb6 	bl	8008b90 <HAL_RCC_GetHCLKFreq>
 8008c24:	4602      	mov	r2, r0
 8008c26:	4b06      	ldr	r3, [pc, #24]	@ (8008c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c28:	69db      	ldr	r3, [r3, #28]
 8008c2a:	0a1b      	lsrs	r3, r3, #8
 8008c2c:	f003 0307 	and.w	r3, r3, #7
 8008c30:	4904      	ldr	r1, [pc, #16]	@ (8008c44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c32:	5ccb      	ldrb	r3, [r1, r3]
 8008c34:	f003 031f 	and.w	r3, r3, #31
 8008c38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	58024400 	.word	0x58024400
 8008c44:	0800fbf8 	.word	0x0800fbf8

08008c48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c4c:	b0c6      	sub	sp, #280	@ 0x118
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008c54:	2300      	movs	r3, #0
 8008c56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c68:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008c6c:	2500      	movs	r5, #0
 8008c6e:	ea54 0305 	orrs.w	r3, r4, r5
 8008c72:	d049      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c7e:	d02f      	beq.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008c80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c84:	d828      	bhi.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008c86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c8a:	d01a      	beq.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008c8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c90:	d822      	bhi.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d003      	beq.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008c96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c9a:	d007      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008c9c:	e01c      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c9e:	4bab      	ldr	r3, [pc, #684]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca2:	4aaa      	ldr	r2, [pc, #680]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ca8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008caa:	e01a      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cb0:	3308      	adds	r3, #8
 8008cb2:	2102      	movs	r1, #2
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f002 fa49 	bl	800b14c <RCCEx_PLL2_Config>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008cc0:	e00f      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cc6:	3328      	adds	r3, #40	@ 0x28
 8008cc8:	2102      	movs	r1, #2
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f002 faf0 	bl	800b2b0 <RCCEx_PLL3_Config>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008cd6:	e004      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008cde:	e000      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ce2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10a      	bne.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008cea:	4b98      	ldr	r3, [pc, #608]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008cec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cf8:	4a94      	ldr	r2, [pc, #592]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008cfa:	430b      	orrs	r3, r1
 8008cfc:	6513      	str	r3, [r2, #80]	@ 0x50
 8008cfe:	e003      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d10:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008d14:	f04f 0900 	mov.w	r9, #0
 8008d18:	ea58 0309 	orrs.w	r3, r8, r9
 8008d1c:	d047      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d24:	2b04      	cmp	r3, #4
 8008d26:	d82a      	bhi.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008d28:	a201      	add	r2, pc, #4	@ (adr r2, 8008d30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2e:	bf00      	nop
 8008d30:	08008d45 	.word	0x08008d45
 8008d34:	08008d53 	.word	0x08008d53
 8008d38:	08008d69 	.word	0x08008d69
 8008d3c:	08008d87 	.word	0x08008d87
 8008d40:	08008d87 	.word	0x08008d87
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d44:	4b81      	ldr	r3, [pc, #516]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d48:	4a80      	ldr	r2, [pc, #512]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d50:	e01a      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d56:	3308      	adds	r3, #8
 8008d58:	2100      	movs	r1, #0
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f002 f9f6 	bl	800b14c <RCCEx_PLL2_Config>
 8008d60:	4603      	mov	r3, r0
 8008d62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d66:	e00f      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d6c:	3328      	adds	r3, #40	@ 0x28
 8008d6e:	2100      	movs	r1, #0
 8008d70:	4618      	mov	r0, r3
 8008d72:	f002 fa9d 	bl	800b2b0 <RCCEx_PLL3_Config>
 8008d76:	4603      	mov	r3, r0
 8008d78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d7c:	e004      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008d84:	e000      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008d86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10a      	bne.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008d90:	4b6e      	ldr	r3, [pc, #440]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d94:	f023 0107 	bic.w	r1, r3, #7
 8008d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d9e:	4a6b      	ldr	r2, [pc, #428]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008da0:	430b      	orrs	r3, r1
 8008da2:	6513      	str	r3, [r2, #80]	@ 0x50
 8008da4:	e003      	b.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008daa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8008dba:	f04f 0b00 	mov.w	fp, #0
 8008dbe:	ea5a 030b 	orrs.w	r3, sl, fp
 8008dc2:	d05b      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008dcc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008dd0:	d03b      	beq.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008dd2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008dd6:	d834      	bhi.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008dd8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ddc:	d037      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008dde:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008de2:	d82e      	bhi.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008de4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008de8:	d033      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008dea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008dee:	d828      	bhi.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008df0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008df4:	d01a      	beq.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008df6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008dfa:	d822      	bhi.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d003      	beq.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008e00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e04:	d007      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008e06:	e01c      	b.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e08:	4b50      	ldr	r3, [pc, #320]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e0c:	4a4f      	ldr	r2, [pc, #316]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e14:	e01e      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e1a:	3308      	adds	r3, #8
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f002 f994 	bl	800b14c <RCCEx_PLL2_Config>
 8008e24:	4603      	mov	r3, r0
 8008e26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008e2a:	e013      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e30:	3328      	adds	r3, #40	@ 0x28
 8008e32:	2100      	movs	r1, #0
 8008e34:	4618      	mov	r0, r3
 8008e36:	f002 fa3b 	bl	800b2b0 <RCCEx_PLL3_Config>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e40:	e008      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008e48:	e004      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008e4a:	bf00      	nop
 8008e4c:	e002      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008e4e:	bf00      	nop
 8008e50:	e000      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d10b      	bne.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e60:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e6c:	4a37      	ldr	r2, [pc, #220]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e6e:	430b      	orrs	r3, r1
 8008e70:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e72:	e003      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e84:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008e88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008e92:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008e96:	460b      	mov	r3, r1
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	d05d      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ea0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008ea4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008ea8:	d03b      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008eaa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008eae:	d834      	bhi.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008eb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008eb4:	d037      	beq.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008eb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008eba:	d82e      	bhi.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008ebc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008ec0:	d033      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008ec2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008ec6:	d828      	bhi.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008ec8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ecc:	d01a      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008ece:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ed2:	d822      	bhi.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d003      	beq.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008ed8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008edc:	d007      	beq.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008ede:	e01c      	b.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee4:	4a19      	ldr	r2, [pc, #100]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ee6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008eea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008eec:	e01e      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ef2:	3308      	adds	r3, #8
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f002 f928 	bl	800b14c <RCCEx_PLL2_Config>
 8008efc:	4603      	mov	r3, r0
 8008efe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008f02:	e013      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f08:	3328      	adds	r3, #40	@ 0x28
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f002 f9cf 	bl	800b2b0 <RCCEx_PLL3_Config>
 8008f12:	4603      	mov	r3, r0
 8008f14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f18:	e008      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008f20:	e004      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008f22:	bf00      	nop
 8008f24:	e002      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008f26:	bf00      	nop
 8008f28:	e000      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10d      	bne.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008f34:	4b05      	ldr	r3, [pc, #20]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f38:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008f44:	4a01      	ldr	r2, [pc, #4]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f46:	430b      	orrs	r3, r1
 8008f48:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f4a:	e005      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008f4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f60:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008f64:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008f68:	2300      	movs	r3, #0
 8008f6a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008f6e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008f72:	460b      	mov	r3, r1
 8008f74:	4313      	orrs	r3, r2
 8008f76:	d03a      	beq.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f7e:	2b30      	cmp	r3, #48	@ 0x30
 8008f80:	d01f      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008f82:	2b30      	cmp	r3, #48	@ 0x30
 8008f84:	d819      	bhi.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008f86:	2b20      	cmp	r3, #32
 8008f88:	d00c      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008f8a:	2b20      	cmp	r3, #32
 8008f8c:	d815      	bhi.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d019      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008f92:	2b10      	cmp	r3, #16
 8008f94:	d111      	bne.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f96:	4baa      	ldr	r3, [pc, #680]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f9a:	4aa9      	ldr	r2, [pc, #676]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008fa2:	e011      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fa8:	3308      	adds	r3, #8
 8008faa:	2102      	movs	r1, #2
 8008fac:	4618      	mov	r0, r3
 8008fae:	f002 f8cd 	bl	800b14c <RCCEx_PLL2_Config>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008fb8:	e006      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008fc0:	e002      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008fc2:	bf00      	nop
 8008fc4:	e000      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008fc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10a      	bne.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008fd0:	4b9b      	ldr	r3, [pc, #620]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fd4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fde:	4a98      	ldr	r2, [pc, #608]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008fe0:	430b      	orrs	r3, r1
 8008fe2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008fe4:	e003      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fe6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008ffa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008ffe:	2300      	movs	r3, #0
 8009000:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009004:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009008:	460b      	mov	r3, r1
 800900a:	4313      	orrs	r3, r2
 800900c:	d051      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800900e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009014:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009018:	d035      	beq.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800901a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800901e:	d82e      	bhi.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009020:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009024:	d031      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009026:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800902a:	d828      	bhi.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800902c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009030:	d01a      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009032:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009036:	d822      	bhi.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009038:	2b00      	cmp	r3, #0
 800903a:	d003      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800903c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009040:	d007      	beq.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009042:	e01c      	b.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009044:	4b7e      	ldr	r3, [pc, #504]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009048:	4a7d      	ldr	r2, [pc, #500]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800904a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800904e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009050:	e01c      	b.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009056:	3308      	adds	r3, #8
 8009058:	2100      	movs	r1, #0
 800905a:	4618      	mov	r0, r3
 800905c:	f002 f876 	bl	800b14c <RCCEx_PLL2_Config>
 8009060:	4603      	mov	r3, r0
 8009062:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009066:	e011      	b.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800906c:	3328      	adds	r3, #40	@ 0x28
 800906e:	2100      	movs	r1, #0
 8009070:	4618      	mov	r0, r3
 8009072:	f002 f91d 	bl	800b2b0 <RCCEx_PLL3_Config>
 8009076:	4603      	mov	r3, r0
 8009078:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800907c:	e006      	b.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009084:	e002      	b.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009086:	bf00      	nop
 8009088:	e000      	b.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800908a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800908c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009090:	2b00      	cmp	r3, #0
 8009092:	d10a      	bne.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009094:	4b6a      	ldr	r3, [pc, #424]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009098:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800909c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090a2:	4a67      	ldr	r2, [pc, #412]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090a4:	430b      	orrs	r3, r1
 80090a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80090a8:	e003      	b.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80090b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80090be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80090c2:	2300      	movs	r3, #0
 80090c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80090c8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80090cc:	460b      	mov	r3, r1
 80090ce:	4313      	orrs	r3, r2
 80090d0:	d053      	beq.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80090d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80090dc:	d033      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80090de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80090e2:	d82c      	bhi.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80090e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80090e8:	d02f      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80090ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80090ee:	d826      	bhi.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80090f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80090f4:	d02b      	beq.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80090f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80090fa:	d820      	bhi.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80090fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009100:	d012      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009102:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009106:	d81a      	bhi.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009108:	2b00      	cmp	r3, #0
 800910a:	d022      	beq.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800910c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009110:	d115      	bne.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009116:	3308      	adds	r3, #8
 8009118:	2101      	movs	r1, #1
 800911a:	4618      	mov	r0, r3
 800911c:	f002 f816 	bl	800b14c <RCCEx_PLL2_Config>
 8009120:	4603      	mov	r3, r0
 8009122:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009126:	e015      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800912c:	3328      	adds	r3, #40	@ 0x28
 800912e:	2101      	movs	r1, #1
 8009130:	4618      	mov	r0, r3
 8009132:	f002 f8bd 	bl	800b2b0 <RCCEx_PLL3_Config>
 8009136:	4603      	mov	r3, r0
 8009138:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800913c:	e00a      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009144:	e006      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009146:	bf00      	nop
 8009148:	e004      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800914a:	bf00      	nop
 800914c:	e002      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800914e:	bf00      	nop
 8009150:	e000      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009152:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009154:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10a      	bne.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800915c:	4b38      	ldr	r3, [pc, #224]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800915e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009160:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800916a:	4a35      	ldr	r2, [pc, #212]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800916c:	430b      	orrs	r3, r1
 800916e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009170:	e003      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009172:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009176:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800917a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800917e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009182:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009186:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800918a:	2300      	movs	r3, #0
 800918c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009190:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009194:	460b      	mov	r3, r1
 8009196:	4313      	orrs	r3, r2
 8009198:	d058      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800919a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800919e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80091a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80091a6:	d033      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80091a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80091ac:	d82c      	bhi.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80091ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091b2:	d02f      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80091b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091b8:	d826      	bhi.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80091ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80091be:	d02b      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80091c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80091c4:	d820      	bhi.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80091c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091ca:	d012      	beq.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80091cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091d0:	d81a      	bhi.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d022      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80091d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091da:	d115      	bne.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091e0:	3308      	adds	r3, #8
 80091e2:	2101      	movs	r1, #1
 80091e4:	4618      	mov	r0, r3
 80091e6:	f001 ffb1 	bl	800b14c <RCCEx_PLL2_Config>
 80091ea:	4603      	mov	r3, r0
 80091ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80091f0:	e015      	b.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091f6:	3328      	adds	r3, #40	@ 0x28
 80091f8:	2101      	movs	r1, #1
 80091fa:	4618      	mov	r0, r3
 80091fc:	f002 f858 	bl	800b2b0 <RCCEx_PLL3_Config>
 8009200:	4603      	mov	r3, r0
 8009202:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009206:	e00a      	b.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800920e:	e006      	b.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009210:	bf00      	nop
 8009212:	e004      	b.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009214:	bf00      	nop
 8009216:	e002      	b.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009218:	bf00      	nop
 800921a:	e000      	b.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800921c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800921e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10e      	bne.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009226:	4b06      	ldr	r3, [pc, #24]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800922a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800922e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009232:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009236:	4a02      	ldr	r2, [pc, #8]	@ (8009240 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009238:	430b      	orrs	r3, r1
 800923a:	6593      	str	r3, [r2, #88]	@ 0x58
 800923c:	e006      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800923e:	bf00      	nop
 8009240:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009244:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009248:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800924c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009258:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800925c:	2300      	movs	r3, #0
 800925e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009262:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009266:	460b      	mov	r3, r1
 8009268:	4313      	orrs	r3, r2
 800926a:	d037      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800926c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009270:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009272:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009276:	d00e      	beq.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009278:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800927c:	d816      	bhi.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x664>
 800927e:	2b00      	cmp	r3, #0
 8009280:	d018      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009282:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009286:	d111      	bne.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009288:	4bc4      	ldr	r3, [pc, #784]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800928a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800928c:	4ac3      	ldr	r2, [pc, #780]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800928e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009292:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009294:	e00f      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800929a:	3308      	adds	r3, #8
 800929c:	2101      	movs	r1, #1
 800929e:	4618      	mov	r0, r3
 80092a0:	f001 ff54 	bl	800b14c <RCCEx_PLL2_Config>
 80092a4:	4603      	mov	r3, r0
 80092a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80092aa:	e004      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80092b2:	e000      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80092b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d10a      	bne.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80092be:	4bb7      	ldr	r3, [pc, #732]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092c2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80092c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092cc:	4ab3      	ldr	r2, [pc, #716]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092ce:	430b      	orrs	r3, r1
 80092d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80092d2:	e003      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80092dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80092e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80092ec:	2300      	movs	r3, #0
 80092ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80092f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80092f6:	460b      	mov	r3, r1
 80092f8:	4313      	orrs	r3, r2
 80092fa:	d039      	beq.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80092fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009302:	2b03      	cmp	r3, #3
 8009304:	d81c      	bhi.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009306:	a201      	add	r2, pc, #4	@ (adr r2, 800930c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930c:	08009349 	.word	0x08009349
 8009310:	0800931d 	.word	0x0800931d
 8009314:	0800932b 	.word	0x0800932b
 8009318:	08009349 	.word	0x08009349
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800931c:	4b9f      	ldr	r3, [pc, #636]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800931e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009320:	4a9e      	ldr	r2, [pc, #632]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009322:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009326:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009328:	e00f      	b.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800932a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800932e:	3308      	adds	r3, #8
 8009330:	2102      	movs	r1, #2
 8009332:	4618      	mov	r0, r3
 8009334:	f001 ff0a 	bl	800b14c <RCCEx_PLL2_Config>
 8009338:	4603      	mov	r3, r0
 800933a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800933e:	e004      	b.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009346:	e000      	b.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800934a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800934e:	2b00      	cmp	r3, #0
 8009350:	d10a      	bne.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009352:	4b92      	ldr	r3, [pc, #584]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009356:	f023 0103 	bic.w	r1, r3, #3
 800935a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800935e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009360:	4a8e      	ldr	r2, [pc, #568]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009362:	430b      	orrs	r3, r1
 8009364:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009366:	e003      	b.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009368:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800936c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009378:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800937c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009380:	2300      	movs	r3, #0
 8009382:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009386:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800938a:	460b      	mov	r3, r1
 800938c:	4313      	orrs	r3, r2
 800938e:	f000 8099 	beq.w	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009392:	4b83      	ldr	r3, [pc, #524]	@ (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a82      	ldr	r2, [pc, #520]	@ (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800939c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800939e:	f7f9 fa87 	bl	80028b0 <HAL_GetTick>
 80093a2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093a6:	e00b      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093a8:	f7f9 fa82 	bl	80028b0 <HAL_GetTick>
 80093ac:	4602      	mov	r2, r0
 80093ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80093b2:	1ad3      	subs	r3, r2, r3
 80093b4:	2b64      	cmp	r3, #100	@ 0x64
 80093b6:	d903      	bls.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80093b8:	2303      	movs	r3, #3
 80093ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80093be:	e005      	b.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093c0:	4b77      	ldr	r3, [pc, #476]	@ (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d0ed      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80093cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d173      	bne.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80093d4:	4b71      	ldr	r3, [pc, #452]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80093d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80093e0:	4053      	eors	r3, r2
 80093e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d015      	beq.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80093ea:	4b6c      	ldr	r3, [pc, #432]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093f2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80093f6:	4b69      	ldr	r3, [pc, #420]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093fa:	4a68      	ldr	r2, [pc, #416]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009400:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009402:	4b66      	ldr	r3, [pc, #408]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009406:	4a65      	ldr	r2, [pc, #404]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009408:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800940c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800940e:	4a63      	ldr	r2, [pc, #396]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009410:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009414:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800941a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800941e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009422:	d118      	bne.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009424:	f7f9 fa44 	bl	80028b0 <HAL_GetTick>
 8009428:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800942c:	e00d      	b.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800942e:	f7f9 fa3f 	bl	80028b0 <HAL_GetTick>
 8009432:	4602      	mov	r2, r0
 8009434:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009438:	1ad2      	subs	r2, r2, r3
 800943a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800943e:	429a      	cmp	r2, r3
 8009440:	d903      	bls.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009442:	2303      	movs	r3, #3
 8009444:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8009448:	e005      	b.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800944a:	4b54      	ldr	r3, [pc, #336]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800944c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800944e:	f003 0302 	and.w	r3, r3, #2
 8009452:	2b00      	cmp	r3, #0
 8009454:	d0eb      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009456:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800945a:	2b00      	cmp	r3, #0
 800945c:	d129      	bne.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800945e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009462:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009466:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800946a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800946e:	d10e      	bne.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009470:	4b4a      	ldr	r3, [pc, #296]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800947c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009480:	091a      	lsrs	r2, r3, #4
 8009482:	4b48      	ldr	r3, [pc, #288]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009484:	4013      	ands	r3, r2
 8009486:	4a45      	ldr	r2, [pc, #276]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009488:	430b      	orrs	r3, r1
 800948a:	6113      	str	r3, [r2, #16]
 800948c:	e005      	b.n	800949a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800948e:	4b43      	ldr	r3, [pc, #268]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	4a42      	ldr	r2, [pc, #264]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009494:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009498:	6113      	str	r3, [r2, #16]
 800949a:	4b40      	ldr	r3, [pc, #256]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800949c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800949e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80094a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094aa:	4a3c      	ldr	r2, [pc, #240]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094ac:	430b      	orrs	r3, r1
 80094ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80094b0:	e008      	b.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80094b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80094ba:	e003      	b.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80094c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094cc:	f002 0301 	and.w	r3, r2, #1
 80094d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80094d4:	2300      	movs	r3, #0
 80094d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80094da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80094de:	460b      	mov	r3, r1
 80094e0:	4313      	orrs	r3, r2
 80094e2:	f000 808f 	beq.w	8009604 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80094e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80094ec:	2b28      	cmp	r3, #40	@ 0x28
 80094ee:	d871      	bhi.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80094f0:	a201      	add	r2, pc, #4	@ (adr r2, 80094f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80094f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f6:	bf00      	nop
 80094f8:	080095dd 	.word	0x080095dd
 80094fc:	080095d5 	.word	0x080095d5
 8009500:	080095d5 	.word	0x080095d5
 8009504:	080095d5 	.word	0x080095d5
 8009508:	080095d5 	.word	0x080095d5
 800950c:	080095d5 	.word	0x080095d5
 8009510:	080095d5 	.word	0x080095d5
 8009514:	080095d5 	.word	0x080095d5
 8009518:	080095a9 	.word	0x080095a9
 800951c:	080095d5 	.word	0x080095d5
 8009520:	080095d5 	.word	0x080095d5
 8009524:	080095d5 	.word	0x080095d5
 8009528:	080095d5 	.word	0x080095d5
 800952c:	080095d5 	.word	0x080095d5
 8009530:	080095d5 	.word	0x080095d5
 8009534:	080095d5 	.word	0x080095d5
 8009538:	080095bf 	.word	0x080095bf
 800953c:	080095d5 	.word	0x080095d5
 8009540:	080095d5 	.word	0x080095d5
 8009544:	080095d5 	.word	0x080095d5
 8009548:	080095d5 	.word	0x080095d5
 800954c:	080095d5 	.word	0x080095d5
 8009550:	080095d5 	.word	0x080095d5
 8009554:	080095d5 	.word	0x080095d5
 8009558:	080095dd 	.word	0x080095dd
 800955c:	080095d5 	.word	0x080095d5
 8009560:	080095d5 	.word	0x080095d5
 8009564:	080095d5 	.word	0x080095d5
 8009568:	080095d5 	.word	0x080095d5
 800956c:	080095d5 	.word	0x080095d5
 8009570:	080095d5 	.word	0x080095d5
 8009574:	080095d5 	.word	0x080095d5
 8009578:	080095dd 	.word	0x080095dd
 800957c:	080095d5 	.word	0x080095d5
 8009580:	080095d5 	.word	0x080095d5
 8009584:	080095d5 	.word	0x080095d5
 8009588:	080095d5 	.word	0x080095d5
 800958c:	080095d5 	.word	0x080095d5
 8009590:	080095d5 	.word	0x080095d5
 8009594:	080095d5 	.word	0x080095d5
 8009598:	080095dd 	.word	0x080095dd
 800959c:	58024400 	.word	0x58024400
 80095a0:	58024800 	.word	0x58024800
 80095a4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095ac:	3308      	adds	r3, #8
 80095ae:	2101      	movs	r1, #1
 80095b0:	4618      	mov	r0, r3
 80095b2:	f001 fdcb 	bl	800b14c <RCCEx_PLL2_Config>
 80095b6:	4603      	mov	r3, r0
 80095b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80095bc:	e00f      	b.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095c2:	3328      	adds	r3, #40	@ 0x28
 80095c4:	2101      	movs	r1, #1
 80095c6:	4618      	mov	r0, r3
 80095c8:	f001 fe72 	bl	800b2b0 <RCCEx_PLL3_Config>
 80095cc:	4603      	mov	r3, r0
 80095ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80095d2:	e004      	b.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80095da:	e000      	b.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80095dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d10a      	bne.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80095e6:	4bbf      	ldr	r3, [pc, #764]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80095e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095ea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80095ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095f4:	4abb      	ldr	r2, [pc, #748]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80095f6:	430b      	orrs	r3, r1
 80095f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80095fa:	e003      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009600:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960c:	f002 0302 	and.w	r3, r2, #2
 8009610:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009614:	2300      	movs	r3, #0
 8009616:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800961a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800961e:	460b      	mov	r3, r1
 8009620:	4313      	orrs	r3, r2
 8009622:	d041      	beq.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800962a:	2b05      	cmp	r3, #5
 800962c:	d824      	bhi.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800962e:	a201      	add	r2, pc, #4	@ (adr r2, 8009634 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009634:	08009681 	.word	0x08009681
 8009638:	0800964d 	.word	0x0800964d
 800963c:	08009663 	.word	0x08009663
 8009640:	08009681 	.word	0x08009681
 8009644:	08009681 	.word	0x08009681
 8009648:	08009681 	.word	0x08009681
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800964c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009650:	3308      	adds	r3, #8
 8009652:	2101      	movs	r1, #1
 8009654:	4618      	mov	r0, r3
 8009656:	f001 fd79 	bl	800b14c <RCCEx_PLL2_Config>
 800965a:	4603      	mov	r3, r0
 800965c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009660:	e00f      	b.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009666:	3328      	adds	r3, #40	@ 0x28
 8009668:	2101      	movs	r1, #1
 800966a:	4618      	mov	r0, r3
 800966c:	f001 fe20 	bl	800b2b0 <RCCEx_PLL3_Config>
 8009670:	4603      	mov	r3, r0
 8009672:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009676:	e004      	b.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800967e:	e000      	b.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009682:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009686:	2b00      	cmp	r3, #0
 8009688:	d10a      	bne.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800968a:	4b96      	ldr	r3, [pc, #600]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800968c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800968e:	f023 0107 	bic.w	r1, r3, #7
 8009692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009696:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009698:	4a92      	ldr	r2, [pc, #584]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800969a:	430b      	orrs	r3, r1
 800969c:	6553      	str	r3, [r2, #84]	@ 0x54
 800969e:	e003      	b.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80096a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b0:	f002 0304 	and.w	r3, r2, #4
 80096b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80096b8:	2300      	movs	r3, #0
 80096ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80096be:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80096c2:	460b      	mov	r3, r1
 80096c4:	4313      	orrs	r3, r2
 80096c6:	d044      	beq.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80096c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096d0:	2b05      	cmp	r3, #5
 80096d2:	d825      	bhi.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80096d4:	a201      	add	r2, pc, #4	@ (adr r2, 80096dc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80096d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096da:	bf00      	nop
 80096dc:	08009729 	.word	0x08009729
 80096e0:	080096f5 	.word	0x080096f5
 80096e4:	0800970b 	.word	0x0800970b
 80096e8:	08009729 	.word	0x08009729
 80096ec:	08009729 	.word	0x08009729
 80096f0:	08009729 	.word	0x08009729
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096f8:	3308      	adds	r3, #8
 80096fa:	2101      	movs	r1, #1
 80096fc:	4618      	mov	r0, r3
 80096fe:	f001 fd25 	bl	800b14c <RCCEx_PLL2_Config>
 8009702:	4603      	mov	r3, r0
 8009704:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009708:	e00f      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800970a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800970e:	3328      	adds	r3, #40	@ 0x28
 8009710:	2101      	movs	r1, #1
 8009712:	4618      	mov	r0, r3
 8009714:	f001 fdcc 	bl	800b2b0 <RCCEx_PLL3_Config>
 8009718:	4603      	mov	r3, r0
 800971a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800971e:	e004      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009726:	e000      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800972a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10b      	bne.n	800974a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009732:	4b6c      	ldr	r3, [pc, #432]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009736:	f023 0107 	bic.w	r1, r3, #7
 800973a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800973e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009742:	4a68      	ldr	r2, [pc, #416]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009744:	430b      	orrs	r3, r1
 8009746:	6593      	str	r3, [r2, #88]	@ 0x58
 8009748:	e003      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800974a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800974e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975a:	f002 0320 	and.w	r3, r2, #32
 800975e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009762:	2300      	movs	r3, #0
 8009764:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009768:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800976c:	460b      	mov	r3, r1
 800976e:	4313      	orrs	r3, r2
 8009770:	d055      	beq.n	800981e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009776:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800977a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800977e:	d033      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009780:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009784:	d82c      	bhi.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800978a:	d02f      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800978c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009790:	d826      	bhi.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009792:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009796:	d02b      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009798:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800979c:	d820      	bhi.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800979e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097a2:	d012      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80097a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097a8:	d81a      	bhi.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d022      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80097ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097b2:	d115      	bne.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097b8:	3308      	adds	r3, #8
 80097ba:	2100      	movs	r1, #0
 80097bc:	4618      	mov	r0, r3
 80097be:	f001 fcc5 	bl	800b14c <RCCEx_PLL2_Config>
 80097c2:	4603      	mov	r3, r0
 80097c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80097c8:	e015      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80097ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097ce:	3328      	adds	r3, #40	@ 0x28
 80097d0:	2102      	movs	r1, #2
 80097d2:	4618      	mov	r0, r3
 80097d4:	f001 fd6c 	bl	800b2b0 <RCCEx_PLL3_Config>
 80097d8:	4603      	mov	r3, r0
 80097da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80097de:	e00a      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80097e6:	e006      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80097e8:	bf00      	nop
 80097ea:	e004      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80097ec:	bf00      	nop
 80097ee:	e002      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80097f0:	bf00      	nop
 80097f2:	e000      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80097f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d10b      	bne.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80097fe:	4b39      	ldr	r3, [pc, #228]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009802:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800980a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800980e:	4a35      	ldr	r2, [pc, #212]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009810:	430b      	orrs	r3, r1
 8009812:	6553      	str	r3, [r2, #84]	@ 0x54
 8009814:	e003      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009816:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800981a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800981e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009826:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800982a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800982e:	2300      	movs	r3, #0
 8009830:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009834:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009838:	460b      	mov	r3, r1
 800983a:	4313      	orrs	r3, r2
 800983c:	d058      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800983e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009842:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009846:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800984a:	d033      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800984c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009850:	d82c      	bhi.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009856:	d02f      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009858:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800985c:	d826      	bhi.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800985e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009862:	d02b      	beq.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009864:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009868:	d820      	bhi.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800986a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800986e:	d012      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009870:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009874:	d81a      	bhi.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009876:	2b00      	cmp	r3, #0
 8009878:	d022      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800987a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800987e:	d115      	bne.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009884:	3308      	adds	r3, #8
 8009886:	2100      	movs	r1, #0
 8009888:	4618      	mov	r0, r3
 800988a:	f001 fc5f 	bl	800b14c <RCCEx_PLL2_Config>
 800988e:	4603      	mov	r3, r0
 8009890:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009894:	e015      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800989a:	3328      	adds	r3, #40	@ 0x28
 800989c:	2102      	movs	r1, #2
 800989e:	4618      	mov	r0, r3
 80098a0:	f001 fd06 	bl	800b2b0 <RCCEx_PLL3_Config>
 80098a4:	4603      	mov	r3, r0
 80098a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80098aa:	e00a      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80098b2:	e006      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80098b4:	bf00      	nop
 80098b6:	e004      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80098b8:	bf00      	nop
 80098ba:	e002      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80098bc:	bf00      	nop
 80098be:	e000      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80098c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d10e      	bne.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80098ca:	4b06      	ldr	r3, [pc, #24]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80098cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098ce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80098d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80098da:	4a02      	ldr	r2, [pc, #8]	@ (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80098dc:	430b      	orrs	r3, r1
 80098de:	6593      	str	r3, [r2, #88]	@ 0x58
 80098e0:	e006      	b.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80098e2:	bf00      	nop
 80098e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80098f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80098fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009900:	2300      	movs	r3, #0
 8009902:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009906:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800990a:	460b      	mov	r3, r1
 800990c:	4313      	orrs	r3, r2
 800990e:	d055      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009914:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009918:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800991c:	d033      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800991e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009922:	d82c      	bhi.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009924:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009928:	d02f      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800992a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800992e:	d826      	bhi.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009930:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009934:	d02b      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009936:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800993a:	d820      	bhi.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800993c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009940:	d012      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8009942:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009946:	d81a      	bhi.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009948:	2b00      	cmp	r3, #0
 800994a:	d022      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800994c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009950:	d115      	bne.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009956:	3308      	adds	r3, #8
 8009958:	2100      	movs	r1, #0
 800995a:	4618      	mov	r0, r3
 800995c:	f001 fbf6 	bl	800b14c <RCCEx_PLL2_Config>
 8009960:	4603      	mov	r3, r0
 8009962:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009966:	e015      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800996c:	3328      	adds	r3, #40	@ 0x28
 800996e:	2102      	movs	r1, #2
 8009970:	4618      	mov	r0, r3
 8009972:	f001 fc9d 	bl	800b2b0 <RCCEx_PLL3_Config>
 8009976:	4603      	mov	r3, r0
 8009978:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800997c:	e00a      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009984:	e006      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009986:	bf00      	nop
 8009988:	e004      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800998a:	bf00      	nop
 800998c:	e002      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800998e:	bf00      	nop
 8009990:	e000      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009994:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10b      	bne.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800999c:	4ba0      	ldr	r3, [pc, #640]	@ (8009c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800999e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099a0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80099a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80099ac:	4a9c      	ldr	r2, [pc, #624]	@ (8009c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80099ae:	430b      	orrs	r3, r1
 80099b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80099b2:	e003      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80099bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c4:	f002 0308 	and.w	r3, r2, #8
 80099c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80099cc:	2300      	movs	r3, #0
 80099ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80099d2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80099d6:	460b      	mov	r3, r1
 80099d8:	4313      	orrs	r3, r2
 80099da:	d01e      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80099dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099e8:	d10c      	bne.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80099ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ee:	3328      	adds	r3, #40	@ 0x28
 80099f0:	2102      	movs	r1, #2
 80099f2:	4618      	mov	r0, r3
 80099f4:	f001 fc5c 	bl	800b2b0 <RCCEx_PLL3_Config>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d002      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009a04:	4b86      	ldr	r3, [pc, #536]	@ (8009c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a08:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a14:	4a82      	ldr	r2, [pc, #520]	@ (8009c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a16:	430b      	orrs	r3, r1
 8009a18:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	f002 0310 	and.w	r3, r2, #16
 8009a26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009a30:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009a34:	460b      	mov	r3, r1
 8009a36:	4313      	orrs	r3, r2
 8009a38:	d01e      	beq.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a46:	d10c      	bne.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a4c:	3328      	adds	r3, #40	@ 0x28
 8009a4e:	2102      	movs	r1, #2
 8009a50:	4618      	mov	r0, r3
 8009a52:	f001 fc2d 	bl	800b2b0 <RCCEx_PLL3_Config>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d002      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009a62:	4b6f      	ldr	r3, [pc, #444]	@ (8009c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a72:	4a6b      	ldr	r2, [pc, #428]	@ (8009c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a74:	430b      	orrs	r3, r1
 8009a76:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a80:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009a84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009a86:	2300      	movs	r3, #0
 8009a88:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009a8a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009a8e:	460b      	mov	r3, r1
 8009a90:	4313      	orrs	r3, r2
 8009a92:	d03e      	beq.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009a9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009aa0:	d022      	beq.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009aa2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009aa6:	d81b      	bhi.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d003      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ab0:	d00b      	beq.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009ab2:	e015      	b.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ab8:	3308      	adds	r3, #8
 8009aba:	2100      	movs	r1, #0
 8009abc:	4618      	mov	r0, r3
 8009abe:	f001 fb45 	bl	800b14c <RCCEx_PLL2_Config>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009ac8:	e00f      	b.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ace:	3328      	adds	r3, #40	@ 0x28
 8009ad0:	2102      	movs	r1, #2
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f001 fbec 	bl	800b2b0 <RCCEx_PLL3_Config>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009ade:	e004      	b.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009ae6:	e000      	b.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10b      	bne.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009af2:	4b4b      	ldr	r3, [pc, #300]	@ (8009c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009af6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009afe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009b02:	4a47      	ldr	r2, [pc, #284]	@ (8009c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b04:	430b      	orrs	r3, r1
 8009b06:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b08:	e003      	b.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009b1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b20:	2300      	movs	r3, #0
 8009b22:	677b      	str	r3, [r7, #116]	@ 0x74
 8009b24:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009b28:	460b      	mov	r3, r1
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	d03b      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b3a:	d01f      	beq.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009b3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b40:	d818      	bhi.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009b42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b46:	d003      	beq.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009b48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009b4c:	d007      	beq.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009b4e:	e011      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b50:	4b33      	ldr	r3, [pc, #204]	@ (8009c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b54:	4a32      	ldr	r2, [pc, #200]	@ (8009c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009b5c:	e00f      	b.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b62:	3328      	adds	r3, #40	@ 0x28
 8009b64:	2101      	movs	r1, #1
 8009b66:	4618      	mov	r0, r3
 8009b68:	f001 fba2 	bl	800b2b0 <RCCEx_PLL3_Config>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009b72:	e004      	b.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b7a:	e000      	b.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d10b      	bne.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009b86:	4b26      	ldr	r3, [pc, #152]	@ (8009c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b96:	4a22      	ldr	r2, [pc, #136]	@ (8009c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b98:	430b      	orrs	r3, r1
 8009b9a:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b9c:	e003      	b.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ba2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009bb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009bb8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	d034      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d003      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bd0:	d007      	beq.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009bd2:	e011      	b.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bd4:	4b12      	ldr	r3, [pc, #72]	@ (8009c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bd8:	4a11      	ldr	r2, [pc, #68]	@ (8009c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009be0:	e00e      	b.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009be6:	3308      	adds	r3, #8
 8009be8:	2102      	movs	r1, #2
 8009bea:	4618      	mov	r0, r3
 8009bec:	f001 faae 	bl	800b14c <RCCEx_PLL2_Config>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009bf6:	e003      	b.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009bfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d10d      	bne.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009c08:	4b05      	ldr	r3, [pc, #20]	@ (8009c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c0c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c16:	4a02      	ldr	r2, [pc, #8]	@ (8009c20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c18:	430b      	orrs	r3, r1
 8009c1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009c1c:	e006      	b.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009c1e:	bf00      	nop
 8009c20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c34:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009c38:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c3e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009c42:	460b      	mov	r3, r1
 8009c44:	4313      	orrs	r3, r2
 8009c46:	d00c      	beq.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c4c:	3328      	adds	r3, #40	@ 0x28
 8009c4e:	2102      	movs	r1, #2
 8009c50:	4618      	mov	r0, r3
 8009c52:	f001 fb2d 	bl	800b2b0 <RCCEx_PLL3_Config>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d002      	beq.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009c6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c70:	2300      	movs	r3, #0
 8009c72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c74:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009c78:	460b      	mov	r3, r1
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	d036      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c88:	d018      	beq.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009c8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c8e:	d811      	bhi.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c94:	d014      	beq.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009c96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c9a:	d80b      	bhi.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d011      	beq.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009ca0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ca4:	d106      	bne.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ca6:	4bb7      	ldr	r3, [pc, #732]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009caa:	4ab6      	ldr	r2, [pc, #728]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009cb2:	e008      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009cba:	e004      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009cbc:	bf00      	nop
 8009cbe:	e002      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009cc0:	bf00      	nop
 8009cc2:	e000      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d10a      	bne.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009cce:	4bad      	ldr	r3, [pc, #692]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cd2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009cdc:	4aa9      	ldr	r2, [pc, #676]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009cde:	430b      	orrs	r3, r1
 8009ce0:	6553      	str	r3, [r2, #84]	@ 0x54
 8009ce2:	e003      	b.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ce4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ce8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009cf8:	653b      	str	r3, [r7, #80]	@ 0x50
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	657b      	str	r3, [r7, #84]	@ 0x54
 8009cfe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009d02:	460b      	mov	r3, r1
 8009d04:	4313      	orrs	r3, r2
 8009d06:	d009      	beq.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009d08:	4b9e      	ldr	r3, [pc, #632]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d0c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d16:	4a9b      	ldr	r2, [pc, #620]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d18:	430b      	orrs	r3, r1
 8009d1a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d24:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009d28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d2e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009d32:	460b      	mov	r3, r1
 8009d34:	4313      	orrs	r3, r2
 8009d36:	d009      	beq.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009d38:	4b92      	ldr	r3, [pc, #584]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d3c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d46:	4a8f      	ldr	r2, [pc, #572]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d48:	430b      	orrs	r3, r1
 8009d4a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d54:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009d58:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d5e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009d62:	460b      	mov	r3, r1
 8009d64:	4313      	orrs	r3, r2
 8009d66:	d00e      	beq.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009d68:	4b86      	ldr	r3, [pc, #536]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d6a:	691b      	ldr	r3, [r3, #16]
 8009d6c:	4a85      	ldr	r2, [pc, #532]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009d72:	6113      	str	r3, [r2, #16]
 8009d74:	4b83      	ldr	r3, [pc, #524]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d76:	6919      	ldr	r1, [r3, #16]
 8009d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009d80:	4a80      	ldr	r2, [pc, #512]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d82:	430b      	orrs	r3, r1
 8009d84:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009d92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d94:	2300      	movs	r3, #0
 8009d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d98:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	d009      	beq.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009da2:	4b78      	ldr	r3, [pc, #480]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009da6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009db0:	4a74      	ldr	r2, [pc, #464]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009db2:	430b      	orrs	r3, r1
 8009db4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009dc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dc8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009dcc:	460b      	mov	r3, r1
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	d00a      	beq.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dd6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009de2:	4a68      	ldr	r2, [pc, #416]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009de4:	430b      	orrs	r3, r1
 8009de6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df0:	2100      	movs	r1, #0
 8009df2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009df4:	f003 0301 	and.w	r3, r3, #1
 8009df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009dfa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009dfe:	460b      	mov	r3, r1
 8009e00:	4313      	orrs	r3, r2
 8009e02:	d011      	beq.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e08:	3308      	adds	r3, #8
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f001 f99d 	bl	800b14c <RCCEx_PLL2_Config>
 8009e12:	4603      	mov	r3, r0
 8009e14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009e18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d003      	beq.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e30:	2100      	movs	r1, #0
 8009e32:	6239      	str	r1, [r7, #32]
 8009e34:	f003 0302 	and.w	r3, r3, #2
 8009e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e3a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009e3e:	460b      	mov	r3, r1
 8009e40:	4313      	orrs	r3, r2
 8009e42:	d011      	beq.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e48:	3308      	adds	r3, #8
 8009e4a:	2101      	movs	r1, #1
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f001 f97d 	bl	800b14c <RCCEx_PLL2_Config>
 8009e52:	4603      	mov	r3, r0
 8009e54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009e58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d003      	beq.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e70:	2100      	movs	r1, #0
 8009e72:	61b9      	str	r1, [r7, #24]
 8009e74:	f003 0304 	and.w	r3, r3, #4
 8009e78:	61fb      	str	r3, [r7, #28]
 8009e7a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009e7e:	460b      	mov	r3, r1
 8009e80:	4313      	orrs	r3, r2
 8009e82:	d011      	beq.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e88:	3308      	adds	r3, #8
 8009e8a:	2102      	movs	r1, #2
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f001 f95d 	bl	800b14c <RCCEx_PLL2_Config>
 8009e92:	4603      	mov	r3, r0
 8009e94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009e98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d003      	beq.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ea0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ea4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	6139      	str	r1, [r7, #16]
 8009eb4:	f003 0308 	and.w	r3, r3, #8
 8009eb8:	617b      	str	r3, [r7, #20]
 8009eba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	d011      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ec8:	3328      	adds	r3, #40	@ 0x28
 8009eca:	2100      	movs	r1, #0
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f001 f9ef 	bl	800b2b0 <RCCEx_PLL3_Config>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8009ed8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d003      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ee4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	60b9      	str	r1, [r7, #8]
 8009ef4:	f003 0310 	and.w	r3, r3, #16
 8009ef8:	60fb      	str	r3, [r7, #12]
 8009efa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009efe:	460b      	mov	r3, r1
 8009f00:	4313      	orrs	r3, r2
 8009f02:	d011      	beq.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f08:	3328      	adds	r3, #40	@ 0x28
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f001 f9cf 	bl	800b2b0 <RCCEx_PLL3_Config>
 8009f12:	4603      	mov	r3, r0
 8009f14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009f18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d003      	beq.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f30:	2100      	movs	r1, #0
 8009f32:	6039      	str	r1, [r7, #0]
 8009f34:	f003 0320 	and.w	r3, r3, #32
 8009f38:	607b      	str	r3, [r7, #4]
 8009f3a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009f3e:	460b      	mov	r3, r1
 8009f40:	4313      	orrs	r3, r2
 8009f42:	d011      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f48:	3328      	adds	r3, #40	@ 0x28
 8009f4a:	2102      	movs	r1, #2
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f001 f9af 	bl	800b2b0 <RCCEx_PLL3_Config>
 8009f52:	4603      	mov	r3, r0
 8009f54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009f58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d003      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8009f68:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d101      	bne.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009f70:	2300      	movs	r3, #0
 8009f72:	e000      	b.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009f74:	2301      	movs	r3, #1
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f82:	bf00      	nop
 8009f84:	58024400 	.word	0x58024400

08009f88 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b090      	sub	sp, #64	@ 0x40
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f96:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009f9a:	430b      	orrs	r3, r1
 8009f9c:	f040 8094 	bne.w	800a0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009fa0:	4b9b      	ldr	r3, [pc, #620]	@ (800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fa4:	f003 0307 	and.w	r3, r3, #7
 8009fa8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fac:	2b04      	cmp	r3, #4
 8009fae:	f200 8087 	bhi.w	800a0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb8:	08009fcd 	.word	0x08009fcd
 8009fbc:	08009ff5 	.word	0x08009ff5
 8009fc0:	0800a01d 	.word	0x0800a01d
 8009fc4:	0800a0b9 	.word	0x0800a0b9
 8009fc8:	0800a045 	.word	0x0800a045
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009fcc:	4b90      	ldr	r3, [pc, #576]	@ (800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fd8:	d108      	bne.n	8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009fda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f000 ff62 	bl	800aea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fe8:	f000 bc93 	b.w	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009fec:	2300      	movs	r3, #0
 8009fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ff0:	f000 bc8f 	b.w	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ff4:	4b86      	ldr	r3, [pc, #536]	@ (800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ffc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a000:	d108      	bne.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a002:	f107 0318 	add.w	r3, r7, #24
 800a006:	4618      	mov	r0, r3
 800a008:	f000 fca6 	bl	800a958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a010:	f000 bc7f 	b.w	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a014:	2300      	movs	r3, #0
 800a016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a018:	f000 bc7b 	b.w	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a01c:	4b7c      	ldr	r3, [pc, #496]	@ (800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a024:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a028:	d108      	bne.n	800a03c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a02a:	f107 030c 	add.w	r3, r7, #12
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 fde6 	bl	800ac00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a038:	f000 bc6b 	b.w	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a03c:	2300      	movs	r3, #0
 800a03e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a040:	f000 bc67 	b.w	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a044:	4b72      	ldr	r3, [pc, #456]	@ (800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a048:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a04c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a04e:	4b70      	ldr	r3, [pc, #448]	@ (800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 0304 	and.w	r3, r3, #4
 800a056:	2b04      	cmp	r3, #4
 800a058:	d10c      	bne.n	800a074 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a05a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d109      	bne.n	800a074 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a060:	4b6b      	ldr	r3, [pc, #428]	@ (800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	08db      	lsrs	r3, r3, #3
 800a066:	f003 0303 	and.w	r3, r3, #3
 800a06a:	4a6a      	ldr	r2, [pc, #424]	@ (800a214 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a06c:	fa22 f303 	lsr.w	r3, r2, r3
 800a070:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a072:	e01f      	b.n	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a074:	4b66      	ldr	r3, [pc, #408]	@ (800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a07c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a080:	d106      	bne.n	800a090 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a084:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a088:	d102      	bne.n	800a090 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a08a:	4b63      	ldr	r3, [pc, #396]	@ (800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a08c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a08e:	e011      	b.n	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a090:	4b5f      	ldr	r3, [pc, #380]	@ (800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a098:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a09c:	d106      	bne.n	800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a09e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0a4:	d102      	bne.n	800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a0a6:	4b5d      	ldr	r3, [pc, #372]	@ (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0aa:	e003      	b.n	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a0b0:	f000 bc2f 	b.w	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a0b4:	f000 bc2d 	b.w	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a0b8:	4b59      	ldr	r3, [pc, #356]	@ (800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a0ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0bc:	f000 bc29 	b.w	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0c4:	f000 bc25 	b.w	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a0c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0cc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a0d0:	430b      	orrs	r3, r1
 800a0d2:	f040 80a7 	bne.w	800a224 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a0d6:	4b4e      	ldr	r3, [pc, #312]	@ (800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0da:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a0de:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a0e6:	d054      	beq.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a0ee:	f200 808b 	bhi.w	800a208 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a0f8:	f000 8083 	beq.w	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a0fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0fe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a102:	f200 8081 	bhi.w	800a208 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a108:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a10c:	d02f      	beq.n	800a16e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a110:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a114:	d878      	bhi.n	800a208 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d004      	beq.n	800a126 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a122:	d012      	beq.n	800a14a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a124:	e070      	b.n	800a208 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a126:	4b3a      	ldr	r3, [pc, #232]	@ (800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a12e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a132:	d107      	bne.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a134:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a138:	4618      	mov	r0, r3
 800a13a:	f000 feb5 	bl	800aea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a13e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a142:	e3e6      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a144:	2300      	movs	r3, #0
 800a146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a148:	e3e3      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a14a:	4b31      	ldr	r3, [pc, #196]	@ (800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a152:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a156:	d107      	bne.n	800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a158:	f107 0318 	add.w	r3, r7, #24
 800a15c:	4618      	mov	r0, r3
 800a15e:	f000 fbfb 	bl	800a958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a166:	e3d4      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a168:	2300      	movs	r3, #0
 800a16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a16c:	e3d1      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a16e:	4b28      	ldr	r3, [pc, #160]	@ (800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a176:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a17a:	d107      	bne.n	800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a17c:	f107 030c 	add.w	r3, r7, #12
 800a180:	4618      	mov	r0, r3
 800a182:	f000 fd3d 	bl	800ac00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a18a:	e3c2      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a18c:	2300      	movs	r3, #0
 800a18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a190:	e3bf      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a192:	4b1f      	ldr	r3, [pc, #124]	@ (800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a196:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a19a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a19c:	4b1c      	ldr	r3, [pc, #112]	@ (800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 0304 	and.w	r3, r3, #4
 800a1a4:	2b04      	cmp	r3, #4
 800a1a6:	d10c      	bne.n	800a1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a1a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d109      	bne.n	800a1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1ae:	4b18      	ldr	r3, [pc, #96]	@ (800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	08db      	lsrs	r3, r3, #3
 800a1b4:	f003 0303 	and.w	r3, r3, #3
 800a1b8:	4a16      	ldr	r2, [pc, #88]	@ (800a214 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a1ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1c0:	e01e      	b.n	800a200 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1c2:	4b13      	ldr	r3, [pc, #76]	@ (800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1ce:	d106      	bne.n	800a1de <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a1d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1d6:	d102      	bne.n	800a1de <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a1d8:	4b0f      	ldr	r3, [pc, #60]	@ (800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1dc:	e010      	b.n	800a200 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a1de:	4b0c      	ldr	r3, [pc, #48]	@ (800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1ea:	d106      	bne.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a1ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1f2:	d102      	bne.n	800a1fa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a1f4:	4b09      	ldr	r3, [pc, #36]	@ (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1f8:	e002      	b.n	800a200 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a1fe:	e388      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a200:	e387      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a202:	4b07      	ldr	r3, [pc, #28]	@ (800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a206:	e384      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a208:	2300      	movs	r3, #0
 800a20a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a20c:	e381      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a20e:	bf00      	nop
 800a210:	58024400 	.word	0x58024400
 800a214:	03d09000 	.word	0x03d09000
 800a218:	003d0900 	.word	0x003d0900
 800a21c:	017d7840 	.word	0x017d7840
 800a220:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a224:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a228:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a22c:	430b      	orrs	r3, r1
 800a22e:	f040 809c 	bne.w	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a232:	4b9e      	ldr	r3, [pc, #632]	@ (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a236:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a23a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a23e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a242:	d054      	beq.n	800a2ee <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a246:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a24a:	f200 808b 	bhi.w	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a250:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a254:	f000 8083 	beq.w	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a25a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a25e:	f200 8081 	bhi.w	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a264:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a268:	d02f      	beq.n	800a2ca <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a270:	d878      	bhi.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a274:	2b00      	cmp	r3, #0
 800a276:	d004      	beq.n	800a282 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a27e:	d012      	beq.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a280:	e070      	b.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a282:	4b8a      	ldr	r3, [pc, #552]	@ (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a28a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a28e:	d107      	bne.n	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a290:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a294:	4618      	mov	r0, r3
 800a296:	f000 fe07 	bl	800aea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a29c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a29e:	e338      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2a4:	e335      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2a6:	4b81      	ldr	r3, [pc, #516]	@ (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2b2:	d107      	bne.n	800a2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2b4:	f107 0318 	add.w	r3, r7, #24
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f000 fb4d 	bl	800a958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2c2:	e326      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2c8:	e323      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2ca:	4b78      	ldr	r3, [pc, #480]	@ (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2d6:	d107      	bne.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2d8:	f107 030c 	add.w	r3, r7, #12
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f000 fc8f 	bl	800ac00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2e6:	e314      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2ec:	e311      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a2ee:	4b6f      	ldr	r3, [pc, #444]	@ (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a2f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a2f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a2f8:	4b6c      	ldr	r3, [pc, #432]	@ (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 0304 	and.w	r3, r3, #4
 800a300:	2b04      	cmp	r3, #4
 800a302:	d10c      	bne.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a306:	2b00      	cmp	r3, #0
 800a308:	d109      	bne.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a30a:	4b68      	ldr	r3, [pc, #416]	@ (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	08db      	lsrs	r3, r3, #3
 800a310:	f003 0303 	and.w	r3, r3, #3
 800a314:	4a66      	ldr	r2, [pc, #408]	@ (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a316:	fa22 f303 	lsr.w	r3, r2, r3
 800a31a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a31c:	e01e      	b.n	800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a31e:	4b63      	ldr	r3, [pc, #396]	@ (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a326:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a32a:	d106      	bne.n	800a33a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a32c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a32e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a332:	d102      	bne.n	800a33a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a334:	4b5f      	ldr	r3, [pc, #380]	@ (800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a336:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a338:	e010      	b.n	800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a33a:	4b5c      	ldr	r3, [pc, #368]	@ (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a342:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a346:	d106      	bne.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a34a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a34e:	d102      	bne.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a350:	4b59      	ldr	r3, [pc, #356]	@ (800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a352:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a354:	e002      	b.n	800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a356:	2300      	movs	r3, #0
 800a358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a35a:	e2da      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a35c:	e2d9      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a35e:	4b57      	ldr	r3, [pc, #348]	@ (800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a362:	e2d6      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a364:	2300      	movs	r3, #0
 800a366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a368:	e2d3      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a36a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a36e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a372:	430b      	orrs	r3, r1
 800a374:	f040 80a7 	bne.w	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a378:	4b4c      	ldr	r3, [pc, #304]	@ (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a37a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a37c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a380:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a384:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a388:	d055      	beq.n	800a436 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a38c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a390:	f200 8096 	bhi.w	800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a396:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a39a:	f000 8084 	beq.w	800a4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a39e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a3a4:	f200 808c 	bhi.w	800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3ae:	d030      	beq.n	800a412 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a3b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3b6:	f200 8083 	bhi.w	800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d004      	beq.n	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800a3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3c6:	d012      	beq.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a3c8:	e07a      	b.n	800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3ca:	4b38      	ldr	r3, [pc, #224]	@ (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a3d6:	d107      	bne.n	800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f000 fd63 	bl	800aea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3e6:	e294      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3ec:	e291      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3ee:	4b2f      	ldr	r3, [pc, #188]	@ (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3fa:	d107      	bne.n	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3fc:	f107 0318 	add.w	r3, r7, #24
 800a400:	4618      	mov	r0, r3
 800a402:	f000 faa9 	bl	800a958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a40a:	e282      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a40c:	2300      	movs	r3, #0
 800a40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a410:	e27f      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a412:	4b26      	ldr	r3, [pc, #152]	@ (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a41a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a41e:	d107      	bne.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a420:	f107 030c 	add.w	r3, r7, #12
 800a424:	4618      	mov	r0, r3
 800a426:	f000 fbeb 	bl	800ac00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a42e:	e270      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a430:	2300      	movs	r3, #0
 800a432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a434:	e26d      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a436:	4b1d      	ldr	r3, [pc, #116]	@ (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a43a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a43e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a440:	4b1a      	ldr	r3, [pc, #104]	@ (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f003 0304 	and.w	r3, r3, #4
 800a448:	2b04      	cmp	r3, #4
 800a44a:	d10c      	bne.n	800a466 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800a44c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d109      	bne.n	800a466 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a452:	4b16      	ldr	r3, [pc, #88]	@ (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	08db      	lsrs	r3, r3, #3
 800a458:	f003 0303 	and.w	r3, r3, #3
 800a45c:	4a14      	ldr	r2, [pc, #80]	@ (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a45e:	fa22 f303 	lsr.w	r3, r2, r3
 800a462:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a464:	e01e      	b.n	800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a466:	4b11      	ldr	r3, [pc, #68]	@ (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a46e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a472:	d106      	bne.n	800a482 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a476:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a47a:	d102      	bne.n	800a482 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a47c:	4b0d      	ldr	r3, [pc, #52]	@ (800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a480:	e010      	b.n	800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a482:	4b0a      	ldr	r3, [pc, #40]	@ (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a48a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a48e:	d106      	bne.n	800a49e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800a490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a492:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a496:	d102      	bne.n	800a49e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a498:	4b07      	ldr	r3, [pc, #28]	@ (800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a49a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a49c:	e002      	b.n	800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a4a2:	e236      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a4a4:	e235      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a4a6:	4b05      	ldr	r3, [pc, #20]	@ (800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a4a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4aa:	e232      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a4ac:	58024400 	.word	0x58024400
 800a4b0:	03d09000 	.word	0x03d09000
 800a4b4:	003d0900 	.word	0x003d0900
 800a4b8:	017d7840 	.word	0x017d7840
 800a4bc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4c4:	e225      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a4c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4ca:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a4ce:	430b      	orrs	r3, r1
 800a4d0:	f040 8085 	bne.w	800a5de <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a4d4:	4b9c      	ldr	r3, [pc, #624]	@ (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a4d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4d8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a4dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a4de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a4e4:	d06b      	beq.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a4e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a4ec:	d874      	bhi.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a4f4:	d056      	beq.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a4fc:	d86c      	bhi.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a500:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a504:	d03b      	beq.n	800a57e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a508:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a50c:	d864      	bhi.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a510:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a514:	d021      	beq.n	800a55a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a518:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a51c:	d85c      	bhi.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a520:	2b00      	cmp	r3, #0
 800a522:	d004      	beq.n	800a52e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a526:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a52a:	d004      	beq.n	800a536 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a52c:	e054      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a52e:	f7fe fb5f 	bl	8008bf0 <HAL_RCC_GetPCLK1Freq>
 800a532:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a534:	e1ed      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a536:	4b84      	ldr	r3, [pc, #528]	@ (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a53e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a542:	d107      	bne.n	800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a544:	f107 0318 	add.w	r3, r7, #24
 800a548:	4618      	mov	r0, r3
 800a54a:	f000 fa05 	bl	800a958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a552:	e1de      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a554:	2300      	movs	r3, #0
 800a556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a558:	e1db      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a55a:	4b7b      	ldr	r3, [pc, #492]	@ (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a562:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a566:	d107      	bne.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a568:	f107 030c 	add.w	r3, r7, #12
 800a56c:	4618      	mov	r0, r3
 800a56e:	f000 fb47 	bl	800ac00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a576:	e1cc      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a578:	2300      	movs	r3, #0
 800a57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a57c:	e1c9      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a57e:	4b72      	ldr	r3, [pc, #456]	@ (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f003 0304 	and.w	r3, r3, #4
 800a586:	2b04      	cmp	r3, #4
 800a588:	d109      	bne.n	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a58a:	4b6f      	ldr	r3, [pc, #444]	@ (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	08db      	lsrs	r3, r3, #3
 800a590:	f003 0303 	and.w	r3, r3, #3
 800a594:	4a6d      	ldr	r2, [pc, #436]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a596:	fa22 f303 	lsr.w	r3, r2, r3
 800a59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a59c:	e1b9      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5a2:	e1b6      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a5a4:	4b68      	ldr	r3, [pc, #416]	@ (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5b0:	d102      	bne.n	800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a5b2:	4b67      	ldr	r3, [pc, #412]	@ (800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a5b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5b6:	e1ac      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5bc:	e1a9      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a5be:	4b62      	ldr	r3, [pc, #392]	@ (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5ca:	d102      	bne.n	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a5cc:	4b61      	ldr	r3, [pc, #388]	@ (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a5ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5d0:	e19f      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5d6:	e19c      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5dc:	e199      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a5de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5e2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a5e6:	430b      	orrs	r3, r1
 800a5e8:	d173      	bne.n	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a5ea:	4b57      	ldr	r3, [pc, #348]	@ (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a5f2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5fa:	d02f      	beq.n	800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a602:	d863      	bhi.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a606:	2b00      	cmp	r3, #0
 800a608:	d004      	beq.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a60a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a610:	d012      	beq.n	800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a612:	e05b      	b.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a614:	4b4c      	ldr	r3, [pc, #304]	@ (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a61c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a620:	d107      	bne.n	800a632 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a622:	f107 0318 	add.w	r3, r7, #24
 800a626:	4618      	mov	r0, r3
 800a628:	f000 f996 	bl	800a958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a630:	e16f      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a632:	2300      	movs	r3, #0
 800a634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a636:	e16c      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a638:	4b43      	ldr	r3, [pc, #268]	@ (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a640:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a644:	d107      	bne.n	800a656 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a646:	f107 030c 	add.w	r3, r7, #12
 800a64a:	4618      	mov	r0, r3
 800a64c:	f000 fad8 	bl	800ac00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a654:	e15d      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a656:	2300      	movs	r3, #0
 800a658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a65a:	e15a      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a65c:	4b3a      	ldr	r3, [pc, #232]	@ (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a65e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a660:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a664:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a666:	4b38      	ldr	r3, [pc, #224]	@ (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f003 0304 	and.w	r3, r3, #4
 800a66e:	2b04      	cmp	r3, #4
 800a670:	d10c      	bne.n	800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a674:	2b00      	cmp	r3, #0
 800a676:	d109      	bne.n	800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a678:	4b33      	ldr	r3, [pc, #204]	@ (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	08db      	lsrs	r3, r3, #3
 800a67e:	f003 0303 	and.w	r3, r3, #3
 800a682:	4a32      	ldr	r2, [pc, #200]	@ (800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a684:	fa22 f303 	lsr.w	r3, r2, r3
 800a688:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a68a:	e01e      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a68c:	4b2e      	ldr	r3, [pc, #184]	@ (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a698:	d106      	bne.n	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a69a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a69c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6a0:	d102      	bne.n	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a6a2:	4b2b      	ldr	r3, [pc, #172]	@ (800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a6a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6a6:	e010      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6a8:	4b27      	ldr	r3, [pc, #156]	@ (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6b4:	d106      	bne.n	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a6b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6bc:	d102      	bne.n	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6be:	4b25      	ldr	r3, [pc, #148]	@ (800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a6c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6c2:	e002      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a6c8:	e123      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a6ca:	e122      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6d0:	e11f      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a6d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6d6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a6da:	430b      	orrs	r3, r1
 800a6dc:	d13c      	bne.n	800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a6de:	4b1a      	ldr	r3, [pc, #104]	@ (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a6e6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d004      	beq.n	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a6ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6f4:	d012      	beq.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a6f6:	e023      	b.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6f8:	4b13      	ldr	r3, [pc, #76]	@ (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a700:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a704:	d107      	bne.n	800a716 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 fbcc 	bl	800aea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a714:	e0fd      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a716:	2300      	movs	r3, #0
 800a718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a71a:	e0fa      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a71c:	4b0a      	ldr	r3, [pc, #40]	@ (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a724:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a728:	d107      	bne.n	800a73a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a72a:	f107 0318 	add.w	r3, r7, #24
 800a72e:	4618      	mov	r0, r3
 800a730:	f000 f912 	bl	800a958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a734:	6a3b      	ldr	r3, [r7, #32]
 800a736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a738:	e0eb      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a73a:	2300      	movs	r3, #0
 800a73c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a73e:	e0e8      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a740:	2300      	movs	r3, #0
 800a742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a744:	e0e5      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a746:	bf00      	nop
 800a748:	58024400 	.word	0x58024400
 800a74c:	03d09000 	.word	0x03d09000
 800a750:	003d0900 	.word	0x003d0900
 800a754:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a75c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a760:	430b      	orrs	r3, r1
 800a762:	f040 8085 	bne.w	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a766:	4b6d      	ldr	r3, [pc, #436]	@ (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a76a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a76e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a772:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a776:	d06b      	beq.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a77a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a77e:	d874      	bhi.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a786:	d056      	beq.n	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a78a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a78e:	d86c      	bhi.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a792:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a796:	d03b      	beq.n	800a810 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a79a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a79e:	d864      	bhi.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7a6:	d021      	beq.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7ae:	d85c      	bhi.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d004      	beq.n	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800a7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7bc:	d004      	beq.n	800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a7be:	e054      	b.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a7c0:	f000 f8b4 	bl	800a92c <HAL_RCCEx_GetD3PCLK1Freq>
 800a7c4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a7c6:	e0a4      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7c8:	4b54      	ldr	r3, [pc, #336]	@ (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7d4:	d107      	bne.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7d6:	f107 0318 	add.w	r3, r7, #24
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f000 f8bc 	bl	800a958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a7e0:	69fb      	ldr	r3, [r7, #28]
 800a7e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7e4:	e095      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7ea:	e092      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7ec:	4b4b      	ldr	r3, [pc, #300]	@ (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7f8:	d107      	bne.n	800a80a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7fa:	f107 030c 	add.w	r3, r7, #12
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 f9fe 	bl	800ac00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a808:	e083      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a80a:	2300      	movs	r3, #0
 800a80c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a80e:	e080      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a810:	4b42      	ldr	r3, [pc, #264]	@ (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f003 0304 	and.w	r3, r3, #4
 800a818:	2b04      	cmp	r3, #4
 800a81a:	d109      	bne.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a81c:	4b3f      	ldr	r3, [pc, #252]	@ (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	08db      	lsrs	r3, r3, #3
 800a822:	f003 0303 	and.w	r3, r3, #3
 800a826:	4a3e      	ldr	r2, [pc, #248]	@ (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a828:	fa22 f303 	lsr.w	r3, r2, r3
 800a82c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a82e:	e070      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a830:	2300      	movs	r3, #0
 800a832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a834:	e06d      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a836:	4b39      	ldr	r3, [pc, #228]	@ (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a83e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a842:	d102      	bne.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a844:	4b37      	ldr	r3, [pc, #220]	@ (800a924 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a848:	e063      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a84a:	2300      	movs	r3, #0
 800a84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a84e:	e060      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a850:	4b32      	ldr	r3, [pc, #200]	@ (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a858:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a85c:	d102      	bne.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800a85e:	4b32      	ldr	r3, [pc, #200]	@ (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a862:	e056      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a864:	2300      	movs	r3, #0
 800a866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a868:	e053      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a86a:	2300      	movs	r3, #0
 800a86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a86e:	e050      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a870:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a874:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a878:	430b      	orrs	r3, r1
 800a87a:	d148      	bne.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a87c:	4b27      	ldr	r3, [pc, #156]	@ (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a87e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a880:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a884:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a888:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a88c:	d02a      	beq.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a890:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a894:	d838      	bhi.n	800a908 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d004      	beq.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a89e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8a2:	d00d      	beq.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a8a4:	e030      	b.n	800a908 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a8a6:	4b1d      	ldr	r3, [pc, #116]	@ (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8b2:	d102      	bne.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800a8b4:	4b1c      	ldr	r3, [pc, #112]	@ (800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8b8:	e02b      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8be:	e028      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8c0:	4b16      	ldr	r3, [pc, #88]	@ (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8cc:	d107      	bne.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f000 fae8 	bl	800aea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8dc:	e019      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8e2:	e016      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8e4:	4b0d      	ldr	r3, [pc, #52]	@ (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8f0:	d107      	bne.n	800a902 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8f2:	f107 0318 	add.w	r3, r7, #24
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f000 f82e 	bl	800a958 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a900:	e007      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a902:	2300      	movs	r3, #0
 800a904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a906:	e004      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a908:	2300      	movs	r3, #0
 800a90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a90c:	e001      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800a90e:	2300      	movs	r3, #0
 800a910:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a914:	4618      	mov	r0, r3
 800a916:	3740      	adds	r7, #64	@ 0x40
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	58024400 	.word	0x58024400
 800a920:	03d09000 	.word	0x03d09000
 800a924:	003d0900 	.word	0x003d0900
 800a928:	017d7840 	.word	0x017d7840

0800a92c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a930:	f7fe f92e 	bl	8008b90 <HAL_RCC_GetHCLKFreq>
 800a934:	4602      	mov	r2, r0
 800a936:	4b06      	ldr	r3, [pc, #24]	@ (800a950 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a938:	6a1b      	ldr	r3, [r3, #32]
 800a93a:	091b      	lsrs	r3, r3, #4
 800a93c:	f003 0307 	and.w	r3, r3, #7
 800a940:	4904      	ldr	r1, [pc, #16]	@ (800a954 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a942:	5ccb      	ldrb	r3, [r1, r3]
 800a944:	f003 031f 	and.w	r3, r3, #31
 800a948:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	58024400 	.word	0x58024400
 800a954:	0800fbf8 	.word	0x0800fbf8

0800a958 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a958:	b480      	push	{r7}
 800a95a:	b089      	sub	sp, #36	@ 0x24
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a960:	4ba1      	ldr	r3, [pc, #644]	@ (800abe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a964:	f003 0303 	and.w	r3, r3, #3
 800a968:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a96a:	4b9f      	ldr	r3, [pc, #636]	@ (800abe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a96c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a96e:	0b1b      	lsrs	r3, r3, #12
 800a970:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a974:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a976:	4b9c      	ldr	r3, [pc, #624]	@ (800abe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a97a:	091b      	lsrs	r3, r3, #4
 800a97c:	f003 0301 	and.w	r3, r3, #1
 800a980:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a982:	4b99      	ldr	r3, [pc, #612]	@ (800abe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a986:	08db      	lsrs	r3, r3, #3
 800a988:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a98c:	693a      	ldr	r2, [r7, #16]
 800a98e:	fb02 f303 	mul.w	r3, r2, r3
 800a992:	ee07 3a90 	vmov	s15, r3
 800a996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a99a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f000 8111 	beq.w	800abc8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	2b02      	cmp	r3, #2
 800a9aa:	f000 8083 	beq.w	800aab4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	2b02      	cmp	r3, #2
 800a9b2:	f200 80a1 	bhi.w	800aaf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d003      	beq.n	800a9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d056      	beq.n	800aa70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a9c2:	e099      	b.n	800aaf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9c4:	4b88      	ldr	r3, [pc, #544]	@ (800abe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f003 0320 	and.w	r3, r3, #32
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d02d      	beq.n	800aa2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9d0:	4b85      	ldr	r3, [pc, #532]	@ (800abe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	08db      	lsrs	r3, r3, #3
 800a9d6:	f003 0303 	and.w	r3, r3, #3
 800a9da:	4a84      	ldr	r2, [pc, #528]	@ (800abec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a9dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a9e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	ee07 3a90 	vmov	s15, r3
 800a9e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	ee07 3a90 	vmov	s15, r3
 800a9f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9fa:	4b7b      	ldr	r3, [pc, #492]	@ (800abe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa02:	ee07 3a90 	vmov	s15, r3
 800aa06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa0e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800abf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aa2a:	e087      	b.n	800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	ee07 3a90 	vmov	s15, r3
 800aa32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa36:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aa3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa3e:	4b6a      	ldr	r3, [pc, #424]	@ (800abe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa46:	ee07 3a90 	vmov	s15, r3
 800aa4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa52:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800abf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa6e:	e065      	b.n	800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	ee07 3a90 	vmov	s15, r3
 800aa76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa7a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa82:	4b59      	ldr	r3, [pc, #356]	@ (800abe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa8a:	ee07 3a90 	vmov	s15, r3
 800aa8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa92:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa96:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800abf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aaa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aab2:	e043      	b.n	800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	ee07 3a90 	vmov	s15, r3
 800aaba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aabe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aac6:	4b48      	ldr	r3, [pc, #288]	@ (800abe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aace:	ee07 3a90 	vmov	s15, r3
 800aad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aad6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aada:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800abf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aaea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaf6:	e021      	b.n	800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	ee07 3a90 	vmov	s15, r3
 800aafe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab02:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab0a:	4b37      	ldr	r3, [pc, #220]	@ (800abe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab12:	ee07 3a90 	vmov	s15, r3
 800ab16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab1e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800abf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ab3c:	4b2a      	ldr	r3, [pc, #168]	@ (800abe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab40:	0a5b      	lsrs	r3, r3, #9
 800ab42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab46:	ee07 3a90 	vmov	s15, r3
 800ab4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab56:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab62:	ee17 2a90 	vmov	r2, s15
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ab6a:	4b1f      	ldr	r3, [pc, #124]	@ (800abe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab6e:	0c1b      	lsrs	r3, r3, #16
 800ab70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab74:	ee07 3a90 	vmov	s15, r3
 800ab78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab80:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab84:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab90:	ee17 2a90 	vmov	r2, s15
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ab98:	4b13      	ldr	r3, [pc, #76]	@ (800abe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab9c:	0e1b      	lsrs	r3, r3, #24
 800ab9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aba2:	ee07 3a90 	vmov	s15, r3
 800aba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800abb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abbe:	ee17 2a90 	vmov	r2, s15
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800abc6:	e008      	b.n	800abda <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2200      	movs	r2, #0
 800abcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2200      	movs	r2, #0
 800abd8:	609a      	str	r2, [r3, #8]
}
 800abda:	bf00      	nop
 800abdc:	3724      	adds	r7, #36	@ 0x24
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	58024400 	.word	0x58024400
 800abec:	03d09000 	.word	0x03d09000
 800abf0:	46000000 	.word	0x46000000
 800abf4:	4c742400 	.word	0x4c742400
 800abf8:	4a742400 	.word	0x4a742400
 800abfc:	4bbebc20 	.word	0x4bbebc20

0800ac00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b089      	sub	sp, #36	@ 0x24
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac08:	4ba1      	ldr	r3, [pc, #644]	@ (800ae90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac0c:	f003 0303 	and.w	r3, r3, #3
 800ac10:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ac12:	4b9f      	ldr	r3, [pc, #636]	@ (800ae90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac16:	0d1b      	lsrs	r3, r3, #20
 800ac18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac1c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ac1e:	4b9c      	ldr	r3, [pc, #624]	@ (800ae90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac22:	0a1b      	lsrs	r3, r3, #8
 800ac24:	f003 0301 	and.w	r3, r3, #1
 800ac28:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ac2a:	4b99      	ldr	r3, [pc, #612]	@ (800ae90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac2e:	08db      	lsrs	r3, r3, #3
 800ac30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac34:	693a      	ldr	r2, [r7, #16]
 800ac36:	fb02 f303 	mul.w	r3, r2, r3
 800ac3a:	ee07 3a90 	vmov	s15, r3
 800ac3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f000 8111 	beq.w	800ae70 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	2b02      	cmp	r3, #2
 800ac52:	f000 8083 	beq.w	800ad5c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ac56:	69bb      	ldr	r3, [r7, #24]
 800ac58:	2b02      	cmp	r3, #2
 800ac5a:	f200 80a1 	bhi.w	800ada0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ac5e:	69bb      	ldr	r3, [r7, #24]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d003      	beq.n	800ac6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ac64:	69bb      	ldr	r3, [r7, #24]
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d056      	beq.n	800ad18 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ac6a:	e099      	b.n	800ada0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac6c:	4b88      	ldr	r3, [pc, #544]	@ (800ae90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f003 0320 	and.w	r3, r3, #32
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d02d      	beq.n	800acd4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac78:	4b85      	ldr	r3, [pc, #532]	@ (800ae90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	08db      	lsrs	r3, r3, #3
 800ac7e:	f003 0303 	and.w	r3, r3, #3
 800ac82:	4a84      	ldr	r2, [pc, #528]	@ (800ae94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ac84:	fa22 f303 	lsr.w	r3, r2, r3
 800ac88:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	ee07 3a90 	vmov	s15, r3
 800ac90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	ee07 3a90 	vmov	s15, r3
 800ac9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aca2:	4b7b      	ldr	r3, [pc, #492]	@ (800ae90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acaa:	ee07 3a90 	vmov	s15, r3
 800acae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800acb6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ae98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800acd2:	e087      	b.n	800ade4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	ee07 3a90 	vmov	s15, r3
 800acda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acde:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ace2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ace6:	4b6a      	ldr	r3, [pc, #424]	@ (800ae90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ace8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acee:	ee07 3a90 	vmov	s15, r3
 800acf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800acfa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ae98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad16:	e065      	b.n	800ade4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	ee07 3a90 	vmov	s15, r3
 800ad1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800aea0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad2a:	4b59      	ldr	r3, [pc, #356]	@ (800ae90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad32:	ee07 3a90 	vmov	s15, r3
 800ad36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ae98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad5a:	e043      	b.n	800ade4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	ee07 3a90 	vmov	s15, r3
 800ad62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ad6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad6e:	4b48      	ldr	r3, [pc, #288]	@ (800ae90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad76:	ee07 3a90 	vmov	s15, r3
 800ad7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ae98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad9e:	e021      	b.n	800ade4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	ee07 3a90 	vmov	s15, r3
 800ada6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adaa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800aea0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800adae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adb2:	4b37      	ldr	r3, [pc, #220]	@ (800ae90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adba:	ee07 3a90 	vmov	s15, r3
 800adbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800adc6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ae98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800add2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800add6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ade2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ade4:	4b2a      	ldr	r3, [pc, #168]	@ (800ae90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ade6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ade8:	0a5b      	lsrs	r3, r3, #9
 800adea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adee:	ee07 3a90 	vmov	s15, r3
 800adf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800adfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adfe:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae0a:	ee17 2a90 	vmov	r2, s15
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ae12:	4b1f      	ldr	r3, [pc, #124]	@ (800ae90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae16:	0c1b      	lsrs	r3, r3, #16
 800ae18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae1c:	ee07 3a90 	vmov	s15, r3
 800ae20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae28:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae38:	ee17 2a90 	vmov	r2, s15
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ae40:	4b13      	ldr	r3, [pc, #76]	@ (800ae90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae44:	0e1b      	lsrs	r3, r3, #24
 800ae46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae4a:	ee07 3a90 	vmov	s15, r3
 800ae4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae66:	ee17 2a90 	vmov	r2, s15
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ae6e:	e008      	b.n	800ae82 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	609a      	str	r2, [r3, #8]
}
 800ae82:	bf00      	nop
 800ae84:	3724      	adds	r7, #36	@ 0x24
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	58024400 	.word	0x58024400
 800ae94:	03d09000 	.word	0x03d09000
 800ae98:	46000000 	.word	0x46000000
 800ae9c:	4c742400 	.word	0x4c742400
 800aea0:	4a742400 	.word	0x4a742400
 800aea4:	4bbebc20 	.word	0x4bbebc20

0800aea8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b089      	sub	sp, #36	@ 0x24
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aeb0:	4ba0      	ldr	r3, [pc, #640]	@ (800b134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aeb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeb4:	f003 0303 	and.w	r3, r3, #3
 800aeb8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800aeba:	4b9e      	ldr	r3, [pc, #632]	@ (800b134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aebe:	091b      	lsrs	r3, r3, #4
 800aec0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aec4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800aec6:	4b9b      	ldr	r3, [pc, #620]	@ (800b134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeca:	f003 0301 	and.w	r3, r3, #1
 800aece:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aed0:	4b98      	ldr	r3, [pc, #608]	@ (800b134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aed4:	08db      	lsrs	r3, r3, #3
 800aed6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aeda:	693a      	ldr	r2, [r7, #16]
 800aedc:	fb02 f303 	mul.w	r3, r2, r3
 800aee0:	ee07 3a90 	vmov	s15, r3
 800aee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aee8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	f000 8111 	beq.w	800b116 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800aef4:	69bb      	ldr	r3, [r7, #24]
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	f000 8083 	beq.w	800b002 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	2b02      	cmp	r3, #2
 800af00:	f200 80a1 	bhi.w	800b046 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800af04:	69bb      	ldr	r3, [r7, #24]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d003      	beq.n	800af12 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800af0a:	69bb      	ldr	r3, [r7, #24]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d056      	beq.n	800afbe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800af10:	e099      	b.n	800b046 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af12:	4b88      	ldr	r3, [pc, #544]	@ (800b134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f003 0320 	and.w	r3, r3, #32
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d02d      	beq.n	800af7a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af1e:	4b85      	ldr	r3, [pc, #532]	@ (800b134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	08db      	lsrs	r3, r3, #3
 800af24:	f003 0303 	and.w	r3, r3, #3
 800af28:	4a83      	ldr	r2, [pc, #524]	@ (800b138 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800af2a:	fa22 f303 	lsr.w	r3, r2, r3
 800af2e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	ee07 3a90 	vmov	s15, r3
 800af36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	ee07 3a90 	vmov	s15, r3
 800af40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af48:	4b7a      	ldr	r3, [pc, #488]	@ (800b134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af50:	ee07 3a90 	vmov	s15, r3
 800af54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af58:	ed97 6a03 	vldr	s12, [r7, #12]
 800af5c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b13c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af74:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800af78:	e087      	b.n	800b08a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	ee07 3a90 	vmov	s15, r3
 800af80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af84:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800af88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af8c:	4b69      	ldr	r3, [pc, #420]	@ (800b134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af94:	ee07 3a90 	vmov	s15, r3
 800af98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af9c:	ed97 6a03 	vldr	s12, [r7, #12]
 800afa0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b13c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800afa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afbc:	e065      	b.n	800b08a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	ee07 3a90 	vmov	s15, r3
 800afc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afc8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b144 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800afcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afd0:	4b58      	ldr	r3, [pc, #352]	@ (800b134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afd8:	ee07 3a90 	vmov	s15, r3
 800afdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afe0:	ed97 6a03 	vldr	s12, [r7, #12]
 800afe4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b13c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800afe8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aff0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aff4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800affc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b000:	e043      	b.n	800b08a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	ee07 3a90 	vmov	s15, r3
 800b008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b00c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b148 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b014:	4b47      	ldr	r3, [pc, #284]	@ (800b134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b01c:	ee07 3a90 	vmov	s15, r3
 800b020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b024:	ed97 6a03 	vldr	s12, [r7, #12]
 800b028:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b13c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b02c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b030:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b034:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b038:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b03c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b040:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b044:	e021      	b.n	800b08a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	ee07 3a90 	vmov	s15, r3
 800b04c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b050:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b054:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b058:	4b36      	ldr	r3, [pc, #216]	@ (800b134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b05a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b05c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b060:	ee07 3a90 	vmov	s15, r3
 800b064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b068:	ed97 6a03 	vldr	s12, [r7, #12]
 800b06c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b13c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b070:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b074:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b078:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b07c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b080:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b084:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b088:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b08a:	4b2a      	ldr	r3, [pc, #168]	@ (800b134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b08c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b08e:	0a5b      	lsrs	r3, r3, #9
 800b090:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b094:	ee07 3a90 	vmov	s15, r3
 800b098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b09c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0b0:	ee17 2a90 	vmov	r2, s15
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b0b8:	4b1e      	ldr	r3, [pc, #120]	@ (800b134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0bc:	0c1b      	lsrs	r3, r3, #16
 800b0be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0c2:	ee07 3a90 	vmov	s15, r3
 800b0c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0de:	ee17 2a90 	vmov	r2, s15
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b0e6:	4b13      	ldr	r3, [pc, #76]	@ (800b134 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0ea:	0e1b      	lsrs	r3, r3, #24
 800b0ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0f0:	ee07 3a90 	vmov	s15, r3
 800b0f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b100:	edd7 6a07 	vldr	s13, [r7, #28]
 800b104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b10c:	ee17 2a90 	vmov	r2, s15
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b114:	e008      	b.n	800b128 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2200      	movs	r2, #0
 800b11a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	609a      	str	r2, [r3, #8]
}
 800b128:	bf00      	nop
 800b12a:	3724      	adds	r7, #36	@ 0x24
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr
 800b134:	58024400 	.word	0x58024400
 800b138:	03d09000 	.word	0x03d09000
 800b13c:	46000000 	.word	0x46000000
 800b140:	4c742400 	.word	0x4c742400
 800b144:	4a742400 	.word	0x4a742400
 800b148:	4bbebc20 	.word	0x4bbebc20

0800b14c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b156:	2300      	movs	r3, #0
 800b158:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b15a:	4b53      	ldr	r3, [pc, #332]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b15c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b15e:	f003 0303 	and.w	r3, r3, #3
 800b162:	2b03      	cmp	r3, #3
 800b164:	d101      	bne.n	800b16a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	e099      	b.n	800b29e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b16a:	4b4f      	ldr	r3, [pc, #316]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4a4e      	ldr	r2, [pc, #312]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b170:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b174:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b176:	f7f7 fb9b 	bl	80028b0 <HAL_GetTick>
 800b17a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b17c:	e008      	b.n	800b190 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b17e:	f7f7 fb97 	bl	80028b0 <HAL_GetTick>
 800b182:	4602      	mov	r2, r0
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	1ad3      	subs	r3, r2, r3
 800b188:	2b02      	cmp	r3, #2
 800b18a:	d901      	bls.n	800b190 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b18c:	2303      	movs	r3, #3
 800b18e:	e086      	b.n	800b29e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b190:	4b45      	ldr	r3, [pc, #276]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d1f0      	bne.n	800b17e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b19c:	4b42      	ldr	r3, [pc, #264]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b19e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1a0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	031b      	lsls	r3, r3, #12
 800b1aa:	493f      	ldr	r1, [pc, #252]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	628b      	str	r3, [r1, #40]	@ 0x28
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	025b      	lsls	r3, r3, #9
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	431a      	orrs	r2, r3
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	3b01      	subs	r3, #1
 800b1cc:	041b      	lsls	r3, r3, #16
 800b1ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b1d2:	431a      	orrs	r2, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	691b      	ldr	r3, [r3, #16]
 800b1d8:	3b01      	subs	r3, #1
 800b1da:	061b      	lsls	r3, r3, #24
 800b1dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b1e0:	4931      	ldr	r1, [pc, #196]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b1e6:	4b30      	ldr	r3, [pc, #192]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b1e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	695b      	ldr	r3, [r3, #20]
 800b1f2:	492d      	ldr	r1, [pc, #180]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b1f8:	4b2b      	ldr	r3, [pc, #172]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1fc:	f023 0220 	bic.w	r2, r3, #32
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	699b      	ldr	r3, [r3, #24]
 800b204:	4928      	ldr	r1, [pc, #160]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b206:	4313      	orrs	r3, r2
 800b208:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b20a:	4b27      	ldr	r3, [pc, #156]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b20c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b20e:	4a26      	ldr	r2, [pc, #152]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b210:	f023 0310 	bic.w	r3, r3, #16
 800b214:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b216:	4b24      	ldr	r3, [pc, #144]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b218:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b21a:	4b24      	ldr	r3, [pc, #144]	@ (800b2ac <RCCEx_PLL2_Config+0x160>)
 800b21c:	4013      	ands	r3, r2
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	69d2      	ldr	r2, [r2, #28]
 800b222:	00d2      	lsls	r2, r2, #3
 800b224:	4920      	ldr	r1, [pc, #128]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b226:	4313      	orrs	r3, r2
 800b228:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b22a:	4b1f      	ldr	r3, [pc, #124]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b22c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b22e:	4a1e      	ldr	r2, [pc, #120]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b230:	f043 0310 	orr.w	r3, r3, #16
 800b234:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d106      	bne.n	800b24a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b23c:	4b1a      	ldr	r3, [pc, #104]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b240:	4a19      	ldr	r2, [pc, #100]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b242:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b246:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b248:	e00f      	b.n	800b26a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d106      	bne.n	800b25e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b250:	4b15      	ldr	r3, [pc, #84]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b254:	4a14      	ldr	r2, [pc, #80]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b256:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b25a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b25c:	e005      	b.n	800b26a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b25e:	4b12      	ldr	r3, [pc, #72]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b262:	4a11      	ldr	r2, [pc, #68]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b264:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b268:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b26a:	4b0f      	ldr	r3, [pc, #60]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a0e      	ldr	r2, [pc, #56]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b270:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b274:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b276:	f7f7 fb1b 	bl	80028b0 <HAL_GetTick>
 800b27a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b27c:	e008      	b.n	800b290 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b27e:	f7f7 fb17 	bl	80028b0 <HAL_GetTick>
 800b282:	4602      	mov	r2, r0
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	1ad3      	subs	r3, r2, r3
 800b288:	2b02      	cmp	r3, #2
 800b28a:	d901      	bls.n	800b290 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b28c:	2303      	movs	r3, #3
 800b28e:	e006      	b.n	800b29e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b290:	4b05      	ldr	r3, [pc, #20]	@ (800b2a8 <RCCEx_PLL2_Config+0x15c>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d0f0      	beq.n	800b27e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3710      	adds	r7, #16
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	58024400 	.word	0x58024400
 800b2ac:	ffff0007 	.word	0xffff0007

0800b2b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b2be:	4b53      	ldr	r3, [pc, #332]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b2c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2c2:	f003 0303 	and.w	r3, r3, #3
 800b2c6:	2b03      	cmp	r3, #3
 800b2c8:	d101      	bne.n	800b2ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e099      	b.n	800b402 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b2ce:	4b4f      	ldr	r3, [pc, #316]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4a4e      	ldr	r2, [pc, #312]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b2d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b2d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2da:	f7f7 fae9 	bl	80028b0 <HAL_GetTick>
 800b2de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b2e0:	e008      	b.n	800b2f4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b2e2:	f7f7 fae5 	bl	80028b0 <HAL_GetTick>
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	1ad3      	subs	r3, r2, r3
 800b2ec:	2b02      	cmp	r3, #2
 800b2ee:	d901      	bls.n	800b2f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b2f0:	2303      	movs	r3, #3
 800b2f2:	e086      	b.n	800b402 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b2f4:	4b45      	ldr	r3, [pc, #276]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d1f0      	bne.n	800b2e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b300:	4b42      	ldr	r3, [pc, #264]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b304:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	051b      	lsls	r3, r3, #20
 800b30e:	493f      	ldr	r1, [pc, #252]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b310:	4313      	orrs	r3, r2
 800b312:	628b      	str	r3, [r1, #40]	@ 0x28
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	3b01      	subs	r3, #1
 800b31a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	3b01      	subs	r3, #1
 800b324:	025b      	lsls	r3, r3, #9
 800b326:	b29b      	uxth	r3, r3
 800b328:	431a      	orrs	r2, r3
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	3b01      	subs	r3, #1
 800b330:	041b      	lsls	r3, r3, #16
 800b332:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b336:	431a      	orrs	r2, r3
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	691b      	ldr	r3, [r3, #16]
 800b33c:	3b01      	subs	r3, #1
 800b33e:	061b      	lsls	r3, r3, #24
 800b340:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b344:	4931      	ldr	r1, [pc, #196]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b346:	4313      	orrs	r3, r2
 800b348:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b34a:	4b30      	ldr	r3, [pc, #192]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b34c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b34e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	695b      	ldr	r3, [r3, #20]
 800b356:	492d      	ldr	r1, [pc, #180]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b358:	4313      	orrs	r3, r2
 800b35a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b35c:	4b2b      	ldr	r3, [pc, #172]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b35e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b360:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	699b      	ldr	r3, [r3, #24]
 800b368:	4928      	ldr	r1, [pc, #160]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b36a:	4313      	orrs	r3, r2
 800b36c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b36e:	4b27      	ldr	r3, [pc, #156]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b372:	4a26      	ldr	r2, [pc, #152]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b374:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b378:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b37a:	4b24      	ldr	r3, [pc, #144]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b37c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b37e:	4b24      	ldr	r3, [pc, #144]	@ (800b410 <RCCEx_PLL3_Config+0x160>)
 800b380:	4013      	ands	r3, r2
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	69d2      	ldr	r2, [r2, #28]
 800b386:	00d2      	lsls	r2, r2, #3
 800b388:	4920      	ldr	r1, [pc, #128]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b38a:	4313      	orrs	r3, r2
 800b38c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b38e:	4b1f      	ldr	r3, [pc, #124]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b392:	4a1e      	ldr	r2, [pc, #120]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b398:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d106      	bne.n	800b3ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b3a0:	4b1a      	ldr	r3, [pc, #104]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b3a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3a4:	4a19      	ldr	r2, [pc, #100]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b3a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b3aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b3ac:	e00f      	b.n	800b3ce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d106      	bne.n	800b3c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b3b4:	4b15      	ldr	r3, [pc, #84]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b8:	4a14      	ldr	r2, [pc, #80]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b3ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b3be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b3c0:	e005      	b.n	800b3ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b3c2:	4b12      	ldr	r3, [pc, #72]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b3c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3c6:	4a11      	ldr	r2, [pc, #68]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b3c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b3cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b3ce:	4b0f      	ldr	r3, [pc, #60]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4a0e      	ldr	r2, [pc, #56]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b3d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b3d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3da:	f7f7 fa69 	bl	80028b0 <HAL_GetTick>
 800b3de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b3e0:	e008      	b.n	800b3f4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b3e2:	f7f7 fa65 	bl	80028b0 <HAL_GetTick>
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	1ad3      	subs	r3, r2, r3
 800b3ec:	2b02      	cmp	r3, #2
 800b3ee:	d901      	bls.n	800b3f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b3f0:	2303      	movs	r3, #3
 800b3f2:	e006      	b.n	800b402 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b3f4:	4b05      	ldr	r3, [pc, #20]	@ (800b40c <RCCEx_PLL3_Config+0x15c>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d0f0      	beq.n	800b3e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b400:	7bfb      	ldrb	r3, [r7, #15]
}
 800b402:	4618      	mov	r0, r3
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	58024400 	.word	0x58024400
 800b410:	ffff0007 	.word	0xffff0007

0800b414 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d101      	bne.n	800b426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b422:	2301      	movs	r3, #1
 800b424:	e10f      	b.n	800b646 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a87      	ldr	r2, [pc, #540]	@ (800b650 <HAL_SPI_Init+0x23c>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d00f      	beq.n	800b456 <HAL_SPI_Init+0x42>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a86      	ldr	r2, [pc, #536]	@ (800b654 <HAL_SPI_Init+0x240>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d00a      	beq.n	800b456 <HAL_SPI_Init+0x42>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a84      	ldr	r2, [pc, #528]	@ (800b658 <HAL_SPI_Init+0x244>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d005      	beq.n	800b456 <HAL_SPI_Init+0x42>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	2b0f      	cmp	r3, #15
 800b450:	d901      	bls.n	800b456 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b452:	2301      	movs	r3, #1
 800b454:	e0f7      	b.n	800b646 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 fe3c 	bl	800c0d4 <SPI_GetPacketSize>
 800b45c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a7b      	ldr	r2, [pc, #492]	@ (800b650 <HAL_SPI_Init+0x23c>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d00c      	beq.n	800b482 <HAL_SPI_Init+0x6e>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a79      	ldr	r2, [pc, #484]	@ (800b654 <HAL_SPI_Init+0x240>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d007      	beq.n	800b482 <HAL_SPI_Init+0x6e>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a78      	ldr	r2, [pc, #480]	@ (800b658 <HAL_SPI_Init+0x244>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d002      	beq.n	800b482 <HAL_SPI_Init+0x6e>
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2b08      	cmp	r3, #8
 800b480:	d811      	bhi.n	800b4a6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b486:	4a72      	ldr	r2, [pc, #456]	@ (800b650 <HAL_SPI_Init+0x23c>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d009      	beq.n	800b4a0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a70      	ldr	r2, [pc, #448]	@ (800b654 <HAL_SPI_Init+0x240>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d004      	beq.n	800b4a0 <HAL_SPI_Init+0x8c>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4a6f      	ldr	r2, [pc, #444]	@ (800b658 <HAL_SPI_Init+0x244>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d104      	bne.n	800b4aa <HAL_SPI_Init+0x96>
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2b10      	cmp	r3, #16
 800b4a4:	d901      	bls.n	800b4aa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e0cd      	b.n	800b646 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d106      	bne.n	800b4c4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f7f6 fe8e 	bl	80021e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2202      	movs	r2, #2
 800b4c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f022 0201 	bic.w	r2, r2, #1
 800b4da:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	689b      	ldr	r3, [r3, #8]
 800b4e2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b4e6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	699b      	ldr	r3, [r3, #24]
 800b4ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b4f0:	d119      	bne.n	800b526 <HAL_SPI_Init+0x112>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b4fa:	d103      	bne.n	800b504 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b500:	2b00      	cmp	r3, #0
 800b502:	d008      	beq.n	800b516 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d10c      	bne.n	800b526 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b510:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b514:	d107      	bne.n	800b526 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b524:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d00f      	beq.n	800b552 <HAL_SPI_Init+0x13e>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	2b06      	cmp	r3, #6
 800b538:	d90b      	bls.n	800b552 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	430a      	orrs	r2, r1
 800b54e:	601a      	str	r2, [r3, #0]
 800b550:	e007      	b.n	800b562 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b560:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	69da      	ldr	r2, [r3, #28]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b56a:	431a      	orrs	r2, r3
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	431a      	orrs	r2, r3
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b574:	ea42 0103 	orr.w	r1, r2, r3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	68da      	ldr	r2, [r3, #12]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	430a      	orrs	r2, r1
 800b582:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b58c:	431a      	orrs	r2, r3
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b592:	431a      	orrs	r2, r3
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	699b      	ldr	r3, [r3, #24]
 800b598:	431a      	orrs	r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	691b      	ldr	r3, [r3, #16]
 800b59e:	431a      	orrs	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	695b      	ldr	r3, [r3, #20]
 800b5a4:	431a      	orrs	r2, r3
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6a1b      	ldr	r3, [r3, #32]
 800b5aa:	431a      	orrs	r2, r3
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	431a      	orrs	r2, r3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b5b6:	431a      	orrs	r2, r3
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	431a      	orrs	r2, r3
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b5c2:	ea42 0103 	orr.w	r1, r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	430a      	orrs	r2, r1
 800b5d0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d113      	bne.n	800b602 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b5ec:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	689b      	ldr	r3, [r3, #8]
 800b5f4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b600:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f022 0201 	bic.w	r2, r2, #1
 800b610:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d00a      	beq.n	800b634 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	430a      	orrs	r2, r1
 800b632:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2201      	movs	r2, #1
 800b640:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b644:	2300      	movs	r3, #0
}
 800b646:	4618      	mov	r0, r3
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	40013000 	.word	0x40013000
 800b654:	40003800 	.word	0x40003800
 800b658:	40003c00 	.word	0x40003c00

0800b65c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b088      	sub	sp, #32
 800b660:	af02      	add	r7, sp, #8
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	603b      	str	r3, [r7, #0]
 800b668:	4613      	mov	r3, r2
 800b66a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	3320      	adds	r3, #32
 800b672:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b674:	f7f7 f91c 	bl	80028b0 <HAL_GetTick>
 800b678:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b680:	b2db      	uxtb	r3, r3
 800b682:	2b01      	cmp	r3, #1
 800b684:	d001      	beq.n	800b68a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800b686:	2302      	movs	r3, #2
 800b688:	e1d1      	b.n	800ba2e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d002      	beq.n	800b696 <HAL_SPI_Transmit+0x3a>
 800b690:	88fb      	ldrh	r3, [r7, #6]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d101      	bne.n	800b69a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800b696:	2301      	movs	r3, #1
 800b698:	e1c9      	b.n	800ba2e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d101      	bne.n	800b6a8 <HAL_SPI_Transmit+0x4c>
 800b6a4:	2302      	movs	r3, #2
 800b6a6:	e1c2      	b.n	800ba2e <HAL_SPI_Transmit+0x3d2>
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2203      	movs	r2, #3
 800b6b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	68ba      	ldr	r2, [r7, #8]
 800b6c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	88fa      	ldrh	r2, [r7, #6]
 800b6ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	88fa      	ldrh	r2, [r7, #6]
 800b6d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b700:	d108      	bne.n	800b714 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b710:	601a      	str	r2, [r3, #0]
 800b712:	e009      	b.n	800b728 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	68db      	ldr	r3, [r3, #12]
 800b71a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b726:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	685a      	ldr	r2, [r3, #4]
 800b72e:	4b96      	ldr	r3, [pc, #600]	@ (800b988 <HAL_SPI_Transmit+0x32c>)
 800b730:	4013      	ands	r3, r2
 800b732:	88f9      	ldrh	r1, [r7, #6]
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	6812      	ldr	r2, [r2, #0]
 800b738:	430b      	orrs	r3, r1
 800b73a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f042 0201 	orr.w	r2, r2, #1
 800b74a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b754:	d107      	bne.n	800b766 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b764:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	2b0f      	cmp	r3, #15
 800b76c:	d947      	bls.n	800b7fe <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b76e:	e03f      	b.n	800b7f0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	695b      	ldr	r3, [r3, #20]
 800b776:	f003 0302 	and.w	r3, r3, #2
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	d114      	bne.n	800b7a8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	6812      	ldr	r2, [r2, #0]
 800b788:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b78e:	1d1a      	adds	r2, r3, #4
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	3b01      	subs	r3, #1
 800b79e:	b29a      	uxth	r2, r3
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b7a6:	e023      	b.n	800b7f0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7a8:	f7f7 f882 	bl	80028b0 <HAL_GetTick>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	1ad3      	subs	r3, r2, r3
 800b7b2:	683a      	ldr	r2, [r7, #0]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d803      	bhi.n	800b7c0 <HAL_SPI_Transmit+0x164>
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7be:	d102      	bne.n	800b7c6 <HAL_SPI_Transmit+0x16a>
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d114      	bne.n	800b7f0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b7c6:	68f8      	ldr	r0, [r7, #12]
 800b7c8:	f000 fbb6 	bl	800bf38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b7d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2201      	movs	r2, #1
 800b7e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b7ec:	2303      	movs	r3, #3
 800b7ee:	e11e      	b.n	800ba2e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1b9      	bne.n	800b770 <HAL_SPI_Transmit+0x114>
 800b7fc:	e0f1      	b.n	800b9e2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	2b07      	cmp	r3, #7
 800b804:	f240 80e6 	bls.w	800b9d4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b808:	e05d      	b.n	800b8c6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	695b      	ldr	r3, [r3, #20]
 800b810:	f003 0302 	and.w	r3, r3, #2
 800b814:	2b02      	cmp	r3, #2
 800b816:	d132      	bne.n	800b87e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b81e:	b29b      	uxth	r3, r3
 800b820:	2b01      	cmp	r3, #1
 800b822:	d918      	bls.n	800b856 <HAL_SPI_Transmit+0x1fa>
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d014      	beq.n	800b856 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	6812      	ldr	r2, [r2, #0]
 800b836:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b83c:	1d1a      	adds	r2, r3, #4
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b848:	b29b      	uxth	r3, r3
 800b84a:	3b02      	subs	r3, #2
 800b84c:	b29a      	uxth	r2, r3
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b854:	e037      	b.n	800b8c6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b85a:	881a      	ldrh	r2, [r3, #0]
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b864:	1c9a      	adds	r2, r3, #2
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b870:	b29b      	uxth	r3, r3
 800b872:	3b01      	subs	r3, #1
 800b874:	b29a      	uxth	r2, r3
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b87c:	e023      	b.n	800b8c6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b87e:	f7f7 f817 	bl	80028b0 <HAL_GetTick>
 800b882:	4602      	mov	r2, r0
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	1ad3      	subs	r3, r2, r3
 800b888:	683a      	ldr	r2, [r7, #0]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d803      	bhi.n	800b896 <HAL_SPI_Transmit+0x23a>
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b894:	d102      	bne.n	800b89c <HAL_SPI_Transmit+0x240>
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d114      	bne.n	800b8c6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f000 fb4b 	bl	800bf38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b8a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b8c2:	2303      	movs	r3, #3
 800b8c4:	e0b3      	b.n	800ba2e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d19b      	bne.n	800b80a <HAL_SPI_Transmit+0x1ae>
 800b8d2:	e086      	b.n	800b9e2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	695b      	ldr	r3, [r3, #20]
 800b8da:	f003 0302 	and.w	r3, r3, #2
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	d154      	bne.n	800b98c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	2b03      	cmp	r3, #3
 800b8ec:	d918      	bls.n	800b920 <HAL_SPI_Transmit+0x2c4>
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8f2:	2b40      	cmp	r3, #64	@ 0x40
 800b8f4:	d914      	bls.n	800b920 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	6812      	ldr	r2, [r2, #0]
 800b900:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b906:	1d1a      	adds	r2, r3, #4
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b912:	b29b      	uxth	r3, r3
 800b914:	3b04      	subs	r3, #4
 800b916:	b29a      	uxth	r2, r3
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b91e:	e059      	b.n	800b9d4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b926:	b29b      	uxth	r3, r3
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d917      	bls.n	800b95c <HAL_SPI_Transmit+0x300>
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b930:	2b00      	cmp	r3, #0
 800b932:	d013      	beq.n	800b95c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b938:	881a      	ldrh	r2, [r3, #0]
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b942:	1c9a      	adds	r2, r3, #2
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b94e:	b29b      	uxth	r3, r3
 800b950:	3b02      	subs	r3, #2
 800b952:	b29a      	uxth	r2, r3
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b95a:	e03b      	b.n	800b9d4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	3320      	adds	r3, #32
 800b966:	7812      	ldrb	r2, [r2, #0]
 800b968:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b96e:	1c5a      	adds	r2, r3, #1
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	3b01      	subs	r3, #1
 800b97e:	b29a      	uxth	r2, r3
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b986:	e025      	b.n	800b9d4 <HAL_SPI_Transmit+0x378>
 800b988:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b98c:	f7f6 ff90 	bl	80028b0 <HAL_GetTick>
 800b990:	4602      	mov	r2, r0
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	1ad3      	subs	r3, r2, r3
 800b996:	683a      	ldr	r2, [r7, #0]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d803      	bhi.n	800b9a4 <HAL_SPI_Transmit+0x348>
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a2:	d102      	bne.n	800b9aa <HAL_SPI_Transmit+0x34e>
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d114      	bne.n	800b9d4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b9aa:	68f8      	ldr	r0, [r7, #12]
 800b9ac:	f000 fac4 	bl	800bf38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b9d0:	2303      	movs	r3, #3
 800b9d2:	e02c      	b.n	800ba2e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	f47f af79 	bne.w	800b8d4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	9300      	str	r3, [sp, #0]
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	2108      	movs	r1, #8
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	f000 fb43 	bl	800c078 <SPI_WaitOnFlagUntilTimeout>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d007      	beq.n	800ba08 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9fe:	f043 0220 	orr.w	r2, r3, #32
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ba08:	68f8      	ldr	r0, [r7, #12]
 800ba0a:	f000 fa95 	bl	800bf38 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2201      	movs	r2, #1
 800ba12:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d001      	beq.n	800ba2c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800ba28:	2301      	movs	r3, #1
 800ba2a:	e000      	b.n	800ba2e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800ba2c:	2300      	movs	r3, #0
  }
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3718      	adds	r7, #24
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop

0800ba38 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b088      	sub	sp, #32
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	603b      	str	r3, [r7, #0]
 800ba44:	4613      	mov	r3, r2
 800ba46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba4c:	095b      	lsrs	r3, r3, #5
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	3301      	adds	r3, #1
 800ba52:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	3330      	adds	r3, #48	@ 0x30
 800ba5a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ba5c:	f7f6 ff28 	bl	80028b0 <HAL_GetTick>
 800ba60:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d001      	beq.n	800ba72 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800ba6e:	2302      	movs	r3, #2
 800ba70:	e250      	b.n	800bf14 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d002      	beq.n	800ba7e <HAL_SPI_Receive+0x46>
 800ba78:	88fb      	ldrh	r3, [r7, #6]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d101      	bne.n	800ba82 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	e248      	b.n	800bf14 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d101      	bne.n	800ba90 <HAL_SPI_Receive+0x58>
 800ba8c:	2302      	movs	r3, #2
 800ba8e:	e241      	b.n	800bf14 <HAL_SPI_Receive+0x4dc>
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2201      	movs	r2, #1
 800ba94:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2204      	movs	r2, #4
 800ba9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	68ba      	ldr	r2, [r7, #8]
 800baac:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	88fa      	ldrh	r2, [r7, #6]
 800bab2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	88fa      	ldrh	r2, [r7, #6]
 800baba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2200      	movs	r2, #0
 800bac2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2200      	movs	r2, #0
 800bac8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2200      	movs	r2, #0
 800bad0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2200      	movs	r2, #0
 800bad8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2200      	movs	r2, #0
 800bade:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800bae8:	d108      	bne.n	800bafc <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800baf8:	601a      	str	r2, [r3, #0]
 800bafa:	e009      	b.n	800bb10 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	68db      	ldr	r3, [r3, #12]
 800bb02:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800bb0e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	685a      	ldr	r2, [r3, #4]
 800bb16:	4b95      	ldr	r3, [pc, #596]	@ (800bd6c <HAL_SPI_Receive+0x334>)
 800bb18:	4013      	ands	r3, r2
 800bb1a:	88f9      	ldrh	r1, [r7, #6]
 800bb1c:	68fa      	ldr	r2, [r7, #12]
 800bb1e:	6812      	ldr	r2, [r2, #0]
 800bb20:	430b      	orrs	r3, r1
 800bb22:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f042 0201 	orr.w	r2, r2, #1
 800bb32:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	685b      	ldr	r3, [r3, #4]
 800bb38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bb3c:	d107      	bne.n	800bb4e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bb4c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	2b0f      	cmp	r3, #15
 800bb54:	d96c      	bls.n	800bc30 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bb56:	e064      	b.n	800bc22 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	695b      	ldr	r3, [r3, #20]
 800bb5e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	695b      	ldr	r3, [r3, #20]
 800bb66:	f003 0301 	and.w	r3, r3, #1
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d114      	bne.n	800bb98 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb76:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bb78:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb7e:	1d1a      	adds	r2, r3, #4
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	3b01      	subs	r3, #1
 800bb8e:	b29a      	uxth	r2, r3
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bb96:	e044      	b.n	800bc22 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	8bfa      	ldrh	r2, [r7, #30]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d919      	bls.n	800bbda <HAL_SPI_Receive+0x1a2>
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d014      	beq.n	800bbda <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbb8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bbba:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbc0:	1d1a      	adds	r2, r3, #4
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	3b01      	subs	r3, #1
 800bbd0:	b29a      	uxth	r2, r3
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bbd8:	e023      	b.n	800bc22 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbda:	f7f6 fe69 	bl	80028b0 <HAL_GetTick>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	683a      	ldr	r2, [r7, #0]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d803      	bhi.n	800bbf2 <HAL_SPI_Receive+0x1ba>
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbf0:	d102      	bne.n	800bbf8 <HAL_SPI_Receive+0x1c0>
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d114      	bne.n	800bc22 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bbf8:	68f8      	ldr	r0, [r7, #12]
 800bbfa:	f000 f99d 	bl	800bf38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2201      	movs	r2, #1
 800bc12:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bc1e:	2303      	movs	r3, #3
 800bc20:	e178      	b.n	800bf14 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d194      	bne.n	800bb58 <HAL_SPI_Receive+0x120>
 800bc2e:	e15e      	b.n	800beee <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	2b07      	cmp	r3, #7
 800bc36:	f240 8153 	bls.w	800bee0 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bc3a:	e08f      	b.n	800bd5c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	695b      	ldr	r3, [r3, #20]
 800bc42:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	695b      	ldr	r3, [r3, #20]
 800bc4a:	f003 0301 	and.w	r3, r3, #1
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d114      	bne.n	800bc7c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc56:	69ba      	ldr	r2, [r7, #24]
 800bc58:	8812      	ldrh	r2, [r2, #0]
 800bc5a:	b292      	uxth	r2, r2
 800bc5c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc62:	1c9a      	adds	r2, r3, #2
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	3b01      	subs	r3, #1
 800bc72:	b29a      	uxth	r2, r3
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bc7a:	e06f      	b.n	800bd5c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	8bfa      	ldrh	r2, [r7, #30]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d924      	bls.n	800bcd4 <HAL_SPI_Receive+0x29c>
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d01f      	beq.n	800bcd4 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc98:	69ba      	ldr	r2, [r7, #24]
 800bc9a:	8812      	ldrh	r2, [r2, #0]
 800bc9c:	b292      	uxth	r2, r2
 800bc9e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bca4:	1c9a      	adds	r2, r3, #2
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcae:	69ba      	ldr	r2, [r7, #24]
 800bcb0:	8812      	ldrh	r2, [r2, #0]
 800bcb2:	b292      	uxth	r2, r2
 800bcb4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcba:	1c9a      	adds	r2, r3, #2
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	3b02      	subs	r3, #2
 800bcca:	b29a      	uxth	r2, r3
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bcd2:	e043      	b.n	800bd5c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d119      	bne.n	800bd14 <HAL_SPI_Receive+0x2dc>
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d014      	beq.n	800bd14 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcee:	69ba      	ldr	r2, [r7, #24]
 800bcf0:	8812      	ldrh	r2, [r2, #0]
 800bcf2:	b292      	uxth	r2, r2
 800bcf4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcfa:	1c9a      	adds	r2, r3, #2
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	3b01      	subs	r3, #1
 800bd0a:	b29a      	uxth	r2, r3
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bd12:	e023      	b.n	800bd5c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd14:	f7f6 fdcc 	bl	80028b0 <HAL_GetTick>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	1ad3      	subs	r3, r2, r3
 800bd1e:	683a      	ldr	r2, [r7, #0]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d803      	bhi.n	800bd2c <HAL_SPI_Receive+0x2f4>
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd2a:	d102      	bne.n	800bd32 <HAL_SPI_Receive+0x2fa>
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d114      	bne.n	800bd5c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bd32:	68f8      	ldr	r0, [r7, #12]
 800bd34:	f000 f900 	bl	800bf38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd3e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2200      	movs	r2, #0
 800bd54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bd58:	2303      	movs	r3, #3
 800bd5a:	e0db      	b.n	800bf14 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	f47f af69 	bne.w	800bc3c <HAL_SPI_Receive+0x204>
 800bd6a:	e0c0      	b.n	800beee <HAL_SPI_Receive+0x4b6>
 800bd6c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	695b      	ldr	r3, [r3, #20]
 800bd76:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	f003 0301 	and.w	r3, r3, #1
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d117      	bne.n	800bdb6 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd92:	7812      	ldrb	r2, [r2, #0]
 800bd94:	b2d2      	uxtb	r2, r2
 800bd96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd9c:	1c5a      	adds	r2, r3, #1
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	3b01      	subs	r3, #1
 800bdac:	b29a      	uxth	r2, r3
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bdb4:	e094      	b.n	800bee0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	8bfa      	ldrh	r2, [r7, #30]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d946      	bls.n	800be52 <HAL_SPI_Receive+0x41a>
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d041      	beq.n	800be52 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdda:	7812      	ldrb	r2, [r2, #0]
 800bddc:	b2d2      	uxtb	r2, r2
 800bdde:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bde4:	1c5a      	adds	r2, r3, #1
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdf6:	7812      	ldrb	r2, [r2, #0]
 800bdf8:	b2d2      	uxtb	r2, r2
 800bdfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be00:	1c5a      	adds	r2, r3, #1
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be12:	7812      	ldrb	r2, [r2, #0]
 800be14:	b2d2      	uxtb	r2, r2
 800be16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be1c:	1c5a      	adds	r2, r3, #1
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be2e:	7812      	ldrb	r2, [r2, #0]
 800be30:	b2d2      	uxtb	r2, r2
 800be32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be38:	1c5a      	adds	r2, r3, #1
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be44:	b29b      	uxth	r3, r3
 800be46:	3b04      	subs	r3, #4
 800be48:	b29a      	uxth	r2, r3
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800be50:	e046      	b.n	800bee0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be58:	b29b      	uxth	r3, r3
 800be5a:	2b03      	cmp	r3, #3
 800be5c:	d81c      	bhi.n	800be98 <HAL_SPI_Receive+0x460>
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800be64:	2b00      	cmp	r3, #0
 800be66:	d017      	beq.n	800be98 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be74:	7812      	ldrb	r2, [r2, #0]
 800be76:	b2d2      	uxtb	r2, r2
 800be78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be7e:	1c5a      	adds	r2, r3, #1
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	3b01      	subs	r3, #1
 800be8e:	b29a      	uxth	r2, r3
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800be96:	e023      	b.n	800bee0 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be98:	f7f6 fd0a 	bl	80028b0 <HAL_GetTick>
 800be9c:	4602      	mov	r2, r0
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	1ad3      	subs	r3, r2, r3
 800bea2:	683a      	ldr	r2, [r7, #0]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d803      	bhi.n	800beb0 <HAL_SPI_Receive+0x478>
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beae:	d102      	bne.n	800beb6 <HAL_SPI_Receive+0x47e>
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d114      	bne.n	800bee0 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800beb6:	68f8      	ldr	r0, [r7, #12]
 800beb8:	f000 f83e 	bl	800bf38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bec2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2201      	movs	r2, #1
 800bed0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2200      	movs	r2, #0
 800bed8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bedc:	2303      	movs	r3, #3
 800bede:	e019      	b.n	800bf14 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	2b00      	cmp	r3, #0
 800beea:	f47f af41 	bne.w	800bd70 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f000 f822 	bl	800bf38 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2201      	movs	r2, #1
 800bef8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2200      	movs	r2, #0
 800bf00:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d001      	beq.n	800bf12 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e000      	b.n	800bf14 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800bf12:	2300      	movs	r3, #0
  }
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3720      	adds	r7, #32
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bf2a:	b2db      	uxtb	r3, r3
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	370c      	adds	r7, #12
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr

0800bf38 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b085      	sub	sp, #20
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	695b      	ldr	r3, [r3, #20]
 800bf46:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	699a      	ldr	r2, [r3, #24]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f042 0208 	orr.w	r2, r2, #8
 800bf56:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	699a      	ldr	r2, [r3, #24]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f042 0210 	orr.w	r2, r2, #16
 800bf66:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	681a      	ldr	r2, [r3, #0]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f022 0201 	bic.w	r2, r2, #1
 800bf76:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	6919      	ldr	r1, [r3, #16]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	4b3c      	ldr	r3, [pc, #240]	@ (800c074 <SPI_CloseTransfer+0x13c>)
 800bf84:	400b      	ands	r3, r1
 800bf86:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	689a      	ldr	r2, [r3, #8]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bf96:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	2b04      	cmp	r3, #4
 800bfa2:	d014      	beq.n	800bfce <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f003 0320 	and.w	r3, r3, #32
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d00f      	beq.n	800bfce <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfb4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	699a      	ldr	r2, [r3, #24]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f042 0220 	orr.w	r2, r2, #32
 800bfcc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bfd4:	b2db      	uxtb	r3, r3
 800bfd6:	2b03      	cmp	r3, #3
 800bfd8:	d014      	beq.n	800c004 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d00f      	beq.n	800c004 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfea:	f043 0204 	orr.w	r2, r3, #4
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	699a      	ldr	r2, [r3, #24]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c002:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00f      	beq.n	800c02e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c014:	f043 0201 	orr.w	r2, r3, #1
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	699a      	ldr	r2, [r3, #24]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c02c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00f      	beq.n	800c058 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c03e:	f043 0208 	orr.w	r2, r3, #8
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	699a      	ldr	r2, [r3, #24]
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c056:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2200      	movs	r2, #0
 800c064:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c068:	bf00      	nop
 800c06a:	3714      	adds	r7, #20
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr
 800c074:	fffffc90 	.word	0xfffffc90

0800c078 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	603b      	str	r3, [r7, #0]
 800c084:	4613      	mov	r3, r2
 800c086:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c088:	e010      	b.n	800c0ac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c08a:	f7f6 fc11 	bl	80028b0 <HAL_GetTick>
 800c08e:	4602      	mov	r2, r0
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	1ad3      	subs	r3, r2, r3
 800c094:	683a      	ldr	r2, [r7, #0]
 800c096:	429a      	cmp	r2, r3
 800c098:	d803      	bhi.n	800c0a2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0a0:	d102      	bne.n	800c0a8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d101      	bne.n	800c0ac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c0a8:	2303      	movs	r3, #3
 800c0aa:	e00f      	b.n	800c0cc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	695a      	ldr	r2, [r3, #20]
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	4013      	ands	r3, r2
 800c0b6:	68ba      	ldr	r2, [r7, #8]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	bf0c      	ite	eq
 800c0bc:	2301      	moveq	r3, #1
 800c0be:	2300      	movne	r3, #0
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	79fb      	ldrb	r3, [r7, #7]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d0df      	beq.n	800c08a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c0ca:	2300      	movs	r3, #0
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3710      	adds	r7, #16
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b085      	sub	sp, #20
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0e0:	095b      	lsrs	r3, r3, #5
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	68db      	ldr	r3, [r3, #12]
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	3307      	adds	r3, #7
 800c0f2:	08db      	lsrs	r3, r3, #3
 800c0f4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	68fa      	ldr	r2, [r7, #12]
 800c0fa:	fb02 f303 	mul.w	r3, r2, r3
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3714      	adds	r7, #20
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr

0800c10a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c10a:	b580      	push	{r7, lr}
 800c10c:	b082      	sub	sp, #8
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d101      	bne.n	800c11c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c118:	2301      	movs	r3, #1
 800c11a:	e049      	b.n	800c1b0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c122:	b2db      	uxtb	r3, r3
 800c124:	2b00      	cmp	r3, #0
 800c126:	d106      	bne.n	800c136 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f7f6 f8e5 	bl	8002300 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2202      	movs	r2, #2
 800c13a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	3304      	adds	r3, #4
 800c146:	4619      	mov	r1, r3
 800c148:	4610      	mov	r0, r2
 800c14a:	f000 fa65 	bl	800c618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2201      	movs	r2, #1
 800c152:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2201      	movs	r2, #1
 800c15a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2201      	movs	r2, #1
 800c162:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2201      	movs	r2, #1
 800c16a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2201      	movs	r2, #1
 800c172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2201      	movs	r2, #1
 800c17a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2201      	movs	r2, #1
 800c182:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2201      	movs	r2, #1
 800c18a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2201      	movs	r2, #1
 800c192:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2201      	movs	r2, #1
 800c19a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c1ae:	2300      	movs	r3, #0
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3708      	adds	r7, #8
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d109      	bne.n	800c1dc <HAL_TIM_PWM_Start+0x24>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	bf14      	ite	ne
 800c1d4:	2301      	movne	r3, #1
 800c1d6:	2300      	moveq	r3, #0
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	e03c      	b.n	800c256 <HAL_TIM_PWM_Start+0x9e>
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	2b04      	cmp	r3, #4
 800c1e0:	d109      	bne.n	800c1f6 <HAL_TIM_PWM_Start+0x3e>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c1e8:	b2db      	uxtb	r3, r3
 800c1ea:	2b01      	cmp	r3, #1
 800c1ec:	bf14      	ite	ne
 800c1ee:	2301      	movne	r3, #1
 800c1f0:	2300      	moveq	r3, #0
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	e02f      	b.n	800c256 <HAL_TIM_PWM_Start+0x9e>
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	2b08      	cmp	r3, #8
 800c1fa:	d109      	bne.n	800c210 <HAL_TIM_PWM_Start+0x58>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c202:	b2db      	uxtb	r3, r3
 800c204:	2b01      	cmp	r3, #1
 800c206:	bf14      	ite	ne
 800c208:	2301      	movne	r3, #1
 800c20a:	2300      	moveq	r3, #0
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	e022      	b.n	800c256 <HAL_TIM_PWM_Start+0x9e>
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	2b0c      	cmp	r3, #12
 800c214:	d109      	bne.n	800c22a <HAL_TIM_PWM_Start+0x72>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	2b01      	cmp	r3, #1
 800c220:	bf14      	ite	ne
 800c222:	2301      	movne	r3, #1
 800c224:	2300      	moveq	r3, #0
 800c226:	b2db      	uxtb	r3, r3
 800c228:	e015      	b.n	800c256 <HAL_TIM_PWM_Start+0x9e>
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	2b10      	cmp	r3, #16
 800c22e:	d109      	bne.n	800c244 <HAL_TIM_PWM_Start+0x8c>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c236:	b2db      	uxtb	r3, r3
 800c238:	2b01      	cmp	r3, #1
 800c23a:	bf14      	ite	ne
 800c23c:	2301      	movne	r3, #1
 800c23e:	2300      	moveq	r3, #0
 800c240:	b2db      	uxtb	r3, r3
 800c242:	e008      	b.n	800c256 <HAL_TIM_PWM_Start+0x9e>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	bf14      	ite	ne
 800c250:	2301      	movne	r3, #1
 800c252:	2300      	moveq	r3, #0
 800c254:	b2db      	uxtb	r3, r3
 800c256:	2b00      	cmp	r3, #0
 800c258:	d001      	beq.n	800c25e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c25a:	2301      	movs	r3, #1
 800c25c:	e0ab      	b.n	800c3b6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d104      	bne.n	800c26e <HAL_TIM_PWM_Start+0xb6>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2202      	movs	r2, #2
 800c268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c26c:	e023      	b.n	800c2b6 <HAL_TIM_PWM_Start+0xfe>
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	2b04      	cmp	r3, #4
 800c272:	d104      	bne.n	800c27e <HAL_TIM_PWM_Start+0xc6>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2202      	movs	r2, #2
 800c278:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c27c:	e01b      	b.n	800c2b6 <HAL_TIM_PWM_Start+0xfe>
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	2b08      	cmp	r3, #8
 800c282:	d104      	bne.n	800c28e <HAL_TIM_PWM_Start+0xd6>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2202      	movs	r2, #2
 800c288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c28c:	e013      	b.n	800c2b6 <HAL_TIM_PWM_Start+0xfe>
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	2b0c      	cmp	r3, #12
 800c292:	d104      	bne.n	800c29e <HAL_TIM_PWM_Start+0xe6>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2202      	movs	r2, #2
 800c298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c29c:	e00b      	b.n	800c2b6 <HAL_TIM_PWM_Start+0xfe>
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	2b10      	cmp	r3, #16
 800c2a2:	d104      	bne.n	800c2ae <HAL_TIM_PWM_Start+0xf6>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2202      	movs	r2, #2
 800c2a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c2ac:	e003      	b.n	800c2b6 <HAL_TIM_PWM_Start+0xfe>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2202      	movs	r2, #2
 800c2b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	6839      	ldr	r1, [r7, #0]
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f000 fd32 	bl	800cd28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a3d      	ldr	r2, [pc, #244]	@ (800c3c0 <HAL_TIM_PWM_Start+0x208>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d013      	beq.n	800c2f6 <HAL_TIM_PWM_Start+0x13e>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4a3c      	ldr	r2, [pc, #240]	@ (800c3c4 <HAL_TIM_PWM_Start+0x20c>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d00e      	beq.n	800c2f6 <HAL_TIM_PWM_Start+0x13e>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a3a      	ldr	r2, [pc, #232]	@ (800c3c8 <HAL_TIM_PWM_Start+0x210>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d009      	beq.n	800c2f6 <HAL_TIM_PWM_Start+0x13e>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4a39      	ldr	r2, [pc, #228]	@ (800c3cc <HAL_TIM_PWM_Start+0x214>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d004      	beq.n	800c2f6 <HAL_TIM_PWM_Start+0x13e>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4a37      	ldr	r2, [pc, #220]	@ (800c3d0 <HAL_TIM_PWM_Start+0x218>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d101      	bne.n	800c2fa <HAL_TIM_PWM_Start+0x142>
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e000      	b.n	800c2fc <HAL_TIM_PWM_Start+0x144>
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d007      	beq.n	800c310 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c30e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4a2a      	ldr	r2, [pc, #168]	@ (800c3c0 <HAL_TIM_PWM_Start+0x208>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d02c      	beq.n	800c374 <HAL_TIM_PWM_Start+0x1bc>
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c322:	d027      	beq.n	800c374 <HAL_TIM_PWM_Start+0x1bc>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4a2a      	ldr	r2, [pc, #168]	@ (800c3d4 <HAL_TIM_PWM_Start+0x21c>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d022      	beq.n	800c374 <HAL_TIM_PWM_Start+0x1bc>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4a29      	ldr	r2, [pc, #164]	@ (800c3d8 <HAL_TIM_PWM_Start+0x220>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d01d      	beq.n	800c374 <HAL_TIM_PWM_Start+0x1bc>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a27      	ldr	r2, [pc, #156]	@ (800c3dc <HAL_TIM_PWM_Start+0x224>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d018      	beq.n	800c374 <HAL_TIM_PWM_Start+0x1bc>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a1f      	ldr	r2, [pc, #124]	@ (800c3c4 <HAL_TIM_PWM_Start+0x20c>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d013      	beq.n	800c374 <HAL_TIM_PWM_Start+0x1bc>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a23      	ldr	r2, [pc, #140]	@ (800c3e0 <HAL_TIM_PWM_Start+0x228>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d00e      	beq.n	800c374 <HAL_TIM_PWM_Start+0x1bc>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4a1b      	ldr	r2, [pc, #108]	@ (800c3c8 <HAL_TIM_PWM_Start+0x210>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d009      	beq.n	800c374 <HAL_TIM_PWM_Start+0x1bc>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4a1f      	ldr	r2, [pc, #124]	@ (800c3e4 <HAL_TIM_PWM_Start+0x22c>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d004      	beq.n	800c374 <HAL_TIM_PWM_Start+0x1bc>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4a1e      	ldr	r2, [pc, #120]	@ (800c3e8 <HAL_TIM_PWM_Start+0x230>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d115      	bne.n	800c3a0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	689a      	ldr	r2, [r3, #8]
 800c37a:	4b1c      	ldr	r3, [pc, #112]	@ (800c3ec <HAL_TIM_PWM_Start+0x234>)
 800c37c:	4013      	ands	r3, r2
 800c37e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2b06      	cmp	r3, #6
 800c384:	d015      	beq.n	800c3b2 <HAL_TIM_PWM_Start+0x1fa>
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c38c:	d011      	beq.n	800c3b2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	681a      	ldr	r2, [r3, #0]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f042 0201 	orr.w	r2, r2, #1
 800c39c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c39e:	e008      	b.n	800c3b2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	681a      	ldr	r2, [r3, #0]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f042 0201 	orr.w	r2, r2, #1
 800c3ae:	601a      	str	r2, [r3, #0]
 800c3b0:	e000      	b.n	800c3b4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c3b4:	2300      	movs	r3, #0
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3710      	adds	r7, #16
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	40010000 	.word	0x40010000
 800c3c4:	40010400 	.word	0x40010400
 800c3c8:	40014000 	.word	0x40014000
 800c3cc:	40014400 	.word	0x40014400
 800c3d0:	40014800 	.word	0x40014800
 800c3d4:	40000400 	.word	0x40000400
 800c3d8:	40000800 	.word	0x40000800
 800c3dc:	40000c00 	.word	0x40000c00
 800c3e0:	40001800 	.word	0x40001800
 800c3e4:	4000e000 	.word	0x4000e000
 800c3e8:	4000e400 	.word	0x4000e400
 800c3ec:	00010007 	.word	0x00010007

0800c3f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b086      	sub	sp, #24
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	60f8      	str	r0, [r7, #12]
 800c3f8:	60b9      	str	r1, [r7, #8]
 800c3fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c406:	2b01      	cmp	r3, #1
 800c408:	d101      	bne.n	800c40e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c40a:	2302      	movs	r3, #2
 800c40c:	e0ff      	b.n	800c60e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2201      	movs	r2, #1
 800c412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2b14      	cmp	r3, #20
 800c41a:	f200 80f0 	bhi.w	800c5fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c41e:	a201      	add	r2, pc, #4	@ (adr r2, 800c424 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c424:	0800c479 	.word	0x0800c479
 800c428:	0800c5ff 	.word	0x0800c5ff
 800c42c:	0800c5ff 	.word	0x0800c5ff
 800c430:	0800c5ff 	.word	0x0800c5ff
 800c434:	0800c4b9 	.word	0x0800c4b9
 800c438:	0800c5ff 	.word	0x0800c5ff
 800c43c:	0800c5ff 	.word	0x0800c5ff
 800c440:	0800c5ff 	.word	0x0800c5ff
 800c444:	0800c4fb 	.word	0x0800c4fb
 800c448:	0800c5ff 	.word	0x0800c5ff
 800c44c:	0800c5ff 	.word	0x0800c5ff
 800c450:	0800c5ff 	.word	0x0800c5ff
 800c454:	0800c53b 	.word	0x0800c53b
 800c458:	0800c5ff 	.word	0x0800c5ff
 800c45c:	0800c5ff 	.word	0x0800c5ff
 800c460:	0800c5ff 	.word	0x0800c5ff
 800c464:	0800c57d 	.word	0x0800c57d
 800c468:	0800c5ff 	.word	0x0800c5ff
 800c46c:	0800c5ff 	.word	0x0800c5ff
 800c470:	0800c5ff 	.word	0x0800c5ff
 800c474:	0800c5bd 	.word	0x0800c5bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	68b9      	ldr	r1, [r7, #8]
 800c47e:	4618      	mov	r0, r3
 800c480:	f000 f97c 	bl	800c77c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	699a      	ldr	r2, [r3, #24]
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f042 0208 	orr.w	r2, r2, #8
 800c492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	699a      	ldr	r2, [r3, #24]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f022 0204 	bic.w	r2, r2, #4
 800c4a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	6999      	ldr	r1, [r3, #24]
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	691a      	ldr	r2, [r3, #16]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	430a      	orrs	r2, r1
 800c4b4:	619a      	str	r2, [r3, #24]
      break;
 800c4b6:	e0a5      	b.n	800c604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	68b9      	ldr	r1, [r7, #8]
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f000 f9ec 	bl	800c89c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	699a      	ldr	r2, [r3, #24]
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c4d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	699a      	ldr	r2, [r3, #24]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c4e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	6999      	ldr	r1, [r3, #24]
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	691b      	ldr	r3, [r3, #16]
 800c4ee:	021a      	lsls	r2, r3, #8
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	430a      	orrs	r2, r1
 800c4f6:	619a      	str	r2, [r3, #24]
      break;
 800c4f8:	e084      	b.n	800c604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	68b9      	ldr	r1, [r7, #8]
 800c500:	4618      	mov	r0, r3
 800c502:	f000 fa55 	bl	800c9b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	69da      	ldr	r2, [r3, #28]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f042 0208 	orr.w	r2, r2, #8
 800c514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	69da      	ldr	r2, [r3, #28]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f022 0204 	bic.w	r2, r2, #4
 800c524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	69d9      	ldr	r1, [r3, #28]
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	691a      	ldr	r2, [r3, #16]
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	430a      	orrs	r2, r1
 800c536:	61da      	str	r2, [r3, #28]
      break;
 800c538:	e064      	b.n	800c604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	68b9      	ldr	r1, [r7, #8]
 800c540:	4618      	mov	r0, r3
 800c542:	f000 fabd 	bl	800cac0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	69da      	ldr	r2, [r3, #28]
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c554:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	69da      	ldr	r2, [r3, #28]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c564:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	69d9      	ldr	r1, [r3, #28]
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	691b      	ldr	r3, [r3, #16]
 800c570:	021a      	lsls	r2, r3, #8
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	430a      	orrs	r2, r1
 800c578:	61da      	str	r2, [r3, #28]
      break;
 800c57a:	e043      	b.n	800c604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	68b9      	ldr	r1, [r7, #8]
 800c582:	4618      	mov	r0, r3
 800c584:	f000 fb06 	bl	800cb94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f042 0208 	orr.w	r2, r2, #8
 800c596:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f022 0204 	bic.w	r2, r2, #4
 800c5a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	691a      	ldr	r2, [r3, #16]
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	430a      	orrs	r2, r1
 800c5b8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c5ba:	e023      	b.n	800c604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	68b9      	ldr	r1, [r7, #8]
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f000 fb4a 	bl	800cc5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c5d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c5e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	691b      	ldr	r3, [r3, #16]
 800c5f2:	021a      	lsls	r2, r3, #8
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	430a      	orrs	r2, r1
 800c5fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c5fc:	e002      	b.n	800c604 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c5fe:	2301      	movs	r3, #1
 800c600:	75fb      	strb	r3, [r7, #23]
      break;
 800c602:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2200      	movs	r2, #0
 800c608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c60c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3718      	adds	r7, #24
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop

0800c618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c618:	b480      	push	{r7}
 800c61a:	b085      	sub	sp, #20
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	4a4a      	ldr	r2, [pc, #296]	@ (800c754 <TIM_Base_SetConfig+0x13c>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d013      	beq.n	800c658 <TIM_Base_SetConfig+0x40>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c636:	d00f      	beq.n	800c658 <TIM_Base_SetConfig+0x40>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	4a47      	ldr	r2, [pc, #284]	@ (800c758 <TIM_Base_SetConfig+0x140>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d00b      	beq.n	800c658 <TIM_Base_SetConfig+0x40>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	4a46      	ldr	r2, [pc, #280]	@ (800c75c <TIM_Base_SetConfig+0x144>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d007      	beq.n	800c658 <TIM_Base_SetConfig+0x40>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	4a45      	ldr	r2, [pc, #276]	@ (800c760 <TIM_Base_SetConfig+0x148>)
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d003      	beq.n	800c658 <TIM_Base_SetConfig+0x40>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	4a44      	ldr	r2, [pc, #272]	@ (800c764 <TIM_Base_SetConfig+0x14c>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d108      	bne.n	800c66a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c65e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	68fa      	ldr	r2, [r7, #12]
 800c666:	4313      	orrs	r3, r2
 800c668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4a39      	ldr	r2, [pc, #228]	@ (800c754 <TIM_Base_SetConfig+0x13c>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d027      	beq.n	800c6c2 <TIM_Base_SetConfig+0xaa>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c678:	d023      	beq.n	800c6c2 <TIM_Base_SetConfig+0xaa>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4a36      	ldr	r2, [pc, #216]	@ (800c758 <TIM_Base_SetConfig+0x140>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d01f      	beq.n	800c6c2 <TIM_Base_SetConfig+0xaa>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4a35      	ldr	r2, [pc, #212]	@ (800c75c <TIM_Base_SetConfig+0x144>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d01b      	beq.n	800c6c2 <TIM_Base_SetConfig+0xaa>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	4a34      	ldr	r2, [pc, #208]	@ (800c760 <TIM_Base_SetConfig+0x148>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d017      	beq.n	800c6c2 <TIM_Base_SetConfig+0xaa>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	4a33      	ldr	r2, [pc, #204]	@ (800c764 <TIM_Base_SetConfig+0x14c>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d013      	beq.n	800c6c2 <TIM_Base_SetConfig+0xaa>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	4a32      	ldr	r2, [pc, #200]	@ (800c768 <TIM_Base_SetConfig+0x150>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d00f      	beq.n	800c6c2 <TIM_Base_SetConfig+0xaa>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4a31      	ldr	r2, [pc, #196]	@ (800c76c <TIM_Base_SetConfig+0x154>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d00b      	beq.n	800c6c2 <TIM_Base_SetConfig+0xaa>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	4a30      	ldr	r2, [pc, #192]	@ (800c770 <TIM_Base_SetConfig+0x158>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d007      	beq.n	800c6c2 <TIM_Base_SetConfig+0xaa>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4a2f      	ldr	r2, [pc, #188]	@ (800c774 <TIM_Base_SetConfig+0x15c>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d003      	beq.n	800c6c2 <TIM_Base_SetConfig+0xaa>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4a2e      	ldr	r2, [pc, #184]	@ (800c778 <TIM_Base_SetConfig+0x160>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d108      	bne.n	800c6d4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c6c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	68fa      	ldr	r2, [r7, #12]
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	695b      	ldr	r3, [r3, #20]
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	68fa      	ldr	r2, [r7, #12]
 800c6e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	689a      	ldr	r2, [r3, #8]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	4a16      	ldr	r2, [pc, #88]	@ (800c754 <TIM_Base_SetConfig+0x13c>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d00f      	beq.n	800c720 <TIM_Base_SetConfig+0x108>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	4a18      	ldr	r2, [pc, #96]	@ (800c764 <TIM_Base_SetConfig+0x14c>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d00b      	beq.n	800c720 <TIM_Base_SetConfig+0x108>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	4a17      	ldr	r2, [pc, #92]	@ (800c768 <TIM_Base_SetConfig+0x150>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d007      	beq.n	800c720 <TIM_Base_SetConfig+0x108>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	4a16      	ldr	r2, [pc, #88]	@ (800c76c <TIM_Base_SetConfig+0x154>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d003      	beq.n	800c720 <TIM_Base_SetConfig+0x108>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	4a15      	ldr	r2, [pc, #84]	@ (800c770 <TIM_Base_SetConfig+0x158>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d103      	bne.n	800c728 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	691a      	ldr	r2, [r3, #16]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2201      	movs	r2, #1
 800c72c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	691b      	ldr	r3, [r3, #16]
 800c732:	f003 0301 	and.w	r3, r3, #1
 800c736:	2b01      	cmp	r3, #1
 800c738:	d105      	bne.n	800c746 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	691b      	ldr	r3, [r3, #16]
 800c73e:	f023 0201 	bic.w	r2, r3, #1
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	611a      	str	r2, [r3, #16]
  }
}
 800c746:	bf00      	nop
 800c748:	3714      	adds	r7, #20
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop
 800c754:	40010000 	.word	0x40010000
 800c758:	40000400 	.word	0x40000400
 800c75c:	40000800 	.word	0x40000800
 800c760:	40000c00 	.word	0x40000c00
 800c764:	40010400 	.word	0x40010400
 800c768:	40014000 	.word	0x40014000
 800c76c:	40014400 	.word	0x40014400
 800c770:	40014800 	.word	0x40014800
 800c774:	4000e000 	.word	0x4000e000
 800c778:	4000e400 	.word	0x4000e400

0800c77c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c77c:	b480      	push	{r7}
 800c77e:	b087      	sub	sp, #28
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6a1b      	ldr	r3, [r3, #32]
 800c78a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6a1b      	ldr	r3, [r3, #32]
 800c790:	f023 0201 	bic.w	r2, r3, #1
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	685b      	ldr	r3, [r3, #4]
 800c79c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	699b      	ldr	r3, [r3, #24]
 800c7a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c7a4:	68fa      	ldr	r2, [r7, #12]
 800c7a6:	4b37      	ldr	r3, [pc, #220]	@ (800c884 <TIM_OC1_SetConfig+0x108>)
 800c7a8:	4013      	ands	r3, r2
 800c7aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f023 0303 	bic.w	r3, r3, #3
 800c7b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	68fa      	ldr	r2, [r7, #12]
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	f023 0302 	bic.w	r3, r3, #2
 800c7c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	689b      	ldr	r3, [r3, #8]
 800c7ca:	697a      	ldr	r2, [r7, #20]
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	4a2d      	ldr	r2, [pc, #180]	@ (800c888 <TIM_OC1_SetConfig+0x10c>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d00f      	beq.n	800c7f8 <TIM_OC1_SetConfig+0x7c>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	4a2c      	ldr	r2, [pc, #176]	@ (800c88c <TIM_OC1_SetConfig+0x110>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d00b      	beq.n	800c7f8 <TIM_OC1_SetConfig+0x7c>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	4a2b      	ldr	r2, [pc, #172]	@ (800c890 <TIM_OC1_SetConfig+0x114>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d007      	beq.n	800c7f8 <TIM_OC1_SetConfig+0x7c>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4a2a      	ldr	r2, [pc, #168]	@ (800c894 <TIM_OC1_SetConfig+0x118>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d003      	beq.n	800c7f8 <TIM_OC1_SetConfig+0x7c>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	4a29      	ldr	r2, [pc, #164]	@ (800c898 <TIM_OC1_SetConfig+0x11c>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d10c      	bne.n	800c812 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	f023 0308 	bic.w	r3, r3, #8
 800c7fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	697a      	ldr	r2, [r7, #20]
 800c806:	4313      	orrs	r3, r2
 800c808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	f023 0304 	bic.w	r3, r3, #4
 800c810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	4a1c      	ldr	r2, [pc, #112]	@ (800c888 <TIM_OC1_SetConfig+0x10c>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d00f      	beq.n	800c83a <TIM_OC1_SetConfig+0xbe>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	4a1b      	ldr	r2, [pc, #108]	@ (800c88c <TIM_OC1_SetConfig+0x110>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d00b      	beq.n	800c83a <TIM_OC1_SetConfig+0xbe>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4a1a      	ldr	r2, [pc, #104]	@ (800c890 <TIM_OC1_SetConfig+0x114>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d007      	beq.n	800c83a <TIM_OC1_SetConfig+0xbe>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	4a19      	ldr	r2, [pc, #100]	@ (800c894 <TIM_OC1_SetConfig+0x118>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d003      	beq.n	800c83a <TIM_OC1_SetConfig+0xbe>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4a18      	ldr	r2, [pc, #96]	@ (800c898 <TIM_OC1_SetConfig+0x11c>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d111      	bne.n	800c85e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	695b      	ldr	r3, [r3, #20]
 800c84e:	693a      	ldr	r2, [r7, #16]
 800c850:	4313      	orrs	r3, r2
 800c852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	699b      	ldr	r3, [r3, #24]
 800c858:	693a      	ldr	r2, [r7, #16]
 800c85a:	4313      	orrs	r3, r2
 800c85c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	693a      	ldr	r2, [r7, #16]
 800c862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	68fa      	ldr	r2, [r7, #12]
 800c868:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	685a      	ldr	r2, [r3, #4]
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	697a      	ldr	r2, [r7, #20]
 800c876:	621a      	str	r2, [r3, #32]
}
 800c878:	bf00      	nop
 800c87a:	371c      	adds	r7, #28
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr
 800c884:	fffeff8f 	.word	0xfffeff8f
 800c888:	40010000 	.word	0x40010000
 800c88c:	40010400 	.word	0x40010400
 800c890:	40014000 	.word	0x40014000
 800c894:	40014400 	.word	0x40014400
 800c898:	40014800 	.word	0x40014800

0800c89c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b087      	sub	sp, #28
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6a1b      	ldr	r3, [r3, #32]
 800c8aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6a1b      	ldr	r3, [r3, #32]
 800c8b0:	f023 0210 	bic.w	r2, r3, #16
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	699b      	ldr	r3, [r3, #24]
 800c8c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c8c4:	68fa      	ldr	r2, [r7, #12]
 800c8c6:	4b34      	ldr	r3, [pc, #208]	@ (800c998 <TIM_OC2_SetConfig+0xfc>)
 800c8c8:	4013      	ands	r3, r2
 800c8ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c8d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	021b      	lsls	r3, r3, #8
 800c8da:	68fa      	ldr	r2, [r7, #12]
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	f023 0320 	bic.w	r3, r3, #32
 800c8e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	689b      	ldr	r3, [r3, #8]
 800c8ec:	011b      	lsls	r3, r3, #4
 800c8ee:	697a      	ldr	r2, [r7, #20]
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	4a29      	ldr	r2, [pc, #164]	@ (800c99c <TIM_OC2_SetConfig+0x100>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d003      	beq.n	800c904 <TIM_OC2_SetConfig+0x68>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	4a28      	ldr	r2, [pc, #160]	@ (800c9a0 <TIM_OC2_SetConfig+0x104>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d10d      	bne.n	800c920 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c90a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	68db      	ldr	r3, [r3, #12]
 800c910:	011b      	lsls	r3, r3, #4
 800c912:	697a      	ldr	r2, [r7, #20]
 800c914:	4313      	orrs	r3, r2
 800c916:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c91e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	4a1e      	ldr	r2, [pc, #120]	@ (800c99c <TIM_OC2_SetConfig+0x100>)
 800c924:	4293      	cmp	r3, r2
 800c926:	d00f      	beq.n	800c948 <TIM_OC2_SetConfig+0xac>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	4a1d      	ldr	r2, [pc, #116]	@ (800c9a0 <TIM_OC2_SetConfig+0x104>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d00b      	beq.n	800c948 <TIM_OC2_SetConfig+0xac>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	4a1c      	ldr	r2, [pc, #112]	@ (800c9a4 <TIM_OC2_SetConfig+0x108>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d007      	beq.n	800c948 <TIM_OC2_SetConfig+0xac>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	4a1b      	ldr	r2, [pc, #108]	@ (800c9a8 <TIM_OC2_SetConfig+0x10c>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d003      	beq.n	800c948 <TIM_OC2_SetConfig+0xac>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4a1a      	ldr	r2, [pc, #104]	@ (800c9ac <TIM_OC2_SetConfig+0x110>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d113      	bne.n	800c970 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c94e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c956:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	695b      	ldr	r3, [r3, #20]
 800c95c:	009b      	lsls	r3, r3, #2
 800c95e:	693a      	ldr	r2, [r7, #16]
 800c960:	4313      	orrs	r3, r2
 800c962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	699b      	ldr	r3, [r3, #24]
 800c968:	009b      	lsls	r3, r3, #2
 800c96a:	693a      	ldr	r2, [r7, #16]
 800c96c:	4313      	orrs	r3, r2
 800c96e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	693a      	ldr	r2, [r7, #16]
 800c974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	68fa      	ldr	r2, [r7, #12]
 800c97a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	685a      	ldr	r2, [r3, #4]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	697a      	ldr	r2, [r7, #20]
 800c988:	621a      	str	r2, [r3, #32]
}
 800c98a:	bf00      	nop
 800c98c:	371c      	adds	r7, #28
 800c98e:	46bd      	mov	sp, r7
 800c990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c994:	4770      	bx	lr
 800c996:	bf00      	nop
 800c998:	feff8fff 	.word	0xfeff8fff
 800c99c:	40010000 	.word	0x40010000
 800c9a0:	40010400 	.word	0x40010400
 800c9a4:	40014000 	.word	0x40014000
 800c9a8:	40014400 	.word	0x40014400
 800c9ac:	40014800 	.word	0x40014800

0800c9b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b087      	sub	sp, #28
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
 800c9b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6a1b      	ldr	r3, [r3, #32]
 800c9be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6a1b      	ldr	r3, [r3, #32]
 800c9c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	69db      	ldr	r3, [r3, #28]
 800c9d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c9d8:	68fa      	ldr	r2, [r7, #12]
 800c9da:	4b33      	ldr	r3, [pc, #204]	@ (800caa8 <TIM_OC3_SetConfig+0xf8>)
 800c9dc:	4013      	ands	r3, r2
 800c9de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f023 0303 	bic.w	r3, r3, #3
 800c9e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	68fa      	ldr	r2, [r7, #12]
 800c9ee:	4313      	orrs	r3, r2
 800c9f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c9f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	689b      	ldr	r3, [r3, #8]
 800c9fe:	021b      	lsls	r3, r3, #8
 800ca00:	697a      	ldr	r2, [r7, #20]
 800ca02:	4313      	orrs	r3, r2
 800ca04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	4a28      	ldr	r2, [pc, #160]	@ (800caac <TIM_OC3_SetConfig+0xfc>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d003      	beq.n	800ca16 <TIM_OC3_SetConfig+0x66>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	4a27      	ldr	r2, [pc, #156]	@ (800cab0 <TIM_OC3_SetConfig+0x100>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d10d      	bne.n	800ca32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ca1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	68db      	ldr	r3, [r3, #12]
 800ca22:	021b      	lsls	r3, r3, #8
 800ca24:	697a      	ldr	r2, [r7, #20]
 800ca26:	4313      	orrs	r3, r2
 800ca28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ca30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	4a1d      	ldr	r2, [pc, #116]	@ (800caac <TIM_OC3_SetConfig+0xfc>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d00f      	beq.n	800ca5a <TIM_OC3_SetConfig+0xaa>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	4a1c      	ldr	r2, [pc, #112]	@ (800cab0 <TIM_OC3_SetConfig+0x100>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d00b      	beq.n	800ca5a <TIM_OC3_SetConfig+0xaa>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	4a1b      	ldr	r2, [pc, #108]	@ (800cab4 <TIM_OC3_SetConfig+0x104>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d007      	beq.n	800ca5a <TIM_OC3_SetConfig+0xaa>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	4a1a      	ldr	r2, [pc, #104]	@ (800cab8 <TIM_OC3_SetConfig+0x108>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d003      	beq.n	800ca5a <TIM_OC3_SetConfig+0xaa>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	4a19      	ldr	r2, [pc, #100]	@ (800cabc <TIM_OC3_SetConfig+0x10c>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d113      	bne.n	800ca82 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ca68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	695b      	ldr	r3, [r3, #20]
 800ca6e:	011b      	lsls	r3, r3, #4
 800ca70:	693a      	ldr	r2, [r7, #16]
 800ca72:	4313      	orrs	r3, r2
 800ca74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	699b      	ldr	r3, [r3, #24]
 800ca7a:	011b      	lsls	r3, r3, #4
 800ca7c:	693a      	ldr	r2, [r7, #16]
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	693a      	ldr	r2, [r7, #16]
 800ca86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	68fa      	ldr	r2, [r7, #12]
 800ca8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	685a      	ldr	r2, [r3, #4]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	697a      	ldr	r2, [r7, #20]
 800ca9a:	621a      	str	r2, [r3, #32]
}
 800ca9c:	bf00      	nop
 800ca9e:	371c      	adds	r7, #28
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr
 800caa8:	fffeff8f 	.word	0xfffeff8f
 800caac:	40010000 	.word	0x40010000
 800cab0:	40010400 	.word	0x40010400
 800cab4:	40014000 	.word	0x40014000
 800cab8:	40014400 	.word	0x40014400
 800cabc:	40014800 	.word	0x40014800

0800cac0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b087      	sub	sp, #28
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6a1b      	ldr	r3, [r3, #32]
 800cace:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6a1b      	ldr	r3, [r3, #32]
 800cad4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	69db      	ldr	r3, [r3, #28]
 800cae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cae8:	68fa      	ldr	r2, [r7, #12]
 800caea:	4b24      	ldr	r3, [pc, #144]	@ (800cb7c <TIM_OC4_SetConfig+0xbc>)
 800caec:	4013      	ands	r3, r2
 800caee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800caf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	021b      	lsls	r3, r3, #8
 800cafe:	68fa      	ldr	r2, [r7, #12]
 800cb00:	4313      	orrs	r3, r2
 800cb02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cb0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	689b      	ldr	r3, [r3, #8]
 800cb10:	031b      	lsls	r3, r3, #12
 800cb12:	693a      	ldr	r2, [r7, #16]
 800cb14:	4313      	orrs	r3, r2
 800cb16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	4a19      	ldr	r2, [pc, #100]	@ (800cb80 <TIM_OC4_SetConfig+0xc0>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d00f      	beq.n	800cb40 <TIM_OC4_SetConfig+0x80>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	4a18      	ldr	r2, [pc, #96]	@ (800cb84 <TIM_OC4_SetConfig+0xc4>)
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d00b      	beq.n	800cb40 <TIM_OC4_SetConfig+0x80>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	4a17      	ldr	r2, [pc, #92]	@ (800cb88 <TIM_OC4_SetConfig+0xc8>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d007      	beq.n	800cb40 <TIM_OC4_SetConfig+0x80>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	4a16      	ldr	r2, [pc, #88]	@ (800cb8c <TIM_OC4_SetConfig+0xcc>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d003      	beq.n	800cb40 <TIM_OC4_SetConfig+0x80>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	4a15      	ldr	r2, [pc, #84]	@ (800cb90 <TIM_OC4_SetConfig+0xd0>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d109      	bne.n	800cb54 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cb46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	695b      	ldr	r3, [r3, #20]
 800cb4c:	019b      	lsls	r3, r3, #6
 800cb4e:	697a      	ldr	r2, [r7, #20]
 800cb50:	4313      	orrs	r3, r2
 800cb52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	697a      	ldr	r2, [r7, #20]
 800cb58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	685a      	ldr	r2, [r3, #4]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	693a      	ldr	r2, [r7, #16]
 800cb6c:	621a      	str	r2, [r3, #32]
}
 800cb6e:	bf00      	nop
 800cb70:	371c      	adds	r7, #28
 800cb72:	46bd      	mov	sp, r7
 800cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb78:	4770      	bx	lr
 800cb7a:	bf00      	nop
 800cb7c:	feff8fff 	.word	0xfeff8fff
 800cb80:	40010000 	.word	0x40010000
 800cb84:	40010400 	.word	0x40010400
 800cb88:	40014000 	.word	0x40014000
 800cb8c:	40014400 	.word	0x40014400
 800cb90:	40014800 	.word	0x40014800

0800cb94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b087      	sub	sp, #28
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6a1b      	ldr	r3, [r3, #32]
 800cba2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6a1b      	ldr	r3, [r3, #32]
 800cba8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cbbc:	68fa      	ldr	r2, [r7, #12]
 800cbbe:	4b21      	ldr	r3, [pc, #132]	@ (800cc44 <TIM_OC5_SetConfig+0xb0>)
 800cbc0:	4013      	ands	r3, r2
 800cbc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	68fa      	ldr	r2, [r7, #12]
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cbd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	689b      	ldr	r3, [r3, #8]
 800cbda:	041b      	lsls	r3, r3, #16
 800cbdc:	693a      	ldr	r2, [r7, #16]
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4a18      	ldr	r2, [pc, #96]	@ (800cc48 <TIM_OC5_SetConfig+0xb4>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d00f      	beq.n	800cc0a <TIM_OC5_SetConfig+0x76>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4a17      	ldr	r2, [pc, #92]	@ (800cc4c <TIM_OC5_SetConfig+0xb8>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d00b      	beq.n	800cc0a <TIM_OC5_SetConfig+0x76>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	4a16      	ldr	r2, [pc, #88]	@ (800cc50 <TIM_OC5_SetConfig+0xbc>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d007      	beq.n	800cc0a <TIM_OC5_SetConfig+0x76>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	4a15      	ldr	r2, [pc, #84]	@ (800cc54 <TIM_OC5_SetConfig+0xc0>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d003      	beq.n	800cc0a <TIM_OC5_SetConfig+0x76>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4a14      	ldr	r2, [pc, #80]	@ (800cc58 <TIM_OC5_SetConfig+0xc4>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d109      	bne.n	800cc1e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cc10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	695b      	ldr	r3, [r3, #20]
 800cc16:	021b      	lsls	r3, r3, #8
 800cc18:	697a      	ldr	r2, [r7, #20]
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	697a      	ldr	r2, [r7, #20]
 800cc22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	68fa      	ldr	r2, [r7, #12]
 800cc28:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	685a      	ldr	r2, [r3, #4]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	693a      	ldr	r2, [r7, #16]
 800cc36:	621a      	str	r2, [r3, #32]
}
 800cc38:	bf00      	nop
 800cc3a:	371c      	adds	r7, #28
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr
 800cc44:	fffeff8f 	.word	0xfffeff8f
 800cc48:	40010000 	.word	0x40010000
 800cc4c:	40010400 	.word	0x40010400
 800cc50:	40014000 	.word	0x40014000
 800cc54:	40014400 	.word	0x40014400
 800cc58:	40014800 	.word	0x40014800

0800cc5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b087      	sub	sp, #28
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6a1b      	ldr	r3, [r3, #32]
 800cc6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6a1b      	ldr	r3, [r3, #32]
 800cc70:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cc84:	68fa      	ldr	r2, [r7, #12]
 800cc86:	4b22      	ldr	r3, [pc, #136]	@ (800cd10 <TIM_OC6_SetConfig+0xb4>)
 800cc88:	4013      	ands	r3, r2
 800cc8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	021b      	lsls	r3, r3, #8
 800cc92:	68fa      	ldr	r2, [r7, #12]
 800cc94:	4313      	orrs	r3, r2
 800cc96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cc9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	689b      	ldr	r3, [r3, #8]
 800cca4:	051b      	lsls	r3, r3, #20
 800cca6:	693a      	ldr	r2, [r7, #16]
 800cca8:	4313      	orrs	r3, r2
 800ccaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	4a19      	ldr	r2, [pc, #100]	@ (800cd14 <TIM_OC6_SetConfig+0xb8>)
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d00f      	beq.n	800ccd4 <TIM_OC6_SetConfig+0x78>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	4a18      	ldr	r2, [pc, #96]	@ (800cd18 <TIM_OC6_SetConfig+0xbc>)
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d00b      	beq.n	800ccd4 <TIM_OC6_SetConfig+0x78>
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	4a17      	ldr	r2, [pc, #92]	@ (800cd1c <TIM_OC6_SetConfig+0xc0>)
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d007      	beq.n	800ccd4 <TIM_OC6_SetConfig+0x78>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	4a16      	ldr	r2, [pc, #88]	@ (800cd20 <TIM_OC6_SetConfig+0xc4>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d003      	beq.n	800ccd4 <TIM_OC6_SetConfig+0x78>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	4a15      	ldr	r2, [pc, #84]	@ (800cd24 <TIM_OC6_SetConfig+0xc8>)
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d109      	bne.n	800cce8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ccda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	695b      	ldr	r3, [r3, #20]
 800cce0:	029b      	lsls	r3, r3, #10
 800cce2:	697a      	ldr	r2, [r7, #20]
 800cce4:	4313      	orrs	r3, r2
 800cce6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	697a      	ldr	r2, [r7, #20]
 800ccec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	685a      	ldr	r2, [r3, #4]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	693a      	ldr	r2, [r7, #16]
 800cd00:	621a      	str	r2, [r3, #32]
}
 800cd02:	bf00      	nop
 800cd04:	371c      	adds	r7, #28
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr
 800cd0e:	bf00      	nop
 800cd10:	feff8fff 	.word	0xfeff8fff
 800cd14:	40010000 	.word	0x40010000
 800cd18:	40010400 	.word	0x40010400
 800cd1c:	40014000 	.word	0x40014000
 800cd20:	40014400 	.word	0x40014400
 800cd24:	40014800 	.word	0x40014800

0800cd28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b087      	sub	sp, #28
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	f003 031f 	and.w	r3, r3, #31
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	fa02 f303 	lsl.w	r3, r2, r3
 800cd40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	6a1a      	ldr	r2, [r3, #32]
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	43db      	mvns	r3, r3
 800cd4a:	401a      	ands	r2, r3
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	6a1a      	ldr	r2, [r3, #32]
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	f003 031f 	and.w	r3, r3, #31
 800cd5a:	6879      	ldr	r1, [r7, #4]
 800cd5c:	fa01 f303 	lsl.w	r3, r1, r3
 800cd60:	431a      	orrs	r2, r3
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	621a      	str	r2, [r3, #32]
}
 800cd66:	bf00      	nop
 800cd68:	371c      	adds	r7, #28
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr
	...

0800cd74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b085      	sub	sp, #20
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d101      	bne.n	800cd8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd88:	2302      	movs	r3, #2
 800cd8a:	e077      	b.n	800ce7c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2202      	movs	r2, #2
 800cd98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	689b      	ldr	r3, [r3, #8]
 800cdaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a35      	ldr	r2, [pc, #212]	@ (800ce88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d004      	beq.n	800cdc0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a34      	ldr	r2, [pc, #208]	@ (800ce8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d108      	bne.n	800cdd2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cdc6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	68fa      	ldr	r2, [r7, #12]
 800cdce:	4313      	orrs	r3, r2
 800cdd0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdd8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	68fa      	ldr	r2, [r7, #12]
 800cde0:	4313      	orrs	r3, r2
 800cde2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4a25      	ldr	r2, [pc, #148]	@ (800ce88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d02c      	beq.n	800ce50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdfe:	d027      	beq.n	800ce50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4a22      	ldr	r2, [pc, #136]	@ (800ce90 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d022      	beq.n	800ce50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4a21      	ldr	r2, [pc, #132]	@ (800ce94 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d01d      	beq.n	800ce50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4a1f      	ldr	r2, [pc, #124]	@ (800ce98 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d018      	beq.n	800ce50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	4a1a      	ldr	r2, [pc, #104]	@ (800ce8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d013      	beq.n	800ce50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a1b      	ldr	r2, [pc, #108]	@ (800ce9c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d00e      	beq.n	800ce50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a1a      	ldr	r2, [pc, #104]	@ (800cea0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d009      	beq.n	800ce50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a18      	ldr	r2, [pc, #96]	@ (800cea4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d004      	beq.n	800ce50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a17      	ldr	r2, [pc, #92]	@ (800cea8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d10c      	bne.n	800ce6a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ce56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	689b      	ldr	r3, [r3, #8]
 800ce5c:	68ba      	ldr	r2, [r7, #8]
 800ce5e:	4313      	orrs	r3, r2
 800ce60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	68ba      	ldr	r2, [r7, #8]
 800ce68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2200      	movs	r2, #0
 800ce76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ce7a:	2300      	movs	r3, #0
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3714      	adds	r7, #20
 800ce80:	46bd      	mov	sp, r7
 800ce82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce86:	4770      	bx	lr
 800ce88:	40010000 	.word	0x40010000
 800ce8c:	40010400 	.word	0x40010400
 800ce90:	40000400 	.word	0x40000400
 800ce94:	40000800 	.word	0x40000800
 800ce98:	40000c00 	.word	0x40000c00
 800ce9c:	40001800 	.word	0x40001800
 800cea0:	40014000 	.word	0x40014000
 800cea4:	4000e000 	.word	0x4000e000
 800cea8:	4000e400 	.word	0x4000e400

0800ceac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d101      	bne.n	800cebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ceba:	2301      	movs	r3, #1
 800cebc:	e042      	b.n	800cf44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d106      	bne.n	800ced6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2200      	movs	r2, #0
 800cecc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f7f5 fa6d 	bl	80023b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2224      	movs	r2, #36	@ 0x24
 800ceda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f022 0201 	bic.w	r2, r2, #1
 800ceec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d002      	beq.n	800cefc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f001 fafa 	bl	800e4f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f000 fc8b 	bl	800d818 <UART_SetConfig>
 800cf02:	4603      	mov	r3, r0
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d101      	bne.n	800cf0c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	e01b      	b.n	800cf44 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	685a      	ldr	r2, [r3, #4]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cf1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	689a      	ldr	r2, [r3, #8]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cf2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	681a      	ldr	r2, [r3, #0]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f042 0201 	orr.w	r2, r2, #1
 800cf3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f001 fb79 	bl	800e634 <UART_CheckIdleState>
 800cf42:	4603      	mov	r3, r0
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3708      	adds	r7, #8
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b08a      	sub	sp, #40	@ 0x28
 800cf50:	af02      	add	r7, sp, #8
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	60b9      	str	r1, [r7, #8]
 800cf56:	603b      	str	r3, [r7, #0]
 800cf58:	4613      	mov	r3, r2
 800cf5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf62:	2b20      	cmp	r3, #32
 800cf64:	d17b      	bne.n	800d05e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d002      	beq.n	800cf72 <HAL_UART_Transmit+0x26>
 800cf6c:	88fb      	ldrh	r3, [r7, #6]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d101      	bne.n	800cf76 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cf72:	2301      	movs	r3, #1
 800cf74:	e074      	b.n	800d060 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2221      	movs	r2, #33	@ 0x21
 800cf82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cf86:	f7f5 fc93 	bl	80028b0 <HAL_GetTick>
 800cf8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	88fa      	ldrh	r2, [r7, #6]
 800cf90:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	88fa      	ldrh	r2, [r7, #6]
 800cf98:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	689b      	ldr	r3, [r3, #8]
 800cfa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cfa4:	d108      	bne.n	800cfb8 <HAL_UART_Transmit+0x6c>
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	691b      	ldr	r3, [r3, #16]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d104      	bne.n	800cfb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	61bb      	str	r3, [r7, #24]
 800cfb6:	e003      	b.n	800cfc0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cfc0:	e030      	b.n	800d024 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	9300      	str	r3, [sp, #0]
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	2180      	movs	r1, #128	@ 0x80
 800cfcc:	68f8      	ldr	r0, [r7, #12]
 800cfce:	f001 fbdb 	bl	800e788 <UART_WaitOnFlagUntilTimeout>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d005      	beq.n	800cfe4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2220      	movs	r2, #32
 800cfdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cfe0:	2303      	movs	r3, #3
 800cfe2:	e03d      	b.n	800d060 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cfe4:	69fb      	ldr	r3, [r7, #28]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d10b      	bne.n	800d002 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cfea:	69bb      	ldr	r3, [r7, #24]
 800cfec:	881b      	ldrh	r3, [r3, #0]
 800cfee:	461a      	mov	r2, r3
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cff8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cffa:	69bb      	ldr	r3, [r7, #24]
 800cffc:	3302      	adds	r3, #2
 800cffe:	61bb      	str	r3, [r7, #24]
 800d000:	e007      	b.n	800d012 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d002:	69fb      	ldr	r3, [r7, #28]
 800d004:	781a      	ldrb	r2, [r3, #0]
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d00c:	69fb      	ldr	r3, [r7, #28]
 800d00e:	3301      	adds	r3, #1
 800d010:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d018:	b29b      	uxth	r3, r3
 800d01a:	3b01      	subs	r3, #1
 800d01c:	b29a      	uxth	r2, r3
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d02a:	b29b      	uxth	r3, r3
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d1c8      	bne.n	800cfc2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	9300      	str	r3, [sp, #0]
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	2200      	movs	r2, #0
 800d038:	2140      	movs	r1, #64	@ 0x40
 800d03a:	68f8      	ldr	r0, [r7, #12]
 800d03c:	f001 fba4 	bl	800e788 <UART_WaitOnFlagUntilTimeout>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d005      	beq.n	800d052 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2220      	movs	r2, #32
 800d04a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d04e:	2303      	movs	r3, #3
 800d050:	e006      	b.n	800d060 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2220      	movs	r2, #32
 800d056:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d05a:	2300      	movs	r3, #0
 800d05c:	e000      	b.n	800d060 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d05e:	2302      	movs	r3, #2
  }
}
 800d060:	4618      	mov	r0, r3
 800d062:	3720      	adds	r7, #32
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b0ba      	sub	sp, #232	@ 0xe8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	69db      	ldr	r3, [r3, #28]
 800d076:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	689b      	ldr	r3, [r3, #8]
 800d08a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d08e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d092:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d096:	4013      	ands	r3, r2
 800d098:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d09c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d11b      	bne.n	800d0dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d0a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0a8:	f003 0320 	and.w	r3, r3, #32
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d015      	beq.n	800d0dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d0b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d0b4:	f003 0320 	and.w	r3, r3, #32
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d105      	bne.n	800d0c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d0bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d0c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d009      	beq.n	800d0dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	f000 8377 	beq.w	800d7c0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	4798      	blx	r3
      }
      return;
 800d0da:	e371      	b.n	800d7c0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d0dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	f000 8123 	beq.w	800d32c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d0e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d0ea:	4b8d      	ldr	r3, [pc, #564]	@ (800d320 <HAL_UART_IRQHandler+0x2b8>)
 800d0ec:	4013      	ands	r3, r2
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d106      	bne.n	800d100 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d0f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d0f6:	4b8b      	ldr	r3, [pc, #556]	@ (800d324 <HAL_UART_IRQHandler+0x2bc>)
 800d0f8:	4013      	ands	r3, r2
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	f000 8116 	beq.w	800d32c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d104:	f003 0301 	and.w	r3, r3, #1
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d011      	beq.n	800d130 <HAL_UART_IRQHandler+0xc8>
 800d10c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d114:	2b00      	cmp	r3, #0
 800d116:	d00b      	beq.n	800d130 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	2201      	movs	r2, #1
 800d11e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d126:	f043 0201 	orr.w	r2, r3, #1
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d134:	f003 0302 	and.w	r3, r3, #2
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d011      	beq.n	800d160 <HAL_UART_IRQHandler+0xf8>
 800d13c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d140:	f003 0301 	and.w	r3, r3, #1
 800d144:	2b00      	cmp	r3, #0
 800d146:	d00b      	beq.n	800d160 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2202      	movs	r2, #2
 800d14e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d156:	f043 0204 	orr.w	r2, r3, #4
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d164:	f003 0304 	and.w	r3, r3, #4
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d011      	beq.n	800d190 <HAL_UART_IRQHandler+0x128>
 800d16c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d170:	f003 0301 	and.w	r3, r3, #1
 800d174:	2b00      	cmp	r3, #0
 800d176:	d00b      	beq.n	800d190 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	2204      	movs	r2, #4
 800d17e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d186:	f043 0202 	orr.w	r2, r3, #2
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d194:	f003 0308 	and.w	r3, r3, #8
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d017      	beq.n	800d1cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d19c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1a0:	f003 0320 	and.w	r3, r3, #32
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d105      	bne.n	800d1b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d1a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d1ac:	4b5c      	ldr	r3, [pc, #368]	@ (800d320 <HAL_UART_IRQHandler+0x2b8>)
 800d1ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d00b      	beq.n	800d1cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	2208      	movs	r2, #8
 800d1ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1c2:	f043 0208 	orr.w	r2, r3, #8
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d1cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d012      	beq.n	800d1fe <HAL_UART_IRQHandler+0x196>
 800d1d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d00c      	beq.n	800d1fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d1ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1f4:	f043 0220 	orr.w	r2, r3, #32
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d204:	2b00      	cmp	r3, #0
 800d206:	f000 82dd 	beq.w	800d7c4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d20a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d20e:	f003 0320 	and.w	r3, r3, #32
 800d212:	2b00      	cmp	r3, #0
 800d214:	d013      	beq.n	800d23e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d21a:	f003 0320 	and.w	r3, r3, #32
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d105      	bne.n	800d22e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d007      	beq.n	800d23e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d232:	2b00      	cmp	r3, #0
 800d234:	d003      	beq.n	800d23e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d244:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	689b      	ldr	r3, [r3, #8]
 800d24e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d252:	2b40      	cmp	r3, #64	@ 0x40
 800d254:	d005      	beq.n	800d262 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d256:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d25a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d054      	beq.n	800d30c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f001 fc20 	bl	800eaa8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	689b      	ldr	r3, [r3, #8]
 800d26e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d272:	2b40      	cmp	r3, #64	@ 0x40
 800d274:	d146      	bne.n	800d304 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	3308      	adds	r3, #8
 800d27c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d280:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d284:	e853 3f00 	ldrex	r3, [r3]
 800d288:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d28c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d290:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d294:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	3308      	adds	r3, #8
 800d29e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d2a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d2a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d2ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d2b2:	e841 2300 	strex	r3, r2, [r1]
 800d2b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d2ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d1d9      	bne.n	800d276 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d017      	beq.n	800d2fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2d2:	4a15      	ldr	r2, [pc, #84]	@ (800d328 <HAL_UART_IRQHandler+0x2c0>)
 800d2d4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7f8 fdc5 	bl	8005e6c <HAL_DMA_Abort_IT>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d019      	beq.n	800d31c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d2f6:	4610      	mov	r0, r2
 800d2f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2fa:	e00f      	b.n	800d31c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f000 fa81 	bl	800d804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d302:	e00b      	b.n	800d31c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f000 fa7d 	bl	800d804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d30a:	e007      	b.n	800d31c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f000 fa79 	bl	800d804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2200      	movs	r2, #0
 800d316:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d31a:	e253      	b.n	800d7c4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d31c:	bf00      	nop
    return;
 800d31e:	e251      	b.n	800d7c4 <HAL_UART_IRQHandler+0x75c>
 800d320:	10000001 	.word	0x10000001
 800d324:	04000120 	.word	0x04000120
 800d328:	0800eb75 	.word	0x0800eb75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d330:	2b01      	cmp	r3, #1
 800d332:	f040 81e7 	bne.w	800d704 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d33a:	f003 0310 	and.w	r3, r3, #16
 800d33e:	2b00      	cmp	r3, #0
 800d340:	f000 81e0 	beq.w	800d704 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d348:	f003 0310 	and.w	r3, r3, #16
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	f000 81d9 	beq.w	800d704 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	2210      	movs	r2, #16
 800d358:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d364:	2b40      	cmp	r3, #64	@ 0x40
 800d366:	f040 8151 	bne.w	800d60c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4a96      	ldr	r2, [pc, #600]	@ (800d5cc <HAL_UART_IRQHandler+0x564>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d068      	beq.n	800d44a <HAL_UART_IRQHandler+0x3e2>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4a93      	ldr	r2, [pc, #588]	@ (800d5d0 <HAL_UART_IRQHandler+0x568>)
 800d382:	4293      	cmp	r3, r2
 800d384:	d061      	beq.n	800d44a <HAL_UART_IRQHandler+0x3e2>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4a91      	ldr	r2, [pc, #580]	@ (800d5d4 <HAL_UART_IRQHandler+0x56c>)
 800d390:	4293      	cmp	r3, r2
 800d392:	d05a      	beq.n	800d44a <HAL_UART_IRQHandler+0x3e2>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4a8e      	ldr	r2, [pc, #568]	@ (800d5d8 <HAL_UART_IRQHandler+0x570>)
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d053      	beq.n	800d44a <HAL_UART_IRQHandler+0x3e2>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4a8c      	ldr	r2, [pc, #560]	@ (800d5dc <HAL_UART_IRQHandler+0x574>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d04c      	beq.n	800d44a <HAL_UART_IRQHandler+0x3e2>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4a89      	ldr	r2, [pc, #548]	@ (800d5e0 <HAL_UART_IRQHandler+0x578>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d045      	beq.n	800d44a <HAL_UART_IRQHandler+0x3e2>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4a87      	ldr	r2, [pc, #540]	@ (800d5e4 <HAL_UART_IRQHandler+0x57c>)
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d03e      	beq.n	800d44a <HAL_UART_IRQHandler+0x3e2>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4a84      	ldr	r2, [pc, #528]	@ (800d5e8 <HAL_UART_IRQHandler+0x580>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d037      	beq.n	800d44a <HAL_UART_IRQHandler+0x3e2>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	4a82      	ldr	r2, [pc, #520]	@ (800d5ec <HAL_UART_IRQHandler+0x584>)
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d030      	beq.n	800d44a <HAL_UART_IRQHandler+0x3e2>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a7f      	ldr	r2, [pc, #508]	@ (800d5f0 <HAL_UART_IRQHandler+0x588>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d029      	beq.n	800d44a <HAL_UART_IRQHandler+0x3e2>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	4a7d      	ldr	r2, [pc, #500]	@ (800d5f4 <HAL_UART_IRQHandler+0x58c>)
 800d400:	4293      	cmp	r3, r2
 800d402:	d022      	beq.n	800d44a <HAL_UART_IRQHandler+0x3e2>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4a7a      	ldr	r2, [pc, #488]	@ (800d5f8 <HAL_UART_IRQHandler+0x590>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d01b      	beq.n	800d44a <HAL_UART_IRQHandler+0x3e2>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	4a78      	ldr	r2, [pc, #480]	@ (800d5fc <HAL_UART_IRQHandler+0x594>)
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d014      	beq.n	800d44a <HAL_UART_IRQHandler+0x3e2>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	4a75      	ldr	r2, [pc, #468]	@ (800d600 <HAL_UART_IRQHandler+0x598>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d00d      	beq.n	800d44a <HAL_UART_IRQHandler+0x3e2>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4a73      	ldr	r2, [pc, #460]	@ (800d604 <HAL_UART_IRQHandler+0x59c>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d006      	beq.n	800d44a <HAL_UART_IRQHandler+0x3e2>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4a70      	ldr	r2, [pc, #448]	@ (800d608 <HAL_UART_IRQHandler+0x5a0>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d106      	bne.n	800d458 <HAL_UART_IRQHandler+0x3f0>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	685b      	ldr	r3, [r3, #4]
 800d454:	b29b      	uxth	r3, r3
 800d456:	e005      	b.n	800d464 <HAL_UART_IRQHandler+0x3fc>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	b29b      	uxth	r3, r3
 800d464:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d468:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	f000 81ab 	beq.w	800d7c8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d478:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d47c:	429a      	cmp	r2, r3
 800d47e:	f080 81a3 	bcs.w	800d7c8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d488:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d492:	69db      	ldr	r3, [r3, #28]
 800d494:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d498:	f000 8087 	beq.w	800d5aa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d4a8:	e853 3f00 	ldrex	r3, [r3]
 800d4ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d4b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d4b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d4b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d4c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d4ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d4d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d4d6:	e841 2300 	strex	r3, r2, [r1]
 800d4da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d4de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d1da      	bne.n	800d49c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	3308      	adds	r3, #8
 800d4ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d4f0:	e853 3f00 	ldrex	r3, [r3]
 800d4f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d4f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d4f8:	f023 0301 	bic.w	r3, r3, #1
 800d4fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	3308      	adds	r3, #8
 800d506:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d50a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d50e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d510:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d512:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d516:	e841 2300 	strex	r3, r2, [r1]
 800d51a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d51c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d1e1      	bne.n	800d4e6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	3308      	adds	r3, #8
 800d528:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d52a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d52c:	e853 3f00 	ldrex	r3, [r3]
 800d530:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d532:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d534:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d538:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	3308      	adds	r3, #8
 800d542:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d546:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d548:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d54a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d54c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d54e:	e841 2300 	strex	r3, r2, [r1]
 800d552:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d554:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d556:	2b00      	cmp	r3, #0
 800d558:	d1e3      	bne.n	800d522 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2220      	movs	r2, #32
 800d55e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2200      	movs	r2, #0
 800d566:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d56e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d570:	e853 3f00 	ldrex	r3, [r3]
 800d574:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d576:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d578:	f023 0310 	bic.w	r3, r3, #16
 800d57c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	461a      	mov	r2, r3
 800d586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d58a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d58c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d58e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d590:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d592:	e841 2300 	strex	r3, r2, [r1]
 800d596:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d598:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d1e4      	bne.n	800d568 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f7f8 f943 	bl	8005830 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2202      	movs	r2, #2
 800d5ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	1ad3      	subs	r3, r2, r3
 800d5c0:	b29b      	uxth	r3, r3
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f7f3 fc49 	bl	8000e5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d5ca:	e0fd      	b.n	800d7c8 <HAL_UART_IRQHandler+0x760>
 800d5cc:	40020010 	.word	0x40020010
 800d5d0:	40020028 	.word	0x40020028
 800d5d4:	40020040 	.word	0x40020040
 800d5d8:	40020058 	.word	0x40020058
 800d5dc:	40020070 	.word	0x40020070
 800d5e0:	40020088 	.word	0x40020088
 800d5e4:	400200a0 	.word	0x400200a0
 800d5e8:	400200b8 	.word	0x400200b8
 800d5ec:	40020410 	.word	0x40020410
 800d5f0:	40020428 	.word	0x40020428
 800d5f4:	40020440 	.word	0x40020440
 800d5f8:	40020458 	.word	0x40020458
 800d5fc:	40020470 	.word	0x40020470
 800d600:	40020488 	.word	0x40020488
 800d604:	400204a0 	.word	0x400204a0
 800d608:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d618:	b29b      	uxth	r3, r3
 800d61a:	1ad3      	subs	r3, r2, r3
 800d61c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d626:	b29b      	uxth	r3, r3
 800d628:	2b00      	cmp	r3, #0
 800d62a:	f000 80cf 	beq.w	800d7cc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d62e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d632:	2b00      	cmp	r3, #0
 800d634:	f000 80ca 	beq.w	800d7cc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d640:	e853 3f00 	ldrex	r3, [r3]
 800d644:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d648:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d64c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	461a      	mov	r2, r3
 800d656:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d65a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d65c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d65e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d660:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d662:	e841 2300 	strex	r3, r2, [r1]
 800d666:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d1e4      	bne.n	800d638 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	3308      	adds	r3, #8
 800d674:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d678:	e853 3f00 	ldrex	r3, [r3]
 800d67c:	623b      	str	r3, [r7, #32]
   return(result);
 800d67e:	6a3a      	ldr	r2, [r7, #32]
 800d680:	4b55      	ldr	r3, [pc, #340]	@ (800d7d8 <HAL_UART_IRQHandler+0x770>)
 800d682:	4013      	ands	r3, r2
 800d684:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	3308      	adds	r3, #8
 800d68e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d692:	633a      	str	r2, [r7, #48]	@ 0x30
 800d694:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d696:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d698:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d69a:	e841 2300 	strex	r3, r2, [r1]
 800d69e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d1e3      	bne.n	800d66e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2220      	movs	r2, #32
 800d6aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	e853 3f00 	ldrex	r3, [r3]
 800d6c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	f023 0310 	bic.w	r3, r3, #16
 800d6ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d6dc:	61fb      	str	r3, [r7, #28]
 800d6de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6e0:	69b9      	ldr	r1, [r7, #24]
 800d6e2:	69fa      	ldr	r2, [r7, #28]
 800d6e4:	e841 2300 	strex	r3, r2, [r1]
 800d6e8:	617b      	str	r3, [r7, #20]
   return(result);
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d1e4      	bne.n	800d6ba <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2202      	movs	r2, #2
 800d6f4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d6f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f7f3 fbad 	bl	8000e5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d702:	e063      	b.n	800d7cc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d708:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d00e      	beq.n	800d72e <HAL_UART_IRQHandler+0x6c6>
 800d710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d714:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d008      	beq.n	800d72e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d724:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f001 ff82 	bl	800f630 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d72c:	e051      	b.n	800d7d2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d72e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d736:	2b00      	cmp	r3, #0
 800d738:	d014      	beq.n	800d764 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d73a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d73e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d742:	2b00      	cmp	r3, #0
 800d744:	d105      	bne.n	800d752 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d74a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d008      	beq.n	800d764 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d756:	2b00      	cmp	r3, #0
 800d758:	d03a      	beq.n	800d7d0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	4798      	blx	r3
    }
    return;
 800d762:	e035      	b.n	800d7d0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d009      	beq.n	800d784 <HAL_UART_IRQHandler+0x71c>
 800d770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d003      	beq.n	800d784 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f001 fa0f 	bl	800eba0 <UART_EndTransmit_IT>
    return;
 800d782:	e026      	b.n	800d7d2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d788:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d009      	beq.n	800d7a4 <HAL_UART_IRQHandler+0x73c>
 800d790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d794:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d003      	beq.n	800d7a4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f001 ff5b 	bl	800f658 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d7a2:	e016      	b.n	800d7d2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d7a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d7a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d010      	beq.n	800d7d2 <HAL_UART_IRQHandler+0x76a>
 800d7b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	da0c      	bge.n	800d7d2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f001 ff43 	bl	800f644 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d7be:	e008      	b.n	800d7d2 <HAL_UART_IRQHandler+0x76a>
      return;
 800d7c0:	bf00      	nop
 800d7c2:	e006      	b.n	800d7d2 <HAL_UART_IRQHandler+0x76a>
    return;
 800d7c4:	bf00      	nop
 800d7c6:	e004      	b.n	800d7d2 <HAL_UART_IRQHandler+0x76a>
      return;
 800d7c8:	bf00      	nop
 800d7ca:	e002      	b.n	800d7d2 <HAL_UART_IRQHandler+0x76a>
      return;
 800d7cc:	bf00      	nop
 800d7ce:	e000      	b.n	800d7d2 <HAL_UART_IRQHandler+0x76a>
    return;
 800d7d0:	bf00      	nop
  }
}
 800d7d2:	37e8      	adds	r7, #232	@ 0xe8
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}
 800d7d8:	effffffe 	.word	0xeffffffe

0800d7dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b083      	sub	sp, #12
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d7e4:	bf00      	nop
 800d7e6:	370c      	adds	r7, #12
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr

0800d7f0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d7f8:	bf00      	nop
 800d7fa:	370c      	adds	r7, #12
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d802:	4770      	bx	lr

0800d804 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d804:	b480      	push	{r7}
 800d806:	b083      	sub	sp, #12
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d80c:	bf00      	nop
 800d80e:	370c      	adds	r7, #12
 800d810:	46bd      	mov	sp, r7
 800d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d816:	4770      	bx	lr

0800d818 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d81c:	b092      	sub	sp, #72	@ 0x48
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d822:	2300      	movs	r3, #0
 800d824:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	689a      	ldr	r2, [r3, #8]
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	691b      	ldr	r3, [r3, #16]
 800d830:	431a      	orrs	r2, r3
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	695b      	ldr	r3, [r3, #20]
 800d836:	431a      	orrs	r2, r3
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	69db      	ldr	r3, [r3, #28]
 800d83c:	4313      	orrs	r3, r2
 800d83e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	681a      	ldr	r2, [r3, #0]
 800d846:	4bbe      	ldr	r3, [pc, #760]	@ (800db40 <UART_SetConfig+0x328>)
 800d848:	4013      	ands	r3, r2
 800d84a:	697a      	ldr	r2, [r7, #20]
 800d84c:	6812      	ldr	r2, [r2, #0]
 800d84e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d850:	430b      	orrs	r3, r1
 800d852:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	68da      	ldr	r2, [r3, #12]
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	430a      	orrs	r2, r1
 800d868:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	699b      	ldr	r3, [r3, #24]
 800d86e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4ab3      	ldr	r2, [pc, #716]	@ (800db44 <UART_SetConfig+0x32c>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d004      	beq.n	800d884 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	6a1b      	ldr	r3, [r3, #32]
 800d87e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d880:	4313      	orrs	r3, r2
 800d882:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	689a      	ldr	r2, [r3, #8]
 800d88a:	4baf      	ldr	r3, [pc, #700]	@ (800db48 <UART_SetConfig+0x330>)
 800d88c:	4013      	ands	r3, r2
 800d88e:	697a      	ldr	r2, [r7, #20]
 800d890:	6812      	ldr	r2, [r2, #0]
 800d892:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d894:	430b      	orrs	r3, r1
 800d896:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d89e:	f023 010f 	bic.w	r1, r3, #15
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	430a      	orrs	r2, r1
 800d8ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	4aa6      	ldr	r2, [pc, #664]	@ (800db4c <UART_SetConfig+0x334>)
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d177      	bne.n	800d9a8 <UART_SetConfig+0x190>
 800d8b8:	4ba5      	ldr	r3, [pc, #660]	@ (800db50 <UART_SetConfig+0x338>)
 800d8ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d8c0:	2b28      	cmp	r3, #40	@ 0x28
 800d8c2:	d86d      	bhi.n	800d9a0 <UART_SetConfig+0x188>
 800d8c4:	a201      	add	r2, pc, #4	@ (adr r2, 800d8cc <UART_SetConfig+0xb4>)
 800d8c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8ca:	bf00      	nop
 800d8cc:	0800d971 	.word	0x0800d971
 800d8d0:	0800d9a1 	.word	0x0800d9a1
 800d8d4:	0800d9a1 	.word	0x0800d9a1
 800d8d8:	0800d9a1 	.word	0x0800d9a1
 800d8dc:	0800d9a1 	.word	0x0800d9a1
 800d8e0:	0800d9a1 	.word	0x0800d9a1
 800d8e4:	0800d9a1 	.word	0x0800d9a1
 800d8e8:	0800d9a1 	.word	0x0800d9a1
 800d8ec:	0800d979 	.word	0x0800d979
 800d8f0:	0800d9a1 	.word	0x0800d9a1
 800d8f4:	0800d9a1 	.word	0x0800d9a1
 800d8f8:	0800d9a1 	.word	0x0800d9a1
 800d8fc:	0800d9a1 	.word	0x0800d9a1
 800d900:	0800d9a1 	.word	0x0800d9a1
 800d904:	0800d9a1 	.word	0x0800d9a1
 800d908:	0800d9a1 	.word	0x0800d9a1
 800d90c:	0800d981 	.word	0x0800d981
 800d910:	0800d9a1 	.word	0x0800d9a1
 800d914:	0800d9a1 	.word	0x0800d9a1
 800d918:	0800d9a1 	.word	0x0800d9a1
 800d91c:	0800d9a1 	.word	0x0800d9a1
 800d920:	0800d9a1 	.word	0x0800d9a1
 800d924:	0800d9a1 	.word	0x0800d9a1
 800d928:	0800d9a1 	.word	0x0800d9a1
 800d92c:	0800d989 	.word	0x0800d989
 800d930:	0800d9a1 	.word	0x0800d9a1
 800d934:	0800d9a1 	.word	0x0800d9a1
 800d938:	0800d9a1 	.word	0x0800d9a1
 800d93c:	0800d9a1 	.word	0x0800d9a1
 800d940:	0800d9a1 	.word	0x0800d9a1
 800d944:	0800d9a1 	.word	0x0800d9a1
 800d948:	0800d9a1 	.word	0x0800d9a1
 800d94c:	0800d991 	.word	0x0800d991
 800d950:	0800d9a1 	.word	0x0800d9a1
 800d954:	0800d9a1 	.word	0x0800d9a1
 800d958:	0800d9a1 	.word	0x0800d9a1
 800d95c:	0800d9a1 	.word	0x0800d9a1
 800d960:	0800d9a1 	.word	0x0800d9a1
 800d964:	0800d9a1 	.word	0x0800d9a1
 800d968:	0800d9a1 	.word	0x0800d9a1
 800d96c:	0800d999 	.word	0x0800d999
 800d970:	2301      	movs	r3, #1
 800d972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d976:	e326      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800d978:	2304      	movs	r3, #4
 800d97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d97e:	e322      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800d980:	2308      	movs	r3, #8
 800d982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d986:	e31e      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800d988:	2310      	movs	r3, #16
 800d98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d98e:	e31a      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800d990:	2320      	movs	r3, #32
 800d992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d996:	e316      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800d998:	2340      	movs	r3, #64	@ 0x40
 800d99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d99e:	e312      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800d9a0:	2380      	movs	r3, #128	@ 0x80
 800d9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9a6:	e30e      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4a69      	ldr	r2, [pc, #420]	@ (800db54 <UART_SetConfig+0x33c>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d130      	bne.n	800da14 <UART_SetConfig+0x1fc>
 800d9b2:	4b67      	ldr	r3, [pc, #412]	@ (800db50 <UART_SetConfig+0x338>)
 800d9b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9b6:	f003 0307 	and.w	r3, r3, #7
 800d9ba:	2b05      	cmp	r3, #5
 800d9bc:	d826      	bhi.n	800da0c <UART_SetConfig+0x1f4>
 800d9be:	a201      	add	r2, pc, #4	@ (adr r2, 800d9c4 <UART_SetConfig+0x1ac>)
 800d9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9c4:	0800d9dd 	.word	0x0800d9dd
 800d9c8:	0800d9e5 	.word	0x0800d9e5
 800d9cc:	0800d9ed 	.word	0x0800d9ed
 800d9d0:	0800d9f5 	.word	0x0800d9f5
 800d9d4:	0800d9fd 	.word	0x0800d9fd
 800d9d8:	0800da05 	.word	0x0800da05
 800d9dc:	2300      	movs	r3, #0
 800d9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9e2:	e2f0      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800d9e4:	2304      	movs	r3, #4
 800d9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ea:	e2ec      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800d9ec:	2308      	movs	r3, #8
 800d9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9f2:	e2e8      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800d9f4:	2310      	movs	r3, #16
 800d9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9fa:	e2e4      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800d9fc:	2320      	movs	r3, #32
 800d9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da02:	e2e0      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800da04:	2340      	movs	r3, #64	@ 0x40
 800da06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da0a:	e2dc      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800da0c:	2380      	movs	r3, #128	@ 0x80
 800da0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da12:	e2d8      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a4f      	ldr	r2, [pc, #316]	@ (800db58 <UART_SetConfig+0x340>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d130      	bne.n	800da80 <UART_SetConfig+0x268>
 800da1e:	4b4c      	ldr	r3, [pc, #304]	@ (800db50 <UART_SetConfig+0x338>)
 800da20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da22:	f003 0307 	and.w	r3, r3, #7
 800da26:	2b05      	cmp	r3, #5
 800da28:	d826      	bhi.n	800da78 <UART_SetConfig+0x260>
 800da2a:	a201      	add	r2, pc, #4	@ (adr r2, 800da30 <UART_SetConfig+0x218>)
 800da2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da30:	0800da49 	.word	0x0800da49
 800da34:	0800da51 	.word	0x0800da51
 800da38:	0800da59 	.word	0x0800da59
 800da3c:	0800da61 	.word	0x0800da61
 800da40:	0800da69 	.word	0x0800da69
 800da44:	0800da71 	.word	0x0800da71
 800da48:	2300      	movs	r3, #0
 800da4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da4e:	e2ba      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800da50:	2304      	movs	r3, #4
 800da52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da56:	e2b6      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800da58:	2308      	movs	r3, #8
 800da5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da5e:	e2b2      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800da60:	2310      	movs	r3, #16
 800da62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da66:	e2ae      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800da68:	2320      	movs	r3, #32
 800da6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da6e:	e2aa      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800da70:	2340      	movs	r3, #64	@ 0x40
 800da72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da76:	e2a6      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800da78:	2380      	movs	r3, #128	@ 0x80
 800da7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da7e:	e2a2      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4a35      	ldr	r2, [pc, #212]	@ (800db5c <UART_SetConfig+0x344>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d130      	bne.n	800daec <UART_SetConfig+0x2d4>
 800da8a:	4b31      	ldr	r3, [pc, #196]	@ (800db50 <UART_SetConfig+0x338>)
 800da8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da8e:	f003 0307 	and.w	r3, r3, #7
 800da92:	2b05      	cmp	r3, #5
 800da94:	d826      	bhi.n	800dae4 <UART_SetConfig+0x2cc>
 800da96:	a201      	add	r2, pc, #4	@ (adr r2, 800da9c <UART_SetConfig+0x284>)
 800da98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da9c:	0800dab5 	.word	0x0800dab5
 800daa0:	0800dabd 	.word	0x0800dabd
 800daa4:	0800dac5 	.word	0x0800dac5
 800daa8:	0800dacd 	.word	0x0800dacd
 800daac:	0800dad5 	.word	0x0800dad5
 800dab0:	0800dadd 	.word	0x0800dadd
 800dab4:	2300      	movs	r3, #0
 800dab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daba:	e284      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dabc:	2304      	movs	r3, #4
 800dabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dac2:	e280      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dac4:	2308      	movs	r3, #8
 800dac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daca:	e27c      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dacc:	2310      	movs	r3, #16
 800dace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dad2:	e278      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dad4:	2320      	movs	r3, #32
 800dad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dada:	e274      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dadc:	2340      	movs	r3, #64	@ 0x40
 800dade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dae2:	e270      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dae4:	2380      	movs	r3, #128	@ 0x80
 800dae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daea:	e26c      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	4a1b      	ldr	r2, [pc, #108]	@ (800db60 <UART_SetConfig+0x348>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d142      	bne.n	800db7c <UART_SetConfig+0x364>
 800daf6:	4b16      	ldr	r3, [pc, #88]	@ (800db50 <UART_SetConfig+0x338>)
 800daf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dafa:	f003 0307 	and.w	r3, r3, #7
 800dafe:	2b05      	cmp	r3, #5
 800db00:	d838      	bhi.n	800db74 <UART_SetConfig+0x35c>
 800db02:	a201      	add	r2, pc, #4	@ (adr r2, 800db08 <UART_SetConfig+0x2f0>)
 800db04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db08:	0800db21 	.word	0x0800db21
 800db0c:	0800db29 	.word	0x0800db29
 800db10:	0800db31 	.word	0x0800db31
 800db14:	0800db39 	.word	0x0800db39
 800db18:	0800db65 	.word	0x0800db65
 800db1c:	0800db6d 	.word	0x0800db6d
 800db20:	2300      	movs	r3, #0
 800db22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db26:	e24e      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800db28:	2304      	movs	r3, #4
 800db2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db2e:	e24a      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800db30:	2308      	movs	r3, #8
 800db32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db36:	e246      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800db38:	2310      	movs	r3, #16
 800db3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db3e:	e242      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800db40:	cfff69f3 	.word	0xcfff69f3
 800db44:	58000c00 	.word	0x58000c00
 800db48:	11fff4ff 	.word	0x11fff4ff
 800db4c:	40011000 	.word	0x40011000
 800db50:	58024400 	.word	0x58024400
 800db54:	40004400 	.word	0x40004400
 800db58:	40004800 	.word	0x40004800
 800db5c:	40004c00 	.word	0x40004c00
 800db60:	40005000 	.word	0x40005000
 800db64:	2320      	movs	r3, #32
 800db66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db6a:	e22c      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800db6c:	2340      	movs	r3, #64	@ 0x40
 800db6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db72:	e228      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800db74:	2380      	movs	r3, #128	@ 0x80
 800db76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db7a:	e224      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4ab1      	ldr	r2, [pc, #708]	@ (800de48 <UART_SetConfig+0x630>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d176      	bne.n	800dc74 <UART_SetConfig+0x45c>
 800db86:	4bb1      	ldr	r3, [pc, #708]	@ (800de4c <UART_SetConfig+0x634>)
 800db88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800db8e:	2b28      	cmp	r3, #40	@ 0x28
 800db90:	d86c      	bhi.n	800dc6c <UART_SetConfig+0x454>
 800db92:	a201      	add	r2, pc, #4	@ (adr r2, 800db98 <UART_SetConfig+0x380>)
 800db94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db98:	0800dc3d 	.word	0x0800dc3d
 800db9c:	0800dc6d 	.word	0x0800dc6d
 800dba0:	0800dc6d 	.word	0x0800dc6d
 800dba4:	0800dc6d 	.word	0x0800dc6d
 800dba8:	0800dc6d 	.word	0x0800dc6d
 800dbac:	0800dc6d 	.word	0x0800dc6d
 800dbb0:	0800dc6d 	.word	0x0800dc6d
 800dbb4:	0800dc6d 	.word	0x0800dc6d
 800dbb8:	0800dc45 	.word	0x0800dc45
 800dbbc:	0800dc6d 	.word	0x0800dc6d
 800dbc0:	0800dc6d 	.word	0x0800dc6d
 800dbc4:	0800dc6d 	.word	0x0800dc6d
 800dbc8:	0800dc6d 	.word	0x0800dc6d
 800dbcc:	0800dc6d 	.word	0x0800dc6d
 800dbd0:	0800dc6d 	.word	0x0800dc6d
 800dbd4:	0800dc6d 	.word	0x0800dc6d
 800dbd8:	0800dc4d 	.word	0x0800dc4d
 800dbdc:	0800dc6d 	.word	0x0800dc6d
 800dbe0:	0800dc6d 	.word	0x0800dc6d
 800dbe4:	0800dc6d 	.word	0x0800dc6d
 800dbe8:	0800dc6d 	.word	0x0800dc6d
 800dbec:	0800dc6d 	.word	0x0800dc6d
 800dbf0:	0800dc6d 	.word	0x0800dc6d
 800dbf4:	0800dc6d 	.word	0x0800dc6d
 800dbf8:	0800dc55 	.word	0x0800dc55
 800dbfc:	0800dc6d 	.word	0x0800dc6d
 800dc00:	0800dc6d 	.word	0x0800dc6d
 800dc04:	0800dc6d 	.word	0x0800dc6d
 800dc08:	0800dc6d 	.word	0x0800dc6d
 800dc0c:	0800dc6d 	.word	0x0800dc6d
 800dc10:	0800dc6d 	.word	0x0800dc6d
 800dc14:	0800dc6d 	.word	0x0800dc6d
 800dc18:	0800dc5d 	.word	0x0800dc5d
 800dc1c:	0800dc6d 	.word	0x0800dc6d
 800dc20:	0800dc6d 	.word	0x0800dc6d
 800dc24:	0800dc6d 	.word	0x0800dc6d
 800dc28:	0800dc6d 	.word	0x0800dc6d
 800dc2c:	0800dc6d 	.word	0x0800dc6d
 800dc30:	0800dc6d 	.word	0x0800dc6d
 800dc34:	0800dc6d 	.word	0x0800dc6d
 800dc38:	0800dc65 	.word	0x0800dc65
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc42:	e1c0      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dc44:	2304      	movs	r3, #4
 800dc46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc4a:	e1bc      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dc4c:	2308      	movs	r3, #8
 800dc4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc52:	e1b8      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dc54:	2310      	movs	r3, #16
 800dc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc5a:	e1b4      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dc5c:	2320      	movs	r3, #32
 800dc5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc62:	e1b0      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dc64:	2340      	movs	r3, #64	@ 0x40
 800dc66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc6a:	e1ac      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dc6c:	2380      	movs	r3, #128	@ 0x80
 800dc6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc72:	e1a8      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4a75      	ldr	r2, [pc, #468]	@ (800de50 <UART_SetConfig+0x638>)
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d130      	bne.n	800dce0 <UART_SetConfig+0x4c8>
 800dc7e:	4b73      	ldr	r3, [pc, #460]	@ (800de4c <UART_SetConfig+0x634>)
 800dc80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc82:	f003 0307 	and.w	r3, r3, #7
 800dc86:	2b05      	cmp	r3, #5
 800dc88:	d826      	bhi.n	800dcd8 <UART_SetConfig+0x4c0>
 800dc8a:	a201      	add	r2, pc, #4	@ (adr r2, 800dc90 <UART_SetConfig+0x478>)
 800dc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc90:	0800dca9 	.word	0x0800dca9
 800dc94:	0800dcb1 	.word	0x0800dcb1
 800dc98:	0800dcb9 	.word	0x0800dcb9
 800dc9c:	0800dcc1 	.word	0x0800dcc1
 800dca0:	0800dcc9 	.word	0x0800dcc9
 800dca4:	0800dcd1 	.word	0x0800dcd1
 800dca8:	2300      	movs	r3, #0
 800dcaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcae:	e18a      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dcb0:	2304      	movs	r3, #4
 800dcb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcb6:	e186      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dcb8:	2308      	movs	r3, #8
 800dcba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcbe:	e182      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dcc0:	2310      	movs	r3, #16
 800dcc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcc6:	e17e      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dcc8:	2320      	movs	r3, #32
 800dcca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcce:	e17a      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dcd0:	2340      	movs	r3, #64	@ 0x40
 800dcd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcd6:	e176      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dcd8:	2380      	movs	r3, #128	@ 0x80
 800dcda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcde:	e172      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	4a5b      	ldr	r2, [pc, #364]	@ (800de54 <UART_SetConfig+0x63c>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d130      	bne.n	800dd4c <UART_SetConfig+0x534>
 800dcea:	4b58      	ldr	r3, [pc, #352]	@ (800de4c <UART_SetConfig+0x634>)
 800dcec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcee:	f003 0307 	and.w	r3, r3, #7
 800dcf2:	2b05      	cmp	r3, #5
 800dcf4:	d826      	bhi.n	800dd44 <UART_SetConfig+0x52c>
 800dcf6:	a201      	add	r2, pc, #4	@ (adr r2, 800dcfc <UART_SetConfig+0x4e4>)
 800dcf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcfc:	0800dd15 	.word	0x0800dd15
 800dd00:	0800dd1d 	.word	0x0800dd1d
 800dd04:	0800dd25 	.word	0x0800dd25
 800dd08:	0800dd2d 	.word	0x0800dd2d
 800dd0c:	0800dd35 	.word	0x0800dd35
 800dd10:	0800dd3d 	.word	0x0800dd3d
 800dd14:	2300      	movs	r3, #0
 800dd16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd1a:	e154      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dd1c:	2304      	movs	r3, #4
 800dd1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd22:	e150      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dd24:	2308      	movs	r3, #8
 800dd26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd2a:	e14c      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dd2c:	2310      	movs	r3, #16
 800dd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd32:	e148      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dd34:	2320      	movs	r3, #32
 800dd36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd3a:	e144      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dd3c:	2340      	movs	r3, #64	@ 0x40
 800dd3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd42:	e140      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dd44:	2380      	movs	r3, #128	@ 0x80
 800dd46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd4a:	e13c      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a41      	ldr	r2, [pc, #260]	@ (800de58 <UART_SetConfig+0x640>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	f040 8082 	bne.w	800de5c <UART_SetConfig+0x644>
 800dd58:	4b3c      	ldr	r3, [pc, #240]	@ (800de4c <UART_SetConfig+0x634>)
 800dd5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dd60:	2b28      	cmp	r3, #40	@ 0x28
 800dd62:	d86d      	bhi.n	800de40 <UART_SetConfig+0x628>
 800dd64:	a201      	add	r2, pc, #4	@ (adr r2, 800dd6c <UART_SetConfig+0x554>)
 800dd66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd6a:	bf00      	nop
 800dd6c:	0800de11 	.word	0x0800de11
 800dd70:	0800de41 	.word	0x0800de41
 800dd74:	0800de41 	.word	0x0800de41
 800dd78:	0800de41 	.word	0x0800de41
 800dd7c:	0800de41 	.word	0x0800de41
 800dd80:	0800de41 	.word	0x0800de41
 800dd84:	0800de41 	.word	0x0800de41
 800dd88:	0800de41 	.word	0x0800de41
 800dd8c:	0800de19 	.word	0x0800de19
 800dd90:	0800de41 	.word	0x0800de41
 800dd94:	0800de41 	.word	0x0800de41
 800dd98:	0800de41 	.word	0x0800de41
 800dd9c:	0800de41 	.word	0x0800de41
 800dda0:	0800de41 	.word	0x0800de41
 800dda4:	0800de41 	.word	0x0800de41
 800dda8:	0800de41 	.word	0x0800de41
 800ddac:	0800de21 	.word	0x0800de21
 800ddb0:	0800de41 	.word	0x0800de41
 800ddb4:	0800de41 	.word	0x0800de41
 800ddb8:	0800de41 	.word	0x0800de41
 800ddbc:	0800de41 	.word	0x0800de41
 800ddc0:	0800de41 	.word	0x0800de41
 800ddc4:	0800de41 	.word	0x0800de41
 800ddc8:	0800de41 	.word	0x0800de41
 800ddcc:	0800de29 	.word	0x0800de29
 800ddd0:	0800de41 	.word	0x0800de41
 800ddd4:	0800de41 	.word	0x0800de41
 800ddd8:	0800de41 	.word	0x0800de41
 800dddc:	0800de41 	.word	0x0800de41
 800dde0:	0800de41 	.word	0x0800de41
 800dde4:	0800de41 	.word	0x0800de41
 800dde8:	0800de41 	.word	0x0800de41
 800ddec:	0800de31 	.word	0x0800de31
 800ddf0:	0800de41 	.word	0x0800de41
 800ddf4:	0800de41 	.word	0x0800de41
 800ddf8:	0800de41 	.word	0x0800de41
 800ddfc:	0800de41 	.word	0x0800de41
 800de00:	0800de41 	.word	0x0800de41
 800de04:	0800de41 	.word	0x0800de41
 800de08:	0800de41 	.word	0x0800de41
 800de0c:	0800de39 	.word	0x0800de39
 800de10:	2301      	movs	r3, #1
 800de12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de16:	e0d6      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800de18:	2304      	movs	r3, #4
 800de1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de1e:	e0d2      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800de20:	2308      	movs	r3, #8
 800de22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de26:	e0ce      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800de28:	2310      	movs	r3, #16
 800de2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de2e:	e0ca      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800de30:	2320      	movs	r3, #32
 800de32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de36:	e0c6      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800de38:	2340      	movs	r3, #64	@ 0x40
 800de3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de3e:	e0c2      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800de40:	2380      	movs	r3, #128	@ 0x80
 800de42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de46:	e0be      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800de48:	40011400 	.word	0x40011400
 800de4c:	58024400 	.word	0x58024400
 800de50:	40007800 	.word	0x40007800
 800de54:	40007c00 	.word	0x40007c00
 800de58:	40011800 	.word	0x40011800
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4aad      	ldr	r2, [pc, #692]	@ (800e118 <UART_SetConfig+0x900>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d176      	bne.n	800df54 <UART_SetConfig+0x73c>
 800de66:	4bad      	ldr	r3, [pc, #692]	@ (800e11c <UART_SetConfig+0x904>)
 800de68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800de6e:	2b28      	cmp	r3, #40	@ 0x28
 800de70:	d86c      	bhi.n	800df4c <UART_SetConfig+0x734>
 800de72:	a201      	add	r2, pc, #4	@ (adr r2, 800de78 <UART_SetConfig+0x660>)
 800de74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de78:	0800df1d 	.word	0x0800df1d
 800de7c:	0800df4d 	.word	0x0800df4d
 800de80:	0800df4d 	.word	0x0800df4d
 800de84:	0800df4d 	.word	0x0800df4d
 800de88:	0800df4d 	.word	0x0800df4d
 800de8c:	0800df4d 	.word	0x0800df4d
 800de90:	0800df4d 	.word	0x0800df4d
 800de94:	0800df4d 	.word	0x0800df4d
 800de98:	0800df25 	.word	0x0800df25
 800de9c:	0800df4d 	.word	0x0800df4d
 800dea0:	0800df4d 	.word	0x0800df4d
 800dea4:	0800df4d 	.word	0x0800df4d
 800dea8:	0800df4d 	.word	0x0800df4d
 800deac:	0800df4d 	.word	0x0800df4d
 800deb0:	0800df4d 	.word	0x0800df4d
 800deb4:	0800df4d 	.word	0x0800df4d
 800deb8:	0800df2d 	.word	0x0800df2d
 800debc:	0800df4d 	.word	0x0800df4d
 800dec0:	0800df4d 	.word	0x0800df4d
 800dec4:	0800df4d 	.word	0x0800df4d
 800dec8:	0800df4d 	.word	0x0800df4d
 800decc:	0800df4d 	.word	0x0800df4d
 800ded0:	0800df4d 	.word	0x0800df4d
 800ded4:	0800df4d 	.word	0x0800df4d
 800ded8:	0800df35 	.word	0x0800df35
 800dedc:	0800df4d 	.word	0x0800df4d
 800dee0:	0800df4d 	.word	0x0800df4d
 800dee4:	0800df4d 	.word	0x0800df4d
 800dee8:	0800df4d 	.word	0x0800df4d
 800deec:	0800df4d 	.word	0x0800df4d
 800def0:	0800df4d 	.word	0x0800df4d
 800def4:	0800df4d 	.word	0x0800df4d
 800def8:	0800df3d 	.word	0x0800df3d
 800defc:	0800df4d 	.word	0x0800df4d
 800df00:	0800df4d 	.word	0x0800df4d
 800df04:	0800df4d 	.word	0x0800df4d
 800df08:	0800df4d 	.word	0x0800df4d
 800df0c:	0800df4d 	.word	0x0800df4d
 800df10:	0800df4d 	.word	0x0800df4d
 800df14:	0800df4d 	.word	0x0800df4d
 800df18:	0800df45 	.word	0x0800df45
 800df1c:	2301      	movs	r3, #1
 800df1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df22:	e050      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800df24:	2304      	movs	r3, #4
 800df26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df2a:	e04c      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800df2c:	2308      	movs	r3, #8
 800df2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df32:	e048      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800df34:	2310      	movs	r3, #16
 800df36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df3a:	e044      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800df3c:	2320      	movs	r3, #32
 800df3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df42:	e040      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800df44:	2340      	movs	r3, #64	@ 0x40
 800df46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df4a:	e03c      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800df4c:	2380      	movs	r3, #128	@ 0x80
 800df4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df52:	e038      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4a71      	ldr	r2, [pc, #452]	@ (800e120 <UART_SetConfig+0x908>)
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d130      	bne.n	800dfc0 <UART_SetConfig+0x7a8>
 800df5e:	4b6f      	ldr	r3, [pc, #444]	@ (800e11c <UART_SetConfig+0x904>)
 800df60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df62:	f003 0307 	and.w	r3, r3, #7
 800df66:	2b05      	cmp	r3, #5
 800df68:	d826      	bhi.n	800dfb8 <UART_SetConfig+0x7a0>
 800df6a:	a201      	add	r2, pc, #4	@ (adr r2, 800df70 <UART_SetConfig+0x758>)
 800df6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df70:	0800df89 	.word	0x0800df89
 800df74:	0800df91 	.word	0x0800df91
 800df78:	0800df99 	.word	0x0800df99
 800df7c:	0800dfa1 	.word	0x0800dfa1
 800df80:	0800dfa9 	.word	0x0800dfa9
 800df84:	0800dfb1 	.word	0x0800dfb1
 800df88:	2302      	movs	r3, #2
 800df8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df8e:	e01a      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800df90:	2304      	movs	r3, #4
 800df92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df96:	e016      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800df98:	2308      	movs	r3, #8
 800df9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df9e:	e012      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dfa0:	2310      	movs	r3, #16
 800dfa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfa6:	e00e      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dfa8:	2320      	movs	r3, #32
 800dfaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfae:	e00a      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dfb0:	2340      	movs	r3, #64	@ 0x40
 800dfb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfb6:	e006      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dfb8:	2380      	movs	r3, #128	@ 0x80
 800dfba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfbe:	e002      	b.n	800dfc6 <UART_SetConfig+0x7ae>
 800dfc0:	2380      	movs	r3, #128	@ 0x80
 800dfc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	4a55      	ldr	r2, [pc, #340]	@ (800e120 <UART_SetConfig+0x908>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	f040 80f8 	bne.w	800e1c2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dfd2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dfd6:	2b20      	cmp	r3, #32
 800dfd8:	dc46      	bgt.n	800e068 <UART_SetConfig+0x850>
 800dfda:	2b02      	cmp	r3, #2
 800dfdc:	db75      	blt.n	800e0ca <UART_SetConfig+0x8b2>
 800dfde:	3b02      	subs	r3, #2
 800dfe0:	2b1e      	cmp	r3, #30
 800dfe2:	d872      	bhi.n	800e0ca <UART_SetConfig+0x8b2>
 800dfe4:	a201      	add	r2, pc, #4	@ (adr r2, 800dfec <UART_SetConfig+0x7d4>)
 800dfe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfea:	bf00      	nop
 800dfec:	0800e06f 	.word	0x0800e06f
 800dff0:	0800e0cb 	.word	0x0800e0cb
 800dff4:	0800e077 	.word	0x0800e077
 800dff8:	0800e0cb 	.word	0x0800e0cb
 800dffc:	0800e0cb 	.word	0x0800e0cb
 800e000:	0800e0cb 	.word	0x0800e0cb
 800e004:	0800e087 	.word	0x0800e087
 800e008:	0800e0cb 	.word	0x0800e0cb
 800e00c:	0800e0cb 	.word	0x0800e0cb
 800e010:	0800e0cb 	.word	0x0800e0cb
 800e014:	0800e0cb 	.word	0x0800e0cb
 800e018:	0800e0cb 	.word	0x0800e0cb
 800e01c:	0800e0cb 	.word	0x0800e0cb
 800e020:	0800e0cb 	.word	0x0800e0cb
 800e024:	0800e097 	.word	0x0800e097
 800e028:	0800e0cb 	.word	0x0800e0cb
 800e02c:	0800e0cb 	.word	0x0800e0cb
 800e030:	0800e0cb 	.word	0x0800e0cb
 800e034:	0800e0cb 	.word	0x0800e0cb
 800e038:	0800e0cb 	.word	0x0800e0cb
 800e03c:	0800e0cb 	.word	0x0800e0cb
 800e040:	0800e0cb 	.word	0x0800e0cb
 800e044:	0800e0cb 	.word	0x0800e0cb
 800e048:	0800e0cb 	.word	0x0800e0cb
 800e04c:	0800e0cb 	.word	0x0800e0cb
 800e050:	0800e0cb 	.word	0x0800e0cb
 800e054:	0800e0cb 	.word	0x0800e0cb
 800e058:	0800e0cb 	.word	0x0800e0cb
 800e05c:	0800e0cb 	.word	0x0800e0cb
 800e060:	0800e0cb 	.word	0x0800e0cb
 800e064:	0800e0bd 	.word	0x0800e0bd
 800e068:	2b40      	cmp	r3, #64	@ 0x40
 800e06a:	d02a      	beq.n	800e0c2 <UART_SetConfig+0x8aa>
 800e06c:	e02d      	b.n	800e0ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e06e:	f7fc fc5d 	bl	800a92c <HAL_RCCEx_GetD3PCLK1Freq>
 800e072:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e074:	e02f      	b.n	800e0d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fc fc6c 	bl	800a958 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e084:	e027      	b.n	800e0d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e086:	f107 0318 	add.w	r3, r7, #24
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7fc fdb8 	bl	800ac00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e090:	69fb      	ldr	r3, [r7, #28]
 800e092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e094:	e01f      	b.n	800e0d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e096:	4b21      	ldr	r3, [pc, #132]	@ (800e11c <UART_SetConfig+0x904>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f003 0320 	and.w	r3, r3, #32
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d009      	beq.n	800e0b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e0a2:	4b1e      	ldr	r3, [pc, #120]	@ (800e11c <UART_SetConfig+0x904>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	08db      	lsrs	r3, r3, #3
 800e0a8:	f003 0303 	and.w	r3, r3, #3
 800e0ac:	4a1d      	ldr	r2, [pc, #116]	@ (800e124 <UART_SetConfig+0x90c>)
 800e0ae:	fa22 f303 	lsr.w	r3, r2, r3
 800e0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e0b4:	e00f      	b.n	800e0d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e0b6:	4b1b      	ldr	r3, [pc, #108]	@ (800e124 <UART_SetConfig+0x90c>)
 800e0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0ba:	e00c      	b.n	800e0d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e0bc:	4b1a      	ldr	r3, [pc, #104]	@ (800e128 <UART_SetConfig+0x910>)
 800e0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0c0:	e009      	b.n	800e0d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e0c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e0c8:	e005      	b.n	800e0d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e0d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e0d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	f000 81ee 	beq.w	800e4ba <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0e2:	4a12      	ldr	r2, [pc, #72]	@ (800e12c <UART_SetConfig+0x914>)
 800e0e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0f0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	685a      	ldr	r2, [r3, #4]
 800e0f6:	4613      	mov	r3, r2
 800e0f8:	005b      	lsls	r3, r3, #1
 800e0fa:	4413      	add	r3, r2
 800e0fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d305      	bcc.n	800e10e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e10a:	429a      	cmp	r2, r3
 800e10c:	d910      	bls.n	800e130 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e10e:	2301      	movs	r3, #1
 800e110:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e114:	e1d1      	b.n	800e4ba <UART_SetConfig+0xca2>
 800e116:	bf00      	nop
 800e118:	40011c00 	.word	0x40011c00
 800e11c:	58024400 	.word	0x58024400
 800e120:	58000c00 	.word	0x58000c00
 800e124:	03d09000 	.word	0x03d09000
 800e128:	003d0900 	.word	0x003d0900
 800e12c:	0800fc10 	.word	0x0800fc10
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e132:	2200      	movs	r2, #0
 800e134:	60bb      	str	r3, [r7, #8]
 800e136:	60fa      	str	r2, [r7, #12]
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e13c:	4ac0      	ldr	r2, [pc, #768]	@ (800e440 <UART_SetConfig+0xc28>)
 800e13e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e142:	b29b      	uxth	r3, r3
 800e144:	2200      	movs	r2, #0
 800e146:	603b      	str	r3, [r7, #0]
 800e148:	607a      	str	r2, [r7, #4]
 800e14a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e14e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e152:	f7f2 f8db 	bl	800030c <__aeabi_uldivmod>
 800e156:	4602      	mov	r2, r0
 800e158:	460b      	mov	r3, r1
 800e15a:	4610      	mov	r0, r2
 800e15c:	4619      	mov	r1, r3
 800e15e:	f04f 0200 	mov.w	r2, #0
 800e162:	f04f 0300 	mov.w	r3, #0
 800e166:	020b      	lsls	r3, r1, #8
 800e168:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e16c:	0202      	lsls	r2, r0, #8
 800e16e:	6979      	ldr	r1, [r7, #20]
 800e170:	6849      	ldr	r1, [r1, #4]
 800e172:	0849      	lsrs	r1, r1, #1
 800e174:	2000      	movs	r0, #0
 800e176:	460c      	mov	r4, r1
 800e178:	4605      	mov	r5, r0
 800e17a:	eb12 0804 	adds.w	r8, r2, r4
 800e17e:	eb43 0905 	adc.w	r9, r3, r5
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	685b      	ldr	r3, [r3, #4]
 800e186:	2200      	movs	r2, #0
 800e188:	469a      	mov	sl, r3
 800e18a:	4693      	mov	fp, r2
 800e18c:	4652      	mov	r2, sl
 800e18e:	465b      	mov	r3, fp
 800e190:	4640      	mov	r0, r8
 800e192:	4649      	mov	r1, r9
 800e194:	f7f2 f8ba 	bl	800030c <__aeabi_uldivmod>
 800e198:	4602      	mov	r2, r0
 800e19a:	460b      	mov	r3, r1
 800e19c:	4613      	mov	r3, r2
 800e19e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e1a6:	d308      	bcc.n	800e1ba <UART_SetConfig+0x9a2>
 800e1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e1ae:	d204      	bcs.n	800e1ba <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e1b6:	60da      	str	r2, [r3, #12]
 800e1b8:	e17f      	b.n	800e4ba <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e1c0:	e17b      	b.n	800e4ba <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	69db      	ldr	r3, [r3, #28]
 800e1c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e1ca:	f040 80bd 	bne.w	800e348 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e1ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e1d2:	2b20      	cmp	r3, #32
 800e1d4:	dc48      	bgt.n	800e268 <UART_SetConfig+0xa50>
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	db7b      	blt.n	800e2d2 <UART_SetConfig+0xaba>
 800e1da:	2b20      	cmp	r3, #32
 800e1dc:	d879      	bhi.n	800e2d2 <UART_SetConfig+0xaba>
 800e1de:	a201      	add	r2, pc, #4	@ (adr r2, 800e1e4 <UART_SetConfig+0x9cc>)
 800e1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1e4:	0800e26f 	.word	0x0800e26f
 800e1e8:	0800e277 	.word	0x0800e277
 800e1ec:	0800e2d3 	.word	0x0800e2d3
 800e1f0:	0800e2d3 	.word	0x0800e2d3
 800e1f4:	0800e27f 	.word	0x0800e27f
 800e1f8:	0800e2d3 	.word	0x0800e2d3
 800e1fc:	0800e2d3 	.word	0x0800e2d3
 800e200:	0800e2d3 	.word	0x0800e2d3
 800e204:	0800e28f 	.word	0x0800e28f
 800e208:	0800e2d3 	.word	0x0800e2d3
 800e20c:	0800e2d3 	.word	0x0800e2d3
 800e210:	0800e2d3 	.word	0x0800e2d3
 800e214:	0800e2d3 	.word	0x0800e2d3
 800e218:	0800e2d3 	.word	0x0800e2d3
 800e21c:	0800e2d3 	.word	0x0800e2d3
 800e220:	0800e2d3 	.word	0x0800e2d3
 800e224:	0800e29f 	.word	0x0800e29f
 800e228:	0800e2d3 	.word	0x0800e2d3
 800e22c:	0800e2d3 	.word	0x0800e2d3
 800e230:	0800e2d3 	.word	0x0800e2d3
 800e234:	0800e2d3 	.word	0x0800e2d3
 800e238:	0800e2d3 	.word	0x0800e2d3
 800e23c:	0800e2d3 	.word	0x0800e2d3
 800e240:	0800e2d3 	.word	0x0800e2d3
 800e244:	0800e2d3 	.word	0x0800e2d3
 800e248:	0800e2d3 	.word	0x0800e2d3
 800e24c:	0800e2d3 	.word	0x0800e2d3
 800e250:	0800e2d3 	.word	0x0800e2d3
 800e254:	0800e2d3 	.word	0x0800e2d3
 800e258:	0800e2d3 	.word	0x0800e2d3
 800e25c:	0800e2d3 	.word	0x0800e2d3
 800e260:	0800e2d3 	.word	0x0800e2d3
 800e264:	0800e2c5 	.word	0x0800e2c5
 800e268:	2b40      	cmp	r3, #64	@ 0x40
 800e26a:	d02e      	beq.n	800e2ca <UART_SetConfig+0xab2>
 800e26c:	e031      	b.n	800e2d2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e26e:	f7fa fcbf 	bl	8008bf0 <HAL_RCC_GetPCLK1Freq>
 800e272:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e274:	e033      	b.n	800e2de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e276:	f7fa fcd1 	bl	8008c1c <HAL_RCC_GetPCLK2Freq>
 800e27a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e27c:	e02f      	b.n	800e2de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e27e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e282:	4618      	mov	r0, r3
 800e284:	f7fc fb68 	bl	800a958 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e28a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e28c:	e027      	b.n	800e2de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e28e:	f107 0318 	add.w	r3, r7, #24
 800e292:	4618      	mov	r0, r3
 800e294:	f7fc fcb4 	bl	800ac00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e298:	69fb      	ldr	r3, [r7, #28]
 800e29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e29c:	e01f      	b.n	800e2de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e29e:	4b69      	ldr	r3, [pc, #420]	@ (800e444 <UART_SetConfig+0xc2c>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f003 0320 	and.w	r3, r3, #32
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d009      	beq.n	800e2be <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e2aa:	4b66      	ldr	r3, [pc, #408]	@ (800e444 <UART_SetConfig+0xc2c>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	08db      	lsrs	r3, r3, #3
 800e2b0:	f003 0303 	and.w	r3, r3, #3
 800e2b4:	4a64      	ldr	r2, [pc, #400]	@ (800e448 <UART_SetConfig+0xc30>)
 800e2b6:	fa22 f303 	lsr.w	r3, r2, r3
 800e2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e2bc:	e00f      	b.n	800e2de <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e2be:	4b62      	ldr	r3, [pc, #392]	@ (800e448 <UART_SetConfig+0xc30>)
 800e2c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2c2:	e00c      	b.n	800e2de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e2c4:	4b61      	ldr	r3, [pc, #388]	@ (800e44c <UART_SetConfig+0xc34>)
 800e2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2c8:	e009      	b.n	800e2de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e2ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2d0:	e005      	b.n	800e2de <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e2dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e2de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f000 80ea 	beq.w	800e4ba <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2ea:	4a55      	ldr	r2, [pc, #340]	@ (800e440 <UART_SetConfig+0xc28>)
 800e2ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2f0:	461a      	mov	r2, r3
 800e2f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2f8:	005a      	lsls	r2, r3, #1
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	085b      	lsrs	r3, r3, #1
 800e300:	441a      	add	r2, r3
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	685b      	ldr	r3, [r3, #4]
 800e306:	fbb2 f3f3 	udiv	r3, r2, r3
 800e30a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e30e:	2b0f      	cmp	r3, #15
 800e310:	d916      	bls.n	800e340 <UART_SetConfig+0xb28>
 800e312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e318:	d212      	bcs.n	800e340 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	f023 030f 	bic.w	r3, r3, #15
 800e322:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e326:	085b      	lsrs	r3, r3, #1
 800e328:	b29b      	uxth	r3, r3
 800e32a:	f003 0307 	and.w	r3, r3, #7
 800e32e:	b29a      	uxth	r2, r3
 800e330:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e332:	4313      	orrs	r3, r2
 800e334:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e33c:	60da      	str	r2, [r3, #12]
 800e33e:	e0bc      	b.n	800e4ba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e340:	2301      	movs	r3, #1
 800e342:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e346:	e0b8      	b.n	800e4ba <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e348:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e34c:	2b20      	cmp	r3, #32
 800e34e:	dc4b      	bgt.n	800e3e8 <UART_SetConfig+0xbd0>
 800e350:	2b00      	cmp	r3, #0
 800e352:	f2c0 8087 	blt.w	800e464 <UART_SetConfig+0xc4c>
 800e356:	2b20      	cmp	r3, #32
 800e358:	f200 8084 	bhi.w	800e464 <UART_SetConfig+0xc4c>
 800e35c:	a201      	add	r2, pc, #4	@ (adr r2, 800e364 <UART_SetConfig+0xb4c>)
 800e35e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e362:	bf00      	nop
 800e364:	0800e3ef 	.word	0x0800e3ef
 800e368:	0800e3f7 	.word	0x0800e3f7
 800e36c:	0800e465 	.word	0x0800e465
 800e370:	0800e465 	.word	0x0800e465
 800e374:	0800e3ff 	.word	0x0800e3ff
 800e378:	0800e465 	.word	0x0800e465
 800e37c:	0800e465 	.word	0x0800e465
 800e380:	0800e465 	.word	0x0800e465
 800e384:	0800e40f 	.word	0x0800e40f
 800e388:	0800e465 	.word	0x0800e465
 800e38c:	0800e465 	.word	0x0800e465
 800e390:	0800e465 	.word	0x0800e465
 800e394:	0800e465 	.word	0x0800e465
 800e398:	0800e465 	.word	0x0800e465
 800e39c:	0800e465 	.word	0x0800e465
 800e3a0:	0800e465 	.word	0x0800e465
 800e3a4:	0800e41f 	.word	0x0800e41f
 800e3a8:	0800e465 	.word	0x0800e465
 800e3ac:	0800e465 	.word	0x0800e465
 800e3b0:	0800e465 	.word	0x0800e465
 800e3b4:	0800e465 	.word	0x0800e465
 800e3b8:	0800e465 	.word	0x0800e465
 800e3bc:	0800e465 	.word	0x0800e465
 800e3c0:	0800e465 	.word	0x0800e465
 800e3c4:	0800e465 	.word	0x0800e465
 800e3c8:	0800e465 	.word	0x0800e465
 800e3cc:	0800e465 	.word	0x0800e465
 800e3d0:	0800e465 	.word	0x0800e465
 800e3d4:	0800e465 	.word	0x0800e465
 800e3d8:	0800e465 	.word	0x0800e465
 800e3dc:	0800e465 	.word	0x0800e465
 800e3e0:	0800e465 	.word	0x0800e465
 800e3e4:	0800e457 	.word	0x0800e457
 800e3e8:	2b40      	cmp	r3, #64	@ 0x40
 800e3ea:	d037      	beq.n	800e45c <UART_SetConfig+0xc44>
 800e3ec:	e03a      	b.n	800e464 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e3ee:	f7fa fbff 	bl	8008bf0 <HAL_RCC_GetPCLK1Freq>
 800e3f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e3f4:	e03c      	b.n	800e470 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e3f6:	f7fa fc11 	bl	8008c1c <HAL_RCC_GetPCLK2Freq>
 800e3fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e3fc:	e038      	b.n	800e470 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e402:	4618      	mov	r0, r3
 800e404:	f7fc faa8 	bl	800a958 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e40c:	e030      	b.n	800e470 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e40e:	f107 0318 	add.w	r3, r7, #24
 800e412:	4618      	mov	r0, r3
 800e414:	f7fc fbf4 	bl	800ac00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e418:	69fb      	ldr	r3, [r7, #28]
 800e41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e41c:	e028      	b.n	800e470 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e41e:	4b09      	ldr	r3, [pc, #36]	@ (800e444 <UART_SetConfig+0xc2c>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f003 0320 	and.w	r3, r3, #32
 800e426:	2b00      	cmp	r3, #0
 800e428:	d012      	beq.n	800e450 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e42a:	4b06      	ldr	r3, [pc, #24]	@ (800e444 <UART_SetConfig+0xc2c>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	08db      	lsrs	r3, r3, #3
 800e430:	f003 0303 	and.w	r3, r3, #3
 800e434:	4a04      	ldr	r2, [pc, #16]	@ (800e448 <UART_SetConfig+0xc30>)
 800e436:	fa22 f303 	lsr.w	r3, r2, r3
 800e43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e43c:	e018      	b.n	800e470 <UART_SetConfig+0xc58>
 800e43e:	bf00      	nop
 800e440:	0800fc10 	.word	0x0800fc10
 800e444:	58024400 	.word	0x58024400
 800e448:	03d09000 	.word	0x03d09000
 800e44c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e450:	4b24      	ldr	r3, [pc, #144]	@ (800e4e4 <UART_SetConfig+0xccc>)
 800e452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e454:	e00c      	b.n	800e470 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e456:	4b24      	ldr	r3, [pc, #144]	@ (800e4e8 <UART_SetConfig+0xcd0>)
 800e458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e45a:	e009      	b.n	800e470 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e45c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e462:	e005      	b.n	800e470 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e464:	2300      	movs	r3, #0
 800e466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e468:	2301      	movs	r3, #1
 800e46a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e46e:	bf00      	nop
    }

    if (pclk != 0U)
 800e470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e472:	2b00      	cmp	r3, #0
 800e474:	d021      	beq.n	800e4ba <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e47a:	4a1c      	ldr	r2, [pc, #112]	@ (800e4ec <UART_SetConfig+0xcd4>)
 800e47c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e480:	461a      	mov	r2, r3
 800e482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e484:	fbb3 f2f2 	udiv	r2, r3, r2
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	685b      	ldr	r3, [r3, #4]
 800e48c:	085b      	lsrs	r3, r3, #1
 800e48e:	441a      	add	r2, r3
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	685b      	ldr	r3, [r3, #4]
 800e494:	fbb2 f3f3 	udiv	r3, r2, r3
 800e498:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e49a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e49c:	2b0f      	cmp	r3, #15
 800e49e:	d909      	bls.n	800e4b4 <UART_SetConfig+0xc9c>
 800e4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e4a6:	d205      	bcs.n	800e4b4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4aa:	b29a      	uxth	r2, r3
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	60da      	str	r2, [r3, #12]
 800e4b2:	e002      	b.n	800e4ba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	2201      	movs	r2, #1
 800e4be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	2201      	movs	r2, #1
 800e4c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e4d6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e4da:	4618      	mov	r0, r3
 800e4dc:	3748      	adds	r7, #72	@ 0x48
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e4e4:	03d09000 	.word	0x03d09000
 800e4e8:	003d0900 	.word	0x003d0900
 800e4ec:	0800fc10 	.word	0x0800fc10

0800e4f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b083      	sub	sp, #12
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4fc:	f003 0308 	and.w	r3, r3, #8
 800e500:	2b00      	cmp	r3, #0
 800e502:	d00a      	beq.n	800e51a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	430a      	orrs	r2, r1
 800e518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e51e:	f003 0301 	and.w	r3, r3, #1
 800e522:	2b00      	cmp	r3, #0
 800e524:	d00a      	beq.n	800e53c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	685b      	ldr	r3, [r3, #4]
 800e52c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	430a      	orrs	r2, r1
 800e53a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e540:	f003 0302 	and.w	r3, r3, #2
 800e544:	2b00      	cmp	r3, #0
 800e546:	d00a      	beq.n	800e55e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	685b      	ldr	r3, [r3, #4]
 800e54e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	430a      	orrs	r2, r1
 800e55c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e562:	f003 0304 	and.w	r3, r3, #4
 800e566:	2b00      	cmp	r3, #0
 800e568:	d00a      	beq.n	800e580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	685b      	ldr	r3, [r3, #4]
 800e570:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	430a      	orrs	r2, r1
 800e57e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e584:	f003 0310 	and.w	r3, r3, #16
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d00a      	beq.n	800e5a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	689b      	ldr	r3, [r3, #8]
 800e592:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	430a      	orrs	r2, r1
 800e5a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5a6:	f003 0320 	and.w	r3, r3, #32
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d00a      	beq.n	800e5c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	689b      	ldr	r3, [r3, #8]
 800e5b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	430a      	orrs	r2, r1
 800e5c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d01a      	beq.n	800e606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	685b      	ldr	r3, [r3, #4]
 800e5d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	430a      	orrs	r2, r1
 800e5e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e5ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e5ee:	d10a      	bne.n	800e606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	685b      	ldr	r3, [r3, #4]
 800e5f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	430a      	orrs	r2, r1
 800e604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e60a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d00a      	beq.n	800e628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	685b      	ldr	r3, [r3, #4]
 800e618:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	430a      	orrs	r2, r1
 800e626:	605a      	str	r2, [r3, #4]
  }
}
 800e628:	bf00      	nop
 800e62a:	370c      	adds	r7, #12
 800e62c:	46bd      	mov	sp, r7
 800e62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e632:	4770      	bx	lr

0800e634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b098      	sub	sp, #96	@ 0x60
 800e638:	af02      	add	r7, sp, #8
 800e63a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2200      	movs	r2, #0
 800e640:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e644:	f7f4 f934 	bl	80028b0 <HAL_GetTick>
 800e648:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	f003 0308 	and.w	r3, r3, #8
 800e654:	2b08      	cmp	r3, #8
 800e656:	d12f      	bne.n	800e6b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e658:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e65c:	9300      	str	r3, [sp, #0]
 800e65e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e660:	2200      	movs	r2, #0
 800e662:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f000 f88e 	bl	800e788 <UART_WaitOnFlagUntilTimeout>
 800e66c:	4603      	mov	r3, r0
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d022      	beq.n	800e6b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e67a:	e853 3f00 	ldrex	r3, [r3]
 800e67e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e682:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e686:	653b      	str	r3, [r7, #80]	@ 0x50
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	461a      	mov	r2, r3
 800e68e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e690:	647b      	str	r3, [r7, #68]	@ 0x44
 800e692:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e694:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e696:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e698:	e841 2300 	strex	r3, r2, [r1]
 800e69c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e69e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d1e6      	bne.n	800e672 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2220      	movs	r2, #32
 800e6a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e6b4:	2303      	movs	r3, #3
 800e6b6:	e063      	b.n	800e780 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f003 0304 	and.w	r3, r3, #4
 800e6c2:	2b04      	cmp	r3, #4
 800e6c4:	d149      	bne.n	800e75a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e6c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e6ca:	9300      	str	r3, [sp, #0]
 800e6cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f000 f857 	bl	800e788 <UART_WaitOnFlagUntilTimeout>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d03c      	beq.n	800e75a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6e8:	e853 3f00 	ldrex	r3, [r3]
 800e6ec:	623b      	str	r3, [r7, #32]
   return(result);
 800e6ee:	6a3b      	ldr	r3, [r7, #32]
 800e6f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e6f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6fe:	633b      	str	r3, [r7, #48]	@ 0x30
 800e700:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e702:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e706:	e841 2300 	strex	r3, r2, [r1]
 800e70a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e70c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d1e6      	bne.n	800e6e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	3308      	adds	r3, #8
 800e718:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	e853 3f00 	ldrex	r3, [r3]
 800e720:	60fb      	str	r3, [r7, #12]
   return(result);
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	f023 0301 	bic.w	r3, r3, #1
 800e728:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	3308      	adds	r3, #8
 800e730:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e732:	61fa      	str	r2, [r7, #28]
 800e734:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e736:	69b9      	ldr	r1, [r7, #24]
 800e738:	69fa      	ldr	r2, [r7, #28]
 800e73a:	e841 2300 	strex	r3, r2, [r1]
 800e73e:	617b      	str	r3, [r7, #20]
   return(result);
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d1e5      	bne.n	800e712 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2220      	movs	r2, #32
 800e74a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2200      	movs	r2, #0
 800e752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e756:	2303      	movs	r3, #3
 800e758:	e012      	b.n	800e780 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2220      	movs	r2, #32
 800e75e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2220      	movs	r2, #32
 800e766:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2200      	movs	r2, #0
 800e76e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2200      	movs	r2, #0
 800e774:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2200      	movs	r2, #0
 800e77a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e77e:	2300      	movs	r3, #0
}
 800e780:	4618      	mov	r0, r3
 800e782:	3758      	adds	r7, #88	@ 0x58
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b084      	sub	sp, #16
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	60f8      	str	r0, [r7, #12]
 800e790:	60b9      	str	r1, [r7, #8]
 800e792:	603b      	str	r3, [r7, #0]
 800e794:	4613      	mov	r3, r2
 800e796:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e798:	e04f      	b.n	800e83a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e79a:	69bb      	ldr	r3, [r7, #24]
 800e79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7a0:	d04b      	beq.n	800e83a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7a2:	f7f4 f885 	bl	80028b0 <HAL_GetTick>
 800e7a6:	4602      	mov	r2, r0
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	1ad3      	subs	r3, r2, r3
 800e7ac:	69ba      	ldr	r2, [r7, #24]
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d302      	bcc.n	800e7b8 <UART_WaitOnFlagUntilTimeout+0x30>
 800e7b2:	69bb      	ldr	r3, [r7, #24]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d101      	bne.n	800e7bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e7b8:	2303      	movs	r3, #3
 800e7ba:	e04e      	b.n	800e85a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f003 0304 	and.w	r3, r3, #4
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d037      	beq.n	800e83a <UART_WaitOnFlagUntilTimeout+0xb2>
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	2b80      	cmp	r3, #128	@ 0x80
 800e7ce:	d034      	beq.n	800e83a <UART_WaitOnFlagUntilTimeout+0xb2>
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	2b40      	cmp	r3, #64	@ 0x40
 800e7d4:	d031      	beq.n	800e83a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	69db      	ldr	r3, [r3, #28]
 800e7dc:	f003 0308 	and.w	r3, r3, #8
 800e7e0:	2b08      	cmp	r3, #8
 800e7e2:	d110      	bne.n	800e806 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	2208      	movs	r2, #8
 800e7ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e7ec:	68f8      	ldr	r0, [r7, #12]
 800e7ee:	f000 f95b 	bl	800eaa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	2208      	movs	r2, #8
 800e7f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e802:	2301      	movs	r3, #1
 800e804:	e029      	b.n	800e85a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	69db      	ldr	r3, [r3, #28]
 800e80c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e810:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e814:	d111      	bne.n	800e83a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e81e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e820:	68f8      	ldr	r0, [r7, #12]
 800e822:	f000 f941 	bl	800eaa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	2220      	movs	r2, #32
 800e82a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	2200      	movs	r2, #0
 800e832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e836:	2303      	movs	r3, #3
 800e838:	e00f      	b.n	800e85a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	69da      	ldr	r2, [r3, #28]
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	4013      	ands	r3, r2
 800e844:	68ba      	ldr	r2, [r7, #8]
 800e846:	429a      	cmp	r2, r3
 800e848:	bf0c      	ite	eq
 800e84a:	2301      	moveq	r3, #1
 800e84c:	2300      	movne	r3, #0
 800e84e:	b2db      	uxtb	r3, r3
 800e850:	461a      	mov	r2, r3
 800e852:	79fb      	ldrb	r3, [r7, #7]
 800e854:	429a      	cmp	r2, r3
 800e856:	d0a0      	beq.n	800e79a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e858:	2300      	movs	r3, #0
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3710      	adds	r7, #16
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
	...

0800e864 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e864:	b480      	push	{r7}
 800e866:	b0a3      	sub	sp, #140	@ 0x8c
 800e868:	af00      	add	r7, sp, #0
 800e86a:	60f8      	str	r0, [r7, #12]
 800e86c:	60b9      	str	r1, [r7, #8]
 800e86e:	4613      	mov	r3, r2
 800e870:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	68ba      	ldr	r2, [r7, #8]
 800e876:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	88fa      	ldrh	r2, [r7, #6]
 800e87c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	88fa      	ldrh	r2, [r7, #6]
 800e884:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2200      	movs	r2, #0
 800e88c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	689b      	ldr	r3, [r3, #8]
 800e892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e896:	d10e      	bne.n	800e8b6 <UART_Start_Receive_IT+0x52>
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	691b      	ldr	r3, [r3, #16]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d105      	bne.n	800e8ac <UART_Start_Receive_IT+0x48>
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e8a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e8aa:	e02d      	b.n	800e908 <UART_Start_Receive_IT+0xa4>
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	22ff      	movs	r2, #255	@ 0xff
 800e8b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e8b4:	e028      	b.n	800e908 <UART_Start_Receive_IT+0xa4>
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	689b      	ldr	r3, [r3, #8]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d10d      	bne.n	800e8da <UART_Start_Receive_IT+0x76>
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	691b      	ldr	r3, [r3, #16]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d104      	bne.n	800e8d0 <UART_Start_Receive_IT+0x6c>
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	22ff      	movs	r2, #255	@ 0xff
 800e8ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e8ce:	e01b      	b.n	800e908 <UART_Start_Receive_IT+0xa4>
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	227f      	movs	r2, #127	@ 0x7f
 800e8d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e8d8:	e016      	b.n	800e908 <UART_Start_Receive_IT+0xa4>
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	689b      	ldr	r3, [r3, #8]
 800e8de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e8e2:	d10d      	bne.n	800e900 <UART_Start_Receive_IT+0x9c>
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	691b      	ldr	r3, [r3, #16]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d104      	bne.n	800e8f6 <UART_Start_Receive_IT+0x92>
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	227f      	movs	r2, #127	@ 0x7f
 800e8f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e8f4:	e008      	b.n	800e908 <UART_Start_Receive_IT+0xa4>
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	223f      	movs	r2, #63	@ 0x3f
 800e8fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e8fe:	e003      	b.n	800e908 <UART_Start_Receive_IT+0xa4>
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	2200      	movs	r2, #0
 800e904:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	2200      	movs	r2, #0
 800e90c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	2222      	movs	r2, #34	@ 0x22
 800e914:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	3308      	adds	r3, #8
 800e91e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e920:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e922:	e853 3f00 	ldrex	r3, [r3]
 800e926:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e928:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e92a:	f043 0301 	orr.w	r3, r3, #1
 800e92e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	3308      	adds	r3, #8
 800e938:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e93c:	673a      	str	r2, [r7, #112]	@ 0x70
 800e93e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e940:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e942:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e944:	e841 2300 	strex	r3, r2, [r1]
 800e948:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800e94a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d1e3      	bne.n	800e918 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e954:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e958:	d14f      	bne.n	800e9fa <UART_Start_Receive_IT+0x196>
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e960:	88fa      	ldrh	r2, [r7, #6]
 800e962:	429a      	cmp	r2, r3
 800e964:	d349      	bcc.n	800e9fa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	689b      	ldr	r3, [r3, #8]
 800e96a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e96e:	d107      	bne.n	800e980 <UART_Start_Receive_IT+0x11c>
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	691b      	ldr	r3, [r3, #16]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d103      	bne.n	800e980 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	4a47      	ldr	r2, [pc, #284]	@ (800ea98 <UART_Start_Receive_IT+0x234>)
 800e97c:	675a      	str	r2, [r3, #116]	@ 0x74
 800e97e:	e002      	b.n	800e986 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	4a46      	ldr	r2, [pc, #280]	@ (800ea9c <UART_Start_Receive_IT+0x238>)
 800e984:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	691b      	ldr	r3, [r3, #16]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d01a      	beq.n	800e9c4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e994:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e996:	e853 3f00 	ldrex	r3, [r3]
 800e99a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e99c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e99e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e9a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e9b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e9b2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9b4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e9b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e9b8:	e841 2300 	strex	r3, r2, [r1]
 800e9bc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800e9be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d1e4      	bne.n	800e98e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	3308      	adds	r3, #8
 800e9ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9ce:	e853 3f00 	ldrex	r3, [r3]
 800e9d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e9d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e9da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	3308      	adds	r3, #8
 800e9e2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e9e4:	64ba      	str	r2, [r7, #72]	@ 0x48
 800e9e6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9e8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e9ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e9ec:	e841 2300 	strex	r3, r2, [r1]
 800e9f0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e9f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d1e5      	bne.n	800e9c4 <UART_Start_Receive_IT+0x160>
 800e9f8:	e046      	b.n	800ea88 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	689b      	ldr	r3, [r3, #8]
 800e9fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea02:	d107      	bne.n	800ea14 <UART_Start_Receive_IT+0x1b0>
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	691b      	ldr	r3, [r3, #16]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d103      	bne.n	800ea14 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	4a24      	ldr	r2, [pc, #144]	@ (800eaa0 <UART_Start_Receive_IT+0x23c>)
 800ea10:	675a      	str	r2, [r3, #116]	@ 0x74
 800ea12:	e002      	b.n	800ea1a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	4a23      	ldr	r2, [pc, #140]	@ (800eaa4 <UART_Start_Receive_IT+0x240>)
 800ea18:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	691b      	ldr	r3, [r3, #16]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d019      	beq.n	800ea56 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea2a:	e853 3f00 	ldrex	r3, [r3]
 800ea2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ea30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea32:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ea36:	677b      	str	r3, [r7, #116]	@ 0x74
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	461a      	mov	r2, r3
 800ea3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ea40:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea42:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ea46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ea48:	e841 2300 	strex	r3, r2, [r1]
 800ea4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ea4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d1e6      	bne.n	800ea22 <UART_Start_Receive_IT+0x1be>
 800ea54:	e018      	b.n	800ea88 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	e853 3f00 	ldrex	r3, [r3]
 800ea62:	613b      	str	r3, [r7, #16]
   return(result);
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	f043 0320 	orr.w	r3, r3, #32
 800ea6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	461a      	mov	r2, r3
 800ea72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ea74:	623b      	str	r3, [r7, #32]
 800ea76:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea78:	69f9      	ldr	r1, [r7, #28]
 800ea7a:	6a3a      	ldr	r2, [r7, #32]
 800ea7c:	e841 2300 	strex	r3, r2, [r1]
 800ea80:	61bb      	str	r3, [r7, #24]
   return(result);
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d1e6      	bne.n	800ea56 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ea88:	2300      	movs	r3, #0
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	378c      	adds	r7, #140	@ 0x8c
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea94:	4770      	bx	lr
 800ea96:	bf00      	nop
 800ea98:	0800f2c9 	.word	0x0800f2c9
 800ea9c:	0800ef69 	.word	0x0800ef69
 800eaa0:	0800edb1 	.word	0x0800edb1
 800eaa4:	0800ebf9 	.word	0x0800ebf9

0800eaa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b095      	sub	sp, #84	@ 0x54
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eab8:	e853 3f00 	ldrex	r3, [r3]
 800eabc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800eabe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eac0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	461a      	mov	r2, r3
 800eacc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eace:	643b      	str	r3, [r7, #64]	@ 0x40
 800ead0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ead2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ead4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ead6:	e841 2300 	strex	r3, r2, [r1]
 800eada:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d1e6      	bne.n	800eab0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	3308      	adds	r3, #8
 800eae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaea:	6a3b      	ldr	r3, [r7, #32]
 800eaec:	e853 3f00 	ldrex	r3, [r3]
 800eaf0:	61fb      	str	r3, [r7, #28]
   return(result);
 800eaf2:	69fa      	ldr	r2, [r7, #28]
 800eaf4:	4b1e      	ldr	r3, [pc, #120]	@ (800eb70 <UART_EndRxTransfer+0xc8>)
 800eaf6:	4013      	ands	r3, r2
 800eaf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	3308      	adds	r3, #8
 800eb00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eb02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800eb04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb0a:	e841 2300 	strex	r3, r2, [r1]
 800eb0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eb10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d1e5      	bne.n	800eae2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb1a:	2b01      	cmp	r3, #1
 800eb1c:	d118      	bne.n	800eb50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	e853 3f00 	ldrex	r3, [r3]
 800eb2a:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	f023 0310 	bic.w	r3, r3, #16
 800eb32:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	461a      	mov	r2, r3
 800eb3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb3c:	61bb      	str	r3, [r7, #24]
 800eb3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb40:	6979      	ldr	r1, [r7, #20]
 800eb42:	69ba      	ldr	r2, [r7, #24]
 800eb44:	e841 2300 	strex	r3, r2, [r1]
 800eb48:	613b      	str	r3, [r7, #16]
   return(result);
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d1e6      	bne.n	800eb1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2220      	movs	r2, #32
 800eb54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2200      	movs	r2, #0
 800eb62:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800eb64:	bf00      	nop
 800eb66:	3754      	adds	r7, #84	@ 0x54
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr
 800eb70:	effffffe 	.word	0xeffffffe

0800eb74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	2200      	movs	r2, #0
 800eb86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb92:	68f8      	ldr	r0, [r7, #12]
 800eb94:	f7fe fe36 	bl	800d804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb98:	bf00      	nop
 800eb9a:	3710      	adds	r7, #16
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b088      	sub	sp, #32
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	e853 3f00 	ldrex	r3, [r3]
 800ebb4:	60bb      	str	r3, [r7, #8]
   return(result);
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ebbc:	61fb      	str	r3, [r7, #28]
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	461a      	mov	r2, r3
 800ebc4:	69fb      	ldr	r3, [r7, #28]
 800ebc6:	61bb      	str	r3, [r7, #24]
 800ebc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebca:	6979      	ldr	r1, [r7, #20]
 800ebcc:	69ba      	ldr	r2, [r7, #24]
 800ebce:	e841 2300 	strex	r3, r2, [r1]
 800ebd2:	613b      	str	r3, [r7, #16]
   return(result);
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d1e6      	bne.n	800eba8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2220      	movs	r2, #32
 800ebde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f7fe fdf7 	bl	800d7dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebee:	bf00      	nop
 800ebf0:	3720      	adds	r7, #32
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
	...

0800ebf8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b09c      	sub	sp, #112	@ 0x70
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ec06:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec10:	2b22      	cmp	r3, #34	@ 0x22
 800ec12:	f040 80be 	bne.w	800ed92 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec1c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ec20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ec24:	b2d9      	uxtb	r1, r3
 800ec26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ec2a:	b2da      	uxtb	r2, r3
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec30:	400a      	ands	r2, r1
 800ec32:	b2d2      	uxtb	r2, r2
 800ec34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec3a:	1c5a      	adds	r2, r3, #1
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ec46:	b29b      	uxth	r3, r3
 800ec48:	3b01      	subs	r3, #1
 800ec4a:	b29a      	uxth	r2, r3
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ec58:	b29b      	uxth	r3, r3
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	f040 80a1 	bne.w	800eda2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec68:	e853 3f00 	ldrex	r3, [r3]
 800ec6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ec6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ec74:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ec7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ec80:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ec84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ec86:	e841 2300 	strex	r3, r2, [r1]
 800ec8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ec8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d1e6      	bne.n	800ec60 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	3308      	adds	r3, #8
 800ec98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec9c:	e853 3f00 	ldrex	r3, [r3]
 800eca0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800eca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eca4:	f023 0301 	bic.w	r3, r3, #1
 800eca8:	667b      	str	r3, [r7, #100]	@ 0x64
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	3308      	adds	r3, #8
 800ecb0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ecb2:	647a      	str	r2, [r7, #68]	@ 0x44
 800ecb4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ecb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ecba:	e841 2300 	strex	r3, r2, [r1]
 800ecbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ecc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d1e5      	bne.n	800ec92 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2220      	movs	r2, #32
 800ecca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	4a33      	ldr	r2, [pc, #204]	@ (800edac <UART_RxISR_8BIT+0x1b4>)
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d01f      	beq.n	800ed24 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d018      	beq.n	800ed24 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecfa:	e853 3f00 	ldrex	r3, [r3]
 800ecfe:	623b      	str	r3, [r7, #32]
   return(result);
 800ed00:	6a3b      	ldr	r3, [r7, #32]
 800ed02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ed06:	663b      	str	r3, [r7, #96]	@ 0x60
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	461a      	mov	r2, r3
 800ed0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ed10:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed12:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ed16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed18:	e841 2300 	strex	r3, r2, [r1]
 800ed1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ed1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d1e6      	bne.n	800ecf2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed28:	2b01      	cmp	r3, #1
 800ed2a:	d12e      	bne.n	800ed8a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	e853 3f00 	ldrex	r3, [r3]
 800ed3e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f023 0310 	bic.w	r3, r3, #16
 800ed46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ed50:	61fb      	str	r3, [r7, #28]
 800ed52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed54:	69b9      	ldr	r1, [r7, #24]
 800ed56:	69fa      	ldr	r2, [r7, #28]
 800ed58:	e841 2300 	strex	r3, r2, [r1]
 800ed5c:	617b      	str	r3, [r7, #20]
   return(result);
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d1e6      	bne.n	800ed32 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	69db      	ldr	r3, [r3, #28]
 800ed6a:	f003 0310 	and.w	r3, r3, #16
 800ed6e:	2b10      	cmp	r3, #16
 800ed70:	d103      	bne.n	800ed7a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	2210      	movs	r2, #16
 800ed78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ed80:	4619      	mov	r1, r3
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f7f2 f86a 	bl	8000e5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ed88:	e00b      	b.n	800eda2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f7fe fd30 	bl	800d7f0 <HAL_UART_RxCpltCallback>
}
 800ed90:	e007      	b.n	800eda2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	699a      	ldr	r2, [r3, #24]
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	f042 0208 	orr.w	r2, r2, #8
 800eda0:	619a      	str	r2, [r3, #24]
}
 800eda2:	bf00      	nop
 800eda4:	3770      	adds	r7, #112	@ 0x70
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}
 800edaa:	bf00      	nop
 800edac:	58000c00 	.word	0x58000c00

0800edb0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b09c      	sub	sp, #112	@ 0x70
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800edbe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800edc8:	2b22      	cmp	r3, #34	@ 0x22
 800edca:	f040 80be 	bne.w	800ef4a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edd4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eddc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800edde:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800ede2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ede6:	4013      	ands	r3, r2
 800ede8:	b29a      	uxth	r2, r3
 800edea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800edec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800edf2:	1c9a      	adds	r2, r3, #2
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800edfe:	b29b      	uxth	r3, r3
 800ee00:	3b01      	subs	r3, #1
 800ee02:	b29a      	uxth	r2, r3
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ee10:	b29b      	uxth	r3, r3
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	f040 80a1 	bne.w	800ef5a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee20:	e853 3f00 	ldrex	r3, [r3]
 800ee24:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ee26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ee2c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	461a      	mov	r2, r3
 800ee34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ee36:	657b      	str	r3, [r7, #84]	@ 0x54
 800ee38:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee3a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ee3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ee3e:	e841 2300 	strex	r3, r2, [r1]
 800ee42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ee44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d1e6      	bne.n	800ee18 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	3308      	adds	r3, #8
 800ee50:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee54:	e853 3f00 	ldrex	r3, [r3]
 800ee58:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ee5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee5c:	f023 0301 	bic.w	r3, r3, #1
 800ee60:	663b      	str	r3, [r7, #96]	@ 0x60
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	3308      	adds	r3, #8
 800ee68:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ee6a:	643a      	str	r2, [r7, #64]	@ 0x40
 800ee6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ee70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ee72:	e841 2300 	strex	r3, r2, [r1]
 800ee76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ee78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d1e5      	bne.n	800ee4a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2220      	movs	r2, #32
 800ee82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2200      	movs	r2, #0
 800ee8a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	4a33      	ldr	r2, [pc, #204]	@ (800ef64 <UART_RxISR_16BIT+0x1b4>)
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	d01f      	beq.n	800eedc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	685b      	ldr	r3, [r3, #4]
 800eea2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d018      	beq.n	800eedc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeb0:	6a3b      	ldr	r3, [r7, #32]
 800eeb2:	e853 3f00 	ldrex	r3, [r3]
 800eeb6:	61fb      	str	r3, [r7, #28]
   return(result);
 800eeb8:	69fb      	ldr	r3, [r7, #28]
 800eeba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800eebe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	461a      	mov	r2, r3
 800eec6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eeca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eecc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eece:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eed0:	e841 2300 	strex	r3, r2, [r1]
 800eed4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d1e6      	bne.n	800eeaa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eee0:	2b01      	cmp	r3, #1
 800eee2:	d12e      	bne.n	800ef42 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2200      	movs	r2, #0
 800eee8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	e853 3f00 	ldrex	r3, [r3]
 800eef6:	60bb      	str	r3, [r7, #8]
   return(result);
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	f023 0310 	bic.w	r3, r3, #16
 800eefe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	461a      	mov	r2, r3
 800ef06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ef08:	61bb      	str	r3, [r7, #24]
 800ef0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef0c:	6979      	ldr	r1, [r7, #20]
 800ef0e:	69ba      	ldr	r2, [r7, #24]
 800ef10:	e841 2300 	strex	r3, r2, [r1]
 800ef14:	613b      	str	r3, [r7, #16]
   return(result);
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d1e6      	bne.n	800eeea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	69db      	ldr	r3, [r3, #28]
 800ef22:	f003 0310 	and.w	r3, r3, #16
 800ef26:	2b10      	cmp	r3, #16
 800ef28:	d103      	bne.n	800ef32 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	2210      	movs	r2, #16
 800ef30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ef38:	4619      	mov	r1, r3
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f7f1 ff8e 	bl	8000e5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ef40:	e00b      	b.n	800ef5a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f7fe fc54 	bl	800d7f0 <HAL_UART_RxCpltCallback>
}
 800ef48:	e007      	b.n	800ef5a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	699a      	ldr	r2, [r3, #24]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f042 0208 	orr.w	r2, r2, #8
 800ef58:	619a      	str	r2, [r3, #24]
}
 800ef5a:	bf00      	nop
 800ef5c:	3770      	adds	r7, #112	@ 0x70
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}
 800ef62:	bf00      	nop
 800ef64:	58000c00 	.word	0x58000c00

0800ef68 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b0ac      	sub	sp, #176	@ 0xb0
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ef76:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	69db      	ldr	r3, [r3, #28]
 800ef80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	689b      	ldr	r3, [r3, #8]
 800ef94:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ef9e:	2b22      	cmp	r3, #34	@ 0x22
 800efa0:	f040 8180 	bne.w	800f2a4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800efaa:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800efae:	e123      	b.n	800f1f8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efb6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800efba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800efbe:	b2d9      	uxtb	r1, r3
 800efc0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800efc4:	b2da      	uxtb	r2, r3
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800efca:	400a      	ands	r2, r1
 800efcc:	b2d2      	uxtb	r2, r2
 800efce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800efd4:	1c5a      	adds	r2, r3, #1
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800efe0:	b29b      	uxth	r3, r3
 800efe2:	3b01      	subs	r3, #1
 800efe4:	b29a      	uxth	r2, r3
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	69db      	ldr	r3, [r3, #28]
 800eff2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800eff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800effa:	f003 0307 	and.w	r3, r3, #7
 800effe:	2b00      	cmp	r3, #0
 800f000:	d053      	beq.n	800f0aa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f006:	f003 0301 	and.w	r3, r3, #1
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d011      	beq.n	800f032 <UART_RxISR_8BIT_FIFOEN+0xca>
 800f00e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f016:	2b00      	cmp	r3, #0
 800f018:	d00b      	beq.n	800f032 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	2201      	movs	r2, #1
 800f020:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f028:	f043 0201 	orr.w	r2, r3, #1
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f036:	f003 0302 	and.w	r3, r3, #2
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d011      	beq.n	800f062 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f03e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f042:	f003 0301 	and.w	r3, r3, #1
 800f046:	2b00      	cmp	r3, #0
 800f048:	d00b      	beq.n	800f062 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	2202      	movs	r2, #2
 800f050:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f058:	f043 0204 	orr.w	r2, r3, #4
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f066:	f003 0304 	and.w	r3, r3, #4
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d011      	beq.n	800f092 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f06e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f072:	f003 0301 	and.w	r3, r3, #1
 800f076:	2b00      	cmp	r3, #0
 800f078:	d00b      	beq.n	800f092 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	2204      	movs	r2, #4
 800f080:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f088:	f043 0202 	orr.w	r2, r3, #2
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d006      	beq.n	800f0aa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f7fe fbb1 	bl	800d804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	f040 80a0 	bne.w	800f1f8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f0c0:	e853 3f00 	ldrex	r3, [r3]
 800f0c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800f0c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f0c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f0cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	461a      	mov	r2, r3
 800f0d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f0da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f0dc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0de:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800f0e0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f0e2:	e841 2300 	strex	r3, r2, [r1]
 800f0e6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800f0e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d1e4      	bne.n	800f0b8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	3308      	adds	r3, #8
 800f0f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f0f8:	e853 3f00 	ldrex	r3, [r3]
 800f0fc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800f0fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f100:	4b6e      	ldr	r3, [pc, #440]	@ (800f2bc <UART_RxISR_8BIT_FIFOEN+0x354>)
 800f102:	4013      	ands	r3, r2
 800f104:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	3308      	adds	r3, #8
 800f10e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f112:	66ba      	str	r2, [r7, #104]	@ 0x68
 800f114:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f116:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800f118:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f11a:	e841 2300 	strex	r3, r2, [r1]
 800f11e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f120:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f122:	2b00      	cmp	r3, #0
 800f124:	d1e3      	bne.n	800f0ee <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2220      	movs	r2, #32
 800f12a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2200      	movs	r2, #0
 800f132:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2200      	movs	r2, #0
 800f138:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	4a60      	ldr	r2, [pc, #384]	@ (800f2c0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800f140:	4293      	cmp	r3, r2
 800f142:	d021      	beq.n	800f188 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d01a      	beq.n	800f188 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f158:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f15a:	e853 3f00 	ldrex	r3, [r3]
 800f15e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f160:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f162:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f166:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	461a      	mov	r2, r3
 800f170:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f174:	657b      	str	r3, [r7, #84]	@ 0x54
 800f176:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f178:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f17a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f17c:	e841 2300 	strex	r3, r2, [r1]
 800f180:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f184:	2b00      	cmp	r3, #0
 800f186:	d1e4      	bne.n	800f152 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f18c:	2b01      	cmp	r3, #1
 800f18e:	d130      	bne.n	800f1f2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2200      	movs	r2, #0
 800f194:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f19c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f19e:	e853 3f00 	ldrex	r3, [r3]
 800f1a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a6:	f023 0310 	bic.w	r3, r3, #16
 800f1aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	461a      	mov	r2, r3
 800f1b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f1b8:	643b      	str	r3, [r7, #64]	@ 0x40
 800f1ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f1be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f1c0:	e841 2300 	strex	r3, r2, [r1]
 800f1c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d1e4      	bne.n	800f196 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	69db      	ldr	r3, [r3, #28]
 800f1d2:	f003 0310 	and.w	r3, r3, #16
 800f1d6:	2b10      	cmp	r3, #16
 800f1d8:	d103      	bne.n	800f1e2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	2210      	movs	r2, #16
 800f1e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f1e8:	4619      	mov	r1, r3
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f7f1 fe36 	bl	8000e5c <HAL_UARTEx_RxEventCallback>
 800f1f0:	e002      	b.n	800f1f8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f7fe fafc 	bl	800d7f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f1f8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d006      	beq.n	800f20e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800f200:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f204:	f003 0320 	and.w	r3, r3, #32
 800f208:	2b00      	cmp	r3, #0
 800f20a:	f47f aed1 	bne.w	800efb0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f214:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f218:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d049      	beq.n	800f2b4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f226:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800f22a:	429a      	cmp	r2, r3
 800f22c:	d242      	bcs.n	800f2b4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	3308      	adds	r3, #8
 800f234:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f236:	6a3b      	ldr	r3, [r7, #32]
 800f238:	e853 3f00 	ldrex	r3, [r3]
 800f23c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f23e:	69fb      	ldr	r3, [r7, #28]
 800f240:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f244:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	3308      	adds	r3, #8
 800f24e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f252:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f254:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f256:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f258:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f25a:	e841 2300 	strex	r3, r2, [r1]
 800f25e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f262:	2b00      	cmp	r3, #0
 800f264:	d1e3      	bne.n	800f22e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	4a16      	ldr	r2, [pc, #88]	@ (800f2c4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800f26a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	e853 3f00 	ldrex	r3, [r3]
 800f278:	60bb      	str	r3, [r7, #8]
   return(result);
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	f043 0320 	orr.w	r3, r3, #32
 800f280:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	461a      	mov	r2, r3
 800f28a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f28e:	61bb      	str	r3, [r7, #24]
 800f290:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f292:	6979      	ldr	r1, [r7, #20]
 800f294:	69ba      	ldr	r2, [r7, #24]
 800f296:	e841 2300 	strex	r3, r2, [r1]
 800f29a:	613b      	str	r3, [r7, #16]
   return(result);
 800f29c:	693b      	ldr	r3, [r7, #16]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d1e4      	bne.n	800f26c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f2a2:	e007      	b.n	800f2b4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	699a      	ldr	r2, [r3, #24]
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f042 0208 	orr.w	r2, r2, #8
 800f2b2:	619a      	str	r2, [r3, #24]
}
 800f2b4:	bf00      	nop
 800f2b6:	37b0      	adds	r7, #176	@ 0xb0
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}
 800f2bc:	effffffe 	.word	0xeffffffe
 800f2c0:	58000c00 	.word	0x58000c00
 800f2c4:	0800ebf9 	.word	0x0800ebf9

0800f2c8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b0ae      	sub	sp, #184	@ 0xb8
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f2d6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	69db      	ldr	r3, [r3, #28]
 800f2e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	689b      	ldr	r3, [r3, #8]
 800f2f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f2fe:	2b22      	cmp	r3, #34	@ 0x22
 800f300:	f040 8184 	bne.w	800f60c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f30a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f30e:	e127      	b.n	800f560 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f316:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f31e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f322:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800f326:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800f32a:	4013      	ands	r3, r2
 800f32c:	b29a      	uxth	r2, r3
 800f32e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f332:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f338:	1c9a      	adds	r2, r3, #2
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f344:	b29b      	uxth	r3, r3
 800f346:	3b01      	subs	r3, #1
 800f348:	b29a      	uxth	r2, r3
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	69db      	ldr	r3, [r3, #28]
 800f356:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f35a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f35e:	f003 0307 	and.w	r3, r3, #7
 800f362:	2b00      	cmp	r3, #0
 800f364:	d053      	beq.n	800f40e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f366:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f36a:	f003 0301 	and.w	r3, r3, #1
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d011      	beq.n	800f396 <UART_RxISR_16BIT_FIFOEN+0xce>
 800f372:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d00b      	beq.n	800f396 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	2201      	movs	r2, #1
 800f384:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f38c:	f043 0201 	orr.w	r2, r3, #1
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f396:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f39a:	f003 0302 	and.w	r3, r3, #2
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d011      	beq.n	800f3c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f3a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f3a6:	f003 0301 	and.w	r3, r3, #1
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d00b      	beq.n	800f3c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	2202      	movs	r2, #2
 800f3b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f3bc:	f043 0204 	orr.w	r2, r3, #4
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f3c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f3ca:	f003 0304 	and.w	r3, r3, #4
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d011      	beq.n	800f3f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f3d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f3d6:	f003 0301 	and.w	r3, r3, #1
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d00b      	beq.n	800f3f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	2204      	movs	r2, #4
 800f3e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f3ec:	f043 0202 	orr.w	r2, r3, #2
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d006      	beq.n	800f40e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f7fe f9ff 	bl	800d804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2200      	movs	r2, #0
 800f40a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f414:	b29b      	uxth	r3, r3
 800f416:	2b00      	cmp	r3, #0
 800f418:	f040 80a2 	bne.w	800f560 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f422:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f424:	e853 3f00 	ldrex	r3, [r3]
 800f428:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f42a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f42c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f430:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	461a      	mov	r2, r3
 800f43a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f43e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f442:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f444:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f446:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f44a:	e841 2300 	strex	r3, r2, [r1]
 800f44e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f450:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f452:	2b00      	cmp	r3, #0
 800f454:	d1e2      	bne.n	800f41c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	3308      	adds	r3, #8
 800f45c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f45e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f460:	e853 3f00 	ldrex	r3, [r3]
 800f464:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f466:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f468:	4b6e      	ldr	r3, [pc, #440]	@ (800f624 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800f46a:	4013      	ands	r3, r2
 800f46c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	3308      	adds	r3, #8
 800f476:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f47a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f47c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f47e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f480:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f482:	e841 2300 	strex	r3, r2, [r1]
 800f486:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f488:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d1e3      	bne.n	800f456 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2220      	movs	r2, #32
 800f492:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2200      	movs	r2, #0
 800f49a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2200      	movs	r2, #0
 800f4a0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	4a60      	ldr	r2, [pc, #384]	@ (800f628 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d021      	beq.n	800f4f0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d01a      	beq.n	800f4f0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4c2:	e853 3f00 	ldrex	r3, [r3]
 800f4c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f4c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f4ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f4ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	461a      	mov	r2, r3
 800f4d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f4dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f4de:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f4e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f4e4:	e841 2300 	strex	r3, r2, [r1]
 800f4e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f4ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d1e4      	bne.n	800f4ba <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	d130      	bne.n	800f55a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f506:	e853 3f00 	ldrex	r3, [r3]
 800f50a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f50c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f50e:	f023 0310 	bic.w	r3, r3, #16
 800f512:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	461a      	mov	r2, r3
 800f51c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f520:	647b      	str	r3, [r7, #68]	@ 0x44
 800f522:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f524:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f526:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f528:	e841 2300 	strex	r3, r2, [r1]
 800f52c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f52e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f530:	2b00      	cmp	r3, #0
 800f532:	d1e4      	bne.n	800f4fe <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	69db      	ldr	r3, [r3, #28]
 800f53a:	f003 0310 	and.w	r3, r3, #16
 800f53e:	2b10      	cmp	r3, #16
 800f540:	d103      	bne.n	800f54a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	2210      	movs	r2, #16
 800f548:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f550:	4619      	mov	r1, r3
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f7f1 fc82 	bl	8000e5c <HAL_UARTEx_RxEventCallback>
 800f558:	e002      	b.n	800f560 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f7fe f948 	bl	800d7f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f560:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800f564:	2b00      	cmp	r3, #0
 800f566:	d006      	beq.n	800f576 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800f568:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f56c:	f003 0320 	and.w	r3, r3, #32
 800f570:	2b00      	cmp	r3, #0
 800f572:	f47f aecd 	bne.w	800f310 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f57c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f580:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800f584:	2b00      	cmp	r3, #0
 800f586:	d049      	beq.n	800f61c <UART_RxISR_16BIT_FIFOEN+0x354>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f58e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800f592:	429a      	cmp	r2, r3
 800f594:	d242      	bcs.n	800f61c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	3308      	adds	r3, #8
 800f59c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5a0:	e853 3f00 	ldrex	r3, [r3]
 800f5a4:	623b      	str	r3, [r7, #32]
   return(result);
 800f5a6:	6a3b      	ldr	r3, [r7, #32]
 800f5a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f5ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	3308      	adds	r3, #8
 800f5b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f5ba:	633a      	str	r2, [r7, #48]	@ 0x30
 800f5bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f5c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5c2:	e841 2300 	strex	r3, r2, [r1]
 800f5c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d1e3      	bne.n	800f596 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	4a16      	ldr	r2, [pc, #88]	@ (800f62c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f5d2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5da:	693b      	ldr	r3, [r7, #16]
 800f5dc:	e853 3f00 	ldrex	r3, [r3]
 800f5e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	f043 0320 	orr.w	r3, r3, #32
 800f5e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f5f6:	61fb      	str	r3, [r7, #28]
 800f5f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5fa:	69b9      	ldr	r1, [r7, #24]
 800f5fc:	69fa      	ldr	r2, [r7, #28]
 800f5fe:	e841 2300 	strex	r3, r2, [r1]
 800f602:	617b      	str	r3, [r7, #20]
   return(result);
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d1e4      	bne.n	800f5d4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f60a:	e007      	b.n	800f61c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	699a      	ldr	r2, [r3, #24]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	f042 0208 	orr.w	r2, r2, #8
 800f61a:	619a      	str	r2, [r3, #24]
}
 800f61c:	bf00      	nop
 800f61e:	37b8      	adds	r7, #184	@ 0xb8
 800f620:	46bd      	mov	sp, r7
 800f622:	bd80      	pop	{r7, pc}
 800f624:	effffffe 	.word	0xeffffffe
 800f628:	58000c00 	.word	0x58000c00
 800f62c:	0800edb1 	.word	0x0800edb1

0800f630 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f630:	b480      	push	{r7}
 800f632:	b083      	sub	sp, #12
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f638:	bf00      	nop
 800f63a:	370c      	adds	r7, #12
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr

0800f644 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f644:	b480      	push	{r7}
 800f646:	b083      	sub	sp, #12
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f64c:	bf00      	nop
 800f64e:	370c      	adds	r7, #12
 800f650:	46bd      	mov	sp, r7
 800f652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f656:	4770      	bx	lr

0800f658 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f658:	b480      	push	{r7}
 800f65a:	b083      	sub	sp, #12
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f660:	bf00      	nop
 800f662:	370c      	adds	r7, #12
 800f664:	46bd      	mov	sp, r7
 800f666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66a:	4770      	bx	lr

0800f66c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f66c:	b480      	push	{r7}
 800f66e:	b085      	sub	sp, #20
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f67a:	2b01      	cmp	r3, #1
 800f67c:	d101      	bne.n	800f682 <HAL_UARTEx_DisableFifoMode+0x16>
 800f67e:	2302      	movs	r3, #2
 800f680:	e027      	b.n	800f6d2 <HAL_UARTEx_DisableFifoMode+0x66>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2201      	movs	r2, #1
 800f686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2224      	movs	r2, #36	@ 0x24
 800f68e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	681a      	ldr	r2, [r3, #0]
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	f022 0201 	bic.w	r2, r2, #1
 800f6a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f6b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	68fa      	ldr	r2, [r7, #12]
 800f6be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2220      	movs	r2, #32
 800f6c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f6d0:	2300      	movs	r3, #0
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	3714      	adds	r7, #20
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6dc:	4770      	bx	lr

0800f6de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f6de:	b580      	push	{r7, lr}
 800f6e0:	b084      	sub	sp, #16
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	6078      	str	r0, [r7, #4]
 800f6e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f6ee:	2b01      	cmp	r3, #1
 800f6f0:	d101      	bne.n	800f6f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f6f2:	2302      	movs	r3, #2
 800f6f4:	e02d      	b.n	800f752 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2201      	movs	r2, #1
 800f6fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2224      	movs	r2, #36	@ 0x24
 800f702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	681a      	ldr	r2, [r3, #0]
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	f022 0201 	bic.w	r2, r2, #1
 800f71c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	689b      	ldr	r3, [r3, #8]
 800f724:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	683a      	ldr	r2, [r7, #0]
 800f72e:	430a      	orrs	r2, r1
 800f730:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f000 f8a0 	bl	800f878 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	68fa      	ldr	r2, [r7, #12]
 800f73e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2220      	movs	r2, #32
 800f744:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2200      	movs	r2, #0
 800f74c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f750:	2300      	movs	r3, #0
}
 800f752:	4618      	mov	r0, r3
 800f754:	3710      	adds	r7, #16
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}

0800f75a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f75a:	b580      	push	{r7, lr}
 800f75c:	b084      	sub	sp, #16
 800f75e:	af00      	add	r7, sp, #0
 800f760:	6078      	str	r0, [r7, #4]
 800f762:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f76a:	2b01      	cmp	r3, #1
 800f76c:	d101      	bne.n	800f772 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f76e:	2302      	movs	r3, #2
 800f770:	e02d      	b.n	800f7ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2201      	movs	r2, #1
 800f776:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2224      	movs	r2, #36	@ 0x24
 800f77e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	681a      	ldr	r2, [r3, #0]
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	f022 0201 	bic.w	r2, r2, #1
 800f798:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	689b      	ldr	r3, [r3, #8]
 800f7a0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	683a      	ldr	r2, [r7, #0]
 800f7aa:	430a      	orrs	r2, r1
 800f7ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f000 f862 	bl	800f878 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	68fa      	ldr	r2, [r7, #12]
 800f7ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2220      	movs	r2, #32
 800f7c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f7cc:	2300      	movs	r3, #0
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3710      	adds	r7, #16
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}

0800f7d6 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f7d6:	b580      	push	{r7, lr}
 800f7d8:	b08c      	sub	sp, #48	@ 0x30
 800f7da:	af00      	add	r7, sp, #0
 800f7dc:	60f8      	str	r0, [r7, #12]
 800f7de:	60b9      	str	r1, [r7, #8]
 800f7e0:	4613      	mov	r3, r2
 800f7e2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f7f0:	2b20      	cmp	r3, #32
 800f7f2:	d13b      	bne.n	800f86c <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d002      	beq.n	800f800 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800f7fa:	88fb      	ldrh	r3, [r7, #6]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d101      	bne.n	800f804 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800f800:	2301      	movs	r3, #1
 800f802:	e034      	b.n	800f86e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	2201      	movs	r2, #1
 800f808:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	2200      	movs	r2, #0
 800f80e:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800f810:	88fb      	ldrh	r3, [r7, #6]
 800f812:	461a      	mov	r2, r3
 800f814:	68b9      	ldr	r1, [r7, #8]
 800f816:	68f8      	ldr	r0, [r7, #12]
 800f818:	f7ff f824 	bl	800e864 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f820:	2b01      	cmp	r3, #1
 800f822:	d11d      	bne.n	800f860 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	2210      	movs	r2, #16
 800f82a:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f832:	69bb      	ldr	r3, [r7, #24]
 800f834:	e853 3f00 	ldrex	r3, [r3]
 800f838:	617b      	str	r3, [r7, #20]
   return(result);
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	f043 0310 	orr.w	r3, r3, #16
 800f840:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	461a      	mov	r2, r3
 800f848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f84a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f84c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f84e:	6a39      	ldr	r1, [r7, #32]
 800f850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f852:	e841 2300 	strex	r3, r2, [r1]
 800f856:	61fb      	str	r3, [r7, #28]
   return(result);
 800f858:	69fb      	ldr	r3, [r7, #28]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d1e6      	bne.n	800f82c <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 800f85e:	e002      	b.n	800f866 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800f860:	2301      	movs	r3, #1
 800f862:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800f866:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f86a:	e000      	b.n	800f86e <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 800f86c:	2302      	movs	r3, #2
  }
}
 800f86e:	4618      	mov	r0, r3
 800f870:	3730      	adds	r7, #48	@ 0x30
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}
	...

0800f878 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f878:	b480      	push	{r7}
 800f87a:	b085      	sub	sp, #20
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f884:	2b00      	cmp	r3, #0
 800f886:	d108      	bne.n	800f89a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2201      	movs	r2, #1
 800f88c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2201      	movs	r2, #1
 800f894:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f898:	e031      	b.n	800f8fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f89a:	2310      	movs	r3, #16
 800f89c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f89e:	2310      	movs	r3, #16
 800f8a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	689b      	ldr	r3, [r3, #8]
 800f8a8:	0e5b      	lsrs	r3, r3, #25
 800f8aa:	b2db      	uxtb	r3, r3
 800f8ac:	f003 0307 	and.w	r3, r3, #7
 800f8b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	689b      	ldr	r3, [r3, #8]
 800f8b8:	0f5b      	lsrs	r3, r3, #29
 800f8ba:	b2db      	uxtb	r3, r3
 800f8bc:	f003 0307 	and.w	r3, r3, #7
 800f8c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f8c2:	7bbb      	ldrb	r3, [r7, #14]
 800f8c4:	7b3a      	ldrb	r2, [r7, #12]
 800f8c6:	4911      	ldr	r1, [pc, #68]	@ (800f90c <UARTEx_SetNbDataToProcess+0x94>)
 800f8c8:	5c8a      	ldrb	r2, [r1, r2]
 800f8ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f8ce:	7b3a      	ldrb	r2, [r7, #12]
 800f8d0:	490f      	ldr	r1, [pc, #60]	@ (800f910 <UARTEx_SetNbDataToProcess+0x98>)
 800f8d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f8d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8d8:	b29a      	uxth	r2, r3
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f8e0:	7bfb      	ldrb	r3, [r7, #15]
 800f8e2:	7b7a      	ldrb	r2, [r7, #13]
 800f8e4:	4909      	ldr	r1, [pc, #36]	@ (800f90c <UARTEx_SetNbDataToProcess+0x94>)
 800f8e6:	5c8a      	ldrb	r2, [r1, r2]
 800f8e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f8ec:	7b7a      	ldrb	r2, [r7, #13]
 800f8ee:	4908      	ldr	r1, [pc, #32]	@ (800f910 <UARTEx_SetNbDataToProcess+0x98>)
 800f8f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f8f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8f6:	b29a      	uxth	r2, r3
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f8fe:	bf00      	nop
 800f900:	3714      	adds	r7, #20
 800f902:	46bd      	mov	sp, r7
 800f904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f908:	4770      	bx	lr
 800f90a:	bf00      	nop
 800f90c:	0800fc28 	.word	0x0800fc28
 800f910:	0800fc30 	.word	0x0800fc30

0800f914 <memset>:
 800f914:	4402      	add	r2, r0
 800f916:	4603      	mov	r3, r0
 800f918:	4293      	cmp	r3, r2
 800f91a:	d100      	bne.n	800f91e <memset+0xa>
 800f91c:	4770      	bx	lr
 800f91e:	f803 1b01 	strb.w	r1, [r3], #1
 800f922:	e7f9      	b.n	800f918 <memset+0x4>

0800f924 <__libc_init_array>:
 800f924:	b570      	push	{r4, r5, r6, lr}
 800f926:	4d0d      	ldr	r5, [pc, #52]	@ (800f95c <__libc_init_array+0x38>)
 800f928:	4c0d      	ldr	r4, [pc, #52]	@ (800f960 <__libc_init_array+0x3c>)
 800f92a:	1b64      	subs	r4, r4, r5
 800f92c:	10a4      	asrs	r4, r4, #2
 800f92e:	2600      	movs	r6, #0
 800f930:	42a6      	cmp	r6, r4
 800f932:	d109      	bne.n	800f948 <__libc_init_array+0x24>
 800f934:	4d0b      	ldr	r5, [pc, #44]	@ (800f964 <__libc_init_array+0x40>)
 800f936:	4c0c      	ldr	r4, [pc, #48]	@ (800f968 <__libc_init_array+0x44>)
 800f938:	f000 f826 	bl	800f988 <_init>
 800f93c:	1b64      	subs	r4, r4, r5
 800f93e:	10a4      	asrs	r4, r4, #2
 800f940:	2600      	movs	r6, #0
 800f942:	42a6      	cmp	r6, r4
 800f944:	d105      	bne.n	800f952 <__libc_init_array+0x2e>
 800f946:	bd70      	pop	{r4, r5, r6, pc}
 800f948:	f855 3b04 	ldr.w	r3, [r5], #4
 800f94c:	4798      	blx	r3
 800f94e:	3601      	adds	r6, #1
 800f950:	e7ee      	b.n	800f930 <__libc_init_array+0xc>
 800f952:	f855 3b04 	ldr.w	r3, [r5], #4
 800f956:	4798      	blx	r3
 800f958:	3601      	adds	r6, #1
 800f95a:	e7f2      	b.n	800f942 <__libc_init_array+0x1e>
 800f95c:	0800fc40 	.word	0x0800fc40
 800f960:	0800fc40 	.word	0x0800fc40
 800f964:	0800fc40 	.word	0x0800fc40
 800f968:	0800fc44 	.word	0x0800fc44

0800f96c <memcpy>:
 800f96c:	440a      	add	r2, r1
 800f96e:	4291      	cmp	r1, r2
 800f970:	f100 33ff 	add.w	r3, r0, #4294967295
 800f974:	d100      	bne.n	800f978 <memcpy+0xc>
 800f976:	4770      	bx	lr
 800f978:	b510      	push	{r4, lr}
 800f97a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f97e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f982:	4291      	cmp	r1, r2
 800f984:	d1f9      	bne.n	800f97a <memcpy+0xe>
 800f986:	bd10      	pop	{r4, pc}

0800f988 <_init>:
 800f988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f98a:	bf00      	nop
 800f98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f98e:	bc08      	pop	{r3}
 800f990:	469e      	mov	lr, r3
 800f992:	4770      	bx	lr

0800f994 <_fini>:
 800f994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f996:	bf00      	nop
 800f998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f99a:	bc08      	pop	{r3}
 800f99c:	469e      	mov	lr, r3
 800f99e:	4770      	bx	lr
