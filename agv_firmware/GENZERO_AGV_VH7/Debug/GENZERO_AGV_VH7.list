
GENZERO_AGV_VH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f664  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  0800f930  0800f930  00010930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fbc0  0800fbc0  00010bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fbc8  0800fbc8  00010bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fbcc  0800fbcc  00010bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  24000000  0800fbd0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000528  24000064  0800fc34  00011064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400058c  0800fc34  0001158c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00011064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e930  00000000  00000000  00011092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000328e  00000000  00000000  0002f9c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001850  00000000  00000000  00032c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001307  00000000  00000000  000344a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035cb1  00000000  00000000  000357a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002115c  00000000  00000000  0006b458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00166e7b  00000000  00000000  0008c5b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f342f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006a2c  00000000  00000000  001f3474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000057  00000000  00000000  001f9ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000064 	.word	0x24000064
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800f918 	.word	0x0800f918

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000068 	.word	0x24000068
 8000308:	0800f918 	.word	0x0800f918

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80005fc:	b4b0      	push	{r4, r5, r7}
 80005fe:	b08f      	sub	sp, #60	@ 0x3c
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000604:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000608:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800060a:	2307      	movs	r3, #7
 800060c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000610:	2307      	movs	r3, #7
 8000612:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000616:	2301      	movs	r3, #1
 8000618:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 800061c:	23ff      	movs	r3, #255	@ 0xff
 800061e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000622:	2364      	movs	r3, #100	@ 0x64
 8000624:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000628:	2308      	movs	r3, #8
 800062a:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	461d      	mov	r5, r3
 8000630:	f107 040c 	add.w	r4, r7, #12
 8000634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800063a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800063c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000640:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	373c      	adds	r7, #60	@ 0x3c
 8000648:	46bd      	mov	sp, r7
 800064a:	bcb0      	pop	{r4, r5, r7}
 800064c:	4770      	bx	lr

0800064e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800064e:	b580      	push	{r7, lr}
 8000650:	b084      	sub	sp, #16
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000658:	2101      	movs	r1, #1
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f9fd 	bl	8000a5a <LoRa_read>
 8000660:	4603      	mov	r3, r0
 8000662:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000664:	7bbb      	ldrb	r3, [r7, #14]
 8000666:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d107      	bne.n	800067e <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	f023 0307 	bic.w	r3, r3, #7
 8000674:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
 800067c:	e03e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d10c      	bne.n	800069e <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000688:	f023 0307 	bic.w	r3, r3, #7
 800068c:	b25b      	sxtb	r3, r3
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	b25b      	sxtb	r3, r3
 8000694:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2201      	movs	r2, #1
 800069a:	61da      	str	r2, [r3, #28]
 800069c:	e02e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	d10c      	bne.n	80006be <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80006a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006a8:	f023 0307 	bic.w	r3, r3, #7
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	f043 0303 	orr.w	r3, r3, #3
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2203      	movs	r2, #3
 80006ba:	61da      	str	r2, [r3, #28]
 80006bc:	e01e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	d10c      	bne.n	80006de <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80006c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006c8:	f023 0307 	bic.w	r3, r3, #7
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	f043 0305 	orr.w	r3, r3, #5
 80006d2:	b25b      	sxtb	r3, r3
 80006d4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2205      	movs	r2, #5
 80006da:	61da      	str	r2, [r3, #28]
 80006dc:	e00e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	2b06      	cmp	r3, #6
 80006e2:	d10b      	bne.n	80006fc <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80006e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006e8:	f023 0307 	bic.w	r3, r3, #7
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	f043 0306 	orr.w	r3, r3, #6
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2206      	movs	r2, #6
 80006fa:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	461a      	mov	r2, r3
 8000700:	2101      	movs	r1, #1
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f000 f9c3 	bl	8000a8e <LoRa_write>
	//HAL_Delay(10);
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4613      	mov	r3, r2
 800071e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	889b      	ldrh	r3, [r3, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	4619      	mov	r1, r3
 800072c:	f007 fa66 	bl	8007bfc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	6998      	ldr	r0, [r3, #24]
 8000734:	88fa      	ldrh	r2, [r7, #6]
 8000736:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800073a:	68b9      	ldr	r1, [r7, #8]
 800073c:	f00a ff56 	bl	800b5ec <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000740:	bf00      	nop
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4618      	mov	r0, r3
 8000748:	f00b fbb0 	bl	800beac <HAL_SPI_GetState>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	d1f7      	bne.n	8000742 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6998      	ldr	r0, [r3, #24]
 8000756:	8b3a      	ldrh	r2, [r7, #24]
 8000758:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800075c:	6839      	ldr	r1, [r7, #0]
 800075e:	f00b f933 	bl	800b9c8 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000762:	bf00      	nop
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4618      	mov	r0, r3
 800076a:	f00b fb9f 	bl	800beac <HAL_SPI_GetState>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d1f7      	bne.n	8000764 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	889b      	ldrh	r3, [r3, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	4619      	mov	r1, r3
 8000780:	f007 fa3c 	bl	8007bfc <HAL_GPIO_WritePin>
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	4613      	mov	r3, r2
 800079a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	889b      	ldrh	r3, [r3, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	f007 fa28 	bl	8007bfc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	6998      	ldr	r0, [r3, #24]
 80007b0:	88fa      	ldrh	r2, [r7, #6]
 80007b2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007b6:	68b9      	ldr	r1, [r7, #8]
 80007b8:	f00a ff18 	bl	800b5ec <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007bc:	bf00      	nop
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00b fb72 	bl	800beac <HAL_SPI_GetState>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d1f7      	bne.n	80007be <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6998      	ldr	r0, [r3, #24]
 80007d2:	8b3a      	ldrh	r2, [r7, #24]
 80007d4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007d8:	6839      	ldr	r1, [r7, #0]
 80007da:	f00a ff07 	bl	800b5ec <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007de:	bf00      	nop
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f00b fb61 	bl	800beac <HAL_SPI_GetState>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d1f7      	bne.n	80007e0 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	889b      	ldrh	r3, [r3, #4]
 80007f8:	2201      	movs	r2, #1
 80007fa:	4619      	mov	r1, r3
 80007fc:	f007 f9fe 	bl	8007bfc <HAL_GPIO_WritePin>
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000814:	2126      	movs	r1, #38	@ 0x26
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 f91f 	bl	8000a5a <LoRa_read>
 800081c:	4603      	mov	r3, r0
 800081e:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d004      	beq.n	8000830 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e003      	b.n	8000838 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000830:	7bbb      	ldrb	r3, [r7, #14]
 8000832:	f023 0308 	bic.w	r3, r3, #8
 8000836:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	461a      	mov	r2, r3
 800083c:	2126      	movs	r1, #38	@ 0x26
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f000 f925 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000844:	200a      	movs	r0, #10
 8000846:	f002 f807 	bl	8002858 <HAL_Delay>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000854:	b580      	push	{r7, lr}
 8000856:	b096      	sub	sp, #88	@ 0x58
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 800085c:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <LoRa_setAutoLDO+0x64>)
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4611      	mov	r1, r2
 8000864:	2250      	movs	r2, #80	@ 0x50
 8000866:	4618      	mov	r0, r3
 8000868:	f00f f848 	bl	800f8fc <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000872:	461a      	mov	r2, r3
 8000874:	2301      	movs	r3, #1
 8000876:	4093      	lsls	r3, r2
 8000878:	ee07 3a90 	vmov	s15, r3
 800087c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	3358      	adds	r3, #88	@ 0x58
 800088a:	443b      	add	r3, r7
 800088c:	3b50      	subs	r3, #80	@ 0x50
 800088e:	ed93 6b00 	vldr	d6, [r3]
 8000892:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000896:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800089a:	ee17 3a90 	vmov	r3, s15
 800089e:	2b10      	cmp	r3, #16
 80008a0:	bfcc      	ite	gt
 80008a2:	2301      	movgt	r3, #1
 80008a4:	2300      	movle	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	4619      	mov	r1, r3
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffac 	bl	8000808 <LoRa_setLowDaraRateOptimization>
}
 80008b0:	bf00      	nop
 80008b2:	3758      	adds	r7, #88	@ 0x58
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	0800f930 	.word	0x0800f930

080008bc <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	04db      	lsls	r3, r3, #19
 80008ca:	115b      	asrs	r3, r3, #5
 80008cc:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	0c1b      	lsrs	r3, r3, #16
 80008d2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80008d4:	7afb      	ldrb	r3, [r7, #11]
 80008d6:	461a      	mov	r2, r3
 80008d8:	2106      	movs	r1, #6
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 f8d7 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 80008e0:	2005      	movs	r0, #5
 80008e2:	f001 ffb9 	bl	8002858 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80008ec:	7afb      	ldrb	r3, [r7, #11]
 80008ee:	461a      	mov	r2, r3
 80008f0:	2107      	movs	r1, #7
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 f8cb 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 80008f8:	2005      	movs	r0, #5
 80008fa:	f001 ffad 	bl	8002858 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000902:	7afb      	ldrb	r3, [r7, #11]
 8000904:	461a      	mov	r2, r3
 8000906:	2108      	movs	r1, #8
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f8c0 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 800090e:	2005      	movs	r0, #5
 8000910:	f001 ffa2 	bl	8002858 <HAL_Delay>
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	2b0c      	cmp	r3, #12
 800092a:	dd01      	ble.n	8000930 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 800092c:	230c      	movs	r3, #12
 800092e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	2b06      	cmp	r3, #6
 8000934:	dc01      	bgt.n	800093a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000936:	2307      	movs	r3, #7
 8000938:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800093a:	211e      	movs	r1, #30
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 f88c 	bl	8000a5a <LoRa_read>
 8000942:	4603      	mov	r3, r0
 8000944:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000946:	200a      	movs	r0, #10
 8000948:	f001 ff86 	bl	8002858 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	011b      	lsls	r3, r3, #4
 8000952:	b2da      	uxtb	r2, r3
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4413      	add	r3, r2
 800095e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000960:	7bbb      	ldrb	r3, [r7, #14]
 8000962:	461a      	mov	r2, r3
 8000964:	211e      	movs	r1, #30
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f891 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 800096c:	200a      	movs	r0, #10
 800096e:	f001 ff73 	bl	8002858 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ff6e 	bl	8000854 <LoRa_setAutoLDO>
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	461a      	mov	r2, r3
 8000990:	2109      	movs	r1, #9
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 f87b 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000998:	200a      	movs	r0, #10
 800099a:	f001 ff5d 	bl	8002858 <HAL_Delay>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	2b2c      	cmp	r3, #44	@ 0x2c
 80009bc:	d801      	bhi.n	80009c2 <LoRa_setOCP+0x1a>
		current = 45;
 80009be:	232d      	movs	r3, #45	@ 0x2d
 80009c0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	2bf0      	cmp	r3, #240	@ 0xf0
 80009c6:	d901      	bls.n	80009cc <LoRa_setOCP+0x24>
		current = 240;
 80009c8:	23f0      	movs	r3, #240	@ 0xf0
 80009ca:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	2b78      	cmp	r3, #120	@ 0x78
 80009d0:	d809      	bhi.n	80009e6 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80009d2:	78fb      	ldrb	r3, [r7, #3]
 80009d4:	3b2d      	subs	r3, #45	@ 0x2d
 80009d6:	4a12      	ldr	r2, [pc, #72]	@ (8000a20 <LoRa_setOCP+0x78>)
 80009d8:	fb82 1203 	smull	r1, r2, r2, r3
 80009dc:	1052      	asrs	r2, r2, #1
 80009de:	17db      	asrs	r3, r3, #31
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	73fb      	strb	r3, [r7, #15]
 80009e4:	e00b      	b.n	80009fe <LoRa_setOCP+0x56>
	else if(current <= 240)
 80009e6:	78fb      	ldrb	r3, [r7, #3]
 80009e8:	2bf0      	cmp	r3, #240	@ 0xf0
 80009ea:	d808      	bhi.n	80009fe <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	331e      	adds	r3, #30
 80009f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a20 <LoRa_setOCP+0x78>)
 80009f2:	fb82 1203 	smull	r1, r2, r2, r3
 80009f6:	1092      	asrs	r2, r2, #2
 80009f8:	17db      	asrs	r3, r3, #31
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	3320      	adds	r3, #32
 8000a02:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	461a      	mov	r2, r3
 8000a08:	210b      	movs	r1, #11
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f83f 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000a10:	200a      	movs	r0, #10
 8000a12:	f001 ff21 	bl	8002858 <HAL_Delay>
}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	66666667 	.word	0x66666667

08000a24 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000a2c:	211e      	movs	r1, #30
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f000 f813 	bl	8000a5a <LoRa_read>
 8000a34:	4603      	mov	r3, r0
 8000a36:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	f043 0307 	orr.w	r3, r3, #7
 8000a3e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000a40:	7bbb      	ldrb	r3, [r7, #14]
 8000a42:	461a      	mov	r2, r3
 8000a44:	211e      	movs	r1, #30
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 f821 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000a4c:	200a      	movs	r0, #10
 8000a4e:	f001 ff03 	bl	8002858 <HAL_Delay>
}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af02      	add	r7, sp, #8
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	460b      	mov	r3, r1
 8000a64:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000a66:	78fb      	ldrb	r3, [r7, #3]
 8000a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000a70:	f107 030f 	add.w	r3, r7, #15
 8000a74:	f107 010e 	add.w	r1, r7, #14
 8000a78:	2201      	movs	r2, #1
 8000a7a:	9200      	str	r2, [sp, #0]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff fe46 	bl	8000710 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af02      	add	r7, sp, #8
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	460b      	mov	r3, r1
 8000a98:	70fb      	strb	r3, [r7, #3]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000a9e:	78fb      	ldrb	r3, [r7, #3]
 8000aa0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000aa8:	78bb      	ldrb	r3, [r7, #2]
 8000aaa:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000aac:	f107 030f 	add.w	r3, r7, #15
 8000ab0:	f107 010e 	add.w	r1, r7, #14
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	9200      	str	r2, [sp, #0]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fe66 	bl	800078c <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	72fb      	strb	r3, [r7, #11]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8000adc:	7afb      	ldrb	r3, [r7, #11]
 8000ade:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	6818      	ldr	r0, [r3, #0]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	889b      	ldrh	r3, [r3, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	4619      	mov	r1, r3
 8000af2:	f007 f883 	bl	8007bfc <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	6998      	ldr	r0, [r3, #24]
 8000afa:	f107 0117 	add.w	r1, r7, #23
 8000afe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b02:	2201      	movs	r2, #1
 8000b04:	f00a fd72 	bl	800b5ec <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000b08:	bf00      	nop
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f00b f9cc 	bl	800beac <HAL_SPI_GetState>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d1f7      	bne.n	8000b0a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	6998      	ldr	r0, [r3, #24]
 8000b1e:	7abb      	ldrb	r3, [r7, #10]
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	f00a fd60 	bl	800b5ec <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000b2c:	bf00      	nop
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f00b f9ba 	bl	800beac <HAL_SPI_GetState>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d1f7      	bne.n	8000b2e <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	6818      	ldr	r0, [r3, #0]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	889b      	ldrh	r3, [r3, #4]
 8000b46:	2201      	movs	r2, #1
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f007 f857 	bl	8007bfc <HAL_GPIO_WritePin>
}
 8000b4e:	bf00      	nop
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]

	return 1;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	4611      	mov	r1, r2
 8000b78:	461a      	mov	r2, r3
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	71fb      	strb	r3, [r7, #7]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000b88:	2101      	movs	r1, #1
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff fd5f 	bl	800064e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000b90:	210e      	movs	r1, #14
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f7ff ff61 	bl	8000a5a <LoRa_read>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000b9c:	7cfb      	ldrb	r3, [r7, #19]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	210d      	movs	r1, #13
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f7ff ff73 	bl	8000a8e <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	461a      	mov	r2, r3
 8000bac:	2122      	movs	r1, #34	@ 0x22
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f7ff ff6d 	bl	8000a8e <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	2100      	movs	r1, #0
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f7ff ff84 	bl	8000ac8 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000bc0:	2103      	movs	r1, #3
 8000bc2:	68f8      	ldr	r0, [r7, #12]
 8000bc4:	f7ff fd43 	bl	800064e <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000bc8:	2112      	movs	r1, #18
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	f7ff ff45 	bl	8000a5a <LoRa_read>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8000bd4:	7cfb      	ldrb	r3, [r7, #19]
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d00a      	beq.n	8000bf4 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000bde:	22ff      	movs	r2, #255	@ 0xff
 8000be0:	2112      	movs	r1, #18
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f7ff ff53 	bl	8000a8e <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000be8:	6979      	ldr	r1, [r7, #20]
 8000bea:	68f8      	ldr	r0, [r7, #12]
 8000bec:	f7ff fd2f 	bl	800064e <LoRa_gotoMode>
			return 1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e00f      	b.n	8000c14 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8000bf4:	88bb      	ldrh	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	80bb      	strh	r3, [r7, #4]
 8000bfa:	88bb      	ldrh	r3, [r7, #4]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d105      	bne.n	8000c0c <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8000c00:	6979      	ldr	r1, [r7, #20]
 8000c02:	68f8      	ldr	r0, [r7, #12]
 8000c04:	f7ff fd23 	bl	800064e <LoRa_gotoMode>
				return 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e003      	b.n	8000c14 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f001 fe23 	bl	8002858 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000c12:	e7d9      	b.n	8000bc8 <LoRa_transmit+0x5c>
	}
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000c24:	2105      	movs	r1, #5
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff fd11 	bl	800064e <LoRa_gotoMode>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b089      	sub	sp, #36	@ 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	e007      	b.n	8000c5c <LoRa_receive+0x28>
		data[i]=0;
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	4413      	add	r3, r2
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dbf3      	blt.n	8000c4c <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000c64:	2101      	movs	r1, #1
 8000c66:	68f8      	ldr	r0, [r7, #12]
 8000c68:	f7ff fcf1 	bl	800064e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000c6c:	2112      	movs	r1, #18
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f7ff fef3 	bl	8000a5a <LoRa_read>
 8000c74:	4603      	mov	r3, r0
 8000c76:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000c78:	7cfb      	ldrb	r3, [r7, #19]
 8000c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d02f      	beq.n	8000ce2 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000c82:	22ff      	movs	r2, #255	@ 0xff
 8000c84:	2112      	movs	r1, #18
 8000c86:	68f8      	ldr	r0, [r7, #12]
 8000c88:	f7ff ff01 	bl	8000a8e <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000c8c:	2113      	movs	r1, #19
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f7ff fee3 	bl	8000a5a <LoRa_read>
 8000c94:	4603      	mov	r3, r0
 8000c96:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000c98:	2110      	movs	r1, #16
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f7ff fedd 	bl	8000a5a <LoRa_read>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000ca4:	7cfb      	ldrb	r3, [r7, #19]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	210d      	movs	r1, #13
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f7ff feef 	bl	8000a8e <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000cb0:	7cba      	ldrb	r2, [r7, #18]
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	bf28      	it	cs
 8000cb8:	4613      	movcs	r3, r2
 8000cba:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	e00b      	b.n	8000cda <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	18d4      	adds	r4, r2, r3
 8000cc8:	2100      	movs	r1, #0
 8000cca:	68f8      	ldr	r0, [r7, #12]
 8000ccc:	f7ff fec5 	bl	8000a5a <LoRa_read>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	7ffb      	ldrb	r3, [r7, #31]
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	dbef      	blt.n	8000cc2 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000ce2:	2105      	movs	r1, #5
 8000ce4:	68f8      	ldr	r0, [r7, #12]
 8000ce6:	f7ff fcb2 	bl	800064e <LoRa_gotoMode>
    return min;
 8000cea:	7ffb      	ldrb	r3, [r7, #31]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3724      	adds	r7, #36	@ 0x24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd90      	pop	{r4, r7, pc}

08000cf4 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff2a 	bl	8000b56 <LoRa_isvalid>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 8096 	beq.w	8000e36 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff fc9e 	bl	800064e <LoRa_gotoMode>
			HAL_Delay(10);
 8000d12:	200a      	movs	r0, #10
 8000d14:	f001 fda0 	bl	8002858 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000d18:	2101      	movs	r1, #1
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff fe9d 	bl	8000a5a <LoRa_read>
 8000d20:	4603      	mov	r3, r0
 8000d22:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000d24:	200a      	movs	r0, #10
 8000d26:	f001 fd97 	bl	8002858 <HAL_Delay>
			data = read | 0x80;
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d30:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000d32:	7bbb      	ldrb	r3, [r7, #14]
 8000d34:	461a      	mov	r2, r3
 8000d36:	2101      	movs	r1, #1
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff fea8 	bl	8000a8e <LoRa_write>
			HAL_Delay(100);
 8000d3e:	2064      	movs	r0, #100	@ 0x64
 8000d40:	f001 fd8a 	bl	8002858 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a1b      	ldr	r3, [r3, #32]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff fdb6 	bl	80008bc <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000d56:	4619      	mov	r1, r3
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff fe11 	bl	8000980 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000d64:	4619      	mov	r1, r3
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff fe1e 	bl	80009a8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000d6c:	2223      	movs	r2, #35	@ 0x23
 8000d6e:	210c      	movs	r1, #12
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff fe8c 	bl	8000a8e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff fe54 	bl	8000a24 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d82:	4619      	mov	r1, r3
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff fdc9 	bl	800091c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000d8a:	22ff      	movs	r2, #255	@ 0xff
 8000d8c:	211f      	movs	r1, #31
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff fe7d 	bl	8000a8e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	4413      	add	r3, r2
 8000dae:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000db0:	7bbb      	ldrb	r3, [r7, #14]
 8000db2:	461a      	mov	r2, r3
 8000db4:	211d      	movs	r1, #29
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff fe69 	bl	8000a8e <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff fd49 	bl	8000854 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000dc6:	0a1b      	lsrs	r3, r3, #8
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	461a      	mov	r2, r3
 8000dce:	2120      	movs	r1, #32
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff fe5c 	bl	8000a8e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	461a      	mov	r2, r3
 8000dde:	2121      	movs	r1, #33	@ 0x21
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff fe54 	bl	8000a8e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000de6:	2140      	movs	r1, #64	@ 0x40
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff fe36 	bl	8000a5a <LoRa_read>
 8000dee:	4603      	mov	r3, r0
 8000df0:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8000df8:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	2140      	movs	r1, #64	@ 0x40
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff fe44 	bl	8000a8e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000e06:	2101      	movs	r1, #1
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff fc20 	bl	800064e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2201      	movs	r2, #1
 8000e12:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000e14:	200a      	movs	r0, #10
 8000e16:	f001 fd1f 	bl	8002858 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000e1a:	2142      	movs	r1, #66	@ 0x42
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff fe1c 	bl	8000a5a <LoRa_read>
 8000e22:	4603      	mov	r3, r0
 8000e24:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	2b12      	cmp	r3, #18
 8000e2a:	d101      	bne.n	8000e30 <LoRa_init+0x13c>
				return LORA_OK;
 8000e2c:	23c8      	movs	r3, #200	@ 0xc8
 8000e2e:	e004      	b.n	8000e3a <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8000e30:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8000e34:	e001      	b.n	8000e3a <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8000e36:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <Line_Sensor_Calculation>:
							  volatile uint8_t  *sensor_middle_on_line_number,

							  volatile uint8_t  *sensor_total_on_line_number,
									   uint16_t  sensor_threshhold,
									   uint8_t   sensor_numbers,
							  volatile uint16_t *line_position){
 8000e44:	b480      	push	{r7}
 8000e46:	b08d      	sub	sp, #52	@ 0x34
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	603b      	str	r3, [r7, #0]
	uint8_t i, on_line = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	uint32_t avg = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t sum = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t value;
	uint8_t on_sensor_total_number = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	uint8_t middle_on_line = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22


	for(i = 0; i < sensor_numbers; i++){
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000e72:	e077      	b.n	8000f64 <Line_Sensor_Calculation+0x120>
		uint16_t calmin, calmax;
		uint16_t denominator;
		calmax = sensor_max_values[i];
 8000e74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	837b      	strh	r3, [r7, #26]
		calmin = sensor_min_values[i];
 8000e82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	833b      	strh	r3, [r7, #24]

		denominator = calmax - calmin;
 8000e90:	8b7a      	ldrh	r2, [r7, #26]
 8000e92:	8b3b      	ldrh	r3, [r7, #24]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	82fb      	strh	r3, [r7, #22]

		int x = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
		if(denominator != 0){
 8000e9c:	8afb      	ldrh	r3, [r7, #22]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d011      	beq.n	8000ec6 <Line_Sensor_Calculation+0x82>
			x = (((signed long)sensor_values[i]) - calmin) * 1000/denominator;
 8000ea2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	68fa      	ldr	r2, [r7, #12]
 8000eaa:	4413      	add	r3, r2
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	8b3b      	ldrh	r3, [r7, #24]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000eba:	fb03 f202 	mul.w	r2, r3, r2
 8000ebe:	8afb      	ldrh	r3, [r7, #22]
 8000ec0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ec4:	61fb      	str	r3, [r7, #28]
		}
		if(x <0){
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	da01      	bge.n	8000ed0 <Line_Sensor_Calculation+0x8c>
			x = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
		}
		if(x>1000){
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ed6:	dd02      	ble.n	8000ede <Line_Sensor_Calculation+0x9a>
			x = 1000;
 8000ed8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000edc:	61fb      	str	r3, [r7, #28]
		}
		value = (1000-x);
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8000ee6:	82bb      	strh	r3, [r7, #20]
		sensor_calibrated_values[i] = value;
 8000ee8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	8aba      	ldrh	r2, [r7, #20]
 8000ef4:	801a      	strh	r2, [r3, #0]

		// start read line number section
		if(value > 600){
 8000ef6:	8abb      	ldrh	r3, [r7, #20]
 8000ef8:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000efc:	d902      	bls.n	8000f04 <Line_Sensor_Calculation+0xc0>
			on_line = 1;
 8000efe:	2301      	movs	r3, #1
 8000f00:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		}
		if(value > 200){
 8000f04:	8abb      	ldrh	r3, [r7, #20]
 8000f06:	2bc8      	cmp	r3, #200	@ 0xc8
 8000f08:	d910      	bls.n	8000f2c <Line_Sensor_Calculation+0xe8>
			avg += (long)(value)*(i*1000);
 8000f0a:	8abb      	ldrh	r3, [r7, #20]
 8000f0c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000f10:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f14:	fb01 f202 	mul.w	r2, r1, r2
 8000f18:	fb02 f303 	mul.w	r3, r2, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f20:	4413      	add	r3, r2
 8000f22:	62bb      	str	r3, [r7, #40]	@ 0x28
			sum += value;
 8000f24:	8abb      	ldrh	r3, [r7, #20]
 8000f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f28:	4413      	add	r3, r2
 8000f2a:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		// end read line number section

		// start on line sensor calculation
		if(value > sensor_threshhold){
 8000f2c:	8aba      	ldrh	r2, [r7, #20]
 8000f2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d911      	bls.n	8000f5a <Line_Sensor_Calculation+0x116>
			on_sensor_total_number++;
 8000f36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			if(i >= 2 && i <= 7){
 8000f40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d908      	bls.n	8000f5a <Line_Sensor_Calculation+0x116>
 8000f48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f4c:	2b07      	cmp	r3, #7
 8000f4e:	d804      	bhi.n	8000f5a <Line_Sensor_Calculation+0x116>
				middle_on_line++;
 8000f50:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000f54:	3301      	adds	r3, #1
 8000f56:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	for(i = 0; i < sensor_numbers; i++){
 8000f5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f5e:	3301      	adds	r3, #1
 8000f60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000f64:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000f68:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d381      	bcc.n	8000e74 <Line_Sensor_Calculation+0x30>
		}
		// end on line sensor calculation
	}

	// start read line number section
	if(!on_line){
 8000f70:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d118      	bne.n	8000faa <Line_Sensor_Calculation+0x166>
		if(_line_read_value < (sensor_numbers - 1) * 1000/2){
 8000f78:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000f82:	fb03 f202 	mul.w	r2, r3, r2
 8000f86:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <Line_Sensor_Calculation+0x19c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	dd03      	ble.n	8000f96 <Line_Sensor_Calculation+0x152>
			_line_read_value = 0;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <Line_Sensor_Calculation+0x19c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	e010      	b.n	8000fb8 <Line_Sensor_Calculation+0x174>
		}
		else{
			_line_read_value = (sensor_numbers - 1)*1000;
 8000f96:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fa0:	fb02 f303 	mul.w	r3, r2, r3
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe0 <Line_Sensor_Calculation+0x19c>)
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	e006      	b.n	8000fb8 <Line_Sensor_Calculation+0x174>
		}
	}
	else{
		_line_read_value = avg/sum;
 8000faa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <Line_Sensor_Calculation+0x19c>)
 8000fb6:	601a      	str	r2, [r3, #0]
	}
	*line_position = _line_read_value;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <Line_Sensor_Calculation+0x19c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000fc0:	801a      	strh	r2, [r3, #0]
	// end read line number section

	// start on line sensor calculation

	*sensor_middle_on_line_number = middle_on_line;
 8000fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fc4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8000fc8:	701a      	strb	r2, [r3, #0]

	*sensor_total_on_line_number = on_sensor_total_number;
 8000fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fcc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000fd0:	701a      	strb	r2, [r3, #0]
	// end on line sensor calculation
	// 0 - 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9

	// 2 - 7 --> mid

}
 8000fd2:	bf00      	nop
 8000fd4:	3734      	adds	r7, #52	@ 0x34
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	240003f4 	.word	0x240003f4

08000fe4 <HAL_GPIO_EXTI_Callback>:
//		Station_id[3] = uid[3];
//		Station_id[4] = uid[4];
//	}
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d102      	bne.n	8000ffa <HAL_GPIO_EXTI_Callback+0x16>
		Station = 0;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <HAL_GPIO_EXTI_Callback+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_1){
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d102      	bne.n	8001006 <HAL_GPIO_EXTI_Callback+0x22>
		Station = 1;
 8001000:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <HAL_GPIO_EXTI_Callback+0x74>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_2){
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	2b04      	cmp	r3, #4
 800100a:	d102      	bne.n	8001012 <HAL_GPIO_EXTI_Callback+0x2e>
		Station = 2;
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <HAL_GPIO_EXTI_Callback+0x74>)
 800100e:	2202      	movs	r2, #2
 8001010:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_3){
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	2b08      	cmp	r3, #8
 8001016:	d102      	bne.n	800101e <HAL_GPIO_EXTI_Callback+0x3a>
		Station = 3;
 8001018:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <HAL_GPIO_EXTI_Callback+0x74>)
 800101a:	2203      	movs	r2, #3
 800101c:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_4){
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	2b10      	cmp	r3, #16
 8001022:	d103      	bne.n	800102c <HAL_GPIO_EXTI_Callback+0x48>
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_7);
 8001024:	2180      	movs	r1, #128	@ 0x80
 8001026:	480d      	ldr	r0, [pc, #52]	@ (800105c <HAL_GPIO_EXTI_Callback+0x78>)
 8001028:	f006 fe01 	bl	8007c2e <HAL_GPIO_TogglePin>
	}

	if(GPIO_Pin == myLoRa.DIO0_pin){
 800102c:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <HAL_GPIO_EXTI_Callback+0x7c>)
 800102e:	8a9b      	ldrh	r3, [r3, #20]
 8001030:	88fa      	ldrh	r2, [r7, #6]
 8001032:	429a      	cmp	r2, r3
 8001034:	d10b      	bne.n	800104e <HAL_GPIO_EXTI_Callback+0x6a>
		LoRa_receive(&myLoRa, LoraRxBuffer, 128);
 8001036:	2280      	movs	r2, #128	@ 0x80
 8001038:	490a      	ldr	r1, [pc, #40]	@ (8001064 <HAL_GPIO_EXTI_Callback+0x80>)
 800103a:	4809      	ldr	r0, [pc, #36]	@ (8001060 <HAL_GPIO_EXTI_Callback+0x7c>)
 800103c:	f7ff fdfa 	bl	8000c34 <LoRa_receive>
		HAL_GPIO_TogglePin(LORA_RX_LED_GPIO_Port, LORA_RX_LED_Pin);
 8001040:	2140      	movs	r1, #64	@ 0x40
 8001042:	4809      	ldr	r0, [pc, #36]	@ (8001068 <HAL_GPIO_EXTI_Callback+0x84>)
 8001044:	f006 fdf3 	bl	8007c2e <HAL_GPIO_TogglePin>
		lora_receive_toggle = 255;
 8001048:	4b08      	ldr	r3, [pc, #32]	@ (800106c <HAL_GPIO_EXTI_Callback+0x88>)
 800104a:	22ff      	movs	r2, #255	@ 0xff
 800104c:	701a      	strb	r2, [r3, #0]

	}
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	24000450 	.word	0x24000450
 800105c:	58021800 	.word	0x58021800
 8001060:	24000454 	.word	0x24000454
 8001064:	24000504 	.word	0x24000504
 8001068:	58020c00 	.word	0x58020c00
 800106c:	24000584 	.word	0x24000584

08001070 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
	Data[0] = RxData[3]<<8 | RxData[4];
 800107c:	4b20      	ldr	r3, [pc, #128]	@ (8001100 <HAL_UARTEx_RxEventCallback+0x90>)
 800107e:	78db      	ldrb	r3, [r3, #3]
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	b21a      	sxth	r2, r3
 8001084:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <HAL_UARTEx_RxEventCallback+0x90>)
 8001086:	791b      	ldrb	r3, [r3, #4]
 8001088:	b21b      	sxth	r3, r3
 800108a:	4313      	orrs	r3, r2
 800108c:	b21b      	sxth	r3, r3
 800108e:	b29a      	uxth	r2, r3
 8001090:	4b1c      	ldr	r3, [pc, #112]	@ (8001104 <HAL_UARTEx_RxEventCallback+0x94>)
 8001092:	801a      	strh	r2, [r3, #0]
	Data[1] = RxData[5]<<8 | RxData[6];
 8001094:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <HAL_UARTEx_RxEventCallback+0x90>)
 8001096:	795b      	ldrb	r3, [r3, #5]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <HAL_UARTEx_RxEventCallback+0x90>)
 800109e:	799b      	ldrb	r3, [r3, #6]
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <HAL_UARTEx_RxEventCallback+0x94>)
 80010aa:	805a      	strh	r2, [r3, #2]
	Data[2] = RxData[7]<<8 | RxData[8];
 80010ac:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <HAL_UARTEx_RxEventCallback+0x90>)
 80010ae:	79db      	ldrb	r3, [r3, #7]
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_UARTEx_RxEventCallback+0x90>)
 80010b6:	7a1b      	ldrb	r3, [r3, #8]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b21b      	sxth	r3, r3
 80010be:	b29a      	uxth	r2, r3
 80010c0:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <HAL_UARTEx_RxEventCallback+0x94>)
 80010c2:	809a      	strh	r2, [r3, #4]
	Data[3] = RxData[9]<<8 | RxData[10];
 80010c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <HAL_UARTEx_RxEventCallback+0x90>)
 80010c6:	7a5b      	ldrb	r3, [r3, #9]
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <HAL_UARTEx_RxEventCallback+0x90>)
 80010ce:	7a9b      	ldrb	r3, [r3, #10]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <HAL_UARTEx_RxEventCallback+0x94>)
 80010da:	80da      	strh	r2, [r3, #6]
	Data[4] = RxData[11]<<8 | RxData[12];
 80010dc:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <HAL_UARTEx_RxEventCallback+0x90>)
 80010de:	7adb      	ldrb	r3, [r3, #11]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HAL_UARTEx_RxEventCallback+0x90>)
 80010e6:	7b1b      	ldrb	r3, [r3, #12]
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <HAL_UARTEx_RxEventCallback+0x94>)
 80010f2:	811a      	strh	r2, [r3, #8]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	240003b8 	.word	0x240003b8
 8001104:	240003e0 	.word	0x240003e0

08001108 <sendData>:

void sendData (uint8_t *data)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001116:	480a      	ldr	r0, [pc, #40]	@ (8001140 <sendData+0x38>)
 8001118:	f006 fd70 	bl	8007bfc <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, data, 8, 1000);
 800111c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001120:	2208      	movs	r2, #8
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	4807      	ldr	r0, [pc, #28]	@ (8001144 <sendData+0x3c>)
 8001126:	f00b fed9 	bl	800cedc <HAL_UART_Transmit>
	HAL_GPIO_WritePin(TX_EN_GPIO_Port,TX_EN_Pin , GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001130:	4803      	ldr	r0, [pc, #12]	@ (8001140 <sendData+0x38>)
 8001132:	f006 fd63 	bl	8007bfc <HAL_GPIO_WritePin>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	58020400 	.word	0x58020400
 8001144:	24000324 	.word	0x24000324

08001148 <motor_enable_velocity_mode>:

void motor_enable_velocity_mode(uint8_t id){
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
	  TxData[0] = id;  // slave address
 8001152:	4a2a      	ldr	r2, [pc, #168]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	7013      	strb	r3, [r2, #0]
	  TxData[1] = 0x06;  // Function code for Read Holding Registers
 8001158:	4b28      	ldr	r3, [pc, #160]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 800115a:	2206      	movs	r2, #6
 800115c:	705a      	strb	r2, [r3, #1]

	  TxData[2] = 0x20;
 800115e:	4b27      	ldr	r3, [pc, #156]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 8001160:	2220      	movs	r2, #32
 8001162:	709a      	strb	r2, [r3, #2]
	  TxData[3] = 0x32;
 8001164:	4b25      	ldr	r3, [pc, #148]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 8001166:	2232      	movs	r2, #50	@ 0x32
 8001168:	70da      	strb	r2, [r3, #3]
	  //The Register address will be 00000000 00000100 = 4 + 40001 = 40005

	  TxData[4] = 0x00;
 800116a:	4b24      	ldr	r3, [pc, #144]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 800116c:	2200      	movs	r2, #0
 800116e:	711a      	strb	r2, [r3, #4]
	  TxData[5] = 0x03;
 8001170:	4b22      	ldr	r3, [pc, #136]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 8001172:	2203      	movs	r2, #3
 8001174:	715a      	strb	r2, [r3, #5]
	  // no of registers to read will be 00000000 00000101 = 5 Registers = 10 Bytes

	  uint16_t crc = crc16(TxData, 6);
 8001176:	2106      	movs	r1, #6
 8001178:	4820      	ldr	r0, [pc, #128]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 800117a:	f000 fea3 	bl	8001ec4 <crc16>
 800117e:	4603      	mov	r3, r0
 8001180:	81fb      	strh	r3, [r7, #14]
	  TxData[6] = crc&0xFF;   // CRC LOW
 8001182:	89fb      	ldrh	r3, [r7, #14]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4b1d      	ldr	r3, [pc, #116]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 8001188:	719a      	strb	r2, [r3, #6]
	  TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 800118a:	89fb      	ldrh	r3, [r7, #14]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	b29b      	uxth	r3, r3
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 8001194:	71da      	strb	r2, [r3, #7]
	  sendData(TxData);
 8001196:	4819      	ldr	r0, [pc, #100]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 8001198:	f7ff ffb6 	bl	8001108 <sendData>

	  HAL_Delay(10);
 800119c:	200a      	movs	r0, #10
 800119e:	f001 fb5b 	bl	8002858 <HAL_Delay>

	  TxData[0] = id;  // slave address
 80011a2:	4a16      	ldr	r2, [pc, #88]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	7013      	strb	r3, [r2, #0]
	  TxData[1] = 0x06;  // Function code for Read Holding Registers
 80011a8:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 80011aa:	2206      	movs	r2, #6
 80011ac:	705a      	strb	r2, [r3, #1]

	  TxData[2] = 0x20;
 80011ae:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 80011b0:	2220      	movs	r2, #32
 80011b2:	709a      	strb	r2, [r3, #2]
	  TxData[3] = 0x31;
 80011b4:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 80011b6:	2231      	movs	r2, #49	@ 0x31
 80011b8:	70da      	strb	r2, [r3, #3]
	  //The Register address will be 00000000 00000100 = 4 + 40001 = 40005

	  TxData[4] = 0x00;
 80011ba:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	711a      	strb	r2, [r3, #4]
	  TxData[5] = 0x08;
 80011c0:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 80011c2:	2208      	movs	r2, #8
 80011c4:	715a      	strb	r2, [r3, #5]
	  // no of registers to read will be 00000000 00000101 = 5 Registers = 10 Bytes

	  crc = crc16(TxData, 6);
 80011c6:	2106      	movs	r1, #6
 80011c8:	480c      	ldr	r0, [pc, #48]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 80011ca:	f000 fe7b 	bl	8001ec4 <crc16>
 80011ce:	4603      	mov	r3, r0
 80011d0:	81fb      	strh	r3, [r7, #14]
	  TxData[6] = crc&0xFF;   // CRC LOW
 80011d2:	89fb      	ldrh	r3, [r7, #14]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 80011d8:	719a      	strb	r2, [r3, #6]
	  TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 80011da:	89fb      	ldrh	r3, [r7, #14]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	b29b      	uxth	r3, r3
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 80011e4:	71da      	strb	r2, [r3, #7]

	  sendData(TxData);
 80011e6:	4805      	ldr	r0, [pc, #20]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 80011e8:	f7ff ff8e 	bl	8001108 <sendData>
	  HAL_Delay(10);
 80011ec:	200a      	movs	r0, #10
 80011ee:	f001 fb33 	bl	8002858 <HAL_Delay>
}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	240003d8 	.word	0x240003d8

08001200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	b092      	sub	sp, #72	@ 0x48
 8001204:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001206:	f001 fa95 	bl	8002734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800120a:	f000 f919 	bl	8001440 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800120e:	f000 f989 	bl	8001524 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001212:	f000 fcf9 	bl	8001c08 <MX_GPIO_Init>
  MX_DMA_Init();
 8001216:	f000 fccf 	bl	8001bb8 <MX_DMA_Init>
  MX_ADC1_Init();
 800121a:	f000 f9b7 	bl	800158c <MX_ADC1_Init>
  MX_ADC3_Init();
 800121e:	f000 fac3 	bl	80017a8 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8001222:	f000 fc7d 	bl	8001b20 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001226:	f000 fc17 	bl	8001a58 <MX_TIM2_Init>
  MX_SPI1_Init();
 800122a:	f000 fbbf 	bl	80019ac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */



  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 32);
 800122e:	2220      	movs	r2, #32
 8001230:	4969      	ldr	r1, [pc, #420]	@ (80013d8 <main+0x1d8>)
 8001232:	486a      	ldr	r0, [pc, #424]	@ (80013dc <main+0x1dc>)
 8001234:	f00e fa97 	bl	800f766 <HAL_UARTEx_ReceiveToIdle_IT>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) line_sensor_front_values_dma, line_sensor_front_channel_number);
 8001238:	230a      	movs	r3, #10
 800123a:	461a      	mov	r2, r3
 800123c:	4968      	ldr	r1, [pc, #416]	@ (80013e0 <main+0x1e0>)
 800123e:	4869      	ldr	r0, [pc, #420]	@ (80013e4 <main+0x1e4>)
 8001240:	f002 f838 	bl	80032b4 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*) line_sensor_back_values_dma, line_sensor_back_channel_number);
 8001244:	230a      	movs	r3, #10
 8001246:	461a      	mov	r2, r3
 8001248:	4967      	ldr	r1, [pc, #412]	@ (80013e8 <main+0x1e8>)
 800124a:	4868      	ldr	r0, [pc, #416]	@ (80013ec <main+0x1ec>)
 800124c:	f002 f832 	bl	80032b4 <HAL_ADC_Start_DMA>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001250:	2100      	movs	r1, #0
 8001252:	4867      	ldr	r0, [pc, #412]	@ (80013f0 <main+0x1f0>)
 8001254:	f00a ff78 	bl	800c148 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001258:	2104      	movs	r1, #4
 800125a:	4865      	ldr	r0, [pc, #404]	@ (80013f0 <main+0x1f0>)
 800125c:	f00a ff74 	bl	800c148 <HAL_TIM_PWM_Start>

  motor_enable_velocity_mode(0x01);
 8001260:	2001      	movs	r0, #1
 8001262:	f7ff ff71 	bl	8001148 <motor_enable_velocity_mode>
  HAL_Delay(10);
 8001266:	200a      	movs	r0, #10
 8001268:	f001 faf6 	bl	8002858 <HAL_Delay>
  motor_enable_velocity_mode(0x02);
 800126c:	2002      	movs	r0, #2
 800126e:	f7ff ff6b 	bl	8001148 <motor_enable_velocity_mode>
  HAL_Delay(10);
 8001272:	200a      	movs	r0, #10
 8001274:	f001 faf0 	bl	8002858 <HAL_Delay>


  Line_Sensor_Calculation(line_sensor_front_values_dma,
 8001278:	4b5e      	ldr	r3, [pc, #376]	@ (80013f4 <main+0x1f4>)
 800127a:	9304      	str	r3, [sp, #16]
 800127c:	230a      	movs	r3, #10
 800127e:	9303      	str	r3, [sp, #12]
 8001280:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8001284:	9302      	str	r3, [sp, #8]
 8001286:	4b5c      	ldr	r3, [pc, #368]	@ (80013f8 <main+0x1f8>)
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	4b5c      	ldr	r3, [pc, #368]	@ (80013fc <main+0x1fc>)
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	4b5c      	ldr	r3, [pc, #368]	@ (8001400 <main+0x200>)
 8001290:	4a5c      	ldr	r2, [pc, #368]	@ (8001404 <main+0x204>)
 8001292:	495d      	ldr	r1, [pc, #372]	@ (8001408 <main+0x208>)
 8001294:	4852      	ldr	r0, [pc, #328]	@ (80013e0 <main+0x1e0>)
 8001296:	f7ff fdd5 	bl	8000e44 <Line_Sensor_Calculation>
						 &line_sensor_front_on_line_total_number,
						  line_sensor_front_trigger_threshhold,
						  line_sensor_front_total_channel,
						 &line_sensor_front_read_line_value);

  Line_Sensor_Calculation(line_sensor_back_values_dma,
 800129a:	4b5c      	ldr	r3, [pc, #368]	@ (800140c <main+0x20c>)
 800129c:	9304      	str	r3, [sp, #16]
 800129e:	230a      	movs	r3, #10
 80012a0:	9303      	str	r3, [sp, #12]
 80012a2:	f44f 7316 	mov.w	r3, #600	@ 0x258
 80012a6:	9302      	str	r3, [sp, #8]
 80012a8:	4b59      	ldr	r3, [pc, #356]	@ (8001410 <main+0x210>)
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	4b59      	ldr	r3, [pc, #356]	@ (8001414 <main+0x214>)
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	4b59      	ldr	r3, [pc, #356]	@ (8001418 <main+0x218>)
 80012b2:	4a5a      	ldr	r2, [pc, #360]	@ (800141c <main+0x21c>)
 80012b4:	495a      	ldr	r1, [pc, #360]	@ (8001420 <main+0x220>)
 80012b6:	484c      	ldr	r0, [pc, #304]	@ (80013e8 <main+0x1e8>)
 80012b8:	f7ff fdc4 	bl	8000e44 <Line_Sensor_Calculation>
						 &line_sensor_back_on_line_total_number,
						  line_sensor_back_trigger_threshhold,
						  line_sensor_back_total_channel,
						 &line_sensor_back_read_line_value);

  if((line_sensor_back_on_line_total_number >= 9) &&(line_sensor_front_on_line_total_number >= 1)){
 80012bc:	4b54      	ldr	r3, [pc, #336]	@ (8001410 <main+0x210>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d908      	bls.n	80012d8 <main+0xd8>
 80012c6:	4b4c      	ldr	r3, [pc, #304]	@ (80013f8 <main+0x1f8>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <main+0xd8>
	  agv_orientation = 0xF00F;
 80012d0:	4b54      	ldr	r3, [pc, #336]	@ (8001424 <main+0x224>)
 80012d2:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 80012d6:	801a      	strh	r2, [r3, #0]
  }
  if((line_sensor_front_on_line_total_number >= 9) && (line_sensor_back_on_line_total_number >= 1)){
 80012d8:	4b47      	ldr	r3, [pc, #284]	@ (80013f8 <main+0x1f8>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d908      	bls.n	80012f4 <main+0xf4>
 80012e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001410 <main+0x210>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <main+0xf4>
	  agv_orientation = 0xF11F;
 80012ec:	4b4d      	ldr	r3, [pc, #308]	@ (8001424 <main+0x224>)
 80012ee:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 80012f2:	801a      	strh	r2, [r3, #0]
  }

  myLoRa = newLoRa();
 80012f4:	4c4c      	ldr	r4, [pc, #304]	@ (8001428 <main+0x228>)
 80012f6:	463b      	mov	r3, r7
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f97f 	bl	80005fc <newLoRa>
 80012fe:	4625      	mov	r5, r4
 8001300:	463c      	mov	r4, r7
 8001302:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001304:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800130a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800130e:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = LORA_NSS_GPIO_Port;
 8001312:	4b45      	ldr	r3, [pc, #276]	@ (8001428 <main+0x228>)
 8001314:	4a45      	ldr	r2, [pc, #276]	@ (800142c <main+0x22c>)
 8001316:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = LORA_NSS_Pin;
 8001318:	4b43      	ldr	r3, [pc, #268]	@ (8001428 <main+0x228>)
 800131a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800131e:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = LORA_RST_GPIO_Port;
 8001320:	4b41      	ldr	r3, [pc, #260]	@ (8001428 <main+0x228>)
 8001322:	4a42      	ldr	r2, [pc, #264]	@ (800142c <main+0x22c>)
 8001324:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = LORA_RST_Pin;
 8001326:	4b40      	ldr	r3, [pc, #256]	@ (8001428 <main+0x228>)
 8001328:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800132c:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = LORA_DIO0_GPIO_Port;
 800132e:	4b3e      	ldr	r3, [pc, #248]	@ (8001428 <main+0x228>)
 8001330:	4a3e      	ldr	r2, [pc, #248]	@ (800142c <main+0x22c>)
 8001332:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = LORA_DIO0_Pin;
 8001334:	4b3c      	ldr	r3, [pc, #240]	@ (8001428 <main+0x228>)
 8001336:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800133a:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 800133c:	4b3a      	ldr	r3, [pc, #232]	@ (8001428 <main+0x228>)
 800133e:	4a3c      	ldr	r2, [pc, #240]	@ (8001430 <main+0x230>)
 8001340:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 433;             // default = 433 MHz
 8001342:	4b39      	ldr	r3, [pc, #228]	@ (8001428 <main+0x228>)
 8001344:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8001348:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 800134a:	4b37      	ldr	r3, [pc, #220]	@ (8001428 <main+0x228>)
 800134c:	2207      	movs	r2, #7
 800134e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  myLoRa.bandWidth             = BW_125KHz;       // default = BW_125KHz
 8001352:	4b35      	ldr	r3, [pc, #212]	@ (8001428 <main+0x228>)
 8001354:	2207      	movs	r2, #7
 8001356:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 800135a:	4b33      	ldr	r3, [pc, #204]	@ (8001428 <main+0x228>)
 800135c:	2201      	movs	r2, #1
 800135e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 8001362:	4b31      	ldr	r3, [pc, #196]	@ (8001428 <main+0x228>)
 8001364:	22ff      	movs	r2, #255	@ 0xff
 8001366:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  myLoRa.overCurrentProtection = 100;             // default = 100 mA
 800136a:	4b2f      	ldr	r3, [pc, #188]	@ (8001428 <main+0x228>)
 800136c:	2264      	movs	r2, #100	@ 0x64
 800136e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  myLoRa.preamble              = 8;              // default = 8;
 8001372:	4b2d      	ldr	r3, [pc, #180]	@ (8001428 <main+0x228>)
 8001374:	2208      	movs	r2, #8
 8001376:	851a      	strh	r2, [r3, #40]	@ 0x28

  if(LoRa_init(&myLoRa) == LORA_OK){
 8001378:	482b      	ldr	r0, [pc, #172]	@ (8001428 <main+0x228>)
 800137a:	f7ff fcbb 	bl	8000cf4 <LoRa_init>
 800137e:	4603      	mov	r3, r0
 8001380:	2bc8      	cmp	r3, #200	@ 0xc8
 8001382:	d102      	bne.n	800138a <main+0x18a>
	  LoRa_stat = 1;
 8001384:	4b2b      	ldr	r3, [pc, #172]	@ (8001434 <main+0x234>)
 8001386:	2201      	movs	r2, #1
 8001388:	801a      	strh	r2, [r3, #0]
  }

  LoRa_startReceiving(&myLoRa);
 800138a:	4827      	ldr	r0, [pc, #156]	@ (8001428 <main+0x228>)
 800138c:	f7ff fc46 	bl	8000c1c <LoRa_startReceiving>

  LoraTxBuffer[0] = 0xAA;
 8001390:	4b29      	ldr	r3, [pc, #164]	@ (8001438 <main+0x238>)
 8001392:	22aa      	movs	r2, #170	@ 0xaa
 8001394:	701a      	strb	r2, [r3, #0]
  LoraTxBuffer[1] = 0xBB;
 8001396:	4b28      	ldr	r3, [pc, #160]	@ (8001438 <main+0x238>)
 8001398:	22bb      	movs	r2, #187	@ 0xbb
 800139a:	705a      	strb	r2, [r3, #1]
  LoraTxBuffer[2] = 0xCC;
 800139c:	4b26      	ldr	r3, [pc, #152]	@ (8001438 <main+0x238>)
 800139e:	22cc      	movs	r2, #204	@ 0xcc
 80013a0:	709a      	strb	r2, [r3, #2]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  agv_orientation = 0xF00F;
 80013a2:	4b20      	ldr	r3, [pc, #128]	@ (8001424 <main+0x224>)
 80013a4:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 80013a8:	801a      	strh	r2, [r3, #0]

	  if(lora_receive_toggle == 255){
 80013aa:	4b24      	ldr	r3, [pc, #144]	@ (800143c <main+0x23c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2bff      	cmp	r3, #255	@ 0xff
 80013b0:	d1f7      	bne.n	80013a2 <main+0x1a2>

		  if(LoRa_transmit(&myLoRa, LoraTxBuffer, 3, 500) == 1){
 80013b2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80013b6:	2203      	movs	r2, #3
 80013b8:	491f      	ldr	r1, [pc, #124]	@ (8001438 <main+0x238>)
 80013ba:	481b      	ldr	r0, [pc, #108]	@ (8001428 <main+0x228>)
 80013bc:	f7ff fbd6 	bl	8000b6c <LoRa_transmit>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d104      	bne.n	80013d0 <main+0x1d0>
			  //lora_receive_toggle = 0;
			  HAL_GPIO_TogglePin(LORA_TX_LED_GPIO_Port, LORA_TX_LED_Pin);
 80013c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013ca:	4818      	ldr	r0, [pc, #96]	@ (800142c <main+0x22c>)
 80013cc:	f006 fc2f 	bl	8007c2e <HAL_GPIO_TogglePin>
		  }
		  lora_receive_toggle = 0;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <main+0x23c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
	  agv_orientation = 0xF00F;
 80013d6:	e7e4      	b.n	80013a2 <main+0x1a2>
 80013d8:	240003b8 	.word	0x240003b8
 80013dc:	24000324 	.word	0x24000324
 80013e0:	240003f8 	.word	0x240003f8
 80013e4:	24000080 	.word	0x24000080
 80013e8:	2400040c 	.word	0x2400040c
 80013ec:	240000f0 	.word	0x240000f0
 80013f0:	240002d8 	.word	0x240002d8
 80013f4:	2400044c 	.word	0x2400044c
 80013f8:	24000449 	.word	0x24000449
 80013fc:	24000448 	.word	0x24000448
 8001400:	24000014 	.word	0x24000014
 8001404:	24000000 	.word	0x24000000
 8001408:	24000420 	.word	0x24000420
 800140c:	2400044e 	.word	0x2400044e
 8001410:	2400044b 	.word	0x2400044b
 8001414:	2400044a 	.word	0x2400044a
 8001418:	2400003c 	.word	0x2400003c
 800141c:	24000028 	.word	0x24000028
 8001420:	24000434 	.word	0x24000434
 8001424:	24000050 	.word	0x24000050
 8001428:	24000454 	.word	0x24000454
 800142c:	58021800 	.word	0x58021800
 8001430:	24000250 	.word	0x24000250
 8001434:	24000480 	.word	0x24000480
 8001438:	24000484 	.word	0x24000484
 800143c:	24000584 	.word	0x24000584

08001440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b09c      	sub	sp, #112	@ 0x70
 8001444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001446:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800144a:	224c      	movs	r2, #76	@ 0x4c
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f00e fa28 	bl	800f8a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	2220      	movs	r2, #32
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f00e fa22 	bl	800f8a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001460:	2002      	movs	r0, #2
 8001462:	f006 fc19 	bl	8007c98 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001466:	2300      	movs	r3, #0
 8001468:	603b      	str	r3, [r7, #0]
 800146a:	4b2d      	ldr	r3, [pc, #180]	@ (8001520 <SystemClock_Config+0xe0>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	4a2c      	ldr	r2, [pc, #176]	@ (8001520 <SystemClock_Config+0xe0>)
 8001470:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001474:	6193      	str	r3, [r2, #24]
 8001476:	4b2a      	ldr	r3, [pc, #168]	@ (8001520 <SystemClock_Config+0xe0>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001482:	bf00      	nop
 8001484:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <SystemClock_Config+0xe0>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800148c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001490:	d1f8      	bne.n	8001484 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001492:	2303      	movs	r3, #3
 8001494:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001496:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800149c:	2301      	movs	r3, #1
 800149e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80014a0:	2340      	movs	r3, #64	@ 0x40
 80014a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a4:	2302      	movs	r3, #2
 80014a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a8:	2302      	movs	r3, #2
 80014aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80014ac:	2302      	movs	r3, #2
 80014ae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80014b0:	232c      	movs	r3, #44	@ 0x2c
 80014b2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80014b4:	2301      	movs	r3, #1
 80014b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80014b8:	2303      	movs	r3, #3
 80014ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014bc:	2302      	movs	r3, #2
 80014be:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80014c0:	230c      	movs	r3, #12
 80014c2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014d0:	4618      	mov	r0, r3
 80014d2:	f006 fc1b 	bl	8007d0c <HAL_RCC_OscConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80014dc:	f000 fcec 	bl	8001eb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e0:	233f      	movs	r3, #63	@ 0x3f
 80014e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e4:	2303      	movs	r3, #3
 80014e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80014ec:	2308      	movs	r3, #8
 80014ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80014f0:	2340      	movs	r3, #64	@ 0x40
 80014f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80014f4:	2340      	movs	r3, #64	@ 0x40
 80014f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80014f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80014fe:	2340      	movs	r3, #64	@ 0x40
 8001500:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2103      	movs	r1, #3
 8001506:	4618      	mov	r0, r3
 8001508:	f006 ffda 	bl	80084c0 <HAL_RCC_ClockConfig>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001512:	f000 fcd1 	bl	8001eb8 <Error_Handler>
  }
}
 8001516:	bf00      	nop
 8001518:	3770      	adds	r7, #112	@ 0x70
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	58024800 	.word	0x58024800

08001524 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b0ae      	sub	sp, #184	@ 0xb8
 8001528:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800152a:	463b      	mov	r3, r7
 800152c:	22b8      	movs	r2, #184	@ 0xb8
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f00e f9b7 	bl	800f8a4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CKPER;
 8001536:	4a14      	ldr	r2, [pc, #80]	@ (8001588 <PeriphCommonClock_Config+0x64>)
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001540:	2302      	movs	r3, #2
 8001542:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 8001544:	230f      	movs	r3, #15
 8001546:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001548:	2302      	movs	r3, #2
 800154a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800154c:	2302      	movs	r3, #2
 800154e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001550:	2302      	movs	r3, #2
 8001552:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001554:	23c0      	movs	r3, #192	@ 0xc0
 8001556:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 800155c:	f640 3386 	movw	r3, #2950	@ 0xb86
 8001560:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001562:	2300      	movs	r3, #0
 8001564:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800156c:	463b      	mov	r3, r7
 800156e:	4618      	mov	r0, r3
 8001570:	f007 fb32 	bl	8008bd8 <HAL_RCCEx_PeriphCLKConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800157a:	f000 fc9d 	bl	8001eb8 <Error_Handler>
  }
}
 800157e:	bf00      	nop
 8001580:	37b8      	adds	r7, #184	@ 0xb8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	80080000 	.word	0x80080000

0800158c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08c      	sub	sp, #48	@ 0x30
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001592:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800159e:	463b      	mov	r3, r7
 80015a0:	2224      	movs	r2, #36	@ 0x24
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f00e f97d 	bl	800f8a4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015aa:	4b73      	ldr	r3, [pc, #460]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 80015ac:	4a73      	ldr	r2, [pc, #460]	@ (800177c <MX_ADC1_Init+0x1f0>)
 80015ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015b0:	4b71      	ldr	r3, [pc, #452]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015b6:	4b70      	ldr	r3, [pc, #448]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 80015b8:	2208      	movs	r2, #8
 80015ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015bc:	4b6e      	ldr	r3, [pc, #440]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 80015be:	2201      	movs	r2, #1
 80015c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 80015c4:	2204      	movs	r2, #4
 80015c6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015c8:	4b6b      	ldr	r3, [pc, #428]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 80015d4:	4b68      	ldr	r3, [pc, #416]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 80015d6:	220a      	movs	r2, #10
 80015d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015da:	4b67      	ldr	r3, [pc, #412]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e2:	4b65      	ldr	r3, [pc, #404]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015e8:	4b63      	ldr	r3, [pc, #396]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80015ee:	4b62      	ldr	r3, [pc, #392]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 80015f0:	2203      	movs	r2, #3
 80015f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015f4:	4b60      	ldr	r3, [pc, #384]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 80015f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80015fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 80015fe:	2200      	movs	r2, #0
 8001600:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001602:	4b5d      	ldr	r3, [pc, #372]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800160a:	485b      	ldr	r0, [pc, #364]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 800160c:	f001 fc4a 	bl	8002ea4 <HAL_ADC_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001616:	f000 fc4f 	bl	8001eb8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800161e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001622:	4619      	mov	r1, r3
 8001624:	4854      	ldr	r0, [pc, #336]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 8001626:	f003 f917 	bl	8004858 <HAL_ADCEx_MultiModeConfigChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001630:	f000 fc42 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001634:	4b52      	ldr	r3, [pc, #328]	@ (8001780 <MX_ADC1_Init+0x1f4>)
 8001636:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001638:	2306      	movs	r3, #6
 800163a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 800163c:	2305      	movs	r3, #5
 800163e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001640:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001644:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001646:	2304      	movs	r3, #4
 8001648:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001654:	463b      	mov	r3, r7
 8001656:	4619      	mov	r1, r3
 8001658:	4847      	ldr	r0, [pc, #284]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 800165a:	f002 f969 	bl	8003930 <HAL_ADC_ConfigChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001664:	f000 fc28 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001668:	4b46      	ldr	r3, [pc, #280]	@ (8001784 <MX_ADC1_Init+0x1f8>)
 800166a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800166c:	230c      	movs	r3, #12
 800166e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001670:	463b      	mov	r3, r7
 8001672:	4619      	mov	r1, r3
 8001674:	4840      	ldr	r0, [pc, #256]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 8001676:	f002 f95b 	bl	8003930 <HAL_ADC_ConfigChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8001680:	f000 fc1a 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001684:	4b40      	ldr	r3, [pc, #256]	@ (8001788 <MX_ADC1_Init+0x1fc>)
 8001686:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001688:	2312      	movs	r3, #18
 800168a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800168c:	463b      	mov	r3, r7
 800168e:	4619      	mov	r1, r3
 8001690:	4839      	ldr	r0, [pc, #228]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 8001692:	f002 f94d 	bl	8003930 <HAL_ADC_ConfigChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 800169c:	f000 fc0c 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80016a0:	4b3a      	ldr	r3, [pc, #232]	@ (800178c <MX_ADC1_Init+0x200>)
 80016a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80016a4:	2318      	movs	r3, #24
 80016a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016a8:	463b      	mov	r3, r7
 80016aa:	4619      	mov	r1, r3
 80016ac:	4832      	ldr	r0, [pc, #200]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 80016ae:	f002 f93f 	bl	8003930 <HAL_ADC_ConfigChannel>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 80016b8:	f000 fbfe 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80016bc:	4b34      	ldr	r3, [pc, #208]	@ (8001790 <MX_ADC1_Init+0x204>)
 80016be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80016c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016c6:	463b      	mov	r3, r7
 80016c8:	4619      	mov	r1, r3
 80016ca:	482b      	ldr	r0, [pc, #172]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 80016cc:	f002 f930 	bl	8003930 <HAL_ADC_ConfigChannel>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 80016d6:	f000 fbef 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80016da:	4b2e      	ldr	r3, [pc, #184]	@ (8001794 <MX_ADC1_Init+0x208>)
 80016dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80016de:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80016e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016e4:	463b      	mov	r3, r7
 80016e6:	4619      	mov	r1, r3
 80016e8:	4823      	ldr	r0, [pc, #140]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 80016ea:	f002 f921 	bl	8003930 <HAL_ADC_ConfigChannel>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_ADC1_Init+0x16c>
  {
    Error_Handler();
 80016f4:	f000 fbe0 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80016f8:	4b27      	ldr	r3, [pc, #156]	@ (8001798 <MX_ADC1_Init+0x20c>)
 80016fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80016fc:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8001700:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001702:	463b      	mov	r3, r7
 8001704:	4619      	mov	r1, r3
 8001706:	481c      	ldr	r0, [pc, #112]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 8001708:	f002 f912 	bl	8003930 <HAL_ADC_ConfigChannel>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 8001712:	f000 fbd1 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001716:	4b21      	ldr	r3, [pc, #132]	@ (800179c <MX_ADC1_Init+0x210>)
 8001718:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800171a:	f44f 7389 	mov.w	r3, #274	@ 0x112
 800171e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001720:	463b      	mov	r3, r7
 8001722:	4619      	mov	r1, r3
 8001724:	4814      	ldr	r0, [pc, #80]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 8001726:	f002 f903 	bl	8003930 <HAL_ADC_ConfigChannel>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001730:	f000 fbc2 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001734:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <MX_ADC1_Init+0x214>)
 8001736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001738:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800173c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800173e:	463b      	mov	r3, r7
 8001740:	4619      	mov	r1, r3
 8001742:	480d      	ldr	r0, [pc, #52]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 8001744:	f002 f8f4 	bl	8003930 <HAL_ADC_ConfigChannel>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
 800174e:	f000 fbb3 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001752:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <MX_ADC1_Init+0x218>)
 8001754:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001756:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800175a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800175c:	463b      	mov	r3, r7
 800175e:	4619      	mov	r1, r3
 8001760:	4805      	ldr	r0, [pc, #20]	@ (8001778 <MX_ADC1_Init+0x1ec>)
 8001762:	f002 f8e5 	bl	8003930 <HAL_ADC_ConfigChannel>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_ADC1_Init+0x1e4>
  {
    Error_Handler();
 800176c:	f000 fba4 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	3730      	adds	r7, #48	@ 0x30
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	24000080 	.word	0x24000080
 800177c:	40022000 	.word	0x40022000
 8001780:	08600004 	.word	0x08600004
 8001784:	0c900008 	.word	0x0c900008
 8001788:	10c00010 	.word	0x10c00010
 800178c:	14f00020 	.word	0x14f00020
 8001790:	19200040 	.word	0x19200040
 8001794:	1d500080 	.word	0x1d500080
 8001798:	21800100 	.word	0x21800100
 800179c:	25b00200 	.word	0x25b00200
 80017a0:	2a000400 	.word	0x2a000400
 80017a4:	2e300800 	.word	0x2e300800

080017a8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	@ 0x28
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	2224      	movs	r2, #36	@ 0x24
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f00e f875 	bl	800f8a4 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80017ba:	4b71      	ldr	r3, [pc, #452]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 80017bc:	4a71      	ldr	r2, [pc, #452]	@ (8001984 <MX_ADC3_Init+0x1dc>)
 80017be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80017c0:	4b6f      	ldr	r3, [pc, #444]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80017c6:	4b6e      	ldr	r3, [pc, #440]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 80017c8:	2208      	movs	r2, #8
 80017ca:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80017cc:	4b6c      	ldr	r3, [pc, #432]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80017d2:	4b6b      	ldr	r3, [pc, #428]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017d8:	4b69      	ldr	r3, [pc, #420]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 80017da:	2204      	movs	r2, #4
 80017dc:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80017de:	4b68      	ldr	r3, [pc, #416]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80017e4:	4b66      	ldr	r3, [pc, #408]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 10;
 80017ea:	4b65      	ldr	r3, [pc, #404]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 80017ec:	220a      	movs	r2, #10
 80017ee:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80017f0:	4b63      	ldr	r3, [pc, #396]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017f8:	4b61      	ldr	r3, [pc, #388]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017fe:	4b60      	ldr	r3, [pc, #384]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 8001800:	2200      	movs	r2, #0
 8001802:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001804:	4b5e      	ldr	r3, [pc, #376]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800180c:	4b5c      	ldr	r3, [pc, #368]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 800180e:	2200      	movs	r2, #0
 8001810:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001812:	4b5b      	ldr	r3, [pc, #364]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 8001814:	2203      	movs	r2, #3
 8001816:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001818:	4b59      	ldr	r3, [pc, #356]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 800181a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800181e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001820:	4b57      	ldr	r3, [pc, #348]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 8001822:	2200      	movs	r2, #0
 8001824:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001826:	4b56      	ldr	r3, [pc, #344]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800182e:	4854      	ldr	r0, [pc, #336]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 8001830:	f001 fb38 	bl	8002ea4 <HAL_ADC_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800183a:	f000 fb3d 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800183e:	2301      	movs	r3, #1
 8001840:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001842:	2306      	movs	r3, #6
 8001844:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_92CYCLES_5;
 8001846:	2305      	movs	r3, #5
 8001848:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800184a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800184e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001850:	2304      	movs	r3, #4
 8001852:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001858:	2300      	movs	r3, #0
 800185a:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	4619      	mov	r1, r3
 8001860:	4847      	ldr	r0, [pc, #284]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 8001862:	f002 f865 	bl	8003930 <HAL_ADC_ConfigChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 800186c:	f000 fb24 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001870:	4b45      	ldr	r3, [pc, #276]	@ (8001988 <MX_ADC3_Init+0x1e0>)
 8001872:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001874:	230c      	movs	r3, #12
 8001876:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	4619      	mov	r1, r3
 800187c:	4840      	ldr	r0, [pc, #256]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 800187e:	f002 f857 	bl	8003930 <HAL_ADC_ConfigChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 8001888:	f000 fb16 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800188c:	4b3f      	ldr	r3, [pc, #252]	@ (800198c <MX_ADC3_Init+0x1e4>)
 800188e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001890:	2312      	movs	r3, #18
 8001892:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	4619      	mov	r1, r3
 8001898:	4839      	ldr	r0, [pc, #228]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 800189a:	f002 f849 	bl	8003930 <HAL_ADC_ConfigChannel>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 80018a4:	f000 fb08 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80018a8:	4b39      	ldr	r3, [pc, #228]	@ (8001990 <MX_ADC3_Init+0x1e8>)
 80018aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80018ac:	2318      	movs	r3, #24
 80018ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	4619      	mov	r1, r3
 80018b4:	4832      	ldr	r0, [pc, #200]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 80018b6:	f002 f83b 	bl	8003930 <HAL_ADC_ConfigChannel>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 80018c0:	f000 fafa 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80018c4:	4b33      	ldr	r3, [pc, #204]	@ (8001994 <MX_ADC3_Init+0x1ec>)
 80018c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80018c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	4619      	mov	r1, r3
 80018d2:	482b      	ldr	r0, [pc, #172]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 80018d4:	f002 f82c 	bl	8003930 <HAL_ADC_ConfigChannel>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_ADC3_Init+0x13a>
  {
    Error_Handler();
 80018de:	f000 faeb 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80018e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001998 <MX_ADC3_Init+0x1f0>)
 80018e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80018e6:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80018ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4823      	ldr	r0, [pc, #140]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 80018f2:	f002 f81d 	bl	8003930 <HAL_ADC_ConfigChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_ADC3_Init+0x158>
  {
    Error_Handler();
 80018fc:	f000 fadc 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001900:	4b26      	ldr	r3, [pc, #152]	@ (800199c <MX_ADC3_Init+0x1f4>)
 8001902:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001904:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8001908:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	4619      	mov	r1, r3
 800190e:	481c      	ldr	r0, [pc, #112]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 8001910:	f002 f80e 	bl	8003930 <HAL_ADC_ConfigChannel>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_ADC3_Init+0x176>
  {
    Error_Handler();
 800191a:	f000 facd 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800191e:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <MX_ADC3_Init+0x1f8>)
 8001920:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001922:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8001926:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	4619      	mov	r1, r3
 800192c:	4814      	ldr	r0, [pc, #80]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 800192e:	f001 ffff 	bl	8003930 <HAL_ADC_ConfigChannel>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_ADC3_Init+0x194>
  {
    Error_Handler();
 8001938:	f000 fabe 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800193c:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <MX_ADC3_Init+0x1fc>)
 800193e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001940:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001944:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	4619      	mov	r1, r3
 800194a:	480d      	ldr	r0, [pc, #52]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 800194c:	f001 fff0 	bl	8003930 <HAL_ADC_ConfigChannel>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_ADC3_Init+0x1b2>
  {
    Error_Handler();
 8001956:	f000 faaf 	bl	8001eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800195a:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <MX_ADC3_Init+0x200>)
 800195c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800195e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001962:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	4619      	mov	r1, r3
 8001968:	4805      	ldr	r0, [pc, #20]	@ (8001980 <MX_ADC3_Init+0x1d8>)
 800196a:	f001 ffe1 	bl	8003930 <HAL_ADC_ConfigChannel>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_ADC3_Init+0x1d0>
  {
    Error_Handler();
 8001974:	f000 faa0 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	3728      	adds	r7, #40	@ 0x28
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	240000f0 	.word	0x240000f0
 8001984:	58026000 	.word	0x58026000
 8001988:	04300002 	.word	0x04300002
 800198c:	08600004 	.word	0x08600004
 8001990:	0c900008 	.word	0x0c900008
 8001994:	10c00010 	.word	0x10c00010
 8001998:	14f00020 	.word	0x14f00020
 800199c:	19200040 	.word	0x19200040
 80019a0:	1d500080 	.word	0x1d500080
 80019a4:	21800100 	.word	0x21800100
 80019a8:	25b00200 	.word	0x25b00200

080019ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019b0:	4b27      	ldr	r3, [pc, #156]	@ (8001a50 <MX_SPI1_Init+0xa4>)
 80019b2:	4a28      	ldr	r2, [pc, #160]	@ (8001a54 <MX_SPI1_Init+0xa8>)
 80019b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019b6:	4b26      	ldr	r3, [pc, #152]	@ (8001a50 <MX_SPI1_Init+0xa4>)
 80019b8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80019bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019be:	4b24      	ldr	r3, [pc, #144]	@ (8001a50 <MX_SPI1_Init+0xa4>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019c4:	4b22      	ldr	r3, [pc, #136]	@ (8001a50 <MX_SPI1_Init+0xa4>)
 80019c6:	2207      	movs	r2, #7
 80019c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ca:	4b21      	ldr	r3, [pc, #132]	@ (8001a50 <MX_SPI1_Init+0xa4>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a50 <MX_SPI1_Init+0xa4>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a50 <MX_SPI1_Init+0xa4>)
 80019d8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80019dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019de:	4b1c      	ldr	r3, [pc, #112]	@ (8001a50 <MX_SPI1_Init+0xa4>)
 80019e0:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80019e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a50 <MX_SPI1_Init+0xa4>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019ec:	4b18      	ldr	r3, [pc, #96]	@ (8001a50 <MX_SPI1_Init+0xa4>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019f2:	4b17      	ldr	r3, [pc, #92]	@ (8001a50 <MX_SPI1_Init+0xa4>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80019f8:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <MX_SPI1_Init+0xa4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019fe:	4b14      	ldr	r3, [pc, #80]	@ (8001a50 <MX_SPI1_Init+0xa4>)
 8001a00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a04:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a06:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <MX_SPI1_Init+0xa4>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a0c:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <MX_SPI1_Init+0xa4>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a12:	4b0f      	ldr	r3, [pc, #60]	@ (8001a50 <MX_SPI1_Init+0xa4>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a18:	4b0d      	ldr	r3, [pc, #52]	@ (8001a50 <MX_SPI1_Init+0xa4>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <MX_SPI1_Init+0xa4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <MX_SPI1_Init+0xa4>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001a2a:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <MX_SPI1_Init+0xa4>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001a30:	4b07      	ldr	r3, [pc, #28]	@ (8001a50 <MX_SPI1_Init+0xa4>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001a36:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <MX_SPI1_Init+0xa4>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a3c:	4804      	ldr	r0, [pc, #16]	@ (8001a50 <MX_SPI1_Init+0xa4>)
 8001a3e:	f009 fcb1 	bl	800b3a4 <HAL_SPI_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001a48:	f000 fa36 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	24000250 	.word	0x24000250
 8001a54:	40013000 	.word	0x40013000

08001a58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	@ 0x28
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a5e:	f107 031c 	add.w	r3, r7, #28
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
 8001a78:	615a      	str	r2, [r3, #20]
 8001a7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a7c:	4b27      	ldr	r3, [pc, #156]	@ (8001b1c <MX_TIM2_Init+0xc4>)
 8001a7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8001a84:	4b25      	ldr	r3, [pc, #148]	@ (8001b1c <MX_TIM2_Init+0xc4>)
 8001a86:	2240      	movs	r2, #64	@ 0x40
 8001a88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8a:	4b24      	ldr	r3, [pc, #144]	@ (8001b1c <MX_TIM2_Init+0xc4>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001a90:	4b22      	ldr	r3, [pc, #136]	@ (8001b1c <MX_TIM2_Init+0xc4>)
 8001a92:	22ff      	movs	r2, #255	@ 0xff
 8001a94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a96:	4b21      	ldr	r3, [pc, #132]	@ (8001b1c <MX_TIM2_Init+0xc4>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b1c <MX_TIM2_Init+0xc4>)
 8001a9e:	2280      	movs	r2, #128	@ 0x80
 8001aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001aa2:	481e      	ldr	r0, [pc, #120]	@ (8001b1c <MX_TIM2_Init+0xc4>)
 8001aa4:	f00a faf9 	bl	800c09a <HAL_TIM_PWM_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001aae:	f000 fa03 	bl	8001eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aba:	f107 031c 	add.w	r3, r7, #28
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4816      	ldr	r0, [pc, #88]	@ (8001b1c <MX_TIM2_Init+0xc4>)
 8001ac2:	f00b f91f 	bl	800cd04 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001acc:	f000 f9f4 	bl	8001eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ad0:	2360      	movs	r3, #96	@ 0x60
 8001ad2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001adc:	2304      	movs	r3, #4
 8001ade:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	480d      	ldr	r0, [pc, #52]	@ (8001b1c <MX_TIM2_Init+0xc4>)
 8001ae8:	f00a fc4a 	bl	800c380 <HAL_TIM_PWM_ConfigChannel>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001af2:	f000 f9e1 	bl	8001eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001af6:	463b      	mov	r3, r7
 8001af8:	2204      	movs	r2, #4
 8001afa:	4619      	mov	r1, r3
 8001afc:	4807      	ldr	r0, [pc, #28]	@ (8001b1c <MX_TIM2_Init+0xc4>)
 8001afe:	f00a fc3f 	bl	800c380 <HAL_TIM_PWM_ConfigChannel>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b08:	f000 f9d6 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b0c:	4803      	ldr	r0, [pc, #12]	@ (8001b1c <MX_TIM2_Init+0xc4>)
 8001b0e:	f000 fc3f 	bl	8002390 <HAL_TIM_MspPostInit>

}
 8001b12:	bf00      	nop
 8001b14:	3728      	adds	r7, #40	@ 0x28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	240002d8 	.word	0x240002d8

08001b20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b24:	4b22      	ldr	r3, [pc, #136]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b26:	4a23      	ldr	r2, [pc, #140]	@ (8001bb4 <MX_USART1_UART_Init+0x94>)
 8001b28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b2a:	4b21      	ldr	r3, [pc, #132]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b32:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b38:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b44:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b46:	220c      	movs	r2, #12
 8001b48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4a:	4b19      	ldr	r3, [pc, #100]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b50:	4b17      	ldr	r3, [pc, #92]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b56:	4b16      	ldr	r3, [pc, #88]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b5c:	4b14      	ldr	r3, [pc, #80]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b62:	4b13      	ldr	r3, [pc, #76]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b68:	4811      	ldr	r0, [pc, #68]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b6a:	f00b f967 	bl	800ce3c <HAL_UART_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b74:	f000 f9a0 	bl	8001eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b78:	2100      	movs	r1, #0
 8001b7a:	480d      	ldr	r0, [pc, #52]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b7c:	f00d fd77 	bl	800f66e <HAL_UARTEx_SetTxFifoThreshold>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b86:	f000 f997 	bl	8001eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4808      	ldr	r0, [pc, #32]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b8e:	f00d fdac 	bl	800f6ea <HAL_UARTEx_SetRxFifoThreshold>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b98:	f000 f98e 	bl	8001eb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b9c:	4804      	ldr	r0, [pc, #16]	@ (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b9e:	f00d fd2d 	bl	800f5fc <HAL_UARTEx_DisableFifoMode>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ba8:	f000 f986 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	24000324 	.word	0x24000324
 8001bb4:	40011000 	.word	0x40011000

08001bb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bbe:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <MX_DMA_Init+0x4c>)
 8001bc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001bc4:	4a0f      	ldr	r2, [pc, #60]	@ (8001c04 <MX_DMA_Init+0x4c>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001bce:	4b0d      	ldr	r3, [pc, #52]	@ (8001c04 <MX_DMA_Init+0x4c>)
 8001bd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2100      	movs	r1, #0
 8001be0:	200b      	movs	r0, #11
 8001be2:	f002 fff6 	bl	8004bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001be6:	200b      	movs	r0, #11
 8001be8:	f003 f80d 	bl	8004c06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2100      	movs	r1, #0
 8001bf0:	200c      	movs	r0, #12
 8001bf2:	f002 ffee 	bl	8004bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001bf6:	200c      	movs	r0, #12
 8001bf8:	f003 f805 	bl	8004c06 <HAL_NVIC_EnableIRQ>

}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	58024400 	.word	0x58024400

08001c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08e      	sub	sp, #56	@ 0x38
 8001c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]
 8001c1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c1e:	4b9f      	ldr	r3, [pc, #636]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c24:	4a9d      	ldr	r2, [pc, #628]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001c26:	f043 0310 	orr.w	r3, r3, #16
 8001c2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c2e:	4b9b      	ldr	r3, [pc, #620]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c34:	f003 0310 	and.w	r3, r3, #16
 8001c38:	623b      	str	r3, [r7, #32]
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3c:	4b97      	ldr	r3, [pc, #604]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c42:	4a96      	ldr	r2, [pc, #600]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001c44:	f043 0304 	orr.w	r3, r3, #4
 8001c48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c4c:	4b93      	ldr	r3, [pc, #588]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c5a:	4b90      	ldr	r3, [pc, #576]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c60:	4a8e      	ldr	r2, [pc, #568]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001c62:	f043 0320 	orr.w	r3, r3, #32
 8001c66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c6a:	4b8c      	ldr	r3, [pc, #560]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c70:	f003 0320 	and.w	r3, r3, #32
 8001c74:	61bb      	str	r3, [r7, #24]
 8001c76:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c78:	4b88      	ldr	r3, [pc, #544]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c7e:	4a87      	ldr	r2, [pc, #540]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001c80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c88:	4b84      	ldr	r3, [pc, #528]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	4b81      	ldr	r3, [pc, #516]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c9c:	4a7f      	ldr	r2, [pc, #508]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ca6:	4b7d      	ldr	r3, [pc, #500]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb4:	4b79      	ldr	r3, [pc, #484]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cba:	4a78      	ldr	r2, [pc, #480]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001cbc:	f043 0302 	orr.w	r3, r3, #2
 8001cc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cc4:	4b75      	ldr	r3, [pc, #468]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cd2:	4b72      	ldr	r3, [pc, #456]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cd8:	4a70      	ldr	r2, [pc, #448]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001cda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ce2:	4b6e      	ldr	r3, [pc, #440]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cf0:	4b6a      	ldr	r3, [pc, #424]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf6:	4a69      	ldr	r2, [pc, #420]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001cf8:	f043 0308 	orr.w	r3, r3, #8
 8001cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d00:	4b66      	ldr	r3, [pc, #408]	@ (8001e9c <MX_GPIO_Init+0x294>)
 8001d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d14:	4862      	ldr	r0, [pc, #392]	@ (8001ea0 <MX_GPIO_Init+0x298>)
 8001d16:	f005 ff71 	bl	8007bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN3_Pin|IN4_Pin|IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	213c      	movs	r1, #60	@ 0x3c
 8001d1e:	4861      	ldr	r0, [pc, #388]	@ (8001ea4 <MX_GPIO_Init+0x29c>)
 8001d20:	f005 ff6c 	bl	8007bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001d24:	2200      	movs	r2, #0
 8001d26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d2a:	485f      	ldr	r0, [pc, #380]	@ (8001ea8 <MX_GPIO_Init+0x2a0>)
 8001d2c:	f005 ff66 	bl	8007bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 8001d30:	2200      	movs	r2, #0
 8001d32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d36:	485d      	ldr	r0, [pc, #372]	@ (8001eac <MX_GPIO_Init+0x2a4>)
 8001d38:	f005 ff60 	bl	8007bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|LORA_TX_LED_Pin, GPIO_PIN_RESET);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001d42:	485b      	ldr	r0, [pc, #364]	@ (8001eb0 <MX_GPIO_Init+0x2a8>)
 8001d44:	f005 ff5a 	bl	8007bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RX_LED_GPIO_Port, LORA_RX_LED_Pin, GPIO_PIN_SET);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2140      	movs	r1, #64	@ 0x40
 8001d4c:	4859      	ldr	r0, [pc, #356]	@ (8001eb4 <MX_GPIO_Init+0x2ac>)
 8001d4e:	f005 ff55 	bl	8007bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LORA_NSS_Pin|LORA_RST_Pin, GPIO_PIN_SET);
 8001d52:	2201      	movs	r2, #1
 8001d54:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001d58:	4855      	ldr	r0, [pc, #340]	@ (8001eb0 <MX_GPIO_Init+0x2a8>)
 8001d5a:	f005 ff4f 	bl	8007bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_0
 8001d5e:	231f      	movs	r3, #31
 8001d60:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d62:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d70:	4619      	mov	r1, r3
 8001d72:	484d      	ldr	r0, [pc, #308]	@ (8001ea8 <MX_GPIO_Init+0x2a0>)
 8001d74:	f005 fd9a 	bl	80078ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d86:	2300      	movs	r3, #0
 8001d88:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4843      	ldr	r0, [pc, #268]	@ (8001ea0 <MX_GPIO_Init+0x298>)
 8001d92:	f005 fd8b 	bl	80078ac <HAL_GPIO_Init>

  /*Configure GPIO pins : IN3_Pin IN4_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin|IN2_Pin|IN1_Pin;
 8001d96:	233c      	movs	r3, #60	@ 0x3c
 8001d98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001daa:	4619      	mov	r1, r3
 8001dac:	483d      	ldr	r0, [pc, #244]	@ (8001ea4 <MX_GPIO_Init+0x29c>)
 8001dae:	f005 fd7d 	bl	80078ac <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001db2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001db6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db8:	2301      	movs	r3, #1
 8001dba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001dc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4837      	ldr	r0, [pc, #220]	@ (8001ea8 <MX_GPIO_Init+0x2a0>)
 8001dcc:	f005 fd6e 	bl	80078ac <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 8001dd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 8001de2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001de6:	4619      	mov	r1, r3
 8001de8:	4830      	ldr	r0, [pc, #192]	@ (8001eac <MX_GPIO_Init+0x2a4>)
 8001dea:	f005 fd5f 	bl	80078ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 LORA_NSS_Pin LORA_RST_Pin LORA_TX_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|LORA_NSS_Pin|LORA_RST_Pin|LORA_TX_LED_Pin;
 8001dee:	f44f 43a9 	mov.w	r3, #21632	@ 0x5480
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df4:	2301      	movs	r3, #1
 8001df6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e04:	4619      	mov	r1, r3
 8001e06:	482a      	ldr	r0, [pc, #168]	@ (8001eb0 <MX_GPIO_Init+0x2a8>)
 8001e08:	f005 fd50 	bl	80078ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RX_LED_Pin */
  GPIO_InitStruct.Pin = LORA_RX_LED_Pin;
 8001e0c:	2340      	movs	r3, #64	@ 0x40
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e10:	2301      	movs	r3, #1
 8001e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LORA_RX_LED_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e20:	4619      	mov	r1, r3
 8001e22:	4824      	ldr	r0, [pc, #144]	@ (8001eb4 <MX_GPIO_Init+0x2ac>)
 8001e24:	f005 fd42 	bl	80078ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO0_Pin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 8001e28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e2e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 8001e38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	481c      	ldr	r0, [pc, #112]	@ (8001eb0 <MX_GPIO_Init+0x2a8>)
 8001e40:	f005 fd34 	bl	80078ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e44:	2200      	movs	r2, #0
 8001e46:	2100      	movs	r1, #0
 8001e48:	2006      	movs	r0, #6
 8001e4a:	f002 fec2 	bl	8004bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e4e:	2006      	movs	r0, #6
 8001e50:	f002 fed9 	bl	8004c06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001e54:	2200      	movs	r2, #0
 8001e56:	2100      	movs	r1, #0
 8001e58:	2007      	movs	r0, #7
 8001e5a:	f002 feba 	bl	8004bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001e5e:	2007      	movs	r0, #7
 8001e60:	f002 fed1 	bl	8004c06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001e64:	2200      	movs	r2, #0
 8001e66:	2100      	movs	r1, #0
 8001e68:	2008      	movs	r0, #8
 8001e6a:	f002 feb2 	bl	8004bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001e6e:	2008      	movs	r0, #8
 8001e70:	f002 fec9 	bl	8004c06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001e74:	2200      	movs	r2, #0
 8001e76:	2100      	movs	r1, #0
 8001e78:	2009      	movs	r0, #9
 8001e7a:	f002 feaa 	bl	8004bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001e7e:	2009      	movs	r0, #9
 8001e80:	f002 fec1 	bl	8004c06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e84:	2200      	movs	r2, #0
 8001e86:	2100      	movs	r1, #0
 8001e88:	2028      	movs	r0, #40	@ 0x28
 8001e8a:	f002 fea2 	bl	8004bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e8e:	2028      	movs	r0, #40	@ 0x28
 8001e90:	f002 feb9 	bl	8004c06 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e94:	bf00      	nop
 8001e96:	3738      	adds	r7, #56	@ 0x38
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	58024400 	.word	0x58024400
 8001ea0:	58020800 	.word	0x58020800
 8001ea4:	58020000 	.word	0x58020000
 8001ea8:	58021000 	.word	0x58021000
 8001eac:	58020400 	.word	0x58020400
 8001eb0:	58021800 	.word	0x58021800
 8001eb4:	58020c00 	.word	0x58020c00

08001eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ebc:	b672      	cpsid	i
}
 8001ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ec0:	bf00      	nop
 8001ec2:	e7fd      	b.n	8001ec0 <Error_Handler+0x8>

08001ec4 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8001ed0:	23ff      	movs	r3, #255	@ 0xff
 8001ed2:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8001ed4:	23ff      	movs	r3, #255	@ 0xff
 8001ed6:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8001ed8:	e013      	b.n	8001f02 <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	781a      	ldrb	r2, [r3, #0]
 8001ee2:	7bbb      	ldrb	r3, [r7, #14]
 8001ee4:	4053      	eors	r3, r2
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8001eea:	4a0f      	ldr	r2, [pc, #60]	@ (8001f28 <crc16+0x64>)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4413      	add	r3, r2
 8001ef0:	781a      	ldrb	r2, [r3, #0]
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	4053      	eors	r3, r2
 8001ef6:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8001ef8:	4a0c      	ldr	r2, [pc, #48]	@ (8001f2c <crc16+0x68>)
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	4413      	add	r3, r2
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8001f02:	887b      	ldrh	r3, [r7, #2]
 8001f04:	1e5a      	subs	r2, r3, #1
 8001f06:	807a      	strh	r2, [r7, #2]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1e6      	bne.n	8001eda <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	b21a      	sxth	r2, r3
 8001f12:	7bbb      	ldrb	r3, [r7, #14]
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	4313      	orrs	r3, r2
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	b29b      	uxth	r3, r3
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	0800f980 	.word	0x0800f980
 8001f2c:	0800fa80 	.word	0x0800fa80

08001f30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f36:	4b0a      	ldr	r3, [pc, #40]	@ (8001f60 <HAL_MspInit+0x30>)
 8001f38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f3c:	4a08      	ldr	r2, [pc, #32]	@ (8001f60 <HAL_MspInit+0x30>)
 8001f3e:	f043 0302 	orr.w	r3, r3, #2
 8001f42:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f46:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <HAL_MspInit+0x30>)
 8001f48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	58024400 	.word	0x58024400

08001f64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b090      	sub	sp, #64	@ 0x40
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4aa0      	ldr	r2, [pc, #640]	@ (8002204 <HAL_ADC_MspInit+0x2a0>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	f040 80b6 	bne.w	80020f4 <HAL_ADC_MspInit+0x190>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001f88:	4b9f      	ldr	r3, [pc, #636]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 8001f8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f8e:	4a9e      	ldr	r2, [pc, #632]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 8001f90:	f043 0320 	orr.w	r3, r3, #32
 8001f94:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001f98:	4b9b      	ldr	r3, [pc, #620]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 8001f9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f9e:	f003 0320 	and.w	r3, r3, #32
 8001fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa6:	4b98      	ldr	r3, [pc, #608]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 8001fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fac:	4a96      	ldr	r2, [pc, #600]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 8001fae:	f043 0304 	orr.w	r3, r3, #4
 8001fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fb6:	4b94      	ldr	r3, [pc, #592]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 8001fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc4:	4b90      	ldr	r3, [pc, #576]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 8001fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fca:	4a8f      	ldr	r2, [pc, #572]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fd4:	4b8c      	ldr	r3, [pc, #560]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 8001fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	623b      	str	r3, [r7, #32]
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	4b89      	ldr	r3, [pc, #548]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 8001fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fe8:	4a87      	ldr	r2, [pc, #540]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 8001fea:	f043 0302 	orr.w	r3, r3, #2
 8001fee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ff2:	4b85      	ldr	r3, [pc, #532]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 8001ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002000:	4b81      	ldr	r3, [pc, #516]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 8002002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002006:	4a80      	ldr	r2, [pc, #512]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 8002008:	f043 0320 	orr.w	r3, r3, #32
 800200c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002010:	4b7d      	ldr	r3, [pc, #500]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 8002012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	69bb      	ldr	r3, [r7, #24]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800201e:	2333      	movs	r3, #51	@ 0x33
 8002020:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002022:	2303      	movs	r3, #3
 8002024:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800202e:	4619      	mov	r1, r3
 8002030:	4876      	ldr	r0, [pc, #472]	@ (800220c <HAL_ADC_MspInit+0x2a8>)
 8002032:	f005 fc3b 	bl	80078ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002036:	23c0      	movs	r3, #192	@ 0xc0
 8002038:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800203a:	2303      	movs	r3, #3
 800203c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002042:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002046:	4619      	mov	r1, r3
 8002048:	4871      	ldr	r0, [pc, #452]	@ (8002210 <HAL_ADC_MspInit+0x2ac>)
 800204a:	f005 fc2f 	bl	80078ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800204e:	2303      	movs	r3, #3
 8002050:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002052:	2303      	movs	r3, #3
 8002054:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800205e:	4619      	mov	r1, r3
 8002060:	486c      	ldr	r0, [pc, #432]	@ (8002214 <HAL_ADC_MspInit+0x2b0>)
 8002062:	f005 fc23 	bl	80078ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002066:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800206a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800206c:	2303      	movs	r3, #3
 800206e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002074:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002078:	4619      	mov	r1, r3
 800207a:	4867      	ldr	r0, [pc, #412]	@ (8002218 <HAL_ADC_MspInit+0x2b4>)
 800207c:	f005 fc16 	bl	80078ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002080:	4b66      	ldr	r3, [pc, #408]	@ (800221c <HAL_ADC_MspInit+0x2b8>)
 8002082:	4a67      	ldr	r2, [pc, #412]	@ (8002220 <HAL_ADC_MspInit+0x2bc>)
 8002084:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002086:	4b65      	ldr	r3, [pc, #404]	@ (800221c <HAL_ADC_MspInit+0x2b8>)
 8002088:	2209      	movs	r2, #9
 800208a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800208c:	4b63      	ldr	r3, [pc, #396]	@ (800221c <HAL_ADC_MspInit+0x2b8>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002092:	4b62      	ldr	r3, [pc, #392]	@ (800221c <HAL_ADC_MspInit+0x2b8>)
 8002094:	2200      	movs	r2, #0
 8002096:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002098:	4b60      	ldr	r3, [pc, #384]	@ (800221c <HAL_ADC_MspInit+0x2b8>)
 800209a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800209e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020a0:	4b5e      	ldr	r3, [pc, #376]	@ (800221c <HAL_ADC_MspInit+0x2b8>)
 80020a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020a6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020a8:	4b5c      	ldr	r3, [pc, #368]	@ (800221c <HAL_ADC_MspInit+0x2b8>)
 80020aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020ae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020b0:	4b5a      	ldr	r3, [pc, #360]	@ (800221c <HAL_ADC_MspInit+0x2b8>)
 80020b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020b6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80020b8:	4b58      	ldr	r3, [pc, #352]	@ (800221c <HAL_ADC_MspInit+0x2b8>)
 80020ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020be:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020c0:	4b56      	ldr	r3, [pc, #344]	@ (800221c <HAL_ADC_MspInit+0x2b8>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020c6:	4855      	ldr	r0, [pc, #340]	@ (800221c <HAL_ADC_MspInit+0x2b8>)
 80020c8:	f002 fdb8 	bl	8004c3c <HAL_DMA_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_ADC_MspInit+0x172>
    {
      Error_Handler();
 80020d2:	f7ff fef1 	bl	8001eb8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a50      	ldr	r2, [pc, #320]	@ (800221c <HAL_ADC_MspInit+0x2b8>)
 80020da:	659a      	str	r2, [r3, #88]	@ 0x58
 80020dc:	4a4f      	ldr	r2, [pc, #316]	@ (800221c <HAL_ADC_MspInit+0x2b8>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	2012      	movs	r0, #18
 80020e8:	f002 fd73 	bl	8004bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80020ec:	2012      	movs	r0, #18
 80020ee:	f002 fd8a 	bl	8004c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80020f2:	e083      	b.n	80021fc <HAL_ADC_MspInit+0x298>
  else if(hadc->Instance==ADC3)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a4a      	ldr	r2, [pc, #296]	@ (8002224 <HAL_ADC_MspInit+0x2c0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d17e      	bne.n	80021fc <HAL_ADC_MspInit+0x298>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80020fe:	4b42      	ldr	r3, [pc, #264]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 8002100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002104:	4a40      	ldr	r2, [pc, #256]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 8002106:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800210a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800210e:	4b3e      	ldr	r3, [pc, #248]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 8002110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002114:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800211c:	4b3a      	ldr	r3, [pc, #232]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 800211e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002122:	4a39      	ldr	r2, [pc, #228]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 8002124:	f043 0320 	orr.w	r3, r3, #32
 8002128:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800212c:	4b36      	ldr	r3, [pc, #216]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 800212e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002132:	f003 0320 	and.w	r3, r3, #32
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800213a:	4b33      	ldr	r3, [pc, #204]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 800213c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002140:	4a31      	ldr	r2, [pc, #196]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 8002142:	f043 0304 	orr.w	r3, r3, #4
 8002146:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800214a:	4b2f      	ldr	r3, [pc, #188]	@ (8002208 <HAL_ADC_MspInit+0x2a4>)
 800214c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002158:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 800215c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800215e:	2303      	movs	r3, #3
 8002160:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002166:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800216a:	4619      	mov	r1, r3
 800216c:	482a      	ldr	r0, [pc, #168]	@ (8002218 <HAL_ADC_MspInit+0x2b4>)
 800216e:	f005 fb9d 	bl	80078ac <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002172:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8002176:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800217a:	f000 fb91 	bl	80028a0 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800217e:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8002182:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002186:	f000 fb8b 	bl	80028a0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 800218a:	4b27      	ldr	r3, [pc, #156]	@ (8002228 <HAL_ADC_MspInit+0x2c4>)
 800218c:	4a27      	ldr	r2, [pc, #156]	@ (800222c <HAL_ADC_MspInit+0x2c8>)
 800218e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002190:	4b25      	ldr	r3, [pc, #148]	@ (8002228 <HAL_ADC_MspInit+0x2c4>)
 8002192:	2273      	movs	r2, #115	@ 0x73
 8002194:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002196:	4b24      	ldr	r3, [pc, #144]	@ (8002228 <HAL_ADC_MspInit+0x2c4>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800219c:	4b22      	ldr	r3, [pc, #136]	@ (8002228 <HAL_ADC_MspInit+0x2c4>)
 800219e:	2200      	movs	r2, #0
 80021a0:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80021a2:	4b21      	ldr	r3, [pc, #132]	@ (8002228 <HAL_ADC_MspInit+0x2c4>)
 80021a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021a8:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002228 <HAL_ADC_MspInit+0x2c4>)
 80021ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021b0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002228 <HAL_ADC_MspInit+0x2c4>)
 80021b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021b8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80021ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002228 <HAL_ADC_MspInit+0x2c4>)
 80021bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021c0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 80021c2:	4b19      	ldr	r3, [pc, #100]	@ (8002228 <HAL_ADC_MspInit+0x2c4>)
 80021c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021c8:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021ca:	4b17      	ldr	r3, [pc, #92]	@ (8002228 <HAL_ADC_MspInit+0x2c4>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80021d0:	4815      	ldr	r0, [pc, #84]	@ (8002228 <HAL_ADC_MspInit+0x2c4>)
 80021d2:	f002 fd33 	bl	8004c3c <HAL_DMA_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_ADC_MspInit+0x27c>
      Error_Handler();
 80021dc:	f7ff fe6c 	bl	8001eb8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a11      	ldr	r2, [pc, #68]	@ (8002228 <HAL_ADC_MspInit+0x2c4>)
 80021e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80021e6:	4a10      	ldr	r2, [pc, #64]	@ (8002228 <HAL_ADC_MspInit+0x2c4>)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80021ec:	2200      	movs	r2, #0
 80021ee:	2100      	movs	r1, #0
 80021f0:	207f      	movs	r0, #127	@ 0x7f
 80021f2:	f002 fcee 	bl	8004bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80021f6:	207f      	movs	r0, #127	@ 0x7f
 80021f8:	f002 fd05 	bl	8004c06 <HAL_NVIC_EnableIRQ>
}
 80021fc:	bf00      	nop
 80021fe:	3740      	adds	r7, #64	@ 0x40
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40022000 	.word	0x40022000
 8002208:	58024400 	.word	0x58024400
 800220c:	58020800 	.word	0x58020800
 8002210:	58020000 	.word	0x58020000
 8002214:	58020400 	.word	0x58020400
 8002218:	58021400 	.word	0x58021400
 800221c:	24000160 	.word	0x24000160
 8002220:	40020010 	.word	0x40020010
 8002224:	58026000 	.word	0x58026000
 8002228:	240001d8 	.word	0x240001d8
 800222c:	40020028 	.word	0x40020028

08002230 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b0ba      	sub	sp, #232	@ 0xe8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002248:	f107 0318 	add.w	r3, r7, #24
 800224c:	22b8      	movs	r2, #184	@ 0xb8
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f00d fb27 	bl	800f8a4 <memset>
  if(hspi->Instance==SPI1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a39      	ldr	r2, [pc, #228]	@ (8002340 <HAL_SPI_MspInit+0x110>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d16a      	bne.n	8002336 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002260:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800226c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002270:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002272:	f107 0318 	add.w	r3, r7, #24
 8002276:	4618      	mov	r0, r3
 8002278:	f006 fcae 	bl	8008bd8 <HAL_RCCEx_PeriphCLKConfig>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002282:	f7ff fe19 	bl	8001eb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002286:	4b2f      	ldr	r3, [pc, #188]	@ (8002344 <HAL_SPI_MspInit+0x114>)
 8002288:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800228c:	4a2d      	ldr	r2, [pc, #180]	@ (8002344 <HAL_SPI_MspInit+0x114>)
 800228e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002292:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002296:	4b2b      	ldr	r3, [pc, #172]	@ (8002344 <HAL_SPI_MspInit+0x114>)
 8002298:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800229c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022a4:	4b27      	ldr	r3, [pc, #156]	@ (8002344 <HAL_SPI_MspInit+0x114>)
 80022a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022aa:	4a26      	ldr	r2, [pc, #152]	@ (8002344 <HAL_SPI_MspInit+0x114>)
 80022ac:	f043 0308 	orr.w	r3, r3, #8
 80022b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022b4:	4b23      	ldr	r3, [pc, #140]	@ (8002344 <HAL_SPI_MspInit+0x114>)
 80022b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022c2:	4b20      	ldr	r3, [pc, #128]	@ (8002344 <HAL_SPI_MspInit+0x114>)
 80022c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002344 <HAL_SPI_MspInit+0x114>)
 80022ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002344 <HAL_SPI_MspInit+0x114>)
 80022d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022e0:	2380      	movs	r3, #128	@ 0x80
 80022e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e6:	2302      	movs	r3, #2
 80022e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022f8:	2305      	movs	r3, #5
 80022fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022fe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002302:	4619      	mov	r1, r3
 8002304:	4810      	ldr	r0, [pc, #64]	@ (8002348 <HAL_SPI_MspInit+0x118>)
 8002306:	f005 fad1 	bl	80078ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800230a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800230e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002324:	2305      	movs	r3, #5
 8002326:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800232a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800232e:	4619      	mov	r1, r3
 8002330:	4806      	ldr	r0, [pc, #24]	@ (800234c <HAL_SPI_MspInit+0x11c>)
 8002332:	f005 fabb 	bl	80078ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002336:	bf00      	nop
 8002338:	37e8      	adds	r7, #232	@ 0xe8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40013000 	.word	0x40013000
 8002344:	58024400 	.word	0x58024400
 8002348:	58020c00 	.word	0x58020c00
 800234c:	58021800 	.word	0x58021800

08002350 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002360:	d10e      	bne.n	8002380 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002362:	4b0a      	ldr	r3, [pc, #40]	@ (800238c <HAL_TIM_PWM_MspInit+0x3c>)
 8002364:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002368:	4a08      	ldr	r2, [pc, #32]	@ (800238c <HAL_TIM_PWM_MspInit+0x3c>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002372:	4b06      	ldr	r3, [pc, #24]	@ (800238c <HAL_TIM_PWM_MspInit+0x3c>)
 8002374:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	58024400 	.word	0x58024400

08002390 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 030c 	add.w	r3, r7, #12
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023b0:	d11e      	bne.n	80023f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b2:	4b11      	ldr	r3, [pc, #68]	@ (80023f8 <HAL_TIM_MspPostInit+0x68>)
 80023b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023b8:	4a0f      	ldr	r2, [pc, #60]	@ (80023f8 <HAL_TIM_MspPostInit+0x68>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023c2:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <HAL_TIM_MspPostInit+0x68>)
 80023c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023d0:	2303      	movs	r3, #3
 80023d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d4:	2302      	movs	r3, #2
 80023d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023dc:	2300      	movs	r3, #0
 80023de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023e0:	2301      	movs	r3, #1
 80023e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e4:	f107 030c 	add.w	r3, r7, #12
 80023e8:	4619      	mov	r1, r3
 80023ea:	4804      	ldr	r0, [pc, #16]	@ (80023fc <HAL_TIM_MspPostInit+0x6c>)
 80023ec:	f005 fa5e 	bl	80078ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80023f0:	bf00      	nop
 80023f2:	3720      	adds	r7, #32
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	58024400 	.word	0x58024400
 80023fc:	58020000 	.word	0x58020000

08002400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b0b8      	sub	sp, #224	@ 0xe0
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002408:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002418:	f107 0310 	add.w	r3, r7, #16
 800241c:	22b8      	movs	r2, #184	@ 0xb8
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f00d fa3f 	bl	800f8a4 <memset>
  if(huart->Instance==USART1)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a2b      	ldr	r2, [pc, #172]	@ (80024d8 <HAL_UART_MspInit+0xd8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d14e      	bne.n	80024ce <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002430:	f04f 0201 	mov.w	r2, #1
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800243c:	2300      	movs	r3, #0
 800243e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002442:	f107 0310 	add.w	r3, r7, #16
 8002446:	4618      	mov	r0, r3
 8002448:	f006 fbc6 	bl	8008bd8 <HAL_RCCEx_PeriphCLKConfig>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002452:	f7ff fd31 	bl	8001eb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002456:	4b21      	ldr	r3, [pc, #132]	@ (80024dc <HAL_UART_MspInit+0xdc>)
 8002458:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800245c:	4a1f      	ldr	r2, [pc, #124]	@ (80024dc <HAL_UART_MspInit+0xdc>)
 800245e:	f043 0310 	orr.w	r3, r3, #16
 8002462:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002466:	4b1d      	ldr	r3, [pc, #116]	@ (80024dc <HAL_UART_MspInit+0xdc>)
 8002468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002474:	4b19      	ldr	r3, [pc, #100]	@ (80024dc <HAL_UART_MspInit+0xdc>)
 8002476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800247a:	4a18      	ldr	r2, [pc, #96]	@ (80024dc <HAL_UART_MspInit+0xdc>)
 800247c:	f043 0302 	orr.w	r3, r3, #2
 8002480:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002484:	4b15      	ldr	r3, [pc, #84]	@ (80024dc <HAL_UART_MspInit+0xdc>)
 8002486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002492:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002496:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249a:	2302      	movs	r3, #2
 800249c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80024ac:	2304      	movs	r3, #4
 80024ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80024b6:	4619      	mov	r1, r3
 80024b8:	4809      	ldr	r0, [pc, #36]	@ (80024e0 <HAL_UART_MspInit+0xe0>)
 80024ba:	f005 f9f7 	bl	80078ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024be:	2200      	movs	r2, #0
 80024c0:	2100      	movs	r1, #0
 80024c2:	2025      	movs	r0, #37	@ 0x25
 80024c4:	f002 fb85 	bl	8004bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024c8:	2025      	movs	r0, #37	@ 0x25
 80024ca:	f002 fb9c 	bl	8004c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024ce:	bf00      	nop
 80024d0:	37e0      	adds	r7, #224	@ 0xe0
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40011000 	.word	0x40011000
 80024dc:	58024400 	.word	0x58024400
 80024e0:	58020400 	.word	0x58020400

080024e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024e8:	bf00      	nop
 80024ea:	e7fd      	b.n	80024e8 <NMI_Handler+0x4>

080024ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024f0:	bf00      	nop
 80024f2:	e7fd      	b.n	80024f0 <HardFault_Handler+0x4>

080024f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f8:	bf00      	nop
 80024fa:	e7fd      	b.n	80024f8 <MemManage_Handler+0x4>

080024fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002500:	bf00      	nop
 8002502:	e7fd      	b.n	8002500 <BusFault_Handler+0x4>

08002504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002508:	bf00      	nop
 800250a:	e7fd      	b.n	8002508 <UsageFault_Handler+0x4>

0800250c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800253a:	f000 f96d 	bl	8002818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}

08002542 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002546:	2001      	movs	r0, #1
 8002548:	f005 fb8b 	bl	8007c62 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800254c:	bf00      	nop
 800254e:	bd80      	pop	{r7, pc}

08002550 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002554:	2002      	movs	r0, #2
 8002556:	f005 fb84 	bl	8007c62 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}

0800255e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002562:	2004      	movs	r0, #4
 8002564:	f005 fb7d 	bl	8007c62 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}

0800256c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002570:	2008      	movs	r0, #8
 8002572:	f005 fb76 	bl	8007c62 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002580:	4802      	ldr	r0, [pc, #8]	@ (800258c <DMA1_Stream0_IRQHandler+0x10>)
 8002582:	f003 fe81 	bl	8006288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	24000160 	.word	0x24000160

08002590 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002594:	4802      	ldr	r0, [pc, #8]	@ (80025a0 <DMA1_Stream1_IRQHandler+0x10>)
 8002596:	f003 fe77 	bl	8006288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	240001d8 	.word	0x240001d8

080025a4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80025a8:	4802      	ldr	r0, [pc, #8]	@ (80025b4 <ADC_IRQHandler+0x10>)
 80025aa:	f000 ff5f 	bl	800346c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	24000080 	.word	0x24000080

080025b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025bc:	4802      	ldr	r0, [pc, #8]	@ (80025c8 <USART1_IRQHandler+0x10>)
 80025be:	f00a fd1b 	bl	800cff8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	24000324 	.word	0x24000324

080025cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_DIO0_Pin);
 80025d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80025d4:	f005 fb45 	bl	8007c62 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}

080025dc <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80025e0:	4802      	ldr	r0, [pc, #8]	@ (80025ec <ADC3_IRQHandler+0x10>)
 80025e2:	f000 ff43 	bl	800346c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	240000f0 	.word	0x240000f0

080025f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025f4:	4b32      	ldr	r3, [pc, #200]	@ (80026c0 <SystemInit+0xd0>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fa:	4a31      	ldr	r2, [pc, #196]	@ (80026c0 <SystemInit+0xd0>)
 80025fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002600:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002604:	4b2f      	ldr	r3, [pc, #188]	@ (80026c4 <SystemInit+0xd4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	2b06      	cmp	r3, #6
 800260e:	d807      	bhi.n	8002620 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002610:	4b2c      	ldr	r3, [pc, #176]	@ (80026c4 <SystemInit+0xd4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f023 030f 	bic.w	r3, r3, #15
 8002618:	4a2a      	ldr	r2, [pc, #168]	@ (80026c4 <SystemInit+0xd4>)
 800261a:	f043 0307 	orr.w	r3, r3, #7
 800261e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002620:	4b29      	ldr	r3, [pc, #164]	@ (80026c8 <SystemInit+0xd8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a28      	ldr	r2, [pc, #160]	@ (80026c8 <SystemInit+0xd8>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800262c:	4b26      	ldr	r3, [pc, #152]	@ (80026c8 <SystemInit+0xd8>)
 800262e:	2200      	movs	r2, #0
 8002630:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002632:	4b25      	ldr	r3, [pc, #148]	@ (80026c8 <SystemInit+0xd8>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4924      	ldr	r1, [pc, #144]	@ (80026c8 <SystemInit+0xd8>)
 8002638:	4b24      	ldr	r3, [pc, #144]	@ (80026cc <SystemInit+0xdc>)
 800263a:	4013      	ands	r3, r2
 800263c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800263e:	4b21      	ldr	r3, [pc, #132]	@ (80026c4 <SystemInit+0xd4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800264a:	4b1e      	ldr	r3, [pc, #120]	@ (80026c4 <SystemInit+0xd4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 030f 	bic.w	r3, r3, #15
 8002652:	4a1c      	ldr	r2, [pc, #112]	@ (80026c4 <SystemInit+0xd4>)
 8002654:	f043 0307 	orr.w	r3, r3, #7
 8002658:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800265a:	4b1b      	ldr	r3, [pc, #108]	@ (80026c8 <SystemInit+0xd8>)
 800265c:	2200      	movs	r2, #0
 800265e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002660:	4b19      	ldr	r3, [pc, #100]	@ (80026c8 <SystemInit+0xd8>)
 8002662:	2200      	movs	r2, #0
 8002664:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002666:	4b18      	ldr	r3, [pc, #96]	@ (80026c8 <SystemInit+0xd8>)
 8002668:	2200      	movs	r2, #0
 800266a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800266c:	4b16      	ldr	r3, [pc, #88]	@ (80026c8 <SystemInit+0xd8>)
 800266e:	4a18      	ldr	r2, [pc, #96]	@ (80026d0 <SystemInit+0xe0>)
 8002670:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002672:	4b15      	ldr	r3, [pc, #84]	@ (80026c8 <SystemInit+0xd8>)
 8002674:	4a17      	ldr	r2, [pc, #92]	@ (80026d4 <SystemInit+0xe4>)
 8002676:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002678:	4b13      	ldr	r3, [pc, #76]	@ (80026c8 <SystemInit+0xd8>)
 800267a:	4a17      	ldr	r2, [pc, #92]	@ (80026d8 <SystemInit+0xe8>)
 800267c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800267e:	4b12      	ldr	r3, [pc, #72]	@ (80026c8 <SystemInit+0xd8>)
 8002680:	2200      	movs	r2, #0
 8002682:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002684:	4b10      	ldr	r3, [pc, #64]	@ (80026c8 <SystemInit+0xd8>)
 8002686:	4a14      	ldr	r2, [pc, #80]	@ (80026d8 <SystemInit+0xe8>)
 8002688:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800268a:	4b0f      	ldr	r3, [pc, #60]	@ (80026c8 <SystemInit+0xd8>)
 800268c:	2200      	movs	r2, #0
 800268e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002690:	4b0d      	ldr	r3, [pc, #52]	@ (80026c8 <SystemInit+0xd8>)
 8002692:	4a11      	ldr	r2, [pc, #68]	@ (80026d8 <SystemInit+0xe8>)
 8002694:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002696:	4b0c      	ldr	r3, [pc, #48]	@ (80026c8 <SystemInit+0xd8>)
 8002698:	2200      	movs	r2, #0
 800269a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800269c:	4b0a      	ldr	r3, [pc, #40]	@ (80026c8 <SystemInit+0xd8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a09      	ldr	r2, [pc, #36]	@ (80026c8 <SystemInit+0xd8>)
 80026a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80026a8:	4b07      	ldr	r3, [pc, #28]	@ (80026c8 <SystemInit+0xd8>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80026ae:	4b0b      	ldr	r3, [pc, #44]	@ (80026dc <SystemInit+0xec>)
 80026b0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80026b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80026b6:	bf00      	nop
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000ed00 	.word	0xe000ed00
 80026c4:	52002000 	.word	0x52002000
 80026c8:	58024400 	.word	0x58024400
 80026cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80026d0:	02020200 	.word	0x02020200
 80026d4:	01ff0000 	.word	0x01ff0000
 80026d8:	01010280 	.word	0x01010280
 80026dc:	52004000 	.word	0x52004000

080026e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80026e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002718 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026e4:	f7ff ff84 	bl	80025f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026e8:	480c      	ldr	r0, [pc, #48]	@ (800271c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026ea:	490d      	ldr	r1, [pc, #52]	@ (8002720 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002724 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026f0:	e002      	b.n	80026f8 <LoopCopyDataInit>

080026f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f6:	3304      	adds	r3, #4

080026f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026fc:	d3f9      	bcc.n	80026f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002728 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002700:	4c0a      	ldr	r4, [pc, #40]	@ (800272c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002704:	e001      	b.n	800270a <LoopFillZerobss>

08002706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002708:	3204      	adds	r2, #4

0800270a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800270a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800270c:	d3fb      	bcc.n	8002706 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800270e:	f00d f8d1 	bl	800f8b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002712:	f7fe fd75 	bl	8001200 <main>
  bx  lr
 8002716:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002718:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800271c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002720:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8002724:	0800fbd0 	.word	0x0800fbd0
  ldr r2, =_sbss
 8002728:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 800272c:	2400058c 	.word	0x2400058c

08002730 <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002730:	e7fe      	b.n	8002730 <BDMA_Channel0_IRQHandler>
	...

08002734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800273a:	2003      	movs	r0, #3
 800273c:	f002 fa3e 	bl	8004bbc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002740:	f006 f874 	bl	800882c <HAL_RCC_GetSysClockFreq>
 8002744:	4602      	mov	r2, r0
 8002746:	4b15      	ldr	r3, [pc, #84]	@ (800279c <HAL_Init+0x68>)
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	0a1b      	lsrs	r3, r3, #8
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	4913      	ldr	r1, [pc, #76]	@ (80027a0 <HAL_Init+0x6c>)
 8002752:	5ccb      	ldrb	r3, [r1, r3]
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
 800275c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800275e:	4b0f      	ldr	r3, [pc, #60]	@ (800279c <HAL_Init+0x68>)
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	4a0e      	ldr	r2, [pc, #56]	@ (80027a0 <HAL_Init+0x6c>)
 8002768:	5cd3      	ldrb	r3, [r2, r3]
 800276a:	f003 031f 	and.w	r3, r3, #31
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
 8002774:	4a0b      	ldr	r2, [pc, #44]	@ (80027a4 <HAL_Init+0x70>)
 8002776:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002778:	4a0b      	ldr	r2, [pc, #44]	@ (80027a8 <HAL_Init+0x74>)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800277e:	200f      	movs	r0, #15
 8002780:	f000 f814 	bl	80027ac <HAL_InitTick>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e002      	b.n	8002794 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800278e:	f7ff fbcf 	bl	8001f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	58024400 	.word	0x58024400
 80027a0:	0800fb80 	.word	0x0800fb80
 80027a4:	24000058 	.word	0x24000058
 80027a8:	24000054 	.word	0x24000054

080027ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80027b4:	4b15      	ldr	r3, [pc, #84]	@ (800280c <HAL_InitTick+0x60>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e021      	b.n	8002804 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80027c0:	4b13      	ldr	r3, [pc, #76]	@ (8002810 <HAL_InitTick+0x64>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b11      	ldr	r3, [pc, #68]	@ (800280c <HAL_InitTick+0x60>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	4619      	mov	r1, r3
 80027ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80027d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d6:	4618      	mov	r0, r3
 80027d8:	f002 fa23 	bl	8004c22 <HAL_SYSTICK_Config>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e00e      	b.n	8002804 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b0f      	cmp	r3, #15
 80027ea:	d80a      	bhi.n	8002802 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ec:	2200      	movs	r2, #0
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	f04f 30ff 	mov.w	r0, #4294967295
 80027f4:	f002 f9ed 	bl	8004bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027f8:	4a06      	ldr	r2, [pc, #24]	@ (8002814 <HAL_InitTick+0x68>)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	e000      	b.n	8002804 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	24000060 	.word	0x24000060
 8002810:	24000054 	.word	0x24000054
 8002814:	2400005c 	.word	0x2400005c

08002818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800281c:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <HAL_IncTick+0x20>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	4b06      	ldr	r3, [pc, #24]	@ (800283c <HAL_IncTick+0x24>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4413      	add	r3, r2
 8002828:	4a04      	ldr	r2, [pc, #16]	@ (800283c <HAL_IncTick+0x24>)
 800282a:	6013      	str	r3, [r2, #0]
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	24000060 	.word	0x24000060
 800283c:	24000588 	.word	0x24000588

08002840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return uwTick;
 8002844:	4b03      	ldr	r3, [pc, #12]	@ (8002854 <HAL_GetTick+0x14>)
 8002846:	681b      	ldr	r3, [r3, #0]
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	24000588 	.word	0x24000588

08002858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002860:	f7ff ffee 	bl	8002840 <HAL_GetTick>
 8002864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d005      	beq.n	800287e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002872:	4b0a      	ldr	r3, [pc, #40]	@ (800289c <HAL_Delay+0x44>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4413      	add	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800287e:	bf00      	nop
 8002880:	f7ff ffde 	bl	8002840 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	429a      	cmp	r2, r3
 800288e:	d8f7      	bhi.n	8002880 <HAL_Delay+0x28>
  {
  }
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	24000060 	.word	0x24000060

080028a0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80028aa:	4b07      	ldr	r3, [pc, #28]	@ (80028c8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	401a      	ands	r2, r3
 80028b4:	4904      	ldr	r1, [pc, #16]	@ (80028c8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	604b      	str	r3, [r1, #4]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	58000400 	.word	0x58000400

080028cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	609a      	str	r2, [r3, #8]
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	609a      	str	r2, [r3, #8]
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002928:	4618      	mov	r0, r3
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	3360      	adds	r3, #96	@ 0x60
 8002946:	461a      	mov	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4a10      	ldr	r2, [pc, #64]	@ (8002994 <LL_ADC_SetOffset+0x60>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d10b      	bne.n	8002970 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	4313      	orrs	r3, r2
 8002966:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800296e:	e00b      	b.n	8002988 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	430b      	orrs	r3, r1
 8002982:	431a      	orrs	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	601a      	str	r2, [r3, #0]
}
 8002988:	bf00      	nop
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	58026000 	.word	0x58026000

08002998 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3360      	adds	r3, #96	@ 0x60
 80029a6:	461a      	mov	r2, r3
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f003 031f 	and.w	r3, r3, #31
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	fa01 f303 	lsl.w	r3, r1, r3
 80029e4:	431a      	orrs	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	611a      	str	r2, [r3, #16]
}
 80029ea:	bf00      	nop
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
	...

080029f8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4a0c      	ldr	r2, [pc, #48]	@ (8002a38 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00e      	beq.n	8002a2a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3360      	adds	r3, #96	@ 0x60
 8002a10:	461a      	mov	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	431a      	orrs	r2, r3
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	601a      	str	r2, [r3, #0]
  }
}
 8002a2a:	bf00      	nop
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	58026000 	.word	0x58026000

08002a3c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8002a7c <LL_ADC_SetOffsetSaturation+0x40>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d10e      	bne.n	8002a6e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	3360      	adds	r3, #96	@ 0x60
 8002a54:	461a      	mov	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002a6e:	bf00      	nop
 8002a70:	371c      	adds	r7, #28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	58026000 	.word	0x58026000

08002a80 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ac0 <LL_ADC_SetOffsetSign+0x40>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d10e      	bne.n	8002ab2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	3360      	adds	r3, #96	@ 0x60
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	431a      	orrs	r2, r3
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	58026000 	.word	0x58026000

08002ac4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	3360      	adds	r3, #96	@ 0x60
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4a0c      	ldr	r2, [pc, #48]	@ (8002b14 <LL_ADC_SetOffsetState+0x50>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d108      	bne.n	8002af8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	431a      	orrs	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002af6:	e007      	b.n	8002b08 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	601a      	str	r2, [r3, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	371c      	adds	r7, #28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	58026000 	.word	0x58026000

08002b18 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b087      	sub	sp, #28
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3330      	adds	r3, #48	@ 0x30
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	0a1b      	lsrs	r3, r3, #8
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	4413      	add	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	211f      	movs	r1, #31
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	401a      	ands	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	0e9b      	lsrs	r3, r3, #26
 8002b76:	f003 011f 	and.w	r1, r3, #31
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	431a      	orrs	r2, r3
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b8a:	bf00      	nop
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f023 0203 	bic.w	r2, r3, #3
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	60da      	str	r2, [r3, #12]
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f043 0201 	orr.w	r2, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	60da      	str	r2, [r3, #12]
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a08      	ldr	r2, [pc, #32]	@ (8002c0c <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d107      	bne.n	8002bfe <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f023 0203 	bic.w	r2, r3, #3
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	60da      	str	r2, [r3, #12]
  }
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	58026000 	.word	0x58026000

08002c10 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c1c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b087      	sub	sp, #28
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	3314      	adds	r3, #20
 8002c46:	461a      	mov	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	0e5b      	lsrs	r3, r3, #25
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	4413      	add	r3, r2
 8002c54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	0d1b      	lsrs	r3, r3, #20
 8002c5e:	f003 031f 	and.w	r3, r3, #31
 8002c62:	2107      	movs	r1, #7
 8002c64:	fa01 f303 	lsl.w	r3, r1, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	401a      	ands	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	0d1b      	lsrs	r3, r3, #20
 8002c70:	f003 031f 	and.w	r3, r3, #31
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c80:	bf00      	nop
 8002c82:	371c      	adds	r7, #28
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4a1a      	ldr	r2, [pc, #104]	@ (8002d04 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d115      	bne.n	8002ccc <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cac:	43db      	mvns	r3, r3
 8002cae:	401a      	ands	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f003 0318 	and.w	r3, r3, #24
 8002cb6:	4914      	ldr	r1, [pc, #80]	@ (8002d08 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002cb8:	40d9      	lsrs	r1, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	400b      	ands	r3, r1
 8002cbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002cca:	e014      	b.n	8002cf6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	401a      	ands	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f003 0318 	and.w	r3, r3, #24
 8002ce2:	4909      	ldr	r1, [pc, #36]	@ (8002d08 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002ce4:	40d9      	lsrs	r1, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	400b      	ands	r3, r1
 8002cea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	58026000 	.word	0x58026000
 8002d08:	000fffff 	.word	0x000fffff

08002d0c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 031f 	and.w	r3, r3, #31
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	4b04      	ldr	r3, [pc, #16]	@ (8002d64 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6093      	str	r3, [r2, #8]
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	5fffffc0 	.word	0x5fffffc0

08002d68 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d7c:	d101      	bne.n	8002d82 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	4b05      	ldr	r3, [pc, #20]	@ (8002db4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	6fffffc0 	.word	0x6fffffc0

08002db8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dcc:	d101      	bne.n	8002dd2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	4b05      	ldr	r3, [pc, #20]	@ (8002e04 <LL_ADC_Enable+0x24>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	f043 0201 	orr.w	r2, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	7fffffc0 	.word	0x7fffffc0

08002e08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <LL_ADC_IsEnabled+0x18>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <LL_ADC_IsEnabled+0x1a>
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
	...

08002e30 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	4b05      	ldr	r3, [pc, #20]	@ (8002e54 <LL_ADC_REG_StartConversion+0x24>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	f043 0204 	orr.w	r2, r3, #4
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	7fffffc0 	.word	0x7fffffc0

08002e58 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d101      	bne.n	8002e70 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d101      	bne.n	8002e96 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ea4:	b590      	push	{r4, r7, lr}
 8002ea6:	b089      	sub	sp, #36	@ 0x24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e1ee      	b.n	800329c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d109      	bne.n	8002ee0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7ff f849 	bl	8001f64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ff3f 	bl	8002d68 <LL_ADC_IsDeepPowerDownEnabled>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d004      	beq.n	8002efa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff25 	bl	8002d44 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff ff5a 	bl	8002db8 <LL_ADC_IsInternalRegulatorEnabled>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d114      	bne.n	8002f34 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff ff3e 	bl	8002d90 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f14:	4b8e      	ldr	r3, [pc, #568]	@ (8003150 <HAL_ADC_Init+0x2ac>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	099b      	lsrs	r3, r3, #6
 8002f1a:	4a8e      	ldr	r2, [pc, #568]	@ (8003154 <HAL_ADC_Init+0x2b0>)
 8002f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f20:	099b      	lsrs	r3, r3, #6
 8002f22:	3301      	adds	r3, #1
 8002f24:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f26:	e002      	b.n	8002f2e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f9      	bne.n	8002f28 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff ff3d 	bl	8002db8 <LL_ADC_IsInternalRegulatorEnabled>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10d      	bne.n	8002f60 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f48:	f043 0210 	orr.w	r2, r3, #16
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f54:	f043 0201 	orr.w	r2, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff ff77 	bl	8002e58 <LL_ADC_REG_IsConversionOngoing>
 8002f6a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f040 8188 	bne.w	800328a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f040 8184 	bne.w	800328a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f86:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f8a:	f043 0202 	orr.w	r2, r3, #2
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff ff36 	bl	8002e08 <LL_ADC_IsEnabled>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d136      	bne.n	8003010 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a6c      	ldr	r2, [pc, #432]	@ (8003158 <HAL_ADC_Init+0x2b4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d004      	beq.n	8002fb6 <HAL_ADC_Init+0x112>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a6a      	ldr	r2, [pc, #424]	@ (800315c <HAL_ADC_Init+0x2b8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d10e      	bne.n	8002fd4 <HAL_ADC_Init+0x130>
 8002fb6:	4868      	ldr	r0, [pc, #416]	@ (8003158 <HAL_ADC_Init+0x2b4>)
 8002fb8:	f7ff ff26 	bl	8002e08 <LL_ADC_IsEnabled>
 8002fbc:	4604      	mov	r4, r0
 8002fbe:	4867      	ldr	r0, [pc, #412]	@ (800315c <HAL_ADC_Init+0x2b8>)
 8002fc0:	f7ff ff22 	bl	8002e08 <LL_ADC_IsEnabled>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	4323      	orrs	r3, r4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e008      	b.n	8002fe6 <HAL_ADC_Init+0x142>
 8002fd4:	4862      	ldr	r0, [pc, #392]	@ (8003160 <HAL_ADC_Init+0x2bc>)
 8002fd6:	f7ff ff17 	bl	8002e08 <LL_ADC_IsEnabled>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d012      	beq.n	8003010 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a5a      	ldr	r2, [pc, #360]	@ (8003158 <HAL_ADC_Init+0x2b4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d004      	beq.n	8002ffe <HAL_ADC_Init+0x15a>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a58      	ldr	r2, [pc, #352]	@ (800315c <HAL_ADC_Init+0x2b8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d101      	bne.n	8003002 <HAL_ADC_Init+0x15e>
 8002ffe:	4a59      	ldr	r2, [pc, #356]	@ (8003164 <HAL_ADC_Init+0x2c0>)
 8003000:	e000      	b.n	8003004 <HAL_ADC_Init+0x160>
 8003002:	4a59      	ldr	r2, [pc, #356]	@ (8003168 <HAL_ADC_Init+0x2c4>)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f7ff fc5e 	bl	80028cc <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a52      	ldr	r2, [pc, #328]	@ (8003160 <HAL_ADC_Init+0x2bc>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d129      	bne.n	800306e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	7e5b      	ldrb	r3, [r3, #25]
 800301e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003024:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800302a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b08      	cmp	r3, #8
 8003032:	d013      	beq.n	800305c <HAL_ADC_Init+0x1b8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b0c      	cmp	r3, #12
 800303a:	d00d      	beq.n	8003058 <HAL_ADC_Init+0x1b4>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b1c      	cmp	r3, #28
 8003042:	d007      	beq.n	8003054 <HAL_ADC_Init+0x1b0>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b18      	cmp	r3, #24
 800304a:	d101      	bne.n	8003050 <HAL_ADC_Init+0x1ac>
 800304c:	2318      	movs	r3, #24
 800304e:	e006      	b.n	800305e <HAL_ADC_Init+0x1ba>
 8003050:	2300      	movs	r3, #0
 8003052:	e004      	b.n	800305e <HAL_ADC_Init+0x1ba>
 8003054:	2310      	movs	r3, #16
 8003056:	e002      	b.n	800305e <HAL_ADC_Init+0x1ba>
 8003058:	2308      	movs	r3, #8
 800305a:	e000      	b.n	800305e <HAL_ADC_Init+0x1ba>
 800305c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800305e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003066:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
 800306c:	e00e      	b.n	800308c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	7e5b      	ldrb	r3, [r3, #25]
 8003072:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003078:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800307e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003086:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d106      	bne.n	80030a4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309a:	3b01      	subs	r3, #1
 800309c:	045b      	lsls	r3, r3, #17
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d009      	beq.n	80030c0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a26      	ldr	r2, [pc, #152]	@ (8003160 <HAL_ADC_Init+0x2bc>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d115      	bne.n	80030f6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	4b26      	ldr	r3, [pc, #152]	@ (800316c <HAL_ADC_Init+0x2c8>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	69b9      	ldr	r1, [r7, #24]
 80030da:	430b      	orrs	r3, r1
 80030dc:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	611a      	str	r2, [r3, #16]
 80030f4:	e009      	b.n	800310a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003170 <HAL_ADC_Init+0x2cc>)
 80030fe:	4013      	ands	r3, r2
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	69b9      	ldr	r1, [r7, #24]
 8003106:	430b      	orrs	r3, r1
 8003108:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fea2 	bl	8002e58 <LL_ADC_REG_IsConversionOngoing>
 8003114:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff feaf 	bl	8002e7e <LL_ADC_INJ_IsConversionOngoing>
 8003120:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f040 808e 	bne.w	8003246 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	f040 808a 	bne.w	8003246 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a0a      	ldr	r2, [pc, #40]	@ (8003160 <HAL_ADC_Init+0x2bc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d11b      	bne.n	8003174 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	7e1b      	ldrb	r3, [r3, #24]
 8003140:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003148:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	e018      	b.n	8003182 <HAL_ADC_Init+0x2de>
 8003150:	24000054 	.word	0x24000054
 8003154:	053e2d63 	.word	0x053e2d63
 8003158:	40022000 	.word	0x40022000
 800315c:	40022100 	.word	0x40022100
 8003160:	58026000 	.word	0x58026000
 8003164:	40022300 	.word	0x40022300
 8003168:	58026300 	.word	0x58026300
 800316c:	fff04007 	.word	0xfff04007
 8003170:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	7e1b      	ldrb	r3, [r3, #24]
 8003178:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	4b46      	ldr	r3, [pc, #280]	@ (80032a4 <HAL_ADC_Init+0x400>)
 800318a:	4013      	ands	r3, r2
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6812      	ldr	r2, [r2, #0]
 8003190:	69b9      	ldr	r1, [r7, #24]
 8003192:	430b      	orrs	r3, r1
 8003194:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800319c:	2b01      	cmp	r3, #1
 800319e:	d137      	bne.n	8003210 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a3f      	ldr	r2, [pc, #252]	@ (80032a8 <HAL_ADC_Init+0x404>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d116      	bne.n	80031de <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691a      	ldr	r2, [r3, #16]
 80031b6:	4b3d      	ldr	r3, [pc, #244]	@ (80032ac <HAL_ADC_Init+0x408>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80031c2:	4311      	orrs	r1, r2
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031c8:	4311      	orrs	r1, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80031ce:	430a      	orrs	r2, r1
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	611a      	str	r2, [r3, #16]
 80031dc:	e020      	b.n	8003220 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	4b32      	ldr	r3, [pc, #200]	@ (80032b0 <HAL_ADC_Init+0x40c>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80031ec:	3a01      	subs	r2, #1
 80031ee:	0411      	lsls	r1, r2, #16
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80031f4:	4311      	orrs	r1, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031fa:	4311      	orrs	r1, r2
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003200:	430a      	orrs	r2, r1
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 0201 	orr.w	r2, r2, #1
 800320c:	611a      	str	r2, [r3, #16]
 800320e:	e007      	b.n	8003220 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0201 	bic.w	r2, r2, #1
 800321e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1b      	ldr	r2, [pc, #108]	@ (80032a8 <HAL_ADC_Init+0x404>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d002      	beq.n	8003246 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f001 f9c3 	bl	80045cc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d10c      	bne.n	8003268 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003254:	f023 010f 	bic.w	r1, r3, #15
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	1e5a      	subs	r2, r3, #1
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	631a      	str	r2, [r3, #48]	@ 0x30
 8003266:	e007      	b.n	8003278 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 020f 	bic.w	r2, r2, #15
 8003276:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800327c:	f023 0303 	bic.w	r3, r3, #3
 8003280:	f043 0201 	orr.w	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	661a      	str	r2, [r3, #96]	@ 0x60
 8003288:	e007      	b.n	800329a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800328e:	f043 0210 	orr.w	r2, r3, #16
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800329a:	7ffb      	ldrb	r3, [r7, #31]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3724      	adds	r7, #36	@ 0x24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd90      	pop	{r4, r7, pc}
 80032a4:	ffffbffc 	.word	0xffffbffc
 80032a8:	58026000 	.word	0x58026000
 80032ac:	fc00f81f 	.word	0xfc00f81f
 80032b0:	fc00f81e 	.word	0xfc00f81e

080032b4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a60      	ldr	r2, [pc, #384]	@ (8003448 <HAL_ADC_Start_DMA+0x194>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d004      	beq.n	80032d4 <HAL_ADC_Start_DMA+0x20>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a5f      	ldr	r2, [pc, #380]	@ (800344c <HAL_ADC_Start_DMA+0x198>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d101      	bne.n	80032d8 <HAL_ADC_Start_DMA+0x24>
 80032d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003450 <HAL_ADC_Start_DMA+0x19c>)
 80032d6:	e000      	b.n	80032da <HAL_ADC_Start_DMA+0x26>
 80032d8:	4b5e      	ldr	r3, [pc, #376]	@ (8003454 <HAL_ADC_Start_DMA+0x1a0>)
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff fd16 	bl	8002d0c <LL_ADC_GetMultimode>
 80032e0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff fdb6 	bl	8002e58 <LL_ADC_REG_IsConversionOngoing>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f040 80a2 	bne.w	8003438 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_ADC_Start_DMA+0x4e>
 80032fe:	2302      	movs	r3, #2
 8003300:	e09d      	b.n	800343e <HAL_ADC_Start_DMA+0x18a>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d006      	beq.n	800331e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	2b05      	cmp	r3, #5
 8003314:	d003      	beq.n	800331e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	2b09      	cmp	r3, #9
 800331a:	f040 8086 	bne.w	800342a <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f001 f836 	bl	8004390 <ADC_Enable>
 8003324:	4603      	mov	r3, r0
 8003326:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003328:	7dfb      	ldrb	r3, [r7, #23]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d178      	bne.n	8003420 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003332:	4b49      	ldr	r3, [pc, #292]	@ (8003458 <HAL_ADC_Start_DMA+0x1a4>)
 8003334:	4013      	ands	r3, r2
 8003336:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a42      	ldr	r2, [pc, #264]	@ (800344c <HAL_ADC_Start_DMA+0x198>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d002      	beq.n	800334e <HAL_ADC_Start_DMA+0x9a>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	e000      	b.n	8003350 <HAL_ADC_Start_DMA+0x9c>
 800334e:	4b3e      	ldr	r3, [pc, #248]	@ (8003448 <HAL_ADC_Start_DMA+0x194>)
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	4293      	cmp	r3, r2
 8003356:	d002      	beq.n	800335e <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d105      	bne.n	800336a <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003362:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800336e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d006      	beq.n	8003384 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800337a:	f023 0206 	bic.w	r2, r3, #6
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	665a      	str	r2, [r3, #100]	@ 0x64
 8003382:	e002      	b.n	800338a <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338e:	4a33      	ldr	r2, [pc, #204]	@ (800345c <HAL_ADC_Start_DMA+0x1a8>)
 8003390:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003396:	4a32      	ldr	r2, [pc, #200]	@ (8003460 <HAL_ADC_Start_DMA+0x1ac>)
 8003398:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339e:	4a31      	ldr	r2, [pc, #196]	@ (8003464 <HAL_ADC_Start_DMA+0x1b0>)
 80033a0:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	221c      	movs	r2, #28
 80033a8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0210 	orr.w	r2, r2, #16
 80033c0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a28      	ldr	r2, [pc, #160]	@ (8003468 <HAL_ADC_Start_DMA+0x1b4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d10f      	bne.n	80033ec <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	4619      	mov	r1, r3
 80033da:	4610      	mov	r0, r2
 80033dc:	f7ff fbfe 	bl	8002bdc <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff fbe9 	bl	8002bbc <LL_ADC_EnableDMAReq>
 80033ea:	e007      	b.n	80033fc <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f4:	4619      	mov	r1, r3
 80033f6:	4610      	mov	r0, r2
 80033f8:	f7ff fbcd 	bl	8002b96 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3340      	adds	r3, #64	@ 0x40
 8003406:	4619      	mov	r1, r3
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f001 ff6e 	bl	80052ec <HAL_DMA_Start_IT>
 8003410:	4603      	mov	r3, r0
 8003412:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fd09 	bl	8002e30 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800341e:	e00d      	b.n	800343c <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8003428:	e008      	b.n	800343c <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003436:	e001      	b.n	800343c <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003438:	2302      	movs	r3, #2
 800343a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800343c:	7dfb      	ldrb	r3, [r7, #23]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40022000 	.word	0x40022000
 800344c:	40022100 	.word	0x40022100
 8003450:	40022300 	.word	0x40022300
 8003454:	58026300 	.word	0x58026300
 8003458:	fffff0fe 	.word	0xfffff0fe
 800345c:	080044a5 	.word	0x080044a5
 8003460:	0800457d 	.word	0x0800457d
 8003464:	08004599 	.word	0x08004599
 8003468:	58026000 	.word	0x58026000

0800346c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08a      	sub	sp, #40	@ 0x28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003474:	2300      	movs	r3, #0
 8003476:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a87      	ldr	r2, [pc, #540]	@ (80036ac <HAL_ADC_IRQHandler+0x240>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <HAL_ADC_IRQHandler+0x30>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a86      	ldr	r2, [pc, #536]	@ (80036b0 <HAL_ADC_IRQHandler+0x244>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d101      	bne.n	80034a0 <HAL_ADC_IRQHandler+0x34>
 800349c:	4b85      	ldr	r3, [pc, #532]	@ (80036b4 <HAL_ADC_IRQHandler+0x248>)
 800349e:	e000      	b.n	80034a2 <HAL_ADC_IRQHandler+0x36>
 80034a0:	4b85      	ldr	r3, [pc, #532]	@ (80036b8 <HAL_ADC_IRQHandler+0x24c>)
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fc32 	bl	8002d0c <LL_ADC_GetMultimode>
 80034a8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d017      	beq.n	80034e4 <HAL_ADC_IRQHandler+0x78>
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d012      	beq.n	80034e4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d105      	bne.n	80034d6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ce:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f001 f9b4 	bl	8004844 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2202      	movs	r2, #2
 80034e2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 0304 	and.w	r3, r3, #4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d004      	beq.n	80034f8 <HAL_ADC_IRQHandler+0x8c>
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 8083 	beq.w	800360a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d07d      	beq.n	800360a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003512:	f003 0310 	and.w	r3, r3, #16
 8003516:	2b00      	cmp	r3, #0
 8003518:	d105      	bne.n	8003526 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800351e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff faf4 	bl	8002b18 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d062      	beq.n	80035fc <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a5d      	ldr	r2, [pc, #372]	@ (80036b0 <HAL_ADC_IRQHandler+0x244>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d002      	beq.n	8003546 <HAL_ADC_IRQHandler+0xda>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	e000      	b.n	8003548 <HAL_ADC_IRQHandler+0xdc>
 8003546:	4b59      	ldr	r3, [pc, #356]	@ (80036ac <HAL_ADC_IRQHandler+0x240>)
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	4293      	cmp	r3, r2
 800354e:	d008      	beq.n	8003562 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2b05      	cmp	r3, #5
 800355a:	d002      	beq.n	8003562 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2b09      	cmp	r3, #9
 8003560:	d104      	bne.n	800356c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	623b      	str	r3, [r7, #32]
 800356a:	e00c      	b.n	8003586 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a4f      	ldr	r2, [pc, #316]	@ (80036b0 <HAL_ADC_IRQHandler+0x244>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d002      	beq.n	800357c <HAL_ADC_IRQHandler+0x110>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	e000      	b.n	800357e <HAL_ADC_IRQHandler+0x112>
 800357c:	4b4b      	ldr	r3, [pc, #300]	@ (80036ac <HAL_ADC_IRQHandler+0x240>)
 800357e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d135      	bne.n	80035fc <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b08      	cmp	r3, #8
 800359c:	d12e      	bne.n	80035fc <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fc58 	bl	8002e58 <LL_ADC_REG_IsConversionOngoing>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d11a      	bne.n	80035e4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 020c 	bic.w	r2, r2, #12
 80035bc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d112      	bne.n	80035fc <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035da:	f043 0201 	orr.w	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	661a      	str	r2, [r3, #96]	@ 0x60
 80035e2:	e00b      	b.n	80035fc <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e8:	f043 0210 	orr.w	r2, r3, #16
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035f4:	f043 0201 	orr.w	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f96f 	bl	80038e0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	220c      	movs	r2, #12
 8003608:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b00      	cmp	r3, #0
 8003612:	d004      	beq.n	800361e <HAL_ADC_IRQHandler+0x1b2>
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10b      	bne.n	8003636 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80a0 	beq.w	800376a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 809a 	beq.w	800376a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	2b00      	cmp	r3, #0
 8003640:	d105      	bne.n	800364e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003646:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff fadc 	bl	8002c10 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003658:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff fa5a 	bl	8002b18 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003664:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a11      	ldr	r2, [pc, #68]	@ (80036b0 <HAL_ADC_IRQHandler+0x244>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d002      	beq.n	8003676 <HAL_ADC_IRQHandler+0x20a>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	e000      	b.n	8003678 <HAL_ADC_IRQHandler+0x20c>
 8003676:	4b0d      	ldr	r3, [pc, #52]	@ (80036ac <HAL_ADC_IRQHandler+0x240>)
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	4293      	cmp	r3, r2
 800367e:	d008      	beq.n	8003692 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d005      	beq.n	8003692 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2b06      	cmp	r3, #6
 800368a:	d002      	beq.n	8003692 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	2b07      	cmp	r3, #7
 8003690:	d104      	bne.n	800369c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	623b      	str	r3, [r7, #32]
 800369a:	e014      	b.n	80036c6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a03      	ldr	r2, [pc, #12]	@ (80036b0 <HAL_ADC_IRQHandler+0x244>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00a      	beq.n	80036bc <HAL_ADC_IRQHandler+0x250>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	e008      	b.n	80036be <HAL_ADC_IRQHandler+0x252>
 80036ac:	40022000 	.word	0x40022000
 80036b0:	40022100 	.word	0x40022100
 80036b4:	40022300 	.word	0x40022300
 80036b8:	58026300 	.word	0x58026300
 80036bc:	4b84      	ldr	r3, [pc, #528]	@ (80038d0 <HAL_ADC_IRQHandler+0x464>)
 80036be:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d047      	beq.n	800375c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d007      	beq.n	80036e6 <HAL_ADC_IRQHandler+0x27a>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d03f      	beq.n	800375c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d13a      	bne.n	800375c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f0:	2b40      	cmp	r3, #64	@ 0x40
 80036f2:	d133      	bne.n	800375c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d12e      	bne.n	800375c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fbbb 	bl	8002e7e <LL_ADC_INJ_IsConversionOngoing>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d11a      	bne.n	8003744 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800371c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003722:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800372e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003732:	2b00      	cmp	r3, #0
 8003734:	d112      	bne.n	800375c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800373a:	f043 0201 	orr.w	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	661a      	str	r2, [r3, #96]	@ 0x60
 8003742:	e00b      	b.n	800375c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003748:	f043 0210 	orr.w	r2, r3, #16
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003754:	f043 0201 	orr.w	r2, r3, #1
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f001 f849 	bl	80047f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2260      	movs	r2, #96	@ 0x60
 8003768:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003770:	2b00      	cmp	r3, #0
 8003772:	d011      	beq.n	8003798 <HAL_ADC_IRQHandler+0x32c>
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00c      	beq.n	8003798 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003782:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f8bc 	bl	8003908 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2280      	movs	r2, #128	@ 0x80
 8003796:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d012      	beq.n	80037c8 <HAL_ADC_IRQHandler+0x35c>
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00d      	beq.n	80037c8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f001 f82f 	bl	800481c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d012      	beq.n	80037f8 <HAL_ADC_IRQHandler+0x38c>
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00d      	beq.n	80037f8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f001 f821 	bl	8004830 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d043      	beq.n	800388a <HAL_ADC_IRQHandler+0x41e>
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	2b00      	cmp	r3, #0
 800380a:	d03e      	beq.n	800388a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003810:	2b00      	cmp	r3, #0
 8003812:	d102      	bne.n	800381a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003814:	2301      	movs	r3, #1
 8003816:	627b      	str	r3, [r7, #36]	@ 0x24
 8003818:	e021      	b.n	800385e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d015      	beq.n	800384c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a2a      	ldr	r2, [pc, #168]	@ (80038d0 <HAL_ADC_IRQHandler+0x464>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d004      	beq.n	8003834 <HAL_ADC_IRQHandler+0x3c8>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a29      	ldr	r2, [pc, #164]	@ (80038d4 <HAL_ADC_IRQHandler+0x468>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d101      	bne.n	8003838 <HAL_ADC_IRQHandler+0x3cc>
 8003834:	4b28      	ldr	r3, [pc, #160]	@ (80038d8 <HAL_ADC_IRQHandler+0x46c>)
 8003836:	e000      	b.n	800383a <HAL_ADC_IRQHandler+0x3ce>
 8003838:	4b28      	ldr	r3, [pc, #160]	@ (80038dc <HAL_ADC_IRQHandler+0x470>)
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff fa74 	bl	8002d28 <LL_ADC_GetMultiDMATransfer>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00b      	beq.n	800385e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003846:	2301      	movs	r3, #1
 8003848:	627b      	str	r3, [r7, #36]	@ 0x24
 800384a:	e008      	b.n	800385e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800385a:	2301      	movs	r3, #1
 800385c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	2b01      	cmp	r3, #1
 8003862:	d10e      	bne.n	8003882 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003868:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003874:	f043 0202 	orr.w	r2, r3, #2
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f84d 	bl	800391c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2210      	movs	r2, #16
 8003888:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003890:	2b00      	cmp	r3, #0
 8003892:	d018      	beq.n	80038c6 <HAL_ADC_IRQHandler+0x45a>
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800389a:	2b00      	cmp	r3, #0
 800389c:	d013      	beq.n	80038c6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038ae:	f043 0208 	orr.w	r2, r3, #8
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038be:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 ffa1 	bl	8004808 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80038c6:	bf00      	nop
 80038c8:	3728      	adds	r7, #40	@ 0x28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40022000 	.word	0x40022000
 80038d4:	40022100 	.word	0x40022100
 80038d8:	40022300 	.word	0x40022300
 80038dc:	58026300 	.word	0x58026300

080038e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003930:	b590      	push	{r4, r7, lr}
 8003932:	b0b9      	sub	sp, #228	@ 0xe4
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800394a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	4aab      	ldr	r2, [pc, #684]	@ (8003c00 <HAL_ADC_ConfigChannel+0x2d0>)
 8003952:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800395a:	2b01      	cmp	r3, #1
 800395c:	d102      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x34>
 800395e:	2302      	movs	r3, #2
 8003960:	f000 bcfe 	b.w	8004360 <HAL_ADC_ConfigChannel+0xa30>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff fa71 	bl	8002e58 <LL_ADC_REG_IsConversionOngoing>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	f040 84e2 	bne.w	8004342 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	db38      	blt.n	80039f8 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a9e      	ldr	r2, [pc, #632]	@ (8003c04 <HAL_ADC_ConfigChannel+0x2d4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d033      	beq.n	80039f8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003998:	2b00      	cmp	r3, #0
 800399a:	d108      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x7e>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	0e9b      	lsrs	r3, r3, #26
 80039a2:	f003 031f 	and.w	r3, r3, #31
 80039a6:	2201      	movs	r2, #1
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	e01d      	b.n	80039ea <HAL_ADC_ConfigChannel+0xba>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039ba:	fa93 f3a3 	rbit	r3, r3
 80039be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80039ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 80039d2:	2320      	movs	r3, #32
 80039d4:	e004      	b.n	80039e0 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 80039d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80039da:	fab3 f383 	clz	r3, r3
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	2201      	movs	r2, #1
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6812      	ldr	r2, [r2, #0]
 80039ee:	69d1      	ldr	r1, [r2, #28]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	430b      	orrs	r3, r1
 80039f6:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6818      	ldr	r0, [r3, #0]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	6859      	ldr	r1, [r3, #4]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	f7ff f89a 	bl	8002b3e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fa22 	bl	8002e58 <LL_ADC_REG_IsConversionOngoing>
 8003a14:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff fa2e 	bl	8002e7e <LL_ADC_INJ_IsConversionOngoing>
 8003a22:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f040 8270 	bne.w	8003f10 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a30:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f040 826b 	bne.w	8003f10 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	6819      	ldr	r1, [r3, #0]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	461a      	mov	r2, r3
 8003a48:	f7ff f8f5 	bl	8002c36 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a6c      	ldr	r2, [pc, #432]	@ (8003c04 <HAL_ADC_ConfigChannel+0x2d4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d10d      	bne.n	8003a72 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	08db      	lsrs	r3, r3, #3
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a70:	e032      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a72:	4b65      	ldr	r3, [pc, #404]	@ (8003c08 <HAL_ADC_ConfigChannel+0x2d8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003a7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a7e:	d10b      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x168>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	695a      	ldr	r2, [r3, #20]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	089b      	lsrs	r3, r3, #2
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	e01d      	b.n	8003ad4 <HAL_ADC_ConfigChannel+0x1a4>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f003 0310 	and.w	r3, r3, #16
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10b      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x18e>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	089b      	lsrs	r3, r3, #2
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	e00a      	b.n	8003ad4 <HAL_ADC_ConfigChannel+0x1a4>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	089b      	lsrs	r3, r3, #2
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d048      	beq.n	8003b72 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	6919      	ldr	r1, [r3, #16]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003af0:	f7fe ff20 	bl	8002934 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a42      	ldr	r2, [pc, #264]	@ (8003c04 <HAL_ADC_ConfigChannel+0x2d4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d119      	bne.n	8003b32 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	6919      	ldr	r1, [r3, #16]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f7fe ffb8 	bl	8002a80 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	6919      	ldr	r1, [r3, #16]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d102      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x1f8>
 8003b22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b26:	e000      	b.n	8003b2a <HAL_ADC_ConfigChannel+0x1fa>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f7fe ff86 	bl	8002a3c <LL_ADC_SetOffsetSaturation>
 8003b30:	e1ee      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6919      	ldr	r1, [r3, #16]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d102      	bne.n	8003b4a <HAL_ADC_ConfigChannel+0x21a>
 8003b44:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003b48:	e000      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x21c>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f7fe ff53 	bl	80029f8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6919      	ldr	r1, [r3, #16]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	7e1b      	ldrb	r3, [r3, #24]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d102      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x238>
 8003b62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003b66:	e000      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x23a>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f7fe ff2a 	bl	80029c4 <LL_ADC_SetDataRightShift>
 8003b70:	e1ce      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a23      	ldr	r2, [pc, #140]	@ (8003c04 <HAL_ADC_ConfigChannel+0x2d4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	f040 8181 	bne.w	8003e80 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2100      	movs	r1, #0
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fe ff07 	bl	8002998 <LL_ADC_GetOffsetChannel>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10a      	bne.n	8003baa <HAL_ADC_ConfigChannel+0x27a>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2100      	movs	r1, #0
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fe fefc 	bl	8002998 <LL_ADC_GetOffsetChannel>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	0e9b      	lsrs	r3, r3, #26
 8003ba4:	f003 021f 	and.w	r2, r3, #31
 8003ba8:	e01e      	b.n	8003be8 <HAL_ADC_ConfigChannel+0x2b8>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2100      	movs	r1, #0
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fe fef1 	bl	8002998 <LL_ADC_GetOffsetChannel>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003bc0:	fa93 f3a3 	rbit	r3, r3
 8003bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003bc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003bcc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003bd0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003bd8:	2320      	movs	r3, #32
 8003bda:	e004      	b.n	8003be6 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003bdc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003be0:	fab3 f383 	clz	r3, r3
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	461a      	mov	r2, r3
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10b      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0x2dc>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	0e9b      	lsrs	r3, r3, #26
 8003bfa:	f003 031f 	and.w	r3, r3, #31
 8003bfe:	e01e      	b.n	8003c3e <HAL_ADC_ConfigChannel+0x30e>
 8003c00:	47ff0000 	.word	0x47ff0000
 8003c04:	58026000 	.word	0x58026000
 8003c08:	5c001000 	.word	0x5c001000
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c18:	fa93 f3a3 	rbit	r3, r3
 8003c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003c20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003c28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003c30:	2320      	movs	r3, #32
 8003c32:	e004      	b.n	8003c3e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003c34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003c38:	fab3 f383 	clz	r3, r3
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d106      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2200      	movs	r2, #0
 8003c48:	2100      	movs	r1, #0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fe ff3a 	bl	8002ac4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2101      	movs	r1, #1
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fe fe9e 	bl	8002998 <LL_ADC_GetOffsetChannel>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10a      	bne.n	8003c7c <HAL_ADC_ConfigChannel+0x34c>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fe fe93 	bl	8002998 <LL_ADC_GetOffsetChannel>
 8003c72:	4603      	mov	r3, r0
 8003c74:	0e9b      	lsrs	r3, r3, #26
 8003c76:	f003 021f 	and.w	r2, r3, #31
 8003c7a:	e01e      	b.n	8003cba <HAL_ADC_ConfigChannel+0x38a>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2101      	movs	r1, #1
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fe fe88 	bl	8002998 <LL_ADC_GetOffsetChannel>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c92:	fa93 f3a3 	rbit	r3, r3
 8003c96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003c9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003ca2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003caa:	2320      	movs	r3, #32
 8003cac:	e004      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003cae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003cb2:	fab3 f383 	clz	r3, r3
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	461a      	mov	r2, r3
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d105      	bne.n	8003cd2 <HAL_ADC_ConfigChannel+0x3a2>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	0e9b      	lsrs	r3, r3, #26
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	e018      	b.n	8003d04 <HAL_ADC_ConfigChannel+0x3d4>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cda:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cde:	fa93 f3a3 	rbit	r3, r3
 8003ce2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003ce6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003cea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003cee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003cf6:	2320      	movs	r3, #32
 8003cf8:	e004      	b.n	8003d04 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8003cfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cfe:	fab3 f383 	clz	r3, r3
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d106      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2101      	movs	r1, #1
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fe fed7 	bl	8002ac4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2102      	movs	r1, #2
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fe fe3b 	bl	8002998 <LL_ADC_GetOffsetChannel>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10a      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x412>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2102      	movs	r1, #2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fe fe30 	bl	8002998 <LL_ADC_GetOffsetChannel>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	0e9b      	lsrs	r3, r3, #26
 8003d3c:	f003 021f 	and.w	r2, r3, #31
 8003d40:	e01e      	b.n	8003d80 <HAL_ADC_ConfigChannel+0x450>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2102      	movs	r1, #2
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fe fe25 	bl	8002998 <LL_ADC_GetOffsetChannel>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d58:	fa93 f3a3 	rbit	r3, r3
 8003d5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003d70:	2320      	movs	r3, #32
 8003d72:	e004      	b.n	8003d7e <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003d74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d78:	fab3 f383 	clz	r3, r3
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	461a      	mov	r2, r3
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d105      	bne.n	8003d98 <HAL_ADC_ConfigChannel+0x468>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	0e9b      	lsrs	r3, r3, #26
 8003d92:	f003 031f 	and.w	r3, r3, #31
 8003d96:	e014      	b.n	8003dc2 <HAL_ADC_ConfigChannel+0x492>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003da0:	fa93 f3a3 	rbit	r3, r3
 8003da4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003da6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003da8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003dac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003db4:	2320      	movs	r3, #32
 8003db6:	e004      	b.n	8003dc2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003db8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003dbc:	fab3 f383 	clz	r3, r3
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d106      	bne.n	8003dd4 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2102      	movs	r1, #2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fe fe78 	bl	8002ac4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2103      	movs	r1, #3
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fe fddc 	bl	8002998 <LL_ADC_GetOffsetChannel>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <HAL_ADC_ConfigChannel+0x4d0>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2103      	movs	r1, #3
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fe fdd1 	bl	8002998 <LL_ADC_GetOffsetChannel>
 8003df6:	4603      	mov	r3, r0
 8003df8:	0e9b      	lsrs	r3, r3, #26
 8003dfa:	f003 021f 	and.w	r2, r3, #31
 8003dfe:	e017      	b.n	8003e30 <HAL_ADC_ConfigChannel+0x500>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2103      	movs	r1, #3
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe fdc6 	bl	8002998 <LL_ADC_GetOffsetChannel>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e12:	fa93 f3a3 	rbit	r3, r3
 8003e16:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003e18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e1a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003e1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003e22:	2320      	movs	r3, #32
 8003e24:	e003      	b.n	8003e2e <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8003e26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e28:	fab3 f383 	clz	r3, r3
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	461a      	mov	r2, r3
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d105      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x518>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	0e9b      	lsrs	r3, r3, #26
 8003e42:	f003 031f 	and.w	r3, r3, #31
 8003e46:	e011      	b.n	8003e6c <HAL_ADC_ConfigChannel+0x53c>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e50:	fa93 f3a3 	rbit	r3, r3
 8003e54:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003e56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e58:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003e5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003e60:	2320      	movs	r3, #32
 8003e62:	e003      	b.n	8003e6c <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003e64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e66:	fab3 f383 	clz	r3, r3
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d14f      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2200      	movs	r2, #0
 8003e76:	2103      	movs	r1, #3
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fe fe23 	bl	8002ac4 <LL_ADC_SetOffsetState>
 8003e7e:	e047      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	069b      	lsls	r3, r3, #26
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d107      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ea2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003eaa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	069b      	lsls	r3, r3, #26
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d107      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ec6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ece:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	069b      	lsls	r3, r3, #26
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d107      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003eea:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ef2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	069b      	lsls	r3, r3, #26
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d107      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f0e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fe ff77 	bl	8002e08 <LL_ADC_IsEnabled>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f040 8219 	bne.w	8004354 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	6819      	ldr	r1, [r3, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f7fe feac 	bl	8002c8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4aa1      	ldr	r2, [pc, #644]	@ (80041c0 <HAL_ADC_ConfigChannel+0x890>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	f040 812e 	bne.w	800419c <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10b      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x638>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	0e9b      	lsrs	r3, r3, #26
 8003f56:	3301      	adds	r3, #1
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	2b09      	cmp	r3, #9
 8003f5e:	bf94      	ite	ls
 8003f60:	2301      	movls	r3, #1
 8003f62:	2300      	movhi	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	e019      	b.n	8003f9c <HAL_ADC_ConfigChannel+0x66c>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f70:	fa93 f3a3 	rbit	r3, r3
 8003f74:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f78:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003f7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003f80:	2320      	movs	r3, #32
 8003f82:	e003      	b.n	8003f8c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003f84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f86:	fab3 f383 	clz	r3, r3
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	f003 031f 	and.w	r3, r3, #31
 8003f92:	2b09      	cmp	r3, #9
 8003f94:	bf94      	ite	ls
 8003f96:	2301      	movls	r3, #1
 8003f98:	2300      	movhi	r3, #0
 8003f9a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d079      	beq.n	8004094 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d107      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x68c>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	0e9b      	lsrs	r3, r3, #26
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	069b      	lsls	r3, r3, #26
 8003fb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fba:	e015      	b.n	8003fe8 <HAL_ADC_ConfigChannel+0x6b8>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fc4:	fa93 f3a3 	rbit	r3, r3
 8003fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fcc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003fce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8003fd4:	2320      	movs	r3, #32
 8003fd6:	e003      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8003fd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fda:	fab3 f383 	clz	r3, r3
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	069b      	lsls	r3, r3, #26
 8003fe4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d109      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x6d8>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	0e9b      	lsrs	r3, r3, #26
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	f003 031f 	and.w	r3, r3, #31
 8004000:	2101      	movs	r1, #1
 8004002:	fa01 f303 	lsl.w	r3, r1, r3
 8004006:	e017      	b.n	8004038 <HAL_ADC_ConfigChannel+0x708>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004010:	fa93 f3a3 	rbit	r3, r3
 8004014:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004018:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800401a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004020:	2320      	movs	r3, #32
 8004022:	e003      	b.n	800402c <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8004024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004026:	fab3 f383 	clz	r3, r3
 800402a:	b2db      	uxtb	r3, r3
 800402c:	3301      	adds	r3, #1
 800402e:	f003 031f 	and.w	r3, r3, #31
 8004032:	2101      	movs	r1, #1
 8004034:	fa01 f303 	lsl.w	r3, r1, r3
 8004038:	ea42 0103 	orr.w	r1, r2, r3
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10a      	bne.n	800405e <HAL_ADC_ConfigChannel+0x72e>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	0e9b      	lsrs	r3, r3, #26
 800404e:	3301      	adds	r3, #1
 8004050:	f003 021f 	and.w	r2, r3, #31
 8004054:	4613      	mov	r3, r2
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	4413      	add	r3, r2
 800405a:	051b      	lsls	r3, r3, #20
 800405c:	e018      	b.n	8004090 <HAL_ADC_ConfigChannel+0x760>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004066:	fa93 f3a3 	rbit	r3, r3
 800406a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800406c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8004076:	2320      	movs	r3, #32
 8004078:	e003      	b.n	8004082 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800407a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800407c:	fab3 f383 	clz	r3, r3
 8004080:	b2db      	uxtb	r3, r3
 8004082:	3301      	adds	r3, #1
 8004084:	f003 021f 	and.w	r2, r3, #31
 8004088:	4613      	mov	r3, r2
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	4413      	add	r3, r2
 800408e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004090:	430b      	orrs	r3, r1
 8004092:	e07e      	b.n	8004192 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800409c:	2b00      	cmp	r3, #0
 800409e:	d107      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x780>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	0e9b      	lsrs	r3, r3, #26
 80040a6:	3301      	adds	r3, #1
 80040a8:	069b      	lsls	r3, r3, #26
 80040aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040ae:	e015      	b.n	80040dc <HAL_ADC_ConfigChannel+0x7ac>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b8:	fa93 f3a3 	rbit	r3, r3
 80040bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80040be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80040c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80040c8:	2320      	movs	r3, #32
 80040ca:	e003      	b.n	80040d4 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80040cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ce:	fab3 f383 	clz	r3, r3
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	3301      	adds	r3, #1
 80040d6:	069b      	lsls	r3, r3, #26
 80040d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d109      	bne.n	80040fc <HAL_ADC_ConfigChannel+0x7cc>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	0e9b      	lsrs	r3, r3, #26
 80040ee:	3301      	adds	r3, #1
 80040f0:	f003 031f 	and.w	r3, r3, #31
 80040f4:	2101      	movs	r1, #1
 80040f6:	fa01 f303 	lsl.w	r3, r1, r3
 80040fa:	e017      	b.n	800412c <HAL_ADC_ConfigChannel+0x7fc>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	fa93 f3a3 	rbit	r3, r3
 8004108:	61bb      	str	r3, [r7, #24]
  return result;
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8004114:	2320      	movs	r3, #32
 8004116:	e003      	b.n	8004120 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	fab3 f383 	clz	r3, r3
 800411e:	b2db      	uxtb	r3, r3
 8004120:	3301      	adds	r3, #1
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	2101      	movs	r1, #1
 8004128:	fa01 f303 	lsl.w	r3, r1, r3
 800412c:	ea42 0103 	orr.w	r1, r2, r3
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10d      	bne.n	8004158 <HAL_ADC_ConfigChannel+0x828>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	0e9b      	lsrs	r3, r3, #26
 8004142:	3301      	adds	r3, #1
 8004144:	f003 021f 	and.w	r2, r3, #31
 8004148:	4613      	mov	r3, r2
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	4413      	add	r3, r2
 800414e:	3b1e      	subs	r3, #30
 8004150:	051b      	lsls	r3, r3, #20
 8004152:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004156:	e01b      	b.n	8004190 <HAL_ADC_ConfigChannel+0x860>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	fa93 f3a3 	rbit	r3, r3
 8004164:	60fb      	str	r3, [r7, #12]
  return result;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8004170:	2320      	movs	r3, #32
 8004172:	e003      	b.n	800417c <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	fab3 f383 	clz	r3, r3
 800417a:	b2db      	uxtb	r3, r3
 800417c:	3301      	adds	r3, #1
 800417e:	f003 021f 	and.w	r2, r3, #31
 8004182:	4613      	mov	r3, r2
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	4413      	add	r3, r2
 8004188:	3b1e      	subs	r3, #30
 800418a:	051b      	lsls	r3, r3, #20
 800418c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004190:	430b      	orrs	r3, r1
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	6892      	ldr	r2, [r2, #8]
 8004196:	4619      	mov	r1, r3
 8004198:	f7fe fd4d 	bl	8002c36 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f280 80d7 	bge.w	8004354 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a06      	ldr	r2, [pc, #24]	@ (80041c4 <HAL_ADC_ConfigChannel+0x894>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d004      	beq.n	80041ba <HAL_ADC_ConfigChannel+0x88a>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a04      	ldr	r2, [pc, #16]	@ (80041c8 <HAL_ADC_ConfigChannel+0x898>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d10a      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x8a0>
 80041ba:	4b04      	ldr	r3, [pc, #16]	@ (80041cc <HAL_ADC_ConfigChannel+0x89c>)
 80041bc:	e009      	b.n	80041d2 <HAL_ADC_ConfigChannel+0x8a2>
 80041be:	bf00      	nop
 80041c0:	47ff0000 	.word	0x47ff0000
 80041c4:	40022000 	.word	0x40022000
 80041c8:	40022100 	.word	0x40022100
 80041cc:	40022300 	.word	0x40022300
 80041d0:	4b65      	ldr	r3, [pc, #404]	@ (8004368 <HAL_ADC_ConfigChannel+0xa38>)
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fe fba0 	bl	8002918 <LL_ADC_GetCommonPathInternalCh>
 80041d8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a62      	ldr	r2, [pc, #392]	@ (800436c <HAL_ADC_ConfigChannel+0xa3c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d004      	beq.n	80041f0 <HAL_ADC_ConfigChannel+0x8c0>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a61      	ldr	r2, [pc, #388]	@ (8004370 <HAL_ADC_ConfigChannel+0xa40>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d10e      	bne.n	800420e <HAL_ADC_ConfigChannel+0x8de>
 80041f0:	485e      	ldr	r0, [pc, #376]	@ (800436c <HAL_ADC_ConfigChannel+0xa3c>)
 80041f2:	f7fe fe09 	bl	8002e08 <LL_ADC_IsEnabled>
 80041f6:	4604      	mov	r4, r0
 80041f8:	485d      	ldr	r0, [pc, #372]	@ (8004370 <HAL_ADC_ConfigChannel+0xa40>)
 80041fa:	f7fe fe05 	bl	8002e08 <LL_ADC_IsEnabled>
 80041fe:	4603      	mov	r3, r0
 8004200:	4323      	orrs	r3, r4
 8004202:	2b00      	cmp	r3, #0
 8004204:	bf0c      	ite	eq
 8004206:	2301      	moveq	r3, #1
 8004208:	2300      	movne	r3, #0
 800420a:	b2db      	uxtb	r3, r3
 800420c:	e008      	b.n	8004220 <HAL_ADC_ConfigChannel+0x8f0>
 800420e:	4859      	ldr	r0, [pc, #356]	@ (8004374 <HAL_ADC_ConfigChannel+0xa44>)
 8004210:	f7fe fdfa 	bl	8002e08 <LL_ADC_IsEnabled>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	bf0c      	ite	eq
 800421a:	2301      	moveq	r3, #1
 800421c:	2300      	movne	r3, #0
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8084 	beq.w	800432e <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a53      	ldr	r2, [pc, #332]	@ (8004378 <HAL_ADC_ConfigChannel+0xa48>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d132      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x966>
 8004230:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004234:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d12c      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a4c      	ldr	r2, [pc, #304]	@ (8004374 <HAL_ADC_ConfigChannel+0xa44>)
 8004242:	4293      	cmp	r3, r2
 8004244:	f040 8086 	bne.w	8004354 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a47      	ldr	r2, [pc, #284]	@ (800436c <HAL_ADC_ConfigChannel+0xa3c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d004      	beq.n	800425c <HAL_ADC_ConfigChannel+0x92c>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a46      	ldr	r2, [pc, #280]	@ (8004370 <HAL_ADC_ConfigChannel+0xa40>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d101      	bne.n	8004260 <HAL_ADC_ConfigChannel+0x930>
 800425c:	4a47      	ldr	r2, [pc, #284]	@ (800437c <HAL_ADC_ConfigChannel+0xa4c>)
 800425e:	e000      	b.n	8004262 <HAL_ADC_ConfigChannel+0x932>
 8004260:	4a41      	ldr	r2, [pc, #260]	@ (8004368 <HAL_ADC_ConfigChannel+0xa38>)
 8004262:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004266:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800426a:	4619      	mov	r1, r3
 800426c:	4610      	mov	r0, r2
 800426e:	f7fe fb40 	bl	80028f2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004272:	4b43      	ldr	r3, [pc, #268]	@ (8004380 <HAL_ADC_ConfigChannel+0xa50>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	099b      	lsrs	r3, r3, #6
 8004278:	4a42      	ldr	r2, [pc, #264]	@ (8004384 <HAL_ADC_ConfigChannel+0xa54>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	099b      	lsrs	r3, r3, #6
 8004280:	3301      	adds	r3, #1
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004286:	e002      	b.n	800428e <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	3b01      	subs	r3, #1
 800428c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1f9      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004294:	e05e      	b.n	8004354 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a3b      	ldr	r2, [pc, #236]	@ (8004388 <HAL_ADC_ConfigChannel+0xa58>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d120      	bne.n	80042e2 <HAL_ADC_ConfigChannel+0x9b2>
 80042a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d11a      	bne.n	80042e2 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a30      	ldr	r2, [pc, #192]	@ (8004374 <HAL_ADC_ConfigChannel+0xa44>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d14e      	bne.n	8004354 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a2c      	ldr	r2, [pc, #176]	@ (800436c <HAL_ADC_ConfigChannel+0xa3c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d004      	beq.n	80042ca <HAL_ADC_ConfigChannel+0x99a>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004370 <HAL_ADC_ConfigChannel+0xa40>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d101      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x99e>
 80042ca:	4a2c      	ldr	r2, [pc, #176]	@ (800437c <HAL_ADC_ConfigChannel+0xa4c>)
 80042cc:	e000      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x9a0>
 80042ce:	4a26      	ldr	r2, [pc, #152]	@ (8004368 <HAL_ADC_ConfigChannel+0xa38>)
 80042d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042d8:	4619      	mov	r1, r3
 80042da:	4610      	mov	r0, r2
 80042dc:	f7fe fb09 	bl	80028f2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042e0:	e038      	b.n	8004354 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a29      	ldr	r2, [pc, #164]	@ (800438c <HAL_ADC_ConfigChannel+0xa5c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d133      	bne.n	8004354 <HAL_ADC_ConfigChannel+0xa24>
 80042ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d12d      	bne.n	8004354 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004374 <HAL_ADC_ConfigChannel+0xa44>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d128      	bne.n	8004354 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a19      	ldr	r2, [pc, #100]	@ (800436c <HAL_ADC_ConfigChannel+0xa3c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d004      	beq.n	8004316 <HAL_ADC_ConfigChannel+0x9e6>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a17      	ldr	r2, [pc, #92]	@ (8004370 <HAL_ADC_ConfigChannel+0xa40>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d101      	bne.n	800431a <HAL_ADC_ConfigChannel+0x9ea>
 8004316:	4a19      	ldr	r2, [pc, #100]	@ (800437c <HAL_ADC_ConfigChannel+0xa4c>)
 8004318:	e000      	b.n	800431c <HAL_ADC_ConfigChannel+0x9ec>
 800431a:	4a13      	ldr	r2, [pc, #76]	@ (8004368 <HAL_ADC_ConfigChannel+0xa38>)
 800431c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004320:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f7fe fae3 	bl	80028f2 <LL_ADC_SetCommonPathInternalCh>
 800432c:	e012      	b.n	8004354 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004332:	f043 0220 	orr.w	r2, r3, #32
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004340:	e008      	b.n	8004354 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004346:	f043 0220 	orr.w	r2, r3, #32
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800435c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004360:	4618      	mov	r0, r3
 8004362:	37e4      	adds	r7, #228	@ 0xe4
 8004364:	46bd      	mov	sp, r7
 8004366:	bd90      	pop	{r4, r7, pc}
 8004368:	58026300 	.word	0x58026300
 800436c:	40022000 	.word	0x40022000
 8004370:	40022100 	.word	0x40022100
 8004374:	58026000 	.word	0x58026000
 8004378:	c7520000 	.word	0xc7520000
 800437c:	40022300 	.word	0x40022300
 8004380:	24000054 	.word	0x24000054
 8004384:	053e2d63 	.word	0x053e2d63
 8004388:	c3210000 	.word	0xc3210000
 800438c:	cb840000 	.word	0xcb840000

08004390 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4618      	mov	r0, r3
 800439e:	f7fe fd33 	bl	8002e08 <LL_ADC_IsEnabled>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d16e      	bne.n	8004486 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	4b38      	ldr	r3, [pc, #224]	@ (8004490 <ADC_Enable+0x100>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00d      	beq.n	80043d2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043ba:	f043 0210 	orr.w	r2, r3, #16
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043c6:	f043 0201 	orr.w	r2, r3, #1
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e05a      	b.n	8004488 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fe fd02 	bl	8002de0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80043dc:	f7fe fa30 	bl	8002840 <HAL_GetTick>
 80043e0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a2b      	ldr	r2, [pc, #172]	@ (8004494 <ADC_Enable+0x104>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d004      	beq.n	80043f6 <ADC_Enable+0x66>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a29      	ldr	r2, [pc, #164]	@ (8004498 <ADC_Enable+0x108>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d101      	bne.n	80043fa <ADC_Enable+0x6a>
 80043f6:	4b29      	ldr	r3, [pc, #164]	@ (800449c <ADC_Enable+0x10c>)
 80043f8:	e000      	b.n	80043fc <ADC_Enable+0x6c>
 80043fa:	4b29      	ldr	r3, [pc, #164]	@ (80044a0 <ADC_Enable+0x110>)
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fe fc85 	bl	8002d0c <LL_ADC_GetMultimode>
 8004402:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a23      	ldr	r2, [pc, #140]	@ (8004498 <ADC_Enable+0x108>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d002      	beq.n	8004414 <ADC_Enable+0x84>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	e000      	b.n	8004416 <ADC_Enable+0x86>
 8004414:	4b1f      	ldr	r3, [pc, #124]	@ (8004494 <ADC_Enable+0x104>)
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6812      	ldr	r2, [r2, #0]
 800441a:	4293      	cmp	r3, r2
 800441c:	d02c      	beq.n	8004478 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d130      	bne.n	8004486 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004424:	e028      	b.n	8004478 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f7fe fcec 	bl	8002e08 <LL_ADC_IsEnabled>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d104      	bne.n	8004440 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f7fe fcd0 	bl	8002de0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004440:	f7fe f9fe 	bl	8002840 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d914      	bls.n	8004478 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b01      	cmp	r3, #1
 800445a:	d00d      	beq.n	8004478 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004460:	f043 0210 	orr.w	r2, r3, #16
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800446c:	f043 0201 	orr.w	r2, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e007      	b.n	8004488 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b01      	cmp	r3, #1
 8004484:	d1cf      	bne.n	8004426 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	8000003f 	.word	0x8000003f
 8004494:	40022000 	.word	0x40022000
 8004498:	40022100 	.word	0x40022100
 800449c:	40022300 	.word	0x40022300
 80044a0:	58026300 	.word	0x58026300

080044a4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044b6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d14b      	bne.n	8004556 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d021      	beq.n	800451c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fe fb1b 	bl	8002b18 <LL_ADC_REG_IsTriggerSourceSWStart>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d032      	beq.n	800454e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d12b      	bne.n	800454e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004506:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d11f      	bne.n	800454e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004512:	f043 0201 	orr.w	r2, r3, #1
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	661a      	str	r2, [r3, #96]	@ 0x60
 800451a:	e018      	b.n	800454e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d111      	bne.n	800454e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800452e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800453a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d105      	bne.n	800454e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004546:	f043 0201 	orr.w	r2, r3, #1
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f7ff f9c6 	bl	80038e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004554:	e00e      	b.n	8004574 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800455a:	f003 0310 	and.w	r3, r3, #16
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f7ff f9da 	bl	800391c <HAL_ADC_ErrorCallback>
}
 8004568:	e004      	b.n	8004574 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	4798      	blx	r3
}
 8004574:	bf00      	nop
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004588:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f7ff f9b2 	bl	80038f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004590:	bf00      	nop
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045b6:	f043 0204 	orr.w	r2, r3, #4
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f7ff f9ac 	bl	800391c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a6c      	ldr	r2, [pc, #432]	@ (800478c <ADC_ConfigureBoostMode+0x1c0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d004      	beq.n	80045e8 <ADC_ConfigureBoostMode+0x1c>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a6b      	ldr	r2, [pc, #428]	@ (8004790 <ADC_ConfigureBoostMode+0x1c4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d109      	bne.n	80045fc <ADC_ConfigureBoostMode+0x30>
 80045e8:	4b6a      	ldr	r3, [pc, #424]	@ (8004794 <ADC_ConfigureBoostMode+0x1c8>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	bf14      	ite	ne
 80045f4:	2301      	movne	r3, #1
 80045f6:	2300      	moveq	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	e008      	b.n	800460e <ADC_ConfigureBoostMode+0x42>
 80045fc:	4b66      	ldr	r3, [pc, #408]	@ (8004798 <ADC_ConfigureBoostMode+0x1cc>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004604:	2b00      	cmp	r3, #0
 8004606:	bf14      	ite	ne
 8004608:	2301      	movne	r3, #1
 800460a:	2300      	moveq	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d01c      	beq.n	800464c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004612:	f004 fa85 	bl	8008b20 <HAL_RCC_GetHCLKFreq>
 8004616:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004620:	d010      	beq.n	8004644 <ADC_ConfigureBoostMode+0x78>
 8004622:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004626:	d873      	bhi.n	8004710 <ADC_ConfigureBoostMode+0x144>
 8004628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800462c:	d002      	beq.n	8004634 <ADC_ConfigureBoostMode+0x68>
 800462e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004632:	d16d      	bne.n	8004710 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	0c1b      	lsrs	r3, r3, #16
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004640:	60fb      	str	r3, [r7, #12]
        break;
 8004642:	e068      	b.n	8004716 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	089b      	lsrs	r3, r3, #2
 8004648:	60fb      	str	r3, [r7, #12]
        break;
 800464a:	e064      	b.n	8004716 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800464c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004650:	f04f 0100 	mov.w	r1, #0
 8004654:	f005 fc60 	bl	8009f18 <HAL_RCCEx_GetPeriphCLKFreq>
 8004658:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004662:	d051      	beq.n	8004708 <ADC_ConfigureBoostMode+0x13c>
 8004664:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004668:	d854      	bhi.n	8004714 <ADC_ConfigureBoostMode+0x148>
 800466a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800466e:	d047      	beq.n	8004700 <ADC_ConfigureBoostMode+0x134>
 8004670:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004674:	d84e      	bhi.n	8004714 <ADC_ConfigureBoostMode+0x148>
 8004676:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800467a:	d03d      	beq.n	80046f8 <ADC_ConfigureBoostMode+0x12c>
 800467c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004680:	d848      	bhi.n	8004714 <ADC_ConfigureBoostMode+0x148>
 8004682:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004686:	d033      	beq.n	80046f0 <ADC_ConfigureBoostMode+0x124>
 8004688:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800468c:	d842      	bhi.n	8004714 <ADC_ConfigureBoostMode+0x148>
 800468e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004692:	d029      	beq.n	80046e8 <ADC_ConfigureBoostMode+0x11c>
 8004694:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004698:	d83c      	bhi.n	8004714 <ADC_ConfigureBoostMode+0x148>
 800469a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800469e:	d01a      	beq.n	80046d6 <ADC_ConfigureBoostMode+0x10a>
 80046a0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80046a4:	d836      	bhi.n	8004714 <ADC_ConfigureBoostMode+0x148>
 80046a6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80046aa:	d014      	beq.n	80046d6 <ADC_ConfigureBoostMode+0x10a>
 80046ac:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80046b0:	d830      	bhi.n	8004714 <ADC_ConfigureBoostMode+0x148>
 80046b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046b6:	d00e      	beq.n	80046d6 <ADC_ConfigureBoostMode+0x10a>
 80046b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046bc:	d82a      	bhi.n	8004714 <ADC_ConfigureBoostMode+0x148>
 80046be:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80046c2:	d008      	beq.n	80046d6 <ADC_ConfigureBoostMode+0x10a>
 80046c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80046c8:	d824      	bhi.n	8004714 <ADC_ConfigureBoostMode+0x148>
 80046ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046ce:	d002      	beq.n	80046d6 <ADC_ConfigureBoostMode+0x10a>
 80046d0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80046d4:	d11e      	bne.n	8004714 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	0c9b      	lsrs	r3, r3, #18
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e4:	60fb      	str	r3, [r7, #12]
        break;
 80046e6:	e016      	b.n	8004716 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	091b      	lsrs	r3, r3, #4
 80046ec:	60fb      	str	r3, [r7, #12]
        break;
 80046ee:	e012      	b.n	8004716 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	60fb      	str	r3, [r7, #12]
        break;
 80046f6:	e00e      	b.n	8004716 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	099b      	lsrs	r3, r3, #6
 80046fc:	60fb      	str	r3, [r7, #12]
        break;
 80046fe:	e00a      	b.n	8004716 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	09db      	lsrs	r3, r3, #7
 8004704:	60fb      	str	r3, [r7, #12]
        break;
 8004706:	e006      	b.n	8004716 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	0a1b      	lsrs	r3, r3, #8
 800470c:	60fb      	str	r3, [r7, #12]
        break;
 800470e:	e002      	b.n	8004716 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004710:	bf00      	nop
 8004712:	e000      	b.n	8004716 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004714:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	085b      	lsrs	r3, r3, #1
 800471a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4a1f      	ldr	r2, [pc, #124]	@ (800479c <ADC_ConfigureBoostMode+0x1d0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d808      	bhi.n	8004736 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004732:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004734:	e025      	b.n	8004782 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4a19      	ldr	r2, [pc, #100]	@ (80047a0 <ADC_ConfigureBoostMode+0x1d4>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d80a      	bhi.n	8004754 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004750:	609a      	str	r2, [r3, #8]
}
 8004752:	e016      	b.n	8004782 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4a13      	ldr	r2, [pc, #76]	@ (80047a4 <ADC_ConfigureBoostMode+0x1d8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d80a      	bhi.n	8004772 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800476e:	609a      	str	r2, [r3, #8]
}
 8004770:	e007      	b.n	8004782 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004780:	609a      	str	r2, [r3, #8]
}
 8004782:	bf00      	nop
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40022000 	.word	0x40022000
 8004790:	40022100 	.word	0x40022100
 8004794:	40022300 	.word	0x40022300
 8004798:	58026300 	.word	0x58026300
 800479c:	005f5e10 	.word	0x005f5e10
 80047a0:	00bebc20 	.word	0x00bebc20
 80047a4:	017d7840 	.word	0x017d7840

080047a8 <LL_ADC_IsEnabled>:
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <LL_ADC_IsEnabled+0x18>
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <LL_ADC_IsEnabled+0x1a>
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <LL_ADC_REG_IsConversionOngoing>:
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d101      	bne.n	80047e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004858:	b590      	push	{r4, r7, lr}
 800485a:	b0a3      	sub	sp, #140	@ 0x8c
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004872:	2302      	movs	r3, #2
 8004874:	e0c1      	b.n	80049fa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800487e:	2300      	movs	r3, #0
 8004880:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004882:	2300      	movs	r3, #0
 8004884:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a5e      	ldr	r2, [pc, #376]	@ (8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d102      	bne.n	8004896 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004890:	4b5d      	ldr	r3, [pc, #372]	@ (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	e001      	b.n	800489a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004896:	2300      	movs	r3, #0
 8004898:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10b      	bne.n	80048b8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048a4:	f043 0220 	orr.w	r2, r3, #32
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e0a0      	b.n	80049fa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff ff87 	bl	80047ce <LL_ADC_REG_IsConversionOngoing>
 80048c0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff ff80 	bl	80047ce <LL_ADC_REG_IsConversionOngoing>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f040 8081 	bne.w	80049d8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80048d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d17c      	bne.n	80049d8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a48      	ldr	r2, [pc, #288]	@ (8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d004      	beq.n	80048f2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a46      	ldr	r2, [pc, #280]	@ (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d101      	bne.n	80048f6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80048f2:	4b46      	ldr	r3, [pc, #280]	@ (8004a0c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80048f4:	e000      	b.n	80048f8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80048f6:	4b46      	ldr	r3, [pc, #280]	@ (8004a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80048f8:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d039      	beq.n	8004976 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004902:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	431a      	orrs	r2, r3
 8004910:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004912:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a3a      	ldr	r2, [pc, #232]	@ (8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d004      	beq.n	8004928 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a39      	ldr	r2, [pc, #228]	@ (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d10e      	bne.n	8004946 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004928:	4836      	ldr	r0, [pc, #216]	@ (8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800492a:	f7ff ff3d 	bl	80047a8 <LL_ADC_IsEnabled>
 800492e:	4604      	mov	r4, r0
 8004930:	4835      	ldr	r0, [pc, #212]	@ (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004932:	f7ff ff39 	bl	80047a8 <LL_ADC_IsEnabled>
 8004936:	4603      	mov	r3, r0
 8004938:	4323      	orrs	r3, r4
 800493a:	2b00      	cmp	r3, #0
 800493c:	bf0c      	ite	eq
 800493e:	2301      	moveq	r3, #1
 8004940:	2300      	movne	r3, #0
 8004942:	b2db      	uxtb	r3, r3
 8004944:	e008      	b.n	8004958 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004946:	4833      	ldr	r0, [pc, #204]	@ (8004a14 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004948:	f7ff ff2e 	bl	80047a8 <LL_ADC_IsEnabled>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	bf0c      	ite	eq
 8004952:	2301      	moveq	r3, #1
 8004954:	2300      	movne	r3, #0
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d047      	beq.n	80049ec <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800495c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	4b2d      	ldr	r3, [pc, #180]	@ (8004a18 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004962:	4013      	ands	r3, r2
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	6811      	ldr	r1, [r2, #0]
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	6892      	ldr	r2, [r2, #8]
 800496c:	430a      	orrs	r2, r1
 800496e:	431a      	orrs	r2, r3
 8004970:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004972:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004974:	e03a      	b.n	80049ec <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004976:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800497e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004980:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a1f      	ldr	r2, [pc, #124]	@ (8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d004      	beq.n	8004996 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1d      	ldr	r2, [pc, #116]	@ (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d10e      	bne.n	80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004996:	481b      	ldr	r0, [pc, #108]	@ (8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004998:	f7ff ff06 	bl	80047a8 <LL_ADC_IsEnabled>
 800499c:	4604      	mov	r4, r0
 800499e:	481a      	ldr	r0, [pc, #104]	@ (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049a0:	f7ff ff02 	bl	80047a8 <LL_ADC_IsEnabled>
 80049a4:	4603      	mov	r3, r0
 80049a6:	4323      	orrs	r3, r4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	bf0c      	ite	eq
 80049ac:	2301      	moveq	r3, #1
 80049ae:	2300      	movne	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	e008      	b.n	80049c6 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80049b4:	4817      	ldr	r0, [pc, #92]	@ (8004a14 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80049b6:	f7ff fef7 	bl	80047a8 <LL_ADC_IsEnabled>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	bf0c      	ite	eq
 80049c0:	2301      	moveq	r3, #1
 80049c2:	2300      	movne	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d010      	beq.n	80049ec <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80049ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	4b12      	ldr	r3, [pc, #72]	@ (8004a18 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80049d4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049d6:	e009      	b.n	80049ec <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049dc:	f043 0220 	orr.w	r2, r3, #32
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80049ea:	e000      	b.n	80049ee <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80049f6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	378c      	adds	r7, #140	@ 0x8c
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd90      	pop	{r4, r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40022000 	.word	0x40022000
 8004a08:	40022100 	.word	0x40022100
 8004a0c:	40022300 	.word	0x40022300
 8004a10:	58026300 	.word	0x58026300
 8004a14:	58026000 	.word	0x58026000
 8004a18:	fffff0e0 	.word	0xfffff0e0

08004a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a5c <__NVIC_SetPriorityGrouping+0x40>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a38:	4013      	ands	r3, r2
 8004a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004a44:	4b06      	ldr	r3, [pc, #24]	@ (8004a60 <__NVIC_SetPriorityGrouping+0x44>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a4a:	4a04      	ldr	r2, [pc, #16]	@ (8004a5c <__NVIC_SetPriorityGrouping+0x40>)
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	60d3      	str	r3, [r2, #12]
}
 8004a50:	bf00      	nop
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	e000ed00 	.word	0xe000ed00
 8004a60:	05fa0000 	.word	0x05fa0000

08004a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a68:	4b04      	ldr	r3, [pc, #16]	@ (8004a7c <__NVIC_GetPriorityGrouping+0x18>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	0a1b      	lsrs	r3, r3, #8
 8004a6e:	f003 0307 	and.w	r3, r3, #7
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	e000ed00 	.word	0xe000ed00

08004a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	db0b      	blt.n	8004aaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a92:	88fb      	ldrh	r3, [r7, #6]
 8004a94:	f003 021f 	and.w	r2, r3, #31
 8004a98:	4907      	ldr	r1, [pc, #28]	@ (8004ab8 <__NVIC_EnableIRQ+0x38>)
 8004a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8004aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	e000e100 	.word	0xe000e100

08004abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	6039      	str	r1, [r7, #0]
 8004ac6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ac8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	db0a      	blt.n	8004ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	490c      	ldr	r1, [pc, #48]	@ (8004b08 <__NVIC_SetPriority+0x4c>)
 8004ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ada:	0112      	lsls	r2, r2, #4
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	440b      	add	r3, r1
 8004ae0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ae4:	e00a      	b.n	8004afc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	4908      	ldr	r1, [pc, #32]	@ (8004b0c <__NVIC_SetPriority+0x50>)
 8004aec:	88fb      	ldrh	r3, [r7, #6]
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	3b04      	subs	r3, #4
 8004af4:	0112      	lsls	r2, r2, #4
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	440b      	add	r3, r1
 8004afa:	761a      	strb	r2, [r3, #24]
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	e000e100 	.word	0xe000e100
 8004b0c:	e000ed00 	.word	0xe000ed00

08004b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b089      	sub	sp, #36	@ 0x24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f1c3 0307 	rsb	r3, r3, #7
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	bf28      	it	cs
 8004b2e:	2304      	movcs	r3, #4
 8004b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	3304      	adds	r3, #4
 8004b36:	2b06      	cmp	r3, #6
 8004b38:	d902      	bls.n	8004b40 <NVIC_EncodePriority+0x30>
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	3b03      	subs	r3, #3
 8004b3e:	e000      	b.n	8004b42 <NVIC_EncodePriority+0x32>
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b44:	f04f 32ff 	mov.w	r2, #4294967295
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	43da      	mvns	r2, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	401a      	ands	r2, r3
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b58:	f04f 31ff 	mov.w	r1, #4294967295
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b62:	43d9      	mvns	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b68:	4313      	orrs	r3, r2
         );
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3724      	adds	r7, #36	@ 0x24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
	...

08004b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b88:	d301      	bcc.n	8004b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e00f      	b.n	8004bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8004bb8 <SysTick_Config+0x40>)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b96:	210f      	movs	r1, #15
 8004b98:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9c:	f7ff ff8e 	bl	8004abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ba0:	4b05      	ldr	r3, [pc, #20]	@ (8004bb8 <SysTick_Config+0x40>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ba6:	4b04      	ldr	r3, [pc, #16]	@ (8004bb8 <SysTick_Config+0x40>)
 8004ba8:	2207      	movs	r2, #7
 8004baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	e000e010 	.word	0xe000e010

08004bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7ff ff29 	bl	8004a1c <__NVIC_SetPriorityGrouping>
}
 8004bca:	bf00      	nop
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b086      	sub	sp, #24
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	4603      	mov	r3, r0
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	607a      	str	r2, [r7, #4]
 8004bde:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004be0:	f7ff ff40 	bl	8004a64 <__NVIC_GetPriorityGrouping>
 8004be4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	68b9      	ldr	r1, [r7, #8]
 8004bea:	6978      	ldr	r0, [r7, #20]
 8004bec:	f7ff ff90 	bl	8004b10 <NVIC_EncodePriority>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff ff5f 	bl	8004abc <__NVIC_SetPriority>
}
 8004bfe:	bf00      	nop
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b082      	sub	sp, #8
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff ff33 	bl	8004a80 <__NVIC_EnableIRQ>
}
 8004c1a:	bf00      	nop
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b082      	sub	sp, #8
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7ff ffa4 	bl	8004b78 <SysTick_Config>
 8004c30:	4603      	mov	r3, r0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004c44:	f7fd fdfc 	bl	8002840 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e312      	b.n	800527a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a66      	ldr	r2, [pc, #408]	@ (8004df4 <HAL_DMA_Init+0x1b8>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d04a      	beq.n	8004cf4 <HAL_DMA_Init+0xb8>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a65      	ldr	r2, [pc, #404]	@ (8004df8 <HAL_DMA_Init+0x1bc>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d045      	beq.n	8004cf4 <HAL_DMA_Init+0xb8>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a63      	ldr	r2, [pc, #396]	@ (8004dfc <HAL_DMA_Init+0x1c0>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d040      	beq.n	8004cf4 <HAL_DMA_Init+0xb8>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a62      	ldr	r2, [pc, #392]	@ (8004e00 <HAL_DMA_Init+0x1c4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d03b      	beq.n	8004cf4 <HAL_DMA_Init+0xb8>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a60      	ldr	r2, [pc, #384]	@ (8004e04 <HAL_DMA_Init+0x1c8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d036      	beq.n	8004cf4 <HAL_DMA_Init+0xb8>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a5f      	ldr	r2, [pc, #380]	@ (8004e08 <HAL_DMA_Init+0x1cc>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d031      	beq.n	8004cf4 <HAL_DMA_Init+0xb8>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a5d      	ldr	r2, [pc, #372]	@ (8004e0c <HAL_DMA_Init+0x1d0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d02c      	beq.n	8004cf4 <HAL_DMA_Init+0xb8>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a5c      	ldr	r2, [pc, #368]	@ (8004e10 <HAL_DMA_Init+0x1d4>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d027      	beq.n	8004cf4 <HAL_DMA_Init+0xb8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a5a      	ldr	r2, [pc, #360]	@ (8004e14 <HAL_DMA_Init+0x1d8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d022      	beq.n	8004cf4 <HAL_DMA_Init+0xb8>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a59      	ldr	r2, [pc, #356]	@ (8004e18 <HAL_DMA_Init+0x1dc>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d01d      	beq.n	8004cf4 <HAL_DMA_Init+0xb8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a57      	ldr	r2, [pc, #348]	@ (8004e1c <HAL_DMA_Init+0x1e0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d018      	beq.n	8004cf4 <HAL_DMA_Init+0xb8>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a56      	ldr	r2, [pc, #344]	@ (8004e20 <HAL_DMA_Init+0x1e4>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d013      	beq.n	8004cf4 <HAL_DMA_Init+0xb8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a54      	ldr	r2, [pc, #336]	@ (8004e24 <HAL_DMA_Init+0x1e8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00e      	beq.n	8004cf4 <HAL_DMA_Init+0xb8>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a53      	ldr	r2, [pc, #332]	@ (8004e28 <HAL_DMA_Init+0x1ec>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d009      	beq.n	8004cf4 <HAL_DMA_Init+0xb8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a51      	ldr	r2, [pc, #324]	@ (8004e2c <HAL_DMA_Init+0x1f0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d004      	beq.n	8004cf4 <HAL_DMA_Init+0xb8>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a50      	ldr	r2, [pc, #320]	@ (8004e30 <HAL_DMA_Init+0x1f4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d101      	bne.n	8004cf8 <HAL_DMA_Init+0xbc>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e000      	b.n	8004cfa <HAL_DMA_Init+0xbe>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 813c 	beq.w	8004f78 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a37      	ldr	r2, [pc, #220]	@ (8004df4 <HAL_DMA_Init+0x1b8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d04a      	beq.n	8004db0 <HAL_DMA_Init+0x174>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a36      	ldr	r2, [pc, #216]	@ (8004df8 <HAL_DMA_Init+0x1bc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d045      	beq.n	8004db0 <HAL_DMA_Init+0x174>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a34      	ldr	r2, [pc, #208]	@ (8004dfc <HAL_DMA_Init+0x1c0>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d040      	beq.n	8004db0 <HAL_DMA_Init+0x174>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a33      	ldr	r2, [pc, #204]	@ (8004e00 <HAL_DMA_Init+0x1c4>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d03b      	beq.n	8004db0 <HAL_DMA_Init+0x174>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a31      	ldr	r2, [pc, #196]	@ (8004e04 <HAL_DMA_Init+0x1c8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d036      	beq.n	8004db0 <HAL_DMA_Init+0x174>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a30      	ldr	r2, [pc, #192]	@ (8004e08 <HAL_DMA_Init+0x1cc>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d031      	beq.n	8004db0 <HAL_DMA_Init+0x174>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a2e      	ldr	r2, [pc, #184]	@ (8004e0c <HAL_DMA_Init+0x1d0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d02c      	beq.n	8004db0 <HAL_DMA_Init+0x174>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a2d      	ldr	r2, [pc, #180]	@ (8004e10 <HAL_DMA_Init+0x1d4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d027      	beq.n	8004db0 <HAL_DMA_Init+0x174>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a2b      	ldr	r2, [pc, #172]	@ (8004e14 <HAL_DMA_Init+0x1d8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d022      	beq.n	8004db0 <HAL_DMA_Init+0x174>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a2a      	ldr	r2, [pc, #168]	@ (8004e18 <HAL_DMA_Init+0x1dc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d01d      	beq.n	8004db0 <HAL_DMA_Init+0x174>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a28      	ldr	r2, [pc, #160]	@ (8004e1c <HAL_DMA_Init+0x1e0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d018      	beq.n	8004db0 <HAL_DMA_Init+0x174>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a27      	ldr	r2, [pc, #156]	@ (8004e20 <HAL_DMA_Init+0x1e4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d013      	beq.n	8004db0 <HAL_DMA_Init+0x174>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a25      	ldr	r2, [pc, #148]	@ (8004e24 <HAL_DMA_Init+0x1e8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00e      	beq.n	8004db0 <HAL_DMA_Init+0x174>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a24      	ldr	r2, [pc, #144]	@ (8004e28 <HAL_DMA_Init+0x1ec>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d009      	beq.n	8004db0 <HAL_DMA_Init+0x174>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a22      	ldr	r2, [pc, #136]	@ (8004e2c <HAL_DMA_Init+0x1f0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d004      	beq.n	8004db0 <HAL_DMA_Init+0x174>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a21      	ldr	r2, [pc, #132]	@ (8004e30 <HAL_DMA_Init+0x1f4>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d108      	bne.n	8004dc2 <HAL_DMA_Init+0x186>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0201 	bic.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	e007      	b.n	8004dd2 <HAL_DMA_Init+0x196>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0201 	bic.w	r2, r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004dd2:	e02f      	b.n	8004e34 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dd4:	f7fd fd34 	bl	8002840 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b05      	cmp	r3, #5
 8004de0:	d928      	bls.n	8004e34 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2220      	movs	r2, #32
 8004de6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2203      	movs	r2, #3
 8004dec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e242      	b.n	800527a <HAL_DMA_Init+0x63e>
 8004df4:	40020010 	.word	0x40020010
 8004df8:	40020028 	.word	0x40020028
 8004dfc:	40020040 	.word	0x40020040
 8004e00:	40020058 	.word	0x40020058
 8004e04:	40020070 	.word	0x40020070
 8004e08:	40020088 	.word	0x40020088
 8004e0c:	400200a0 	.word	0x400200a0
 8004e10:	400200b8 	.word	0x400200b8
 8004e14:	40020410 	.word	0x40020410
 8004e18:	40020428 	.word	0x40020428
 8004e1c:	40020440 	.word	0x40020440
 8004e20:	40020458 	.word	0x40020458
 8004e24:	40020470 	.word	0x40020470
 8004e28:	40020488 	.word	0x40020488
 8004e2c:	400204a0 	.word	0x400204a0
 8004e30:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1c8      	bne.n	8004dd4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4b83      	ldr	r3, [pc, #524]	@ (800505c <HAL_DMA_Init+0x420>)
 8004e4e:	4013      	ands	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004e5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e66:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e72:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d107      	bne.n	8004e98 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e90:	4313      	orrs	r3, r2
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b28      	cmp	r3, #40	@ 0x28
 8004e9e:	d903      	bls.n	8004ea8 <HAL_DMA_Init+0x26c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ea6:	d91f      	bls.n	8004ee8 <HAL_DMA_Init+0x2ac>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b3e      	cmp	r3, #62	@ 0x3e
 8004eae:	d903      	bls.n	8004eb8 <HAL_DMA_Init+0x27c>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2b42      	cmp	r3, #66	@ 0x42
 8004eb6:	d917      	bls.n	8004ee8 <HAL_DMA_Init+0x2ac>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b46      	cmp	r3, #70	@ 0x46
 8004ebe:	d903      	bls.n	8004ec8 <HAL_DMA_Init+0x28c>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2b48      	cmp	r3, #72	@ 0x48
 8004ec6:	d90f      	bls.n	8004ee8 <HAL_DMA_Init+0x2ac>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2b4e      	cmp	r3, #78	@ 0x4e
 8004ece:	d903      	bls.n	8004ed8 <HAL_DMA_Init+0x29c>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b52      	cmp	r3, #82	@ 0x52
 8004ed6:	d907      	bls.n	8004ee8 <HAL_DMA_Init+0x2ac>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2b73      	cmp	r3, #115	@ 0x73
 8004ede:	d905      	bls.n	8004eec <HAL_DMA_Init+0x2b0>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b77      	cmp	r3, #119	@ 0x77
 8004ee6:	d801      	bhi.n	8004eec <HAL_DMA_Init+0x2b0>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e000      	b.n	8004eee <HAL_DMA_Init+0x2b2>
 8004eec:	2300      	movs	r3, #0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ef8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f023 0307 	bic.w	r3, r3, #7
 8004f10:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d117      	bne.n	8004f54 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00e      	beq.n	8004f54 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f002 fb2e 	bl	8007598 <DMA_CheckFifoParam>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d008      	beq.n	8004f54 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2240      	movs	r2, #64	@ 0x40
 8004f46:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e192      	b.n	800527a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f002 fa69 	bl	8007434 <DMA_CalcBaseAndBitshift>
 8004f62:	4603      	mov	r3, r0
 8004f64:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f6a:	f003 031f 	and.w	r3, r3, #31
 8004f6e:	223f      	movs	r2, #63	@ 0x3f
 8004f70:	409a      	lsls	r2, r3
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	609a      	str	r2, [r3, #8]
 8004f76:	e0c8      	b.n	800510a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a38      	ldr	r2, [pc, #224]	@ (8005060 <HAL_DMA_Init+0x424>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d022      	beq.n	8004fc8 <HAL_DMA_Init+0x38c>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a37      	ldr	r2, [pc, #220]	@ (8005064 <HAL_DMA_Init+0x428>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d01d      	beq.n	8004fc8 <HAL_DMA_Init+0x38c>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a35      	ldr	r2, [pc, #212]	@ (8005068 <HAL_DMA_Init+0x42c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d018      	beq.n	8004fc8 <HAL_DMA_Init+0x38c>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a34      	ldr	r2, [pc, #208]	@ (800506c <HAL_DMA_Init+0x430>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d013      	beq.n	8004fc8 <HAL_DMA_Init+0x38c>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a32      	ldr	r2, [pc, #200]	@ (8005070 <HAL_DMA_Init+0x434>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00e      	beq.n	8004fc8 <HAL_DMA_Init+0x38c>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a31      	ldr	r2, [pc, #196]	@ (8005074 <HAL_DMA_Init+0x438>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d009      	beq.n	8004fc8 <HAL_DMA_Init+0x38c>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a2f      	ldr	r2, [pc, #188]	@ (8005078 <HAL_DMA_Init+0x43c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d004      	beq.n	8004fc8 <HAL_DMA_Init+0x38c>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a2e      	ldr	r2, [pc, #184]	@ (800507c <HAL_DMA_Init+0x440>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d101      	bne.n	8004fcc <HAL_DMA_Init+0x390>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e000      	b.n	8004fce <HAL_DMA_Init+0x392>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 8092 	beq.w	80050f8 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a21      	ldr	r2, [pc, #132]	@ (8005060 <HAL_DMA_Init+0x424>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d021      	beq.n	8005022 <HAL_DMA_Init+0x3e6>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a20      	ldr	r2, [pc, #128]	@ (8005064 <HAL_DMA_Init+0x428>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d01c      	beq.n	8005022 <HAL_DMA_Init+0x3e6>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a1e      	ldr	r2, [pc, #120]	@ (8005068 <HAL_DMA_Init+0x42c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d017      	beq.n	8005022 <HAL_DMA_Init+0x3e6>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a1d      	ldr	r2, [pc, #116]	@ (800506c <HAL_DMA_Init+0x430>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d012      	beq.n	8005022 <HAL_DMA_Init+0x3e6>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a1b      	ldr	r2, [pc, #108]	@ (8005070 <HAL_DMA_Init+0x434>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00d      	beq.n	8005022 <HAL_DMA_Init+0x3e6>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a1a      	ldr	r2, [pc, #104]	@ (8005074 <HAL_DMA_Init+0x438>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d008      	beq.n	8005022 <HAL_DMA_Init+0x3e6>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a18      	ldr	r2, [pc, #96]	@ (8005078 <HAL_DMA_Init+0x43c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d003      	beq.n	8005022 <HAL_DMA_Init+0x3e6>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a17      	ldr	r2, [pc, #92]	@ (800507c <HAL_DMA_Init+0x440>)
 8005020:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2202      	movs	r2, #2
 8005026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	4b10      	ldr	r3, [pc, #64]	@ (8005080 <HAL_DMA_Init+0x444>)
 800503e:	4013      	ands	r3, r2
 8005040:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	2b40      	cmp	r3, #64	@ 0x40
 8005048:	d01c      	beq.n	8005084 <HAL_DMA_Init+0x448>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	2b80      	cmp	r3, #128	@ 0x80
 8005050:	d102      	bne.n	8005058 <HAL_DMA_Init+0x41c>
 8005052:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005056:	e016      	b.n	8005086 <HAL_DMA_Init+0x44a>
 8005058:	2300      	movs	r3, #0
 800505a:	e014      	b.n	8005086 <HAL_DMA_Init+0x44a>
 800505c:	fe10803f 	.word	0xfe10803f
 8005060:	58025408 	.word	0x58025408
 8005064:	5802541c 	.word	0x5802541c
 8005068:	58025430 	.word	0x58025430
 800506c:	58025444 	.word	0x58025444
 8005070:	58025458 	.word	0x58025458
 8005074:	5802546c 	.word	0x5802546c
 8005078:	58025480 	.word	0x58025480
 800507c:	58025494 	.word	0x58025494
 8005080:	fffe000f 	.word	0xfffe000f
 8005084:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	68d2      	ldr	r2, [r2, #12]
 800508a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800508c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005094:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800509c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80050a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80050ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80050b4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	4b6e      	ldr	r3, [pc, #440]	@ (8005284 <HAL_DMA_Init+0x648>)
 80050cc:	4413      	add	r3, r2
 80050ce:	4a6e      	ldr	r2, [pc, #440]	@ (8005288 <HAL_DMA_Init+0x64c>)
 80050d0:	fba2 2303 	umull	r2, r3, r2, r3
 80050d4:	091b      	lsrs	r3, r3, #4
 80050d6:	009a      	lsls	r2, r3, #2
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f002 f9a9 	bl	8007434 <DMA_CalcBaseAndBitshift>
 80050e2:	4603      	mov	r3, r0
 80050e4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ea:	f003 031f 	and.w	r3, r3, #31
 80050ee:	2201      	movs	r2, #1
 80050f0:	409a      	lsls	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	605a      	str	r2, [r3, #4]
 80050f6:	e008      	b.n	800510a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2240      	movs	r2, #64	@ 0x40
 80050fc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2203      	movs	r2, #3
 8005102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e0b7      	b.n	800527a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a5f      	ldr	r2, [pc, #380]	@ (800528c <HAL_DMA_Init+0x650>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d072      	beq.n	80051fa <HAL_DMA_Init+0x5be>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a5d      	ldr	r2, [pc, #372]	@ (8005290 <HAL_DMA_Init+0x654>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d06d      	beq.n	80051fa <HAL_DMA_Init+0x5be>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a5c      	ldr	r2, [pc, #368]	@ (8005294 <HAL_DMA_Init+0x658>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d068      	beq.n	80051fa <HAL_DMA_Init+0x5be>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a5a      	ldr	r2, [pc, #360]	@ (8005298 <HAL_DMA_Init+0x65c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d063      	beq.n	80051fa <HAL_DMA_Init+0x5be>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a59      	ldr	r2, [pc, #356]	@ (800529c <HAL_DMA_Init+0x660>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d05e      	beq.n	80051fa <HAL_DMA_Init+0x5be>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a57      	ldr	r2, [pc, #348]	@ (80052a0 <HAL_DMA_Init+0x664>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d059      	beq.n	80051fa <HAL_DMA_Init+0x5be>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a56      	ldr	r2, [pc, #344]	@ (80052a4 <HAL_DMA_Init+0x668>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d054      	beq.n	80051fa <HAL_DMA_Init+0x5be>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a54      	ldr	r2, [pc, #336]	@ (80052a8 <HAL_DMA_Init+0x66c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d04f      	beq.n	80051fa <HAL_DMA_Init+0x5be>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a53      	ldr	r2, [pc, #332]	@ (80052ac <HAL_DMA_Init+0x670>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d04a      	beq.n	80051fa <HAL_DMA_Init+0x5be>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a51      	ldr	r2, [pc, #324]	@ (80052b0 <HAL_DMA_Init+0x674>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d045      	beq.n	80051fa <HAL_DMA_Init+0x5be>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a50      	ldr	r2, [pc, #320]	@ (80052b4 <HAL_DMA_Init+0x678>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d040      	beq.n	80051fa <HAL_DMA_Init+0x5be>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a4e      	ldr	r2, [pc, #312]	@ (80052b8 <HAL_DMA_Init+0x67c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d03b      	beq.n	80051fa <HAL_DMA_Init+0x5be>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a4d      	ldr	r2, [pc, #308]	@ (80052bc <HAL_DMA_Init+0x680>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d036      	beq.n	80051fa <HAL_DMA_Init+0x5be>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a4b      	ldr	r2, [pc, #300]	@ (80052c0 <HAL_DMA_Init+0x684>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d031      	beq.n	80051fa <HAL_DMA_Init+0x5be>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a4a      	ldr	r2, [pc, #296]	@ (80052c4 <HAL_DMA_Init+0x688>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d02c      	beq.n	80051fa <HAL_DMA_Init+0x5be>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a48      	ldr	r2, [pc, #288]	@ (80052c8 <HAL_DMA_Init+0x68c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d027      	beq.n	80051fa <HAL_DMA_Init+0x5be>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a47      	ldr	r2, [pc, #284]	@ (80052cc <HAL_DMA_Init+0x690>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d022      	beq.n	80051fa <HAL_DMA_Init+0x5be>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a45      	ldr	r2, [pc, #276]	@ (80052d0 <HAL_DMA_Init+0x694>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d01d      	beq.n	80051fa <HAL_DMA_Init+0x5be>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a44      	ldr	r2, [pc, #272]	@ (80052d4 <HAL_DMA_Init+0x698>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d018      	beq.n	80051fa <HAL_DMA_Init+0x5be>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a42      	ldr	r2, [pc, #264]	@ (80052d8 <HAL_DMA_Init+0x69c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d013      	beq.n	80051fa <HAL_DMA_Init+0x5be>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a41      	ldr	r2, [pc, #260]	@ (80052dc <HAL_DMA_Init+0x6a0>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00e      	beq.n	80051fa <HAL_DMA_Init+0x5be>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a3f      	ldr	r2, [pc, #252]	@ (80052e0 <HAL_DMA_Init+0x6a4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d009      	beq.n	80051fa <HAL_DMA_Init+0x5be>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a3e      	ldr	r2, [pc, #248]	@ (80052e4 <HAL_DMA_Init+0x6a8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d004      	beq.n	80051fa <HAL_DMA_Init+0x5be>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a3c      	ldr	r2, [pc, #240]	@ (80052e8 <HAL_DMA_Init+0x6ac>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d101      	bne.n	80051fe <HAL_DMA_Init+0x5c2>
 80051fa:	2301      	movs	r3, #1
 80051fc:	e000      	b.n	8005200 <HAL_DMA_Init+0x5c4>
 80051fe:	2300      	movs	r3, #0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d032      	beq.n	800526a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f002 fa43 	bl	8007690 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	2b80      	cmp	r3, #128	@ 0x80
 8005210:	d102      	bne.n	8005218 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800522c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d010      	beq.n	8005258 <HAL_DMA_Init+0x61c>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2b08      	cmp	r3, #8
 800523c:	d80c      	bhi.n	8005258 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f002 fac0 	bl	80077c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005254:	605a      	str	r2, [r3, #4]
 8005256:	e008      	b.n	800526a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	a7fdabf8 	.word	0xa7fdabf8
 8005288:	cccccccd 	.word	0xcccccccd
 800528c:	40020010 	.word	0x40020010
 8005290:	40020028 	.word	0x40020028
 8005294:	40020040 	.word	0x40020040
 8005298:	40020058 	.word	0x40020058
 800529c:	40020070 	.word	0x40020070
 80052a0:	40020088 	.word	0x40020088
 80052a4:	400200a0 	.word	0x400200a0
 80052a8:	400200b8 	.word	0x400200b8
 80052ac:	40020410 	.word	0x40020410
 80052b0:	40020428 	.word	0x40020428
 80052b4:	40020440 	.word	0x40020440
 80052b8:	40020458 	.word	0x40020458
 80052bc:	40020470 	.word	0x40020470
 80052c0:	40020488 	.word	0x40020488
 80052c4:	400204a0 	.word	0x400204a0
 80052c8:	400204b8 	.word	0x400204b8
 80052cc:	58025408 	.word	0x58025408
 80052d0:	5802541c 	.word	0x5802541c
 80052d4:	58025430 	.word	0x58025430
 80052d8:	58025444 	.word	0x58025444
 80052dc:	58025458 	.word	0x58025458
 80052e0:	5802546c 	.word	0x5802546c
 80052e4:	58025480 	.word	0x58025480
 80052e8:	58025494 	.word	0x58025494

080052ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e226      	b.n	8005756 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <HAL_DMA_Start_IT+0x2a>
 8005312:	2302      	movs	r3, #2
 8005314:	e21f      	b.n	8005756 <HAL_DMA_Start_IT+0x46a>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b01      	cmp	r3, #1
 8005328:	f040 820a 	bne.w	8005740 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a68      	ldr	r2, [pc, #416]	@ (80054e0 <HAL_DMA_Start_IT+0x1f4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d04a      	beq.n	80053da <HAL_DMA_Start_IT+0xee>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a66      	ldr	r2, [pc, #408]	@ (80054e4 <HAL_DMA_Start_IT+0x1f8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d045      	beq.n	80053da <HAL_DMA_Start_IT+0xee>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a65      	ldr	r2, [pc, #404]	@ (80054e8 <HAL_DMA_Start_IT+0x1fc>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d040      	beq.n	80053da <HAL_DMA_Start_IT+0xee>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a63      	ldr	r2, [pc, #396]	@ (80054ec <HAL_DMA_Start_IT+0x200>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d03b      	beq.n	80053da <HAL_DMA_Start_IT+0xee>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a62      	ldr	r2, [pc, #392]	@ (80054f0 <HAL_DMA_Start_IT+0x204>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d036      	beq.n	80053da <HAL_DMA_Start_IT+0xee>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a60      	ldr	r2, [pc, #384]	@ (80054f4 <HAL_DMA_Start_IT+0x208>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d031      	beq.n	80053da <HAL_DMA_Start_IT+0xee>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a5f      	ldr	r2, [pc, #380]	@ (80054f8 <HAL_DMA_Start_IT+0x20c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d02c      	beq.n	80053da <HAL_DMA_Start_IT+0xee>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a5d      	ldr	r2, [pc, #372]	@ (80054fc <HAL_DMA_Start_IT+0x210>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d027      	beq.n	80053da <HAL_DMA_Start_IT+0xee>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a5c      	ldr	r2, [pc, #368]	@ (8005500 <HAL_DMA_Start_IT+0x214>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d022      	beq.n	80053da <HAL_DMA_Start_IT+0xee>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a5a      	ldr	r2, [pc, #360]	@ (8005504 <HAL_DMA_Start_IT+0x218>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d01d      	beq.n	80053da <HAL_DMA_Start_IT+0xee>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a59      	ldr	r2, [pc, #356]	@ (8005508 <HAL_DMA_Start_IT+0x21c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d018      	beq.n	80053da <HAL_DMA_Start_IT+0xee>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a57      	ldr	r2, [pc, #348]	@ (800550c <HAL_DMA_Start_IT+0x220>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d013      	beq.n	80053da <HAL_DMA_Start_IT+0xee>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a56      	ldr	r2, [pc, #344]	@ (8005510 <HAL_DMA_Start_IT+0x224>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d00e      	beq.n	80053da <HAL_DMA_Start_IT+0xee>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a54      	ldr	r2, [pc, #336]	@ (8005514 <HAL_DMA_Start_IT+0x228>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d009      	beq.n	80053da <HAL_DMA_Start_IT+0xee>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a53      	ldr	r2, [pc, #332]	@ (8005518 <HAL_DMA_Start_IT+0x22c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d004      	beq.n	80053da <HAL_DMA_Start_IT+0xee>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a51      	ldr	r2, [pc, #324]	@ (800551c <HAL_DMA_Start_IT+0x230>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d108      	bne.n	80053ec <HAL_DMA_Start_IT+0x100>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 0201 	bic.w	r2, r2, #1
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e007      	b.n	80053fc <HAL_DMA_Start_IT+0x110>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0201 	bic.w	r2, r2, #1
 80053fa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	68b9      	ldr	r1, [r7, #8]
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f001 fe6a 	bl	80070dc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a34      	ldr	r2, [pc, #208]	@ (80054e0 <HAL_DMA_Start_IT+0x1f4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d04a      	beq.n	80054a8 <HAL_DMA_Start_IT+0x1bc>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a33      	ldr	r2, [pc, #204]	@ (80054e4 <HAL_DMA_Start_IT+0x1f8>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d045      	beq.n	80054a8 <HAL_DMA_Start_IT+0x1bc>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a31      	ldr	r2, [pc, #196]	@ (80054e8 <HAL_DMA_Start_IT+0x1fc>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d040      	beq.n	80054a8 <HAL_DMA_Start_IT+0x1bc>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a30      	ldr	r2, [pc, #192]	@ (80054ec <HAL_DMA_Start_IT+0x200>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d03b      	beq.n	80054a8 <HAL_DMA_Start_IT+0x1bc>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a2e      	ldr	r2, [pc, #184]	@ (80054f0 <HAL_DMA_Start_IT+0x204>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d036      	beq.n	80054a8 <HAL_DMA_Start_IT+0x1bc>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a2d      	ldr	r2, [pc, #180]	@ (80054f4 <HAL_DMA_Start_IT+0x208>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d031      	beq.n	80054a8 <HAL_DMA_Start_IT+0x1bc>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a2b      	ldr	r2, [pc, #172]	@ (80054f8 <HAL_DMA_Start_IT+0x20c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d02c      	beq.n	80054a8 <HAL_DMA_Start_IT+0x1bc>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a2a      	ldr	r2, [pc, #168]	@ (80054fc <HAL_DMA_Start_IT+0x210>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d027      	beq.n	80054a8 <HAL_DMA_Start_IT+0x1bc>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a28      	ldr	r2, [pc, #160]	@ (8005500 <HAL_DMA_Start_IT+0x214>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d022      	beq.n	80054a8 <HAL_DMA_Start_IT+0x1bc>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a27      	ldr	r2, [pc, #156]	@ (8005504 <HAL_DMA_Start_IT+0x218>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d01d      	beq.n	80054a8 <HAL_DMA_Start_IT+0x1bc>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a25      	ldr	r2, [pc, #148]	@ (8005508 <HAL_DMA_Start_IT+0x21c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d018      	beq.n	80054a8 <HAL_DMA_Start_IT+0x1bc>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a24      	ldr	r2, [pc, #144]	@ (800550c <HAL_DMA_Start_IT+0x220>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d013      	beq.n	80054a8 <HAL_DMA_Start_IT+0x1bc>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a22      	ldr	r2, [pc, #136]	@ (8005510 <HAL_DMA_Start_IT+0x224>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d00e      	beq.n	80054a8 <HAL_DMA_Start_IT+0x1bc>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a21      	ldr	r2, [pc, #132]	@ (8005514 <HAL_DMA_Start_IT+0x228>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d009      	beq.n	80054a8 <HAL_DMA_Start_IT+0x1bc>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a1f      	ldr	r2, [pc, #124]	@ (8005518 <HAL_DMA_Start_IT+0x22c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d004      	beq.n	80054a8 <HAL_DMA_Start_IT+0x1bc>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1e      	ldr	r2, [pc, #120]	@ (800551c <HAL_DMA_Start_IT+0x230>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d101      	bne.n	80054ac <HAL_DMA_Start_IT+0x1c0>
 80054a8:	2301      	movs	r3, #1
 80054aa:	e000      	b.n	80054ae <HAL_DMA_Start_IT+0x1c2>
 80054ac:	2300      	movs	r3, #0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d036      	beq.n	8005520 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f023 021e 	bic.w	r2, r3, #30
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0216 	orr.w	r2, r2, #22
 80054c4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d03e      	beq.n	800554c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f042 0208 	orr.w	r2, r2, #8
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	e035      	b.n	800554c <HAL_DMA_Start_IT+0x260>
 80054e0:	40020010 	.word	0x40020010
 80054e4:	40020028 	.word	0x40020028
 80054e8:	40020040 	.word	0x40020040
 80054ec:	40020058 	.word	0x40020058
 80054f0:	40020070 	.word	0x40020070
 80054f4:	40020088 	.word	0x40020088
 80054f8:	400200a0 	.word	0x400200a0
 80054fc:	400200b8 	.word	0x400200b8
 8005500:	40020410 	.word	0x40020410
 8005504:	40020428 	.word	0x40020428
 8005508:	40020440 	.word	0x40020440
 800550c:	40020458 	.word	0x40020458
 8005510:	40020470 	.word	0x40020470
 8005514:	40020488 	.word	0x40020488
 8005518:	400204a0 	.word	0x400204a0
 800551c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f023 020e 	bic.w	r2, r3, #14
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 020a 	orr.w	r2, r2, #10
 8005532:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005538:	2b00      	cmp	r3, #0
 800553a:	d007      	beq.n	800554c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 0204 	orr.w	r2, r2, #4
 800554a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a83      	ldr	r2, [pc, #524]	@ (8005760 <HAL_DMA_Start_IT+0x474>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d072      	beq.n	800563c <HAL_DMA_Start_IT+0x350>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a82      	ldr	r2, [pc, #520]	@ (8005764 <HAL_DMA_Start_IT+0x478>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d06d      	beq.n	800563c <HAL_DMA_Start_IT+0x350>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a80      	ldr	r2, [pc, #512]	@ (8005768 <HAL_DMA_Start_IT+0x47c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d068      	beq.n	800563c <HAL_DMA_Start_IT+0x350>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a7f      	ldr	r2, [pc, #508]	@ (800576c <HAL_DMA_Start_IT+0x480>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d063      	beq.n	800563c <HAL_DMA_Start_IT+0x350>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a7d      	ldr	r2, [pc, #500]	@ (8005770 <HAL_DMA_Start_IT+0x484>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d05e      	beq.n	800563c <HAL_DMA_Start_IT+0x350>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a7c      	ldr	r2, [pc, #496]	@ (8005774 <HAL_DMA_Start_IT+0x488>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d059      	beq.n	800563c <HAL_DMA_Start_IT+0x350>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a7a      	ldr	r2, [pc, #488]	@ (8005778 <HAL_DMA_Start_IT+0x48c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d054      	beq.n	800563c <HAL_DMA_Start_IT+0x350>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a79      	ldr	r2, [pc, #484]	@ (800577c <HAL_DMA_Start_IT+0x490>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d04f      	beq.n	800563c <HAL_DMA_Start_IT+0x350>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a77      	ldr	r2, [pc, #476]	@ (8005780 <HAL_DMA_Start_IT+0x494>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d04a      	beq.n	800563c <HAL_DMA_Start_IT+0x350>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a76      	ldr	r2, [pc, #472]	@ (8005784 <HAL_DMA_Start_IT+0x498>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d045      	beq.n	800563c <HAL_DMA_Start_IT+0x350>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a74      	ldr	r2, [pc, #464]	@ (8005788 <HAL_DMA_Start_IT+0x49c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d040      	beq.n	800563c <HAL_DMA_Start_IT+0x350>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a73      	ldr	r2, [pc, #460]	@ (800578c <HAL_DMA_Start_IT+0x4a0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d03b      	beq.n	800563c <HAL_DMA_Start_IT+0x350>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a71      	ldr	r2, [pc, #452]	@ (8005790 <HAL_DMA_Start_IT+0x4a4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d036      	beq.n	800563c <HAL_DMA_Start_IT+0x350>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a70      	ldr	r2, [pc, #448]	@ (8005794 <HAL_DMA_Start_IT+0x4a8>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d031      	beq.n	800563c <HAL_DMA_Start_IT+0x350>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a6e      	ldr	r2, [pc, #440]	@ (8005798 <HAL_DMA_Start_IT+0x4ac>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d02c      	beq.n	800563c <HAL_DMA_Start_IT+0x350>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a6d      	ldr	r2, [pc, #436]	@ (800579c <HAL_DMA_Start_IT+0x4b0>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d027      	beq.n	800563c <HAL_DMA_Start_IT+0x350>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a6b      	ldr	r2, [pc, #428]	@ (80057a0 <HAL_DMA_Start_IT+0x4b4>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d022      	beq.n	800563c <HAL_DMA_Start_IT+0x350>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a6a      	ldr	r2, [pc, #424]	@ (80057a4 <HAL_DMA_Start_IT+0x4b8>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d01d      	beq.n	800563c <HAL_DMA_Start_IT+0x350>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a68      	ldr	r2, [pc, #416]	@ (80057a8 <HAL_DMA_Start_IT+0x4bc>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d018      	beq.n	800563c <HAL_DMA_Start_IT+0x350>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a67      	ldr	r2, [pc, #412]	@ (80057ac <HAL_DMA_Start_IT+0x4c0>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d013      	beq.n	800563c <HAL_DMA_Start_IT+0x350>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a65      	ldr	r2, [pc, #404]	@ (80057b0 <HAL_DMA_Start_IT+0x4c4>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00e      	beq.n	800563c <HAL_DMA_Start_IT+0x350>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a64      	ldr	r2, [pc, #400]	@ (80057b4 <HAL_DMA_Start_IT+0x4c8>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d009      	beq.n	800563c <HAL_DMA_Start_IT+0x350>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a62      	ldr	r2, [pc, #392]	@ (80057b8 <HAL_DMA_Start_IT+0x4cc>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d004      	beq.n	800563c <HAL_DMA_Start_IT+0x350>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a61      	ldr	r2, [pc, #388]	@ (80057bc <HAL_DMA_Start_IT+0x4d0>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d101      	bne.n	8005640 <HAL_DMA_Start_IT+0x354>
 800563c:	2301      	movs	r3, #1
 800563e:	e000      	b.n	8005642 <HAL_DMA_Start_IT+0x356>
 8005640:	2300      	movs	r3, #0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d01a      	beq.n	800567c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d007      	beq.n	8005664 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800565e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005662:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005676:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800567a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a37      	ldr	r2, [pc, #220]	@ (8005760 <HAL_DMA_Start_IT+0x474>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d04a      	beq.n	800571c <HAL_DMA_Start_IT+0x430>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a36      	ldr	r2, [pc, #216]	@ (8005764 <HAL_DMA_Start_IT+0x478>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d045      	beq.n	800571c <HAL_DMA_Start_IT+0x430>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a34      	ldr	r2, [pc, #208]	@ (8005768 <HAL_DMA_Start_IT+0x47c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d040      	beq.n	800571c <HAL_DMA_Start_IT+0x430>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a33      	ldr	r2, [pc, #204]	@ (800576c <HAL_DMA_Start_IT+0x480>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d03b      	beq.n	800571c <HAL_DMA_Start_IT+0x430>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a31      	ldr	r2, [pc, #196]	@ (8005770 <HAL_DMA_Start_IT+0x484>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d036      	beq.n	800571c <HAL_DMA_Start_IT+0x430>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a30      	ldr	r2, [pc, #192]	@ (8005774 <HAL_DMA_Start_IT+0x488>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d031      	beq.n	800571c <HAL_DMA_Start_IT+0x430>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a2e      	ldr	r2, [pc, #184]	@ (8005778 <HAL_DMA_Start_IT+0x48c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d02c      	beq.n	800571c <HAL_DMA_Start_IT+0x430>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a2d      	ldr	r2, [pc, #180]	@ (800577c <HAL_DMA_Start_IT+0x490>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d027      	beq.n	800571c <HAL_DMA_Start_IT+0x430>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a2b      	ldr	r2, [pc, #172]	@ (8005780 <HAL_DMA_Start_IT+0x494>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d022      	beq.n	800571c <HAL_DMA_Start_IT+0x430>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a2a      	ldr	r2, [pc, #168]	@ (8005784 <HAL_DMA_Start_IT+0x498>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d01d      	beq.n	800571c <HAL_DMA_Start_IT+0x430>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a28      	ldr	r2, [pc, #160]	@ (8005788 <HAL_DMA_Start_IT+0x49c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d018      	beq.n	800571c <HAL_DMA_Start_IT+0x430>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a27      	ldr	r2, [pc, #156]	@ (800578c <HAL_DMA_Start_IT+0x4a0>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d013      	beq.n	800571c <HAL_DMA_Start_IT+0x430>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a25      	ldr	r2, [pc, #148]	@ (8005790 <HAL_DMA_Start_IT+0x4a4>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00e      	beq.n	800571c <HAL_DMA_Start_IT+0x430>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a24      	ldr	r2, [pc, #144]	@ (8005794 <HAL_DMA_Start_IT+0x4a8>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d009      	beq.n	800571c <HAL_DMA_Start_IT+0x430>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a22      	ldr	r2, [pc, #136]	@ (8005798 <HAL_DMA_Start_IT+0x4ac>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d004      	beq.n	800571c <HAL_DMA_Start_IT+0x430>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a21      	ldr	r2, [pc, #132]	@ (800579c <HAL_DMA_Start_IT+0x4b0>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d108      	bne.n	800572e <HAL_DMA_Start_IT+0x442>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0201 	orr.w	r2, r2, #1
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	e012      	b.n	8005754 <HAL_DMA_Start_IT+0x468>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 0201 	orr.w	r2, r2, #1
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	e009      	b.n	8005754 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005746:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005754:	7dfb      	ldrb	r3, [r7, #23]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	40020010 	.word	0x40020010
 8005764:	40020028 	.word	0x40020028
 8005768:	40020040 	.word	0x40020040
 800576c:	40020058 	.word	0x40020058
 8005770:	40020070 	.word	0x40020070
 8005774:	40020088 	.word	0x40020088
 8005778:	400200a0 	.word	0x400200a0
 800577c:	400200b8 	.word	0x400200b8
 8005780:	40020410 	.word	0x40020410
 8005784:	40020428 	.word	0x40020428
 8005788:	40020440 	.word	0x40020440
 800578c:	40020458 	.word	0x40020458
 8005790:	40020470 	.word	0x40020470
 8005794:	40020488 	.word	0x40020488
 8005798:	400204a0 	.word	0x400204a0
 800579c:	400204b8 	.word	0x400204b8
 80057a0:	58025408 	.word	0x58025408
 80057a4:	5802541c 	.word	0x5802541c
 80057a8:	58025430 	.word	0x58025430
 80057ac:	58025444 	.word	0x58025444
 80057b0:	58025458 	.word	0x58025458
 80057b4:	5802546c 	.word	0x5802546c
 80057b8:	58025480 	.word	0x58025480
 80057bc:	58025494 	.word	0x58025494

080057c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80057c8:	f7fd f83a 	bl	8002840 <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e2dc      	b.n	8005d92 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d008      	beq.n	80057f6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2280      	movs	r2, #128	@ 0x80
 80057e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e2cd      	b.n	8005d92 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a76      	ldr	r2, [pc, #472]	@ (80059d4 <HAL_DMA_Abort+0x214>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d04a      	beq.n	8005896 <HAL_DMA_Abort+0xd6>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a74      	ldr	r2, [pc, #464]	@ (80059d8 <HAL_DMA_Abort+0x218>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d045      	beq.n	8005896 <HAL_DMA_Abort+0xd6>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a73      	ldr	r2, [pc, #460]	@ (80059dc <HAL_DMA_Abort+0x21c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d040      	beq.n	8005896 <HAL_DMA_Abort+0xd6>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a71      	ldr	r2, [pc, #452]	@ (80059e0 <HAL_DMA_Abort+0x220>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d03b      	beq.n	8005896 <HAL_DMA_Abort+0xd6>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a70      	ldr	r2, [pc, #448]	@ (80059e4 <HAL_DMA_Abort+0x224>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d036      	beq.n	8005896 <HAL_DMA_Abort+0xd6>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a6e      	ldr	r2, [pc, #440]	@ (80059e8 <HAL_DMA_Abort+0x228>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d031      	beq.n	8005896 <HAL_DMA_Abort+0xd6>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a6d      	ldr	r2, [pc, #436]	@ (80059ec <HAL_DMA_Abort+0x22c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d02c      	beq.n	8005896 <HAL_DMA_Abort+0xd6>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a6b      	ldr	r2, [pc, #428]	@ (80059f0 <HAL_DMA_Abort+0x230>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d027      	beq.n	8005896 <HAL_DMA_Abort+0xd6>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a6a      	ldr	r2, [pc, #424]	@ (80059f4 <HAL_DMA_Abort+0x234>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d022      	beq.n	8005896 <HAL_DMA_Abort+0xd6>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a68      	ldr	r2, [pc, #416]	@ (80059f8 <HAL_DMA_Abort+0x238>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d01d      	beq.n	8005896 <HAL_DMA_Abort+0xd6>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a67      	ldr	r2, [pc, #412]	@ (80059fc <HAL_DMA_Abort+0x23c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d018      	beq.n	8005896 <HAL_DMA_Abort+0xd6>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a65      	ldr	r2, [pc, #404]	@ (8005a00 <HAL_DMA_Abort+0x240>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d013      	beq.n	8005896 <HAL_DMA_Abort+0xd6>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a64      	ldr	r2, [pc, #400]	@ (8005a04 <HAL_DMA_Abort+0x244>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d00e      	beq.n	8005896 <HAL_DMA_Abort+0xd6>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a62      	ldr	r2, [pc, #392]	@ (8005a08 <HAL_DMA_Abort+0x248>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d009      	beq.n	8005896 <HAL_DMA_Abort+0xd6>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a61      	ldr	r2, [pc, #388]	@ (8005a0c <HAL_DMA_Abort+0x24c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d004      	beq.n	8005896 <HAL_DMA_Abort+0xd6>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a5f      	ldr	r2, [pc, #380]	@ (8005a10 <HAL_DMA_Abort+0x250>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d101      	bne.n	800589a <HAL_DMA_Abort+0xda>
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <HAL_DMA_Abort+0xdc>
 800589a:	2300      	movs	r3, #0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d013      	beq.n	80058c8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 021e 	bic.w	r2, r2, #30
 80058ae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	695a      	ldr	r2, [r3, #20]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058be:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	617b      	str	r3, [r7, #20]
 80058c6:	e00a      	b.n	80058de <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 020e 	bic.w	r2, r2, #14
 80058d6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a3c      	ldr	r2, [pc, #240]	@ (80059d4 <HAL_DMA_Abort+0x214>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d072      	beq.n	80059ce <HAL_DMA_Abort+0x20e>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a3a      	ldr	r2, [pc, #232]	@ (80059d8 <HAL_DMA_Abort+0x218>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d06d      	beq.n	80059ce <HAL_DMA_Abort+0x20e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a39      	ldr	r2, [pc, #228]	@ (80059dc <HAL_DMA_Abort+0x21c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d068      	beq.n	80059ce <HAL_DMA_Abort+0x20e>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a37      	ldr	r2, [pc, #220]	@ (80059e0 <HAL_DMA_Abort+0x220>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d063      	beq.n	80059ce <HAL_DMA_Abort+0x20e>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a36      	ldr	r2, [pc, #216]	@ (80059e4 <HAL_DMA_Abort+0x224>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d05e      	beq.n	80059ce <HAL_DMA_Abort+0x20e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a34      	ldr	r2, [pc, #208]	@ (80059e8 <HAL_DMA_Abort+0x228>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d059      	beq.n	80059ce <HAL_DMA_Abort+0x20e>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a33      	ldr	r2, [pc, #204]	@ (80059ec <HAL_DMA_Abort+0x22c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d054      	beq.n	80059ce <HAL_DMA_Abort+0x20e>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a31      	ldr	r2, [pc, #196]	@ (80059f0 <HAL_DMA_Abort+0x230>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d04f      	beq.n	80059ce <HAL_DMA_Abort+0x20e>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a30      	ldr	r2, [pc, #192]	@ (80059f4 <HAL_DMA_Abort+0x234>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d04a      	beq.n	80059ce <HAL_DMA_Abort+0x20e>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a2e      	ldr	r2, [pc, #184]	@ (80059f8 <HAL_DMA_Abort+0x238>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d045      	beq.n	80059ce <HAL_DMA_Abort+0x20e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a2d      	ldr	r2, [pc, #180]	@ (80059fc <HAL_DMA_Abort+0x23c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d040      	beq.n	80059ce <HAL_DMA_Abort+0x20e>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a2b      	ldr	r2, [pc, #172]	@ (8005a00 <HAL_DMA_Abort+0x240>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d03b      	beq.n	80059ce <HAL_DMA_Abort+0x20e>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a2a      	ldr	r2, [pc, #168]	@ (8005a04 <HAL_DMA_Abort+0x244>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d036      	beq.n	80059ce <HAL_DMA_Abort+0x20e>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a28      	ldr	r2, [pc, #160]	@ (8005a08 <HAL_DMA_Abort+0x248>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d031      	beq.n	80059ce <HAL_DMA_Abort+0x20e>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a27      	ldr	r2, [pc, #156]	@ (8005a0c <HAL_DMA_Abort+0x24c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d02c      	beq.n	80059ce <HAL_DMA_Abort+0x20e>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a25      	ldr	r2, [pc, #148]	@ (8005a10 <HAL_DMA_Abort+0x250>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d027      	beq.n	80059ce <HAL_DMA_Abort+0x20e>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a24      	ldr	r2, [pc, #144]	@ (8005a14 <HAL_DMA_Abort+0x254>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d022      	beq.n	80059ce <HAL_DMA_Abort+0x20e>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a22      	ldr	r2, [pc, #136]	@ (8005a18 <HAL_DMA_Abort+0x258>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d01d      	beq.n	80059ce <HAL_DMA_Abort+0x20e>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a21      	ldr	r2, [pc, #132]	@ (8005a1c <HAL_DMA_Abort+0x25c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d018      	beq.n	80059ce <HAL_DMA_Abort+0x20e>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005a20 <HAL_DMA_Abort+0x260>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d013      	beq.n	80059ce <HAL_DMA_Abort+0x20e>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005a24 <HAL_DMA_Abort+0x264>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00e      	beq.n	80059ce <HAL_DMA_Abort+0x20e>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a28 <HAL_DMA_Abort+0x268>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d009      	beq.n	80059ce <HAL_DMA_Abort+0x20e>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a1b      	ldr	r2, [pc, #108]	@ (8005a2c <HAL_DMA_Abort+0x26c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d004      	beq.n	80059ce <HAL_DMA_Abort+0x20e>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a19      	ldr	r2, [pc, #100]	@ (8005a30 <HAL_DMA_Abort+0x270>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d132      	bne.n	8005a34 <HAL_DMA_Abort+0x274>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e031      	b.n	8005a36 <HAL_DMA_Abort+0x276>
 80059d2:	bf00      	nop
 80059d4:	40020010 	.word	0x40020010
 80059d8:	40020028 	.word	0x40020028
 80059dc:	40020040 	.word	0x40020040
 80059e0:	40020058 	.word	0x40020058
 80059e4:	40020070 	.word	0x40020070
 80059e8:	40020088 	.word	0x40020088
 80059ec:	400200a0 	.word	0x400200a0
 80059f0:	400200b8 	.word	0x400200b8
 80059f4:	40020410 	.word	0x40020410
 80059f8:	40020428 	.word	0x40020428
 80059fc:	40020440 	.word	0x40020440
 8005a00:	40020458 	.word	0x40020458
 8005a04:	40020470 	.word	0x40020470
 8005a08:	40020488 	.word	0x40020488
 8005a0c:	400204a0 	.word	0x400204a0
 8005a10:	400204b8 	.word	0x400204b8
 8005a14:	58025408 	.word	0x58025408
 8005a18:	5802541c 	.word	0x5802541c
 8005a1c:	58025430 	.word	0x58025430
 8005a20:	58025444 	.word	0x58025444
 8005a24:	58025458 	.word	0x58025458
 8005a28:	5802546c 	.word	0x5802546c
 8005a2c:	58025480 	.word	0x58025480
 8005a30:	58025494 	.word	0x58025494
 8005a34:	2300      	movs	r3, #0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d007      	beq.n	8005a4a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a48:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a6d      	ldr	r2, [pc, #436]	@ (8005c04 <HAL_DMA_Abort+0x444>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d04a      	beq.n	8005aea <HAL_DMA_Abort+0x32a>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a6b      	ldr	r2, [pc, #428]	@ (8005c08 <HAL_DMA_Abort+0x448>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d045      	beq.n	8005aea <HAL_DMA_Abort+0x32a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a6a      	ldr	r2, [pc, #424]	@ (8005c0c <HAL_DMA_Abort+0x44c>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d040      	beq.n	8005aea <HAL_DMA_Abort+0x32a>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a68      	ldr	r2, [pc, #416]	@ (8005c10 <HAL_DMA_Abort+0x450>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d03b      	beq.n	8005aea <HAL_DMA_Abort+0x32a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a67      	ldr	r2, [pc, #412]	@ (8005c14 <HAL_DMA_Abort+0x454>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d036      	beq.n	8005aea <HAL_DMA_Abort+0x32a>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a65      	ldr	r2, [pc, #404]	@ (8005c18 <HAL_DMA_Abort+0x458>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d031      	beq.n	8005aea <HAL_DMA_Abort+0x32a>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a64      	ldr	r2, [pc, #400]	@ (8005c1c <HAL_DMA_Abort+0x45c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d02c      	beq.n	8005aea <HAL_DMA_Abort+0x32a>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a62      	ldr	r2, [pc, #392]	@ (8005c20 <HAL_DMA_Abort+0x460>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d027      	beq.n	8005aea <HAL_DMA_Abort+0x32a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a61      	ldr	r2, [pc, #388]	@ (8005c24 <HAL_DMA_Abort+0x464>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d022      	beq.n	8005aea <HAL_DMA_Abort+0x32a>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a5f      	ldr	r2, [pc, #380]	@ (8005c28 <HAL_DMA_Abort+0x468>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d01d      	beq.n	8005aea <HAL_DMA_Abort+0x32a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a5e      	ldr	r2, [pc, #376]	@ (8005c2c <HAL_DMA_Abort+0x46c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d018      	beq.n	8005aea <HAL_DMA_Abort+0x32a>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a5c      	ldr	r2, [pc, #368]	@ (8005c30 <HAL_DMA_Abort+0x470>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d013      	beq.n	8005aea <HAL_DMA_Abort+0x32a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a5b      	ldr	r2, [pc, #364]	@ (8005c34 <HAL_DMA_Abort+0x474>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00e      	beq.n	8005aea <HAL_DMA_Abort+0x32a>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a59      	ldr	r2, [pc, #356]	@ (8005c38 <HAL_DMA_Abort+0x478>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d009      	beq.n	8005aea <HAL_DMA_Abort+0x32a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a58      	ldr	r2, [pc, #352]	@ (8005c3c <HAL_DMA_Abort+0x47c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d004      	beq.n	8005aea <HAL_DMA_Abort+0x32a>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a56      	ldr	r2, [pc, #344]	@ (8005c40 <HAL_DMA_Abort+0x480>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d108      	bne.n	8005afc <HAL_DMA_Abort+0x33c>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0201 	bic.w	r2, r2, #1
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	e007      	b.n	8005b0c <HAL_DMA_Abort+0x34c>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0201 	bic.w	r2, r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005b0c:	e013      	b.n	8005b36 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b0e:	f7fc fe97 	bl	8002840 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b05      	cmp	r3, #5
 8005b1a:	d90c      	bls.n	8005b36 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2203      	movs	r2, #3
 8005b26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e12d      	b.n	8005d92 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1e5      	bne.n	8005b0e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a2f      	ldr	r2, [pc, #188]	@ (8005c04 <HAL_DMA_Abort+0x444>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d04a      	beq.n	8005be2 <HAL_DMA_Abort+0x422>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a2d      	ldr	r2, [pc, #180]	@ (8005c08 <HAL_DMA_Abort+0x448>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d045      	beq.n	8005be2 <HAL_DMA_Abort+0x422>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a2c      	ldr	r2, [pc, #176]	@ (8005c0c <HAL_DMA_Abort+0x44c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d040      	beq.n	8005be2 <HAL_DMA_Abort+0x422>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a2a      	ldr	r2, [pc, #168]	@ (8005c10 <HAL_DMA_Abort+0x450>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d03b      	beq.n	8005be2 <HAL_DMA_Abort+0x422>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a29      	ldr	r2, [pc, #164]	@ (8005c14 <HAL_DMA_Abort+0x454>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d036      	beq.n	8005be2 <HAL_DMA_Abort+0x422>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a27      	ldr	r2, [pc, #156]	@ (8005c18 <HAL_DMA_Abort+0x458>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d031      	beq.n	8005be2 <HAL_DMA_Abort+0x422>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a26      	ldr	r2, [pc, #152]	@ (8005c1c <HAL_DMA_Abort+0x45c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d02c      	beq.n	8005be2 <HAL_DMA_Abort+0x422>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a24      	ldr	r2, [pc, #144]	@ (8005c20 <HAL_DMA_Abort+0x460>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d027      	beq.n	8005be2 <HAL_DMA_Abort+0x422>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a23      	ldr	r2, [pc, #140]	@ (8005c24 <HAL_DMA_Abort+0x464>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d022      	beq.n	8005be2 <HAL_DMA_Abort+0x422>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a21      	ldr	r2, [pc, #132]	@ (8005c28 <HAL_DMA_Abort+0x468>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d01d      	beq.n	8005be2 <HAL_DMA_Abort+0x422>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a20      	ldr	r2, [pc, #128]	@ (8005c2c <HAL_DMA_Abort+0x46c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d018      	beq.n	8005be2 <HAL_DMA_Abort+0x422>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8005c30 <HAL_DMA_Abort+0x470>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d013      	beq.n	8005be2 <HAL_DMA_Abort+0x422>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a1d      	ldr	r2, [pc, #116]	@ (8005c34 <HAL_DMA_Abort+0x474>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d00e      	beq.n	8005be2 <HAL_DMA_Abort+0x422>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c38 <HAL_DMA_Abort+0x478>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d009      	beq.n	8005be2 <HAL_DMA_Abort+0x422>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a1a      	ldr	r2, [pc, #104]	@ (8005c3c <HAL_DMA_Abort+0x47c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d004      	beq.n	8005be2 <HAL_DMA_Abort+0x422>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a18      	ldr	r2, [pc, #96]	@ (8005c40 <HAL_DMA_Abort+0x480>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d101      	bne.n	8005be6 <HAL_DMA_Abort+0x426>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e000      	b.n	8005be8 <HAL_DMA_Abort+0x428>
 8005be6:	2300      	movs	r3, #0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d02b      	beq.n	8005c44 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bf0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bf6:	f003 031f 	and.w	r3, r3, #31
 8005bfa:	223f      	movs	r2, #63	@ 0x3f
 8005bfc:	409a      	lsls	r2, r3
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	609a      	str	r2, [r3, #8]
 8005c02:	e02a      	b.n	8005c5a <HAL_DMA_Abort+0x49a>
 8005c04:	40020010 	.word	0x40020010
 8005c08:	40020028 	.word	0x40020028
 8005c0c:	40020040 	.word	0x40020040
 8005c10:	40020058 	.word	0x40020058
 8005c14:	40020070 	.word	0x40020070
 8005c18:	40020088 	.word	0x40020088
 8005c1c:	400200a0 	.word	0x400200a0
 8005c20:	400200b8 	.word	0x400200b8
 8005c24:	40020410 	.word	0x40020410
 8005c28:	40020428 	.word	0x40020428
 8005c2c:	40020440 	.word	0x40020440
 8005c30:	40020458 	.word	0x40020458
 8005c34:	40020470 	.word	0x40020470
 8005c38:	40020488 	.word	0x40020488
 8005c3c:	400204a0 	.word	0x400204a0
 8005c40:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c48:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c4e:	f003 031f 	and.w	r3, r3, #31
 8005c52:	2201      	movs	r2, #1
 8005c54:	409a      	lsls	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a4f      	ldr	r2, [pc, #316]	@ (8005d9c <HAL_DMA_Abort+0x5dc>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d072      	beq.n	8005d4a <HAL_DMA_Abort+0x58a>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a4d      	ldr	r2, [pc, #308]	@ (8005da0 <HAL_DMA_Abort+0x5e0>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d06d      	beq.n	8005d4a <HAL_DMA_Abort+0x58a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a4c      	ldr	r2, [pc, #304]	@ (8005da4 <HAL_DMA_Abort+0x5e4>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d068      	beq.n	8005d4a <HAL_DMA_Abort+0x58a>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a4a      	ldr	r2, [pc, #296]	@ (8005da8 <HAL_DMA_Abort+0x5e8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d063      	beq.n	8005d4a <HAL_DMA_Abort+0x58a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a49      	ldr	r2, [pc, #292]	@ (8005dac <HAL_DMA_Abort+0x5ec>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d05e      	beq.n	8005d4a <HAL_DMA_Abort+0x58a>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a47      	ldr	r2, [pc, #284]	@ (8005db0 <HAL_DMA_Abort+0x5f0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d059      	beq.n	8005d4a <HAL_DMA_Abort+0x58a>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a46      	ldr	r2, [pc, #280]	@ (8005db4 <HAL_DMA_Abort+0x5f4>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d054      	beq.n	8005d4a <HAL_DMA_Abort+0x58a>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a44      	ldr	r2, [pc, #272]	@ (8005db8 <HAL_DMA_Abort+0x5f8>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d04f      	beq.n	8005d4a <HAL_DMA_Abort+0x58a>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a43      	ldr	r2, [pc, #268]	@ (8005dbc <HAL_DMA_Abort+0x5fc>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d04a      	beq.n	8005d4a <HAL_DMA_Abort+0x58a>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a41      	ldr	r2, [pc, #260]	@ (8005dc0 <HAL_DMA_Abort+0x600>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d045      	beq.n	8005d4a <HAL_DMA_Abort+0x58a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a40      	ldr	r2, [pc, #256]	@ (8005dc4 <HAL_DMA_Abort+0x604>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d040      	beq.n	8005d4a <HAL_DMA_Abort+0x58a>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a3e      	ldr	r2, [pc, #248]	@ (8005dc8 <HAL_DMA_Abort+0x608>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d03b      	beq.n	8005d4a <HAL_DMA_Abort+0x58a>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a3d      	ldr	r2, [pc, #244]	@ (8005dcc <HAL_DMA_Abort+0x60c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d036      	beq.n	8005d4a <HAL_DMA_Abort+0x58a>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a3b      	ldr	r2, [pc, #236]	@ (8005dd0 <HAL_DMA_Abort+0x610>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d031      	beq.n	8005d4a <HAL_DMA_Abort+0x58a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a3a      	ldr	r2, [pc, #232]	@ (8005dd4 <HAL_DMA_Abort+0x614>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d02c      	beq.n	8005d4a <HAL_DMA_Abort+0x58a>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a38      	ldr	r2, [pc, #224]	@ (8005dd8 <HAL_DMA_Abort+0x618>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d027      	beq.n	8005d4a <HAL_DMA_Abort+0x58a>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a37      	ldr	r2, [pc, #220]	@ (8005ddc <HAL_DMA_Abort+0x61c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d022      	beq.n	8005d4a <HAL_DMA_Abort+0x58a>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a35      	ldr	r2, [pc, #212]	@ (8005de0 <HAL_DMA_Abort+0x620>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d01d      	beq.n	8005d4a <HAL_DMA_Abort+0x58a>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a34      	ldr	r2, [pc, #208]	@ (8005de4 <HAL_DMA_Abort+0x624>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d018      	beq.n	8005d4a <HAL_DMA_Abort+0x58a>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a32      	ldr	r2, [pc, #200]	@ (8005de8 <HAL_DMA_Abort+0x628>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d013      	beq.n	8005d4a <HAL_DMA_Abort+0x58a>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a31      	ldr	r2, [pc, #196]	@ (8005dec <HAL_DMA_Abort+0x62c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d00e      	beq.n	8005d4a <HAL_DMA_Abort+0x58a>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a2f      	ldr	r2, [pc, #188]	@ (8005df0 <HAL_DMA_Abort+0x630>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d009      	beq.n	8005d4a <HAL_DMA_Abort+0x58a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a2e      	ldr	r2, [pc, #184]	@ (8005df4 <HAL_DMA_Abort+0x634>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d004      	beq.n	8005d4a <HAL_DMA_Abort+0x58a>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a2c      	ldr	r2, [pc, #176]	@ (8005df8 <HAL_DMA_Abort+0x638>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d101      	bne.n	8005d4e <HAL_DMA_Abort+0x58e>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e000      	b.n	8005d50 <HAL_DMA_Abort+0x590>
 8005d4e:	2300      	movs	r3, #0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d015      	beq.n	8005d80 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005d5c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00c      	beq.n	8005d80 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d74:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005d7e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	40020010 	.word	0x40020010
 8005da0:	40020028 	.word	0x40020028
 8005da4:	40020040 	.word	0x40020040
 8005da8:	40020058 	.word	0x40020058
 8005dac:	40020070 	.word	0x40020070
 8005db0:	40020088 	.word	0x40020088
 8005db4:	400200a0 	.word	0x400200a0
 8005db8:	400200b8 	.word	0x400200b8
 8005dbc:	40020410 	.word	0x40020410
 8005dc0:	40020428 	.word	0x40020428
 8005dc4:	40020440 	.word	0x40020440
 8005dc8:	40020458 	.word	0x40020458
 8005dcc:	40020470 	.word	0x40020470
 8005dd0:	40020488 	.word	0x40020488
 8005dd4:	400204a0 	.word	0x400204a0
 8005dd8:	400204b8 	.word	0x400204b8
 8005ddc:	58025408 	.word	0x58025408
 8005de0:	5802541c 	.word	0x5802541c
 8005de4:	58025430 	.word	0x58025430
 8005de8:	58025444 	.word	0x58025444
 8005dec:	58025458 	.word	0x58025458
 8005df0:	5802546c 	.word	0x5802546c
 8005df4:	58025480 	.word	0x58025480
 8005df8:	58025494 	.word	0x58025494

08005dfc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e237      	b.n	800627e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d004      	beq.n	8005e24 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2280      	movs	r2, #128	@ 0x80
 8005e1e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e22c      	b.n	800627e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a5c      	ldr	r2, [pc, #368]	@ (8005f9c <HAL_DMA_Abort_IT+0x1a0>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d04a      	beq.n	8005ec4 <HAL_DMA_Abort_IT+0xc8>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a5b      	ldr	r2, [pc, #364]	@ (8005fa0 <HAL_DMA_Abort_IT+0x1a4>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d045      	beq.n	8005ec4 <HAL_DMA_Abort_IT+0xc8>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a59      	ldr	r2, [pc, #356]	@ (8005fa4 <HAL_DMA_Abort_IT+0x1a8>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d040      	beq.n	8005ec4 <HAL_DMA_Abort_IT+0xc8>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a58      	ldr	r2, [pc, #352]	@ (8005fa8 <HAL_DMA_Abort_IT+0x1ac>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d03b      	beq.n	8005ec4 <HAL_DMA_Abort_IT+0xc8>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a56      	ldr	r2, [pc, #344]	@ (8005fac <HAL_DMA_Abort_IT+0x1b0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d036      	beq.n	8005ec4 <HAL_DMA_Abort_IT+0xc8>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a55      	ldr	r2, [pc, #340]	@ (8005fb0 <HAL_DMA_Abort_IT+0x1b4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d031      	beq.n	8005ec4 <HAL_DMA_Abort_IT+0xc8>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a53      	ldr	r2, [pc, #332]	@ (8005fb4 <HAL_DMA_Abort_IT+0x1b8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d02c      	beq.n	8005ec4 <HAL_DMA_Abort_IT+0xc8>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a52      	ldr	r2, [pc, #328]	@ (8005fb8 <HAL_DMA_Abort_IT+0x1bc>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d027      	beq.n	8005ec4 <HAL_DMA_Abort_IT+0xc8>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a50      	ldr	r2, [pc, #320]	@ (8005fbc <HAL_DMA_Abort_IT+0x1c0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d022      	beq.n	8005ec4 <HAL_DMA_Abort_IT+0xc8>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a4f      	ldr	r2, [pc, #316]	@ (8005fc0 <HAL_DMA_Abort_IT+0x1c4>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d01d      	beq.n	8005ec4 <HAL_DMA_Abort_IT+0xc8>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a4d      	ldr	r2, [pc, #308]	@ (8005fc4 <HAL_DMA_Abort_IT+0x1c8>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d018      	beq.n	8005ec4 <HAL_DMA_Abort_IT+0xc8>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a4c      	ldr	r2, [pc, #304]	@ (8005fc8 <HAL_DMA_Abort_IT+0x1cc>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d013      	beq.n	8005ec4 <HAL_DMA_Abort_IT+0xc8>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a4a      	ldr	r2, [pc, #296]	@ (8005fcc <HAL_DMA_Abort_IT+0x1d0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00e      	beq.n	8005ec4 <HAL_DMA_Abort_IT+0xc8>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a49      	ldr	r2, [pc, #292]	@ (8005fd0 <HAL_DMA_Abort_IT+0x1d4>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d009      	beq.n	8005ec4 <HAL_DMA_Abort_IT+0xc8>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a47      	ldr	r2, [pc, #284]	@ (8005fd4 <HAL_DMA_Abort_IT+0x1d8>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d004      	beq.n	8005ec4 <HAL_DMA_Abort_IT+0xc8>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a46      	ldr	r2, [pc, #280]	@ (8005fd8 <HAL_DMA_Abort_IT+0x1dc>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d101      	bne.n	8005ec8 <HAL_DMA_Abort_IT+0xcc>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e000      	b.n	8005eca <HAL_DMA_Abort_IT+0xce>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 8086 	beq.w	8005fdc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2204      	movs	r2, #4
 8005ed4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a2f      	ldr	r2, [pc, #188]	@ (8005f9c <HAL_DMA_Abort_IT+0x1a0>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d04a      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x17c>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a2e      	ldr	r2, [pc, #184]	@ (8005fa0 <HAL_DMA_Abort_IT+0x1a4>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d045      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x17c>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a2c      	ldr	r2, [pc, #176]	@ (8005fa4 <HAL_DMA_Abort_IT+0x1a8>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d040      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x17c>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a2b      	ldr	r2, [pc, #172]	@ (8005fa8 <HAL_DMA_Abort_IT+0x1ac>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d03b      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x17c>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a29      	ldr	r2, [pc, #164]	@ (8005fac <HAL_DMA_Abort_IT+0x1b0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d036      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x17c>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a28      	ldr	r2, [pc, #160]	@ (8005fb0 <HAL_DMA_Abort_IT+0x1b4>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d031      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x17c>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a26      	ldr	r2, [pc, #152]	@ (8005fb4 <HAL_DMA_Abort_IT+0x1b8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d02c      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x17c>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a25      	ldr	r2, [pc, #148]	@ (8005fb8 <HAL_DMA_Abort_IT+0x1bc>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d027      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x17c>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a23      	ldr	r2, [pc, #140]	@ (8005fbc <HAL_DMA_Abort_IT+0x1c0>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d022      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x17c>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a22      	ldr	r2, [pc, #136]	@ (8005fc0 <HAL_DMA_Abort_IT+0x1c4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d01d      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x17c>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a20      	ldr	r2, [pc, #128]	@ (8005fc4 <HAL_DMA_Abort_IT+0x1c8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d018      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x17c>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8005fc8 <HAL_DMA_Abort_IT+0x1cc>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d013      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x17c>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a1d      	ldr	r2, [pc, #116]	@ (8005fcc <HAL_DMA_Abort_IT+0x1d0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d00e      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x17c>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8005fd0 <HAL_DMA_Abort_IT+0x1d4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d009      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x17c>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a1a      	ldr	r2, [pc, #104]	@ (8005fd4 <HAL_DMA_Abort_IT+0x1d8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d004      	beq.n	8005f78 <HAL_DMA_Abort_IT+0x17c>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a19      	ldr	r2, [pc, #100]	@ (8005fd8 <HAL_DMA_Abort_IT+0x1dc>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d108      	bne.n	8005f8a <HAL_DMA_Abort_IT+0x18e>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0201 	bic.w	r2, r2, #1
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	e178      	b.n	800627c <HAL_DMA_Abort_IT+0x480>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0201 	bic.w	r2, r2, #1
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	e16f      	b.n	800627c <HAL_DMA_Abort_IT+0x480>
 8005f9c:	40020010 	.word	0x40020010
 8005fa0:	40020028 	.word	0x40020028
 8005fa4:	40020040 	.word	0x40020040
 8005fa8:	40020058 	.word	0x40020058
 8005fac:	40020070 	.word	0x40020070
 8005fb0:	40020088 	.word	0x40020088
 8005fb4:	400200a0 	.word	0x400200a0
 8005fb8:	400200b8 	.word	0x400200b8
 8005fbc:	40020410 	.word	0x40020410
 8005fc0:	40020428 	.word	0x40020428
 8005fc4:	40020440 	.word	0x40020440
 8005fc8:	40020458 	.word	0x40020458
 8005fcc:	40020470 	.word	0x40020470
 8005fd0:	40020488 	.word	0x40020488
 8005fd4:	400204a0 	.word	0x400204a0
 8005fd8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 020e 	bic.w	r2, r2, #14
 8005fea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a6c      	ldr	r2, [pc, #432]	@ (80061a4 <HAL_DMA_Abort_IT+0x3a8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d04a      	beq.n	800608c <HAL_DMA_Abort_IT+0x290>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a6b      	ldr	r2, [pc, #428]	@ (80061a8 <HAL_DMA_Abort_IT+0x3ac>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d045      	beq.n	800608c <HAL_DMA_Abort_IT+0x290>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a69      	ldr	r2, [pc, #420]	@ (80061ac <HAL_DMA_Abort_IT+0x3b0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d040      	beq.n	800608c <HAL_DMA_Abort_IT+0x290>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a68      	ldr	r2, [pc, #416]	@ (80061b0 <HAL_DMA_Abort_IT+0x3b4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d03b      	beq.n	800608c <HAL_DMA_Abort_IT+0x290>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a66      	ldr	r2, [pc, #408]	@ (80061b4 <HAL_DMA_Abort_IT+0x3b8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d036      	beq.n	800608c <HAL_DMA_Abort_IT+0x290>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a65      	ldr	r2, [pc, #404]	@ (80061b8 <HAL_DMA_Abort_IT+0x3bc>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d031      	beq.n	800608c <HAL_DMA_Abort_IT+0x290>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a63      	ldr	r2, [pc, #396]	@ (80061bc <HAL_DMA_Abort_IT+0x3c0>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d02c      	beq.n	800608c <HAL_DMA_Abort_IT+0x290>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a62      	ldr	r2, [pc, #392]	@ (80061c0 <HAL_DMA_Abort_IT+0x3c4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d027      	beq.n	800608c <HAL_DMA_Abort_IT+0x290>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a60      	ldr	r2, [pc, #384]	@ (80061c4 <HAL_DMA_Abort_IT+0x3c8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d022      	beq.n	800608c <HAL_DMA_Abort_IT+0x290>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a5f      	ldr	r2, [pc, #380]	@ (80061c8 <HAL_DMA_Abort_IT+0x3cc>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d01d      	beq.n	800608c <HAL_DMA_Abort_IT+0x290>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a5d      	ldr	r2, [pc, #372]	@ (80061cc <HAL_DMA_Abort_IT+0x3d0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d018      	beq.n	800608c <HAL_DMA_Abort_IT+0x290>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a5c      	ldr	r2, [pc, #368]	@ (80061d0 <HAL_DMA_Abort_IT+0x3d4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d013      	beq.n	800608c <HAL_DMA_Abort_IT+0x290>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a5a      	ldr	r2, [pc, #360]	@ (80061d4 <HAL_DMA_Abort_IT+0x3d8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00e      	beq.n	800608c <HAL_DMA_Abort_IT+0x290>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a59      	ldr	r2, [pc, #356]	@ (80061d8 <HAL_DMA_Abort_IT+0x3dc>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d009      	beq.n	800608c <HAL_DMA_Abort_IT+0x290>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a57      	ldr	r2, [pc, #348]	@ (80061dc <HAL_DMA_Abort_IT+0x3e0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d004      	beq.n	800608c <HAL_DMA_Abort_IT+0x290>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a56      	ldr	r2, [pc, #344]	@ (80061e0 <HAL_DMA_Abort_IT+0x3e4>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d108      	bne.n	800609e <HAL_DMA_Abort_IT+0x2a2>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0201 	bic.w	r2, r2, #1
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	e007      	b.n	80060ae <HAL_DMA_Abort_IT+0x2b2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0201 	bic.w	r2, r2, #1
 80060ac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a3c      	ldr	r2, [pc, #240]	@ (80061a4 <HAL_DMA_Abort_IT+0x3a8>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d072      	beq.n	800619e <HAL_DMA_Abort_IT+0x3a2>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a3a      	ldr	r2, [pc, #232]	@ (80061a8 <HAL_DMA_Abort_IT+0x3ac>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d06d      	beq.n	800619e <HAL_DMA_Abort_IT+0x3a2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a39      	ldr	r2, [pc, #228]	@ (80061ac <HAL_DMA_Abort_IT+0x3b0>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d068      	beq.n	800619e <HAL_DMA_Abort_IT+0x3a2>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a37      	ldr	r2, [pc, #220]	@ (80061b0 <HAL_DMA_Abort_IT+0x3b4>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d063      	beq.n	800619e <HAL_DMA_Abort_IT+0x3a2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a36      	ldr	r2, [pc, #216]	@ (80061b4 <HAL_DMA_Abort_IT+0x3b8>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d05e      	beq.n	800619e <HAL_DMA_Abort_IT+0x3a2>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a34      	ldr	r2, [pc, #208]	@ (80061b8 <HAL_DMA_Abort_IT+0x3bc>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d059      	beq.n	800619e <HAL_DMA_Abort_IT+0x3a2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a33      	ldr	r2, [pc, #204]	@ (80061bc <HAL_DMA_Abort_IT+0x3c0>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d054      	beq.n	800619e <HAL_DMA_Abort_IT+0x3a2>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a31      	ldr	r2, [pc, #196]	@ (80061c0 <HAL_DMA_Abort_IT+0x3c4>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d04f      	beq.n	800619e <HAL_DMA_Abort_IT+0x3a2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a30      	ldr	r2, [pc, #192]	@ (80061c4 <HAL_DMA_Abort_IT+0x3c8>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d04a      	beq.n	800619e <HAL_DMA_Abort_IT+0x3a2>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a2e      	ldr	r2, [pc, #184]	@ (80061c8 <HAL_DMA_Abort_IT+0x3cc>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d045      	beq.n	800619e <HAL_DMA_Abort_IT+0x3a2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a2d      	ldr	r2, [pc, #180]	@ (80061cc <HAL_DMA_Abort_IT+0x3d0>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d040      	beq.n	800619e <HAL_DMA_Abort_IT+0x3a2>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a2b      	ldr	r2, [pc, #172]	@ (80061d0 <HAL_DMA_Abort_IT+0x3d4>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d03b      	beq.n	800619e <HAL_DMA_Abort_IT+0x3a2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a2a      	ldr	r2, [pc, #168]	@ (80061d4 <HAL_DMA_Abort_IT+0x3d8>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d036      	beq.n	800619e <HAL_DMA_Abort_IT+0x3a2>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a28      	ldr	r2, [pc, #160]	@ (80061d8 <HAL_DMA_Abort_IT+0x3dc>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d031      	beq.n	800619e <HAL_DMA_Abort_IT+0x3a2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a27      	ldr	r2, [pc, #156]	@ (80061dc <HAL_DMA_Abort_IT+0x3e0>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d02c      	beq.n	800619e <HAL_DMA_Abort_IT+0x3a2>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a25      	ldr	r2, [pc, #148]	@ (80061e0 <HAL_DMA_Abort_IT+0x3e4>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d027      	beq.n	800619e <HAL_DMA_Abort_IT+0x3a2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a24      	ldr	r2, [pc, #144]	@ (80061e4 <HAL_DMA_Abort_IT+0x3e8>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d022      	beq.n	800619e <HAL_DMA_Abort_IT+0x3a2>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a22      	ldr	r2, [pc, #136]	@ (80061e8 <HAL_DMA_Abort_IT+0x3ec>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d01d      	beq.n	800619e <HAL_DMA_Abort_IT+0x3a2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a21      	ldr	r2, [pc, #132]	@ (80061ec <HAL_DMA_Abort_IT+0x3f0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d018      	beq.n	800619e <HAL_DMA_Abort_IT+0x3a2>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1f      	ldr	r2, [pc, #124]	@ (80061f0 <HAL_DMA_Abort_IT+0x3f4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d013      	beq.n	800619e <HAL_DMA_Abort_IT+0x3a2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1e      	ldr	r2, [pc, #120]	@ (80061f4 <HAL_DMA_Abort_IT+0x3f8>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d00e      	beq.n	800619e <HAL_DMA_Abort_IT+0x3a2>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a1c      	ldr	r2, [pc, #112]	@ (80061f8 <HAL_DMA_Abort_IT+0x3fc>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d009      	beq.n	800619e <HAL_DMA_Abort_IT+0x3a2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a1b      	ldr	r2, [pc, #108]	@ (80061fc <HAL_DMA_Abort_IT+0x400>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d004      	beq.n	800619e <HAL_DMA_Abort_IT+0x3a2>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a19      	ldr	r2, [pc, #100]	@ (8006200 <HAL_DMA_Abort_IT+0x404>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d132      	bne.n	8006204 <HAL_DMA_Abort_IT+0x408>
 800619e:	2301      	movs	r3, #1
 80061a0:	e031      	b.n	8006206 <HAL_DMA_Abort_IT+0x40a>
 80061a2:	bf00      	nop
 80061a4:	40020010 	.word	0x40020010
 80061a8:	40020028 	.word	0x40020028
 80061ac:	40020040 	.word	0x40020040
 80061b0:	40020058 	.word	0x40020058
 80061b4:	40020070 	.word	0x40020070
 80061b8:	40020088 	.word	0x40020088
 80061bc:	400200a0 	.word	0x400200a0
 80061c0:	400200b8 	.word	0x400200b8
 80061c4:	40020410 	.word	0x40020410
 80061c8:	40020428 	.word	0x40020428
 80061cc:	40020440 	.word	0x40020440
 80061d0:	40020458 	.word	0x40020458
 80061d4:	40020470 	.word	0x40020470
 80061d8:	40020488 	.word	0x40020488
 80061dc:	400204a0 	.word	0x400204a0
 80061e0:	400204b8 	.word	0x400204b8
 80061e4:	58025408 	.word	0x58025408
 80061e8:	5802541c 	.word	0x5802541c
 80061ec:	58025430 	.word	0x58025430
 80061f0:	58025444 	.word	0x58025444
 80061f4:	58025458 	.word	0x58025458
 80061f8:	5802546c 	.word	0x5802546c
 80061fc:	58025480 	.word	0x58025480
 8006200:	58025494 	.word	0x58025494
 8006204:	2300      	movs	r3, #0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d028      	beq.n	800625c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006214:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006218:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800621e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006224:	f003 031f 	and.w	r3, r3, #31
 8006228:	2201      	movs	r2, #1
 800622a:	409a      	lsls	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006238:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00c      	beq.n	800625c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800624c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006250:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800625a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop

08006288 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08a      	sub	sp, #40	@ 0x28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006294:	4b67      	ldr	r3, [pc, #412]	@ (8006434 <HAL_DMA_IRQHandler+0x1ac>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a67      	ldr	r2, [pc, #412]	@ (8006438 <HAL_DMA_IRQHandler+0x1b0>)
 800629a:	fba2 2303 	umull	r2, r3, r2, r3
 800629e:	0a9b      	lsrs	r3, r3, #10
 80062a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a5f      	ldr	r2, [pc, #380]	@ (800643c <HAL_DMA_IRQHandler+0x1b4>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d04a      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a5d      	ldr	r2, [pc, #372]	@ (8006440 <HAL_DMA_IRQHandler+0x1b8>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d045      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a5c      	ldr	r2, [pc, #368]	@ (8006444 <HAL_DMA_IRQHandler+0x1bc>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d040      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a5a      	ldr	r2, [pc, #360]	@ (8006448 <HAL_DMA_IRQHandler+0x1c0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d03b      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a59      	ldr	r2, [pc, #356]	@ (800644c <HAL_DMA_IRQHandler+0x1c4>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d036      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a57      	ldr	r2, [pc, #348]	@ (8006450 <HAL_DMA_IRQHandler+0x1c8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d031      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a56      	ldr	r2, [pc, #344]	@ (8006454 <HAL_DMA_IRQHandler+0x1cc>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d02c      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a54      	ldr	r2, [pc, #336]	@ (8006458 <HAL_DMA_IRQHandler+0x1d0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d027      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a53      	ldr	r2, [pc, #332]	@ (800645c <HAL_DMA_IRQHandler+0x1d4>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d022      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a51      	ldr	r2, [pc, #324]	@ (8006460 <HAL_DMA_IRQHandler+0x1d8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d01d      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a50      	ldr	r2, [pc, #320]	@ (8006464 <HAL_DMA_IRQHandler+0x1dc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d018      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a4e      	ldr	r2, [pc, #312]	@ (8006468 <HAL_DMA_IRQHandler+0x1e0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d013      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a4d      	ldr	r2, [pc, #308]	@ (800646c <HAL_DMA_IRQHandler+0x1e4>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00e      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a4b      	ldr	r2, [pc, #300]	@ (8006470 <HAL_DMA_IRQHandler+0x1e8>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d009      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a4a      	ldr	r2, [pc, #296]	@ (8006474 <HAL_DMA_IRQHandler+0x1ec>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d004      	beq.n	800635a <HAL_DMA_IRQHandler+0xd2>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a48      	ldr	r2, [pc, #288]	@ (8006478 <HAL_DMA_IRQHandler+0x1f0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d101      	bne.n	800635e <HAL_DMA_IRQHandler+0xd6>
 800635a:	2301      	movs	r3, #1
 800635c:	e000      	b.n	8006360 <HAL_DMA_IRQHandler+0xd8>
 800635e:	2300      	movs	r3, #0
 8006360:	2b00      	cmp	r3, #0
 8006362:	f000 842b 	beq.w	8006bbc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800636a:	f003 031f 	and.w	r3, r3, #31
 800636e:	2208      	movs	r2, #8
 8006370:	409a      	lsls	r2, r3
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	4013      	ands	r3, r2
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 80a2 	beq.w	80064c0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a2e      	ldr	r2, [pc, #184]	@ (800643c <HAL_DMA_IRQHandler+0x1b4>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d04a      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a2d      	ldr	r2, [pc, #180]	@ (8006440 <HAL_DMA_IRQHandler+0x1b8>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d045      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a2b      	ldr	r2, [pc, #172]	@ (8006444 <HAL_DMA_IRQHandler+0x1bc>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d040      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a2a      	ldr	r2, [pc, #168]	@ (8006448 <HAL_DMA_IRQHandler+0x1c0>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d03b      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a28      	ldr	r2, [pc, #160]	@ (800644c <HAL_DMA_IRQHandler+0x1c4>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d036      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a27      	ldr	r2, [pc, #156]	@ (8006450 <HAL_DMA_IRQHandler+0x1c8>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d031      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a25      	ldr	r2, [pc, #148]	@ (8006454 <HAL_DMA_IRQHandler+0x1cc>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d02c      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a24      	ldr	r2, [pc, #144]	@ (8006458 <HAL_DMA_IRQHandler+0x1d0>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d027      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a22      	ldr	r2, [pc, #136]	@ (800645c <HAL_DMA_IRQHandler+0x1d4>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d022      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a21      	ldr	r2, [pc, #132]	@ (8006460 <HAL_DMA_IRQHandler+0x1d8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d01d      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006464 <HAL_DMA_IRQHandler+0x1dc>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d018      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006468 <HAL_DMA_IRQHandler+0x1e0>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d013      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a1c      	ldr	r2, [pc, #112]	@ (800646c <HAL_DMA_IRQHandler+0x1e4>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d00e      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a1b      	ldr	r2, [pc, #108]	@ (8006470 <HAL_DMA_IRQHandler+0x1e8>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d009      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a19      	ldr	r2, [pc, #100]	@ (8006474 <HAL_DMA_IRQHandler+0x1ec>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d004      	beq.n	800641c <HAL_DMA_IRQHandler+0x194>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a18      	ldr	r2, [pc, #96]	@ (8006478 <HAL_DMA_IRQHandler+0x1f0>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d12f      	bne.n	800647c <HAL_DMA_IRQHandler+0x1f4>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0304 	and.w	r3, r3, #4
 8006426:	2b00      	cmp	r3, #0
 8006428:	bf14      	ite	ne
 800642a:	2301      	movne	r3, #1
 800642c:	2300      	moveq	r3, #0
 800642e:	b2db      	uxtb	r3, r3
 8006430:	e02e      	b.n	8006490 <HAL_DMA_IRQHandler+0x208>
 8006432:	bf00      	nop
 8006434:	24000054 	.word	0x24000054
 8006438:	1b4e81b5 	.word	0x1b4e81b5
 800643c:	40020010 	.word	0x40020010
 8006440:	40020028 	.word	0x40020028
 8006444:	40020040 	.word	0x40020040
 8006448:	40020058 	.word	0x40020058
 800644c:	40020070 	.word	0x40020070
 8006450:	40020088 	.word	0x40020088
 8006454:	400200a0 	.word	0x400200a0
 8006458:	400200b8 	.word	0x400200b8
 800645c:	40020410 	.word	0x40020410
 8006460:	40020428 	.word	0x40020428
 8006464:	40020440 	.word	0x40020440
 8006468:	40020458 	.word	0x40020458
 800646c:	40020470 	.word	0x40020470
 8006470:	40020488 	.word	0x40020488
 8006474:	400204a0 	.word	0x400204a0
 8006478:	400204b8 	.word	0x400204b8
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0308 	and.w	r3, r3, #8
 8006486:	2b00      	cmp	r3, #0
 8006488:	bf14      	ite	ne
 800648a:	2301      	movne	r3, #1
 800648c:	2300      	moveq	r3, #0
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d015      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0204 	bic.w	r2, r2, #4
 80064a2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064a8:	f003 031f 	and.w	r3, r3, #31
 80064ac:	2208      	movs	r2, #8
 80064ae:	409a      	lsls	r2, r3
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064b8:	f043 0201 	orr.w	r2, r3, #1
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c4:	f003 031f 	and.w	r3, r3, #31
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	fa22 f303 	lsr.w	r3, r2, r3
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d06e      	beq.n	80065b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a69      	ldr	r2, [pc, #420]	@ (8006680 <HAL_DMA_IRQHandler+0x3f8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d04a      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a67      	ldr	r2, [pc, #412]	@ (8006684 <HAL_DMA_IRQHandler+0x3fc>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d045      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a66      	ldr	r2, [pc, #408]	@ (8006688 <HAL_DMA_IRQHandler+0x400>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d040      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a64      	ldr	r2, [pc, #400]	@ (800668c <HAL_DMA_IRQHandler+0x404>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d03b      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a63      	ldr	r2, [pc, #396]	@ (8006690 <HAL_DMA_IRQHandler+0x408>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d036      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a61      	ldr	r2, [pc, #388]	@ (8006694 <HAL_DMA_IRQHandler+0x40c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d031      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a60      	ldr	r2, [pc, #384]	@ (8006698 <HAL_DMA_IRQHandler+0x410>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d02c      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a5e      	ldr	r2, [pc, #376]	@ (800669c <HAL_DMA_IRQHandler+0x414>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d027      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a5d      	ldr	r2, [pc, #372]	@ (80066a0 <HAL_DMA_IRQHandler+0x418>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d022      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a5b      	ldr	r2, [pc, #364]	@ (80066a4 <HAL_DMA_IRQHandler+0x41c>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d01d      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a5a      	ldr	r2, [pc, #360]	@ (80066a8 <HAL_DMA_IRQHandler+0x420>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d018      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a58      	ldr	r2, [pc, #352]	@ (80066ac <HAL_DMA_IRQHandler+0x424>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d013      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a57      	ldr	r2, [pc, #348]	@ (80066b0 <HAL_DMA_IRQHandler+0x428>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d00e      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a55      	ldr	r2, [pc, #340]	@ (80066b4 <HAL_DMA_IRQHandler+0x42c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d009      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a54      	ldr	r2, [pc, #336]	@ (80066b8 <HAL_DMA_IRQHandler+0x430>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d004      	beq.n	8006576 <HAL_DMA_IRQHandler+0x2ee>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a52      	ldr	r2, [pc, #328]	@ (80066bc <HAL_DMA_IRQHandler+0x434>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d10a      	bne.n	800658c <HAL_DMA_IRQHandler+0x304>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006580:	2b00      	cmp	r3, #0
 8006582:	bf14      	ite	ne
 8006584:	2301      	movne	r3, #1
 8006586:	2300      	moveq	r3, #0
 8006588:	b2db      	uxtb	r3, r3
 800658a:	e003      	b.n	8006594 <HAL_DMA_IRQHandler+0x30c>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2300      	movs	r3, #0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00d      	beq.n	80065b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800659c:	f003 031f 	and.w	r3, r3, #31
 80065a0:	2201      	movs	r2, #1
 80065a2:	409a      	lsls	r2, r3
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ac:	f043 0202 	orr.w	r2, r3, #2
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065b8:	f003 031f 	and.w	r3, r3, #31
 80065bc:	2204      	movs	r2, #4
 80065be:	409a      	lsls	r2, r3
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	4013      	ands	r3, r2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 808f 	beq.w	80066e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a2c      	ldr	r2, [pc, #176]	@ (8006680 <HAL_DMA_IRQHandler+0x3f8>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d04a      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a2a      	ldr	r2, [pc, #168]	@ (8006684 <HAL_DMA_IRQHandler+0x3fc>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d045      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a29      	ldr	r2, [pc, #164]	@ (8006688 <HAL_DMA_IRQHandler+0x400>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d040      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a27      	ldr	r2, [pc, #156]	@ (800668c <HAL_DMA_IRQHandler+0x404>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d03b      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a26      	ldr	r2, [pc, #152]	@ (8006690 <HAL_DMA_IRQHandler+0x408>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d036      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a24      	ldr	r2, [pc, #144]	@ (8006694 <HAL_DMA_IRQHandler+0x40c>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d031      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a23      	ldr	r2, [pc, #140]	@ (8006698 <HAL_DMA_IRQHandler+0x410>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d02c      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a21      	ldr	r2, [pc, #132]	@ (800669c <HAL_DMA_IRQHandler+0x414>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d027      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a20      	ldr	r2, [pc, #128]	@ (80066a0 <HAL_DMA_IRQHandler+0x418>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d022      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a1e      	ldr	r2, [pc, #120]	@ (80066a4 <HAL_DMA_IRQHandler+0x41c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d01d      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a1d      	ldr	r2, [pc, #116]	@ (80066a8 <HAL_DMA_IRQHandler+0x420>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d018      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a1b      	ldr	r2, [pc, #108]	@ (80066ac <HAL_DMA_IRQHandler+0x424>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d013      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a1a      	ldr	r2, [pc, #104]	@ (80066b0 <HAL_DMA_IRQHandler+0x428>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00e      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a18      	ldr	r2, [pc, #96]	@ (80066b4 <HAL_DMA_IRQHandler+0x42c>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d009      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a17      	ldr	r2, [pc, #92]	@ (80066b8 <HAL_DMA_IRQHandler+0x430>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d004      	beq.n	800666a <HAL_DMA_IRQHandler+0x3e2>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a15      	ldr	r2, [pc, #84]	@ (80066bc <HAL_DMA_IRQHandler+0x434>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d12a      	bne.n	80066c0 <HAL_DMA_IRQHandler+0x438>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	bf14      	ite	ne
 8006678:	2301      	movne	r3, #1
 800667a:	2300      	moveq	r3, #0
 800667c:	b2db      	uxtb	r3, r3
 800667e:	e023      	b.n	80066c8 <HAL_DMA_IRQHandler+0x440>
 8006680:	40020010 	.word	0x40020010
 8006684:	40020028 	.word	0x40020028
 8006688:	40020040 	.word	0x40020040
 800668c:	40020058 	.word	0x40020058
 8006690:	40020070 	.word	0x40020070
 8006694:	40020088 	.word	0x40020088
 8006698:	400200a0 	.word	0x400200a0
 800669c:	400200b8 	.word	0x400200b8
 80066a0:	40020410 	.word	0x40020410
 80066a4:	40020428 	.word	0x40020428
 80066a8:	40020440 	.word	0x40020440
 80066ac:	40020458 	.word	0x40020458
 80066b0:	40020470 	.word	0x40020470
 80066b4:	40020488 	.word	0x40020488
 80066b8:	400204a0 	.word	0x400204a0
 80066bc:	400204b8 	.word	0x400204b8
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2300      	movs	r3, #0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00d      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066d0:	f003 031f 	and.w	r3, r3, #31
 80066d4:	2204      	movs	r2, #4
 80066d6:	409a      	lsls	r2, r3
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e0:	f043 0204 	orr.w	r2, r3, #4
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ec:	f003 031f 	and.w	r3, r3, #31
 80066f0:	2210      	movs	r2, #16
 80066f2:	409a      	lsls	r2, r3
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	4013      	ands	r3, r2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 80a6 	beq.w	800684a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a85      	ldr	r2, [pc, #532]	@ (8006918 <HAL_DMA_IRQHandler+0x690>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d04a      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a83      	ldr	r2, [pc, #524]	@ (800691c <HAL_DMA_IRQHandler+0x694>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d045      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a82      	ldr	r2, [pc, #520]	@ (8006920 <HAL_DMA_IRQHandler+0x698>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d040      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a80      	ldr	r2, [pc, #512]	@ (8006924 <HAL_DMA_IRQHandler+0x69c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d03b      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a7f      	ldr	r2, [pc, #508]	@ (8006928 <HAL_DMA_IRQHandler+0x6a0>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d036      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a7d      	ldr	r2, [pc, #500]	@ (800692c <HAL_DMA_IRQHandler+0x6a4>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d031      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a7c      	ldr	r2, [pc, #496]	@ (8006930 <HAL_DMA_IRQHandler+0x6a8>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d02c      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a7a      	ldr	r2, [pc, #488]	@ (8006934 <HAL_DMA_IRQHandler+0x6ac>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d027      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a79      	ldr	r2, [pc, #484]	@ (8006938 <HAL_DMA_IRQHandler+0x6b0>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d022      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a77      	ldr	r2, [pc, #476]	@ (800693c <HAL_DMA_IRQHandler+0x6b4>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d01d      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a76      	ldr	r2, [pc, #472]	@ (8006940 <HAL_DMA_IRQHandler+0x6b8>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d018      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a74      	ldr	r2, [pc, #464]	@ (8006944 <HAL_DMA_IRQHandler+0x6bc>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d013      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a73      	ldr	r2, [pc, #460]	@ (8006948 <HAL_DMA_IRQHandler+0x6c0>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d00e      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a71      	ldr	r2, [pc, #452]	@ (800694c <HAL_DMA_IRQHandler+0x6c4>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d009      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a70      	ldr	r2, [pc, #448]	@ (8006950 <HAL_DMA_IRQHandler+0x6c8>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d004      	beq.n	800679e <HAL_DMA_IRQHandler+0x516>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a6e      	ldr	r2, [pc, #440]	@ (8006954 <HAL_DMA_IRQHandler+0x6cc>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d10a      	bne.n	80067b4 <HAL_DMA_IRQHandler+0x52c>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0308 	and.w	r3, r3, #8
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	bf14      	ite	ne
 80067ac:	2301      	movne	r3, #1
 80067ae:	2300      	moveq	r3, #0
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	e009      	b.n	80067c8 <HAL_DMA_IRQHandler+0x540>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0304 	and.w	r3, r3, #4
 80067be:	2b00      	cmp	r3, #0
 80067c0:	bf14      	ite	ne
 80067c2:	2301      	movne	r3, #1
 80067c4:	2300      	moveq	r3, #0
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d03e      	beq.n	800684a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067d0:	f003 031f 	and.w	r3, r3, #31
 80067d4:	2210      	movs	r2, #16
 80067d6:	409a      	lsls	r2, r3
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d018      	beq.n	800681c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d108      	bne.n	800680a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d024      	beq.n	800684a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	4798      	blx	r3
 8006808:	e01f      	b.n	800684a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800680e:	2b00      	cmp	r3, #0
 8006810:	d01b      	beq.n	800684a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	4798      	blx	r3
 800681a:	e016      	b.n	800684a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006826:	2b00      	cmp	r3, #0
 8006828:	d107      	bne.n	800683a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 0208 	bic.w	r2, r2, #8
 8006838:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800684e:	f003 031f 	and.w	r3, r3, #31
 8006852:	2220      	movs	r2, #32
 8006854:	409a      	lsls	r2, r3
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	4013      	ands	r3, r2
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 8110 	beq.w	8006a80 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a2c      	ldr	r2, [pc, #176]	@ (8006918 <HAL_DMA_IRQHandler+0x690>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d04a      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a2b      	ldr	r2, [pc, #172]	@ (800691c <HAL_DMA_IRQHandler+0x694>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d045      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a29      	ldr	r2, [pc, #164]	@ (8006920 <HAL_DMA_IRQHandler+0x698>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d040      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a28      	ldr	r2, [pc, #160]	@ (8006924 <HAL_DMA_IRQHandler+0x69c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d03b      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a26      	ldr	r2, [pc, #152]	@ (8006928 <HAL_DMA_IRQHandler+0x6a0>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d036      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a25      	ldr	r2, [pc, #148]	@ (800692c <HAL_DMA_IRQHandler+0x6a4>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d031      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a23      	ldr	r2, [pc, #140]	@ (8006930 <HAL_DMA_IRQHandler+0x6a8>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d02c      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a22      	ldr	r2, [pc, #136]	@ (8006934 <HAL_DMA_IRQHandler+0x6ac>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d027      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a20      	ldr	r2, [pc, #128]	@ (8006938 <HAL_DMA_IRQHandler+0x6b0>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d022      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a1f      	ldr	r2, [pc, #124]	@ (800693c <HAL_DMA_IRQHandler+0x6b4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d01d      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006940 <HAL_DMA_IRQHandler+0x6b8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d018      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a1c      	ldr	r2, [pc, #112]	@ (8006944 <HAL_DMA_IRQHandler+0x6bc>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d013      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a1a      	ldr	r2, [pc, #104]	@ (8006948 <HAL_DMA_IRQHandler+0x6c0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00e      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a19      	ldr	r2, [pc, #100]	@ (800694c <HAL_DMA_IRQHandler+0x6c4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d009      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a17      	ldr	r2, [pc, #92]	@ (8006950 <HAL_DMA_IRQHandler+0x6c8>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d004      	beq.n	8006900 <HAL_DMA_IRQHandler+0x678>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a16      	ldr	r2, [pc, #88]	@ (8006954 <HAL_DMA_IRQHandler+0x6cc>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d12b      	bne.n	8006958 <HAL_DMA_IRQHandler+0x6d0>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0310 	and.w	r3, r3, #16
 800690a:	2b00      	cmp	r3, #0
 800690c:	bf14      	ite	ne
 800690e:	2301      	movne	r3, #1
 8006910:	2300      	moveq	r3, #0
 8006912:	b2db      	uxtb	r3, r3
 8006914:	e02a      	b.n	800696c <HAL_DMA_IRQHandler+0x6e4>
 8006916:	bf00      	nop
 8006918:	40020010 	.word	0x40020010
 800691c:	40020028 	.word	0x40020028
 8006920:	40020040 	.word	0x40020040
 8006924:	40020058 	.word	0x40020058
 8006928:	40020070 	.word	0x40020070
 800692c:	40020088 	.word	0x40020088
 8006930:	400200a0 	.word	0x400200a0
 8006934:	400200b8 	.word	0x400200b8
 8006938:	40020410 	.word	0x40020410
 800693c:	40020428 	.word	0x40020428
 8006940:	40020440 	.word	0x40020440
 8006944:	40020458 	.word	0x40020458
 8006948:	40020470 	.word	0x40020470
 800694c:	40020488 	.word	0x40020488
 8006950:	400204a0 	.word	0x400204a0
 8006954:	400204b8 	.word	0x400204b8
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	bf14      	ite	ne
 8006966:	2301      	movne	r3, #1
 8006968:	2300      	moveq	r3, #0
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 8087 	beq.w	8006a80 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006976:	f003 031f 	and.w	r3, r3, #31
 800697a:	2220      	movs	r2, #32
 800697c:	409a      	lsls	r2, r3
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b04      	cmp	r3, #4
 800698c:	d139      	bne.n	8006a02 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 0216 	bic.w	r2, r2, #22
 800699c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	695a      	ldr	r2, [r3, #20]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069ac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d103      	bne.n	80069be <HAL_DMA_IRQHandler+0x736>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d007      	beq.n	80069ce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 0208 	bic.w	r2, r2, #8
 80069cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069d2:	f003 031f 	and.w	r3, r3, #31
 80069d6:	223f      	movs	r2, #63	@ 0x3f
 80069d8:	409a      	lsls	r2, r3
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f000 834a 	beq.w	800708c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	4798      	blx	r3
          }
          return;
 8006a00:	e344      	b.n	800708c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d018      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d108      	bne.n	8006a30 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d02c      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	4798      	blx	r3
 8006a2e:	e027      	b.n	8006a80 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d023      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	4798      	blx	r3
 8006a40:	e01e      	b.n	8006a80 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10f      	bne.n	8006a70 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0210 	bic.w	r2, r2, #16
 8006a5e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 8306 	beq.w	8007096 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 8088 	beq.w	8006ba8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2204      	movs	r2, #4
 8006a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a7a      	ldr	r2, [pc, #488]	@ (8006c90 <HAL_DMA_IRQHandler+0xa08>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d04a      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a79      	ldr	r2, [pc, #484]	@ (8006c94 <HAL_DMA_IRQHandler+0xa0c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d045      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a77      	ldr	r2, [pc, #476]	@ (8006c98 <HAL_DMA_IRQHandler+0xa10>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d040      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a76      	ldr	r2, [pc, #472]	@ (8006c9c <HAL_DMA_IRQHandler+0xa14>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d03b      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a74      	ldr	r2, [pc, #464]	@ (8006ca0 <HAL_DMA_IRQHandler+0xa18>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d036      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a73      	ldr	r2, [pc, #460]	@ (8006ca4 <HAL_DMA_IRQHandler+0xa1c>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d031      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a71      	ldr	r2, [pc, #452]	@ (8006ca8 <HAL_DMA_IRQHandler+0xa20>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d02c      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a70      	ldr	r2, [pc, #448]	@ (8006cac <HAL_DMA_IRQHandler+0xa24>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d027      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a6e      	ldr	r2, [pc, #440]	@ (8006cb0 <HAL_DMA_IRQHandler+0xa28>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d022      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a6d      	ldr	r2, [pc, #436]	@ (8006cb4 <HAL_DMA_IRQHandler+0xa2c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d01d      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a6b      	ldr	r2, [pc, #428]	@ (8006cb8 <HAL_DMA_IRQHandler+0xa30>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d018      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a6a      	ldr	r2, [pc, #424]	@ (8006cbc <HAL_DMA_IRQHandler+0xa34>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d013      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a68      	ldr	r2, [pc, #416]	@ (8006cc0 <HAL_DMA_IRQHandler+0xa38>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d00e      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a67      	ldr	r2, [pc, #412]	@ (8006cc4 <HAL_DMA_IRQHandler+0xa3c>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d009      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a65      	ldr	r2, [pc, #404]	@ (8006cc8 <HAL_DMA_IRQHandler+0xa40>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d004      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x8b8>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a64      	ldr	r2, [pc, #400]	@ (8006ccc <HAL_DMA_IRQHandler+0xa44>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d108      	bne.n	8006b52 <HAL_DMA_IRQHandler+0x8ca>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 0201 	bic.w	r2, r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	e007      	b.n	8006b62 <HAL_DMA_IRQHandler+0x8da>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 0201 	bic.w	r2, r2, #1
 8006b60:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3301      	adds	r3, #1
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d307      	bcc.n	8006b7e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1f2      	bne.n	8006b62 <HAL_DMA_IRQHandler+0x8da>
 8006b7c:	e000      	b.n	8006b80 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006b7e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d004      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2203      	movs	r2, #3
 8006b92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006b96:	e003      	b.n	8006ba0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 8272 	beq.w	8007096 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	4798      	blx	r3
 8006bba:	e26c      	b.n	8007096 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a43      	ldr	r2, [pc, #268]	@ (8006cd0 <HAL_DMA_IRQHandler+0xa48>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d022      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x984>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a42      	ldr	r2, [pc, #264]	@ (8006cd4 <HAL_DMA_IRQHandler+0xa4c>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d01d      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x984>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a40      	ldr	r2, [pc, #256]	@ (8006cd8 <HAL_DMA_IRQHandler+0xa50>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d018      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x984>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a3f      	ldr	r2, [pc, #252]	@ (8006cdc <HAL_DMA_IRQHandler+0xa54>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d013      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x984>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a3d      	ldr	r2, [pc, #244]	@ (8006ce0 <HAL_DMA_IRQHandler+0xa58>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d00e      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x984>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a3c      	ldr	r2, [pc, #240]	@ (8006ce4 <HAL_DMA_IRQHandler+0xa5c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d009      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x984>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a3a      	ldr	r2, [pc, #232]	@ (8006ce8 <HAL_DMA_IRQHandler+0xa60>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d004      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x984>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a39      	ldr	r2, [pc, #228]	@ (8006cec <HAL_DMA_IRQHandler+0xa64>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d101      	bne.n	8006c10 <HAL_DMA_IRQHandler+0x988>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e000      	b.n	8006c12 <HAL_DMA_IRQHandler+0x98a>
 8006c10:	2300      	movs	r3, #0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 823f 	beq.w	8007096 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c24:	f003 031f 	and.w	r3, r3, #31
 8006c28:	2204      	movs	r2, #4
 8006c2a:	409a      	lsls	r2, r3
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 80cd 	beq.w	8006dd0 <HAL_DMA_IRQHandler+0xb48>
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	f003 0304 	and.w	r3, r3, #4
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 80c7 	beq.w	8006dd0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c46:	f003 031f 	and.w	r3, r3, #31
 8006c4a:	2204      	movs	r2, #4
 8006c4c:	409a      	lsls	r2, r3
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d049      	beq.n	8006cf0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d109      	bne.n	8006c7a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 8210 	beq.w	8007090 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c78:	e20a      	b.n	8007090 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 8206 	beq.w	8007090 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c8c:	e200      	b.n	8007090 <HAL_DMA_IRQHandler+0xe08>
 8006c8e:	bf00      	nop
 8006c90:	40020010 	.word	0x40020010
 8006c94:	40020028 	.word	0x40020028
 8006c98:	40020040 	.word	0x40020040
 8006c9c:	40020058 	.word	0x40020058
 8006ca0:	40020070 	.word	0x40020070
 8006ca4:	40020088 	.word	0x40020088
 8006ca8:	400200a0 	.word	0x400200a0
 8006cac:	400200b8 	.word	0x400200b8
 8006cb0:	40020410 	.word	0x40020410
 8006cb4:	40020428 	.word	0x40020428
 8006cb8:	40020440 	.word	0x40020440
 8006cbc:	40020458 	.word	0x40020458
 8006cc0:	40020470 	.word	0x40020470
 8006cc4:	40020488 	.word	0x40020488
 8006cc8:	400204a0 	.word	0x400204a0
 8006ccc:	400204b8 	.word	0x400204b8
 8006cd0:	58025408 	.word	0x58025408
 8006cd4:	5802541c 	.word	0x5802541c
 8006cd8:	58025430 	.word	0x58025430
 8006cdc:	58025444 	.word	0x58025444
 8006ce0:	58025458 	.word	0x58025458
 8006ce4:	5802546c 	.word	0x5802546c
 8006ce8:	58025480 	.word	0x58025480
 8006cec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f003 0320 	and.w	r3, r3, #32
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d160      	bne.n	8006dbc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a7f      	ldr	r2, [pc, #508]	@ (8006efc <HAL_DMA_IRQHandler+0xc74>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d04a      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a7d      	ldr	r2, [pc, #500]	@ (8006f00 <HAL_DMA_IRQHandler+0xc78>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d045      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a7c      	ldr	r2, [pc, #496]	@ (8006f04 <HAL_DMA_IRQHandler+0xc7c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d040      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a7a      	ldr	r2, [pc, #488]	@ (8006f08 <HAL_DMA_IRQHandler+0xc80>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d03b      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a79      	ldr	r2, [pc, #484]	@ (8006f0c <HAL_DMA_IRQHandler+0xc84>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d036      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a77      	ldr	r2, [pc, #476]	@ (8006f10 <HAL_DMA_IRQHandler+0xc88>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d031      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a76      	ldr	r2, [pc, #472]	@ (8006f14 <HAL_DMA_IRQHandler+0xc8c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d02c      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a74      	ldr	r2, [pc, #464]	@ (8006f18 <HAL_DMA_IRQHandler+0xc90>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d027      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a73      	ldr	r2, [pc, #460]	@ (8006f1c <HAL_DMA_IRQHandler+0xc94>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d022      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a71      	ldr	r2, [pc, #452]	@ (8006f20 <HAL_DMA_IRQHandler+0xc98>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d01d      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a70      	ldr	r2, [pc, #448]	@ (8006f24 <HAL_DMA_IRQHandler+0xc9c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d018      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a6e      	ldr	r2, [pc, #440]	@ (8006f28 <HAL_DMA_IRQHandler+0xca0>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d013      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a6d      	ldr	r2, [pc, #436]	@ (8006f2c <HAL_DMA_IRQHandler+0xca4>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d00e      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a6b      	ldr	r2, [pc, #428]	@ (8006f30 <HAL_DMA_IRQHandler+0xca8>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d009      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a6a      	ldr	r2, [pc, #424]	@ (8006f34 <HAL_DMA_IRQHandler+0xcac>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d004      	beq.n	8006d9a <HAL_DMA_IRQHandler+0xb12>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a68      	ldr	r2, [pc, #416]	@ (8006f38 <HAL_DMA_IRQHandler+0xcb0>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d108      	bne.n	8006dac <HAL_DMA_IRQHandler+0xb24>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f022 0208 	bic.w	r2, r2, #8
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	e007      	b.n	8006dbc <HAL_DMA_IRQHandler+0xb34>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 0204 	bic.w	r2, r2, #4
 8006dba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f000 8165 	beq.w	8007090 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dce:	e15f      	b.n	8007090 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dd4:	f003 031f 	and.w	r3, r3, #31
 8006dd8:	2202      	movs	r2, #2
 8006dda:	409a      	lsls	r2, r3
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	4013      	ands	r3, r2
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 80c5 	beq.w	8006f70 <HAL_DMA_IRQHandler+0xce8>
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 80bf 	beq.w	8006f70 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006df6:	f003 031f 	and.w	r3, r3, #31
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	409a      	lsls	r2, r3
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d018      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d109      	bne.n	8006e2a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 813a 	beq.w	8007094 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e28:	e134      	b.n	8007094 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 8130 	beq.w	8007094 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e3c:	e12a      	b.n	8007094 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	f003 0320 	and.w	r3, r3, #32
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f040 8089 	bne.w	8006f5c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a2b      	ldr	r2, [pc, #172]	@ (8006efc <HAL_DMA_IRQHandler+0xc74>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d04a      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a29      	ldr	r2, [pc, #164]	@ (8006f00 <HAL_DMA_IRQHandler+0xc78>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d045      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a28      	ldr	r2, [pc, #160]	@ (8006f04 <HAL_DMA_IRQHandler+0xc7c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d040      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a26      	ldr	r2, [pc, #152]	@ (8006f08 <HAL_DMA_IRQHandler+0xc80>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d03b      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a25      	ldr	r2, [pc, #148]	@ (8006f0c <HAL_DMA_IRQHandler+0xc84>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d036      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a23      	ldr	r2, [pc, #140]	@ (8006f10 <HAL_DMA_IRQHandler+0xc88>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d031      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a22      	ldr	r2, [pc, #136]	@ (8006f14 <HAL_DMA_IRQHandler+0xc8c>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d02c      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a20      	ldr	r2, [pc, #128]	@ (8006f18 <HAL_DMA_IRQHandler+0xc90>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d027      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8006f1c <HAL_DMA_IRQHandler+0xc94>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d022      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8006f20 <HAL_DMA_IRQHandler+0xc98>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d01d      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8006f24 <HAL_DMA_IRQHandler+0xc9c>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d018      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a1a      	ldr	r2, [pc, #104]	@ (8006f28 <HAL_DMA_IRQHandler+0xca0>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d013      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a19      	ldr	r2, [pc, #100]	@ (8006f2c <HAL_DMA_IRQHandler+0xca4>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d00e      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a17      	ldr	r2, [pc, #92]	@ (8006f30 <HAL_DMA_IRQHandler+0xca8>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d009      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a16      	ldr	r2, [pc, #88]	@ (8006f34 <HAL_DMA_IRQHandler+0xcac>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d004      	beq.n	8006eea <HAL_DMA_IRQHandler+0xc62>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a14      	ldr	r2, [pc, #80]	@ (8006f38 <HAL_DMA_IRQHandler+0xcb0>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d128      	bne.n	8006f3c <HAL_DMA_IRQHandler+0xcb4>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f022 0214 	bic.w	r2, r2, #20
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	e027      	b.n	8006f4c <HAL_DMA_IRQHandler+0xcc4>
 8006efc:	40020010 	.word	0x40020010
 8006f00:	40020028 	.word	0x40020028
 8006f04:	40020040 	.word	0x40020040
 8006f08:	40020058 	.word	0x40020058
 8006f0c:	40020070 	.word	0x40020070
 8006f10:	40020088 	.word	0x40020088
 8006f14:	400200a0 	.word	0x400200a0
 8006f18:	400200b8 	.word	0x400200b8
 8006f1c:	40020410 	.word	0x40020410
 8006f20:	40020428 	.word	0x40020428
 8006f24:	40020440 	.word	0x40020440
 8006f28:	40020458 	.word	0x40020458
 8006f2c:	40020470 	.word	0x40020470
 8006f30:	40020488 	.word	0x40020488
 8006f34:	400204a0 	.word	0x400204a0
 8006f38:	400204b8 	.word	0x400204b8
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 020a 	bic.w	r2, r2, #10
 8006f4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 8097 	beq.w	8007094 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f6e:	e091      	b.n	8007094 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f74:	f003 031f 	and.w	r3, r3, #31
 8006f78:	2208      	movs	r2, #8
 8006f7a:	409a      	lsls	r2, r3
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	4013      	ands	r3, r2
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 8088 	beq.w	8007096 <HAL_DMA_IRQHandler+0xe0e>
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f003 0308 	and.w	r3, r3, #8
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 8082 	beq.w	8007096 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a41      	ldr	r2, [pc, #260]	@ (800709c <HAL_DMA_IRQHandler+0xe14>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d04a      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a3f      	ldr	r2, [pc, #252]	@ (80070a0 <HAL_DMA_IRQHandler+0xe18>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d045      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a3e      	ldr	r2, [pc, #248]	@ (80070a4 <HAL_DMA_IRQHandler+0xe1c>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d040      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a3c      	ldr	r2, [pc, #240]	@ (80070a8 <HAL_DMA_IRQHandler+0xe20>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d03b      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a3b      	ldr	r2, [pc, #236]	@ (80070ac <HAL_DMA_IRQHandler+0xe24>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d036      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a39      	ldr	r2, [pc, #228]	@ (80070b0 <HAL_DMA_IRQHandler+0xe28>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d031      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a38      	ldr	r2, [pc, #224]	@ (80070b4 <HAL_DMA_IRQHandler+0xe2c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d02c      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a36      	ldr	r2, [pc, #216]	@ (80070b8 <HAL_DMA_IRQHandler+0xe30>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d027      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a35      	ldr	r2, [pc, #212]	@ (80070bc <HAL_DMA_IRQHandler+0xe34>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d022      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a33      	ldr	r2, [pc, #204]	@ (80070c0 <HAL_DMA_IRQHandler+0xe38>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d01d      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a32      	ldr	r2, [pc, #200]	@ (80070c4 <HAL_DMA_IRQHandler+0xe3c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d018      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a30      	ldr	r2, [pc, #192]	@ (80070c8 <HAL_DMA_IRQHandler+0xe40>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d013      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a2f      	ldr	r2, [pc, #188]	@ (80070cc <HAL_DMA_IRQHandler+0xe44>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d00e      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a2d      	ldr	r2, [pc, #180]	@ (80070d0 <HAL_DMA_IRQHandler+0xe48>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d009      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a2c      	ldr	r2, [pc, #176]	@ (80070d4 <HAL_DMA_IRQHandler+0xe4c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d004      	beq.n	8007032 <HAL_DMA_IRQHandler+0xdaa>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a2a      	ldr	r2, [pc, #168]	@ (80070d8 <HAL_DMA_IRQHandler+0xe50>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d108      	bne.n	8007044 <HAL_DMA_IRQHandler+0xdbc>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f022 021c 	bic.w	r2, r2, #28
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	e007      	b.n	8007054 <HAL_DMA_IRQHandler+0xdcc>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 020e 	bic.w	r2, r2, #14
 8007052:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007058:	f003 031f 	and.w	r3, r3, #31
 800705c:	2201      	movs	r2, #1
 800705e:	409a      	lsls	r2, r3
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800707e:	2b00      	cmp	r3, #0
 8007080:	d009      	beq.n	8007096 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	4798      	blx	r3
 800708a:	e004      	b.n	8007096 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800708c:	bf00      	nop
 800708e:	e002      	b.n	8007096 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007090:	bf00      	nop
 8007092:	e000      	b.n	8007096 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007094:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007096:	3728      	adds	r7, #40	@ 0x28
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	40020010 	.word	0x40020010
 80070a0:	40020028 	.word	0x40020028
 80070a4:	40020040 	.word	0x40020040
 80070a8:	40020058 	.word	0x40020058
 80070ac:	40020070 	.word	0x40020070
 80070b0:	40020088 	.word	0x40020088
 80070b4:	400200a0 	.word	0x400200a0
 80070b8:	400200b8 	.word	0x400200b8
 80070bc:	40020410 	.word	0x40020410
 80070c0:	40020428 	.word	0x40020428
 80070c4:	40020440 	.word	0x40020440
 80070c8:	40020458 	.word	0x40020458
 80070cc:	40020470 	.word	0x40020470
 80070d0:	40020488 	.word	0x40020488
 80070d4:	400204a0 	.word	0x400204a0
 80070d8:	400204b8 	.word	0x400204b8

080070dc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
 80070e8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ee:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070f4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a7f      	ldr	r2, [pc, #508]	@ (80072f8 <DMA_SetConfig+0x21c>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d072      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a7d      	ldr	r2, [pc, #500]	@ (80072fc <DMA_SetConfig+0x220>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d06d      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a7c      	ldr	r2, [pc, #496]	@ (8007300 <DMA_SetConfig+0x224>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d068      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a7a      	ldr	r2, [pc, #488]	@ (8007304 <DMA_SetConfig+0x228>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d063      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a79      	ldr	r2, [pc, #484]	@ (8007308 <DMA_SetConfig+0x22c>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d05e      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a77      	ldr	r2, [pc, #476]	@ (800730c <DMA_SetConfig+0x230>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d059      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a76      	ldr	r2, [pc, #472]	@ (8007310 <DMA_SetConfig+0x234>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d054      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a74      	ldr	r2, [pc, #464]	@ (8007314 <DMA_SetConfig+0x238>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d04f      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a73      	ldr	r2, [pc, #460]	@ (8007318 <DMA_SetConfig+0x23c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d04a      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a71      	ldr	r2, [pc, #452]	@ (800731c <DMA_SetConfig+0x240>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d045      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a70      	ldr	r2, [pc, #448]	@ (8007320 <DMA_SetConfig+0x244>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d040      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a6e      	ldr	r2, [pc, #440]	@ (8007324 <DMA_SetConfig+0x248>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d03b      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a6d      	ldr	r2, [pc, #436]	@ (8007328 <DMA_SetConfig+0x24c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d036      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a6b      	ldr	r2, [pc, #428]	@ (800732c <DMA_SetConfig+0x250>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d031      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a6a      	ldr	r2, [pc, #424]	@ (8007330 <DMA_SetConfig+0x254>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d02c      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a68      	ldr	r2, [pc, #416]	@ (8007334 <DMA_SetConfig+0x258>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d027      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a67      	ldr	r2, [pc, #412]	@ (8007338 <DMA_SetConfig+0x25c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d022      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a65      	ldr	r2, [pc, #404]	@ (800733c <DMA_SetConfig+0x260>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d01d      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a64      	ldr	r2, [pc, #400]	@ (8007340 <DMA_SetConfig+0x264>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d018      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a62      	ldr	r2, [pc, #392]	@ (8007344 <DMA_SetConfig+0x268>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d013      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a61      	ldr	r2, [pc, #388]	@ (8007348 <DMA_SetConfig+0x26c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d00e      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a5f      	ldr	r2, [pc, #380]	@ (800734c <DMA_SetConfig+0x270>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d009      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a5e      	ldr	r2, [pc, #376]	@ (8007350 <DMA_SetConfig+0x274>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d004      	beq.n	80071e6 <DMA_SetConfig+0x10a>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a5c      	ldr	r2, [pc, #368]	@ (8007354 <DMA_SetConfig+0x278>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d101      	bne.n	80071ea <DMA_SetConfig+0x10e>
 80071e6:	2301      	movs	r3, #1
 80071e8:	e000      	b.n	80071ec <DMA_SetConfig+0x110>
 80071ea:	2300      	movs	r3, #0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00d      	beq.n	800720c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80071f8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d004      	beq.n	800720c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800720a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a39      	ldr	r2, [pc, #228]	@ (80072f8 <DMA_SetConfig+0x21c>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d04a      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a38      	ldr	r2, [pc, #224]	@ (80072fc <DMA_SetConfig+0x220>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d045      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a36      	ldr	r2, [pc, #216]	@ (8007300 <DMA_SetConfig+0x224>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d040      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a35      	ldr	r2, [pc, #212]	@ (8007304 <DMA_SetConfig+0x228>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d03b      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a33      	ldr	r2, [pc, #204]	@ (8007308 <DMA_SetConfig+0x22c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d036      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a32      	ldr	r2, [pc, #200]	@ (800730c <DMA_SetConfig+0x230>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d031      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a30      	ldr	r2, [pc, #192]	@ (8007310 <DMA_SetConfig+0x234>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d02c      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a2f      	ldr	r2, [pc, #188]	@ (8007314 <DMA_SetConfig+0x238>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d027      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a2d      	ldr	r2, [pc, #180]	@ (8007318 <DMA_SetConfig+0x23c>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d022      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a2c      	ldr	r2, [pc, #176]	@ (800731c <DMA_SetConfig+0x240>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d01d      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a2a      	ldr	r2, [pc, #168]	@ (8007320 <DMA_SetConfig+0x244>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d018      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a29      	ldr	r2, [pc, #164]	@ (8007324 <DMA_SetConfig+0x248>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d013      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a27      	ldr	r2, [pc, #156]	@ (8007328 <DMA_SetConfig+0x24c>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d00e      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a26      	ldr	r2, [pc, #152]	@ (800732c <DMA_SetConfig+0x250>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d009      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a24      	ldr	r2, [pc, #144]	@ (8007330 <DMA_SetConfig+0x254>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d004      	beq.n	80072ac <DMA_SetConfig+0x1d0>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a23      	ldr	r2, [pc, #140]	@ (8007334 <DMA_SetConfig+0x258>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d101      	bne.n	80072b0 <DMA_SetConfig+0x1d4>
 80072ac:	2301      	movs	r3, #1
 80072ae:	e000      	b.n	80072b2 <DMA_SetConfig+0x1d6>
 80072b0:	2300      	movs	r3, #0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d059      	beq.n	800736a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072ba:	f003 031f 	and.w	r3, r3, #31
 80072be:	223f      	movs	r2, #63	@ 0x3f
 80072c0:	409a      	lsls	r2, r3
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80072d4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	2b40      	cmp	r3, #64	@ 0x40
 80072e4:	d138      	bne.n	8007358 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80072f6:	e086      	b.n	8007406 <DMA_SetConfig+0x32a>
 80072f8:	40020010 	.word	0x40020010
 80072fc:	40020028 	.word	0x40020028
 8007300:	40020040 	.word	0x40020040
 8007304:	40020058 	.word	0x40020058
 8007308:	40020070 	.word	0x40020070
 800730c:	40020088 	.word	0x40020088
 8007310:	400200a0 	.word	0x400200a0
 8007314:	400200b8 	.word	0x400200b8
 8007318:	40020410 	.word	0x40020410
 800731c:	40020428 	.word	0x40020428
 8007320:	40020440 	.word	0x40020440
 8007324:	40020458 	.word	0x40020458
 8007328:	40020470 	.word	0x40020470
 800732c:	40020488 	.word	0x40020488
 8007330:	400204a0 	.word	0x400204a0
 8007334:	400204b8 	.word	0x400204b8
 8007338:	58025408 	.word	0x58025408
 800733c:	5802541c 	.word	0x5802541c
 8007340:	58025430 	.word	0x58025430
 8007344:	58025444 	.word	0x58025444
 8007348:	58025458 	.word	0x58025458
 800734c:	5802546c 	.word	0x5802546c
 8007350:	58025480 	.word	0x58025480
 8007354:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	60da      	str	r2, [r3, #12]
}
 8007368:	e04d      	b.n	8007406 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a29      	ldr	r2, [pc, #164]	@ (8007414 <DMA_SetConfig+0x338>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d022      	beq.n	80073ba <DMA_SetConfig+0x2de>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a27      	ldr	r2, [pc, #156]	@ (8007418 <DMA_SetConfig+0x33c>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d01d      	beq.n	80073ba <DMA_SetConfig+0x2de>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a26      	ldr	r2, [pc, #152]	@ (800741c <DMA_SetConfig+0x340>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d018      	beq.n	80073ba <DMA_SetConfig+0x2de>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a24      	ldr	r2, [pc, #144]	@ (8007420 <DMA_SetConfig+0x344>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d013      	beq.n	80073ba <DMA_SetConfig+0x2de>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a23      	ldr	r2, [pc, #140]	@ (8007424 <DMA_SetConfig+0x348>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d00e      	beq.n	80073ba <DMA_SetConfig+0x2de>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a21      	ldr	r2, [pc, #132]	@ (8007428 <DMA_SetConfig+0x34c>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d009      	beq.n	80073ba <DMA_SetConfig+0x2de>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a20      	ldr	r2, [pc, #128]	@ (800742c <DMA_SetConfig+0x350>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d004      	beq.n	80073ba <DMA_SetConfig+0x2de>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a1e      	ldr	r2, [pc, #120]	@ (8007430 <DMA_SetConfig+0x354>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d101      	bne.n	80073be <DMA_SetConfig+0x2e2>
 80073ba:	2301      	movs	r3, #1
 80073bc:	e000      	b.n	80073c0 <DMA_SetConfig+0x2e4>
 80073be:	2300      	movs	r3, #0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d020      	beq.n	8007406 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073c8:	f003 031f 	and.w	r3, r3, #31
 80073cc:	2201      	movs	r2, #1
 80073ce:	409a      	lsls	r2, r3
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	2b40      	cmp	r3, #64	@ 0x40
 80073e2:	d108      	bne.n	80073f6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	60da      	str	r2, [r3, #12]
}
 80073f4:	e007      	b.n	8007406 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	60da      	str	r2, [r3, #12]
}
 8007406:	bf00      	nop
 8007408:	371c      	adds	r7, #28
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	58025408 	.word	0x58025408
 8007418:	5802541c 	.word	0x5802541c
 800741c:	58025430 	.word	0x58025430
 8007420:	58025444 	.word	0x58025444
 8007424:	58025458 	.word	0x58025458
 8007428:	5802546c 	.word	0x5802546c
 800742c:	58025480 	.word	0x58025480
 8007430:	58025494 	.word	0x58025494

08007434 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a42      	ldr	r2, [pc, #264]	@ (800754c <DMA_CalcBaseAndBitshift+0x118>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d04a      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a41      	ldr	r2, [pc, #260]	@ (8007550 <DMA_CalcBaseAndBitshift+0x11c>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d045      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a3f      	ldr	r2, [pc, #252]	@ (8007554 <DMA_CalcBaseAndBitshift+0x120>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d040      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a3e      	ldr	r2, [pc, #248]	@ (8007558 <DMA_CalcBaseAndBitshift+0x124>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d03b      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a3c      	ldr	r2, [pc, #240]	@ (800755c <DMA_CalcBaseAndBitshift+0x128>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d036      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a3b      	ldr	r2, [pc, #236]	@ (8007560 <DMA_CalcBaseAndBitshift+0x12c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d031      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a39      	ldr	r2, [pc, #228]	@ (8007564 <DMA_CalcBaseAndBitshift+0x130>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d02c      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a38      	ldr	r2, [pc, #224]	@ (8007568 <DMA_CalcBaseAndBitshift+0x134>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d027      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a36      	ldr	r2, [pc, #216]	@ (800756c <DMA_CalcBaseAndBitshift+0x138>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d022      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a35      	ldr	r2, [pc, #212]	@ (8007570 <DMA_CalcBaseAndBitshift+0x13c>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d01d      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a33      	ldr	r2, [pc, #204]	@ (8007574 <DMA_CalcBaseAndBitshift+0x140>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d018      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a32      	ldr	r2, [pc, #200]	@ (8007578 <DMA_CalcBaseAndBitshift+0x144>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d013      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a30      	ldr	r2, [pc, #192]	@ (800757c <DMA_CalcBaseAndBitshift+0x148>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00e      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a2f      	ldr	r2, [pc, #188]	@ (8007580 <DMA_CalcBaseAndBitshift+0x14c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d009      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a2d      	ldr	r2, [pc, #180]	@ (8007584 <DMA_CalcBaseAndBitshift+0x150>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d004      	beq.n	80074dc <DMA_CalcBaseAndBitshift+0xa8>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a2c      	ldr	r2, [pc, #176]	@ (8007588 <DMA_CalcBaseAndBitshift+0x154>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d101      	bne.n	80074e0 <DMA_CalcBaseAndBitshift+0xac>
 80074dc:	2301      	movs	r3, #1
 80074de:	e000      	b.n	80074e2 <DMA_CalcBaseAndBitshift+0xae>
 80074e0:	2300      	movs	r3, #0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d024      	beq.n	8007530 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	3b10      	subs	r3, #16
 80074ee:	4a27      	ldr	r2, [pc, #156]	@ (800758c <DMA_CalcBaseAndBitshift+0x158>)
 80074f0:	fba2 2303 	umull	r2, r3, r2, r3
 80074f4:	091b      	lsrs	r3, r3, #4
 80074f6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f003 0307 	and.w	r3, r3, #7
 80074fe:	4a24      	ldr	r2, [pc, #144]	@ (8007590 <DMA_CalcBaseAndBitshift+0x15c>)
 8007500:	5cd3      	ldrb	r3, [r2, r3]
 8007502:	461a      	mov	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2b03      	cmp	r3, #3
 800750c:	d908      	bls.n	8007520 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	461a      	mov	r2, r3
 8007514:	4b1f      	ldr	r3, [pc, #124]	@ (8007594 <DMA_CalcBaseAndBitshift+0x160>)
 8007516:	4013      	ands	r3, r2
 8007518:	1d1a      	adds	r2, r3, #4
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	659a      	str	r2, [r3, #88]	@ 0x58
 800751e:	e00d      	b.n	800753c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	461a      	mov	r2, r3
 8007526:	4b1b      	ldr	r3, [pc, #108]	@ (8007594 <DMA_CalcBaseAndBitshift+0x160>)
 8007528:	4013      	ands	r3, r2
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	6593      	str	r3, [r2, #88]	@ 0x58
 800752e:	e005      	b.n	800753c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	40020010 	.word	0x40020010
 8007550:	40020028 	.word	0x40020028
 8007554:	40020040 	.word	0x40020040
 8007558:	40020058 	.word	0x40020058
 800755c:	40020070 	.word	0x40020070
 8007560:	40020088 	.word	0x40020088
 8007564:	400200a0 	.word	0x400200a0
 8007568:	400200b8 	.word	0x400200b8
 800756c:	40020410 	.word	0x40020410
 8007570:	40020428 	.word	0x40020428
 8007574:	40020440 	.word	0x40020440
 8007578:	40020458 	.word	0x40020458
 800757c:	40020470 	.word	0x40020470
 8007580:	40020488 	.word	0x40020488
 8007584:	400204a0 	.word	0x400204a0
 8007588:	400204b8 	.word	0x400204b8
 800758c:	aaaaaaab 	.word	0xaaaaaaab
 8007590:	0800fb90 	.word	0x0800fb90
 8007594:	fffffc00 	.word	0xfffffc00

08007598 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d120      	bne.n	80075ee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b0:	2b03      	cmp	r3, #3
 80075b2:	d858      	bhi.n	8007666 <DMA_CheckFifoParam+0xce>
 80075b4:	a201      	add	r2, pc, #4	@ (adr r2, 80075bc <DMA_CheckFifoParam+0x24>)
 80075b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ba:	bf00      	nop
 80075bc:	080075cd 	.word	0x080075cd
 80075c0:	080075df 	.word	0x080075df
 80075c4:	080075cd 	.word	0x080075cd
 80075c8:	08007667 	.word	0x08007667
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d048      	beq.n	800766a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075dc:	e045      	b.n	800766a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80075e6:	d142      	bne.n	800766e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075ec:	e03f      	b.n	800766e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075f6:	d123      	bne.n	8007640 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d838      	bhi.n	8007672 <DMA_CheckFifoParam+0xda>
 8007600:	a201      	add	r2, pc, #4	@ (adr r2, 8007608 <DMA_CheckFifoParam+0x70>)
 8007602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007606:	bf00      	nop
 8007608:	08007619 	.word	0x08007619
 800760c:	0800761f 	.word	0x0800761f
 8007610:	08007619 	.word	0x08007619
 8007614:	08007631 	.word	0x08007631
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	73fb      	strb	r3, [r7, #15]
        break;
 800761c:	e030      	b.n	8007680 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007622:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d025      	beq.n	8007676 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800762e:	e022      	b.n	8007676 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007634:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007638:	d11f      	bne.n	800767a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800763e:	e01c      	b.n	800767a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007644:	2b02      	cmp	r3, #2
 8007646:	d902      	bls.n	800764e <DMA_CheckFifoParam+0xb6>
 8007648:	2b03      	cmp	r3, #3
 800764a:	d003      	beq.n	8007654 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800764c:	e018      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	73fb      	strb	r3, [r7, #15]
        break;
 8007652:	e015      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007658:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00e      	beq.n	800767e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	73fb      	strb	r3, [r7, #15]
    break;
 8007664:	e00b      	b.n	800767e <DMA_CheckFifoParam+0xe6>
        break;
 8007666:	bf00      	nop
 8007668:	e00a      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
        break;
 800766a:	bf00      	nop
 800766c:	e008      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
        break;
 800766e:	bf00      	nop
 8007670:	e006      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
        break;
 8007672:	bf00      	nop
 8007674:	e004      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
        break;
 8007676:	bf00      	nop
 8007678:	e002      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
        break;
 800767a:	bf00      	nop
 800767c:	e000      	b.n	8007680 <DMA_CheckFifoParam+0xe8>
    break;
 800767e:	bf00      	nop
    }
  }

  return status;
 8007680:	7bfb      	ldrb	r3, [r7, #15]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop

08007690 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a38      	ldr	r2, [pc, #224]	@ (8007784 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d022      	beq.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a36      	ldr	r2, [pc, #216]	@ (8007788 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d01d      	beq.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a35      	ldr	r2, [pc, #212]	@ (800778c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d018      	beq.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a33      	ldr	r2, [pc, #204]	@ (8007790 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d013      	beq.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a32      	ldr	r2, [pc, #200]	@ (8007794 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d00e      	beq.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a30      	ldr	r2, [pc, #192]	@ (8007798 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d009      	beq.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a2f      	ldr	r2, [pc, #188]	@ (800779c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d004      	beq.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a2d      	ldr	r2, [pc, #180]	@ (80077a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d101      	bne.n	80076f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e000      	b.n	80076f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80076f2:	2300      	movs	r3, #0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d01a      	beq.n	800772e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	3b08      	subs	r3, #8
 8007700:	4a28      	ldr	r2, [pc, #160]	@ (80077a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007702:	fba2 2303 	umull	r2, r3, r2, r3
 8007706:	091b      	lsrs	r3, r3, #4
 8007708:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	4b26      	ldr	r3, [pc, #152]	@ (80077a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800770e:	4413      	add	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	461a      	mov	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a24      	ldr	r2, [pc, #144]	@ (80077ac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800771c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f003 031f 	and.w	r3, r3, #31
 8007724:	2201      	movs	r2, #1
 8007726:	409a      	lsls	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800772c:	e024      	b.n	8007778 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	b2db      	uxtb	r3, r3
 8007734:	3b10      	subs	r3, #16
 8007736:	4a1e      	ldr	r2, [pc, #120]	@ (80077b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007738:	fba2 2303 	umull	r2, r3, r2, r3
 800773c:	091b      	lsrs	r3, r3, #4
 800773e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	4a1c      	ldr	r2, [pc, #112]	@ (80077b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d806      	bhi.n	8007756 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	4a1b      	ldr	r2, [pc, #108]	@ (80077b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d902      	bls.n	8007756 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	3308      	adds	r3, #8
 8007754:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	4b18      	ldr	r3, [pc, #96]	@ (80077bc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800775a:	4413      	add	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	461a      	mov	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a16      	ldr	r2, [pc, #88]	@ (80077c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007768:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f003 031f 	and.w	r3, r3, #31
 8007770:	2201      	movs	r2, #1
 8007772:	409a      	lsls	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007778:	bf00      	nop
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	58025408 	.word	0x58025408
 8007788:	5802541c 	.word	0x5802541c
 800778c:	58025430 	.word	0x58025430
 8007790:	58025444 	.word	0x58025444
 8007794:	58025458 	.word	0x58025458
 8007798:	5802546c 	.word	0x5802546c
 800779c:	58025480 	.word	0x58025480
 80077a0:	58025494 	.word	0x58025494
 80077a4:	cccccccd 	.word	0xcccccccd
 80077a8:	16009600 	.word	0x16009600
 80077ac:	58025880 	.word	0x58025880
 80077b0:	aaaaaaab 	.word	0xaaaaaaab
 80077b4:	400204b8 	.word	0x400204b8
 80077b8:	4002040f 	.word	0x4002040f
 80077bc:	10008200 	.word	0x10008200
 80077c0:	40020880 	.word	0x40020880

080077c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d04a      	beq.n	8007870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2b08      	cmp	r3, #8
 80077de:	d847      	bhi.n	8007870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a25      	ldr	r2, [pc, #148]	@ (800787c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d022      	beq.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a24      	ldr	r2, [pc, #144]	@ (8007880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d01d      	beq.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a22      	ldr	r2, [pc, #136]	@ (8007884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d018      	beq.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a21      	ldr	r2, [pc, #132]	@ (8007888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d013      	beq.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a1f      	ldr	r2, [pc, #124]	@ (800788c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00e      	beq.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a1e      	ldr	r2, [pc, #120]	@ (8007890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d009      	beq.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a1c      	ldr	r2, [pc, #112]	@ (8007894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d004      	beq.n	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a1b      	ldr	r2, [pc, #108]	@ (8007898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d101      	bne.n	8007834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007830:	2301      	movs	r3, #1
 8007832:	e000      	b.n	8007836 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007834:	2300      	movs	r3, #0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	4b17      	ldr	r3, [pc, #92]	@ (800789c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800783e:	4413      	add	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	461a      	mov	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a15      	ldr	r2, [pc, #84]	@ (80078a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800784c:	671a      	str	r2, [r3, #112]	@ 0x70
 800784e:	e009      	b.n	8007864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	4b14      	ldr	r3, [pc, #80]	@ (80078a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007854:	4413      	add	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	461a      	mov	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a11      	ldr	r2, [pc, #68]	@ (80078a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007862:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	3b01      	subs	r3, #1
 8007868:	2201      	movs	r2, #1
 800786a:	409a      	lsls	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007870:	bf00      	nop
 8007872:	3714      	adds	r7, #20
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	58025408 	.word	0x58025408
 8007880:	5802541c 	.word	0x5802541c
 8007884:	58025430 	.word	0x58025430
 8007888:	58025444 	.word	0x58025444
 800788c:	58025458 	.word	0x58025458
 8007890:	5802546c 	.word	0x5802546c
 8007894:	58025480 	.word	0x58025480
 8007898:	58025494 	.word	0x58025494
 800789c:	1600963f 	.word	0x1600963f
 80078a0:	58025940 	.word	0x58025940
 80078a4:	1000823f 	.word	0x1000823f
 80078a8:	40020940 	.word	0x40020940

080078ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b089      	sub	sp, #36	@ 0x24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80078ba:	4b86      	ldr	r3, [pc, #536]	@ (8007ad4 <HAL_GPIO_Init+0x228>)
 80078bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80078be:	e18c      	b.n	8007bda <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	2101      	movs	r1, #1
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	fa01 f303 	lsl.w	r3, r1, r3
 80078cc:	4013      	ands	r3, r2
 80078ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f000 817e 	beq.w	8007bd4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f003 0303 	and.w	r3, r3, #3
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d005      	beq.n	80078f0 <HAL_GPIO_Init+0x44>
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	f003 0303 	and.w	r3, r3, #3
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d130      	bne.n	8007952 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	005b      	lsls	r3, r3, #1
 80078fa:	2203      	movs	r2, #3
 80078fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007900:	43db      	mvns	r3, r3
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	4013      	ands	r3, r2
 8007906:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	005b      	lsls	r3, r3, #1
 8007910:	fa02 f303 	lsl.w	r3, r2, r3
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	4313      	orrs	r3, r2
 8007918:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007926:	2201      	movs	r2, #1
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	fa02 f303 	lsl.w	r3, r2, r3
 800792e:	43db      	mvns	r3, r3
 8007930:	69ba      	ldr	r2, [r7, #24]
 8007932:	4013      	ands	r3, r2
 8007934:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	091b      	lsrs	r3, r3, #4
 800793c:	f003 0201 	and.w	r2, r3, #1
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	fa02 f303 	lsl.w	r3, r2, r3
 8007946:	69ba      	ldr	r2, [r7, #24]
 8007948:	4313      	orrs	r3, r2
 800794a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	69ba      	ldr	r2, [r7, #24]
 8007950:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f003 0303 	and.w	r3, r3, #3
 800795a:	2b03      	cmp	r3, #3
 800795c:	d017      	beq.n	800798e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	2203      	movs	r2, #3
 800796a:	fa02 f303 	lsl.w	r3, r2, r3
 800796e:	43db      	mvns	r3, r3
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	4013      	ands	r3, r2
 8007974:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	689a      	ldr	r2, [r3, #8]
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	005b      	lsls	r3, r3, #1
 800797e:	fa02 f303 	lsl.w	r3, r2, r3
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	4313      	orrs	r3, r2
 8007986:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	69ba      	ldr	r2, [r7, #24]
 800798c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f003 0303 	and.w	r3, r3, #3
 8007996:	2b02      	cmp	r3, #2
 8007998:	d123      	bne.n	80079e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	08da      	lsrs	r2, r3, #3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	3208      	adds	r2, #8
 80079a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	f003 0307 	and.w	r3, r3, #7
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	220f      	movs	r2, #15
 80079b2:	fa02 f303 	lsl.w	r3, r2, r3
 80079b6:	43db      	mvns	r3, r3
 80079b8:	69ba      	ldr	r2, [r7, #24]
 80079ba:	4013      	ands	r3, r2
 80079bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	691a      	ldr	r2, [r3, #16]
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	f003 0307 	and.w	r3, r3, #7
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	fa02 f303 	lsl.w	r3, r2, r3
 80079ce:	69ba      	ldr	r2, [r7, #24]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	08da      	lsrs	r2, r3, #3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	3208      	adds	r2, #8
 80079dc:	69b9      	ldr	r1, [r7, #24]
 80079de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	005b      	lsls	r3, r3, #1
 80079ec:	2203      	movs	r2, #3
 80079ee:	fa02 f303 	lsl.w	r3, r2, r3
 80079f2:	43db      	mvns	r3, r3
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	4013      	ands	r3, r2
 80079f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f003 0203 	and.w	r2, r3, #3
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0a:	69ba      	ldr	r2, [r7, #24]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	69ba      	ldr	r2, [r7, #24]
 8007a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 80d8 	beq.w	8007bd4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a24:	4b2c      	ldr	r3, [pc, #176]	@ (8007ad8 <HAL_GPIO_Init+0x22c>)
 8007a26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a2a:	4a2b      	ldr	r2, [pc, #172]	@ (8007ad8 <HAL_GPIO_Init+0x22c>)
 8007a2c:	f043 0302 	orr.w	r3, r3, #2
 8007a30:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007a34:	4b28      	ldr	r3, [pc, #160]	@ (8007ad8 <HAL_GPIO_Init+0x22c>)
 8007a36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a3a:	f003 0302 	and.w	r3, r3, #2
 8007a3e:	60fb      	str	r3, [r7, #12]
 8007a40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007a42:	4a26      	ldr	r2, [pc, #152]	@ (8007adc <HAL_GPIO_Init+0x230>)
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	089b      	lsrs	r3, r3, #2
 8007a48:	3302      	adds	r3, #2
 8007a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	f003 0303 	and.w	r3, r3, #3
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	220f      	movs	r2, #15
 8007a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a5e:	43db      	mvns	r3, r3
 8007a60:	69ba      	ldr	r2, [r7, #24]
 8007a62:	4013      	ands	r3, r2
 8007a64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a1d      	ldr	r2, [pc, #116]	@ (8007ae0 <HAL_GPIO_Init+0x234>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d04a      	beq.n	8007b04 <HAL_GPIO_Init+0x258>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a1c      	ldr	r2, [pc, #112]	@ (8007ae4 <HAL_GPIO_Init+0x238>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d02b      	beq.n	8007ace <HAL_GPIO_Init+0x222>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a1b      	ldr	r2, [pc, #108]	@ (8007ae8 <HAL_GPIO_Init+0x23c>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d025      	beq.n	8007aca <HAL_GPIO_Init+0x21e>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a1a      	ldr	r2, [pc, #104]	@ (8007aec <HAL_GPIO_Init+0x240>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d01f      	beq.n	8007ac6 <HAL_GPIO_Init+0x21a>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a19      	ldr	r2, [pc, #100]	@ (8007af0 <HAL_GPIO_Init+0x244>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d019      	beq.n	8007ac2 <HAL_GPIO_Init+0x216>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a18      	ldr	r2, [pc, #96]	@ (8007af4 <HAL_GPIO_Init+0x248>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d013      	beq.n	8007abe <HAL_GPIO_Init+0x212>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a17      	ldr	r2, [pc, #92]	@ (8007af8 <HAL_GPIO_Init+0x24c>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d00d      	beq.n	8007aba <HAL_GPIO_Init+0x20e>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a16      	ldr	r2, [pc, #88]	@ (8007afc <HAL_GPIO_Init+0x250>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d007      	beq.n	8007ab6 <HAL_GPIO_Init+0x20a>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a15      	ldr	r2, [pc, #84]	@ (8007b00 <HAL_GPIO_Init+0x254>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d101      	bne.n	8007ab2 <HAL_GPIO_Init+0x206>
 8007aae:	2309      	movs	r3, #9
 8007ab0:	e029      	b.n	8007b06 <HAL_GPIO_Init+0x25a>
 8007ab2:	230a      	movs	r3, #10
 8007ab4:	e027      	b.n	8007b06 <HAL_GPIO_Init+0x25a>
 8007ab6:	2307      	movs	r3, #7
 8007ab8:	e025      	b.n	8007b06 <HAL_GPIO_Init+0x25a>
 8007aba:	2306      	movs	r3, #6
 8007abc:	e023      	b.n	8007b06 <HAL_GPIO_Init+0x25a>
 8007abe:	2305      	movs	r3, #5
 8007ac0:	e021      	b.n	8007b06 <HAL_GPIO_Init+0x25a>
 8007ac2:	2304      	movs	r3, #4
 8007ac4:	e01f      	b.n	8007b06 <HAL_GPIO_Init+0x25a>
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e01d      	b.n	8007b06 <HAL_GPIO_Init+0x25a>
 8007aca:	2302      	movs	r3, #2
 8007acc:	e01b      	b.n	8007b06 <HAL_GPIO_Init+0x25a>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e019      	b.n	8007b06 <HAL_GPIO_Init+0x25a>
 8007ad2:	bf00      	nop
 8007ad4:	58000080 	.word	0x58000080
 8007ad8:	58024400 	.word	0x58024400
 8007adc:	58000400 	.word	0x58000400
 8007ae0:	58020000 	.word	0x58020000
 8007ae4:	58020400 	.word	0x58020400
 8007ae8:	58020800 	.word	0x58020800
 8007aec:	58020c00 	.word	0x58020c00
 8007af0:	58021000 	.word	0x58021000
 8007af4:	58021400 	.word	0x58021400
 8007af8:	58021800 	.word	0x58021800
 8007afc:	58021c00 	.word	0x58021c00
 8007b00:	58022400 	.word	0x58022400
 8007b04:	2300      	movs	r3, #0
 8007b06:	69fa      	ldr	r2, [r7, #28]
 8007b08:	f002 0203 	and.w	r2, r2, #3
 8007b0c:	0092      	lsls	r2, r2, #2
 8007b0e:	4093      	lsls	r3, r2
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b16:	4938      	ldr	r1, [pc, #224]	@ (8007bf8 <HAL_GPIO_Init+0x34c>)
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	089b      	lsrs	r3, r3, #2
 8007b1c:	3302      	adds	r3, #2
 8007b1e:	69ba      	ldr	r2, [r7, #24]
 8007b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007b24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	43db      	mvns	r3, r3
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	4013      	ands	r3, r2
 8007b34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007b42:	69ba      	ldr	r2, [r7, #24]
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007b4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007b52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	43db      	mvns	r3, r3
 8007b5e:	69ba      	ldr	r2, [r7, #24]
 8007b60:	4013      	ands	r3, r2
 8007b62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d003      	beq.n	8007b78 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007b78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	43db      	mvns	r3, r3
 8007b8a:	69ba      	ldr	r2, [r7, #24]
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d003      	beq.n	8007ba4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007b9c:	69ba      	ldr	r2, [r7, #24]
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	69ba      	ldr	r2, [r7, #24]
 8007ba8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	43db      	mvns	r3, r3
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007bc6:	69ba      	ldr	r2, [r7, #24]
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	69ba      	ldr	r2, [r7, #24]
 8007bd2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	fa22 f303 	lsr.w	r3, r2, r3
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f47f ae6b 	bne.w	80078c0 <HAL_GPIO_Init+0x14>
  }
}
 8007bea:	bf00      	nop
 8007bec:	bf00      	nop
 8007bee:	3724      	adds	r7, #36	@ 0x24
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr
 8007bf8:	58000400 	.word	0x58000400

08007bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	460b      	mov	r3, r1
 8007c06:	807b      	strh	r3, [r7, #2]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c0c:	787b      	ldrb	r3, [r7, #1]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c12:	887a      	ldrh	r2, [r7, #2]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007c18:	e003      	b.n	8007c22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007c1a:	887b      	ldrh	r3, [r7, #2]
 8007c1c:	041a      	lsls	r2, r3, #16
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	619a      	str	r2, [r3, #24]
}
 8007c22:	bf00      	nop
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b085      	sub	sp, #20
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	460b      	mov	r3, r1
 8007c38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007c40:	887a      	ldrh	r2, [r7, #2]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	4013      	ands	r3, r2
 8007c46:	041a      	lsls	r2, r3, #16
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	43d9      	mvns	r1, r3
 8007c4c:	887b      	ldrh	r3, [r7, #2]
 8007c4e:	400b      	ands	r3, r1
 8007c50:	431a      	orrs	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	619a      	str	r2, [r3, #24]
}
 8007c56:	bf00      	nop
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b082      	sub	sp, #8
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	4603      	mov	r3, r0
 8007c6a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007c6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c70:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007c74:	88fb      	ldrh	r3, [r7, #6]
 8007c76:	4013      	ands	r3, r2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d008      	beq.n	8007c8e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c80:	88fb      	ldrh	r3, [r7, #6]
 8007c82:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c86:	88fb      	ldrh	r3, [r7, #6]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7f9 f9ab 	bl	8000fe4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007c8e:	bf00      	nop
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007ca0:	4b19      	ldr	r3, [pc, #100]	@ (8007d08 <HAL_PWREx_ConfigSupply+0x70>)
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f003 0304 	and.w	r3, r3, #4
 8007ca8:	2b04      	cmp	r3, #4
 8007caa:	d00a      	beq.n	8007cc2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007cac:	4b16      	ldr	r3, [pc, #88]	@ (8007d08 <HAL_PWREx_ConfigSupply+0x70>)
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f003 0307 	and.w	r3, r3, #7
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d001      	beq.n	8007cbe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e01f      	b.n	8007cfe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	e01d      	b.n	8007cfe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007cc2:	4b11      	ldr	r3, [pc, #68]	@ (8007d08 <HAL_PWREx_ConfigSupply+0x70>)
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	f023 0207 	bic.w	r2, r3, #7
 8007cca:	490f      	ldr	r1, [pc, #60]	@ (8007d08 <HAL_PWREx_ConfigSupply+0x70>)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007cd2:	f7fa fdb5 	bl	8002840 <HAL_GetTick>
 8007cd6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007cd8:	e009      	b.n	8007cee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007cda:	f7fa fdb1 	bl	8002840 <HAL_GetTick>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	1ad3      	subs	r3, r2, r3
 8007ce4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ce8:	d901      	bls.n	8007cee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e007      	b.n	8007cfe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007cee:	4b06      	ldr	r3, [pc, #24]	@ (8007d08 <HAL_PWREx_ConfigSupply+0x70>)
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cfa:	d1ee      	bne.n	8007cda <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	58024800 	.word	0x58024800

08007d0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b08c      	sub	sp, #48	@ 0x30
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e3c8      	b.n	80084b0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0301 	and.w	r3, r3, #1
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f000 8087 	beq.w	8007e3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d2c:	4b88      	ldr	r3, [pc, #544]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d36:	4b86      	ldr	r3, [pc, #536]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d3e:	2b10      	cmp	r3, #16
 8007d40:	d007      	beq.n	8007d52 <HAL_RCC_OscConfig+0x46>
 8007d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d44:	2b18      	cmp	r3, #24
 8007d46:	d110      	bne.n	8007d6a <HAL_RCC_OscConfig+0x5e>
 8007d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4a:	f003 0303 	and.w	r3, r3, #3
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d10b      	bne.n	8007d6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d52:	4b7f      	ldr	r3, [pc, #508]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d06c      	beq.n	8007e38 <HAL_RCC_OscConfig+0x12c>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d168      	bne.n	8007e38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e3a2      	b.n	80084b0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d72:	d106      	bne.n	8007d82 <HAL_RCC_OscConfig+0x76>
 8007d74:	4b76      	ldr	r3, [pc, #472]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a75      	ldr	r2, [pc, #468]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007d7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d7e:	6013      	str	r3, [r2, #0]
 8007d80:	e02e      	b.n	8007de0 <HAL_RCC_OscConfig+0xd4>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10c      	bne.n	8007da4 <HAL_RCC_OscConfig+0x98>
 8007d8a:	4b71      	ldr	r3, [pc, #452]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a70      	ldr	r2, [pc, #448]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007d90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	4b6e      	ldr	r3, [pc, #440]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a6d      	ldr	r2, [pc, #436]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007d9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007da0:	6013      	str	r3, [r2, #0]
 8007da2:	e01d      	b.n	8007de0 <HAL_RCC_OscConfig+0xd4>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007dac:	d10c      	bne.n	8007dc8 <HAL_RCC_OscConfig+0xbc>
 8007dae:	4b68      	ldr	r3, [pc, #416]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a67      	ldr	r2, [pc, #412]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007db4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007db8:	6013      	str	r3, [r2, #0]
 8007dba:	4b65      	ldr	r3, [pc, #404]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a64      	ldr	r2, [pc, #400]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007dc4:	6013      	str	r3, [r2, #0]
 8007dc6:	e00b      	b.n	8007de0 <HAL_RCC_OscConfig+0xd4>
 8007dc8:	4b61      	ldr	r3, [pc, #388]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a60      	ldr	r2, [pc, #384]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007dd2:	6013      	str	r3, [r2, #0]
 8007dd4:	4b5e      	ldr	r3, [pc, #376]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a5d      	ldr	r2, [pc, #372]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007dda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d013      	beq.n	8007e10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007de8:	f7fa fd2a 	bl	8002840 <HAL_GetTick>
 8007dec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007dee:	e008      	b.n	8007e02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007df0:	f7fa fd26 	bl	8002840 <HAL_GetTick>
 8007df4:	4602      	mov	r2, r0
 8007df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	2b64      	cmp	r3, #100	@ 0x64
 8007dfc:	d901      	bls.n	8007e02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e356      	b.n	80084b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e02:	4b53      	ldr	r3, [pc, #332]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d0f0      	beq.n	8007df0 <HAL_RCC_OscConfig+0xe4>
 8007e0e:	e014      	b.n	8007e3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e10:	f7fa fd16 	bl	8002840 <HAL_GetTick>
 8007e14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007e16:	e008      	b.n	8007e2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e18:	f7fa fd12 	bl	8002840 <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	2b64      	cmp	r3, #100	@ 0x64
 8007e24:	d901      	bls.n	8007e2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e342      	b.n	80084b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007e2a:	4b49      	ldr	r3, [pc, #292]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1f0      	bne.n	8007e18 <HAL_RCC_OscConfig+0x10c>
 8007e36:	e000      	b.n	8007e3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0302 	and.w	r3, r3, #2
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f000 808c 	beq.w	8007f60 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e48:	4b41      	ldr	r3, [pc, #260]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e52:	4b3f      	ldr	r3, [pc, #252]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e56:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007e58:	6a3b      	ldr	r3, [r7, #32]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d007      	beq.n	8007e6e <HAL_RCC_OscConfig+0x162>
 8007e5e:	6a3b      	ldr	r3, [r7, #32]
 8007e60:	2b18      	cmp	r3, #24
 8007e62:	d137      	bne.n	8007ed4 <HAL_RCC_OscConfig+0x1c8>
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	f003 0303 	and.w	r3, r3, #3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d132      	bne.n	8007ed4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e6e:	4b38      	ldr	r3, [pc, #224]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0304 	and.w	r3, r3, #4
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d005      	beq.n	8007e86 <HAL_RCC_OscConfig+0x17a>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d101      	bne.n	8007e86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e314      	b.n	80084b0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e86:	4b32      	ldr	r3, [pc, #200]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f023 0219 	bic.w	r2, r3, #25
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	492f      	ldr	r1, [pc, #188]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e98:	f7fa fcd2 	bl	8002840 <HAL_GetTick>
 8007e9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e9e:	e008      	b.n	8007eb2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ea0:	f7fa fcce 	bl	8002840 <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d901      	bls.n	8007eb2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e2fe      	b.n	80084b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007eb2:	4b27      	ldr	r3, [pc, #156]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0304 	and.w	r3, r3, #4
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d0f0      	beq.n	8007ea0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ebe:	4b24      	ldr	r3, [pc, #144]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	061b      	lsls	r3, r3, #24
 8007ecc:	4920      	ldr	r1, [pc, #128]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ed2:	e045      	b.n	8007f60 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d026      	beq.n	8007f2a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007edc:	4b1c      	ldr	r3, [pc, #112]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f023 0219 	bic.w	r2, r3, #25
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	4919      	ldr	r1, [pc, #100]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eee:	f7fa fca7 	bl	8002840 <HAL_GetTick>
 8007ef2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ef4:	e008      	b.n	8007f08 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ef6:	f7fa fca3 	bl	8002840 <HAL_GetTick>
 8007efa:	4602      	mov	r2, r0
 8007efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efe:	1ad3      	subs	r3, r2, r3
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d901      	bls.n	8007f08 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007f04:	2303      	movs	r3, #3
 8007f06:	e2d3      	b.n	80084b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f08:	4b11      	ldr	r3, [pc, #68]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 0304 	and.w	r3, r3, #4
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d0f0      	beq.n	8007ef6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f14:	4b0e      	ldr	r3, [pc, #56]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	061b      	lsls	r3, r3, #24
 8007f22:	490b      	ldr	r1, [pc, #44]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007f24:	4313      	orrs	r3, r2
 8007f26:	604b      	str	r3, [r1, #4]
 8007f28:	e01a      	b.n	8007f60 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f2a:	4b09      	ldr	r3, [pc, #36]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a08      	ldr	r2, [pc, #32]	@ (8007f50 <HAL_RCC_OscConfig+0x244>)
 8007f30:	f023 0301 	bic.w	r3, r3, #1
 8007f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f36:	f7fa fc83 	bl	8002840 <HAL_GetTick>
 8007f3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f3c:	e00a      	b.n	8007f54 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f3e:	f7fa fc7f 	bl	8002840 <HAL_GetTick>
 8007f42:	4602      	mov	r2, r0
 8007f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d903      	bls.n	8007f54 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e2af      	b.n	80084b0 <HAL_RCC_OscConfig+0x7a4>
 8007f50:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f54:	4b96      	ldr	r3, [pc, #600]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0304 	and.w	r3, r3, #4
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1ee      	bne.n	8007f3e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 0310 	and.w	r3, r3, #16
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d06a      	beq.n	8008042 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f6c:	4b90      	ldr	r3, [pc, #576]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f74:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f76:	4b8e      	ldr	r3, [pc, #568]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 8007f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	2b08      	cmp	r3, #8
 8007f80:	d007      	beq.n	8007f92 <HAL_RCC_OscConfig+0x286>
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	2b18      	cmp	r3, #24
 8007f86:	d11b      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x2b4>
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f003 0303 	and.w	r3, r3, #3
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d116      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f92:	4b87      	ldr	r3, [pc, #540]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d005      	beq.n	8007faa <HAL_RCC_OscConfig+0x29e>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	2b80      	cmp	r3, #128	@ 0x80
 8007fa4:	d001      	beq.n	8007faa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e282      	b.n	80084b0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007faa:	4b81      	ldr	r3, [pc, #516]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a1b      	ldr	r3, [r3, #32]
 8007fb6:	061b      	lsls	r3, r3, #24
 8007fb8:	497d      	ldr	r1, [pc, #500]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fbe:	e040      	b.n	8008042 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	69db      	ldr	r3, [r3, #28]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d023      	beq.n	8008010 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007fc8:	4b79      	ldr	r3, [pc, #484]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a78      	ldr	r2, [pc, #480]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 8007fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fd4:	f7fa fc34 	bl	8002840 <HAL_GetTick>
 8007fd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007fda:	e008      	b.n	8007fee <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007fdc:	f7fa fc30 	bl	8002840 <HAL_GetTick>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d901      	bls.n	8007fee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e260      	b.n	80084b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007fee:	4b70      	ldr	r3, [pc, #448]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d0f0      	beq.n	8007fdc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ffa:	4b6d      	ldr	r3, [pc, #436]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	061b      	lsls	r3, r3, #24
 8008008:	4969      	ldr	r1, [pc, #420]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 800800a:	4313      	orrs	r3, r2
 800800c:	60cb      	str	r3, [r1, #12]
 800800e:	e018      	b.n	8008042 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008010:	4b67      	ldr	r3, [pc, #412]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a66      	ldr	r2, [pc, #408]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 8008016:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800801a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800801c:	f7fa fc10 	bl	8002840 <HAL_GetTick>
 8008020:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008022:	e008      	b.n	8008036 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008024:	f7fa fc0c 	bl	8002840 <HAL_GetTick>
 8008028:	4602      	mov	r2, r0
 800802a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	2b02      	cmp	r3, #2
 8008030:	d901      	bls.n	8008036 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e23c      	b.n	80084b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008036:	4b5e      	ldr	r3, [pc, #376]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1f0      	bne.n	8008024 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0308 	and.w	r3, r3, #8
 800804a:	2b00      	cmp	r3, #0
 800804c:	d036      	beq.n	80080bc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d019      	beq.n	800808a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008056:	4b56      	ldr	r3, [pc, #344]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 8008058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800805a:	4a55      	ldr	r2, [pc, #340]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 800805c:	f043 0301 	orr.w	r3, r3, #1
 8008060:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008062:	f7fa fbed 	bl	8002840 <HAL_GetTick>
 8008066:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008068:	e008      	b.n	800807c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800806a:	f7fa fbe9 	bl	8002840 <HAL_GetTick>
 800806e:	4602      	mov	r2, r0
 8008070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	2b02      	cmp	r3, #2
 8008076:	d901      	bls.n	800807c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e219      	b.n	80084b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800807c:	4b4c      	ldr	r3, [pc, #304]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 800807e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008080:	f003 0302 	and.w	r3, r3, #2
 8008084:	2b00      	cmp	r3, #0
 8008086:	d0f0      	beq.n	800806a <HAL_RCC_OscConfig+0x35e>
 8008088:	e018      	b.n	80080bc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800808a:	4b49      	ldr	r3, [pc, #292]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 800808c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800808e:	4a48      	ldr	r2, [pc, #288]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 8008090:	f023 0301 	bic.w	r3, r3, #1
 8008094:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008096:	f7fa fbd3 	bl	8002840 <HAL_GetTick>
 800809a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800809c:	e008      	b.n	80080b0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800809e:	f7fa fbcf 	bl	8002840 <HAL_GetTick>
 80080a2:	4602      	mov	r2, r0
 80080a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d901      	bls.n	80080b0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e1ff      	b.n	80084b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080b0:	4b3f      	ldr	r3, [pc, #252]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 80080b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080b4:	f003 0302 	and.w	r3, r3, #2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1f0      	bne.n	800809e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0320 	and.w	r3, r3, #32
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d036      	beq.n	8008136 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d019      	beq.n	8008104 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80080d0:	4b37      	ldr	r3, [pc, #220]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a36      	ldr	r2, [pc, #216]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 80080d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80080da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80080dc:	f7fa fbb0 	bl	8002840 <HAL_GetTick>
 80080e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80080e2:	e008      	b.n	80080f6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080e4:	f7fa fbac 	bl	8002840 <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d901      	bls.n	80080f6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e1dc      	b.n	80084b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80080f6:	4b2e      	ldr	r3, [pc, #184]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d0f0      	beq.n	80080e4 <HAL_RCC_OscConfig+0x3d8>
 8008102:	e018      	b.n	8008136 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008104:	4b2a      	ldr	r3, [pc, #168]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a29      	ldr	r2, [pc, #164]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 800810a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800810e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008110:	f7fa fb96 	bl	8002840 <HAL_GetTick>
 8008114:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008116:	e008      	b.n	800812a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008118:	f7fa fb92 	bl	8002840 <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	2b02      	cmp	r3, #2
 8008124:	d901      	bls.n	800812a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e1c2      	b.n	80084b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800812a:	4b21      	ldr	r3, [pc, #132]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1f0      	bne.n	8008118 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f003 0304 	and.w	r3, r3, #4
 800813e:	2b00      	cmp	r3, #0
 8008140:	f000 8086 	beq.w	8008250 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008144:	4b1b      	ldr	r3, [pc, #108]	@ (80081b4 <HAL_RCC_OscConfig+0x4a8>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a1a      	ldr	r2, [pc, #104]	@ (80081b4 <HAL_RCC_OscConfig+0x4a8>)
 800814a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800814e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008150:	f7fa fb76 	bl	8002840 <HAL_GetTick>
 8008154:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008156:	e008      	b.n	800816a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008158:	f7fa fb72 	bl	8002840 <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	2b64      	cmp	r3, #100	@ 0x64
 8008164:	d901      	bls.n	800816a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e1a2      	b.n	80084b0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800816a:	4b12      	ldr	r3, [pc, #72]	@ (80081b4 <HAL_RCC_OscConfig+0x4a8>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008172:	2b00      	cmp	r3, #0
 8008174:	d0f0      	beq.n	8008158 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d106      	bne.n	800818c <HAL_RCC_OscConfig+0x480>
 800817e:	4b0c      	ldr	r3, [pc, #48]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 8008180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008182:	4a0b      	ldr	r2, [pc, #44]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 8008184:	f043 0301 	orr.w	r3, r3, #1
 8008188:	6713      	str	r3, [r2, #112]	@ 0x70
 800818a:	e032      	b.n	80081f2 <HAL_RCC_OscConfig+0x4e6>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d111      	bne.n	80081b8 <HAL_RCC_OscConfig+0x4ac>
 8008194:	4b06      	ldr	r3, [pc, #24]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 8008196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008198:	4a05      	ldr	r2, [pc, #20]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 800819a:	f023 0301 	bic.w	r3, r3, #1
 800819e:	6713      	str	r3, [r2, #112]	@ 0x70
 80081a0:	4b03      	ldr	r3, [pc, #12]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 80081a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081a4:	4a02      	ldr	r2, [pc, #8]	@ (80081b0 <HAL_RCC_OscConfig+0x4a4>)
 80081a6:	f023 0304 	bic.w	r3, r3, #4
 80081aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80081ac:	e021      	b.n	80081f2 <HAL_RCC_OscConfig+0x4e6>
 80081ae:	bf00      	nop
 80081b0:	58024400 	.word	0x58024400
 80081b4:	58024800 	.word	0x58024800
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	2b05      	cmp	r3, #5
 80081be:	d10c      	bne.n	80081da <HAL_RCC_OscConfig+0x4ce>
 80081c0:	4b83      	ldr	r3, [pc, #524]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 80081c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081c4:	4a82      	ldr	r2, [pc, #520]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 80081c6:	f043 0304 	orr.w	r3, r3, #4
 80081ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80081cc:	4b80      	ldr	r3, [pc, #512]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 80081ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081d0:	4a7f      	ldr	r2, [pc, #508]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 80081d2:	f043 0301 	orr.w	r3, r3, #1
 80081d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80081d8:	e00b      	b.n	80081f2 <HAL_RCC_OscConfig+0x4e6>
 80081da:	4b7d      	ldr	r3, [pc, #500]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 80081dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081de:	4a7c      	ldr	r2, [pc, #496]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 80081e0:	f023 0301 	bic.w	r3, r3, #1
 80081e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80081e6:	4b7a      	ldr	r3, [pc, #488]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 80081e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081ea:	4a79      	ldr	r2, [pc, #484]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 80081ec:	f023 0304 	bic.w	r3, r3, #4
 80081f0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d015      	beq.n	8008226 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081fa:	f7fa fb21 	bl	8002840 <HAL_GetTick>
 80081fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008200:	e00a      	b.n	8008218 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008202:	f7fa fb1d 	bl	8002840 <HAL_GetTick>
 8008206:	4602      	mov	r2, r0
 8008208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008210:	4293      	cmp	r3, r2
 8008212:	d901      	bls.n	8008218 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008214:	2303      	movs	r3, #3
 8008216:	e14b      	b.n	80084b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008218:	4b6d      	ldr	r3, [pc, #436]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 800821a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800821c:	f003 0302 	and.w	r3, r3, #2
 8008220:	2b00      	cmp	r3, #0
 8008222:	d0ee      	beq.n	8008202 <HAL_RCC_OscConfig+0x4f6>
 8008224:	e014      	b.n	8008250 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008226:	f7fa fb0b 	bl	8002840 <HAL_GetTick>
 800822a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800822c:	e00a      	b.n	8008244 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800822e:	f7fa fb07 	bl	8002840 <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800823c:	4293      	cmp	r3, r2
 800823e:	d901      	bls.n	8008244 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	e135      	b.n	80084b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008244:	4b62      	ldr	r3, [pc, #392]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 8008246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008248:	f003 0302 	and.w	r3, r3, #2
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1ee      	bne.n	800822e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008254:	2b00      	cmp	r3, #0
 8008256:	f000 812a 	beq.w	80084ae <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800825a:	4b5d      	ldr	r3, [pc, #372]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008262:	2b18      	cmp	r3, #24
 8008264:	f000 80ba 	beq.w	80083dc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800826c:	2b02      	cmp	r3, #2
 800826e:	f040 8095 	bne.w	800839c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008272:	4b57      	ldr	r3, [pc, #348]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a56      	ldr	r2, [pc, #344]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 8008278:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800827c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800827e:	f7fa fadf 	bl	8002840 <HAL_GetTick>
 8008282:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008284:	e008      	b.n	8008298 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008286:	f7fa fadb 	bl	8002840 <HAL_GetTick>
 800828a:	4602      	mov	r2, r0
 800828c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	2b02      	cmp	r3, #2
 8008292:	d901      	bls.n	8008298 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	e10b      	b.n	80084b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008298:	4b4d      	ldr	r3, [pc, #308]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1f0      	bne.n	8008286 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082a4:	4b4a      	ldr	r3, [pc, #296]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 80082a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80082a8:	4b4a      	ldr	r3, [pc, #296]	@ (80083d4 <HAL_RCC_OscConfig+0x6c8>)
 80082aa:	4013      	ands	r3, r2
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80082b4:	0112      	lsls	r2, r2, #4
 80082b6:	430a      	orrs	r2, r1
 80082b8:	4945      	ldr	r1, [pc, #276]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 80082ba:	4313      	orrs	r3, r2
 80082bc:	628b      	str	r3, [r1, #40]	@ 0x28
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082c2:	3b01      	subs	r3, #1
 80082c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082cc:	3b01      	subs	r3, #1
 80082ce:	025b      	lsls	r3, r3, #9
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	431a      	orrs	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d8:	3b01      	subs	r3, #1
 80082da:	041b      	lsls	r3, r3, #16
 80082dc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80082e0:	431a      	orrs	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082e6:	3b01      	subs	r3, #1
 80082e8:	061b      	lsls	r3, r3, #24
 80082ea:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80082ee:	4938      	ldr	r1, [pc, #224]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 80082f0:	4313      	orrs	r3, r2
 80082f2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80082f4:	4b36      	ldr	r3, [pc, #216]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 80082f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f8:	4a35      	ldr	r2, [pc, #212]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 80082fa:	f023 0301 	bic.w	r3, r3, #1
 80082fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008300:	4b33      	ldr	r3, [pc, #204]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 8008302:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008304:	4b34      	ldr	r3, [pc, #208]	@ (80083d8 <HAL_RCC_OscConfig+0x6cc>)
 8008306:	4013      	ands	r3, r2
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800830c:	00d2      	lsls	r2, r2, #3
 800830e:	4930      	ldr	r1, [pc, #192]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 8008310:	4313      	orrs	r3, r2
 8008312:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008314:	4b2e      	ldr	r3, [pc, #184]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 8008316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008318:	f023 020c 	bic.w	r2, r3, #12
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008320:	492b      	ldr	r1, [pc, #172]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 8008322:	4313      	orrs	r3, r2
 8008324:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008326:	4b2a      	ldr	r3, [pc, #168]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 8008328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800832a:	f023 0202 	bic.w	r2, r3, #2
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008332:	4927      	ldr	r1, [pc, #156]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 8008334:	4313      	orrs	r3, r2
 8008336:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008338:	4b25      	ldr	r3, [pc, #148]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 800833a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833c:	4a24      	ldr	r2, [pc, #144]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 800833e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008342:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008344:	4b22      	ldr	r3, [pc, #136]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 8008346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008348:	4a21      	ldr	r2, [pc, #132]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 800834a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800834e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008350:	4b1f      	ldr	r3, [pc, #124]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 8008352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008354:	4a1e      	ldr	r2, [pc, #120]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 8008356:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800835a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800835c:	4b1c      	ldr	r3, [pc, #112]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 800835e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008360:	4a1b      	ldr	r2, [pc, #108]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 8008362:	f043 0301 	orr.w	r3, r3, #1
 8008366:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008368:	4b19      	ldr	r3, [pc, #100]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a18      	ldr	r2, [pc, #96]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 800836e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008374:	f7fa fa64 	bl	8002840 <HAL_GetTick>
 8008378:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800837a:	e008      	b.n	800838e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800837c:	f7fa fa60 	bl	8002840 <HAL_GetTick>
 8008380:	4602      	mov	r2, r0
 8008382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	2b02      	cmp	r3, #2
 8008388:	d901      	bls.n	800838e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e090      	b.n	80084b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800838e:	4b10      	ldr	r3, [pc, #64]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d0f0      	beq.n	800837c <HAL_RCC_OscConfig+0x670>
 800839a:	e088      	b.n	80084ae <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800839c:	4b0c      	ldr	r3, [pc, #48]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a0b      	ldr	r2, [pc, #44]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 80083a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083a8:	f7fa fa4a 	bl	8002840 <HAL_GetTick>
 80083ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083ae:	e008      	b.n	80083c2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083b0:	f7fa fa46 	bl	8002840 <HAL_GetTick>
 80083b4:	4602      	mov	r2, r0
 80083b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d901      	bls.n	80083c2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	e076      	b.n	80084b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083c2:	4b03      	ldr	r3, [pc, #12]	@ (80083d0 <HAL_RCC_OscConfig+0x6c4>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1f0      	bne.n	80083b0 <HAL_RCC_OscConfig+0x6a4>
 80083ce:	e06e      	b.n	80084ae <HAL_RCC_OscConfig+0x7a2>
 80083d0:	58024400 	.word	0x58024400
 80083d4:	fffffc0c 	.word	0xfffffc0c
 80083d8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80083dc:	4b36      	ldr	r3, [pc, #216]	@ (80084b8 <HAL_RCC_OscConfig+0x7ac>)
 80083de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80083e2:	4b35      	ldr	r3, [pc, #212]	@ (80084b8 <HAL_RCC_OscConfig+0x7ac>)
 80083e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083e6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d031      	beq.n	8008454 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	f003 0203 	and.w	r2, r3, #3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d12a      	bne.n	8008454 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	091b      	lsrs	r3, r3, #4
 8008402:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800840a:	429a      	cmp	r2, r3
 800840c:	d122      	bne.n	8008454 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008418:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800841a:	429a      	cmp	r2, r3
 800841c:	d11a      	bne.n	8008454 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	0a5b      	lsrs	r3, r3, #9
 8008422:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800842a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800842c:	429a      	cmp	r2, r3
 800842e:	d111      	bne.n	8008454 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	0c1b      	lsrs	r3, r3, #16
 8008434:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800843c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800843e:	429a      	cmp	r2, r3
 8008440:	d108      	bne.n	8008454 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	0e1b      	lsrs	r3, r3, #24
 8008446:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800844e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008450:	429a      	cmp	r2, r3
 8008452:	d001      	beq.n	8008458 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	e02b      	b.n	80084b0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008458:	4b17      	ldr	r3, [pc, #92]	@ (80084b8 <HAL_RCC_OscConfig+0x7ac>)
 800845a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800845c:	08db      	lsrs	r3, r3, #3
 800845e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008462:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	429a      	cmp	r2, r3
 800846c:	d01f      	beq.n	80084ae <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800846e:	4b12      	ldr	r3, [pc, #72]	@ (80084b8 <HAL_RCC_OscConfig+0x7ac>)
 8008470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008472:	4a11      	ldr	r2, [pc, #68]	@ (80084b8 <HAL_RCC_OscConfig+0x7ac>)
 8008474:	f023 0301 	bic.w	r3, r3, #1
 8008478:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800847a:	f7fa f9e1 	bl	8002840 <HAL_GetTick>
 800847e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008480:	bf00      	nop
 8008482:	f7fa f9dd 	bl	8002840 <HAL_GetTick>
 8008486:	4602      	mov	r2, r0
 8008488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848a:	4293      	cmp	r3, r2
 800848c:	d0f9      	beq.n	8008482 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800848e:	4b0a      	ldr	r3, [pc, #40]	@ (80084b8 <HAL_RCC_OscConfig+0x7ac>)
 8008490:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008492:	4b0a      	ldr	r3, [pc, #40]	@ (80084bc <HAL_RCC_OscConfig+0x7b0>)
 8008494:	4013      	ands	r3, r2
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800849a:	00d2      	lsls	r2, r2, #3
 800849c:	4906      	ldr	r1, [pc, #24]	@ (80084b8 <HAL_RCC_OscConfig+0x7ac>)
 800849e:	4313      	orrs	r3, r2
 80084a0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80084a2:	4b05      	ldr	r3, [pc, #20]	@ (80084b8 <HAL_RCC_OscConfig+0x7ac>)
 80084a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a6:	4a04      	ldr	r2, [pc, #16]	@ (80084b8 <HAL_RCC_OscConfig+0x7ac>)
 80084a8:	f043 0301 	orr.w	r3, r3, #1
 80084ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3730      	adds	r7, #48	@ 0x30
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	58024400 	.word	0x58024400
 80084bc:	ffff0007 	.word	0xffff0007

080084c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d101      	bne.n	80084d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	e19c      	b.n	800880e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80084d4:	4b8a      	ldr	r3, [pc, #552]	@ (8008700 <HAL_RCC_ClockConfig+0x240>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 030f 	and.w	r3, r3, #15
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d910      	bls.n	8008504 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084e2:	4b87      	ldr	r3, [pc, #540]	@ (8008700 <HAL_RCC_ClockConfig+0x240>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f023 020f 	bic.w	r2, r3, #15
 80084ea:	4985      	ldr	r1, [pc, #532]	@ (8008700 <HAL_RCC_ClockConfig+0x240>)
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084f2:	4b83      	ldr	r3, [pc, #524]	@ (8008700 <HAL_RCC_ClockConfig+0x240>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 030f 	and.w	r3, r3, #15
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d001      	beq.n	8008504 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	e184      	b.n	800880e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0304 	and.w	r3, r3, #4
 800850c:	2b00      	cmp	r3, #0
 800850e:	d010      	beq.n	8008532 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691a      	ldr	r2, [r3, #16]
 8008514:	4b7b      	ldr	r3, [pc, #492]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800851c:	429a      	cmp	r2, r3
 800851e:	d908      	bls.n	8008532 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008520:	4b78      	ldr	r3, [pc, #480]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 8008522:	699b      	ldr	r3, [r3, #24]
 8008524:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	4975      	ldr	r1, [pc, #468]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 800852e:	4313      	orrs	r3, r2
 8008530:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 0308 	and.w	r3, r3, #8
 800853a:	2b00      	cmp	r3, #0
 800853c:	d010      	beq.n	8008560 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	695a      	ldr	r2, [r3, #20]
 8008542:	4b70      	ldr	r3, [pc, #448]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 8008544:	69db      	ldr	r3, [r3, #28]
 8008546:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800854a:	429a      	cmp	r2, r3
 800854c:	d908      	bls.n	8008560 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800854e:	4b6d      	ldr	r3, [pc, #436]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 8008550:	69db      	ldr	r3, [r3, #28]
 8008552:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	496a      	ldr	r1, [pc, #424]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 800855c:	4313      	orrs	r3, r2
 800855e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0310 	and.w	r3, r3, #16
 8008568:	2b00      	cmp	r3, #0
 800856a:	d010      	beq.n	800858e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	699a      	ldr	r2, [r3, #24]
 8008570:	4b64      	ldr	r3, [pc, #400]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 8008572:	69db      	ldr	r3, [r3, #28]
 8008574:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008578:	429a      	cmp	r2, r3
 800857a:	d908      	bls.n	800858e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800857c:	4b61      	ldr	r3, [pc, #388]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 800857e:	69db      	ldr	r3, [r3, #28]
 8008580:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	495e      	ldr	r1, [pc, #376]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 800858a:	4313      	orrs	r3, r2
 800858c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 0320 	and.w	r3, r3, #32
 8008596:	2b00      	cmp	r3, #0
 8008598:	d010      	beq.n	80085bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	69da      	ldr	r2, [r3, #28]
 800859e:	4b59      	ldr	r3, [pc, #356]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d908      	bls.n	80085bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80085aa:	4b56      	ldr	r3, [pc, #344]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	69db      	ldr	r3, [r3, #28]
 80085b6:	4953      	ldr	r1, [pc, #332]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 0302 	and.w	r3, r3, #2
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d010      	beq.n	80085ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	68da      	ldr	r2, [r3, #12]
 80085cc:	4b4d      	ldr	r3, [pc, #308]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	f003 030f 	and.w	r3, r3, #15
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d908      	bls.n	80085ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085d8:	4b4a      	ldr	r3, [pc, #296]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	f023 020f 	bic.w	r2, r3, #15
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	4947      	ldr	r1, [pc, #284]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 80085e6:	4313      	orrs	r3, r2
 80085e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 0301 	and.w	r3, r3, #1
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d055      	beq.n	80086a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80085f6:	4b43      	ldr	r3, [pc, #268]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	4940      	ldr	r1, [pc, #256]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 8008604:	4313      	orrs	r3, r2
 8008606:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	2b02      	cmp	r3, #2
 800860e:	d107      	bne.n	8008620 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008610:	4b3c      	ldr	r3, [pc, #240]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008618:	2b00      	cmp	r3, #0
 800861a:	d121      	bne.n	8008660 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	e0f6      	b.n	800880e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	2b03      	cmp	r3, #3
 8008626:	d107      	bne.n	8008638 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008628:	4b36      	ldr	r3, [pc, #216]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d115      	bne.n	8008660 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e0ea      	b.n	800880e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d107      	bne.n	8008650 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008640:	4b30      	ldr	r3, [pc, #192]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008648:	2b00      	cmp	r3, #0
 800864a:	d109      	bne.n	8008660 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e0de      	b.n	800880e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008650:	4b2c      	ldr	r3, [pc, #176]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 0304 	and.w	r3, r3, #4
 8008658:	2b00      	cmp	r3, #0
 800865a:	d101      	bne.n	8008660 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e0d6      	b.n	800880e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008660:	4b28      	ldr	r3, [pc, #160]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	f023 0207 	bic.w	r2, r3, #7
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	4925      	ldr	r1, [pc, #148]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 800866e:	4313      	orrs	r3, r2
 8008670:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008672:	f7fa f8e5 	bl	8002840 <HAL_GetTick>
 8008676:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008678:	e00a      	b.n	8008690 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800867a:	f7fa f8e1 	bl	8002840 <HAL_GetTick>
 800867e:	4602      	mov	r2, r0
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008688:	4293      	cmp	r3, r2
 800868a:	d901      	bls.n	8008690 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800868c:	2303      	movs	r3, #3
 800868e:	e0be      	b.n	800880e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008690:	4b1c      	ldr	r3, [pc, #112]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	00db      	lsls	r3, r3, #3
 800869e:	429a      	cmp	r2, r3
 80086a0:	d1eb      	bne.n	800867a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 0302 	and.w	r3, r3, #2
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d010      	beq.n	80086d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68da      	ldr	r2, [r3, #12]
 80086b2:	4b14      	ldr	r3, [pc, #80]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	f003 030f 	and.w	r3, r3, #15
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d208      	bcs.n	80086d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086be:	4b11      	ldr	r3, [pc, #68]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	f023 020f 	bic.w	r2, r3, #15
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	490e      	ldr	r1, [pc, #56]	@ (8008704 <HAL_RCC_ClockConfig+0x244>)
 80086cc:	4313      	orrs	r3, r2
 80086ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80086d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008700 <HAL_RCC_ClockConfig+0x240>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 030f 	and.w	r3, r3, #15
 80086d8:	683a      	ldr	r2, [r7, #0]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d214      	bcs.n	8008708 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086de:	4b08      	ldr	r3, [pc, #32]	@ (8008700 <HAL_RCC_ClockConfig+0x240>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f023 020f 	bic.w	r2, r3, #15
 80086e6:	4906      	ldr	r1, [pc, #24]	@ (8008700 <HAL_RCC_ClockConfig+0x240>)
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086ee:	4b04      	ldr	r3, [pc, #16]	@ (8008700 <HAL_RCC_ClockConfig+0x240>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 030f 	and.w	r3, r3, #15
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d005      	beq.n	8008708 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e086      	b.n	800880e <HAL_RCC_ClockConfig+0x34e>
 8008700:	52002000 	.word	0x52002000
 8008704:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 0304 	and.w	r3, r3, #4
 8008710:	2b00      	cmp	r3, #0
 8008712:	d010      	beq.n	8008736 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	691a      	ldr	r2, [r3, #16]
 8008718:	4b3f      	ldr	r3, [pc, #252]	@ (8008818 <HAL_RCC_ClockConfig+0x358>)
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008720:	429a      	cmp	r2, r3
 8008722:	d208      	bcs.n	8008736 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008724:	4b3c      	ldr	r3, [pc, #240]	@ (8008818 <HAL_RCC_ClockConfig+0x358>)
 8008726:	699b      	ldr	r3, [r3, #24]
 8008728:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	4939      	ldr	r1, [pc, #228]	@ (8008818 <HAL_RCC_ClockConfig+0x358>)
 8008732:	4313      	orrs	r3, r2
 8008734:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 0308 	and.w	r3, r3, #8
 800873e:	2b00      	cmp	r3, #0
 8008740:	d010      	beq.n	8008764 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	695a      	ldr	r2, [r3, #20]
 8008746:	4b34      	ldr	r3, [pc, #208]	@ (8008818 <HAL_RCC_ClockConfig+0x358>)
 8008748:	69db      	ldr	r3, [r3, #28]
 800874a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800874e:	429a      	cmp	r2, r3
 8008750:	d208      	bcs.n	8008764 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008752:	4b31      	ldr	r3, [pc, #196]	@ (8008818 <HAL_RCC_ClockConfig+0x358>)
 8008754:	69db      	ldr	r3, [r3, #28]
 8008756:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	695b      	ldr	r3, [r3, #20]
 800875e:	492e      	ldr	r1, [pc, #184]	@ (8008818 <HAL_RCC_ClockConfig+0x358>)
 8008760:	4313      	orrs	r3, r2
 8008762:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0310 	and.w	r3, r3, #16
 800876c:	2b00      	cmp	r3, #0
 800876e:	d010      	beq.n	8008792 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	699a      	ldr	r2, [r3, #24]
 8008774:	4b28      	ldr	r3, [pc, #160]	@ (8008818 <HAL_RCC_ClockConfig+0x358>)
 8008776:	69db      	ldr	r3, [r3, #28]
 8008778:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800877c:	429a      	cmp	r2, r3
 800877e:	d208      	bcs.n	8008792 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008780:	4b25      	ldr	r3, [pc, #148]	@ (8008818 <HAL_RCC_ClockConfig+0x358>)
 8008782:	69db      	ldr	r3, [r3, #28]
 8008784:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	4922      	ldr	r1, [pc, #136]	@ (8008818 <HAL_RCC_ClockConfig+0x358>)
 800878e:	4313      	orrs	r3, r2
 8008790:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 0320 	and.w	r3, r3, #32
 800879a:	2b00      	cmp	r3, #0
 800879c:	d010      	beq.n	80087c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	69da      	ldr	r2, [r3, #28]
 80087a2:	4b1d      	ldr	r3, [pc, #116]	@ (8008818 <HAL_RCC_ClockConfig+0x358>)
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d208      	bcs.n	80087c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80087ae:	4b1a      	ldr	r3, [pc, #104]	@ (8008818 <HAL_RCC_ClockConfig+0x358>)
 80087b0:	6a1b      	ldr	r3, [r3, #32]
 80087b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	69db      	ldr	r3, [r3, #28]
 80087ba:	4917      	ldr	r1, [pc, #92]	@ (8008818 <HAL_RCC_ClockConfig+0x358>)
 80087bc:	4313      	orrs	r3, r2
 80087be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80087c0:	f000 f834 	bl	800882c <HAL_RCC_GetSysClockFreq>
 80087c4:	4602      	mov	r2, r0
 80087c6:	4b14      	ldr	r3, [pc, #80]	@ (8008818 <HAL_RCC_ClockConfig+0x358>)
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	0a1b      	lsrs	r3, r3, #8
 80087cc:	f003 030f 	and.w	r3, r3, #15
 80087d0:	4912      	ldr	r1, [pc, #72]	@ (800881c <HAL_RCC_ClockConfig+0x35c>)
 80087d2:	5ccb      	ldrb	r3, [r1, r3]
 80087d4:	f003 031f 	and.w	r3, r3, #31
 80087d8:	fa22 f303 	lsr.w	r3, r2, r3
 80087dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80087de:	4b0e      	ldr	r3, [pc, #56]	@ (8008818 <HAL_RCC_ClockConfig+0x358>)
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	f003 030f 	and.w	r3, r3, #15
 80087e6:	4a0d      	ldr	r2, [pc, #52]	@ (800881c <HAL_RCC_ClockConfig+0x35c>)
 80087e8:	5cd3      	ldrb	r3, [r2, r3]
 80087ea:	f003 031f 	and.w	r3, r3, #31
 80087ee:	693a      	ldr	r2, [r7, #16]
 80087f0:	fa22 f303 	lsr.w	r3, r2, r3
 80087f4:	4a0a      	ldr	r2, [pc, #40]	@ (8008820 <HAL_RCC_ClockConfig+0x360>)
 80087f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80087f8:	4a0a      	ldr	r2, [pc, #40]	@ (8008824 <HAL_RCC_ClockConfig+0x364>)
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80087fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008828 <HAL_RCC_ClockConfig+0x368>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4618      	mov	r0, r3
 8008804:	f7f9 ffd2 	bl	80027ac <HAL_InitTick>
 8008808:	4603      	mov	r3, r0
 800880a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800880c:	7bfb      	ldrb	r3, [r7, #15]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3718      	adds	r7, #24
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	58024400 	.word	0x58024400
 800881c:	0800fb80 	.word	0x0800fb80
 8008820:	24000058 	.word	0x24000058
 8008824:	24000054 	.word	0x24000054
 8008828:	2400005c 	.word	0x2400005c

0800882c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800882c:	b480      	push	{r7}
 800882e:	b089      	sub	sp, #36	@ 0x24
 8008830:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008832:	4bb3      	ldr	r3, [pc, #716]	@ (8008b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800883a:	2b18      	cmp	r3, #24
 800883c:	f200 8155 	bhi.w	8008aea <HAL_RCC_GetSysClockFreq+0x2be>
 8008840:	a201      	add	r2, pc, #4	@ (adr r2, 8008848 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008846:	bf00      	nop
 8008848:	080088ad 	.word	0x080088ad
 800884c:	08008aeb 	.word	0x08008aeb
 8008850:	08008aeb 	.word	0x08008aeb
 8008854:	08008aeb 	.word	0x08008aeb
 8008858:	08008aeb 	.word	0x08008aeb
 800885c:	08008aeb 	.word	0x08008aeb
 8008860:	08008aeb 	.word	0x08008aeb
 8008864:	08008aeb 	.word	0x08008aeb
 8008868:	080088d3 	.word	0x080088d3
 800886c:	08008aeb 	.word	0x08008aeb
 8008870:	08008aeb 	.word	0x08008aeb
 8008874:	08008aeb 	.word	0x08008aeb
 8008878:	08008aeb 	.word	0x08008aeb
 800887c:	08008aeb 	.word	0x08008aeb
 8008880:	08008aeb 	.word	0x08008aeb
 8008884:	08008aeb 	.word	0x08008aeb
 8008888:	080088d9 	.word	0x080088d9
 800888c:	08008aeb 	.word	0x08008aeb
 8008890:	08008aeb 	.word	0x08008aeb
 8008894:	08008aeb 	.word	0x08008aeb
 8008898:	08008aeb 	.word	0x08008aeb
 800889c:	08008aeb 	.word	0x08008aeb
 80088a0:	08008aeb 	.word	0x08008aeb
 80088a4:	08008aeb 	.word	0x08008aeb
 80088a8:	080088df 	.word	0x080088df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088ac:	4b94      	ldr	r3, [pc, #592]	@ (8008b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0320 	and.w	r3, r3, #32
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d009      	beq.n	80088cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088b8:	4b91      	ldr	r3, [pc, #580]	@ (8008b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	08db      	lsrs	r3, r3, #3
 80088be:	f003 0303 	and.w	r3, r3, #3
 80088c2:	4a90      	ldr	r2, [pc, #576]	@ (8008b04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80088c4:	fa22 f303 	lsr.w	r3, r2, r3
 80088c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80088ca:	e111      	b.n	8008af0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80088cc:	4b8d      	ldr	r3, [pc, #564]	@ (8008b04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80088ce:	61bb      	str	r3, [r7, #24]
      break;
 80088d0:	e10e      	b.n	8008af0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80088d2:	4b8d      	ldr	r3, [pc, #564]	@ (8008b08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80088d4:	61bb      	str	r3, [r7, #24]
      break;
 80088d6:	e10b      	b.n	8008af0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80088d8:	4b8c      	ldr	r3, [pc, #560]	@ (8008b0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80088da:	61bb      	str	r3, [r7, #24]
      break;
 80088dc:	e108      	b.n	8008af0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088de:	4b88      	ldr	r3, [pc, #544]	@ (8008b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e2:	f003 0303 	and.w	r3, r3, #3
 80088e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80088e8:	4b85      	ldr	r3, [pc, #532]	@ (8008b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ec:	091b      	lsrs	r3, r3, #4
 80088ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80088f4:	4b82      	ldr	r3, [pc, #520]	@ (8008b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f8:	f003 0301 	and.w	r3, r3, #1
 80088fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80088fe:	4b80      	ldr	r3, [pc, #512]	@ (8008b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008902:	08db      	lsrs	r3, r3, #3
 8008904:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	fb02 f303 	mul.w	r3, r2, r3
 800890e:	ee07 3a90 	vmov	s15, r3
 8008912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008916:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	f000 80e1 	beq.w	8008ae4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	2b02      	cmp	r3, #2
 8008926:	f000 8083 	beq.w	8008a30 <HAL_RCC_GetSysClockFreq+0x204>
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	2b02      	cmp	r3, #2
 800892e:	f200 80a1 	bhi.w	8008a74 <HAL_RCC_GetSysClockFreq+0x248>
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d003      	beq.n	8008940 <HAL_RCC_GetSysClockFreq+0x114>
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d056      	beq.n	80089ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800893e:	e099      	b.n	8008a74 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008940:	4b6f      	ldr	r3, [pc, #444]	@ (8008b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 0320 	and.w	r3, r3, #32
 8008948:	2b00      	cmp	r3, #0
 800894a:	d02d      	beq.n	80089a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800894c:	4b6c      	ldr	r3, [pc, #432]	@ (8008b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	08db      	lsrs	r3, r3, #3
 8008952:	f003 0303 	and.w	r3, r3, #3
 8008956:	4a6b      	ldr	r2, [pc, #428]	@ (8008b04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008958:	fa22 f303 	lsr.w	r3, r2, r3
 800895c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	ee07 3a90 	vmov	s15, r3
 8008964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	ee07 3a90 	vmov	s15, r3
 800896e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008976:	4b62      	ldr	r3, [pc, #392]	@ (8008b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800897a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800897e:	ee07 3a90 	vmov	s15, r3
 8008982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008986:	ed97 6a02 	vldr	s12, [r7, #8]
 800898a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008b10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800898e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800899a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800899e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80089a6:	e087      	b.n	8008ab8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	ee07 3a90 	vmov	s15, r3
 80089ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008b14 <HAL_RCC_GetSysClockFreq+0x2e8>
 80089b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ba:	4b51      	ldr	r3, [pc, #324]	@ (8008b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c2:	ee07 3a90 	vmov	s15, r3
 80089c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80089ce:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008b10 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80089ea:	e065      	b.n	8008ab8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	ee07 3a90 	vmov	s15, r3
 80089f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008b18 <HAL_RCC_GetSysClockFreq+0x2ec>
 80089fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089fe:	4b40      	ldr	r3, [pc, #256]	@ (8008b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a12:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008b10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a2e:	e043      	b.n	8008ab8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	ee07 3a90 	vmov	s15, r3
 8008a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008b1c <HAL_RCC_GetSysClockFreq+0x2f0>
 8008a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a42:	4b2f      	ldr	r3, [pc, #188]	@ (8008b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a52:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a56:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008b10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a72:	e021      	b.n	8008ab8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	ee07 3a90 	vmov	s15, r3
 8008a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a7e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008b18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a86:	4b1e      	ldr	r3, [pc, #120]	@ (8008b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a96:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a9a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008b10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008ab6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008ab8:	4b11      	ldr	r3, [pc, #68]	@ (8008b00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008abc:	0a5b      	lsrs	r3, r3, #9
 8008abe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	ee07 3a90 	vmov	s15, r3
 8008acc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ad0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008adc:	ee17 3a90 	vmov	r3, s15
 8008ae0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008ae2:	e005      	b.n	8008af0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	61bb      	str	r3, [r7, #24]
      break;
 8008ae8:	e002      	b.n	8008af0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008aea:	4b07      	ldr	r3, [pc, #28]	@ (8008b08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008aec:	61bb      	str	r3, [r7, #24]
      break;
 8008aee:	bf00      	nop
  }

  return sysclockfreq;
 8008af0:	69bb      	ldr	r3, [r7, #24]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3724      	adds	r7, #36	@ 0x24
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	58024400 	.word	0x58024400
 8008b04:	03d09000 	.word	0x03d09000
 8008b08:	003d0900 	.word	0x003d0900
 8008b0c:	017d7840 	.word	0x017d7840
 8008b10:	46000000 	.word	0x46000000
 8008b14:	4c742400 	.word	0x4c742400
 8008b18:	4a742400 	.word	0x4a742400
 8008b1c:	4bbebc20 	.word	0x4bbebc20

08008b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008b26:	f7ff fe81 	bl	800882c <HAL_RCC_GetSysClockFreq>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	4b10      	ldr	r3, [pc, #64]	@ (8008b70 <HAL_RCC_GetHCLKFreq+0x50>)
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	0a1b      	lsrs	r3, r3, #8
 8008b32:	f003 030f 	and.w	r3, r3, #15
 8008b36:	490f      	ldr	r1, [pc, #60]	@ (8008b74 <HAL_RCC_GetHCLKFreq+0x54>)
 8008b38:	5ccb      	ldrb	r3, [r1, r3]
 8008b3a:	f003 031f 	and.w	r3, r3, #31
 8008b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b44:	4b0a      	ldr	r3, [pc, #40]	@ (8008b70 <HAL_RCC_GetHCLKFreq+0x50>)
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	f003 030f 	and.w	r3, r3, #15
 8008b4c:	4a09      	ldr	r2, [pc, #36]	@ (8008b74 <HAL_RCC_GetHCLKFreq+0x54>)
 8008b4e:	5cd3      	ldrb	r3, [r2, r3]
 8008b50:	f003 031f 	and.w	r3, r3, #31
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	fa22 f303 	lsr.w	r3, r2, r3
 8008b5a:	4a07      	ldr	r2, [pc, #28]	@ (8008b78 <HAL_RCC_GetHCLKFreq+0x58>)
 8008b5c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b5e:	4a07      	ldr	r2, [pc, #28]	@ (8008b7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008b64:	4b04      	ldr	r3, [pc, #16]	@ (8008b78 <HAL_RCC_GetHCLKFreq+0x58>)
 8008b66:	681b      	ldr	r3, [r3, #0]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	58024400 	.word	0x58024400
 8008b74:	0800fb80 	.word	0x0800fb80
 8008b78:	24000058 	.word	0x24000058
 8008b7c:	24000054 	.word	0x24000054

08008b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008b84:	f7ff ffcc 	bl	8008b20 <HAL_RCC_GetHCLKFreq>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	4b06      	ldr	r3, [pc, #24]	@ (8008ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b8c:	69db      	ldr	r3, [r3, #28]
 8008b8e:	091b      	lsrs	r3, r3, #4
 8008b90:	f003 0307 	and.w	r3, r3, #7
 8008b94:	4904      	ldr	r1, [pc, #16]	@ (8008ba8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008b96:	5ccb      	ldrb	r3, [r1, r3]
 8008b98:	f003 031f 	and.w	r3, r3, #31
 8008b9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	58024400 	.word	0x58024400
 8008ba8:	0800fb80 	.word	0x0800fb80

08008bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008bb0:	f7ff ffb6 	bl	8008b20 <HAL_RCC_GetHCLKFreq>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	4b06      	ldr	r3, [pc, #24]	@ (8008bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bb8:	69db      	ldr	r3, [r3, #28]
 8008bba:	0a1b      	lsrs	r3, r3, #8
 8008bbc:	f003 0307 	and.w	r3, r3, #7
 8008bc0:	4904      	ldr	r1, [pc, #16]	@ (8008bd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008bc2:	5ccb      	ldrb	r3, [r1, r3]
 8008bc4:	f003 031f 	and.w	r3, r3, #31
 8008bc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	58024400 	.word	0x58024400
 8008bd4:	0800fb80 	.word	0x0800fb80

08008bd8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bdc:	b0c6      	sub	sp, #280	@ 0x118
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008be4:	2300      	movs	r3, #0
 8008be6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008bea:	2300      	movs	r3, #0
 8008bec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008bfc:	2500      	movs	r5, #0
 8008bfe:	ea54 0305 	orrs.w	r3, r4, r5
 8008c02:	d049      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c0e:	d02f      	beq.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008c10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c14:	d828      	bhi.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008c16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c1a:	d01a      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008c1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c20:	d822      	bhi.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008c26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c2a:	d007      	beq.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008c2c:	e01c      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c2e:	4bab      	ldr	r3, [pc, #684]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c32:	4aaa      	ldr	r2, [pc, #680]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008c3a:	e01a      	b.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c40:	3308      	adds	r3, #8
 8008c42:	2102      	movs	r1, #2
 8008c44:	4618      	mov	r0, r3
 8008c46:	f002 fa49 	bl	800b0dc <RCCEx_PLL2_Config>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008c50:	e00f      	b.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c56:	3328      	adds	r3, #40	@ 0x28
 8008c58:	2102      	movs	r1, #2
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f002 faf0 	bl	800b240 <RCCEx_PLL3_Config>
 8008c60:	4603      	mov	r3, r0
 8008c62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008c66:	e004      	b.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008c6e:	e000      	b.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d10a      	bne.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008c7a:	4b98      	ldr	r3, [pc, #608]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c7e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c88:	4a94      	ldr	r2, [pc, #592]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c8a:	430b      	orrs	r3, r1
 8008c8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c8e:	e003      	b.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008ca4:	f04f 0900 	mov.w	r9, #0
 8008ca8:	ea58 0309 	orrs.w	r3, r8, r9
 8008cac:	d047      	beq.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cb4:	2b04      	cmp	r3, #4
 8008cb6:	d82a      	bhi.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cbe:	bf00      	nop
 8008cc0:	08008cd5 	.word	0x08008cd5
 8008cc4:	08008ce3 	.word	0x08008ce3
 8008cc8:	08008cf9 	.word	0x08008cf9
 8008ccc:	08008d17 	.word	0x08008d17
 8008cd0:	08008d17 	.word	0x08008d17
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cd4:	4b81      	ldr	r3, [pc, #516]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd8:	4a80      	ldr	r2, [pc, #512]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008cda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008cde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ce0:	e01a      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ce6:	3308      	adds	r3, #8
 8008ce8:	2100      	movs	r1, #0
 8008cea:	4618      	mov	r0, r3
 8008cec:	f002 f9f6 	bl	800b0dc <RCCEx_PLL2_Config>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008cf6:	e00f      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cfc:	3328      	adds	r3, #40	@ 0x28
 8008cfe:	2100      	movs	r1, #0
 8008d00:	4618      	mov	r0, r3
 8008d02:	f002 fa9d 	bl	800b240 <RCCEx_PLL3_Config>
 8008d06:	4603      	mov	r3, r0
 8008d08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d0c:	e004      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008d14:	e000      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10a      	bne.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008d20:	4b6e      	ldr	r3, [pc, #440]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d24:	f023 0107 	bic.w	r1, r3, #7
 8008d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d2e:	4a6b      	ldr	r2, [pc, #428]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d30:	430b      	orrs	r3, r1
 8008d32:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d34:	e003      	b.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d46:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8008d4a:	f04f 0b00 	mov.w	fp, #0
 8008d4e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008d52:	d05b      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008d5c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008d60:	d03b      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008d62:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008d66:	d834      	bhi.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008d68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008d6c:	d037      	beq.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008d6e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008d72:	d82e      	bhi.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008d74:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008d78:	d033      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008d7a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008d7e:	d828      	bhi.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008d80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d84:	d01a      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008d86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d8a:	d822      	bhi.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d003      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008d90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d94:	d007      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008d96:	e01c      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d98:	4b50      	ldr	r3, [pc, #320]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d9c:	4a4f      	ldr	r2, [pc, #316]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008da2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008da4:	e01e      	b.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008daa:	3308      	adds	r3, #8
 8008dac:	2100      	movs	r1, #0
 8008dae:	4618      	mov	r0, r3
 8008db0:	f002 f994 	bl	800b0dc <RCCEx_PLL2_Config>
 8008db4:	4603      	mov	r3, r0
 8008db6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008dba:	e013      	b.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dc0:	3328      	adds	r3, #40	@ 0x28
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f002 fa3b 	bl	800b240 <RCCEx_PLL3_Config>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008dd0:	e008      	b.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008dd8:	e004      	b.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008dda:	bf00      	nop
 8008ddc:	e002      	b.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008dde:	bf00      	nop
 8008de0:	e000      	b.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008de4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10b      	bne.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008dec:	4b3b      	ldr	r3, [pc, #236]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008df0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008df8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008dfc:	4a37      	ldr	r2, [pc, #220]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008dfe:	430b      	orrs	r3, r1
 8008e00:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e02:	e003      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e14:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008e18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008e22:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008e26:	460b      	mov	r3, r1
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	d05d      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008e34:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008e38:	d03b      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008e3a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008e3e:	d834      	bhi.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008e40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e44:	d037      	beq.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008e46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e4a:	d82e      	bhi.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008e4c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008e50:	d033      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008e52:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008e56:	d828      	bhi.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008e58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e5c:	d01a      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008e5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e62:	d822      	bhi.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d003      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008e68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e6c:	d007      	beq.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008e6e:	e01c      	b.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e70:	4b1a      	ldr	r3, [pc, #104]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e74:	4a19      	ldr	r2, [pc, #100]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e7c:	e01e      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e82:	3308      	adds	r3, #8
 8008e84:	2100      	movs	r1, #0
 8008e86:	4618      	mov	r0, r3
 8008e88:	f002 f928 	bl	800b0dc <RCCEx_PLL2_Config>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008e92:	e013      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e98:	3328      	adds	r3, #40	@ 0x28
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f002 f9cf 	bl	800b240 <RCCEx_PLL3_Config>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ea8:	e008      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008eb0:	e004      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008eb2:	bf00      	nop
 8008eb4:	e002      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008eb6:	bf00      	nop
 8008eb8:	e000      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008eba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ebc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10d      	bne.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008ec4:	4b05      	ldr	r3, [pc, #20]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ec8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ed0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008ed4:	4a01      	ldr	r2, [pc, #4]	@ (8008edc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ed6:	430b      	orrs	r3, r1
 8008ed8:	6593      	str	r3, [r2, #88]	@ 0x58
 8008eda:	e005      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008edc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ee4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008ef4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008ef8:	2300      	movs	r3, #0
 8008efa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008efe:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008f02:	460b      	mov	r3, r1
 8008f04:	4313      	orrs	r3, r2
 8008f06:	d03a      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f0e:	2b30      	cmp	r3, #48	@ 0x30
 8008f10:	d01f      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008f12:	2b30      	cmp	r3, #48	@ 0x30
 8008f14:	d819      	bhi.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008f16:	2b20      	cmp	r3, #32
 8008f18:	d00c      	beq.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008f1a:	2b20      	cmp	r3, #32
 8008f1c:	d815      	bhi.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d019      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008f22:	2b10      	cmp	r3, #16
 8008f24:	d111      	bne.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f26:	4baa      	ldr	r3, [pc, #680]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f2a:	4aa9      	ldr	r2, [pc, #676]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008f32:	e011      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f38:	3308      	adds	r3, #8
 8008f3a:	2102      	movs	r1, #2
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f002 f8cd 	bl	800b0dc <RCCEx_PLL2_Config>
 8008f42:	4603      	mov	r3, r0
 8008f44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008f48:	e006      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008f50:	e002      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008f52:	bf00      	nop
 8008f54:	e000      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008f56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10a      	bne.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008f60:	4b9b      	ldr	r3, [pc, #620]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f64:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f6e:	4a98      	ldr	r2, [pc, #608]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f70:	430b      	orrs	r3, r1
 8008f72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008f74:	e003      	b.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f86:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008f8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008f8e:	2300      	movs	r3, #0
 8008f90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008f94:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	d051      	beq.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fa4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008fa8:	d035      	beq.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8008faa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008fae:	d82e      	bhi.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008fb0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008fb4:	d031      	beq.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8008fb6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008fba:	d828      	bhi.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008fbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fc0:	d01a      	beq.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008fc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fc6:	d822      	bhi.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d003      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008fcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fd0:	d007      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8008fd2:	e01c      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fd4:	4b7e      	ldr	r3, [pc, #504]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd8:	4a7d      	ldr	r2, [pc, #500]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008fda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008fe0:	e01c      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fe6:	3308      	adds	r3, #8
 8008fe8:	2100      	movs	r1, #0
 8008fea:	4618      	mov	r0, r3
 8008fec:	f002 f876 	bl	800b0dc <RCCEx_PLL2_Config>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008ff6:	e011      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ffc:	3328      	adds	r3, #40	@ 0x28
 8008ffe:	2100      	movs	r1, #0
 8009000:	4618      	mov	r0, r3
 8009002:	f002 f91d 	bl	800b240 <RCCEx_PLL3_Config>
 8009006:	4603      	mov	r3, r0
 8009008:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800900c:	e006      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009014:	e002      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009016:	bf00      	nop
 8009018:	e000      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800901a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800901c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10a      	bne.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009024:	4b6a      	ldr	r3, [pc, #424]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009028:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800902c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009032:	4a67      	ldr	r2, [pc, #412]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009034:	430b      	orrs	r3, r1
 8009036:	6513      	str	r3, [r2, #80]	@ 0x50
 8009038:	e003      	b.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800903a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800903e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800904e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009052:	2300      	movs	r3, #0
 8009054:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009058:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800905c:	460b      	mov	r3, r1
 800905e:	4313      	orrs	r3, r2
 8009060:	d053      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009068:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800906c:	d033      	beq.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800906e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009072:	d82c      	bhi.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009074:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009078:	d02f      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x502>
 800907a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800907e:	d826      	bhi.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009080:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009084:	d02b      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009086:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800908a:	d820      	bhi.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800908c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009090:	d012      	beq.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009092:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009096:	d81a      	bhi.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009098:	2b00      	cmp	r3, #0
 800909a:	d022      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800909c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090a0:	d115      	bne.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80090a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090a6:	3308      	adds	r3, #8
 80090a8:	2101      	movs	r1, #1
 80090aa:	4618      	mov	r0, r3
 80090ac:	f002 f816 	bl	800b0dc <RCCEx_PLL2_Config>
 80090b0:	4603      	mov	r3, r0
 80090b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80090b6:	e015      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090bc:	3328      	adds	r3, #40	@ 0x28
 80090be:	2101      	movs	r1, #1
 80090c0:	4618      	mov	r0, r3
 80090c2:	f002 f8bd 	bl	800b240 <RCCEx_PLL3_Config>
 80090c6:	4603      	mov	r3, r0
 80090c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80090cc:	e00a      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80090d4:	e006      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80090d6:	bf00      	nop
 80090d8:	e004      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80090da:	bf00      	nop
 80090dc:	e002      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80090de:	bf00      	nop
 80090e0:	e000      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80090e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10a      	bne.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80090ec:	4b38      	ldr	r3, [pc, #224]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090f0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80090f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090fa:	4a35      	ldr	r2, [pc, #212]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090fc:	430b      	orrs	r3, r1
 80090fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8009100:	e003      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009102:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009106:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800910a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009116:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800911a:	2300      	movs	r3, #0
 800911c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009120:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009124:	460b      	mov	r3, r1
 8009126:	4313      	orrs	r3, r2
 8009128:	d058      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800912a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800912e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009132:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009136:	d033      	beq.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009138:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800913c:	d82c      	bhi.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800913e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009142:	d02f      	beq.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009148:	d826      	bhi.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800914a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800914e:	d02b      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009150:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009154:	d820      	bhi.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009156:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800915a:	d012      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800915c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009160:	d81a      	bhi.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009162:	2b00      	cmp	r3, #0
 8009164:	d022      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009166:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800916a:	d115      	bne.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800916c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009170:	3308      	adds	r3, #8
 8009172:	2101      	movs	r1, #1
 8009174:	4618      	mov	r0, r3
 8009176:	f001 ffb1 	bl	800b0dc <RCCEx_PLL2_Config>
 800917a:	4603      	mov	r3, r0
 800917c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009180:	e015      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009186:	3328      	adds	r3, #40	@ 0x28
 8009188:	2101      	movs	r1, #1
 800918a:	4618      	mov	r0, r3
 800918c:	f002 f858 	bl	800b240 <RCCEx_PLL3_Config>
 8009190:	4603      	mov	r3, r0
 8009192:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009196:	e00a      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800919e:	e006      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80091a0:	bf00      	nop
 80091a2:	e004      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80091a4:	bf00      	nop
 80091a6:	e002      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80091a8:	bf00      	nop
 80091aa:	e000      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80091ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d10e      	bne.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80091b6:	4b06      	ldr	r3, [pc, #24]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80091be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80091c6:	4a02      	ldr	r2, [pc, #8]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091c8:	430b      	orrs	r3, r1
 80091ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80091cc:	e006      	b.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80091ce:	bf00      	nop
 80091d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80091dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80091e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80091ec:	2300      	movs	r3, #0
 80091ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80091f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80091f6:	460b      	mov	r3, r1
 80091f8:	4313      	orrs	r3, r2
 80091fa:	d037      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80091fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009200:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009202:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009206:	d00e      	beq.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009208:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800920c:	d816      	bhi.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800920e:	2b00      	cmp	r3, #0
 8009210:	d018      	beq.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009212:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009216:	d111      	bne.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009218:	4bc4      	ldr	r3, [pc, #784]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800921a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800921c:	4ac3      	ldr	r2, [pc, #780]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800921e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009222:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009224:	e00f      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800922a:	3308      	adds	r3, #8
 800922c:	2101      	movs	r1, #1
 800922e:	4618      	mov	r0, r3
 8009230:	f001 ff54 	bl	800b0dc <RCCEx_PLL2_Config>
 8009234:	4603      	mov	r3, r0
 8009236:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800923a:	e004      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009242:	e000      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009246:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10a      	bne.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800924e:	4bb7      	ldr	r3, [pc, #732]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009252:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800925a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800925c:	4ab3      	ldr	r2, [pc, #716]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800925e:	430b      	orrs	r3, r1
 8009260:	6513      	str	r3, [r2, #80]	@ 0x50
 8009262:	e003      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009264:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009268:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800926c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009274:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009278:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800927c:	2300      	movs	r3, #0
 800927e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009282:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009286:	460b      	mov	r3, r1
 8009288:	4313      	orrs	r3, r2
 800928a:	d039      	beq.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800928c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009292:	2b03      	cmp	r3, #3
 8009294:	d81c      	bhi.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009296:	a201      	add	r2, pc, #4	@ (adr r2, 800929c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929c:	080092d9 	.word	0x080092d9
 80092a0:	080092ad 	.word	0x080092ad
 80092a4:	080092bb 	.word	0x080092bb
 80092a8:	080092d9 	.word	0x080092d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092ac:	4b9f      	ldr	r3, [pc, #636]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b0:	4a9e      	ldr	r2, [pc, #632]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80092b8:	e00f      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80092ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092be:	3308      	adds	r3, #8
 80092c0:	2102      	movs	r1, #2
 80092c2:	4618      	mov	r0, r3
 80092c4:	f001 ff0a 	bl	800b0dc <RCCEx_PLL2_Config>
 80092c8:	4603      	mov	r3, r0
 80092ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80092ce:	e004      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80092d6:	e000      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80092d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d10a      	bne.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80092e2:	4b92      	ldr	r3, [pc, #584]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092e6:	f023 0103 	bic.w	r1, r3, #3
 80092ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092f0:	4a8e      	ldr	r2, [pc, #568]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092f2:	430b      	orrs	r3, r1
 80092f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80092f6:	e003      	b.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009308:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800930c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009310:	2300      	movs	r3, #0
 8009312:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009316:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800931a:	460b      	mov	r3, r1
 800931c:	4313      	orrs	r3, r2
 800931e:	f000 8099 	beq.w	8009454 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009322:	4b83      	ldr	r3, [pc, #524]	@ (8009530 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a82      	ldr	r2, [pc, #520]	@ (8009530 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800932c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800932e:	f7f9 fa87 	bl	8002840 <HAL_GetTick>
 8009332:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009336:	e00b      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009338:	f7f9 fa82 	bl	8002840 <HAL_GetTick>
 800933c:	4602      	mov	r2, r0
 800933e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009342:	1ad3      	subs	r3, r2, r3
 8009344:	2b64      	cmp	r3, #100	@ 0x64
 8009346:	d903      	bls.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009348:	2303      	movs	r3, #3
 800934a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800934e:	e005      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009350:	4b77      	ldr	r3, [pc, #476]	@ (8009530 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009358:	2b00      	cmp	r3, #0
 800935a:	d0ed      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800935c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009360:	2b00      	cmp	r3, #0
 8009362:	d173      	bne.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009364:	4b71      	ldr	r3, [pc, #452]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009366:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800936c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009370:	4053      	eors	r3, r2
 8009372:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009376:	2b00      	cmp	r3, #0
 8009378:	d015      	beq.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800937a:	4b6c      	ldr	r3, [pc, #432]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800937c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800937e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009382:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009386:	4b69      	ldr	r3, [pc, #420]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800938a:	4a68      	ldr	r2, [pc, #416]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800938c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009390:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009392:	4b66      	ldr	r3, [pc, #408]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009396:	4a65      	ldr	r2, [pc, #404]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009398:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800939c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800939e:	4a63      	ldr	r2, [pc, #396]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093a4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80093a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80093ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093b2:	d118      	bne.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093b4:	f7f9 fa44 	bl	8002840 <HAL_GetTick>
 80093b8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093bc:	e00d      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093be:	f7f9 fa3f 	bl	8002840 <HAL_GetTick>
 80093c2:	4602      	mov	r2, r0
 80093c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80093c8:	1ad2      	subs	r2, r2, r3
 80093ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d903      	bls.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80093d2:	2303      	movs	r3, #3
 80093d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80093d8:	e005      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093da:	4b54      	ldr	r3, [pc, #336]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093de:	f003 0302 	and.w	r3, r3, #2
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d0eb      	beq.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80093e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d129      	bne.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80093f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093fe:	d10e      	bne.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009400:	4b4a      	ldr	r3, [pc, #296]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800940c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009410:	091a      	lsrs	r2, r3, #4
 8009412:	4b48      	ldr	r3, [pc, #288]	@ (8009534 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009414:	4013      	ands	r3, r2
 8009416:	4a45      	ldr	r2, [pc, #276]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009418:	430b      	orrs	r3, r1
 800941a:	6113      	str	r3, [r2, #16]
 800941c:	e005      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800941e:	4b43      	ldr	r3, [pc, #268]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	4a42      	ldr	r2, [pc, #264]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009424:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009428:	6113      	str	r3, [r2, #16]
 800942a:	4b40      	ldr	r3, [pc, #256]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800942c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800942e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009432:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800943a:	4a3c      	ldr	r2, [pc, #240]	@ (800952c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800943c:	430b      	orrs	r3, r1
 800943e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009440:	e008      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009442:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009446:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800944a:	e003      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800944c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009450:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945c:	f002 0301 	and.w	r3, r2, #1
 8009460:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009464:	2300      	movs	r3, #0
 8009466:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800946a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800946e:	460b      	mov	r3, r1
 8009470:	4313      	orrs	r3, r2
 8009472:	f000 808f 	beq.w	8009594 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800947a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800947c:	2b28      	cmp	r3, #40	@ 0x28
 800947e:	d871      	bhi.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009480:	a201      	add	r2, pc, #4	@ (adr r2, 8009488 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009486:	bf00      	nop
 8009488:	0800956d 	.word	0x0800956d
 800948c:	08009565 	.word	0x08009565
 8009490:	08009565 	.word	0x08009565
 8009494:	08009565 	.word	0x08009565
 8009498:	08009565 	.word	0x08009565
 800949c:	08009565 	.word	0x08009565
 80094a0:	08009565 	.word	0x08009565
 80094a4:	08009565 	.word	0x08009565
 80094a8:	08009539 	.word	0x08009539
 80094ac:	08009565 	.word	0x08009565
 80094b0:	08009565 	.word	0x08009565
 80094b4:	08009565 	.word	0x08009565
 80094b8:	08009565 	.word	0x08009565
 80094bc:	08009565 	.word	0x08009565
 80094c0:	08009565 	.word	0x08009565
 80094c4:	08009565 	.word	0x08009565
 80094c8:	0800954f 	.word	0x0800954f
 80094cc:	08009565 	.word	0x08009565
 80094d0:	08009565 	.word	0x08009565
 80094d4:	08009565 	.word	0x08009565
 80094d8:	08009565 	.word	0x08009565
 80094dc:	08009565 	.word	0x08009565
 80094e0:	08009565 	.word	0x08009565
 80094e4:	08009565 	.word	0x08009565
 80094e8:	0800956d 	.word	0x0800956d
 80094ec:	08009565 	.word	0x08009565
 80094f0:	08009565 	.word	0x08009565
 80094f4:	08009565 	.word	0x08009565
 80094f8:	08009565 	.word	0x08009565
 80094fc:	08009565 	.word	0x08009565
 8009500:	08009565 	.word	0x08009565
 8009504:	08009565 	.word	0x08009565
 8009508:	0800956d 	.word	0x0800956d
 800950c:	08009565 	.word	0x08009565
 8009510:	08009565 	.word	0x08009565
 8009514:	08009565 	.word	0x08009565
 8009518:	08009565 	.word	0x08009565
 800951c:	08009565 	.word	0x08009565
 8009520:	08009565 	.word	0x08009565
 8009524:	08009565 	.word	0x08009565
 8009528:	0800956d 	.word	0x0800956d
 800952c:	58024400 	.word	0x58024400
 8009530:	58024800 	.word	0x58024800
 8009534:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800953c:	3308      	adds	r3, #8
 800953e:	2101      	movs	r1, #1
 8009540:	4618      	mov	r0, r3
 8009542:	f001 fdcb 	bl	800b0dc <RCCEx_PLL2_Config>
 8009546:	4603      	mov	r3, r0
 8009548:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800954c:	e00f      	b.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800954e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009552:	3328      	adds	r3, #40	@ 0x28
 8009554:	2101      	movs	r1, #1
 8009556:	4618      	mov	r0, r3
 8009558:	f001 fe72 	bl	800b240 <RCCEx_PLL3_Config>
 800955c:	4603      	mov	r3, r0
 800955e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009562:	e004      	b.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800956a:	e000      	b.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800956c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800956e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009572:	2b00      	cmp	r3, #0
 8009574:	d10a      	bne.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009576:	4bbf      	ldr	r3, [pc, #764]	@ (8009874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800957a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800957e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009582:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009584:	4abb      	ldr	r2, [pc, #748]	@ (8009874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009586:	430b      	orrs	r3, r1
 8009588:	6553      	str	r3, [r2, #84]	@ 0x54
 800958a:	e003      	b.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800958c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009590:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959c:	f002 0302 	and.w	r3, r2, #2
 80095a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80095a4:	2300      	movs	r3, #0
 80095a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80095aa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80095ae:	460b      	mov	r3, r1
 80095b0:	4313      	orrs	r3, r2
 80095b2:	d041      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80095b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095ba:	2b05      	cmp	r3, #5
 80095bc:	d824      	bhi.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80095be:	a201      	add	r2, pc, #4	@ (adr r2, 80095c4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80095c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c4:	08009611 	.word	0x08009611
 80095c8:	080095dd 	.word	0x080095dd
 80095cc:	080095f3 	.word	0x080095f3
 80095d0:	08009611 	.word	0x08009611
 80095d4:	08009611 	.word	0x08009611
 80095d8:	08009611 	.word	0x08009611
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095e0:	3308      	adds	r3, #8
 80095e2:	2101      	movs	r1, #1
 80095e4:	4618      	mov	r0, r3
 80095e6:	f001 fd79 	bl	800b0dc <RCCEx_PLL2_Config>
 80095ea:	4603      	mov	r3, r0
 80095ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80095f0:	e00f      	b.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095f6:	3328      	adds	r3, #40	@ 0x28
 80095f8:	2101      	movs	r1, #1
 80095fa:	4618      	mov	r0, r3
 80095fc:	f001 fe20 	bl	800b240 <RCCEx_PLL3_Config>
 8009600:	4603      	mov	r3, r0
 8009602:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009606:	e004      	b.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800960e:	e000      	b.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009612:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009616:	2b00      	cmp	r3, #0
 8009618:	d10a      	bne.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800961a:	4b96      	ldr	r3, [pc, #600]	@ (8009874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800961c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800961e:	f023 0107 	bic.w	r1, r3, #7
 8009622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009626:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009628:	4a92      	ldr	r2, [pc, #584]	@ (8009874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800962a:	430b      	orrs	r3, r1
 800962c:	6553      	str	r3, [r2, #84]	@ 0x54
 800962e:	e003      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009630:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009634:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800963c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009640:	f002 0304 	and.w	r3, r2, #4
 8009644:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009648:	2300      	movs	r3, #0
 800964a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800964e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009652:	460b      	mov	r3, r1
 8009654:	4313      	orrs	r3, r2
 8009656:	d044      	beq.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800965c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009660:	2b05      	cmp	r3, #5
 8009662:	d825      	bhi.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009664:	a201      	add	r2, pc, #4	@ (adr r2, 800966c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800966a:	bf00      	nop
 800966c:	080096b9 	.word	0x080096b9
 8009670:	08009685 	.word	0x08009685
 8009674:	0800969b 	.word	0x0800969b
 8009678:	080096b9 	.word	0x080096b9
 800967c:	080096b9 	.word	0x080096b9
 8009680:	080096b9 	.word	0x080096b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009688:	3308      	adds	r3, #8
 800968a:	2101      	movs	r1, #1
 800968c:	4618      	mov	r0, r3
 800968e:	f001 fd25 	bl	800b0dc <RCCEx_PLL2_Config>
 8009692:	4603      	mov	r3, r0
 8009694:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009698:	e00f      	b.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800969a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800969e:	3328      	adds	r3, #40	@ 0x28
 80096a0:	2101      	movs	r1, #1
 80096a2:	4618      	mov	r0, r3
 80096a4:	f001 fdcc 	bl	800b240 <RCCEx_PLL3_Config>
 80096a8:	4603      	mov	r3, r0
 80096aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80096ae:	e004      	b.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80096b6:	e000      	b.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80096b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d10b      	bne.n	80096da <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80096c2:	4b6c      	ldr	r3, [pc, #432]	@ (8009874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80096c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096c6:	f023 0107 	bic.w	r1, r3, #7
 80096ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096d2:	4a68      	ldr	r2, [pc, #416]	@ (8009874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80096d4:	430b      	orrs	r3, r1
 80096d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80096d8:	e003      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80096e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ea:	f002 0320 	and.w	r3, r2, #32
 80096ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80096f2:	2300      	movs	r3, #0
 80096f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80096f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80096fc:	460b      	mov	r3, r1
 80096fe:	4313      	orrs	r3, r2
 8009700:	d055      	beq.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800970a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800970e:	d033      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009710:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009714:	d82c      	bhi.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800971a:	d02f      	beq.n	800977c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800971c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009720:	d826      	bhi.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009722:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009726:	d02b      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009728:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800972c:	d820      	bhi.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800972e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009732:	d012      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009734:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009738:	d81a      	bhi.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800973a:	2b00      	cmp	r3, #0
 800973c:	d022      	beq.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800973e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009742:	d115      	bne.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009748:	3308      	adds	r3, #8
 800974a:	2100      	movs	r1, #0
 800974c:	4618      	mov	r0, r3
 800974e:	f001 fcc5 	bl	800b0dc <RCCEx_PLL2_Config>
 8009752:	4603      	mov	r3, r0
 8009754:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009758:	e015      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800975a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800975e:	3328      	adds	r3, #40	@ 0x28
 8009760:	2102      	movs	r1, #2
 8009762:	4618      	mov	r0, r3
 8009764:	f001 fd6c 	bl	800b240 <RCCEx_PLL3_Config>
 8009768:	4603      	mov	r3, r0
 800976a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800976e:	e00a      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009776:	e006      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009778:	bf00      	nop
 800977a:	e004      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800977c:	bf00      	nop
 800977e:	e002      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009780:	bf00      	nop
 8009782:	e000      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009786:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800978a:	2b00      	cmp	r3, #0
 800978c:	d10b      	bne.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800978e:	4b39      	ldr	r3, [pc, #228]	@ (8009874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009792:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800979a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800979e:	4a35      	ldr	r2, [pc, #212]	@ (8009874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80097a0:	430b      	orrs	r3, r1
 80097a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80097a4:	e003      	b.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80097ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80097ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80097be:	2300      	movs	r3, #0
 80097c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80097c4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80097c8:	460b      	mov	r3, r1
 80097ca:	4313      	orrs	r3, r2
 80097cc:	d058      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80097ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80097d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80097da:	d033      	beq.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80097dc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80097e0:	d82c      	bhi.n	800983c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80097e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097e6:	d02f      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80097e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097ec:	d826      	bhi.n	800983c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80097ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097f2:	d02b      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80097f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097f8:	d820      	bhi.n	800983c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80097fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097fe:	d012      	beq.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009800:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009804:	d81a      	bhi.n	800983c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009806:	2b00      	cmp	r3, #0
 8009808:	d022      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800980a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800980e:	d115      	bne.n	800983c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009814:	3308      	adds	r3, #8
 8009816:	2100      	movs	r1, #0
 8009818:	4618      	mov	r0, r3
 800981a:	f001 fc5f 	bl	800b0dc <RCCEx_PLL2_Config>
 800981e:	4603      	mov	r3, r0
 8009820:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009824:	e015      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800982a:	3328      	adds	r3, #40	@ 0x28
 800982c:	2102      	movs	r1, #2
 800982e:	4618      	mov	r0, r3
 8009830:	f001 fd06 	bl	800b240 <RCCEx_PLL3_Config>
 8009834:	4603      	mov	r3, r0
 8009836:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800983a:	e00a      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009842:	e006      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009844:	bf00      	nop
 8009846:	e004      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009848:	bf00      	nop
 800984a:	e002      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800984c:	bf00      	nop
 800984e:	e000      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009852:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009856:	2b00      	cmp	r3, #0
 8009858:	d10e      	bne.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800985a:	4b06      	ldr	r3, [pc, #24]	@ (8009874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800985c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800985e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009866:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800986a:	4a02      	ldr	r2, [pc, #8]	@ (8009874 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800986c:	430b      	orrs	r3, r1
 800986e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009870:	e006      	b.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009872:	bf00      	nop
 8009874:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009878:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800987c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009888:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800988c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009890:	2300      	movs	r3, #0
 8009892:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009896:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800989a:	460b      	mov	r3, r1
 800989c:	4313      	orrs	r3, r2
 800989e:	d055      	beq.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80098a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80098a8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80098ac:	d033      	beq.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80098ae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80098b2:	d82c      	bhi.n	800990e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80098b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098b8:	d02f      	beq.n	800991a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80098ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098be:	d826      	bhi.n	800990e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80098c0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80098c4:	d02b      	beq.n	800991e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80098c6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80098ca:	d820      	bhi.n	800990e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80098cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098d0:	d012      	beq.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80098d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098d6:	d81a      	bhi.n	800990e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d022      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80098dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098e0:	d115      	bne.n	800990e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098e6:	3308      	adds	r3, #8
 80098e8:	2100      	movs	r1, #0
 80098ea:	4618      	mov	r0, r3
 80098ec:	f001 fbf6 	bl	800b0dc <RCCEx_PLL2_Config>
 80098f0:	4603      	mov	r3, r0
 80098f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80098f6:	e015      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098fc:	3328      	adds	r3, #40	@ 0x28
 80098fe:	2102      	movs	r1, #2
 8009900:	4618      	mov	r0, r3
 8009902:	f001 fc9d 	bl	800b240 <RCCEx_PLL3_Config>
 8009906:	4603      	mov	r3, r0
 8009908:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800990c:	e00a      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009914:	e006      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009916:	bf00      	nop
 8009918:	e004      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800991a:	bf00      	nop
 800991c:	e002      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800991e:	bf00      	nop
 8009920:	e000      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009924:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10b      	bne.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800992c:	4ba0      	ldr	r3, [pc, #640]	@ (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800992e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009930:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009938:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800993c:	4a9c      	ldr	r2, [pc, #624]	@ (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800993e:	430b      	orrs	r3, r1
 8009940:	6593      	str	r3, [r2, #88]	@ 0x58
 8009942:	e003      	b.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009944:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009948:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800994c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009954:	f002 0308 	and.w	r3, r2, #8
 8009958:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800995c:	2300      	movs	r3, #0
 800995e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009962:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009966:	460b      	mov	r3, r1
 8009968:	4313      	orrs	r3, r2
 800996a:	d01e      	beq.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800996c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009970:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009978:	d10c      	bne.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800997a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800997e:	3328      	adds	r3, #40	@ 0x28
 8009980:	2102      	movs	r1, #2
 8009982:	4618      	mov	r0, r3
 8009984:	f001 fc5c 	bl	800b240 <RCCEx_PLL3_Config>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d002      	beq.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009994:	4b86      	ldr	r3, [pc, #536]	@ (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009998:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800999c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099a4:	4a82      	ldr	r2, [pc, #520]	@ (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80099a6:	430b      	orrs	r3, r1
 80099a8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80099aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b2:	f002 0310 	and.w	r3, r2, #16
 80099b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80099ba:	2300      	movs	r3, #0
 80099bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80099c0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80099c4:	460b      	mov	r3, r1
 80099c6:	4313      	orrs	r3, r2
 80099c8:	d01e      	beq.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80099ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099d6:	d10c      	bne.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80099d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099dc:	3328      	adds	r3, #40	@ 0x28
 80099de:	2102      	movs	r1, #2
 80099e0:	4618      	mov	r0, r3
 80099e2:	f001 fc2d 	bl	800b240 <RCCEx_PLL3_Config>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d002      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80099f2:	4b6f      	ldr	r3, [pc, #444]	@ (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80099f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80099fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a02:	4a6b      	ldr	r2, [pc, #428]	@ (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a04:	430b      	orrs	r3, r1
 8009a06:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a10:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009a14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009a16:	2300      	movs	r3, #0
 8009a18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009a1a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009a1e:	460b      	mov	r3, r1
 8009a20:	4313      	orrs	r3, r2
 8009a22:	d03e      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009a2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a30:	d022      	beq.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009a32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a36:	d81b      	bhi.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d003      	beq.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a40:	d00b      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009a42:	e015      	b.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a48:	3308      	adds	r3, #8
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f001 fb45 	bl	800b0dc <RCCEx_PLL2_Config>
 8009a52:	4603      	mov	r3, r0
 8009a54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009a58:	e00f      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a5e:	3328      	adds	r3, #40	@ 0x28
 8009a60:	2102      	movs	r1, #2
 8009a62:	4618      	mov	r0, r3
 8009a64:	f001 fbec 	bl	800b240 <RCCEx_PLL3_Config>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009a6e:	e004      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a76:	e000      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10b      	bne.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009a82:	4b4b      	ldr	r3, [pc, #300]	@ (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a86:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009a92:	4a47      	ldr	r2, [pc, #284]	@ (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a94:	430b      	orrs	r3, r1
 8009a96:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a98:	e003      	b.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aaa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009aae:	673b      	str	r3, [r7, #112]	@ 0x70
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	677b      	str	r3, [r7, #116]	@ 0x74
 8009ab4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009ab8:	460b      	mov	r3, r1
 8009aba:	4313      	orrs	r3, r2
 8009abc:	d03b      	beq.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ac6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009aca:	d01f      	beq.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009acc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ad0:	d818      	bhi.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009ad2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ad6:	d003      	beq.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009ad8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009adc:	d007      	beq.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009ade:	e011      	b.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ae0:	4b33      	ldr	r3, [pc, #204]	@ (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ae4:	4a32      	ldr	r2, [pc, #200]	@ (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ae6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009aea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009aec:	e00f      	b.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009af2:	3328      	adds	r3, #40	@ 0x28
 8009af4:	2101      	movs	r1, #1
 8009af6:	4618      	mov	r0, r3
 8009af8:	f001 fba2 	bl	800b240 <RCCEx_PLL3_Config>
 8009afc:	4603      	mov	r3, r0
 8009afe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009b02:	e004      	b.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b0a:	e000      	b.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d10b      	bne.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009b16:	4b26      	ldr	r3, [pc, #152]	@ (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b1a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b26:	4a22      	ldr	r2, [pc, #136]	@ (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b28:	430b      	orrs	r3, r1
 8009b2a:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b2c:	e003      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009b42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b44:	2300      	movs	r3, #0
 8009b46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009b48:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	d034      	beq.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d003      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b60:	d007      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009b62:	e011      	b.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b64:	4b12      	ldr	r3, [pc, #72]	@ (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b68:	4a11      	ldr	r2, [pc, #68]	@ (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009b70:	e00e      	b.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b76:	3308      	adds	r3, #8
 8009b78:	2102      	movs	r1, #2
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f001 faae 	bl	800b0dc <RCCEx_PLL2_Config>
 8009b80:	4603      	mov	r3, r0
 8009b82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009b86:	e003      	b.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d10d      	bne.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009b98:	4b05      	ldr	r3, [pc, #20]	@ (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b9c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ba6:	4a02      	ldr	r2, [pc, #8]	@ (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ba8:	430b      	orrs	r3, r1
 8009baa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009bac:	e006      	b.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009bae:	bf00      	nop
 8009bb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009bb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009bc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8009bca:	2300      	movs	r3, #0
 8009bcc:	667b      	str	r3, [r7, #100]	@ 0x64
 8009bce:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	d00c      	beq.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bdc:	3328      	adds	r3, #40	@ 0x28
 8009bde:	2102      	movs	r1, #2
 8009be0:	4618      	mov	r0, r3
 8009be2:	f001 fb2d 	bl	800b240 <RCCEx_PLL3_Config>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d002      	beq.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009bfe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c00:	2300      	movs	r3, #0
 8009c02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c04:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009c08:	460b      	mov	r3, r1
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	d036      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c18:	d018      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009c1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c1e:	d811      	bhi.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c24:	d014      	beq.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009c26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c2a:	d80b      	bhi.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d011      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009c30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c34:	d106      	bne.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c36:	4bb7      	ldr	r3, [pc, #732]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c3a:	4ab6      	ldr	r2, [pc, #728]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009c42:	e008      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c4a:	e004      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009c4c:	bf00      	nop
 8009c4e:	e002      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009c50:	bf00      	nop
 8009c52:	e000      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10a      	bne.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009c5e:	4bad      	ldr	r3, [pc, #692]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c6c:	4aa9      	ldr	r2, [pc, #676]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009c6e:	430b      	orrs	r3, r1
 8009c70:	6553      	str	r3, [r2, #84]	@ 0x54
 8009c72:	e003      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c84:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009c88:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c8e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009c92:	460b      	mov	r3, r1
 8009c94:	4313      	orrs	r3, r2
 8009c96:	d009      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c98:	4b9e      	ldr	r3, [pc, #632]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009c9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c9c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ca6:	4a9b      	ldr	r2, [pc, #620]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ca8:	430b      	orrs	r3, r1
 8009caa:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cba:	2300      	movs	r3, #0
 8009cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009cbe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	d009      	beq.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009cc8:	4b92      	ldr	r3, [pc, #584]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ccc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009cd6:	4a8f      	ldr	r2, [pc, #572]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009cd8:	430b      	orrs	r3, r1
 8009cda:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009ce8:	643b      	str	r3, [r7, #64]	@ 0x40
 8009cea:	2300      	movs	r3, #0
 8009cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cee:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	d00e      	beq.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009cf8:	4b86      	ldr	r3, [pc, #536]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	4a85      	ldr	r2, [pc, #532]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009cfe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009d02:	6113      	str	r3, [r2, #16]
 8009d04:	4b83      	ldr	r3, [pc, #524]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d06:	6919      	ldr	r1, [r3, #16]
 8009d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009d10:	4a80      	ldr	r2, [pc, #512]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d12:	430b      	orrs	r3, r1
 8009d14:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009d22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d24:	2300      	movs	r3, #0
 8009d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d28:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	d009      	beq.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009d32:	4b78      	ldr	r3, [pc, #480]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d36:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d40:	4a74      	ldr	r2, [pc, #464]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d42:	430b      	orrs	r3, r1
 8009d44:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009d52:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d54:	2300      	movs	r3, #0
 8009d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d58:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	d00a      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009d62:	4b6c      	ldr	r3, [pc, #432]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d66:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d72:	4a68      	ldr	r2, [pc, #416]	@ (8009f14 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d74:	430b      	orrs	r3, r1
 8009d76:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d80:	2100      	movs	r1, #0
 8009d82:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009d84:	f003 0301 	and.w	r3, r3, #1
 8009d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d8a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009d8e:	460b      	mov	r3, r1
 8009d90:	4313      	orrs	r3, r2
 8009d92:	d011      	beq.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d98:	3308      	adds	r3, #8
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f001 f99d 	bl	800b0dc <RCCEx_PLL2_Config>
 8009da2:	4603      	mov	r3, r0
 8009da4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009da8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d003      	beq.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009db0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009db4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	6239      	str	r1, [r7, #32]
 8009dc4:	f003 0302 	and.w	r3, r3, #2
 8009dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009dce:	460b      	mov	r3, r1
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	d011      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dd8:	3308      	adds	r3, #8
 8009dda:	2101      	movs	r1, #1
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f001 f97d 	bl	800b0dc <RCCEx_PLL2_Config>
 8009de2:	4603      	mov	r3, r0
 8009de4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009de8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d003      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009df0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009df4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e00:	2100      	movs	r1, #0
 8009e02:	61b9      	str	r1, [r7, #24]
 8009e04:	f003 0304 	and.w	r3, r3, #4
 8009e08:	61fb      	str	r3, [r7, #28]
 8009e0a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4313      	orrs	r3, r2
 8009e12:	d011      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e18:	3308      	adds	r3, #8
 8009e1a:	2102      	movs	r1, #2
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f001 f95d 	bl	800b0dc <RCCEx_PLL2_Config>
 8009e22:	4603      	mov	r3, r0
 8009e24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009e28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d003      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e40:	2100      	movs	r1, #0
 8009e42:	6139      	str	r1, [r7, #16]
 8009e44:	f003 0308 	and.w	r3, r3, #8
 8009e48:	617b      	str	r3, [r7, #20]
 8009e4a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009e4e:	460b      	mov	r3, r1
 8009e50:	4313      	orrs	r3, r2
 8009e52:	d011      	beq.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e58:	3328      	adds	r3, #40	@ 0x28
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f001 f9ef 	bl	800b240 <RCCEx_PLL3_Config>
 8009e62:	4603      	mov	r3, r0
 8009e64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8009e68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d003      	beq.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e80:	2100      	movs	r1, #0
 8009e82:	60b9      	str	r1, [r7, #8]
 8009e84:	f003 0310 	and.w	r3, r3, #16
 8009e88:	60fb      	str	r3, [r7, #12]
 8009e8a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009e8e:	460b      	mov	r3, r1
 8009e90:	4313      	orrs	r3, r2
 8009e92:	d011      	beq.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e98:	3328      	adds	r3, #40	@ 0x28
 8009e9a:	2101      	movs	r1, #1
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f001 f9cf 	bl	800b240 <RCCEx_PLL3_Config>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009ea8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d003      	beq.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009eb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	6039      	str	r1, [r7, #0]
 8009ec4:	f003 0320 	and.w	r3, r3, #32
 8009ec8:	607b      	str	r3, [r7, #4]
 8009eca:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009ece:	460b      	mov	r3, r1
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	d011      	beq.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ed8:	3328      	adds	r3, #40	@ 0x28
 8009eda:	2102      	movs	r1, #2
 8009edc:	4618      	mov	r0, r3
 8009ede:	f001 f9af 	bl	800b240 <RCCEx_PLL3_Config>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009ee8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d003      	beq.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ef0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ef4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8009ef8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d101      	bne.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009f00:	2300      	movs	r3, #0
 8009f02:	e000      	b.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f12:	bf00      	nop
 8009f14:	58024400 	.word	0x58024400

08009f18 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b090      	sub	sp, #64	@ 0x40
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009f22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f26:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009f2a:	430b      	orrs	r3, r1
 8009f2c:	f040 8094 	bne.w	800a058 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009f30:	4b9b      	ldr	r3, [pc, #620]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f34:	f003 0307 	and.w	r3, r3, #7
 8009f38:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f3c:	2b04      	cmp	r3, #4
 8009f3e:	f200 8087 	bhi.w	800a050 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009f42:	a201      	add	r2, pc, #4	@ (adr r2, 8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f48:	08009f5d 	.word	0x08009f5d
 8009f4c:	08009f85 	.word	0x08009f85
 8009f50:	08009fad 	.word	0x08009fad
 8009f54:	0800a049 	.word	0x0800a049
 8009f58:	08009fd5 	.word	0x08009fd5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f5c:	4b90      	ldr	r3, [pc, #576]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f68:	d108      	bne.n	8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 ff62 	bl	800ae38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f78:	f000 bc93 	b.w	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f80:	f000 bc8f 	b.w	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f84:	4b86      	ldr	r3, [pc, #536]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f90:	d108      	bne.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f92:	f107 0318 	add.w	r3, r7, #24
 8009f96:	4618      	mov	r0, r3
 8009f98:	f000 fca6 	bl	800a8e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f9c:	69bb      	ldr	r3, [r7, #24]
 8009f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fa0:	f000 bc7f 	b.w	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fa8:	f000 bc7b 	b.w	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009fac:	4b7c      	ldr	r3, [pc, #496]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009fb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fb8:	d108      	bne.n	8009fcc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fba:	f107 030c 	add.w	r3, r7, #12
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 fde6 	bl	800ab90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fc8:	f000 bc6b 	b.w	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fd0:	f000 bc67 	b.w	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009fd4:	4b72      	ldr	r3, [pc, #456]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fd8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009fdc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009fde:	4b70      	ldr	r3, [pc, #448]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f003 0304 	and.w	r3, r3, #4
 8009fe6:	2b04      	cmp	r3, #4
 8009fe8:	d10c      	bne.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d109      	bne.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ff0:	4b6b      	ldr	r3, [pc, #428]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	08db      	lsrs	r3, r3, #3
 8009ff6:	f003 0303 	and.w	r3, r3, #3
 8009ffa:	4a6a      	ldr	r2, [pc, #424]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009ffc:	fa22 f303 	lsr.w	r3, r2, r3
 800a000:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a002:	e01f      	b.n	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a004:	4b66      	ldr	r3, [pc, #408]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a00c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a010:	d106      	bne.n	800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a014:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a018:	d102      	bne.n	800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a01a:	4b63      	ldr	r3, [pc, #396]	@ (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a01e:	e011      	b.n	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a020:	4b5f      	ldr	r3, [pc, #380]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a028:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a02c:	d106      	bne.n	800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a02e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a030:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a034:	d102      	bne.n	800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a036:	4b5d      	ldr	r3, [pc, #372]	@ (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a038:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a03a:	e003      	b.n	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a03c:	2300      	movs	r3, #0
 800a03e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a040:	f000 bc2f 	b.w	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a044:	f000 bc2d 	b.w	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a048:	4b59      	ldr	r3, [pc, #356]	@ (800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a04c:	f000 bc29 	b.w	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a050:	2300      	movs	r3, #0
 800a052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a054:	f000 bc25 	b.w	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a05c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a060:	430b      	orrs	r3, r1
 800a062:	f040 80a7 	bne.w	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a066:	4b4e      	ldr	r3, [pc, #312]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a06a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a06e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a072:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a076:	d054      	beq.n	800a122 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a07a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a07e:	f200 808b 	bhi.w	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a084:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a088:	f000 8083 	beq.w	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a08e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a092:	f200 8081 	bhi.w	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a098:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a09c:	d02f      	beq.n	800a0fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a0a4:	d878      	bhi.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d004      	beq.n	800a0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a0b2:	d012      	beq.n	800a0da <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a0b4:	e070      	b.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a0b6:	4b3a      	ldr	r3, [pc, #232]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a0c2:	d107      	bne.n	800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f000 feb5 	bl	800ae38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0d2:	e3e6      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0d8:	e3e3      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0da:	4b31      	ldr	r3, [pc, #196]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0e6:	d107      	bne.n	800a0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0e8:	f107 0318 	add.w	r3, r7, #24
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f000 fbfb 	bl	800a8e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0f2:	69bb      	ldr	r3, [r7, #24]
 800a0f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0f6:	e3d4      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0fc:	e3d1      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0fe:	4b28      	ldr	r3, [pc, #160]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a106:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a10a:	d107      	bne.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a10c:	f107 030c 	add.w	r3, r7, #12
 800a110:	4618      	mov	r0, r3
 800a112:	f000 fd3d 	bl	800ab90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a11a:	e3c2      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a11c:	2300      	movs	r3, #0
 800a11e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a120:	e3bf      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a122:	4b1f      	ldr	r3, [pc, #124]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a126:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a12a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a12c:	4b1c      	ldr	r3, [pc, #112]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f003 0304 	and.w	r3, r3, #4
 800a134:	2b04      	cmp	r3, #4
 800a136:	d10c      	bne.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d109      	bne.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a13e:	4b18      	ldr	r3, [pc, #96]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	08db      	lsrs	r3, r3, #3
 800a144:	f003 0303 	and.w	r3, r3, #3
 800a148:	4a16      	ldr	r2, [pc, #88]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a14a:	fa22 f303 	lsr.w	r3, r2, r3
 800a14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a150:	e01e      	b.n	800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a152:	4b13      	ldr	r3, [pc, #76]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a15a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a15e:	d106      	bne.n	800a16e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a162:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a166:	d102      	bne.n	800a16e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a168:	4b0f      	ldr	r3, [pc, #60]	@ (800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a16c:	e010      	b.n	800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a16e:	4b0c      	ldr	r3, [pc, #48]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a176:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a17a:	d106      	bne.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a17c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a17e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a182:	d102      	bne.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a184:	4b09      	ldr	r3, [pc, #36]	@ (800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a186:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a188:	e002      	b.n	800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a18a:	2300      	movs	r3, #0
 800a18c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a18e:	e388      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a190:	e387      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a192:	4b07      	ldr	r3, [pc, #28]	@ (800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a196:	e384      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a198:	2300      	movs	r3, #0
 800a19a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a19c:	e381      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a19e:	bf00      	nop
 800a1a0:	58024400 	.word	0x58024400
 800a1a4:	03d09000 	.word	0x03d09000
 800a1a8:	003d0900 	.word	0x003d0900
 800a1ac:	017d7840 	.word	0x017d7840
 800a1b0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a1b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1b8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a1bc:	430b      	orrs	r3, r1
 800a1be:	f040 809c 	bne.w	800a2fa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a1c2:	4b9e      	ldr	r3, [pc, #632]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a1c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1c6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a1ca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a1d2:	d054      	beq.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a1d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a1da:	f200 808b 	bhi.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a1e4:	f000 8083 	beq.w	800a2ee <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a1ee:	f200 8081 	bhi.w	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1f8:	d02f      	beq.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a200:	d878      	bhi.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a204:	2b00      	cmp	r3, #0
 800a206:	d004      	beq.n	800a212 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a20a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a20e:	d012      	beq.n	800a236 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a210:	e070      	b.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a212:	4b8a      	ldr	r3, [pc, #552]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a21a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a21e:	d107      	bne.n	800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a220:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a224:	4618      	mov	r0, r3
 800a226:	f000 fe07 	bl	800ae38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a22c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a22e:	e338      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a230:	2300      	movs	r3, #0
 800a232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a234:	e335      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a236:	4b81      	ldr	r3, [pc, #516]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a23e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a242:	d107      	bne.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a244:	f107 0318 	add.w	r3, r7, #24
 800a248:	4618      	mov	r0, r3
 800a24a:	f000 fb4d 	bl	800a8e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a252:	e326      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a254:	2300      	movs	r3, #0
 800a256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a258:	e323      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a25a:	4b78      	ldr	r3, [pc, #480]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a262:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a266:	d107      	bne.n	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a268:	f107 030c 	add.w	r3, r7, #12
 800a26c:	4618      	mov	r0, r3
 800a26e:	f000 fc8f 	bl	800ab90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a276:	e314      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a278:	2300      	movs	r3, #0
 800a27a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a27c:	e311      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a27e:	4b6f      	ldr	r3, [pc, #444]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a282:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a286:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a288:	4b6c      	ldr	r3, [pc, #432]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f003 0304 	and.w	r3, r3, #4
 800a290:	2b04      	cmp	r3, #4
 800a292:	d10c      	bne.n	800a2ae <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a296:	2b00      	cmp	r3, #0
 800a298:	d109      	bne.n	800a2ae <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a29a:	4b68      	ldr	r3, [pc, #416]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	08db      	lsrs	r3, r3, #3
 800a2a0:	f003 0303 	and.w	r3, r3, #3
 800a2a4:	4a66      	ldr	r2, [pc, #408]	@ (800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a2a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2ac:	e01e      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a2ae:	4b63      	ldr	r3, [pc, #396]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2ba:	d106      	bne.n	800a2ca <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a2bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2c2:	d102      	bne.n	800a2ca <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a2c4:	4b5f      	ldr	r3, [pc, #380]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2c8:	e010      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a2ca:	4b5c      	ldr	r3, [pc, #368]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2d6:	d106      	bne.n	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a2d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2de:	d102      	bne.n	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a2e0:	4b59      	ldr	r3, [pc, #356]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2e4:	e002      	b.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a2ea:	e2da      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a2ec:	e2d9      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a2ee:	4b57      	ldr	r3, [pc, #348]	@ (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a2f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2f2:	e2d6      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2f8:	e2d3      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a2fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2fe:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a302:	430b      	orrs	r3, r1
 800a304:	f040 80a7 	bne.w	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a308:	4b4c      	ldr	r3, [pc, #304]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a30a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a30c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a310:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a314:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a318:	d055      	beq.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a31c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a320:	f200 8096 	bhi.w	800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a326:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a32a:	f000 8084 	beq.w	800a436 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a330:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a334:	f200 808c 	bhi.w	800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a33a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a33e:	d030      	beq.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a342:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a346:	f200 8083 	bhi.w	800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d004      	beq.n	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800a350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a356:	d012      	beq.n	800a37e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a358:	e07a      	b.n	800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a35a:	4b38      	ldr	r3, [pc, #224]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a362:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a366:	d107      	bne.n	800a378 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a368:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a36c:	4618      	mov	r0, r3
 800a36e:	f000 fd63 	bl	800ae38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a374:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a376:	e294      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a378:	2300      	movs	r3, #0
 800a37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a37c:	e291      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a37e:	4b2f      	ldr	r3, [pc, #188]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a386:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a38a:	d107      	bne.n	800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a38c:	f107 0318 	add.w	r3, r7, #24
 800a390:	4618      	mov	r0, r3
 800a392:	f000 faa9 	bl	800a8e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a39a:	e282      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a39c:	2300      	movs	r3, #0
 800a39e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3a0:	e27f      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a3a2:	4b26      	ldr	r3, [pc, #152]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a3aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3ae:	d107      	bne.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3b0:	f107 030c 	add.w	r3, r7, #12
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f000 fbeb 	bl	800ab90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3be:	e270      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3c4:	e26d      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a3c6:	4b1d      	ldr	r3, [pc, #116]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a3ce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a3d0:	4b1a      	ldr	r3, [pc, #104]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f003 0304 	and.w	r3, r3, #4
 800a3d8:	2b04      	cmp	r3, #4
 800a3da:	d10c      	bne.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800a3dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d109      	bne.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3e2:	4b16      	ldr	r3, [pc, #88]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	08db      	lsrs	r3, r3, #3
 800a3e8:	f003 0303 	and.w	r3, r3, #3
 800a3ec:	4a14      	ldr	r2, [pc, #80]	@ (800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a3ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3f4:	e01e      	b.n	800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3f6:	4b11      	ldr	r3, [pc, #68]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a402:	d106      	bne.n	800a412 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a406:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a40a:	d102      	bne.n	800a412 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a40c:	4b0d      	ldr	r3, [pc, #52]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a410:	e010      	b.n	800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a412:	4b0a      	ldr	r3, [pc, #40]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a41a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a41e:	d106      	bne.n	800a42e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800a420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a422:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a426:	d102      	bne.n	800a42e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a428:	4b07      	ldr	r3, [pc, #28]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a42a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a42c:	e002      	b.n	800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a42e:	2300      	movs	r3, #0
 800a430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a432:	e236      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a434:	e235      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a436:	4b05      	ldr	r3, [pc, #20]	@ (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a43a:	e232      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a43c:	58024400 	.word	0x58024400
 800a440:	03d09000 	.word	0x03d09000
 800a444:	003d0900 	.word	0x003d0900
 800a448:	017d7840 	.word	0x017d7840
 800a44c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a450:	2300      	movs	r3, #0
 800a452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a454:	e225      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a456:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a45a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a45e:	430b      	orrs	r3, r1
 800a460:	f040 8085 	bne.w	800a56e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a464:	4b9c      	ldr	r3, [pc, #624]	@ (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a468:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a46c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a46e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a470:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a474:	d06b      	beq.n	800a54e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a478:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a47c:	d874      	bhi.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a47e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a480:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a484:	d056      	beq.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a488:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a48c:	d86c      	bhi.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a490:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a494:	d03b      	beq.n	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a498:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a49c:	d864      	bhi.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4a4:	d021      	beq.n	800a4ea <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a4a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4ac:	d85c      	bhi.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d004      	beq.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4ba:	d004      	beq.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a4bc:	e054      	b.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a4be:	f7fe fb5f 	bl	8008b80 <HAL_RCC_GetPCLK1Freq>
 800a4c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a4c4:	e1ed      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4c6:	4b84      	ldr	r3, [pc, #528]	@ (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4d2:	d107      	bne.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4d4:	f107 0318 	add.w	r3, r7, #24
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f000 fa05 	bl	800a8e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4e2:	e1de      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4e8:	e1db      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4ea:	4b7b      	ldr	r3, [pc, #492]	@ (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4f6:	d107      	bne.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4f8:	f107 030c 	add.w	r3, r7, #12
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f000 fb47 	bl	800ab90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a506:	e1cc      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a508:	2300      	movs	r3, #0
 800a50a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a50c:	e1c9      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a50e:	4b72      	ldr	r3, [pc, #456]	@ (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f003 0304 	and.w	r3, r3, #4
 800a516:	2b04      	cmp	r3, #4
 800a518:	d109      	bne.n	800a52e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a51a:	4b6f      	ldr	r3, [pc, #444]	@ (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	08db      	lsrs	r3, r3, #3
 800a520:	f003 0303 	and.w	r3, r3, #3
 800a524:	4a6d      	ldr	r2, [pc, #436]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a526:	fa22 f303 	lsr.w	r3, r2, r3
 800a52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a52c:	e1b9      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a52e:	2300      	movs	r3, #0
 800a530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a532:	e1b6      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a534:	4b68      	ldr	r3, [pc, #416]	@ (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a53c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a540:	d102      	bne.n	800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a542:	4b67      	ldr	r3, [pc, #412]	@ (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a546:	e1ac      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a548:	2300      	movs	r3, #0
 800a54a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a54c:	e1a9      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a54e:	4b62      	ldr	r3, [pc, #392]	@ (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a556:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a55a:	d102      	bne.n	800a562 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a55c:	4b61      	ldr	r3, [pc, #388]	@ (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a55e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a560:	e19f      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a562:	2300      	movs	r3, #0
 800a564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a566:	e19c      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a568:	2300      	movs	r3, #0
 800a56a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a56c:	e199      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a56e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a572:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a576:	430b      	orrs	r3, r1
 800a578:	d173      	bne.n	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a57a:	4b57      	ldr	r3, [pc, #348]	@ (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a57c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a57e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a582:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a586:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a58a:	d02f      	beq.n	800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a58e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a592:	d863      	bhi.n	800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a596:	2b00      	cmp	r3, #0
 800a598:	d004      	beq.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a59c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5a0:	d012      	beq.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a5a2:	e05b      	b.n	800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5a4:	4b4c      	ldr	r3, [pc, #304]	@ (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5b0:	d107      	bne.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5b2:	f107 0318 	add.w	r3, r7, #24
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 f996 	bl	800a8e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5c0:	e16f      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5c6:	e16c      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5c8:	4b43      	ldr	r3, [pc, #268]	@ (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5d4:	d107      	bne.n	800a5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5d6:	f107 030c 	add.w	r3, r7, #12
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f000 fad8 	bl	800ab90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5e4:	e15d      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5ea:	e15a      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a5ec:	4b3a      	ldr	r3, [pc, #232]	@ (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a5f4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5f6:	4b38      	ldr	r3, [pc, #224]	@ (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f003 0304 	and.w	r3, r3, #4
 800a5fe:	2b04      	cmp	r3, #4
 800a600:	d10c      	bne.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a604:	2b00      	cmp	r3, #0
 800a606:	d109      	bne.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a608:	4b33      	ldr	r3, [pc, #204]	@ (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	08db      	lsrs	r3, r3, #3
 800a60e:	f003 0303 	and.w	r3, r3, #3
 800a612:	4a32      	ldr	r2, [pc, #200]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a614:	fa22 f303 	lsr.w	r3, r2, r3
 800a618:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a61a:	e01e      	b.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a61c:	4b2e      	ldr	r3, [pc, #184]	@ (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a624:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a628:	d106      	bne.n	800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a62a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a62c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a630:	d102      	bne.n	800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a632:	4b2b      	ldr	r3, [pc, #172]	@ (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a634:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a636:	e010      	b.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a638:	4b27      	ldr	r3, [pc, #156]	@ (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a640:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a644:	d106      	bne.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a64c:	d102      	bne.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a64e:	4b25      	ldr	r3, [pc, #148]	@ (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a650:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a652:	e002      	b.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a654:	2300      	movs	r3, #0
 800a656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a658:	e123      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a65a:	e122      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a65c:	2300      	movs	r3, #0
 800a65e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a660:	e11f      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a662:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a666:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a66a:	430b      	orrs	r3, r1
 800a66c:	d13c      	bne.n	800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a66e:	4b1a      	ldr	r3, [pc, #104]	@ (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a676:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d004      	beq.n	800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a684:	d012      	beq.n	800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a686:	e023      	b.n	800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a688:	4b13      	ldr	r3, [pc, #76]	@ (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a690:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a694:	d107      	bne.n	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a696:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a69a:	4618      	mov	r0, r3
 800a69c:	f000 fbcc 	bl	800ae38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6a4:	e0fd      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6aa:	e0fa      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6b8:	d107      	bne.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ba:	f107 0318 	add.w	r3, r7, #24
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f000 f912 	bl	800a8e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a6c4:	6a3b      	ldr	r3, [r7, #32]
 800a6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6c8:	e0eb      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6ce:	e0e8      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6d4:	e0e5      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a6d6:	bf00      	nop
 800a6d8:	58024400 	.word	0x58024400
 800a6dc:	03d09000 	.word	0x03d09000
 800a6e0:	003d0900 	.word	0x003d0900
 800a6e4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a6e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6ec:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a6f0:	430b      	orrs	r3, r1
 800a6f2:	f040 8085 	bne.w	800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a6f6:	4b6d      	ldr	r3, [pc, #436]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a6f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6fa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a6fe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a702:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a706:	d06b      	beq.n	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a70a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a70e:	d874      	bhi.n	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a716:	d056      	beq.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a71a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a71e:	d86c      	bhi.n	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a722:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a726:	d03b      	beq.n	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a72a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a72e:	d864      	bhi.n	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a732:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a736:	d021      	beq.n	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a73a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a73e:	d85c      	bhi.n	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a742:	2b00      	cmp	r3, #0
 800a744:	d004      	beq.n	800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800a746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a748:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a74c:	d004      	beq.n	800a758 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a74e:	e054      	b.n	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a750:	f000 f8b4 	bl	800a8bc <HAL_RCCEx_GetD3PCLK1Freq>
 800a754:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a756:	e0a4      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a758:	4b54      	ldr	r3, [pc, #336]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a760:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a764:	d107      	bne.n	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a766:	f107 0318 	add.w	r3, r7, #24
 800a76a:	4618      	mov	r0, r3
 800a76c:	f000 f8bc 	bl	800a8e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a774:	e095      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a776:	2300      	movs	r3, #0
 800a778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a77a:	e092      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a77c:	4b4b      	ldr	r3, [pc, #300]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a784:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a788:	d107      	bne.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a78a:	f107 030c 	add.w	r3, r7, #12
 800a78e:	4618      	mov	r0, r3
 800a790:	f000 f9fe 	bl	800ab90 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a798:	e083      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a79a:	2300      	movs	r3, #0
 800a79c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a79e:	e080      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a7a0:	4b42      	ldr	r3, [pc, #264]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f003 0304 	and.w	r3, r3, #4
 800a7a8:	2b04      	cmp	r3, #4
 800a7aa:	d109      	bne.n	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7ac:	4b3f      	ldr	r3, [pc, #252]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	08db      	lsrs	r3, r3, #3
 800a7b2:	f003 0303 	and.w	r3, r3, #3
 800a7b6:	4a3e      	ldr	r2, [pc, #248]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a7b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7be:	e070      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7c4:	e06d      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a7c6:	4b39      	ldr	r3, [pc, #228]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7d2:	d102      	bne.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a7d4:	4b37      	ldr	r3, [pc, #220]	@ (800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a7d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7d8:	e063      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7de:	e060      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a7e0:	4b32      	ldr	r3, [pc, #200]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7ec:	d102      	bne.n	800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800a7ee:	4b32      	ldr	r3, [pc, #200]	@ (800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a7f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7f2:	e056      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7f8:	e053      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7fe:	e050      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a800:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a804:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a808:	430b      	orrs	r3, r1
 800a80a:	d148      	bne.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a80c:	4b27      	ldr	r3, [pc, #156]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a80e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a810:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a814:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a818:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a81c:	d02a      	beq.n	800a874 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a820:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a824:	d838      	bhi.n	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d004      	beq.n	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a82e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a832:	d00d      	beq.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a834:	e030      	b.n	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a836:	4b1d      	ldr	r3, [pc, #116]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a83e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a842:	d102      	bne.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800a844:	4b1c      	ldr	r3, [pc, #112]	@ (800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a848:	e02b      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a84a:	2300      	movs	r3, #0
 800a84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a84e:	e028      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a850:	4b16      	ldr	r3, [pc, #88]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a858:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a85c:	d107      	bne.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a85e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a862:	4618      	mov	r0, r3
 800a864:	f000 fae8 	bl	800ae38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a86a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a86c:	e019      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a86e:	2300      	movs	r3, #0
 800a870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a872:	e016      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a874:	4b0d      	ldr	r3, [pc, #52]	@ (800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a87c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a880:	d107      	bne.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a882:	f107 0318 	add.w	r3, r7, #24
 800a886:	4618      	mov	r0, r3
 800a888:	f000 f82e 	bl	800a8e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a890:	e007      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a892:	2300      	movs	r3, #0
 800a894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a896:	e004      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a898:	2300      	movs	r3, #0
 800a89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a89c:	e001      	b.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a8a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3740      	adds	r7, #64	@ 0x40
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	58024400 	.word	0x58024400
 800a8b0:	03d09000 	.word	0x03d09000
 800a8b4:	003d0900 	.word	0x003d0900
 800a8b8:	017d7840 	.word	0x017d7840

0800a8bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a8c0:	f7fe f92e 	bl	8008b20 <HAL_RCC_GetHCLKFreq>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	4b06      	ldr	r3, [pc, #24]	@ (800a8e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a8c8:	6a1b      	ldr	r3, [r3, #32]
 800a8ca:	091b      	lsrs	r3, r3, #4
 800a8cc:	f003 0307 	and.w	r3, r3, #7
 800a8d0:	4904      	ldr	r1, [pc, #16]	@ (800a8e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a8d2:	5ccb      	ldrb	r3, [r1, r3]
 800a8d4:	f003 031f 	and.w	r3, r3, #31
 800a8d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	58024400 	.word	0x58024400
 800a8e4:	0800fb80 	.word	0x0800fb80

0800a8e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b089      	sub	sp, #36	@ 0x24
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a8f0:	4ba1      	ldr	r3, [pc, #644]	@ (800ab78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8f4:	f003 0303 	and.w	r3, r3, #3
 800a8f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a8fa:	4b9f      	ldr	r3, [pc, #636]	@ (800ab78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8fe:	0b1b      	lsrs	r3, r3, #12
 800a900:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a904:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a906:	4b9c      	ldr	r3, [pc, #624]	@ (800ab78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a90a:	091b      	lsrs	r3, r3, #4
 800a90c:	f003 0301 	and.w	r3, r3, #1
 800a910:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a912:	4b99      	ldr	r3, [pc, #612]	@ (800ab78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a916:	08db      	lsrs	r3, r3, #3
 800a918:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a91c:	693a      	ldr	r2, [r7, #16]
 800a91e:	fb02 f303 	mul.w	r3, r2, r3
 800a922:	ee07 3a90 	vmov	s15, r3
 800a926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a92a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	2b00      	cmp	r3, #0
 800a932:	f000 8111 	beq.w	800ab58 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	2b02      	cmp	r3, #2
 800a93a:	f000 8083 	beq.w	800aa44 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	2b02      	cmp	r3, #2
 800a942:	f200 80a1 	bhi.w	800aa88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d003      	beq.n	800a954 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d056      	beq.n	800aa00 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a952:	e099      	b.n	800aa88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a954:	4b88      	ldr	r3, [pc, #544]	@ (800ab78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 0320 	and.w	r3, r3, #32
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d02d      	beq.n	800a9bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a960:	4b85      	ldr	r3, [pc, #532]	@ (800ab78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	08db      	lsrs	r3, r3, #3
 800a966:	f003 0303 	and.w	r3, r3, #3
 800a96a:	4a84      	ldr	r2, [pc, #528]	@ (800ab7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a96c:	fa22 f303 	lsr.w	r3, r2, r3
 800a970:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	ee07 3a90 	vmov	s15, r3
 800a978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	ee07 3a90 	vmov	s15, r3
 800a982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a98a:	4b7b      	ldr	r3, [pc, #492]	@ (800ab78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a98c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a98e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a992:	ee07 3a90 	vmov	s15, r3
 800a996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a99a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a99e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ab80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a9ba:	e087      	b.n	800aacc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	ee07 3a90 	vmov	s15, r3
 800a9c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ab84 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a9ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ce:	4b6a      	ldr	r3, [pc, #424]	@ (800ab78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9d6:	ee07 3a90 	vmov	s15, r3
 800a9da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9de:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ab80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9fe:	e065      	b.n	800aacc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	ee07 3a90 	vmov	s15, r3
 800aa06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa0a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ab88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa12:	4b59      	ldr	r3, [pc, #356]	@ (800ab78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa1a:	ee07 3a90 	vmov	s15, r3
 800aa1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa22:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa26:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ab80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa42:	e043      	b.n	800aacc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	ee07 3a90 	vmov	s15, r3
 800aa4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa4e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ab8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aa52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa56:	4b48      	ldr	r3, [pc, #288]	@ (800ab78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa5e:	ee07 3a90 	vmov	s15, r3
 800aa62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa66:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa6a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ab80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa86:	e021      	b.n	800aacc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	ee07 3a90 	vmov	s15, r3
 800aa8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa92:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ab88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa9a:	4b37      	ldr	r3, [pc, #220]	@ (800ab78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaa2:	ee07 3a90 	vmov	s15, r3
 800aaa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ab80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aabe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800aacc:	4b2a      	ldr	r3, [pc, #168]	@ (800ab78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aad0:	0a5b      	lsrs	r3, r3, #9
 800aad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aad6:	ee07 3a90 	vmov	s15, r3
 800aada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aade:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aae2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aae6:	edd7 6a07 	vldr	s13, [r7, #28]
 800aaea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaf2:	ee17 2a90 	vmov	r2, s15
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800aafa:	4b1f      	ldr	r3, [pc, #124]	@ (800ab78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aafc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aafe:	0c1b      	lsrs	r3, r3, #16
 800ab00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab04:	ee07 3a90 	vmov	s15, r3
 800ab08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab10:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab14:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab20:	ee17 2a90 	vmov	r2, s15
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ab28:	4b13      	ldr	r3, [pc, #76]	@ (800ab78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab2c:	0e1b      	lsrs	r3, r3, #24
 800ab2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab32:	ee07 3a90 	vmov	s15, r3
 800ab36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab42:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab4e:	ee17 2a90 	vmov	r2, s15
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ab56:	e008      	b.n	800ab6a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	609a      	str	r2, [r3, #8]
}
 800ab6a:	bf00      	nop
 800ab6c:	3724      	adds	r7, #36	@ 0x24
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	58024400 	.word	0x58024400
 800ab7c:	03d09000 	.word	0x03d09000
 800ab80:	46000000 	.word	0x46000000
 800ab84:	4c742400 	.word	0x4c742400
 800ab88:	4a742400 	.word	0x4a742400
 800ab8c:	4bbebc20 	.word	0x4bbebc20

0800ab90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b089      	sub	sp, #36	@ 0x24
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab98:	4ba1      	ldr	r3, [pc, #644]	@ (800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab9c:	f003 0303 	and.w	r3, r3, #3
 800aba0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800aba2:	4b9f      	ldr	r3, [pc, #636]	@ (800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aba6:	0d1b      	lsrs	r3, r3, #20
 800aba8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800abac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800abae:	4b9c      	ldr	r3, [pc, #624]	@ (800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abb2:	0a1b      	lsrs	r3, r3, #8
 800abb4:	f003 0301 	and.w	r3, r3, #1
 800abb8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800abba:	4b99      	ldr	r3, [pc, #612]	@ (800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abbe:	08db      	lsrs	r3, r3, #3
 800abc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abc4:	693a      	ldr	r2, [r7, #16]
 800abc6:	fb02 f303 	mul.w	r3, r2, r3
 800abca:	ee07 3a90 	vmov	s15, r3
 800abce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	f000 8111 	beq.w	800ae00 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	2b02      	cmp	r3, #2
 800abe2:	f000 8083 	beq.w	800acec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	2b02      	cmp	r3, #2
 800abea:	f200 80a1 	bhi.w	800ad30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d003      	beq.n	800abfc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800abf4:	69bb      	ldr	r3, [r7, #24]
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d056      	beq.n	800aca8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800abfa:	e099      	b.n	800ad30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abfc:	4b88      	ldr	r3, [pc, #544]	@ (800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f003 0320 	and.w	r3, r3, #32
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d02d      	beq.n	800ac64 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac08:	4b85      	ldr	r3, [pc, #532]	@ (800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	08db      	lsrs	r3, r3, #3
 800ac0e:	f003 0303 	and.w	r3, r3, #3
 800ac12:	4a84      	ldr	r2, [pc, #528]	@ (800ae24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ac14:	fa22 f303 	lsr.w	r3, r2, r3
 800ac18:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	ee07 3a90 	vmov	s15, r3
 800ac20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	ee07 3a90 	vmov	s15, r3
 800ac2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac32:	4b7b      	ldr	r3, [pc, #492]	@ (800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac3a:	ee07 3a90 	vmov	s15, r3
 800ac3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac42:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac46:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ae28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ac62:	e087      	b.n	800ad74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	ee07 3a90 	vmov	s15, r3
 800ac6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac6e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ae2c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ac72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac76:	4b6a      	ldr	r3, [pc, #424]	@ (800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac7e:	ee07 3a90 	vmov	s15, r3
 800ac82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac86:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac8a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ae28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aca6:	e065      	b.n	800ad74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	ee07 3a90 	vmov	s15, r3
 800acae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acb2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ae30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800acb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acba:	4b59      	ldr	r3, [pc, #356]	@ (800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acc2:	ee07 3a90 	vmov	s15, r3
 800acc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acca:	ed97 6a03 	vldr	s12, [r7, #12]
 800acce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ae28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ace2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ace6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acea:	e043      	b.n	800ad74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	ee07 3a90 	vmov	s15, r3
 800acf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ae34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800acfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acfe:	4b48      	ldr	r3, [pc, #288]	@ (800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad06:	ee07 3a90 	vmov	s15, r3
 800ad0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad12:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ae28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad2e:	e021      	b.n	800ad74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	ee07 3a90 	vmov	s15, r3
 800ad36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad3a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ae30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad42:	4b37      	ldr	r3, [pc, #220]	@ (800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad4a:	ee07 3a90 	vmov	s15, r3
 800ad4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad56:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ae28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ad74:	4b2a      	ldr	r3, [pc, #168]	@ (800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad78:	0a5b      	lsrs	r3, r3, #9
 800ad7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad7e:	ee07 3a90 	vmov	s15, r3
 800ad82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad8e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad9a:	ee17 2a90 	vmov	r2, s15
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ada2:	4b1f      	ldr	r3, [pc, #124]	@ (800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ada4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ada6:	0c1b      	lsrs	r3, r3, #16
 800ada8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adac:	ee07 3a90 	vmov	s15, r3
 800adb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800adb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adbc:	edd7 6a07 	vldr	s13, [r7, #28]
 800adc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adc8:	ee17 2a90 	vmov	r2, s15
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800add0:	4b13      	ldr	r3, [pc, #76]	@ (800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800add2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800add4:	0e1b      	lsrs	r3, r3, #24
 800add6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adda:	ee07 3a90 	vmov	s15, r3
 800adde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ade2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ade6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adea:	edd7 6a07 	vldr	s13, [r7, #28]
 800adee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adf6:	ee17 2a90 	vmov	r2, s15
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800adfe:	e008      	b.n	800ae12 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	609a      	str	r2, [r3, #8]
}
 800ae12:	bf00      	nop
 800ae14:	3724      	adds	r7, #36	@ 0x24
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr
 800ae1e:	bf00      	nop
 800ae20:	58024400 	.word	0x58024400
 800ae24:	03d09000 	.word	0x03d09000
 800ae28:	46000000 	.word	0x46000000
 800ae2c:	4c742400 	.word	0x4c742400
 800ae30:	4a742400 	.word	0x4a742400
 800ae34:	4bbebc20 	.word	0x4bbebc20

0800ae38 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b089      	sub	sp, #36	@ 0x24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae40:	4ba0      	ldr	r3, [pc, #640]	@ (800b0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae44:	f003 0303 	and.w	r3, r3, #3
 800ae48:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ae4a:	4b9e      	ldr	r3, [pc, #632]	@ (800b0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae4e:	091b      	lsrs	r3, r3, #4
 800ae50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae54:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ae56:	4b9b      	ldr	r3, [pc, #620]	@ (800b0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae5a:	f003 0301 	and.w	r3, r3, #1
 800ae5e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ae60:	4b98      	ldr	r3, [pc, #608]	@ (800b0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae64:	08db      	lsrs	r3, r3, #3
 800ae66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae6a:	693a      	ldr	r2, [r7, #16]
 800ae6c:	fb02 f303 	mul.w	r3, r2, r3
 800ae70:	ee07 3a90 	vmov	s15, r3
 800ae74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae78:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	f000 8111 	beq.w	800b0a6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ae84:	69bb      	ldr	r3, [r7, #24]
 800ae86:	2b02      	cmp	r3, #2
 800ae88:	f000 8083 	beq.w	800af92 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	f200 80a1 	bhi.w	800afd6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d003      	beq.n	800aea2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ae9a:	69bb      	ldr	r3, [r7, #24]
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d056      	beq.n	800af4e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800aea0:	e099      	b.n	800afd6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aea2:	4b88      	ldr	r3, [pc, #544]	@ (800b0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f003 0320 	and.w	r3, r3, #32
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d02d      	beq.n	800af0a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aeae:	4b85      	ldr	r3, [pc, #532]	@ (800b0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	08db      	lsrs	r3, r3, #3
 800aeb4:	f003 0303 	and.w	r3, r3, #3
 800aeb8:	4a83      	ldr	r2, [pc, #524]	@ (800b0c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800aeba:	fa22 f303 	lsr.w	r3, r2, r3
 800aebe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	ee07 3a90 	vmov	s15, r3
 800aec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	ee07 3a90 	vmov	s15, r3
 800aed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aed4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aed8:	4b7a      	ldr	r3, [pc, #488]	@ (800b0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aeda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aedc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aee0:	ee07 3a90 	vmov	s15, r3
 800aee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aee8:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeec:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b0cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aef0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aef4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aef8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aefc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af04:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800af08:	e087      	b.n	800b01a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	ee07 3a90 	vmov	s15, r3
 800af10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af14:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b0d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800af18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af1c:	4b69      	ldr	r3, [pc, #420]	@ (800b0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af24:	ee07 3a90 	vmov	s15, r3
 800af28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800af30:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b0cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af4c:	e065      	b.n	800b01a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	ee07 3a90 	vmov	s15, r3
 800af54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af58:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b0d4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800af5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af60:	4b58      	ldr	r3, [pc, #352]	@ (800b0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af68:	ee07 3a90 	vmov	s15, r3
 800af6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af70:	ed97 6a03 	vldr	s12, [r7, #12]
 800af74:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b0cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af90:	e043      	b.n	800b01a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	ee07 3a90 	vmov	s15, r3
 800af98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af9c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b0d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800afa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afa4:	4b47      	ldr	r3, [pc, #284]	@ (800b0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afac:	ee07 3a90 	vmov	s15, r3
 800afb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afb4:	ed97 6a03 	vldr	s12, [r7, #12]
 800afb8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b0cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800afbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afd4:	e021      	b.n	800b01a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	ee07 3a90 	vmov	s15, r3
 800afdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b0d0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800afe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afe8:	4b36      	ldr	r3, [pc, #216]	@ (800b0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff0:	ee07 3a90 	vmov	s15, r3
 800aff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aff8:	ed97 6a03 	vldr	s12, [r7, #12]
 800affc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b0cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b000:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b008:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b00c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b010:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b014:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b018:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b01a:	4b2a      	ldr	r3, [pc, #168]	@ (800b0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b01c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b01e:	0a5b      	lsrs	r3, r3, #9
 800b020:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b024:	ee07 3a90 	vmov	s15, r3
 800b028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b02c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b030:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b034:	edd7 6a07 	vldr	s13, [r7, #28]
 800b038:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b03c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b040:	ee17 2a90 	vmov	r2, s15
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b048:	4b1e      	ldr	r3, [pc, #120]	@ (800b0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b04a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b04c:	0c1b      	lsrs	r3, r3, #16
 800b04e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b052:	ee07 3a90 	vmov	s15, r3
 800b056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b05a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b05e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b062:	edd7 6a07 	vldr	s13, [r7, #28]
 800b066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b06a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b06e:	ee17 2a90 	vmov	r2, s15
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b076:	4b13      	ldr	r3, [pc, #76]	@ (800b0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b07a:	0e1b      	lsrs	r3, r3, #24
 800b07c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b080:	ee07 3a90 	vmov	s15, r3
 800b084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b088:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b08c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b090:	edd7 6a07 	vldr	s13, [r7, #28]
 800b094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b09c:	ee17 2a90 	vmov	r2, s15
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b0a4:	e008      	b.n	800b0b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	609a      	str	r2, [r3, #8]
}
 800b0b8:	bf00      	nop
 800b0ba:	3724      	adds	r7, #36	@ 0x24
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr
 800b0c4:	58024400 	.word	0x58024400
 800b0c8:	03d09000 	.word	0x03d09000
 800b0cc:	46000000 	.word	0x46000000
 800b0d0:	4c742400 	.word	0x4c742400
 800b0d4:	4a742400 	.word	0x4a742400
 800b0d8:	4bbebc20 	.word	0x4bbebc20

0800b0dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b0ea:	4b53      	ldr	r3, [pc, #332]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b0ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ee:	f003 0303 	and.w	r3, r3, #3
 800b0f2:	2b03      	cmp	r3, #3
 800b0f4:	d101      	bne.n	800b0fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e099      	b.n	800b22e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b0fa:	4b4f      	ldr	r3, [pc, #316]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a4e      	ldr	r2, [pc, #312]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b100:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b106:	f7f7 fb9b 	bl	8002840 <HAL_GetTick>
 800b10a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b10c:	e008      	b.n	800b120 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b10e:	f7f7 fb97 	bl	8002840 <HAL_GetTick>
 800b112:	4602      	mov	r2, r0
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	1ad3      	subs	r3, r2, r3
 800b118:	2b02      	cmp	r3, #2
 800b11a:	d901      	bls.n	800b120 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b11c:	2303      	movs	r3, #3
 800b11e:	e086      	b.n	800b22e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b120:	4b45      	ldr	r3, [pc, #276]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d1f0      	bne.n	800b10e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b12c:	4b42      	ldr	r3, [pc, #264]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b12e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b130:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	031b      	lsls	r3, r3, #12
 800b13a:	493f      	ldr	r1, [pc, #252]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b13c:	4313      	orrs	r3, r2
 800b13e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	3b01      	subs	r3, #1
 800b146:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	3b01      	subs	r3, #1
 800b150:	025b      	lsls	r3, r3, #9
 800b152:	b29b      	uxth	r3, r3
 800b154:	431a      	orrs	r2, r3
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	3b01      	subs	r3, #1
 800b15c:	041b      	lsls	r3, r3, #16
 800b15e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b162:	431a      	orrs	r2, r3
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	691b      	ldr	r3, [r3, #16]
 800b168:	3b01      	subs	r3, #1
 800b16a:	061b      	lsls	r3, r3, #24
 800b16c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b170:	4931      	ldr	r1, [pc, #196]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b172:	4313      	orrs	r3, r2
 800b174:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b176:	4b30      	ldr	r3, [pc, #192]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b17a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	695b      	ldr	r3, [r3, #20]
 800b182:	492d      	ldr	r1, [pc, #180]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b184:	4313      	orrs	r3, r2
 800b186:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b188:	4b2b      	ldr	r3, [pc, #172]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b18a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b18c:	f023 0220 	bic.w	r2, r3, #32
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	699b      	ldr	r3, [r3, #24]
 800b194:	4928      	ldr	r1, [pc, #160]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b196:	4313      	orrs	r3, r2
 800b198:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b19a:	4b27      	ldr	r3, [pc, #156]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b19c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b19e:	4a26      	ldr	r2, [pc, #152]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b1a0:	f023 0310 	bic.w	r3, r3, #16
 800b1a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b1a6:	4b24      	ldr	r3, [pc, #144]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b1a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b1aa:	4b24      	ldr	r3, [pc, #144]	@ (800b23c <RCCEx_PLL2_Config+0x160>)
 800b1ac:	4013      	ands	r3, r2
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	69d2      	ldr	r2, [r2, #28]
 800b1b2:	00d2      	lsls	r2, r2, #3
 800b1b4:	4920      	ldr	r1, [pc, #128]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b1ba:	4b1f      	ldr	r3, [pc, #124]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b1bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1be:	4a1e      	ldr	r2, [pc, #120]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b1c0:	f043 0310 	orr.w	r3, r3, #16
 800b1c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d106      	bne.n	800b1da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b1cc:	4b1a      	ldr	r3, [pc, #104]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b1ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1d0:	4a19      	ldr	r2, [pc, #100]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b1d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b1d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b1d8:	e00f      	b.n	800b1fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d106      	bne.n	800b1ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b1e0:	4b15      	ldr	r3, [pc, #84]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b1e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1e4:	4a14      	ldr	r2, [pc, #80]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b1e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b1ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b1ec:	e005      	b.n	800b1fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b1ee:	4b12      	ldr	r3, [pc, #72]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b1f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1f2:	4a11      	ldr	r2, [pc, #68]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b1f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b1f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b1fa:	4b0f      	ldr	r3, [pc, #60]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a0e      	ldr	r2, [pc, #56]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b200:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b204:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b206:	f7f7 fb1b 	bl	8002840 <HAL_GetTick>
 800b20a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b20c:	e008      	b.n	800b220 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b20e:	f7f7 fb17 	bl	8002840 <HAL_GetTick>
 800b212:	4602      	mov	r2, r0
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	1ad3      	subs	r3, r2, r3
 800b218:	2b02      	cmp	r3, #2
 800b21a:	d901      	bls.n	800b220 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b21c:	2303      	movs	r3, #3
 800b21e:	e006      	b.n	800b22e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b220:	4b05      	ldr	r3, [pc, #20]	@ (800b238 <RCCEx_PLL2_Config+0x15c>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d0f0      	beq.n	800b20e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3710      	adds	r7, #16
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	58024400 	.word	0x58024400
 800b23c:	ffff0007 	.word	0xffff0007

0800b240 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b24a:	2300      	movs	r3, #0
 800b24c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b24e:	4b53      	ldr	r3, [pc, #332]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b252:	f003 0303 	and.w	r3, r3, #3
 800b256:	2b03      	cmp	r3, #3
 800b258:	d101      	bne.n	800b25e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b25a:	2301      	movs	r3, #1
 800b25c:	e099      	b.n	800b392 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b25e:	4b4f      	ldr	r3, [pc, #316]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a4e      	ldr	r2, [pc, #312]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b264:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b26a:	f7f7 fae9 	bl	8002840 <HAL_GetTick>
 800b26e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b270:	e008      	b.n	800b284 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b272:	f7f7 fae5 	bl	8002840 <HAL_GetTick>
 800b276:	4602      	mov	r2, r0
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	1ad3      	subs	r3, r2, r3
 800b27c:	2b02      	cmp	r3, #2
 800b27e:	d901      	bls.n	800b284 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b280:	2303      	movs	r3, #3
 800b282:	e086      	b.n	800b392 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b284:	4b45      	ldr	r3, [pc, #276]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d1f0      	bne.n	800b272 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b290:	4b42      	ldr	r3, [pc, #264]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b294:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	051b      	lsls	r3, r3, #20
 800b29e:	493f      	ldr	r1, [pc, #252]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	628b      	str	r3, [r1, #40]	@ 0x28
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	025b      	lsls	r3, r3, #9
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	431a      	orrs	r2, r3
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	68db      	ldr	r3, [r3, #12]
 800b2be:	3b01      	subs	r3, #1
 800b2c0:	041b      	lsls	r3, r3, #16
 800b2c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b2c6:	431a      	orrs	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	691b      	ldr	r3, [r3, #16]
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	061b      	lsls	r3, r3, #24
 800b2d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b2d4:	4931      	ldr	r1, [pc, #196]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b2da:	4b30      	ldr	r3, [pc, #192]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b2dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	695b      	ldr	r3, [r3, #20]
 800b2e6:	492d      	ldr	r1, [pc, #180]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b2ec:	4b2b      	ldr	r3, [pc, #172]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2f0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	699b      	ldr	r3, [r3, #24]
 800b2f8:	4928      	ldr	r1, [pc, #160]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b2fe:	4b27      	ldr	r3, [pc, #156]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b302:	4a26      	ldr	r2, [pc, #152]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b304:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b308:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b30a:	4b24      	ldr	r3, [pc, #144]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b30c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b30e:	4b24      	ldr	r3, [pc, #144]	@ (800b3a0 <RCCEx_PLL3_Config+0x160>)
 800b310:	4013      	ands	r3, r2
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	69d2      	ldr	r2, [r2, #28]
 800b316:	00d2      	lsls	r2, r2, #3
 800b318:	4920      	ldr	r1, [pc, #128]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b31a:	4313      	orrs	r3, r2
 800b31c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b31e:	4b1f      	ldr	r3, [pc, #124]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b322:	4a1e      	ldr	r2, [pc, #120]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b328:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d106      	bne.n	800b33e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b330:	4b1a      	ldr	r3, [pc, #104]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b334:	4a19      	ldr	r2, [pc, #100]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b336:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b33a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b33c:	e00f      	b.n	800b35e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	2b01      	cmp	r3, #1
 800b342:	d106      	bne.n	800b352 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b344:	4b15      	ldr	r3, [pc, #84]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b348:	4a14      	ldr	r2, [pc, #80]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b34a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b34e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b350:	e005      	b.n	800b35e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b352:	4b12      	ldr	r3, [pc, #72]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b356:	4a11      	ldr	r2, [pc, #68]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b358:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b35c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b35e:	4b0f      	ldr	r3, [pc, #60]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a0e      	ldr	r2, [pc, #56]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b36a:	f7f7 fa69 	bl	8002840 <HAL_GetTick>
 800b36e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b370:	e008      	b.n	800b384 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b372:	f7f7 fa65 	bl	8002840 <HAL_GetTick>
 800b376:	4602      	mov	r2, r0
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	1ad3      	subs	r3, r2, r3
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d901      	bls.n	800b384 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b380:	2303      	movs	r3, #3
 800b382:	e006      	b.n	800b392 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b384:	4b05      	ldr	r3, [pc, #20]	@ (800b39c <RCCEx_PLL3_Config+0x15c>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d0f0      	beq.n	800b372 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b390:	7bfb      	ldrb	r3, [r7, #15]
}
 800b392:	4618      	mov	r0, r3
 800b394:	3710      	adds	r7, #16
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	58024400 	.word	0x58024400
 800b3a0:	ffff0007 	.word	0xffff0007

0800b3a4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d101      	bne.n	800b3b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e10f      	b.n	800b5d6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a87      	ldr	r2, [pc, #540]	@ (800b5e0 <HAL_SPI_Init+0x23c>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d00f      	beq.n	800b3e6 <HAL_SPI_Init+0x42>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a86      	ldr	r2, [pc, #536]	@ (800b5e4 <HAL_SPI_Init+0x240>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d00a      	beq.n	800b3e6 <HAL_SPI_Init+0x42>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a84      	ldr	r2, [pc, #528]	@ (800b5e8 <HAL_SPI_Init+0x244>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d005      	beq.n	800b3e6 <HAL_SPI_Init+0x42>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	2b0f      	cmp	r3, #15
 800b3e0:	d901      	bls.n	800b3e6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e0f7      	b.n	800b5d6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 fe3c 	bl	800c064 <SPI_GetPacketSize>
 800b3ec:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a7b      	ldr	r2, [pc, #492]	@ (800b5e0 <HAL_SPI_Init+0x23c>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d00c      	beq.n	800b412 <HAL_SPI_Init+0x6e>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4a79      	ldr	r2, [pc, #484]	@ (800b5e4 <HAL_SPI_Init+0x240>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d007      	beq.n	800b412 <HAL_SPI_Init+0x6e>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4a78      	ldr	r2, [pc, #480]	@ (800b5e8 <HAL_SPI_Init+0x244>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d002      	beq.n	800b412 <HAL_SPI_Init+0x6e>
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2b08      	cmp	r3, #8
 800b410:	d811      	bhi.n	800b436 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b416:	4a72      	ldr	r2, [pc, #456]	@ (800b5e0 <HAL_SPI_Init+0x23c>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d009      	beq.n	800b430 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a70      	ldr	r2, [pc, #448]	@ (800b5e4 <HAL_SPI_Init+0x240>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d004      	beq.n	800b430 <HAL_SPI_Init+0x8c>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a6f      	ldr	r2, [pc, #444]	@ (800b5e8 <HAL_SPI_Init+0x244>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d104      	bne.n	800b43a <HAL_SPI_Init+0x96>
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2b10      	cmp	r3, #16
 800b434:	d901      	bls.n	800b43a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b436:	2301      	movs	r3, #1
 800b438:	e0cd      	b.n	800b5d6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b440:	b2db      	uxtb	r3, r3
 800b442:	2b00      	cmp	r3, #0
 800b444:	d106      	bne.n	800b454 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2200      	movs	r2, #0
 800b44a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f7f6 feee 	bl	8002230 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2202      	movs	r2, #2
 800b458:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	681a      	ldr	r2, [r3, #0]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f022 0201 	bic.w	r2, r2, #1
 800b46a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b476:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	699b      	ldr	r3, [r3, #24]
 800b47c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b480:	d119      	bne.n	800b4b6 <HAL_SPI_Init+0x112>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b48a:	d103      	bne.n	800b494 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b490:	2b00      	cmp	r3, #0
 800b492:	d008      	beq.n	800b4a6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d10c      	bne.n	800b4b6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b4a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4a4:	d107      	bne.n	800b4b6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b4b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00f      	beq.n	800b4e2 <HAL_SPI_Init+0x13e>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	2b06      	cmp	r3, #6
 800b4c8:	d90b      	bls.n	800b4e2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	430a      	orrs	r2, r1
 800b4de:	601a      	str	r2, [r3, #0]
 800b4e0:	e007      	b.n	800b4f2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b4f0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	69da      	ldr	r2, [r3, #28]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4fa:	431a      	orrs	r2, r3
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	431a      	orrs	r2, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b504:	ea42 0103 	orr.w	r1, r2, r3
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	68da      	ldr	r2, [r3, #12]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	430a      	orrs	r2, r1
 800b512:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b51c:	431a      	orrs	r2, r3
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b522:	431a      	orrs	r2, r3
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	699b      	ldr	r3, [r3, #24]
 800b528:	431a      	orrs	r2, r3
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	691b      	ldr	r3, [r3, #16]
 800b52e:	431a      	orrs	r2, r3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	695b      	ldr	r3, [r3, #20]
 800b534:	431a      	orrs	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a1b      	ldr	r3, [r3, #32]
 800b53a:	431a      	orrs	r2, r3
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	431a      	orrs	r2, r3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b546:	431a      	orrs	r2, r3
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	431a      	orrs	r2, r3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b552:	ea42 0103 	orr.w	r1, r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	430a      	orrs	r2, r1
 800b560:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d113      	bne.n	800b592 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b57c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b590:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f022 0201 	bic.w	r2, r2, #1
 800b5a0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00a      	beq.n	800b5c4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	430a      	orrs	r2, r1
 800b5c2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b5d4:	2300      	movs	r3, #0
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	40013000 	.word	0x40013000
 800b5e4:	40003800 	.word	0x40003800
 800b5e8:	40003c00 	.word	0x40003c00

0800b5ec <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b088      	sub	sp, #32
 800b5f0:	af02      	add	r7, sp, #8
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	603b      	str	r3, [r7, #0]
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	3320      	adds	r3, #32
 800b602:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b604:	f7f7 f91c 	bl	8002840 <HAL_GetTick>
 800b608:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b610:	b2db      	uxtb	r3, r3
 800b612:	2b01      	cmp	r3, #1
 800b614:	d001      	beq.n	800b61a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800b616:	2302      	movs	r3, #2
 800b618:	e1d1      	b.n	800b9be <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d002      	beq.n	800b626 <HAL_SPI_Transmit+0x3a>
 800b620:	88fb      	ldrh	r3, [r7, #6]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d101      	bne.n	800b62a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800b626:	2301      	movs	r3, #1
 800b628:	e1c9      	b.n	800b9be <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b630:	2b01      	cmp	r3, #1
 800b632:	d101      	bne.n	800b638 <HAL_SPI_Transmit+0x4c>
 800b634:	2302      	movs	r3, #2
 800b636:	e1c2      	b.n	800b9be <HAL_SPI_Transmit+0x3d2>
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2201      	movs	r2, #1
 800b63c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2203      	movs	r2, #3
 800b644:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2200      	movs	r2, #0
 800b64c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	68ba      	ldr	r2, [r7, #8]
 800b654:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	88fa      	ldrh	r2, [r7, #6]
 800b65a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	88fa      	ldrh	r2, [r7, #6]
 800b662:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2200      	movs	r2, #0
 800b66a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2200      	movs	r2, #0
 800b670:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2200      	movs	r2, #0
 800b678:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2200      	movs	r2, #0
 800b680:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2200      	movs	r2, #0
 800b686:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b690:	d108      	bne.n	800b6a4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b6a0:	601a      	str	r2, [r3, #0]
 800b6a2:	e009      	b.n	800b6b8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b6b6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	685a      	ldr	r2, [r3, #4]
 800b6be:	4b96      	ldr	r3, [pc, #600]	@ (800b918 <HAL_SPI_Transmit+0x32c>)
 800b6c0:	4013      	ands	r3, r2
 800b6c2:	88f9      	ldrh	r1, [r7, #6]
 800b6c4:	68fa      	ldr	r2, [r7, #12]
 800b6c6:	6812      	ldr	r2, [r2, #0]
 800b6c8:	430b      	orrs	r3, r1
 800b6ca:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f042 0201 	orr.w	r2, r2, #1
 800b6da:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b6e4:	d107      	bne.n	800b6f6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b6f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	2b0f      	cmp	r3, #15
 800b6fc:	d947      	bls.n	800b78e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b6fe:	e03f      	b.n	800b780 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	695b      	ldr	r3, [r3, #20]
 800b706:	f003 0302 	and.w	r3, r3, #2
 800b70a:	2b02      	cmp	r3, #2
 800b70c:	d114      	bne.n	800b738 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	6812      	ldr	r2, [r2, #0]
 800b718:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b71e:	1d1a      	adds	r2, r3, #4
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	3b01      	subs	r3, #1
 800b72e:	b29a      	uxth	r2, r3
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b736:	e023      	b.n	800b780 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b738:	f7f7 f882 	bl	8002840 <HAL_GetTick>
 800b73c:	4602      	mov	r2, r0
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	1ad3      	subs	r3, r2, r3
 800b742:	683a      	ldr	r2, [r7, #0]
 800b744:	429a      	cmp	r2, r3
 800b746:	d803      	bhi.n	800b750 <HAL_SPI_Transmit+0x164>
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b74e:	d102      	bne.n	800b756 <HAL_SPI_Transmit+0x16a>
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d114      	bne.n	800b780 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	f000 fbb6 	bl	800bec8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b762:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2201      	movs	r2, #1
 800b770:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2200      	movs	r2, #0
 800b778:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b77c:	2303      	movs	r3, #3
 800b77e:	e11e      	b.n	800b9be <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b786:	b29b      	uxth	r3, r3
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1b9      	bne.n	800b700 <HAL_SPI_Transmit+0x114>
 800b78c:	e0f1      	b.n	800b972 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	2b07      	cmp	r3, #7
 800b794:	f240 80e6 	bls.w	800b964 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b798:	e05d      	b.n	800b856 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	695b      	ldr	r3, [r3, #20]
 800b7a0:	f003 0302 	and.w	r3, r3, #2
 800b7a4:	2b02      	cmp	r3, #2
 800b7a6:	d132      	bne.n	800b80e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d918      	bls.n	800b7e6 <HAL_SPI_Transmit+0x1fa>
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d014      	beq.n	800b7e6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	6812      	ldr	r2, [r2, #0]
 800b7c6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7cc:	1d1a      	adds	r2, r3, #4
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	3b02      	subs	r3, #2
 800b7dc:	b29a      	uxth	r2, r3
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b7e4:	e037      	b.n	800b856 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7ea:	881a      	ldrh	r2, [r3, #0]
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7f4:	1c9a      	adds	r2, r3, #2
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b800:	b29b      	uxth	r3, r3
 800b802:	3b01      	subs	r3, #1
 800b804:	b29a      	uxth	r2, r3
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b80c:	e023      	b.n	800b856 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b80e:	f7f7 f817 	bl	8002840 <HAL_GetTick>
 800b812:	4602      	mov	r2, r0
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	1ad3      	subs	r3, r2, r3
 800b818:	683a      	ldr	r2, [r7, #0]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d803      	bhi.n	800b826 <HAL_SPI_Transmit+0x23a>
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b824:	d102      	bne.n	800b82c <HAL_SPI_Transmit+0x240>
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d114      	bne.n	800b856 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b82c:	68f8      	ldr	r0, [r7, #12]
 800b82e:	f000 fb4b 	bl	800bec8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b838:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2201      	movs	r2, #1
 800b846:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2200      	movs	r2, #0
 800b84e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b852:	2303      	movs	r3, #3
 800b854:	e0b3      	b.n	800b9be <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d19b      	bne.n	800b79a <HAL_SPI_Transmit+0x1ae>
 800b862:	e086      	b.n	800b972 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	695b      	ldr	r3, [r3, #20]
 800b86a:	f003 0302 	and.w	r3, r3, #2
 800b86e:	2b02      	cmp	r3, #2
 800b870:	d154      	bne.n	800b91c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b878:	b29b      	uxth	r3, r3
 800b87a:	2b03      	cmp	r3, #3
 800b87c:	d918      	bls.n	800b8b0 <HAL_SPI_Transmit+0x2c4>
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b882:	2b40      	cmp	r3, #64	@ 0x40
 800b884:	d914      	bls.n	800b8b0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	6812      	ldr	r2, [r2, #0]
 800b890:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b896:	1d1a      	adds	r2, r3, #4
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8a2:	b29b      	uxth	r3, r3
 800b8a4:	3b04      	subs	r3, #4
 800b8a6:	b29a      	uxth	r2, r3
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b8ae:	e059      	b.n	800b964 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d917      	bls.n	800b8ec <HAL_SPI_Transmit+0x300>
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d013      	beq.n	800b8ec <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8c8:	881a      	ldrh	r2, [r3, #0]
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8d2:	1c9a      	adds	r2, r3, #2
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	3b02      	subs	r3, #2
 800b8e2:	b29a      	uxth	r2, r3
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b8ea:	e03b      	b.n	800b964 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	3320      	adds	r3, #32
 800b8f6:	7812      	ldrb	r2, [r2, #0]
 800b8f8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8fe:	1c5a      	adds	r2, r3, #1
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	3b01      	subs	r3, #1
 800b90e:	b29a      	uxth	r2, r3
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b916:	e025      	b.n	800b964 <HAL_SPI_Transmit+0x378>
 800b918:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b91c:	f7f6 ff90 	bl	8002840 <HAL_GetTick>
 800b920:	4602      	mov	r2, r0
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	1ad3      	subs	r3, r2, r3
 800b926:	683a      	ldr	r2, [r7, #0]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d803      	bhi.n	800b934 <HAL_SPI_Transmit+0x348>
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b932:	d102      	bne.n	800b93a <HAL_SPI_Transmit+0x34e>
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d114      	bne.n	800b964 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	f000 fac4 	bl	800bec8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b946:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2201      	movs	r2, #1
 800b954:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b960:	2303      	movs	r3, #3
 800b962:	e02c      	b.n	800b9be <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f47f af79 	bne.w	800b864 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	2200      	movs	r2, #0
 800b97a:	2108      	movs	r1, #8
 800b97c:	68f8      	ldr	r0, [r7, #12]
 800b97e:	f000 fb43 	bl	800c008 <SPI_WaitOnFlagUntilTimeout>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d007      	beq.n	800b998 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b98e:	f043 0220 	orr.w	r2, r3, #32
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b998:	68f8      	ldr	r0, [r7, #12]
 800b99a:	f000 fa95 	bl	800bec8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d001      	beq.n	800b9bc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e000      	b.n	800b9be <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800b9bc:	2300      	movs	r3, #0
  }
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3718      	adds	r7, #24
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop

0800b9c8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b088      	sub	sp, #32
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	60b9      	str	r1, [r7, #8]
 800b9d2:	603b      	str	r3, [r7, #0]
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9dc:	095b      	lsrs	r3, r3, #5
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	3330      	adds	r3, #48	@ 0x30
 800b9ea:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b9ec:	f7f6 ff28 	bl	8002840 <HAL_GetTick>
 800b9f0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d001      	beq.n	800ba02 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800b9fe:	2302      	movs	r3, #2
 800ba00:	e250      	b.n	800bea4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d002      	beq.n	800ba0e <HAL_SPI_Receive+0x46>
 800ba08:	88fb      	ldrh	r3, [r7, #6]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d101      	bne.n	800ba12 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800ba0e:	2301      	movs	r3, #1
 800ba10:	e248      	b.n	800bea4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d101      	bne.n	800ba20 <HAL_SPI_Receive+0x58>
 800ba1c:	2302      	movs	r3, #2
 800ba1e:	e241      	b.n	800bea4 <HAL_SPI_Receive+0x4dc>
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2201      	movs	r2, #1
 800ba24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2204      	movs	r2, #4
 800ba2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2200      	movs	r2, #0
 800ba34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	68ba      	ldr	r2, [r7, #8]
 800ba3c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	88fa      	ldrh	r2, [r7, #6]
 800ba42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	88fa      	ldrh	r2, [r7, #6]
 800ba4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2200      	movs	r2, #0
 800ba52:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2200      	movs	r2, #0
 800ba68:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800ba78:	d108      	bne.n	800ba8c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ba88:	601a      	str	r2, [r3, #0]
 800ba8a:	e009      	b.n	800baa0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800ba9e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	685a      	ldr	r2, [r3, #4]
 800baa6:	4b95      	ldr	r3, [pc, #596]	@ (800bcfc <HAL_SPI_Receive+0x334>)
 800baa8:	4013      	ands	r3, r2
 800baaa:	88f9      	ldrh	r1, [r7, #6]
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	6812      	ldr	r2, [r2, #0]
 800bab0:	430b      	orrs	r3, r1
 800bab2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f042 0201 	orr.w	r2, r2, #1
 800bac2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bacc:	d107      	bne.n	800bade <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800badc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	68db      	ldr	r3, [r3, #12]
 800bae2:	2b0f      	cmp	r3, #15
 800bae4:	d96c      	bls.n	800bbc0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bae6:	e064      	b.n	800bbb2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	695b      	ldr	r3, [r3, #20]
 800baee:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	695b      	ldr	r3, [r3, #20]
 800baf6:	f003 0301 	and.w	r3, r3, #1
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d114      	bne.n	800bb28 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681a      	ldr	r2, [r3, #0]
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb06:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bb08:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb0e:	1d1a      	adds	r2, r3, #4
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	3b01      	subs	r3, #1
 800bb1e:	b29a      	uxth	r2, r3
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bb26:	e044      	b.n	800bbb2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	8bfa      	ldrh	r2, [r7, #30]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d919      	bls.n	800bb6a <HAL_SPI_Receive+0x1a2>
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d014      	beq.n	800bb6a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb48:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bb4a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb50:	1d1a      	adds	r2, r3, #4
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	3b01      	subs	r3, #1
 800bb60:	b29a      	uxth	r2, r3
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bb68:	e023      	b.n	800bbb2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb6a:	f7f6 fe69 	bl	8002840 <HAL_GetTick>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	1ad3      	subs	r3, r2, r3
 800bb74:	683a      	ldr	r2, [r7, #0]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d803      	bhi.n	800bb82 <HAL_SPI_Receive+0x1ba>
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb80:	d102      	bne.n	800bb88 <HAL_SPI_Receive+0x1c0>
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d114      	bne.n	800bbb2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f000 f99d 	bl	800bec8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2201      	movs	r2, #1
 800bba2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bbae:	2303      	movs	r3, #3
 800bbb0:	e178      	b.n	800bea4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d194      	bne.n	800bae8 <HAL_SPI_Receive+0x120>
 800bbbe:	e15e      	b.n	800be7e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	2b07      	cmp	r3, #7
 800bbc6:	f240 8153 	bls.w	800be70 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bbca:	e08f      	b.n	800bcec <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	695b      	ldr	r3, [r3, #20]
 800bbd2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	695b      	ldr	r3, [r3, #20]
 800bbda:	f003 0301 	and.w	r3, r3, #1
 800bbde:	2b01      	cmp	r3, #1
 800bbe0:	d114      	bne.n	800bc0c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbe6:	69ba      	ldr	r2, [r7, #24]
 800bbe8:	8812      	ldrh	r2, [r2, #0]
 800bbea:	b292      	uxth	r2, r2
 800bbec:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbf2:	1c9a      	adds	r2, r3, #2
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	3b01      	subs	r3, #1
 800bc02:	b29a      	uxth	r2, r3
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bc0a:	e06f      	b.n	800bcec <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	8bfa      	ldrh	r2, [r7, #30]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d924      	bls.n	800bc64 <HAL_SPI_Receive+0x29c>
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d01f      	beq.n	800bc64 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc28:	69ba      	ldr	r2, [r7, #24]
 800bc2a:	8812      	ldrh	r2, [r2, #0]
 800bc2c:	b292      	uxth	r2, r2
 800bc2e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc34:	1c9a      	adds	r2, r3, #2
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc3e:	69ba      	ldr	r2, [r7, #24]
 800bc40:	8812      	ldrh	r2, [r2, #0]
 800bc42:	b292      	uxth	r2, r2
 800bc44:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc4a:	1c9a      	adds	r2, r3, #2
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	3b02      	subs	r3, #2
 800bc5a:	b29a      	uxth	r2, r3
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bc62:	e043      	b.n	800bcec <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d119      	bne.n	800bca4 <HAL_SPI_Receive+0x2dc>
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d014      	beq.n	800bca4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc7e:	69ba      	ldr	r2, [r7, #24]
 800bc80:	8812      	ldrh	r2, [r2, #0]
 800bc82:	b292      	uxth	r2, r2
 800bc84:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc8a:	1c9a      	adds	r2, r3, #2
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	3b01      	subs	r3, #1
 800bc9a:	b29a      	uxth	r2, r3
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bca2:	e023      	b.n	800bcec <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bca4:	f7f6 fdcc 	bl	8002840 <HAL_GetTick>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	1ad3      	subs	r3, r2, r3
 800bcae:	683a      	ldr	r2, [r7, #0]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d803      	bhi.n	800bcbc <HAL_SPI_Receive+0x2f4>
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcba:	d102      	bne.n	800bcc2 <HAL_SPI_Receive+0x2fa>
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d114      	bne.n	800bcec <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bcc2:	68f8      	ldr	r0, [r7, #12]
 800bcc4:	f000 f900 	bl	800bec8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bcce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2201      	movs	r2, #1
 800bcdc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2200      	movs	r2, #0
 800bce4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bce8:	2303      	movs	r3, #3
 800bcea:	e0db      	b.n	800bea4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f47f af69 	bne.w	800bbcc <HAL_SPI_Receive+0x204>
 800bcfa:	e0c0      	b.n	800be7e <HAL_SPI_Receive+0x4b6>
 800bcfc:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	695b      	ldr	r3, [r3, #20]
 800bd06:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	695b      	ldr	r3, [r3, #20]
 800bd0e:	f003 0301 	and.w	r3, r3, #1
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d117      	bne.n	800bd46 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd22:	7812      	ldrb	r2, [r2, #0]
 800bd24:	b2d2      	uxtb	r2, r2
 800bd26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd2c:	1c5a      	adds	r2, r3, #1
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	3b01      	subs	r3, #1
 800bd3c:	b29a      	uxth	r2, r3
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bd44:	e094      	b.n	800be70 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	8bfa      	ldrh	r2, [r7, #30]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d946      	bls.n	800bde2 <HAL_SPI_Receive+0x41a>
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d041      	beq.n	800bde2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd6a:	7812      	ldrb	r2, [r2, #0]
 800bd6c:	b2d2      	uxtb	r2, r2
 800bd6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd74:	1c5a      	adds	r2, r3, #1
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd86:	7812      	ldrb	r2, [r2, #0]
 800bd88:	b2d2      	uxtb	r2, r2
 800bd8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd90:	1c5a      	adds	r2, r3, #1
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bda2:	7812      	ldrb	r2, [r2, #0]
 800bda4:	b2d2      	uxtb	r2, r2
 800bda6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdac:	1c5a      	adds	r2, r3, #1
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdbe:	7812      	ldrb	r2, [r2, #0]
 800bdc0:	b2d2      	uxtb	r2, r2
 800bdc2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdc8:	1c5a      	adds	r2, r3, #1
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	3b04      	subs	r3, #4
 800bdd8:	b29a      	uxth	r2, r3
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bde0:	e046      	b.n	800be70 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	2b03      	cmp	r3, #3
 800bdec:	d81c      	bhi.n	800be28 <HAL_SPI_Receive+0x460>
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d017      	beq.n	800be28 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be04:	7812      	ldrb	r2, [r2, #0]
 800be06:	b2d2      	uxtb	r2, r2
 800be08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be0e:	1c5a      	adds	r2, r3, #1
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	3b01      	subs	r3, #1
 800be1e:	b29a      	uxth	r2, r3
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800be26:	e023      	b.n	800be70 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be28:	f7f6 fd0a 	bl	8002840 <HAL_GetTick>
 800be2c:	4602      	mov	r2, r0
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	1ad3      	subs	r3, r2, r3
 800be32:	683a      	ldr	r2, [r7, #0]
 800be34:	429a      	cmp	r2, r3
 800be36:	d803      	bhi.n	800be40 <HAL_SPI_Receive+0x478>
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be3e:	d102      	bne.n	800be46 <HAL_SPI_Receive+0x47e>
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d114      	bne.n	800be70 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800be46:	68f8      	ldr	r0, [r7, #12]
 800be48:	f000 f83e 	bl	800bec8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2201      	movs	r2, #1
 800be60:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2200      	movs	r2, #0
 800be68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800be6c:	2303      	movs	r3, #3
 800be6e:	e019      	b.n	800bea4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be76:	b29b      	uxth	r3, r3
 800be78:	2b00      	cmp	r3, #0
 800be7a:	f47f af41 	bne.w	800bd00 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800be7e:	68f8      	ldr	r0, [r7, #12]
 800be80:	f000 f822 	bl	800bec8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2201      	movs	r2, #1
 800be88:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2200      	movs	r2, #0
 800be90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d001      	beq.n	800bea2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800be9e:	2301      	movs	r3, #1
 800bea0:	e000      	b.n	800bea4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800bea2:	2300      	movs	r3, #0
  }
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3720      	adds	r7, #32
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800beac:	b480      	push	{r7}
 800beae:	b083      	sub	sp, #12
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800beba:	b2db      	uxtb	r3, r3
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	370c      	adds	r7, #12
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr

0800bec8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	695b      	ldr	r3, [r3, #20]
 800bed6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	699a      	ldr	r2, [r3, #24]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f042 0208 	orr.w	r2, r2, #8
 800bee6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	699a      	ldr	r2, [r3, #24]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f042 0210 	orr.w	r2, r2, #16
 800bef6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f022 0201 	bic.w	r2, r2, #1
 800bf06:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	6919      	ldr	r1, [r3, #16]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681a      	ldr	r2, [r3, #0]
 800bf12:	4b3c      	ldr	r3, [pc, #240]	@ (800c004 <SPI_CloseTransfer+0x13c>)
 800bf14:	400b      	ands	r3, r1
 800bf16:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	689a      	ldr	r2, [r3, #8]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bf26:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bf2e:	b2db      	uxtb	r3, r3
 800bf30:	2b04      	cmp	r3, #4
 800bf32:	d014      	beq.n	800bf5e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f003 0320 	and.w	r3, r3, #32
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d00f      	beq.n	800bf5e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf44:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	699a      	ldr	r2, [r3, #24]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f042 0220 	orr.w	r2, r2, #32
 800bf5c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	2b03      	cmp	r3, #3
 800bf68:	d014      	beq.n	800bf94 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d00f      	beq.n	800bf94 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf7a:	f043 0204 	orr.w	r2, r3, #4
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	699a      	ldr	r2, [r3, #24]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bf92:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00f      	beq.n	800bfbe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfa4:	f043 0201 	orr.w	r2, r3, #1
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	699a      	ldr	r2, [r3, #24]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bfbc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00f      	beq.n	800bfe8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfce:	f043 0208 	orr.w	r2, r3, #8
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	699a      	ldr	r2, [r3, #24]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bfe6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800bff8:	bf00      	nop
 800bffa:	3714      	adds	r7, #20
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr
 800c004:	fffffc90 	.word	0xfffffc90

0800c008 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	60b9      	str	r1, [r7, #8]
 800c012:	603b      	str	r3, [r7, #0]
 800c014:	4613      	mov	r3, r2
 800c016:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c018:	e010      	b.n	800c03c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c01a:	f7f6 fc11 	bl	8002840 <HAL_GetTick>
 800c01e:	4602      	mov	r2, r0
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	1ad3      	subs	r3, r2, r3
 800c024:	683a      	ldr	r2, [r7, #0]
 800c026:	429a      	cmp	r2, r3
 800c028:	d803      	bhi.n	800c032 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c030:	d102      	bne.n	800c038 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d101      	bne.n	800c03c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c038:	2303      	movs	r3, #3
 800c03a:	e00f      	b.n	800c05c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	695a      	ldr	r2, [r3, #20]
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	4013      	ands	r3, r2
 800c046:	68ba      	ldr	r2, [r7, #8]
 800c048:	429a      	cmp	r2, r3
 800c04a:	bf0c      	ite	eq
 800c04c:	2301      	moveq	r3, #1
 800c04e:	2300      	movne	r3, #0
 800c050:	b2db      	uxtb	r3, r3
 800c052:	461a      	mov	r2, r3
 800c054:	79fb      	ldrb	r3, [r7, #7]
 800c056:	429a      	cmp	r2, r3
 800c058:	d0df      	beq.n	800c01a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3710      	adds	r7, #16
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c070:	095b      	lsrs	r3, r3, #5
 800c072:	3301      	adds	r3, #1
 800c074:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	68db      	ldr	r3, [r3, #12]
 800c07a:	3301      	adds	r3, #1
 800c07c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	3307      	adds	r3, #7
 800c082:	08db      	lsrs	r3, r3, #3
 800c084:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3714      	adds	r7, #20
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr

0800c09a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b082      	sub	sp, #8
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d101      	bne.n	800c0ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	e049      	b.n	800c140 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d106      	bne.n	800c0c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f7f6 f945 	bl	8002350 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2202      	movs	r2, #2
 800c0ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	3304      	adds	r3, #4
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	4610      	mov	r0, r2
 800c0da:	f000 fa65 	bl	800c5a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2201      	movs	r2, #1
 800c102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2201      	movs	r2, #1
 800c10a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2201      	movs	r2, #1
 800c112:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2201      	movs	r2, #1
 800c11a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2201      	movs	r2, #1
 800c122:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2201      	movs	r2, #1
 800c12a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2201      	movs	r2, #1
 800c132:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2201      	movs	r2, #1
 800c13a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c13e:	2300      	movs	r3, #0
}
 800c140:	4618      	mov	r0, r3
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}

0800c148 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d109      	bne.n	800c16c <HAL_TIM_PWM_Start+0x24>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	2b01      	cmp	r3, #1
 800c162:	bf14      	ite	ne
 800c164:	2301      	movne	r3, #1
 800c166:	2300      	moveq	r3, #0
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	e03c      	b.n	800c1e6 <HAL_TIM_PWM_Start+0x9e>
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	2b04      	cmp	r3, #4
 800c170:	d109      	bne.n	800c186 <HAL_TIM_PWM_Start+0x3e>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	bf14      	ite	ne
 800c17e:	2301      	movne	r3, #1
 800c180:	2300      	moveq	r3, #0
 800c182:	b2db      	uxtb	r3, r3
 800c184:	e02f      	b.n	800c1e6 <HAL_TIM_PWM_Start+0x9e>
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	2b08      	cmp	r3, #8
 800c18a:	d109      	bne.n	800c1a0 <HAL_TIM_PWM_Start+0x58>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c192:	b2db      	uxtb	r3, r3
 800c194:	2b01      	cmp	r3, #1
 800c196:	bf14      	ite	ne
 800c198:	2301      	movne	r3, #1
 800c19a:	2300      	moveq	r3, #0
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	e022      	b.n	800c1e6 <HAL_TIM_PWM_Start+0x9e>
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	2b0c      	cmp	r3, #12
 800c1a4:	d109      	bne.n	800c1ba <HAL_TIM_PWM_Start+0x72>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	bf14      	ite	ne
 800c1b2:	2301      	movne	r3, #1
 800c1b4:	2300      	moveq	r3, #0
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	e015      	b.n	800c1e6 <HAL_TIM_PWM_Start+0x9e>
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	2b10      	cmp	r3, #16
 800c1be:	d109      	bne.n	800c1d4 <HAL_TIM_PWM_Start+0x8c>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	bf14      	ite	ne
 800c1cc:	2301      	movne	r3, #1
 800c1ce:	2300      	moveq	r3, #0
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	e008      	b.n	800c1e6 <HAL_TIM_PWM_Start+0x9e>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	bf14      	ite	ne
 800c1e0:	2301      	movne	r3, #1
 800c1e2:	2300      	moveq	r3, #0
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d001      	beq.n	800c1ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e0ab      	b.n	800c346 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d104      	bne.n	800c1fe <HAL_TIM_PWM_Start+0xb6>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2202      	movs	r2, #2
 800c1f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c1fc:	e023      	b.n	800c246 <HAL_TIM_PWM_Start+0xfe>
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	2b04      	cmp	r3, #4
 800c202:	d104      	bne.n	800c20e <HAL_TIM_PWM_Start+0xc6>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2202      	movs	r2, #2
 800c208:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c20c:	e01b      	b.n	800c246 <HAL_TIM_PWM_Start+0xfe>
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	2b08      	cmp	r3, #8
 800c212:	d104      	bne.n	800c21e <HAL_TIM_PWM_Start+0xd6>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2202      	movs	r2, #2
 800c218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c21c:	e013      	b.n	800c246 <HAL_TIM_PWM_Start+0xfe>
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	2b0c      	cmp	r3, #12
 800c222:	d104      	bne.n	800c22e <HAL_TIM_PWM_Start+0xe6>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2202      	movs	r2, #2
 800c228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c22c:	e00b      	b.n	800c246 <HAL_TIM_PWM_Start+0xfe>
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	2b10      	cmp	r3, #16
 800c232:	d104      	bne.n	800c23e <HAL_TIM_PWM_Start+0xf6>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2202      	movs	r2, #2
 800c238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c23c:	e003      	b.n	800c246 <HAL_TIM_PWM_Start+0xfe>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2202      	movs	r2, #2
 800c242:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2201      	movs	r2, #1
 800c24c:	6839      	ldr	r1, [r7, #0]
 800c24e:	4618      	mov	r0, r3
 800c250:	f000 fd32 	bl	800ccb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4a3d      	ldr	r2, [pc, #244]	@ (800c350 <HAL_TIM_PWM_Start+0x208>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d013      	beq.n	800c286 <HAL_TIM_PWM_Start+0x13e>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4a3c      	ldr	r2, [pc, #240]	@ (800c354 <HAL_TIM_PWM_Start+0x20c>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d00e      	beq.n	800c286 <HAL_TIM_PWM_Start+0x13e>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4a3a      	ldr	r2, [pc, #232]	@ (800c358 <HAL_TIM_PWM_Start+0x210>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d009      	beq.n	800c286 <HAL_TIM_PWM_Start+0x13e>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4a39      	ldr	r2, [pc, #228]	@ (800c35c <HAL_TIM_PWM_Start+0x214>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d004      	beq.n	800c286 <HAL_TIM_PWM_Start+0x13e>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a37      	ldr	r2, [pc, #220]	@ (800c360 <HAL_TIM_PWM_Start+0x218>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d101      	bne.n	800c28a <HAL_TIM_PWM_Start+0x142>
 800c286:	2301      	movs	r3, #1
 800c288:	e000      	b.n	800c28c <HAL_TIM_PWM_Start+0x144>
 800c28a:	2300      	movs	r3, #0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d007      	beq.n	800c2a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c29e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a2a      	ldr	r2, [pc, #168]	@ (800c350 <HAL_TIM_PWM_Start+0x208>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d02c      	beq.n	800c304 <HAL_TIM_PWM_Start+0x1bc>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2b2:	d027      	beq.n	800c304 <HAL_TIM_PWM_Start+0x1bc>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4a2a      	ldr	r2, [pc, #168]	@ (800c364 <HAL_TIM_PWM_Start+0x21c>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d022      	beq.n	800c304 <HAL_TIM_PWM_Start+0x1bc>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	4a29      	ldr	r2, [pc, #164]	@ (800c368 <HAL_TIM_PWM_Start+0x220>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d01d      	beq.n	800c304 <HAL_TIM_PWM_Start+0x1bc>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a27      	ldr	r2, [pc, #156]	@ (800c36c <HAL_TIM_PWM_Start+0x224>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d018      	beq.n	800c304 <HAL_TIM_PWM_Start+0x1bc>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4a1f      	ldr	r2, [pc, #124]	@ (800c354 <HAL_TIM_PWM_Start+0x20c>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d013      	beq.n	800c304 <HAL_TIM_PWM_Start+0x1bc>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a23      	ldr	r2, [pc, #140]	@ (800c370 <HAL_TIM_PWM_Start+0x228>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d00e      	beq.n	800c304 <HAL_TIM_PWM_Start+0x1bc>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a1b      	ldr	r2, [pc, #108]	@ (800c358 <HAL_TIM_PWM_Start+0x210>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d009      	beq.n	800c304 <HAL_TIM_PWM_Start+0x1bc>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4a1f      	ldr	r2, [pc, #124]	@ (800c374 <HAL_TIM_PWM_Start+0x22c>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d004      	beq.n	800c304 <HAL_TIM_PWM_Start+0x1bc>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	4a1e      	ldr	r2, [pc, #120]	@ (800c378 <HAL_TIM_PWM_Start+0x230>)
 800c300:	4293      	cmp	r3, r2
 800c302:	d115      	bne.n	800c330 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	689a      	ldr	r2, [r3, #8]
 800c30a:	4b1c      	ldr	r3, [pc, #112]	@ (800c37c <HAL_TIM_PWM_Start+0x234>)
 800c30c:	4013      	ands	r3, r2
 800c30e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2b06      	cmp	r3, #6
 800c314:	d015      	beq.n	800c342 <HAL_TIM_PWM_Start+0x1fa>
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c31c:	d011      	beq.n	800c342 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	681a      	ldr	r2, [r3, #0]
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f042 0201 	orr.w	r2, r2, #1
 800c32c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c32e:	e008      	b.n	800c342 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f042 0201 	orr.w	r2, r2, #1
 800c33e:	601a      	str	r2, [r3, #0]
 800c340:	e000      	b.n	800c344 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c342:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c344:	2300      	movs	r3, #0
}
 800c346:	4618      	mov	r0, r3
 800c348:	3710      	adds	r7, #16
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	40010000 	.word	0x40010000
 800c354:	40010400 	.word	0x40010400
 800c358:	40014000 	.word	0x40014000
 800c35c:	40014400 	.word	0x40014400
 800c360:	40014800 	.word	0x40014800
 800c364:	40000400 	.word	0x40000400
 800c368:	40000800 	.word	0x40000800
 800c36c:	40000c00 	.word	0x40000c00
 800c370:	40001800 	.word	0x40001800
 800c374:	4000e000 	.word	0x4000e000
 800c378:	4000e400 	.word	0x4000e400
 800c37c:	00010007 	.word	0x00010007

0800c380 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b086      	sub	sp, #24
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c38c:	2300      	movs	r3, #0
 800c38e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c396:	2b01      	cmp	r3, #1
 800c398:	d101      	bne.n	800c39e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c39a:	2302      	movs	r3, #2
 800c39c:	e0ff      	b.n	800c59e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2b14      	cmp	r3, #20
 800c3aa:	f200 80f0 	bhi.w	800c58e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c3ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c3b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b4:	0800c409 	.word	0x0800c409
 800c3b8:	0800c58f 	.word	0x0800c58f
 800c3bc:	0800c58f 	.word	0x0800c58f
 800c3c0:	0800c58f 	.word	0x0800c58f
 800c3c4:	0800c449 	.word	0x0800c449
 800c3c8:	0800c58f 	.word	0x0800c58f
 800c3cc:	0800c58f 	.word	0x0800c58f
 800c3d0:	0800c58f 	.word	0x0800c58f
 800c3d4:	0800c48b 	.word	0x0800c48b
 800c3d8:	0800c58f 	.word	0x0800c58f
 800c3dc:	0800c58f 	.word	0x0800c58f
 800c3e0:	0800c58f 	.word	0x0800c58f
 800c3e4:	0800c4cb 	.word	0x0800c4cb
 800c3e8:	0800c58f 	.word	0x0800c58f
 800c3ec:	0800c58f 	.word	0x0800c58f
 800c3f0:	0800c58f 	.word	0x0800c58f
 800c3f4:	0800c50d 	.word	0x0800c50d
 800c3f8:	0800c58f 	.word	0x0800c58f
 800c3fc:	0800c58f 	.word	0x0800c58f
 800c400:	0800c58f 	.word	0x0800c58f
 800c404:	0800c54d 	.word	0x0800c54d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	68b9      	ldr	r1, [r7, #8]
 800c40e:	4618      	mov	r0, r3
 800c410:	f000 f97c 	bl	800c70c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	699a      	ldr	r2, [r3, #24]
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f042 0208 	orr.w	r2, r2, #8
 800c422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	699a      	ldr	r2, [r3, #24]
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f022 0204 	bic.w	r2, r2, #4
 800c432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	6999      	ldr	r1, [r3, #24]
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	691a      	ldr	r2, [r3, #16]
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	430a      	orrs	r2, r1
 800c444:	619a      	str	r2, [r3, #24]
      break;
 800c446:	e0a5      	b.n	800c594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	68b9      	ldr	r1, [r7, #8]
 800c44e:	4618      	mov	r0, r3
 800c450:	f000 f9ec 	bl	800c82c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	699a      	ldr	r2, [r3, #24]
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	699a      	ldr	r2, [r3, #24]
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	6999      	ldr	r1, [r3, #24]
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	691b      	ldr	r3, [r3, #16]
 800c47e:	021a      	lsls	r2, r3, #8
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	430a      	orrs	r2, r1
 800c486:	619a      	str	r2, [r3, #24]
      break;
 800c488:	e084      	b.n	800c594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	68b9      	ldr	r1, [r7, #8]
 800c490:	4618      	mov	r0, r3
 800c492:	f000 fa55 	bl	800c940 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	69da      	ldr	r2, [r3, #28]
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f042 0208 	orr.w	r2, r2, #8
 800c4a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	69da      	ldr	r2, [r3, #28]
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f022 0204 	bic.w	r2, r2, #4
 800c4b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	69d9      	ldr	r1, [r3, #28]
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	691a      	ldr	r2, [r3, #16]
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	430a      	orrs	r2, r1
 800c4c6:	61da      	str	r2, [r3, #28]
      break;
 800c4c8:	e064      	b.n	800c594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	68b9      	ldr	r1, [r7, #8]
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f000 fabd 	bl	800ca50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	69da      	ldr	r2, [r3, #28]
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c4e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	69da      	ldr	r2, [r3, #28]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c4f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	69d9      	ldr	r1, [r3, #28]
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	691b      	ldr	r3, [r3, #16]
 800c500:	021a      	lsls	r2, r3, #8
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	430a      	orrs	r2, r1
 800c508:	61da      	str	r2, [r3, #28]
      break;
 800c50a:	e043      	b.n	800c594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	68b9      	ldr	r1, [r7, #8]
 800c512:	4618      	mov	r0, r3
 800c514:	f000 fb06 	bl	800cb24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f042 0208 	orr.w	r2, r2, #8
 800c526:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f022 0204 	bic.w	r2, r2, #4
 800c536:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	691a      	ldr	r2, [r3, #16]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	430a      	orrs	r2, r1
 800c548:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c54a:	e023      	b.n	800c594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	68b9      	ldr	r1, [r7, #8]
 800c552:	4618      	mov	r0, r3
 800c554:	f000 fb4a 	bl	800cbec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c566:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c576:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	691b      	ldr	r3, [r3, #16]
 800c582:	021a      	lsls	r2, r3, #8
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	430a      	orrs	r2, r1
 800c58a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c58c:	e002      	b.n	800c594 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c58e:	2301      	movs	r3, #1
 800c590:	75fb      	strb	r3, [r7, #23]
      break;
 800c592:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2200      	movs	r2, #0
 800c598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c59c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3718      	adds	r7, #24
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop

0800c5a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b085      	sub	sp, #20
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	4a4a      	ldr	r2, [pc, #296]	@ (800c6e4 <TIM_Base_SetConfig+0x13c>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d013      	beq.n	800c5e8 <TIM_Base_SetConfig+0x40>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5c6:	d00f      	beq.n	800c5e8 <TIM_Base_SetConfig+0x40>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	4a47      	ldr	r2, [pc, #284]	@ (800c6e8 <TIM_Base_SetConfig+0x140>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d00b      	beq.n	800c5e8 <TIM_Base_SetConfig+0x40>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	4a46      	ldr	r2, [pc, #280]	@ (800c6ec <TIM_Base_SetConfig+0x144>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d007      	beq.n	800c5e8 <TIM_Base_SetConfig+0x40>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	4a45      	ldr	r2, [pc, #276]	@ (800c6f0 <TIM_Base_SetConfig+0x148>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d003      	beq.n	800c5e8 <TIM_Base_SetConfig+0x40>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4a44      	ldr	r2, [pc, #272]	@ (800c6f4 <TIM_Base_SetConfig+0x14c>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d108      	bne.n	800c5fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	68fa      	ldr	r2, [r7, #12]
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	4a39      	ldr	r2, [pc, #228]	@ (800c6e4 <TIM_Base_SetConfig+0x13c>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d027      	beq.n	800c652 <TIM_Base_SetConfig+0xaa>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c608:	d023      	beq.n	800c652 <TIM_Base_SetConfig+0xaa>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	4a36      	ldr	r2, [pc, #216]	@ (800c6e8 <TIM_Base_SetConfig+0x140>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d01f      	beq.n	800c652 <TIM_Base_SetConfig+0xaa>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	4a35      	ldr	r2, [pc, #212]	@ (800c6ec <TIM_Base_SetConfig+0x144>)
 800c616:	4293      	cmp	r3, r2
 800c618:	d01b      	beq.n	800c652 <TIM_Base_SetConfig+0xaa>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	4a34      	ldr	r2, [pc, #208]	@ (800c6f0 <TIM_Base_SetConfig+0x148>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d017      	beq.n	800c652 <TIM_Base_SetConfig+0xaa>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	4a33      	ldr	r2, [pc, #204]	@ (800c6f4 <TIM_Base_SetConfig+0x14c>)
 800c626:	4293      	cmp	r3, r2
 800c628:	d013      	beq.n	800c652 <TIM_Base_SetConfig+0xaa>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	4a32      	ldr	r2, [pc, #200]	@ (800c6f8 <TIM_Base_SetConfig+0x150>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d00f      	beq.n	800c652 <TIM_Base_SetConfig+0xaa>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4a31      	ldr	r2, [pc, #196]	@ (800c6fc <TIM_Base_SetConfig+0x154>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d00b      	beq.n	800c652 <TIM_Base_SetConfig+0xaa>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4a30      	ldr	r2, [pc, #192]	@ (800c700 <TIM_Base_SetConfig+0x158>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d007      	beq.n	800c652 <TIM_Base_SetConfig+0xaa>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	4a2f      	ldr	r2, [pc, #188]	@ (800c704 <TIM_Base_SetConfig+0x15c>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d003      	beq.n	800c652 <TIM_Base_SetConfig+0xaa>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	4a2e      	ldr	r2, [pc, #184]	@ (800c708 <TIM_Base_SetConfig+0x160>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d108      	bne.n	800c664 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	68db      	ldr	r3, [r3, #12]
 800c65e:	68fa      	ldr	r2, [r7, #12]
 800c660:	4313      	orrs	r3, r2
 800c662:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	695b      	ldr	r3, [r3, #20]
 800c66e:	4313      	orrs	r3, r2
 800c670:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	68fa      	ldr	r2, [r7, #12]
 800c676:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	689a      	ldr	r2, [r3, #8]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	681a      	ldr	r2, [r3, #0]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	4a16      	ldr	r2, [pc, #88]	@ (800c6e4 <TIM_Base_SetConfig+0x13c>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d00f      	beq.n	800c6b0 <TIM_Base_SetConfig+0x108>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	4a18      	ldr	r2, [pc, #96]	@ (800c6f4 <TIM_Base_SetConfig+0x14c>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d00b      	beq.n	800c6b0 <TIM_Base_SetConfig+0x108>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	4a17      	ldr	r2, [pc, #92]	@ (800c6f8 <TIM_Base_SetConfig+0x150>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d007      	beq.n	800c6b0 <TIM_Base_SetConfig+0x108>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	4a16      	ldr	r2, [pc, #88]	@ (800c6fc <TIM_Base_SetConfig+0x154>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d003      	beq.n	800c6b0 <TIM_Base_SetConfig+0x108>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	4a15      	ldr	r2, [pc, #84]	@ (800c700 <TIM_Base_SetConfig+0x158>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d103      	bne.n	800c6b8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	691a      	ldr	r2, [r3, #16]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	691b      	ldr	r3, [r3, #16]
 800c6c2:	f003 0301 	and.w	r3, r3, #1
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	d105      	bne.n	800c6d6 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	691b      	ldr	r3, [r3, #16]
 800c6ce:	f023 0201 	bic.w	r2, r3, #1
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	611a      	str	r2, [r3, #16]
  }
}
 800c6d6:	bf00      	nop
 800c6d8:	3714      	adds	r7, #20
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e0:	4770      	bx	lr
 800c6e2:	bf00      	nop
 800c6e4:	40010000 	.word	0x40010000
 800c6e8:	40000400 	.word	0x40000400
 800c6ec:	40000800 	.word	0x40000800
 800c6f0:	40000c00 	.word	0x40000c00
 800c6f4:	40010400 	.word	0x40010400
 800c6f8:	40014000 	.word	0x40014000
 800c6fc:	40014400 	.word	0x40014400
 800c700:	40014800 	.word	0x40014800
 800c704:	4000e000 	.word	0x4000e000
 800c708:	4000e400 	.word	0x4000e400

0800c70c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b087      	sub	sp, #28
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6a1b      	ldr	r3, [r3, #32]
 800c71a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6a1b      	ldr	r3, [r3, #32]
 800c720:	f023 0201 	bic.w	r2, r3, #1
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	699b      	ldr	r3, [r3, #24]
 800c732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c734:	68fa      	ldr	r2, [r7, #12]
 800c736:	4b37      	ldr	r3, [pc, #220]	@ (800c814 <TIM_OC1_SetConfig+0x108>)
 800c738:	4013      	ands	r3, r2
 800c73a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f023 0303 	bic.w	r3, r3, #3
 800c742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	4313      	orrs	r3, r2
 800c74c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	f023 0302 	bic.w	r3, r3, #2
 800c754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	689b      	ldr	r3, [r3, #8]
 800c75a:	697a      	ldr	r2, [r7, #20]
 800c75c:	4313      	orrs	r3, r2
 800c75e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	4a2d      	ldr	r2, [pc, #180]	@ (800c818 <TIM_OC1_SetConfig+0x10c>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d00f      	beq.n	800c788 <TIM_OC1_SetConfig+0x7c>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	4a2c      	ldr	r2, [pc, #176]	@ (800c81c <TIM_OC1_SetConfig+0x110>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d00b      	beq.n	800c788 <TIM_OC1_SetConfig+0x7c>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	4a2b      	ldr	r2, [pc, #172]	@ (800c820 <TIM_OC1_SetConfig+0x114>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d007      	beq.n	800c788 <TIM_OC1_SetConfig+0x7c>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	4a2a      	ldr	r2, [pc, #168]	@ (800c824 <TIM_OC1_SetConfig+0x118>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d003      	beq.n	800c788 <TIM_OC1_SetConfig+0x7c>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	4a29      	ldr	r2, [pc, #164]	@ (800c828 <TIM_OC1_SetConfig+0x11c>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d10c      	bne.n	800c7a2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	f023 0308 	bic.w	r3, r3, #8
 800c78e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	697a      	ldr	r2, [r7, #20]
 800c796:	4313      	orrs	r3, r2
 800c798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	f023 0304 	bic.w	r3, r3, #4
 800c7a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	4a1c      	ldr	r2, [pc, #112]	@ (800c818 <TIM_OC1_SetConfig+0x10c>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d00f      	beq.n	800c7ca <TIM_OC1_SetConfig+0xbe>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	4a1b      	ldr	r2, [pc, #108]	@ (800c81c <TIM_OC1_SetConfig+0x110>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d00b      	beq.n	800c7ca <TIM_OC1_SetConfig+0xbe>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	4a1a      	ldr	r2, [pc, #104]	@ (800c820 <TIM_OC1_SetConfig+0x114>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d007      	beq.n	800c7ca <TIM_OC1_SetConfig+0xbe>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	4a19      	ldr	r2, [pc, #100]	@ (800c824 <TIM_OC1_SetConfig+0x118>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d003      	beq.n	800c7ca <TIM_OC1_SetConfig+0xbe>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	4a18      	ldr	r2, [pc, #96]	@ (800c828 <TIM_OC1_SetConfig+0x11c>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d111      	bne.n	800c7ee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c7d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c7d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	695b      	ldr	r3, [r3, #20]
 800c7de:	693a      	ldr	r2, [r7, #16]
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	699b      	ldr	r3, [r3, #24]
 800c7e8:	693a      	ldr	r2, [r7, #16]
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	693a      	ldr	r2, [r7, #16]
 800c7f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	68fa      	ldr	r2, [r7, #12]
 800c7f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	685a      	ldr	r2, [r3, #4]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	697a      	ldr	r2, [r7, #20]
 800c806:	621a      	str	r2, [r3, #32]
}
 800c808:	bf00      	nop
 800c80a:	371c      	adds	r7, #28
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr
 800c814:	fffeff8f 	.word	0xfffeff8f
 800c818:	40010000 	.word	0x40010000
 800c81c:	40010400 	.word	0x40010400
 800c820:	40014000 	.word	0x40014000
 800c824:	40014400 	.word	0x40014400
 800c828:	40014800 	.word	0x40014800

0800c82c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b087      	sub	sp, #28
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6a1b      	ldr	r3, [r3, #32]
 800c83a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6a1b      	ldr	r3, [r3, #32]
 800c840:	f023 0210 	bic.w	r2, r3, #16
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	699b      	ldr	r3, [r3, #24]
 800c852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c854:	68fa      	ldr	r2, [r7, #12]
 800c856:	4b34      	ldr	r3, [pc, #208]	@ (800c928 <TIM_OC2_SetConfig+0xfc>)
 800c858:	4013      	ands	r3, r2
 800c85a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	021b      	lsls	r3, r3, #8
 800c86a:	68fa      	ldr	r2, [r7, #12]
 800c86c:	4313      	orrs	r3, r2
 800c86e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	f023 0320 	bic.w	r3, r3, #32
 800c876:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	689b      	ldr	r3, [r3, #8]
 800c87c:	011b      	lsls	r3, r3, #4
 800c87e:	697a      	ldr	r2, [r7, #20]
 800c880:	4313      	orrs	r3, r2
 800c882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	4a29      	ldr	r2, [pc, #164]	@ (800c92c <TIM_OC2_SetConfig+0x100>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d003      	beq.n	800c894 <TIM_OC2_SetConfig+0x68>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	4a28      	ldr	r2, [pc, #160]	@ (800c930 <TIM_OC2_SetConfig+0x104>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d10d      	bne.n	800c8b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c89a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	68db      	ldr	r3, [r3, #12]
 800c8a0:	011b      	lsls	r3, r3, #4
 800c8a2:	697a      	ldr	r2, [r7, #20]
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	4a1e      	ldr	r2, [pc, #120]	@ (800c92c <TIM_OC2_SetConfig+0x100>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d00f      	beq.n	800c8d8 <TIM_OC2_SetConfig+0xac>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	4a1d      	ldr	r2, [pc, #116]	@ (800c930 <TIM_OC2_SetConfig+0x104>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d00b      	beq.n	800c8d8 <TIM_OC2_SetConfig+0xac>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4a1c      	ldr	r2, [pc, #112]	@ (800c934 <TIM_OC2_SetConfig+0x108>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d007      	beq.n	800c8d8 <TIM_OC2_SetConfig+0xac>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	4a1b      	ldr	r2, [pc, #108]	@ (800c938 <TIM_OC2_SetConfig+0x10c>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d003      	beq.n	800c8d8 <TIM_OC2_SetConfig+0xac>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4a1a      	ldr	r2, [pc, #104]	@ (800c93c <TIM_OC2_SetConfig+0x110>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d113      	bne.n	800c900 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c8de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c8e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	695b      	ldr	r3, [r3, #20]
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	693a      	ldr	r2, [r7, #16]
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	699b      	ldr	r3, [r3, #24]
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	693a      	ldr	r2, [r7, #16]
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	693a      	ldr	r2, [r7, #16]
 800c904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	68fa      	ldr	r2, [r7, #12]
 800c90a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	685a      	ldr	r2, [r3, #4]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	697a      	ldr	r2, [r7, #20]
 800c918:	621a      	str	r2, [r3, #32]
}
 800c91a:	bf00      	nop
 800c91c:	371c      	adds	r7, #28
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop
 800c928:	feff8fff 	.word	0xfeff8fff
 800c92c:	40010000 	.word	0x40010000
 800c930:	40010400 	.word	0x40010400
 800c934:	40014000 	.word	0x40014000
 800c938:	40014400 	.word	0x40014400
 800c93c:	40014800 	.word	0x40014800

0800c940 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c940:	b480      	push	{r7}
 800c942:	b087      	sub	sp, #28
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6a1b      	ldr	r3, [r3, #32]
 800c94e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6a1b      	ldr	r3, [r3, #32]
 800c954:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	69db      	ldr	r3, [r3, #28]
 800c966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c968:	68fa      	ldr	r2, [r7, #12]
 800c96a:	4b33      	ldr	r3, [pc, #204]	@ (800ca38 <TIM_OC3_SetConfig+0xf8>)
 800c96c:	4013      	ands	r3, r2
 800c96e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f023 0303 	bic.w	r3, r3, #3
 800c976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	68fa      	ldr	r2, [r7, #12]
 800c97e:	4313      	orrs	r3, r2
 800c980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	689b      	ldr	r3, [r3, #8]
 800c98e:	021b      	lsls	r3, r3, #8
 800c990:	697a      	ldr	r2, [r7, #20]
 800c992:	4313      	orrs	r3, r2
 800c994:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	4a28      	ldr	r2, [pc, #160]	@ (800ca3c <TIM_OC3_SetConfig+0xfc>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d003      	beq.n	800c9a6 <TIM_OC3_SetConfig+0x66>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	4a27      	ldr	r2, [pc, #156]	@ (800ca40 <TIM_OC3_SetConfig+0x100>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d10d      	bne.n	800c9c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c9ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	68db      	ldr	r3, [r3, #12]
 800c9b2:	021b      	lsls	r3, r3, #8
 800c9b4:	697a      	ldr	r2, [r7, #20]
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c9c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	4a1d      	ldr	r2, [pc, #116]	@ (800ca3c <TIM_OC3_SetConfig+0xfc>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d00f      	beq.n	800c9ea <TIM_OC3_SetConfig+0xaa>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4a1c      	ldr	r2, [pc, #112]	@ (800ca40 <TIM_OC3_SetConfig+0x100>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d00b      	beq.n	800c9ea <TIM_OC3_SetConfig+0xaa>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	4a1b      	ldr	r2, [pc, #108]	@ (800ca44 <TIM_OC3_SetConfig+0x104>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d007      	beq.n	800c9ea <TIM_OC3_SetConfig+0xaa>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4a1a      	ldr	r2, [pc, #104]	@ (800ca48 <TIM_OC3_SetConfig+0x108>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d003      	beq.n	800c9ea <TIM_OC3_SetConfig+0xaa>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	4a19      	ldr	r2, [pc, #100]	@ (800ca4c <TIM_OC3_SetConfig+0x10c>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d113      	bne.n	800ca12 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c9f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c9f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	695b      	ldr	r3, [r3, #20]
 800c9fe:	011b      	lsls	r3, r3, #4
 800ca00:	693a      	ldr	r2, [r7, #16]
 800ca02:	4313      	orrs	r3, r2
 800ca04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	699b      	ldr	r3, [r3, #24]
 800ca0a:	011b      	lsls	r3, r3, #4
 800ca0c:	693a      	ldr	r2, [r7, #16]
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	693a      	ldr	r2, [r7, #16]
 800ca16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	68fa      	ldr	r2, [r7, #12]
 800ca1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	685a      	ldr	r2, [r3, #4]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	697a      	ldr	r2, [r7, #20]
 800ca2a:	621a      	str	r2, [r3, #32]
}
 800ca2c:	bf00      	nop
 800ca2e:	371c      	adds	r7, #28
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr
 800ca38:	fffeff8f 	.word	0xfffeff8f
 800ca3c:	40010000 	.word	0x40010000
 800ca40:	40010400 	.word	0x40010400
 800ca44:	40014000 	.word	0x40014000
 800ca48:	40014400 	.word	0x40014400
 800ca4c:	40014800 	.word	0x40014800

0800ca50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b087      	sub	sp, #28
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
 800ca58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6a1b      	ldr	r3, [r3, #32]
 800ca5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6a1b      	ldr	r3, [r3, #32]
 800ca64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	69db      	ldr	r3, [r3, #28]
 800ca76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ca78:	68fa      	ldr	r2, [r7, #12]
 800ca7a:	4b24      	ldr	r3, [pc, #144]	@ (800cb0c <TIM_OC4_SetConfig+0xbc>)
 800ca7c:	4013      	ands	r3, r2
 800ca7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ca86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	021b      	lsls	r3, r3, #8
 800ca8e:	68fa      	ldr	r2, [r7, #12]
 800ca90:	4313      	orrs	r3, r2
 800ca92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ca9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	689b      	ldr	r3, [r3, #8]
 800caa0:	031b      	lsls	r3, r3, #12
 800caa2:	693a      	ldr	r2, [r7, #16]
 800caa4:	4313      	orrs	r3, r2
 800caa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	4a19      	ldr	r2, [pc, #100]	@ (800cb10 <TIM_OC4_SetConfig+0xc0>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d00f      	beq.n	800cad0 <TIM_OC4_SetConfig+0x80>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	4a18      	ldr	r2, [pc, #96]	@ (800cb14 <TIM_OC4_SetConfig+0xc4>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d00b      	beq.n	800cad0 <TIM_OC4_SetConfig+0x80>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	4a17      	ldr	r2, [pc, #92]	@ (800cb18 <TIM_OC4_SetConfig+0xc8>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d007      	beq.n	800cad0 <TIM_OC4_SetConfig+0x80>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	4a16      	ldr	r2, [pc, #88]	@ (800cb1c <TIM_OC4_SetConfig+0xcc>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d003      	beq.n	800cad0 <TIM_OC4_SetConfig+0x80>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	4a15      	ldr	r2, [pc, #84]	@ (800cb20 <TIM_OC4_SetConfig+0xd0>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d109      	bne.n	800cae4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cad6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	695b      	ldr	r3, [r3, #20]
 800cadc:	019b      	lsls	r3, r3, #6
 800cade:	697a      	ldr	r2, [r7, #20]
 800cae0:	4313      	orrs	r3, r2
 800cae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	697a      	ldr	r2, [r7, #20]
 800cae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	68fa      	ldr	r2, [r7, #12]
 800caee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	685a      	ldr	r2, [r3, #4]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	693a      	ldr	r2, [r7, #16]
 800cafc:	621a      	str	r2, [r3, #32]
}
 800cafe:	bf00      	nop
 800cb00:	371c      	adds	r7, #28
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr
 800cb0a:	bf00      	nop
 800cb0c:	feff8fff 	.word	0xfeff8fff
 800cb10:	40010000 	.word	0x40010000
 800cb14:	40010400 	.word	0x40010400
 800cb18:	40014000 	.word	0x40014000
 800cb1c:	40014400 	.word	0x40014400
 800cb20:	40014800 	.word	0x40014800

0800cb24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b087      	sub	sp, #28
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6a1b      	ldr	r3, [r3, #32]
 800cb32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6a1b      	ldr	r3, [r3, #32]
 800cb38:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	685b      	ldr	r3, [r3, #4]
 800cb44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cb4c:	68fa      	ldr	r2, [r7, #12]
 800cb4e:	4b21      	ldr	r3, [pc, #132]	@ (800cbd4 <TIM_OC5_SetConfig+0xb0>)
 800cb50:	4013      	ands	r3, r2
 800cb52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	68fa      	ldr	r2, [r7, #12]
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cb64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	689b      	ldr	r3, [r3, #8]
 800cb6a:	041b      	lsls	r3, r3, #16
 800cb6c:	693a      	ldr	r2, [r7, #16]
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	4a18      	ldr	r2, [pc, #96]	@ (800cbd8 <TIM_OC5_SetConfig+0xb4>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d00f      	beq.n	800cb9a <TIM_OC5_SetConfig+0x76>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	4a17      	ldr	r2, [pc, #92]	@ (800cbdc <TIM_OC5_SetConfig+0xb8>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d00b      	beq.n	800cb9a <TIM_OC5_SetConfig+0x76>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	4a16      	ldr	r2, [pc, #88]	@ (800cbe0 <TIM_OC5_SetConfig+0xbc>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d007      	beq.n	800cb9a <TIM_OC5_SetConfig+0x76>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	4a15      	ldr	r2, [pc, #84]	@ (800cbe4 <TIM_OC5_SetConfig+0xc0>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d003      	beq.n	800cb9a <TIM_OC5_SetConfig+0x76>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	4a14      	ldr	r2, [pc, #80]	@ (800cbe8 <TIM_OC5_SetConfig+0xc4>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d109      	bne.n	800cbae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cba0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	695b      	ldr	r3, [r3, #20]
 800cba6:	021b      	lsls	r3, r3, #8
 800cba8:	697a      	ldr	r2, [r7, #20]
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	697a      	ldr	r2, [r7, #20]
 800cbb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	68fa      	ldr	r2, [r7, #12]
 800cbb8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	685a      	ldr	r2, [r3, #4]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	693a      	ldr	r2, [r7, #16]
 800cbc6:	621a      	str	r2, [r3, #32]
}
 800cbc8:	bf00      	nop
 800cbca:	371c      	adds	r7, #28
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr
 800cbd4:	fffeff8f 	.word	0xfffeff8f
 800cbd8:	40010000 	.word	0x40010000
 800cbdc:	40010400 	.word	0x40010400
 800cbe0:	40014000 	.word	0x40014000
 800cbe4:	40014400 	.word	0x40014400
 800cbe8:	40014800 	.word	0x40014800

0800cbec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b087      	sub	sp, #28
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6a1b      	ldr	r3, [r3, #32]
 800cbfa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6a1b      	ldr	r3, [r3, #32]
 800cc00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cc14:	68fa      	ldr	r2, [r7, #12]
 800cc16:	4b22      	ldr	r3, [pc, #136]	@ (800cca0 <TIM_OC6_SetConfig+0xb4>)
 800cc18:	4013      	ands	r3, r2
 800cc1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	021b      	lsls	r3, r3, #8
 800cc22:	68fa      	ldr	r2, [r7, #12]
 800cc24:	4313      	orrs	r3, r2
 800cc26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cc2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	689b      	ldr	r3, [r3, #8]
 800cc34:	051b      	lsls	r3, r3, #20
 800cc36:	693a      	ldr	r2, [r7, #16]
 800cc38:	4313      	orrs	r3, r2
 800cc3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	4a19      	ldr	r2, [pc, #100]	@ (800cca4 <TIM_OC6_SetConfig+0xb8>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d00f      	beq.n	800cc64 <TIM_OC6_SetConfig+0x78>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	4a18      	ldr	r2, [pc, #96]	@ (800cca8 <TIM_OC6_SetConfig+0xbc>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d00b      	beq.n	800cc64 <TIM_OC6_SetConfig+0x78>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	4a17      	ldr	r2, [pc, #92]	@ (800ccac <TIM_OC6_SetConfig+0xc0>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d007      	beq.n	800cc64 <TIM_OC6_SetConfig+0x78>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	4a16      	ldr	r2, [pc, #88]	@ (800ccb0 <TIM_OC6_SetConfig+0xc4>)
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d003      	beq.n	800cc64 <TIM_OC6_SetConfig+0x78>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	4a15      	ldr	r2, [pc, #84]	@ (800ccb4 <TIM_OC6_SetConfig+0xc8>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d109      	bne.n	800cc78 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cc6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	695b      	ldr	r3, [r3, #20]
 800cc70:	029b      	lsls	r3, r3, #10
 800cc72:	697a      	ldr	r2, [r7, #20]
 800cc74:	4313      	orrs	r3, r2
 800cc76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	697a      	ldr	r2, [r7, #20]
 800cc7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	68fa      	ldr	r2, [r7, #12]
 800cc82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	685a      	ldr	r2, [r3, #4]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	693a      	ldr	r2, [r7, #16]
 800cc90:	621a      	str	r2, [r3, #32]
}
 800cc92:	bf00      	nop
 800cc94:	371c      	adds	r7, #28
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop
 800cca0:	feff8fff 	.word	0xfeff8fff
 800cca4:	40010000 	.word	0x40010000
 800cca8:	40010400 	.word	0x40010400
 800ccac:	40014000 	.word	0x40014000
 800ccb0:	40014400 	.word	0x40014400
 800ccb4:	40014800 	.word	0x40014800

0800ccb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b087      	sub	sp, #28
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	60f8      	str	r0, [r7, #12]
 800ccc0:	60b9      	str	r1, [r7, #8]
 800ccc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	f003 031f 	and.w	r3, r3, #31
 800ccca:	2201      	movs	r2, #1
 800cccc:	fa02 f303 	lsl.w	r3, r2, r3
 800ccd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	6a1a      	ldr	r2, [r3, #32]
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	43db      	mvns	r3, r3
 800ccda:	401a      	ands	r2, r3
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	6a1a      	ldr	r2, [r3, #32]
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	f003 031f 	and.w	r3, r3, #31
 800ccea:	6879      	ldr	r1, [r7, #4]
 800ccec:	fa01 f303 	lsl.w	r3, r1, r3
 800ccf0:	431a      	orrs	r2, r3
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	621a      	str	r2, [r3, #32]
}
 800ccf6:	bf00      	nop
 800ccf8:	371c      	adds	r7, #28
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr
	...

0800cd04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b085      	sub	sp, #20
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d101      	bne.n	800cd1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd18:	2302      	movs	r3, #2
 800cd1a:	e077      	b.n	800ce0c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2201      	movs	r2, #1
 800cd20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2202      	movs	r2, #2
 800cd28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	689b      	ldr	r3, [r3, #8]
 800cd3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a35      	ldr	r2, [pc, #212]	@ (800ce18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d004      	beq.n	800cd50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4a34      	ldr	r2, [pc, #208]	@ (800ce1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d108      	bne.n	800cd62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cd56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	4313      	orrs	r3, r2
 800cd60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	68fa      	ldr	r2, [r7, #12]
 800cd70:	4313      	orrs	r3, r2
 800cd72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	68fa      	ldr	r2, [r7, #12]
 800cd7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	4a25      	ldr	r2, [pc, #148]	@ (800ce18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d02c      	beq.n	800cde0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd8e:	d027      	beq.n	800cde0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a22      	ldr	r2, [pc, #136]	@ (800ce20 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d022      	beq.n	800cde0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	4a21      	ldr	r2, [pc, #132]	@ (800ce24 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d01d      	beq.n	800cde0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4a1f      	ldr	r2, [pc, #124]	@ (800ce28 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d018      	beq.n	800cde0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4a1a      	ldr	r2, [pc, #104]	@ (800ce1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	d013      	beq.n	800cde0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4a1b      	ldr	r2, [pc, #108]	@ (800ce2c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d00e      	beq.n	800cde0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4a1a      	ldr	r2, [pc, #104]	@ (800ce30 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	d009      	beq.n	800cde0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4a18      	ldr	r2, [pc, #96]	@ (800ce34 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d004      	beq.n	800cde0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4a17      	ldr	r2, [pc, #92]	@ (800ce38 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d10c      	bne.n	800cdfa <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cde6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	689b      	ldr	r3, [r3, #8]
 800cdec:	68ba      	ldr	r2, [r7, #8]
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	68ba      	ldr	r2, [r7, #8]
 800cdf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2200      	movs	r2, #0
 800ce06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ce0a:	2300      	movs	r3, #0
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3714      	adds	r7, #20
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr
 800ce18:	40010000 	.word	0x40010000
 800ce1c:	40010400 	.word	0x40010400
 800ce20:	40000400 	.word	0x40000400
 800ce24:	40000800 	.word	0x40000800
 800ce28:	40000c00 	.word	0x40000c00
 800ce2c:	40001800 	.word	0x40001800
 800ce30:	40014000 	.word	0x40014000
 800ce34:	4000e000 	.word	0x4000e000
 800ce38:	4000e400 	.word	0x4000e400

0800ce3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b082      	sub	sp, #8
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d101      	bne.n	800ce4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e042      	b.n	800ced4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d106      	bne.n	800ce66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7f5 facd 	bl	8002400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2224      	movs	r2, #36	@ 0x24
 800ce6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	681a      	ldr	r2, [r3, #0]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f022 0201 	bic.w	r2, r2, #1
 800ce7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d002      	beq.n	800ce8c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f001 fafa 	bl	800e480 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f000 fc8b 	bl	800d7a8 <UART_SetConfig>
 800ce92:	4603      	mov	r3, r0
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d101      	bne.n	800ce9c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ce98:	2301      	movs	r3, #1
 800ce9a:	e01b      	b.n	800ced4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	685a      	ldr	r2, [r3, #4]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ceaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	689a      	ldr	r2, [r3, #8]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ceba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	681a      	ldr	r2, [r3, #0]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f042 0201 	orr.w	r2, r2, #1
 800ceca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f001 fb79 	bl	800e5c4 <UART_CheckIdleState>
 800ced2:	4603      	mov	r3, r0
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3708      	adds	r7, #8
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b08a      	sub	sp, #40	@ 0x28
 800cee0:	af02      	add	r7, sp, #8
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	603b      	str	r3, [r7, #0]
 800cee8:	4613      	mov	r3, r2
 800ceea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cef2:	2b20      	cmp	r3, #32
 800cef4:	d17b      	bne.n	800cfee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d002      	beq.n	800cf02 <HAL_UART_Transmit+0x26>
 800cefc:	88fb      	ldrh	r3, [r7, #6]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d101      	bne.n	800cf06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cf02:	2301      	movs	r3, #1
 800cf04:	e074      	b.n	800cff0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2221      	movs	r2, #33	@ 0x21
 800cf12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cf16:	f7f5 fc93 	bl	8002840 <HAL_GetTick>
 800cf1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	88fa      	ldrh	r2, [r7, #6]
 800cf20:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	88fa      	ldrh	r2, [r7, #6]
 800cf28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	689b      	ldr	r3, [r3, #8]
 800cf30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf34:	d108      	bne.n	800cf48 <HAL_UART_Transmit+0x6c>
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	691b      	ldr	r3, [r3, #16]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d104      	bne.n	800cf48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	61bb      	str	r3, [r7, #24]
 800cf46:	e003      	b.n	800cf50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cf50:	e030      	b.n	800cfb4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	9300      	str	r3, [sp, #0]
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	2180      	movs	r1, #128	@ 0x80
 800cf5c:	68f8      	ldr	r0, [r7, #12]
 800cf5e:	f001 fbdb 	bl	800e718 <UART_WaitOnFlagUntilTimeout>
 800cf62:	4603      	mov	r3, r0
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d005      	beq.n	800cf74 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2220      	movs	r2, #32
 800cf6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cf70:	2303      	movs	r3, #3
 800cf72:	e03d      	b.n	800cff0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cf74:	69fb      	ldr	r3, [r7, #28]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d10b      	bne.n	800cf92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	881b      	ldrh	r3, [r3, #0]
 800cf7e:	461a      	mov	r2, r3
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cf88:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cf8a:	69bb      	ldr	r3, [r7, #24]
 800cf8c:	3302      	adds	r3, #2
 800cf8e:	61bb      	str	r3, [r7, #24]
 800cf90:	e007      	b.n	800cfa2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	781a      	ldrb	r2, [r3, #0]
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	3b01      	subs	r3, #1
 800cfac:	b29a      	uxth	r2, r3
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cfba:	b29b      	uxth	r3, r3
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d1c8      	bne.n	800cf52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	9300      	str	r3, [sp, #0]
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	2140      	movs	r1, #64	@ 0x40
 800cfca:	68f8      	ldr	r0, [r7, #12]
 800cfcc:	f001 fba4 	bl	800e718 <UART_WaitOnFlagUntilTimeout>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d005      	beq.n	800cfe2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	2220      	movs	r2, #32
 800cfda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cfde:	2303      	movs	r3, #3
 800cfe0:	e006      	b.n	800cff0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2220      	movs	r2, #32
 800cfe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cfea:	2300      	movs	r3, #0
 800cfec:	e000      	b.n	800cff0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cfee:	2302      	movs	r3, #2
  }
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3720      	adds	r7, #32
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b0ba      	sub	sp, #232	@ 0xe8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	69db      	ldr	r3, [r3, #28]
 800d006:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	689b      	ldr	r3, [r3, #8]
 800d01a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d01e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d022:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d026:	4013      	ands	r3, r2
 800d028:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d02c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d030:	2b00      	cmp	r3, #0
 800d032:	d11b      	bne.n	800d06c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d038:	f003 0320 	and.w	r3, r3, #32
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d015      	beq.n	800d06c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d044:	f003 0320 	and.w	r3, r3, #32
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d105      	bne.n	800d058 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d04c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d054:	2b00      	cmp	r3, #0
 800d056:	d009      	beq.n	800d06c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	f000 8377 	beq.w	800d750 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	4798      	blx	r3
      }
      return;
 800d06a:	e371      	b.n	800d750 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d06c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d070:	2b00      	cmp	r3, #0
 800d072:	f000 8123 	beq.w	800d2bc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d076:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d07a:	4b8d      	ldr	r3, [pc, #564]	@ (800d2b0 <HAL_UART_IRQHandler+0x2b8>)
 800d07c:	4013      	ands	r3, r2
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d106      	bne.n	800d090 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d082:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d086:	4b8b      	ldr	r3, [pc, #556]	@ (800d2b4 <HAL_UART_IRQHandler+0x2bc>)
 800d088:	4013      	ands	r3, r2
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	f000 8116 	beq.w	800d2bc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d094:	f003 0301 	and.w	r3, r3, #1
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d011      	beq.n	800d0c0 <HAL_UART_IRQHandler+0xc8>
 800d09c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d0a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00b      	beq.n	800d0c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0b6:	f043 0201 	orr.w	r2, r3, #1
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0c4:	f003 0302 	and.w	r3, r3, #2
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d011      	beq.n	800d0f0 <HAL_UART_IRQHandler+0xf8>
 800d0cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d0d0:	f003 0301 	and.w	r3, r3, #1
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d00b      	beq.n	800d0f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	2202      	movs	r2, #2
 800d0de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0e6:	f043 0204 	orr.w	r2, r3, #4
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0f4:	f003 0304 	and.w	r3, r3, #4
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d011      	beq.n	800d120 <HAL_UART_IRQHandler+0x128>
 800d0fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d100:	f003 0301 	and.w	r3, r3, #1
 800d104:	2b00      	cmp	r3, #0
 800d106:	d00b      	beq.n	800d120 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2204      	movs	r2, #4
 800d10e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d116:	f043 0202 	orr.w	r2, r3, #2
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d124:	f003 0308 	and.w	r3, r3, #8
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d017      	beq.n	800d15c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d12c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d130:	f003 0320 	and.w	r3, r3, #32
 800d134:	2b00      	cmp	r3, #0
 800d136:	d105      	bne.n	800d144 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d138:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d13c:	4b5c      	ldr	r3, [pc, #368]	@ (800d2b0 <HAL_UART_IRQHandler+0x2b8>)
 800d13e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d140:	2b00      	cmp	r3, #0
 800d142:	d00b      	beq.n	800d15c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	2208      	movs	r2, #8
 800d14a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d152:	f043 0208 	orr.w	r2, r3, #8
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d15c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d164:	2b00      	cmp	r3, #0
 800d166:	d012      	beq.n	800d18e <HAL_UART_IRQHandler+0x196>
 800d168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d16c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d170:	2b00      	cmp	r3, #0
 800d172:	d00c      	beq.n	800d18e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d17c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d184:	f043 0220 	orr.w	r2, r3, #32
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d194:	2b00      	cmp	r3, #0
 800d196:	f000 82dd 	beq.w	800d754 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d19a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d19e:	f003 0320 	and.w	r3, r3, #32
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d013      	beq.n	800d1ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d1a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1aa:	f003 0320 	and.w	r3, r3, #32
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d105      	bne.n	800d1be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d1b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d1b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d007      	beq.n	800d1ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d003      	beq.n	800d1ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	689b      	ldr	r3, [r3, #8]
 800d1de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1e2:	2b40      	cmp	r3, #64	@ 0x40
 800d1e4:	d005      	beq.n	800d1f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d1e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d1ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d054      	beq.n	800d29c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f001 fc20 	bl	800ea38 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	689b      	ldr	r3, [r3, #8]
 800d1fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d202:	2b40      	cmp	r3, #64	@ 0x40
 800d204:	d146      	bne.n	800d294 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	3308      	adds	r3, #8
 800d20c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d210:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d214:	e853 3f00 	ldrex	r3, [r3]
 800d218:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d21c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d224:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	3308      	adds	r3, #8
 800d22e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d232:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d236:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d23a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d23e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d242:	e841 2300 	strex	r3, r2, [r1]
 800d246:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d24a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d1d9      	bne.n	800d206 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d017      	beq.n	800d28c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d262:	4a15      	ldr	r2, [pc, #84]	@ (800d2b8 <HAL_UART_IRQHandler+0x2c0>)
 800d264:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7f8 fdc5 	bl	8005dfc <HAL_DMA_Abort_IT>
 800d272:	4603      	mov	r3, r0
 800d274:	2b00      	cmp	r3, #0
 800d276:	d019      	beq.n	800d2ac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d27e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d280:	687a      	ldr	r2, [r7, #4]
 800d282:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d286:	4610      	mov	r0, r2
 800d288:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d28a:	e00f      	b.n	800d2ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 fa81 	bl	800d794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d292:	e00b      	b.n	800d2ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 fa7d 	bl	800d794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d29a:	e007      	b.n	800d2ac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 fa79 	bl	800d794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d2aa:	e253      	b.n	800d754 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2ac:	bf00      	nop
    return;
 800d2ae:	e251      	b.n	800d754 <HAL_UART_IRQHandler+0x75c>
 800d2b0:	10000001 	.word	0x10000001
 800d2b4:	04000120 	.word	0x04000120
 800d2b8:	0800eb05 	.word	0x0800eb05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	f040 81e7 	bne.w	800d694 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d2c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2ca:	f003 0310 	and.w	r3, r3, #16
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	f000 81e0 	beq.w	800d694 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d2d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d2d8:	f003 0310 	and.w	r3, r3, #16
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	f000 81d9 	beq.w	800d694 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	2210      	movs	r2, #16
 800d2e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	689b      	ldr	r3, [r3, #8]
 800d2f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2f4:	2b40      	cmp	r3, #64	@ 0x40
 800d2f6:	f040 8151 	bne.w	800d59c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4a96      	ldr	r2, [pc, #600]	@ (800d55c <HAL_UART_IRQHandler+0x564>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d068      	beq.n	800d3da <HAL_UART_IRQHandler+0x3e2>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4a93      	ldr	r2, [pc, #588]	@ (800d560 <HAL_UART_IRQHandler+0x568>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d061      	beq.n	800d3da <HAL_UART_IRQHandler+0x3e2>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a91      	ldr	r2, [pc, #580]	@ (800d564 <HAL_UART_IRQHandler+0x56c>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d05a      	beq.n	800d3da <HAL_UART_IRQHandler+0x3e2>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	4a8e      	ldr	r2, [pc, #568]	@ (800d568 <HAL_UART_IRQHandler+0x570>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d053      	beq.n	800d3da <HAL_UART_IRQHandler+0x3e2>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4a8c      	ldr	r2, [pc, #560]	@ (800d56c <HAL_UART_IRQHandler+0x574>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d04c      	beq.n	800d3da <HAL_UART_IRQHandler+0x3e2>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	4a89      	ldr	r2, [pc, #548]	@ (800d570 <HAL_UART_IRQHandler+0x578>)
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d045      	beq.n	800d3da <HAL_UART_IRQHandler+0x3e2>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	4a87      	ldr	r2, [pc, #540]	@ (800d574 <HAL_UART_IRQHandler+0x57c>)
 800d358:	4293      	cmp	r3, r2
 800d35a:	d03e      	beq.n	800d3da <HAL_UART_IRQHandler+0x3e2>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4a84      	ldr	r2, [pc, #528]	@ (800d578 <HAL_UART_IRQHandler+0x580>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d037      	beq.n	800d3da <HAL_UART_IRQHandler+0x3e2>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4a82      	ldr	r2, [pc, #520]	@ (800d57c <HAL_UART_IRQHandler+0x584>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d030      	beq.n	800d3da <HAL_UART_IRQHandler+0x3e2>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4a7f      	ldr	r2, [pc, #508]	@ (800d580 <HAL_UART_IRQHandler+0x588>)
 800d382:	4293      	cmp	r3, r2
 800d384:	d029      	beq.n	800d3da <HAL_UART_IRQHandler+0x3e2>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4a7d      	ldr	r2, [pc, #500]	@ (800d584 <HAL_UART_IRQHandler+0x58c>)
 800d390:	4293      	cmp	r3, r2
 800d392:	d022      	beq.n	800d3da <HAL_UART_IRQHandler+0x3e2>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4a7a      	ldr	r2, [pc, #488]	@ (800d588 <HAL_UART_IRQHandler+0x590>)
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d01b      	beq.n	800d3da <HAL_UART_IRQHandler+0x3e2>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4a78      	ldr	r2, [pc, #480]	@ (800d58c <HAL_UART_IRQHandler+0x594>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d014      	beq.n	800d3da <HAL_UART_IRQHandler+0x3e2>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4a75      	ldr	r2, [pc, #468]	@ (800d590 <HAL_UART_IRQHandler+0x598>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d00d      	beq.n	800d3da <HAL_UART_IRQHandler+0x3e2>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4a73      	ldr	r2, [pc, #460]	@ (800d594 <HAL_UART_IRQHandler+0x59c>)
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d006      	beq.n	800d3da <HAL_UART_IRQHandler+0x3e2>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4a70      	ldr	r2, [pc, #448]	@ (800d598 <HAL_UART_IRQHandler+0x5a0>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d106      	bne.n	800d3e8 <HAL_UART_IRQHandler+0x3f0>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	685b      	ldr	r3, [r3, #4]
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	e005      	b.n	800d3f4 <HAL_UART_IRQHandler+0x3fc>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	b29b      	uxth	r3, r3
 800d3f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d3f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	f000 81ab 	beq.w	800d758 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d408:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d40c:	429a      	cmp	r2, r3
 800d40e:	f080 81a3 	bcs.w	800d758 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d418:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d422:	69db      	ldr	r3, [r3, #28]
 800d424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d428:	f000 8087 	beq.w	800d53a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d434:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d438:	e853 3f00 	ldrex	r3, [r3]
 800d43c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d440:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d444:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d448:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	461a      	mov	r2, r3
 800d452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d456:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d45a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d45e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d462:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d466:	e841 2300 	strex	r3, r2, [r1]
 800d46a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d46e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d472:	2b00      	cmp	r3, #0
 800d474:	d1da      	bne.n	800d42c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	3308      	adds	r3, #8
 800d47c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d47e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d480:	e853 3f00 	ldrex	r3, [r3]
 800d484:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d486:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d488:	f023 0301 	bic.w	r3, r3, #1
 800d48c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	3308      	adds	r3, #8
 800d496:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d49a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d49e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d4a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d4a6:	e841 2300 	strex	r3, r2, [r1]
 800d4aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d4ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d1e1      	bne.n	800d476 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	3308      	adds	r3, #8
 800d4b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d4bc:	e853 3f00 	ldrex	r3, [r3]
 800d4c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d4c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d4c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	3308      	adds	r3, #8
 800d4d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d4d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d4d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d4dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d4de:	e841 2300 	strex	r3, r2, [r1]
 800d4e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d4e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d1e3      	bne.n	800d4b2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2220      	movs	r2, #32
 800d4ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d500:	e853 3f00 	ldrex	r3, [r3]
 800d504:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d508:	f023 0310 	bic.w	r3, r3, #16
 800d50c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	461a      	mov	r2, r3
 800d516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d51a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d51c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d51e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d520:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d522:	e841 2300 	strex	r3, r2, [r1]
 800d526:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d1e4      	bne.n	800d4f8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d534:	4618      	mov	r0, r3
 800d536:	f7f8 f943 	bl	80057c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2202      	movs	r2, #2
 800d53e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	1ad3      	subs	r3, r2, r3
 800d550:	b29b      	uxth	r3, r3
 800d552:	4619      	mov	r1, r3
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f7f3 fd8b 	bl	8001070 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d55a:	e0fd      	b.n	800d758 <HAL_UART_IRQHandler+0x760>
 800d55c:	40020010 	.word	0x40020010
 800d560:	40020028 	.word	0x40020028
 800d564:	40020040 	.word	0x40020040
 800d568:	40020058 	.word	0x40020058
 800d56c:	40020070 	.word	0x40020070
 800d570:	40020088 	.word	0x40020088
 800d574:	400200a0 	.word	0x400200a0
 800d578:	400200b8 	.word	0x400200b8
 800d57c:	40020410 	.word	0x40020410
 800d580:	40020428 	.word	0x40020428
 800d584:	40020440 	.word	0x40020440
 800d588:	40020458 	.word	0x40020458
 800d58c:	40020470 	.word	0x40020470
 800d590:	40020488 	.word	0x40020488
 800d594:	400204a0 	.word	0x400204a0
 800d598:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d5a8:	b29b      	uxth	r3, r3
 800d5aa:	1ad3      	subs	r3, r2, r3
 800d5ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d5b6:	b29b      	uxth	r3, r3
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	f000 80cf 	beq.w	800d75c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d5be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	f000 80ca 	beq.w	800d75c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5d0:	e853 3f00 	ldrex	r3, [r3]
 800d5d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d5d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d5dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d5ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800d5ec:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d5f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d5f2:	e841 2300 	strex	r3, r2, [r1]
 800d5f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d5f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d1e4      	bne.n	800d5c8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	3308      	adds	r3, #8
 800d604:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d608:	e853 3f00 	ldrex	r3, [r3]
 800d60c:	623b      	str	r3, [r7, #32]
   return(result);
 800d60e:	6a3a      	ldr	r2, [r7, #32]
 800d610:	4b55      	ldr	r3, [pc, #340]	@ (800d768 <HAL_UART_IRQHandler+0x770>)
 800d612:	4013      	ands	r3, r2
 800d614:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	3308      	adds	r3, #8
 800d61e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d622:	633a      	str	r2, [r7, #48]	@ 0x30
 800d624:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d626:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d62a:	e841 2300 	strex	r3, r2, [r1]
 800d62e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d632:	2b00      	cmp	r3, #0
 800d634:	d1e3      	bne.n	800d5fe <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2220      	movs	r2, #32
 800d63a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2200      	movs	r2, #0
 800d642:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2200      	movs	r2, #0
 800d648:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	e853 3f00 	ldrex	r3, [r3]
 800d656:	60fb      	str	r3, [r7, #12]
   return(result);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f023 0310 	bic.w	r3, r3, #16
 800d65e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	461a      	mov	r2, r3
 800d668:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d66c:	61fb      	str	r3, [r7, #28]
 800d66e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d670:	69b9      	ldr	r1, [r7, #24]
 800d672:	69fa      	ldr	r2, [r7, #28]
 800d674:	e841 2300 	strex	r3, r2, [r1]
 800d678:	617b      	str	r3, [r7, #20]
   return(result);
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d1e4      	bne.n	800d64a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2202      	movs	r2, #2
 800d684:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d686:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d68a:	4619      	mov	r1, r3
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f7f3 fcef 	bl	8001070 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d692:	e063      	b.n	800d75c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d698:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d00e      	beq.n	800d6be <HAL_UART_IRQHandler+0x6c6>
 800d6a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d6a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d008      	beq.n	800d6be <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d6b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f001 ff82 	bl	800f5c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d6bc:	e051      	b.n	800d762 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d6be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d014      	beq.n	800d6f4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d6ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d105      	bne.n	800d6e2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d6d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d6da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d008      	beq.n	800d6f4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d03a      	beq.n	800d760 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	4798      	blx	r3
    }
    return;
 800d6f2:	e035      	b.n	800d760 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d6f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d009      	beq.n	800d714 <HAL_UART_IRQHandler+0x71c>
 800d700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d003      	beq.n	800d714 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f001 fa0f 	bl	800eb30 <UART_EndTransmit_IT>
    return;
 800d712:	e026      	b.n	800d762 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d718:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d009      	beq.n	800d734 <HAL_UART_IRQHandler+0x73c>
 800d720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d724:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d003      	beq.n	800d734 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f001 ff5b 	bl	800f5e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d732:	e016      	b.n	800d762 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d738:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d010      	beq.n	800d762 <HAL_UART_IRQHandler+0x76a>
 800d740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d744:	2b00      	cmp	r3, #0
 800d746:	da0c      	bge.n	800d762 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f001 ff43 	bl	800f5d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d74e:	e008      	b.n	800d762 <HAL_UART_IRQHandler+0x76a>
      return;
 800d750:	bf00      	nop
 800d752:	e006      	b.n	800d762 <HAL_UART_IRQHandler+0x76a>
    return;
 800d754:	bf00      	nop
 800d756:	e004      	b.n	800d762 <HAL_UART_IRQHandler+0x76a>
      return;
 800d758:	bf00      	nop
 800d75a:	e002      	b.n	800d762 <HAL_UART_IRQHandler+0x76a>
      return;
 800d75c:	bf00      	nop
 800d75e:	e000      	b.n	800d762 <HAL_UART_IRQHandler+0x76a>
    return;
 800d760:	bf00      	nop
  }
}
 800d762:	37e8      	adds	r7, #232	@ 0xe8
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	effffffe 	.word	0xeffffffe

0800d76c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d76c:	b480      	push	{r7}
 800d76e:	b083      	sub	sp, #12
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d774:	bf00      	nop
 800d776:	370c      	adds	r7, #12
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr

0800d780 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d780:	b480      	push	{r7}
 800d782:	b083      	sub	sp, #12
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d788:	bf00      	nop
 800d78a:	370c      	adds	r7, #12
 800d78c:	46bd      	mov	sp, r7
 800d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d792:	4770      	bx	lr

0800d794 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d794:	b480      	push	{r7}
 800d796:	b083      	sub	sp, #12
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d79c:	bf00      	nop
 800d79e:	370c      	adds	r7, #12
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr

0800d7a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d7a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d7ac:	b092      	sub	sp, #72	@ 0x48
 800d7ae:	af00      	add	r7, sp, #0
 800d7b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	689a      	ldr	r2, [r3, #8]
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	691b      	ldr	r3, [r3, #16]
 800d7c0:	431a      	orrs	r2, r3
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	695b      	ldr	r3, [r3, #20]
 800d7c6:	431a      	orrs	r2, r3
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	69db      	ldr	r3, [r3, #28]
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	4bbe      	ldr	r3, [pc, #760]	@ (800dad0 <UART_SetConfig+0x328>)
 800d7d8:	4013      	ands	r3, r2
 800d7da:	697a      	ldr	r2, [r7, #20]
 800d7dc:	6812      	ldr	r2, [r2, #0]
 800d7de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d7e0:	430b      	orrs	r3, r1
 800d7e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	685b      	ldr	r3, [r3, #4]
 800d7ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	68da      	ldr	r2, [r3, #12]
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	430a      	orrs	r2, r1
 800d7f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	699b      	ldr	r3, [r3, #24]
 800d7fe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	4ab3      	ldr	r2, [pc, #716]	@ (800dad4 <UART_SetConfig+0x32c>)
 800d806:	4293      	cmp	r3, r2
 800d808:	d004      	beq.n	800d814 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	6a1b      	ldr	r3, [r3, #32]
 800d80e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d810:	4313      	orrs	r3, r2
 800d812:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	689a      	ldr	r2, [r3, #8]
 800d81a:	4baf      	ldr	r3, [pc, #700]	@ (800dad8 <UART_SetConfig+0x330>)
 800d81c:	4013      	ands	r3, r2
 800d81e:	697a      	ldr	r2, [r7, #20]
 800d820:	6812      	ldr	r2, [r2, #0]
 800d822:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d824:	430b      	orrs	r3, r1
 800d826:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d82e:	f023 010f 	bic.w	r1, r3, #15
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	430a      	orrs	r2, r1
 800d83c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	4aa6      	ldr	r2, [pc, #664]	@ (800dadc <UART_SetConfig+0x334>)
 800d844:	4293      	cmp	r3, r2
 800d846:	d177      	bne.n	800d938 <UART_SetConfig+0x190>
 800d848:	4ba5      	ldr	r3, [pc, #660]	@ (800dae0 <UART_SetConfig+0x338>)
 800d84a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d84c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d850:	2b28      	cmp	r3, #40	@ 0x28
 800d852:	d86d      	bhi.n	800d930 <UART_SetConfig+0x188>
 800d854:	a201      	add	r2, pc, #4	@ (adr r2, 800d85c <UART_SetConfig+0xb4>)
 800d856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d85a:	bf00      	nop
 800d85c:	0800d901 	.word	0x0800d901
 800d860:	0800d931 	.word	0x0800d931
 800d864:	0800d931 	.word	0x0800d931
 800d868:	0800d931 	.word	0x0800d931
 800d86c:	0800d931 	.word	0x0800d931
 800d870:	0800d931 	.word	0x0800d931
 800d874:	0800d931 	.word	0x0800d931
 800d878:	0800d931 	.word	0x0800d931
 800d87c:	0800d909 	.word	0x0800d909
 800d880:	0800d931 	.word	0x0800d931
 800d884:	0800d931 	.word	0x0800d931
 800d888:	0800d931 	.word	0x0800d931
 800d88c:	0800d931 	.word	0x0800d931
 800d890:	0800d931 	.word	0x0800d931
 800d894:	0800d931 	.word	0x0800d931
 800d898:	0800d931 	.word	0x0800d931
 800d89c:	0800d911 	.word	0x0800d911
 800d8a0:	0800d931 	.word	0x0800d931
 800d8a4:	0800d931 	.word	0x0800d931
 800d8a8:	0800d931 	.word	0x0800d931
 800d8ac:	0800d931 	.word	0x0800d931
 800d8b0:	0800d931 	.word	0x0800d931
 800d8b4:	0800d931 	.word	0x0800d931
 800d8b8:	0800d931 	.word	0x0800d931
 800d8bc:	0800d919 	.word	0x0800d919
 800d8c0:	0800d931 	.word	0x0800d931
 800d8c4:	0800d931 	.word	0x0800d931
 800d8c8:	0800d931 	.word	0x0800d931
 800d8cc:	0800d931 	.word	0x0800d931
 800d8d0:	0800d931 	.word	0x0800d931
 800d8d4:	0800d931 	.word	0x0800d931
 800d8d8:	0800d931 	.word	0x0800d931
 800d8dc:	0800d921 	.word	0x0800d921
 800d8e0:	0800d931 	.word	0x0800d931
 800d8e4:	0800d931 	.word	0x0800d931
 800d8e8:	0800d931 	.word	0x0800d931
 800d8ec:	0800d931 	.word	0x0800d931
 800d8f0:	0800d931 	.word	0x0800d931
 800d8f4:	0800d931 	.word	0x0800d931
 800d8f8:	0800d931 	.word	0x0800d931
 800d8fc:	0800d929 	.word	0x0800d929
 800d900:	2301      	movs	r3, #1
 800d902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d906:	e326      	b.n	800df56 <UART_SetConfig+0x7ae>
 800d908:	2304      	movs	r3, #4
 800d90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d90e:	e322      	b.n	800df56 <UART_SetConfig+0x7ae>
 800d910:	2308      	movs	r3, #8
 800d912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d916:	e31e      	b.n	800df56 <UART_SetConfig+0x7ae>
 800d918:	2310      	movs	r3, #16
 800d91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d91e:	e31a      	b.n	800df56 <UART_SetConfig+0x7ae>
 800d920:	2320      	movs	r3, #32
 800d922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d926:	e316      	b.n	800df56 <UART_SetConfig+0x7ae>
 800d928:	2340      	movs	r3, #64	@ 0x40
 800d92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d92e:	e312      	b.n	800df56 <UART_SetConfig+0x7ae>
 800d930:	2380      	movs	r3, #128	@ 0x80
 800d932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d936:	e30e      	b.n	800df56 <UART_SetConfig+0x7ae>
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4a69      	ldr	r2, [pc, #420]	@ (800dae4 <UART_SetConfig+0x33c>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d130      	bne.n	800d9a4 <UART_SetConfig+0x1fc>
 800d942:	4b67      	ldr	r3, [pc, #412]	@ (800dae0 <UART_SetConfig+0x338>)
 800d944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d946:	f003 0307 	and.w	r3, r3, #7
 800d94a:	2b05      	cmp	r3, #5
 800d94c:	d826      	bhi.n	800d99c <UART_SetConfig+0x1f4>
 800d94e:	a201      	add	r2, pc, #4	@ (adr r2, 800d954 <UART_SetConfig+0x1ac>)
 800d950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d954:	0800d96d 	.word	0x0800d96d
 800d958:	0800d975 	.word	0x0800d975
 800d95c:	0800d97d 	.word	0x0800d97d
 800d960:	0800d985 	.word	0x0800d985
 800d964:	0800d98d 	.word	0x0800d98d
 800d968:	0800d995 	.word	0x0800d995
 800d96c:	2300      	movs	r3, #0
 800d96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d972:	e2f0      	b.n	800df56 <UART_SetConfig+0x7ae>
 800d974:	2304      	movs	r3, #4
 800d976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d97a:	e2ec      	b.n	800df56 <UART_SetConfig+0x7ae>
 800d97c:	2308      	movs	r3, #8
 800d97e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d982:	e2e8      	b.n	800df56 <UART_SetConfig+0x7ae>
 800d984:	2310      	movs	r3, #16
 800d986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d98a:	e2e4      	b.n	800df56 <UART_SetConfig+0x7ae>
 800d98c:	2320      	movs	r3, #32
 800d98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d992:	e2e0      	b.n	800df56 <UART_SetConfig+0x7ae>
 800d994:	2340      	movs	r3, #64	@ 0x40
 800d996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d99a:	e2dc      	b.n	800df56 <UART_SetConfig+0x7ae>
 800d99c:	2380      	movs	r3, #128	@ 0x80
 800d99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9a2:	e2d8      	b.n	800df56 <UART_SetConfig+0x7ae>
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4a4f      	ldr	r2, [pc, #316]	@ (800dae8 <UART_SetConfig+0x340>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d130      	bne.n	800da10 <UART_SetConfig+0x268>
 800d9ae:	4b4c      	ldr	r3, [pc, #304]	@ (800dae0 <UART_SetConfig+0x338>)
 800d9b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9b2:	f003 0307 	and.w	r3, r3, #7
 800d9b6:	2b05      	cmp	r3, #5
 800d9b8:	d826      	bhi.n	800da08 <UART_SetConfig+0x260>
 800d9ba:	a201      	add	r2, pc, #4	@ (adr r2, 800d9c0 <UART_SetConfig+0x218>)
 800d9bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9c0:	0800d9d9 	.word	0x0800d9d9
 800d9c4:	0800d9e1 	.word	0x0800d9e1
 800d9c8:	0800d9e9 	.word	0x0800d9e9
 800d9cc:	0800d9f1 	.word	0x0800d9f1
 800d9d0:	0800d9f9 	.word	0x0800d9f9
 800d9d4:	0800da01 	.word	0x0800da01
 800d9d8:	2300      	movs	r3, #0
 800d9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9de:	e2ba      	b.n	800df56 <UART_SetConfig+0x7ae>
 800d9e0:	2304      	movs	r3, #4
 800d9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9e6:	e2b6      	b.n	800df56 <UART_SetConfig+0x7ae>
 800d9e8:	2308      	movs	r3, #8
 800d9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ee:	e2b2      	b.n	800df56 <UART_SetConfig+0x7ae>
 800d9f0:	2310      	movs	r3, #16
 800d9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9f6:	e2ae      	b.n	800df56 <UART_SetConfig+0x7ae>
 800d9f8:	2320      	movs	r3, #32
 800d9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9fe:	e2aa      	b.n	800df56 <UART_SetConfig+0x7ae>
 800da00:	2340      	movs	r3, #64	@ 0x40
 800da02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da06:	e2a6      	b.n	800df56 <UART_SetConfig+0x7ae>
 800da08:	2380      	movs	r3, #128	@ 0x80
 800da0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da0e:	e2a2      	b.n	800df56 <UART_SetConfig+0x7ae>
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a35      	ldr	r2, [pc, #212]	@ (800daec <UART_SetConfig+0x344>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d130      	bne.n	800da7c <UART_SetConfig+0x2d4>
 800da1a:	4b31      	ldr	r3, [pc, #196]	@ (800dae0 <UART_SetConfig+0x338>)
 800da1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da1e:	f003 0307 	and.w	r3, r3, #7
 800da22:	2b05      	cmp	r3, #5
 800da24:	d826      	bhi.n	800da74 <UART_SetConfig+0x2cc>
 800da26:	a201      	add	r2, pc, #4	@ (adr r2, 800da2c <UART_SetConfig+0x284>)
 800da28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da2c:	0800da45 	.word	0x0800da45
 800da30:	0800da4d 	.word	0x0800da4d
 800da34:	0800da55 	.word	0x0800da55
 800da38:	0800da5d 	.word	0x0800da5d
 800da3c:	0800da65 	.word	0x0800da65
 800da40:	0800da6d 	.word	0x0800da6d
 800da44:	2300      	movs	r3, #0
 800da46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da4a:	e284      	b.n	800df56 <UART_SetConfig+0x7ae>
 800da4c:	2304      	movs	r3, #4
 800da4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da52:	e280      	b.n	800df56 <UART_SetConfig+0x7ae>
 800da54:	2308      	movs	r3, #8
 800da56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da5a:	e27c      	b.n	800df56 <UART_SetConfig+0x7ae>
 800da5c:	2310      	movs	r3, #16
 800da5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da62:	e278      	b.n	800df56 <UART_SetConfig+0x7ae>
 800da64:	2320      	movs	r3, #32
 800da66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da6a:	e274      	b.n	800df56 <UART_SetConfig+0x7ae>
 800da6c:	2340      	movs	r3, #64	@ 0x40
 800da6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da72:	e270      	b.n	800df56 <UART_SetConfig+0x7ae>
 800da74:	2380      	movs	r3, #128	@ 0x80
 800da76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da7a:	e26c      	b.n	800df56 <UART_SetConfig+0x7ae>
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4a1b      	ldr	r2, [pc, #108]	@ (800daf0 <UART_SetConfig+0x348>)
 800da82:	4293      	cmp	r3, r2
 800da84:	d142      	bne.n	800db0c <UART_SetConfig+0x364>
 800da86:	4b16      	ldr	r3, [pc, #88]	@ (800dae0 <UART_SetConfig+0x338>)
 800da88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da8a:	f003 0307 	and.w	r3, r3, #7
 800da8e:	2b05      	cmp	r3, #5
 800da90:	d838      	bhi.n	800db04 <UART_SetConfig+0x35c>
 800da92:	a201      	add	r2, pc, #4	@ (adr r2, 800da98 <UART_SetConfig+0x2f0>)
 800da94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da98:	0800dab1 	.word	0x0800dab1
 800da9c:	0800dab9 	.word	0x0800dab9
 800daa0:	0800dac1 	.word	0x0800dac1
 800daa4:	0800dac9 	.word	0x0800dac9
 800daa8:	0800daf5 	.word	0x0800daf5
 800daac:	0800dafd 	.word	0x0800dafd
 800dab0:	2300      	movs	r3, #0
 800dab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dab6:	e24e      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dab8:	2304      	movs	r3, #4
 800daba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dabe:	e24a      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dac0:	2308      	movs	r3, #8
 800dac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dac6:	e246      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dac8:	2310      	movs	r3, #16
 800daca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dace:	e242      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dad0:	cfff69f3 	.word	0xcfff69f3
 800dad4:	58000c00 	.word	0x58000c00
 800dad8:	11fff4ff 	.word	0x11fff4ff
 800dadc:	40011000 	.word	0x40011000
 800dae0:	58024400 	.word	0x58024400
 800dae4:	40004400 	.word	0x40004400
 800dae8:	40004800 	.word	0x40004800
 800daec:	40004c00 	.word	0x40004c00
 800daf0:	40005000 	.word	0x40005000
 800daf4:	2320      	movs	r3, #32
 800daf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dafa:	e22c      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dafc:	2340      	movs	r3, #64	@ 0x40
 800dafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db02:	e228      	b.n	800df56 <UART_SetConfig+0x7ae>
 800db04:	2380      	movs	r3, #128	@ 0x80
 800db06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db0a:	e224      	b.n	800df56 <UART_SetConfig+0x7ae>
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	4ab1      	ldr	r2, [pc, #708]	@ (800ddd8 <UART_SetConfig+0x630>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d176      	bne.n	800dc04 <UART_SetConfig+0x45c>
 800db16:	4bb1      	ldr	r3, [pc, #708]	@ (800dddc <UART_SetConfig+0x634>)
 800db18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800db1e:	2b28      	cmp	r3, #40	@ 0x28
 800db20:	d86c      	bhi.n	800dbfc <UART_SetConfig+0x454>
 800db22:	a201      	add	r2, pc, #4	@ (adr r2, 800db28 <UART_SetConfig+0x380>)
 800db24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db28:	0800dbcd 	.word	0x0800dbcd
 800db2c:	0800dbfd 	.word	0x0800dbfd
 800db30:	0800dbfd 	.word	0x0800dbfd
 800db34:	0800dbfd 	.word	0x0800dbfd
 800db38:	0800dbfd 	.word	0x0800dbfd
 800db3c:	0800dbfd 	.word	0x0800dbfd
 800db40:	0800dbfd 	.word	0x0800dbfd
 800db44:	0800dbfd 	.word	0x0800dbfd
 800db48:	0800dbd5 	.word	0x0800dbd5
 800db4c:	0800dbfd 	.word	0x0800dbfd
 800db50:	0800dbfd 	.word	0x0800dbfd
 800db54:	0800dbfd 	.word	0x0800dbfd
 800db58:	0800dbfd 	.word	0x0800dbfd
 800db5c:	0800dbfd 	.word	0x0800dbfd
 800db60:	0800dbfd 	.word	0x0800dbfd
 800db64:	0800dbfd 	.word	0x0800dbfd
 800db68:	0800dbdd 	.word	0x0800dbdd
 800db6c:	0800dbfd 	.word	0x0800dbfd
 800db70:	0800dbfd 	.word	0x0800dbfd
 800db74:	0800dbfd 	.word	0x0800dbfd
 800db78:	0800dbfd 	.word	0x0800dbfd
 800db7c:	0800dbfd 	.word	0x0800dbfd
 800db80:	0800dbfd 	.word	0x0800dbfd
 800db84:	0800dbfd 	.word	0x0800dbfd
 800db88:	0800dbe5 	.word	0x0800dbe5
 800db8c:	0800dbfd 	.word	0x0800dbfd
 800db90:	0800dbfd 	.word	0x0800dbfd
 800db94:	0800dbfd 	.word	0x0800dbfd
 800db98:	0800dbfd 	.word	0x0800dbfd
 800db9c:	0800dbfd 	.word	0x0800dbfd
 800dba0:	0800dbfd 	.word	0x0800dbfd
 800dba4:	0800dbfd 	.word	0x0800dbfd
 800dba8:	0800dbed 	.word	0x0800dbed
 800dbac:	0800dbfd 	.word	0x0800dbfd
 800dbb0:	0800dbfd 	.word	0x0800dbfd
 800dbb4:	0800dbfd 	.word	0x0800dbfd
 800dbb8:	0800dbfd 	.word	0x0800dbfd
 800dbbc:	0800dbfd 	.word	0x0800dbfd
 800dbc0:	0800dbfd 	.word	0x0800dbfd
 800dbc4:	0800dbfd 	.word	0x0800dbfd
 800dbc8:	0800dbf5 	.word	0x0800dbf5
 800dbcc:	2301      	movs	r3, #1
 800dbce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbd2:	e1c0      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dbd4:	2304      	movs	r3, #4
 800dbd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbda:	e1bc      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dbdc:	2308      	movs	r3, #8
 800dbde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbe2:	e1b8      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dbe4:	2310      	movs	r3, #16
 800dbe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbea:	e1b4      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dbec:	2320      	movs	r3, #32
 800dbee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbf2:	e1b0      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dbf4:	2340      	movs	r3, #64	@ 0x40
 800dbf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbfa:	e1ac      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dbfc:	2380      	movs	r3, #128	@ 0x80
 800dbfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc02:	e1a8      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4a75      	ldr	r2, [pc, #468]	@ (800dde0 <UART_SetConfig+0x638>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d130      	bne.n	800dc70 <UART_SetConfig+0x4c8>
 800dc0e:	4b73      	ldr	r3, [pc, #460]	@ (800dddc <UART_SetConfig+0x634>)
 800dc10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc12:	f003 0307 	and.w	r3, r3, #7
 800dc16:	2b05      	cmp	r3, #5
 800dc18:	d826      	bhi.n	800dc68 <UART_SetConfig+0x4c0>
 800dc1a:	a201      	add	r2, pc, #4	@ (adr r2, 800dc20 <UART_SetConfig+0x478>)
 800dc1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc20:	0800dc39 	.word	0x0800dc39
 800dc24:	0800dc41 	.word	0x0800dc41
 800dc28:	0800dc49 	.word	0x0800dc49
 800dc2c:	0800dc51 	.word	0x0800dc51
 800dc30:	0800dc59 	.word	0x0800dc59
 800dc34:	0800dc61 	.word	0x0800dc61
 800dc38:	2300      	movs	r3, #0
 800dc3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc3e:	e18a      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dc40:	2304      	movs	r3, #4
 800dc42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc46:	e186      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dc48:	2308      	movs	r3, #8
 800dc4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc4e:	e182      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dc50:	2310      	movs	r3, #16
 800dc52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc56:	e17e      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dc58:	2320      	movs	r3, #32
 800dc5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc5e:	e17a      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dc60:	2340      	movs	r3, #64	@ 0x40
 800dc62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc66:	e176      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dc68:	2380      	movs	r3, #128	@ 0x80
 800dc6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc6e:	e172      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	4a5b      	ldr	r2, [pc, #364]	@ (800dde4 <UART_SetConfig+0x63c>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d130      	bne.n	800dcdc <UART_SetConfig+0x534>
 800dc7a:	4b58      	ldr	r3, [pc, #352]	@ (800dddc <UART_SetConfig+0x634>)
 800dc7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc7e:	f003 0307 	and.w	r3, r3, #7
 800dc82:	2b05      	cmp	r3, #5
 800dc84:	d826      	bhi.n	800dcd4 <UART_SetConfig+0x52c>
 800dc86:	a201      	add	r2, pc, #4	@ (adr r2, 800dc8c <UART_SetConfig+0x4e4>)
 800dc88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc8c:	0800dca5 	.word	0x0800dca5
 800dc90:	0800dcad 	.word	0x0800dcad
 800dc94:	0800dcb5 	.word	0x0800dcb5
 800dc98:	0800dcbd 	.word	0x0800dcbd
 800dc9c:	0800dcc5 	.word	0x0800dcc5
 800dca0:	0800dccd 	.word	0x0800dccd
 800dca4:	2300      	movs	r3, #0
 800dca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcaa:	e154      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dcac:	2304      	movs	r3, #4
 800dcae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcb2:	e150      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dcb4:	2308      	movs	r3, #8
 800dcb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcba:	e14c      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dcbc:	2310      	movs	r3, #16
 800dcbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcc2:	e148      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dcc4:	2320      	movs	r3, #32
 800dcc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcca:	e144      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dccc:	2340      	movs	r3, #64	@ 0x40
 800dcce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcd2:	e140      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dcd4:	2380      	movs	r3, #128	@ 0x80
 800dcd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcda:	e13c      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4a41      	ldr	r2, [pc, #260]	@ (800dde8 <UART_SetConfig+0x640>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	f040 8082 	bne.w	800ddec <UART_SetConfig+0x644>
 800dce8:	4b3c      	ldr	r3, [pc, #240]	@ (800dddc <UART_SetConfig+0x634>)
 800dcea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dcf0:	2b28      	cmp	r3, #40	@ 0x28
 800dcf2:	d86d      	bhi.n	800ddd0 <UART_SetConfig+0x628>
 800dcf4:	a201      	add	r2, pc, #4	@ (adr r2, 800dcfc <UART_SetConfig+0x554>)
 800dcf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcfa:	bf00      	nop
 800dcfc:	0800dda1 	.word	0x0800dda1
 800dd00:	0800ddd1 	.word	0x0800ddd1
 800dd04:	0800ddd1 	.word	0x0800ddd1
 800dd08:	0800ddd1 	.word	0x0800ddd1
 800dd0c:	0800ddd1 	.word	0x0800ddd1
 800dd10:	0800ddd1 	.word	0x0800ddd1
 800dd14:	0800ddd1 	.word	0x0800ddd1
 800dd18:	0800ddd1 	.word	0x0800ddd1
 800dd1c:	0800dda9 	.word	0x0800dda9
 800dd20:	0800ddd1 	.word	0x0800ddd1
 800dd24:	0800ddd1 	.word	0x0800ddd1
 800dd28:	0800ddd1 	.word	0x0800ddd1
 800dd2c:	0800ddd1 	.word	0x0800ddd1
 800dd30:	0800ddd1 	.word	0x0800ddd1
 800dd34:	0800ddd1 	.word	0x0800ddd1
 800dd38:	0800ddd1 	.word	0x0800ddd1
 800dd3c:	0800ddb1 	.word	0x0800ddb1
 800dd40:	0800ddd1 	.word	0x0800ddd1
 800dd44:	0800ddd1 	.word	0x0800ddd1
 800dd48:	0800ddd1 	.word	0x0800ddd1
 800dd4c:	0800ddd1 	.word	0x0800ddd1
 800dd50:	0800ddd1 	.word	0x0800ddd1
 800dd54:	0800ddd1 	.word	0x0800ddd1
 800dd58:	0800ddd1 	.word	0x0800ddd1
 800dd5c:	0800ddb9 	.word	0x0800ddb9
 800dd60:	0800ddd1 	.word	0x0800ddd1
 800dd64:	0800ddd1 	.word	0x0800ddd1
 800dd68:	0800ddd1 	.word	0x0800ddd1
 800dd6c:	0800ddd1 	.word	0x0800ddd1
 800dd70:	0800ddd1 	.word	0x0800ddd1
 800dd74:	0800ddd1 	.word	0x0800ddd1
 800dd78:	0800ddd1 	.word	0x0800ddd1
 800dd7c:	0800ddc1 	.word	0x0800ddc1
 800dd80:	0800ddd1 	.word	0x0800ddd1
 800dd84:	0800ddd1 	.word	0x0800ddd1
 800dd88:	0800ddd1 	.word	0x0800ddd1
 800dd8c:	0800ddd1 	.word	0x0800ddd1
 800dd90:	0800ddd1 	.word	0x0800ddd1
 800dd94:	0800ddd1 	.word	0x0800ddd1
 800dd98:	0800ddd1 	.word	0x0800ddd1
 800dd9c:	0800ddc9 	.word	0x0800ddc9
 800dda0:	2301      	movs	r3, #1
 800dda2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dda6:	e0d6      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dda8:	2304      	movs	r3, #4
 800ddaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddae:	e0d2      	b.n	800df56 <UART_SetConfig+0x7ae>
 800ddb0:	2308      	movs	r3, #8
 800ddb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddb6:	e0ce      	b.n	800df56 <UART_SetConfig+0x7ae>
 800ddb8:	2310      	movs	r3, #16
 800ddba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddbe:	e0ca      	b.n	800df56 <UART_SetConfig+0x7ae>
 800ddc0:	2320      	movs	r3, #32
 800ddc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddc6:	e0c6      	b.n	800df56 <UART_SetConfig+0x7ae>
 800ddc8:	2340      	movs	r3, #64	@ 0x40
 800ddca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddce:	e0c2      	b.n	800df56 <UART_SetConfig+0x7ae>
 800ddd0:	2380      	movs	r3, #128	@ 0x80
 800ddd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddd6:	e0be      	b.n	800df56 <UART_SetConfig+0x7ae>
 800ddd8:	40011400 	.word	0x40011400
 800dddc:	58024400 	.word	0x58024400
 800dde0:	40007800 	.word	0x40007800
 800dde4:	40007c00 	.word	0x40007c00
 800dde8:	40011800 	.word	0x40011800
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4aad      	ldr	r2, [pc, #692]	@ (800e0a8 <UART_SetConfig+0x900>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d176      	bne.n	800dee4 <UART_SetConfig+0x73c>
 800ddf6:	4bad      	ldr	r3, [pc, #692]	@ (800e0ac <UART_SetConfig+0x904>)
 800ddf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ddfe:	2b28      	cmp	r3, #40	@ 0x28
 800de00:	d86c      	bhi.n	800dedc <UART_SetConfig+0x734>
 800de02:	a201      	add	r2, pc, #4	@ (adr r2, 800de08 <UART_SetConfig+0x660>)
 800de04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de08:	0800dead 	.word	0x0800dead
 800de0c:	0800dedd 	.word	0x0800dedd
 800de10:	0800dedd 	.word	0x0800dedd
 800de14:	0800dedd 	.word	0x0800dedd
 800de18:	0800dedd 	.word	0x0800dedd
 800de1c:	0800dedd 	.word	0x0800dedd
 800de20:	0800dedd 	.word	0x0800dedd
 800de24:	0800dedd 	.word	0x0800dedd
 800de28:	0800deb5 	.word	0x0800deb5
 800de2c:	0800dedd 	.word	0x0800dedd
 800de30:	0800dedd 	.word	0x0800dedd
 800de34:	0800dedd 	.word	0x0800dedd
 800de38:	0800dedd 	.word	0x0800dedd
 800de3c:	0800dedd 	.word	0x0800dedd
 800de40:	0800dedd 	.word	0x0800dedd
 800de44:	0800dedd 	.word	0x0800dedd
 800de48:	0800debd 	.word	0x0800debd
 800de4c:	0800dedd 	.word	0x0800dedd
 800de50:	0800dedd 	.word	0x0800dedd
 800de54:	0800dedd 	.word	0x0800dedd
 800de58:	0800dedd 	.word	0x0800dedd
 800de5c:	0800dedd 	.word	0x0800dedd
 800de60:	0800dedd 	.word	0x0800dedd
 800de64:	0800dedd 	.word	0x0800dedd
 800de68:	0800dec5 	.word	0x0800dec5
 800de6c:	0800dedd 	.word	0x0800dedd
 800de70:	0800dedd 	.word	0x0800dedd
 800de74:	0800dedd 	.word	0x0800dedd
 800de78:	0800dedd 	.word	0x0800dedd
 800de7c:	0800dedd 	.word	0x0800dedd
 800de80:	0800dedd 	.word	0x0800dedd
 800de84:	0800dedd 	.word	0x0800dedd
 800de88:	0800decd 	.word	0x0800decd
 800de8c:	0800dedd 	.word	0x0800dedd
 800de90:	0800dedd 	.word	0x0800dedd
 800de94:	0800dedd 	.word	0x0800dedd
 800de98:	0800dedd 	.word	0x0800dedd
 800de9c:	0800dedd 	.word	0x0800dedd
 800dea0:	0800dedd 	.word	0x0800dedd
 800dea4:	0800dedd 	.word	0x0800dedd
 800dea8:	0800ded5 	.word	0x0800ded5
 800deac:	2301      	movs	r3, #1
 800deae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deb2:	e050      	b.n	800df56 <UART_SetConfig+0x7ae>
 800deb4:	2304      	movs	r3, #4
 800deb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deba:	e04c      	b.n	800df56 <UART_SetConfig+0x7ae>
 800debc:	2308      	movs	r3, #8
 800debe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dec2:	e048      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dec4:	2310      	movs	r3, #16
 800dec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deca:	e044      	b.n	800df56 <UART_SetConfig+0x7ae>
 800decc:	2320      	movs	r3, #32
 800dece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ded2:	e040      	b.n	800df56 <UART_SetConfig+0x7ae>
 800ded4:	2340      	movs	r3, #64	@ 0x40
 800ded6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deda:	e03c      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dedc:	2380      	movs	r3, #128	@ 0x80
 800dede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dee2:	e038      	b.n	800df56 <UART_SetConfig+0x7ae>
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4a71      	ldr	r2, [pc, #452]	@ (800e0b0 <UART_SetConfig+0x908>)
 800deea:	4293      	cmp	r3, r2
 800deec:	d130      	bne.n	800df50 <UART_SetConfig+0x7a8>
 800deee:	4b6f      	ldr	r3, [pc, #444]	@ (800e0ac <UART_SetConfig+0x904>)
 800def0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800def2:	f003 0307 	and.w	r3, r3, #7
 800def6:	2b05      	cmp	r3, #5
 800def8:	d826      	bhi.n	800df48 <UART_SetConfig+0x7a0>
 800defa:	a201      	add	r2, pc, #4	@ (adr r2, 800df00 <UART_SetConfig+0x758>)
 800defc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df00:	0800df19 	.word	0x0800df19
 800df04:	0800df21 	.word	0x0800df21
 800df08:	0800df29 	.word	0x0800df29
 800df0c:	0800df31 	.word	0x0800df31
 800df10:	0800df39 	.word	0x0800df39
 800df14:	0800df41 	.word	0x0800df41
 800df18:	2302      	movs	r3, #2
 800df1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df1e:	e01a      	b.n	800df56 <UART_SetConfig+0x7ae>
 800df20:	2304      	movs	r3, #4
 800df22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df26:	e016      	b.n	800df56 <UART_SetConfig+0x7ae>
 800df28:	2308      	movs	r3, #8
 800df2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df2e:	e012      	b.n	800df56 <UART_SetConfig+0x7ae>
 800df30:	2310      	movs	r3, #16
 800df32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df36:	e00e      	b.n	800df56 <UART_SetConfig+0x7ae>
 800df38:	2320      	movs	r3, #32
 800df3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df3e:	e00a      	b.n	800df56 <UART_SetConfig+0x7ae>
 800df40:	2340      	movs	r3, #64	@ 0x40
 800df42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df46:	e006      	b.n	800df56 <UART_SetConfig+0x7ae>
 800df48:	2380      	movs	r3, #128	@ 0x80
 800df4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df4e:	e002      	b.n	800df56 <UART_SetConfig+0x7ae>
 800df50:	2380      	movs	r3, #128	@ 0x80
 800df52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	4a55      	ldr	r2, [pc, #340]	@ (800e0b0 <UART_SetConfig+0x908>)
 800df5c:	4293      	cmp	r3, r2
 800df5e:	f040 80f8 	bne.w	800e152 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800df62:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800df66:	2b20      	cmp	r3, #32
 800df68:	dc46      	bgt.n	800dff8 <UART_SetConfig+0x850>
 800df6a:	2b02      	cmp	r3, #2
 800df6c:	db75      	blt.n	800e05a <UART_SetConfig+0x8b2>
 800df6e:	3b02      	subs	r3, #2
 800df70:	2b1e      	cmp	r3, #30
 800df72:	d872      	bhi.n	800e05a <UART_SetConfig+0x8b2>
 800df74:	a201      	add	r2, pc, #4	@ (adr r2, 800df7c <UART_SetConfig+0x7d4>)
 800df76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df7a:	bf00      	nop
 800df7c:	0800dfff 	.word	0x0800dfff
 800df80:	0800e05b 	.word	0x0800e05b
 800df84:	0800e007 	.word	0x0800e007
 800df88:	0800e05b 	.word	0x0800e05b
 800df8c:	0800e05b 	.word	0x0800e05b
 800df90:	0800e05b 	.word	0x0800e05b
 800df94:	0800e017 	.word	0x0800e017
 800df98:	0800e05b 	.word	0x0800e05b
 800df9c:	0800e05b 	.word	0x0800e05b
 800dfa0:	0800e05b 	.word	0x0800e05b
 800dfa4:	0800e05b 	.word	0x0800e05b
 800dfa8:	0800e05b 	.word	0x0800e05b
 800dfac:	0800e05b 	.word	0x0800e05b
 800dfb0:	0800e05b 	.word	0x0800e05b
 800dfb4:	0800e027 	.word	0x0800e027
 800dfb8:	0800e05b 	.word	0x0800e05b
 800dfbc:	0800e05b 	.word	0x0800e05b
 800dfc0:	0800e05b 	.word	0x0800e05b
 800dfc4:	0800e05b 	.word	0x0800e05b
 800dfc8:	0800e05b 	.word	0x0800e05b
 800dfcc:	0800e05b 	.word	0x0800e05b
 800dfd0:	0800e05b 	.word	0x0800e05b
 800dfd4:	0800e05b 	.word	0x0800e05b
 800dfd8:	0800e05b 	.word	0x0800e05b
 800dfdc:	0800e05b 	.word	0x0800e05b
 800dfe0:	0800e05b 	.word	0x0800e05b
 800dfe4:	0800e05b 	.word	0x0800e05b
 800dfe8:	0800e05b 	.word	0x0800e05b
 800dfec:	0800e05b 	.word	0x0800e05b
 800dff0:	0800e05b 	.word	0x0800e05b
 800dff4:	0800e04d 	.word	0x0800e04d
 800dff8:	2b40      	cmp	r3, #64	@ 0x40
 800dffa:	d02a      	beq.n	800e052 <UART_SetConfig+0x8aa>
 800dffc:	e02d      	b.n	800e05a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dffe:	f7fc fc5d 	bl	800a8bc <HAL_RCCEx_GetD3PCLK1Freq>
 800e002:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e004:	e02f      	b.n	800e066 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7fc fc6c 	bl	800a8e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e014:	e027      	b.n	800e066 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e016:	f107 0318 	add.w	r3, r7, #24
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7fc fdb8 	bl	800ab90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e020:	69fb      	ldr	r3, [r7, #28]
 800e022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e024:	e01f      	b.n	800e066 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e026:	4b21      	ldr	r3, [pc, #132]	@ (800e0ac <UART_SetConfig+0x904>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f003 0320 	and.w	r3, r3, #32
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d009      	beq.n	800e046 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e032:	4b1e      	ldr	r3, [pc, #120]	@ (800e0ac <UART_SetConfig+0x904>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	08db      	lsrs	r3, r3, #3
 800e038:	f003 0303 	and.w	r3, r3, #3
 800e03c:	4a1d      	ldr	r2, [pc, #116]	@ (800e0b4 <UART_SetConfig+0x90c>)
 800e03e:	fa22 f303 	lsr.w	r3, r2, r3
 800e042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e044:	e00f      	b.n	800e066 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e046:	4b1b      	ldr	r3, [pc, #108]	@ (800e0b4 <UART_SetConfig+0x90c>)
 800e048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e04a:	e00c      	b.n	800e066 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e04c:	4b1a      	ldr	r3, [pc, #104]	@ (800e0b8 <UART_SetConfig+0x910>)
 800e04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e050:	e009      	b.n	800e066 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e058:	e005      	b.n	800e066 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e05a:	2300      	movs	r3, #0
 800e05c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e05e:	2301      	movs	r3, #1
 800e060:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e064:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e068:	2b00      	cmp	r3, #0
 800e06a:	f000 81ee 	beq.w	800e44a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e072:	4a12      	ldr	r2, [pc, #72]	@ (800e0bc <UART_SetConfig+0x914>)
 800e074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e078:	461a      	mov	r2, r3
 800e07a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e07c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e080:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	685a      	ldr	r2, [r3, #4]
 800e086:	4613      	mov	r3, r2
 800e088:	005b      	lsls	r3, r3, #1
 800e08a:	4413      	add	r3, r2
 800e08c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e08e:	429a      	cmp	r2, r3
 800e090:	d305      	bcc.n	800e09e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d910      	bls.n	800e0c0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e09e:	2301      	movs	r3, #1
 800e0a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e0a4:	e1d1      	b.n	800e44a <UART_SetConfig+0xca2>
 800e0a6:	bf00      	nop
 800e0a8:	40011c00 	.word	0x40011c00
 800e0ac:	58024400 	.word	0x58024400
 800e0b0:	58000c00 	.word	0x58000c00
 800e0b4:	03d09000 	.word	0x03d09000
 800e0b8:	003d0900 	.word	0x003d0900
 800e0bc:	0800fb98 	.word	0x0800fb98
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	60bb      	str	r3, [r7, #8]
 800e0c6:	60fa      	str	r2, [r7, #12]
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0cc:	4ac0      	ldr	r2, [pc, #768]	@ (800e3d0 <UART_SetConfig+0xc28>)
 800e0ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0d2:	b29b      	uxth	r3, r3
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	603b      	str	r3, [r7, #0]
 800e0d8:	607a      	str	r2, [r7, #4]
 800e0da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e0e2:	f7f2 f913 	bl	800030c <__aeabi_uldivmod>
 800e0e6:	4602      	mov	r2, r0
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	4610      	mov	r0, r2
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	f04f 0200 	mov.w	r2, #0
 800e0f2:	f04f 0300 	mov.w	r3, #0
 800e0f6:	020b      	lsls	r3, r1, #8
 800e0f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e0fc:	0202      	lsls	r2, r0, #8
 800e0fe:	6979      	ldr	r1, [r7, #20]
 800e100:	6849      	ldr	r1, [r1, #4]
 800e102:	0849      	lsrs	r1, r1, #1
 800e104:	2000      	movs	r0, #0
 800e106:	460c      	mov	r4, r1
 800e108:	4605      	mov	r5, r0
 800e10a:	eb12 0804 	adds.w	r8, r2, r4
 800e10e:	eb43 0905 	adc.w	r9, r3, r5
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	2200      	movs	r2, #0
 800e118:	469a      	mov	sl, r3
 800e11a:	4693      	mov	fp, r2
 800e11c:	4652      	mov	r2, sl
 800e11e:	465b      	mov	r3, fp
 800e120:	4640      	mov	r0, r8
 800e122:	4649      	mov	r1, r9
 800e124:	f7f2 f8f2 	bl	800030c <__aeabi_uldivmod>
 800e128:	4602      	mov	r2, r0
 800e12a:	460b      	mov	r3, r1
 800e12c:	4613      	mov	r3, r2
 800e12e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e132:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e136:	d308      	bcc.n	800e14a <UART_SetConfig+0x9a2>
 800e138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e13a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e13e:	d204      	bcs.n	800e14a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e146:	60da      	str	r2, [r3, #12]
 800e148:	e17f      	b.n	800e44a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e14a:	2301      	movs	r3, #1
 800e14c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e150:	e17b      	b.n	800e44a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	69db      	ldr	r3, [r3, #28]
 800e156:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e15a:	f040 80bd 	bne.w	800e2d8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e15e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e162:	2b20      	cmp	r3, #32
 800e164:	dc48      	bgt.n	800e1f8 <UART_SetConfig+0xa50>
 800e166:	2b00      	cmp	r3, #0
 800e168:	db7b      	blt.n	800e262 <UART_SetConfig+0xaba>
 800e16a:	2b20      	cmp	r3, #32
 800e16c:	d879      	bhi.n	800e262 <UART_SetConfig+0xaba>
 800e16e:	a201      	add	r2, pc, #4	@ (adr r2, 800e174 <UART_SetConfig+0x9cc>)
 800e170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e174:	0800e1ff 	.word	0x0800e1ff
 800e178:	0800e207 	.word	0x0800e207
 800e17c:	0800e263 	.word	0x0800e263
 800e180:	0800e263 	.word	0x0800e263
 800e184:	0800e20f 	.word	0x0800e20f
 800e188:	0800e263 	.word	0x0800e263
 800e18c:	0800e263 	.word	0x0800e263
 800e190:	0800e263 	.word	0x0800e263
 800e194:	0800e21f 	.word	0x0800e21f
 800e198:	0800e263 	.word	0x0800e263
 800e19c:	0800e263 	.word	0x0800e263
 800e1a0:	0800e263 	.word	0x0800e263
 800e1a4:	0800e263 	.word	0x0800e263
 800e1a8:	0800e263 	.word	0x0800e263
 800e1ac:	0800e263 	.word	0x0800e263
 800e1b0:	0800e263 	.word	0x0800e263
 800e1b4:	0800e22f 	.word	0x0800e22f
 800e1b8:	0800e263 	.word	0x0800e263
 800e1bc:	0800e263 	.word	0x0800e263
 800e1c0:	0800e263 	.word	0x0800e263
 800e1c4:	0800e263 	.word	0x0800e263
 800e1c8:	0800e263 	.word	0x0800e263
 800e1cc:	0800e263 	.word	0x0800e263
 800e1d0:	0800e263 	.word	0x0800e263
 800e1d4:	0800e263 	.word	0x0800e263
 800e1d8:	0800e263 	.word	0x0800e263
 800e1dc:	0800e263 	.word	0x0800e263
 800e1e0:	0800e263 	.word	0x0800e263
 800e1e4:	0800e263 	.word	0x0800e263
 800e1e8:	0800e263 	.word	0x0800e263
 800e1ec:	0800e263 	.word	0x0800e263
 800e1f0:	0800e263 	.word	0x0800e263
 800e1f4:	0800e255 	.word	0x0800e255
 800e1f8:	2b40      	cmp	r3, #64	@ 0x40
 800e1fa:	d02e      	beq.n	800e25a <UART_SetConfig+0xab2>
 800e1fc:	e031      	b.n	800e262 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e1fe:	f7fa fcbf 	bl	8008b80 <HAL_RCC_GetPCLK1Freq>
 800e202:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e204:	e033      	b.n	800e26e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e206:	f7fa fcd1 	bl	8008bac <HAL_RCC_GetPCLK2Freq>
 800e20a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e20c:	e02f      	b.n	800e26e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e20e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e212:	4618      	mov	r0, r3
 800e214:	f7fc fb68 	bl	800a8e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e21a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e21c:	e027      	b.n	800e26e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e21e:	f107 0318 	add.w	r3, r7, #24
 800e222:	4618      	mov	r0, r3
 800e224:	f7fc fcb4 	bl	800ab90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e228:	69fb      	ldr	r3, [r7, #28]
 800e22a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e22c:	e01f      	b.n	800e26e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e22e:	4b69      	ldr	r3, [pc, #420]	@ (800e3d4 <UART_SetConfig+0xc2c>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f003 0320 	and.w	r3, r3, #32
 800e236:	2b00      	cmp	r3, #0
 800e238:	d009      	beq.n	800e24e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e23a:	4b66      	ldr	r3, [pc, #408]	@ (800e3d4 <UART_SetConfig+0xc2c>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	08db      	lsrs	r3, r3, #3
 800e240:	f003 0303 	and.w	r3, r3, #3
 800e244:	4a64      	ldr	r2, [pc, #400]	@ (800e3d8 <UART_SetConfig+0xc30>)
 800e246:	fa22 f303 	lsr.w	r3, r2, r3
 800e24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e24c:	e00f      	b.n	800e26e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e24e:	4b62      	ldr	r3, [pc, #392]	@ (800e3d8 <UART_SetConfig+0xc30>)
 800e250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e252:	e00c      	b.n	800e26e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e254:	4b61      	ldr	r3, [pc, #388]	@ (800e3dc <UART_SetConfig+0xc34>)
 800e256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e258:	e009      	b.n	800e26e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e25a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e260:	e005      	b.n	800e26e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e262:	2300      	movs	r3, #0
 800e264:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e266:	2301      	movs	r3, #1
 800e268:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e26c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e26e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e270:	2b00      	cmp	r3, #0
 800e272:	f000 80ea 	beq.w	800e44a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e27a:	4a55      	ldr	r2, [pc, #340]	@ (800e3d0 <UART_SetConfig+0xc28>)
 800e27c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e280:	461a      	mov	r2, r3
 800e282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e284:	fbb3 f3f2 	udiv	r3, r3, r2
 800e288:	005a      	lsls	r2, r3, #1
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	085b      	lsrs	r3, r3, #1
 800e290:	441a      	add	r2, r3
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	685b      	ldr	r3, [r3, #4]
 800e296:	fbb2 f3f3 	udiv	r3, r2, r3
 800e29a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e29e:	2b0f      	cmp	r3, #15
 800e2a0:	d916      	bls.n	800e2d0 <UART_SetConfig+0xb28>
 800e2a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e2a8:	d212      	bcs.n	800e2d0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e2aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ac:	b29b      	uxth	r3, r3
 800e2ae:	f023 030f 	bic.w	r3, r3, #15
 800e2b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2b6:	085b      	lsrs	r3, r3, #1
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	f003 0307 	and.w	r3, r3, #7
 800e2be:	b29a      	uxth	r2, r3
 800e2c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e2c2:	4313      	orrs	r3, r2
 800e2c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e2cc:	60da      	str	r2, [r3, #12]
 800e2ce:	e0bc      	b.n	800e44a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e2d0:	2301      	movs	r3, #1
 800e2d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e2d6:	e0b8      	b.n	800e44a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e2d8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e2dc:	2b20      	cmp	r3, #32
 800e2de:	dc4b      	bgt.n	800e378 <UART_SetConfig+0xbd0>
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f2c0 8087 	blt.w	800e3f4 <UART_SetConfig+0xc4c>
 800e2e6:	2b20      	cmp	r3, #32
 800e2e8:	f200 8084 	bhi.w	800e3f4 <UART_SetConfig+0xc4c>
 800e2ec:	a201      	add	r2, pc, #4	@ (adr r2, 800e2f4 <UART_SetConfig+0xb4c>)
 800e2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2f2:	bf00      	nop
 800e2f4:	0800e37f 	.word	0x0800e37f
 800e2f8:	0800e387 	.word	0x0800e387
 800e2fc:	0800e3f5 	.word	0x0800e3f5
 800e300:	0800e3f5 	.word	0x0800e3f5
 800e304:	0800e38f 	.word	0x0800e38f
 800e308:	0800e3f5 	.word	0x0800e3f5
 800e30c:	0800e3f5 	.word	0x0800e3f5
 800e310:	0800e3f5 	.word	0x0800e3f5
 800e314:	0800e39f 	.word	0x0800e39f
 800e318:	0800e3f5 	.word	0x0800e3f5
 800e31c:	0800e3f5 	.word	0x0800e3f5
 800e320:	0800e3f5 	.word	0x0800e3f5
 800e324:	0800e3f5 	.word	0x0800e3f5
 800e328:	0800e3f5 	.word	0x0800e3f5
 800e32c:	0800e3f5 	.word	0x0800e3f5
 800e330:	0800e3f5 	.word	0x0800e3f5
 800e334:	0800e3af 	.word	0x0800e3af
 800e338:	0800e3f5 	.word	0x0800e3f5
 800e33c:	0800e3f5 	.word	0x0800e3f5
 800e340:	0800e3f5 	.word	0x0800e3f5
 800e344:	0800e3f5 	.word	0x0800e3f5
 800e348:	0800e3f5 	.word	0x0800e3f5
 800e34c:	0800e3f5 	.word	0x0800e3f5
 800e350:	0800e3f5 	.word	0x0800e3f5
 800e354:	0800e3f5 	.word	0x0800e3f5
 800e358:	0800e3f5 	.word	0x0800e3f5
 800e35c:	0800e3f5 	.word	0x0800e3f5
 800e360:	0800e3f5 	.word	0x0800e3f5
 800e364:	0800e3f5 	.word	0x0800e3f5
 800e368:	0800e3f5 	.word	0x0800e3f5
 800e36c:	0800e3f5 	.word	0x0800e3f5
 800e370:	0800e3f5 	.word	0x0800e3f5
 800e374:	0800e3e7 	.word	0x0800e3e7
 800e378:	2b40      	cmp	r3, #64	@ 0x40
 800e37a:	d037      	beq.n	800e3ec <UART_SetConfig+0xc44>
 800e37c:	e03a      	b.n	800e3f4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e37e:	f7fa fbff 	bl	8008b80 <HAL_RCC_GetPCLK1Freq>
 800e382:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e384:	e03c      	b.n	800e400 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e386:	f7fa fc11 	bl	8008bac <HAL_RCC_GetPCLK2Freq>
 800e38a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e38c:	e038      	b.n	800e400 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e38e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e392:	4618      	mov	r0, r3
 800e394:	f7fc faa8 	bl	800a8e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e39c:	e030      	b.n	800e400 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e39e:	f107 0318 	add.w	r3, r7, #24
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7fc fbf4 	bl	800ab90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e3a8:	69fb      	ldr	r3, [r7, #28]
 800e3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3ac:	e028      	b.n	800e400 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e3ae:	4b09      	ldr	r3, [pc, #36]	@ (800e3d4 <UART_SetConfig+0xc2c>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	f003 0320 	and.w	r3, r3, #32
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d012      	beq.n	800e3e0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e3ba:	4b06      	ldr	r3, [pc, #24]	@ (800e3d4 <UART_SetConfig+0xc2c>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	08db      	lsrs	r3, r3, #3
 800e3c0:	f003 0303 	and.w	r3, r3, #3
 800e3c4:	4a04      	ldr	r2, [pc, #16]	@ (800e3d8 <UART_SetConfig+0xc30>)
 800e3c6:	fa22 f303 	lsr.w	r3, r2, r3
 800e3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e3cc:	e018      	b.n	800e400 <UART_SetConfig+0xc58>
 800e3ce:	bf00      	nop
 800e3d0:	0800fb98 	.word	0x0800fb98
 800e3d4:	58024400 	.word	0x58024400
 800e3d8:	03d09000 	.word	0x03d09000
 800e3dc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e3e0:	4b24      	ldr	r3, [pc, #144]	@ (800e474 <UART_SetConfig+0xccc>)
 800e3e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3e4:	e00c      	b.n	800e400 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e3e6:	4b24      	ldr	r3, [pc, #144]	@ (800e478 <UART_SetConfig+0xcd0>)
 800e3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3ea:	e009      	b.n	800e400 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e3ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e3f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3f2:	e005      	b.n	800e400 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e3fe:	bf00      	nop
    }

    if (pclk != 0U)
 800e400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e402:	2b00      	cmp	r3, #0
 800e404:	d021      	beq.n	800e44a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e40a:	4a1c      	ldr	r2, [pc, #112]	@ (800e47c <UART_SetConfig+0xcd4>)
 800e40c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e410:	461a      	mov	r2, r3
 800e412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e414:	fbb3 f2f2 	udiv	r2, r3, r2
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	685b      	ldr	r3, [r3, #4]
 800e41c:	085b      	lsrs	r3, r3, #1
 800e41e:	441a      	add	r2, r3
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	685b      	ldr	r3, [r3, #4]
 800e424:	fbb2 f3f3 	udiv	r3, r2, r3
 800e428:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e42c:	2b0f      	cmp	r3, #15
 800e42e:	d909      	bls.n	800e444 <UART_SetConfig+0xc9c>
 800e430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e432:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e436:	d205      	bcs.n	800e444 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	60da      	str	r2, [r3, #12]
 800e442:	e002      	b.n	800e44a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e444:	2301      	movs	r3, #1
 800e446:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	2201      	movs	r2, #1
 800e44e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	2201      	movs	r2, #1
 800e456:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	2200      	movs	r2, #0
 800e45e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	2200      	movs	r2, #0
 800e464:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e466:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	3748      	adds	r7, #72	@ 0x48
 800e46e:	46bd      	mov	sp, r7
 800e470:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e474:	03d09000 	.word	0x03d09000
 800e478:	003d0900 	.word	0x003d0900
 800e47c:	0800fb98 	.word	0x0800fb98

0800e480 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e480:	b480      	push	{r7}
 800e482:	b083      	sub	sp, #12
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e48c:	f003 0308 	and.w	r3, r3, #8
 800e490:	2b00      	cmp	r3, #0
 800e492:	d00a      	beq.n	800e4aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	685b      	ldr	r3, [r3, #4]
 800e49a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	430a      	orrs	r2, r1
 800e4a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4ae:	f003 0301 	and.w	r3, r3, #1
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d00a      	beq.n	800e4cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	685b      	ldr	r3, [r3, #4]
 800e4bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	430a      	orrs	r2, r1
 800e4ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4d0:	f003 0302 	and.w	r3, r3, #2
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d00a      	beq.n	800e4ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	685b      	ldr	r3, [r3, #4]
 800e4de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	430a      	orrs	r2, r1
 800e4ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4f2:	f003 0304 	and.w	r3, r3, #4
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d00a      	beq.n	800e510 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	685b      	ldr	r3, [r3, #4]
 800e500:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	430a      	orrs	r2, r1
 800e50e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e514:	f003 0310 	and.w	r3, r3, #16
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d00a      	beq.n	800e532 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	689b      	ldr	r3, [r3, #8]
 800e522:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	430a      	orrs	r2, r1
 800e530:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e536:	f003 0320 	and.w	r3, r3, #32
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d00a      	beq.n	800e554 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	689b      	ldr	r3, [r3, #8]
 800e544:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	430a      	orrs	r2, r1
 800e552:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d01a      	beq.n	800e596 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	685b      	ldr	r3, [r3, #4]
 800e566:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	430a      	orrs	r2, r1
 800e574:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e57a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e57e:	d10a      	bne.n	800e596 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	685b      	ldr	r3, [r3, #4]
 800e586:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	430a      	orrs	r2, r1
 800e594:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e59a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d00a      	beq.n	800e5b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	430a      	orrs	r2, r1
 800e5b6:	605a      	str	r2, [r3, #4]
  }
}
 800e5b8:	bf00      	nop
 800e5ba:	370c      	adds	r7, #12
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c2:	4770      	bx	lr

0800e5c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b098      	sub	sp, #96	@ 0x60
 800e5c8:	af02      	add	r7, sp, #8
 800e5ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e5d4:	f7f4 f934 	bl	8002840 <HAL_GetTick>
 800e5d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f003 0308 	and.w	r3, r3, #8
 800e5e4:	2b08      	cmp	r3, #8
 800e5e6:	d12f      	bne.n	800e648 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e5e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e5ec:	9300      	str	r3, [sp, #0]
 800e5ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f000 f88e 	bl	800e718 <UART_WaitOnFlagUntilTimeout>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d022      	beq.n	800e648 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e60a:	e853 3f00 	ldrex	r3, [r3]
 800e60e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e612:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e616:	653b      	str	r3, [r7, #80]	@ 0x50
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	461a      	mov	r2, r3
 800e61e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e620:	647b      	str	r3, [r7, #68]	@ 0x44
 800e622:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e624:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e626:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e628:	e841 2300 	strex	r3, r2, [r1]
 800e62c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e62e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e630:	2b00      	cmp	r3, #0
 800e632:	d1e6      	bne.n	800e602 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2220      	movs	r2, #32
 800e638:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2200      	movs	r2, #0
 800e640:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e644:	2303      	movs	r3, #3
 800e646:	e063      	b.n	800e710 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f003 0304 	and.w	r3, r3, #4
 800e652:	2b04      	cmp	r3, #4
 800e654:	d149      	bne.n	800e6ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e656:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e65a:	9300      	str	r3, [sp, #0]
 800e65c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e65e:	2200      	movs	r2, #0
 800e660:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f000 f857 	bl	800e718 <UART_WaitOnFlagUntilTimeout>
 800e66a:	4603      	mov	r3, r0
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d03c      	beq.n	800e6ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e678:	e853 3f00 	ldrex	r3, [r3]
 800e67c:	623b      	str	r3, [r7, #32]
   return(result);
 800e67e:	6a3b      	ldr	r3, [r7, #32]
 800e680:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e684:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	461a      	mov	r2, r3
 800e68c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e68e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e690:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e692:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e696:	e841 2300 	strex	r3, r2, [r1]
 800e69a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d1e6      	bne.n	800e670 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	3308      	adds	r3, #8
 800e6a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	e853 3f00 	ldrex	r3, [r3]
 800e6b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	f023 0301 	bic.w	r3, r3, #1
 800e6b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	3308      	adds	r3, #8
 800e6c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e6c2:	61fa      	str	r2, [r7, #28]
 800e6c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6c6:	69b9      	ldr	r1, [r7, #24]
 800e6c8:	69fa      	ldr	r2, [r7, #28]
 800e6ca:	e841 2300 	strex	r3, r2, [r1]
 800e6ce:	617b      	str	r3, [r7, #20]
   return(result);
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d1e5      	bne.n	800e6a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2220      	movs	r2, #32
 800e6da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e6e6:	2303      	movs	r3, #3
 800e6e8:	e012      	b.n	800e710 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2220      	movs	r2, #32
 800e6ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2220      	movs	r2, #32
 800e6f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2200      	movs	r2, #0
 800e704:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2200      	movs	r2, #0
 800e70a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e70e:	2300      	movs	r3, #0
}
 800e710:	4618      	mov	r0, r3
 800e712:	3758      	adds	r7, #88	@ 0x58
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}

0800e718 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b084      	sub	sp, #16
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	60f8      	str	r0, [r7, #12]
 800e720:	60b9      	str	r1, [r7, #8]
 800e722:	603b      	str	r3, [r7, #0]
 800e724:	4613      	mov	r3, r2
 800e726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e728:	e04f      	b.n	800e7ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e72a:	69bb      	ldr	r3, [r7, #24]
 800e72c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e730:	d04b      	beq.n	800e7ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e732:	f7f4 f885 	bl	8002840 <HAL_GetTick>
 800e736:	4602      	mov	r2, r0
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	1ad3      	subs	r3, r2, r3
 800e73c:	69ba      	ldr	r2, [r7, #24]
 800e73e:	429a      	cmp	r2, r3
 800e740:	d302      	bcc.n	800e748 <UART_WaitOnFlagUntilTimeout+0x30>
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d101      	bne.n	800e74c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e748:	2303      	movs	r3, #3
 800e74a:	e04e      	b.n	800e7ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f003 0304 	and.w	r3, r3, #4
 800e756:	2b00      	cmp	r3, #0
 800e758:	d037      	beq.n	800e7ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	2b80      	cmp	r3, #128	@ 0x80
 800e75e:	d034      	beq.n	800e7ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	2b40      	cmp	r3, #64	@ 0x40
 800e764:	d031      	beq.n	800e7ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	69db      	ldr	r3, [r3, #28]
 800e76c:	f003 0308 	and.w	r3, r3, #8
 800e770:	2b08      	cmp	r3, #8
 800e772:	d110      	bne.n	800e796 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	2208      	movs	r2, #8
 800e77a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e77c:	68f8      	ldr	r0, [r7, #12]
 800e77e:	f000 f95b 	bl	800ea38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	2208      	movs	r2, #8
 800e786:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	2200      	movs	r2, #0
 800e78e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e792:	2301      	movs	r3, #1
 800e794:	e029      	b.n	800e7ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	69db      	ldr	r3, [r3, #28]
 800e79c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e7a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e7a4:	d111      	bne.n	800e7ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e7ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e7b0:	68f8      	ldr	r0, [r7, #12]
 800e7b2:	f000 f941 	bl	800ea38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2220      	movs	r2, #32
 800e7ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e7c6:	2303      	movs	r3, #3
 800e7c8:	e00f      	b.n	800e7ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	69da      	ldr	r2, [r3, #28]
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	4013      	ands	r3, r2
 800e7d4:	68ba      	ldr	r2, [r7, #8]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	bf0c      	ite	eq
 800e7da:	2301      	moveq	r3, #1
 800e7dc:	2300      	movne	r3, #0
 800e7de:	b2db      	uxtb	r3, r3
 800e7e0:	461a      	mov	r2, r3
 800e7e2:	79fb      	ldrb	r3, [r7, #7]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d0a0      	beq.n	800e72a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e7e8:	2300      	movs	r3, #0
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3710      	adds	r7, #16
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
	...

0800e7f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b0a3      	sub	sp, #140	@ 0x8c
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	60f8      	str	r0, [r7, #12]
 800e7fc:	60b9      	str	r1, [r7, #8]
 800e7fe:	4613      	mov	r3, r2
 800e800:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	68ba      	ldr	r2, [r7, #8]
 800e806:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	88fa      	ldrh	r2, [r7, #6]
 800e80c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	88fa      	ldrh	r2, [r7, #6]
 800e814:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	2200      	movs	r2, #0
 800e81c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	689b      	ldr	r3, [r3, #8]
 800e822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e826:	d10e      	bne.n	800e846 <UART_Start_Receive_IT+0x52>
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	691b      	ldr	r3, [r3, #16]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d105      	bne.n	800e83c <UART_Start_Receive_IT+0x48>
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e836:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e83a:	e02d      	b.n	800e898 <UART_Start_Receive_IT+0xa4>
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	22ff      	movs	r2, #255	@ 0xff
 800e840:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e844:	e028      	b.n	800e898 <UART_Start_Receive_IT+0xa4>
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	689b      	ldr	r3, [r3, #8]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d10d      	bne.n	800e86a <UART_Start_Receive_IT+0x76>
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	691b      	ldr	r3, [r3, #16]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d104      	bne.n	800e860 <UART_Start_Receive_IT+0x6c>
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	22ff      	movs	r2, #255	@ 0xff
 800e85a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e85e:	e01b      	b.n	800e898 <UART_Start_Receive_IT+0xa4>
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	227f      	movs	r2, #127	@ 0x7f
 800e864:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e868:	e016      	b.n	800e898 <UART_Start_Receive_IT+0xa4>
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	689b      	ldr	r3, [r3, #8]
 800e86e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e872:	d10d      	bne.n	800e890 <UART_Start_Receive_IT+0x9c>
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	691b      	ldr	r3, [r3, #16]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d104      	bne.n	800e886 <UART_Start_Receive_IT+0x92>
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	227f      	movs	r2, #127	@ 0x7f
 800e880:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e884:	e008      	b.n	800e898 <UART_Start_Receive_IT+0xa4>
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	223f      	movs	r2, #63	@ 0x3f
 800e88a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e88e:	e003      	b.n	800e898 <UART_Start_Receive_IT+0xa4>
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	2200      	movs	r2, #0
 800e894:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	2200      	movs	r2, #0
 800e89c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	2222      	movs	r2, #34	@ 0x22
 800e8a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	3308      	adds	r3, #8
 800e8ae:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e8b2:	e853 3f00 	ldrex	r3, [r3]
 800e8b6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e8b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e8ba:	f043 0301 	orr.w	r3, r3, #1
 800e8be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	3308      	adds	r3, #8
 800e8c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e8cc:	673a      	str	r2, [r7, #112]	@ 0x70
 800e8ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8d0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e8d2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e8d4:	e841 2300 	strex	r3, r2, [r1]
 800e8d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800e8da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d1e3      	bne.n	800e8a8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e8e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e8e8:	d14f      	bne.n	800e98a <UART_Start_Receive_IT+0x196>
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e8f0:	88fa      	ldrh	r2, [r7, #6]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d349      	bcc.n	800e98a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	689b      	ldr	r3, [r3, #8]
 800e8fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e8fe:	d107      	bne.n	800e910 <UART_Start_Receive_IT+0x11c>
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	691b      	ldr	r3, [r3, #16]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d103      	bne.n	800e910 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	4a47      	ldr	r2, [pc, #284]	@ (800ea28 <UART_Start_Receive_IT+0x234>)
 800e90c:	675a      	str	r2, [r3, #116]	@ 0x74
 800e90e:	e002      	b.n	800e916 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	4a46      	ldr	r2, [pc, #280]	@ (800ea2c <UART_Start_Receive_IT+0x238>)
 800e914:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	691b      	ldr	r3, [r3, #16]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d01a      	beq.n	800e954 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e924:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e926:	e853 3f00 	ldrex	r3, [r3]
 800e92a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e92c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e92e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e932:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	461a      	mov	r2, r3
 800e93c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e940:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e942:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e944:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e946:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e948:	e841 2300 	strex	r3, r2, [r1]
 800e94c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800e94e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e950:	2b00      	cmp	r3, #0
 800e952:	d1e4      	bne.n	800e91e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	3308      	adds	r3, #8
 800e95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e95c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e95e:	e853 3f00 	ldrex	r3, [r3]
 800e962:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e96a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	3308      	adds	r3, #8
 800e972:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e974:	64ba      	str	r2, [r7, #72]	@ 0x48
 800e976:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e978:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e97a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e97c:	e841 2300 	strex	r3, r2, [r1]
 800e980:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e982:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e984:	2b00      	cmp	r3, #0
 800e986:	d1e5      	bne.n	800e954 <UART_Start_Receive_IT+0x160>
 800e988:	e046      	b.n	800ea18 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	689b      	ldr	r3, [r3, #8]
 800e98e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e992:	d107      	bne.n	800e9a4 <UART_Start_Receive_IT+0x1b0>
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	691b      	ldr	r3, [r3, #16]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d103      	bne.n	800e9a4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	4a24      	ldr	r2, [pc, #144]	@ (800ea30 <UART_Start_Receive_IT+0x23c>)
 800e9a0:	675a      	str	r2, [r3, #116]	@ 0x74
 800e9a2:	e002      	b.n	800e9aa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	4a23      	ldr	r2, [pc, #140]	@ (800ea34 <UART_Start_Receive_IT+0x240>)
 800e9a8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	691b      	ldr	r3, [r3, #16]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d019      	beq.n	800e9e6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ba:	e853 3f00 	ldrex	r3, [r3]
 800e9be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9c2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800e9c6:	677b      	str	r3, [r7, #116]	@ 0x74
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	461a      	mov	r2, r3
 800e9ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e9d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800e9d2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e9d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e9d8:	e841 2300 	strex	r3, r2, [r1]
 800e9dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e9de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d1e6      	bne.n	800e9b2 <UART_Start_Receive_IT+0x1be>
 800e9e4:	e018      	b.n	800ea18 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	e853 3f00 	ldrex	r3, [r3]
 800e9f2:	613b      	str	r3, [r7, #16]
   return(result);
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	f043 0320 	orr.w	r3, r3, #32
 800e9fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	461a      	mov	r2, r3
 800ea02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ea04:	623b      	str	r3, [r7, #32]
 800ea06:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea08:	69f9      	ldr	r1, [r7, #28]
 800ea0a:	6a3a      	ldr	r2, [r7, #32]
 800ea0c:	e841 2300 	strex	r3, r2, [r1]
 800ea10:	61bb      	str	r3, [r7, #24]
   return(result);
 800ea12:	69bb      	ldr	r3, [r7, #24]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d1e6      	bne.n	800e9e6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ea18:	2300      	movs	r3, #0
}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	378c      	adds	r7, #140	@ 0x8c
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea24:	4770      	bx	lr
 800ea26:	bf00      	nop
 800ea28:	0800f259 	.word	0x0800f259
 800ea2c:	0800eef9 	.word	0x0800eef9
 800ea30:	0800ed41 	.word	0x0800ed41
 800ea34:	0800eb89 	.word	0x0800eb89

0800ea38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b095      	sub	sp, #84	@ 0x54
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea48:	e853 3f00 	ldrex	r3, [r3]
 800ea4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ea4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ea54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	461a      	mov	r2, r3
 800ea5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea5e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ea60:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ea64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ea66:	e841 2300 	strex	r3, r2, [r1]
 800ea6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ea6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d1e6      	bne.n	800ea40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	3308      	adds	r3, #8
 800ea78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea7a:	6a3b      	ldr	r3, [r7, #32]
 800ea7c:	e853 3f00 	ldrex	r3, [r3]
 800ea80:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea82:	69fa      	ldr	r2, [r7, #28]
 800ea84:	4b1e      	ldr	r3, [pc, #120]	@ (800eb00 <UART_EndRxTransfer+0xc8>)
 800ea86:	4013      	ands	r3, r2
 800ea88:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	3308      	adds	r3, #8
 800ea90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ea92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ea94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea9a:	e841 2300 	strex	r3, r2, [r1]
 800ea9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eaa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d1e5      	bne.n	800ea72 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eaaa:	2b01      	cmp	r3, #1
 800eaac:	d118      	bne.n	800eae0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	e853 3f00 	ldrex	r3, [r3]
 800eaba:	60bb      	str	r3, [r7, #8]
   return(result);
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	f023 0310 	bic.w	r3, r3, #16
 800eac2:	647b      	str	r3, [r7, #68]	@ 0x44
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	461a      	mov	r2, r3
 800eaca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eacc:	61bb      	str	r3, [r7, #24]
 800eace:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ead0:	6979      	ldr	r1, [r7, #20]
 800ead2:	69ba      	ldr	r2, [r7, #24]
 800ead4:	e841 2300 	strex	r3, r2, [r1]
 800ead8:	613b      	str	r3, [r7, #16]
   return(result);
 800eada:	693b      	ldr	r3, [r7, #16]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d1e6      	bne.n	800eaae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2220      	movs	r2, #32
 800eae4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2200      	movs	r2, #0
 800eaec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800eaf4:	bf00      	nop
 800eaf6:	3754      	adds	r7, #84	@ 0x54
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafe:	4770      	bx	lr
 800eb00:	effffffe 	.word	0xeffffffe

0800eb04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b084      	sub	sp, #16
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2200      	movs	r2, #0
 800eb16:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb22:	68f8      	ldr	r0, [r7, #12]
 800eb24:	f7fe fe36 	bl	800d794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb28:	bf00      	nop
 800eb2a:	3710      	adds	r7, #16
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}

0800eb30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b088      	sub	sp, #32
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	e853 3f00 	ldrex	r3, [r3]
 800eb44:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb4c:	61fb      	str	r3, [r7, #28]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	461a      	mov	r2, r3
 800eb54:	69fb      	ldr	r3, [r7, #28]
 800eb56:	61bb      	str	r3, [r7, #24]
 800eb58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb5a:	6979      	ldr	r1, [r7, #20]
 800eb5c:	69ba      	ldr	r2, [r7, #24]
 800eb5e:	e841 2300 	strex	r3, r2, [r1]
 800eb62:	613b      	str	r3, [r7, #16]
   return(result);
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d1e6      	bne.n	800eb38 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2220      	movs	r2, #32
 800eb6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2200      	movs	r2, #0
 800eb76:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f7fe fdf7 	bl	800d76c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb7e:	bf00      	nop
 800eb80:	3720      	adds	r7, #32
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
	...

0800eb88 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b09c      	sub	sp, #112	@ 0x70
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eb96:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eba0:	2b22      	cmp	r3, #34	@ 0x22
 800eba2:	f040 80be 	bne.w	800ed22 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ebb0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ebb4:	b2d9      	uxtb	r1, r3
 800ebb6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ebba:	b2da      	uxtb	r2, r3
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ebc0:	400a      	ands	r2, r1
 800ebc2:	b2d2      	uxtb	r2, r2
 800ebc4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ebca:	1c5a      	adds	r2, r3, #1
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ebd6:	b29b      	uxth	r3, r3
 800ebd8:	3b01      	subs	r3, #1
 800ebda:	b29a      	uxth	r2, r3
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	f040 80a1 	bne.w	800ed32 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ebf8:	e853 3f00 	ldrex	r3, [r3]
 800ebfc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ebfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ec04:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	461a      	mov	r2, r3
 800ec0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ec0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ec10:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ec14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ec16:	e841 2300 	strex	r3, r2, [r1]
 800ec1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ec1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d1e6      	bne.n	800ebf0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	3308      	adds	r3, #8
 800ec28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec2c:	e853 3f00 	ldrex	r3, [r3]
 800ec30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ec32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec34:	f023 0301 	bic.w	r3, r3, #1
 800ec38:	667b      	str	r3, [r7, #100]	@ 0x64
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	3308      	adds	r3, #8
 800ec40:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ec42:	647a      	str	r2, [r7, #68]	@ 0x44
 800ec44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ec48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ec4a:	e841 2300 	strex	r3, r2, [r1]
 800ec4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ec50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d1e5      	bne.n	800ec22 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2220      	movs	r2, #32
 800ec5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2200      	movs	r2, #0
 800ec62:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2200      	movs	r2, #0
 800ec68:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	4a33      	ldr	r2, [pc, #204]	@ (800ed3c <UART_RxISR_8BIT+0x1b4>)
 800ec70:	4293      	cmp	r3, r2
 800ec72:	d01f      	beq.n	800ecb4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	685b      	ldr	r3, [r3, #4]
 800ec7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d018      	beq.n	800ecb4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec8a:	e853 3f00 	ldrex	r3, [r3]
 800ec8e:	623b      	str	r3, [r7, #32]
   return(result);
 800ec90:	6a3b      	ldr	r3, [r7, #32]
 800ec92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ec96:	663b      	str	r3, [r7, #96]	@ 0x60
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	461a      	mov	r2, r3
 800ec9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eca0:	633b      	str	r3, [r7, #48]	@ 0x30
 800eca2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eca4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eca6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eca8:	e841 2300 	strex	r3, r2, [r1]
 800ecac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ecae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d1e6      	bne.n	800ec82 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecb8:	2b01      	cmp	r3, #1
 800ecba:	d12e      	bne.n	800ed1a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	e853 3f00 	ldrex	r3, [r3]
 800ecce:	60fb      	str	r3, [r7, #12]
   return(result);
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	f023 0310 	bic.w	r3, r3, #16
 800ecd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	461a      	mov	r2, r3
 800ecde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ece0:	61fb      	str	r3, [r7, #28]
 800ece2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ece4:	69b9      	ldr	r1, [r7, #24]
 800ece6:	69fa      	ldr	r2, [r7, #28]
 800ece8:	e841 2300 	strex	r3, r2, [r1]
 800ecec:	617b      	str	r3, [r7, #20]
   return(result);
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d1e6      	bne.n	800ecc2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	69db      	ldr	r3, [r3, #28]
 800ecfa:	f003 0310 	and.w	r3, r3, #16
 800ecfe:	2b10      	cmp	r3, #16
 800ed00:	d103      	bne.n	800ed0a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	2210      	movs	r2, #16
 800ed08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ed10:	4619      	mov	r1, r3
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f7f2 f9ac 	bl	8001070 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ed18:	e00b      	b.n	800ed32 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f7fe fd30 	bl	800d780 <HAL_UART_RxCpltCallback>
}
 800ed20:	e007      	b.n	800ed32 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	699a      	ldr	r2, [r3, #24]
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	f042 0208 	orr.w	r2, r2, #8
 800ed30:	619a      	str	r2, [r3, #24]
}
 800ed32:	bf00      	nop
 800ed34:	3770      	adds	r7, #112	@ 0x70
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	58000c00 	.word	0x58000c00

0800ed40 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b09c      	sub	sp, #112	@ 0x70
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ed4e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ed58:	2b22      	cmp	r3, #34	@ 0x22
 800ed5a:	f040 80be 	bne.w	800eeda <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed64:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed6c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ed6e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800ed72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ed76:	4013      	ands	r3, r2
 800ed78:	b29a      	uxth	r2, r3
 800ed7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ed7c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed82:	1c9a      	adds	r2, r3, #2
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ed8e:	b29b      	uxth	r3, r3
 800ed90:	3b01      	subs	r3, #1
 800ed92:	b29a      	uxth	r2, r3
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eda0:	b29b      	uxth	r3, r3
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	f040 80a1 	bne.w	800eeea <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800edb0:	e853 3f00 	ldrex	r3, [r3]
 800edb4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800edb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800edbc:	667b      	str	r3, [r7, #100]	@ 0x64
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	461a      	mov	r2, r3
 800edc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800edc6:	657b      	str	r3, [r7, #84]	@ 0x54
 800edc8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800edcc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800edce:	e841 2300 	strex	r3, r2, [r1]
 800edd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800edd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d1e6      	bne.n	800eda8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	3308      	adds	r3, #8
 800ede0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ede2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ede4:	e853 3f00 	ldrex	r3, [r3]
 800ede8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800edea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edec:	f023 0301 	bic.w	r3, r3, #1
 800edf0:	663b      	str	r3, [r7, #96]	@ 0x60
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	3308      	adds	r3, #8
 800edf8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800edfa:	643a      	str	r2, [r7, #64]	@ 0x40
 800edfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edfe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ee00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ee02:	e841 2300 	strex	r3, r2, [r1]
 800ee06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ee08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d1e5      	bne.n	800edda <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2220      	movs	r2, #32
 800ee12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2200      	movs	r2, #0
 800ee20:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	4a33      	ldr	r2, [pc, #204]	@ (800eef4 <UART_RxISR_16BIT+0x1b4>)
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	d01f      	beq.n	800ee6c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	685b      	ldr	r3, [r3, #4]
 800ee32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d018      	beq.n	800ee6c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee40:	6a3b      	ldr	r3, [r7, #32]
 800ee42:	e853 3f00 	ldrex	r3, [r3]
 800ee46:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee48:	69fb      	ldr	r3, [r7, #28]
 800ee4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ee4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	461a      	mov	r2, r3
 800ee56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ee58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ee5a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ee5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee60:	e841 2300 	strex	r3, r2, [r1]
 800ee64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ee66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d1e6      	bne.n	800ee3a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee70:	2b01      	cmp	r3, #1
 800ee72:	d12e      	bne.n	800eed2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2200      	movs	r2, #0
 800ee78:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	e853 3f00 	ldrex	r3, [r3]
 800ee86:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	f023 0310 	bic.w	r3, r3, #16
 800ee8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	461a      	mov	r2, r3
 800ee96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ee98:	61bb      	str	r3, [r7, #24]
 800ee9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee9c:	6979      	ldr	r1, [r7, #20]
 800ee9e:	69ba      	ldr	r2, [r7, #24]
 800eea0:	e841 2300 	strex	r3, r2, [r1]
 800eea4:	613b      	str	r3, [r7, #16]
   return(result);
 800eea6:	693b      	ldr	r3, [r7, #16]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d1e6      	bne.n	800ee7a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	69db      	ldr	r3, [r3, #28]
 800eeb2:	f003 0310 	and.w	r3, r3, #16
 800eeb6:	2b10      	cmp	r3, #16
 800eeb8:	d103      	bne.n	800eec2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	2210      	movs	r2, #16
 800eec0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800eec8:	4619      	mov	r1, r3
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f7f2 f8d0 	bl	8001070 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eed0:	e00b      	b.n	800eeea <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f7fe fc54 	bl	800d780 <HAL_UART_RxCpltCallback>
}
 800eed8:	e007      	b.n	800eeea <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	699a      	ldr	r2, [r3, #24]
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	f042 0208 	orr.w	r2, r2, #8
 800eee8:	619a      	str	r2, [r3, #24]
}
 800eeea:	bf00      	nop
 800eeec:	3770      	adds	r7, #112	@ 0x70
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}
 800eef2:	bf00      	nop
 800eef4:	58000c00 	.word	0x58000c00

0800eef8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b0ac      	sub	sp, #176	@ 0xb0
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ef06:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	69db      	ldr	r3, [r3, #28]
 800ef10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	689b      	ldr	r3, [r3, #8]
 800ef24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ef2e:	2b22      	cmp	r3, #34	@ 0x22
 800ef30:	f040 8180 	bne.w	800f234 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ef3a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ef3e:	e123      	b.n	800f188 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef46:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ef4a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ef4e:	b2d9      	uxtb	r1, r3
 800ef50:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ef54:	b2da      	uxtb	r2, r3
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef5a:	400a      	ands	r2, r1
 800ef5c:	b2d2      	uxtb	r2, r2
 800ef5e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef64:	1c5a      	adds	r2, r3, #1
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	3b01      	subs	r3, #1
 800ef74:	b29a      	uxth	r2, r3
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	69db      	ldr	r3, [r3, #28]
 800ef82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ef86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef8a:	f003 0307 	and.w	r3, r3, #7
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d053      	beq.n	800f03a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ef92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef96:	f003 0301 	and.w	r3, r3, #1
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d011      	beq.n	800efc2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800ef9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800efa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d00b      	beq.n	800efc2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	2201      	movs	r2, #1
 800efb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800efb8:	f043 0201 	orr.w	r2, r3, #1
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800efc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800efc6:	f003 0302 	and.w	r3, r3, #2
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d011      	beq.n	800eff2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800efce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800efd2:	f003 0301 	and.w	r3, r3, #1
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d00b      	beq.n	800eff2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	2202      	movs	r2, #2
 800efe0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800efe8:	f043 0204 	orr.w	r2, r3, #4
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eff2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eff6:	f003 0304 	and.w	r3, r3, #4
 800effa:	2b00      	cmp	r3, #0
 800effc:	d011      	beq.n	800f022 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800effe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f002:	f003 0301 	and.w	r3, r3, #1
 800f006:	2b00      	cmp	r3, #0
 800f008:	d00b      	beq.n	800f022 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	2204      	movs	r2, #4
 800f010:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f018:	f043 0202 	orr.w	r2, r3, #2
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d006      	beq.n	800f03a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f7fe fbb1 	bl	800d794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2200      	movs	r2, #0
 800f036:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f040:	b29b      	uxth	r3, r3
 800f042:	2b00      	cmp	r3, #0
 800f044:	f040 80a0 	bne.w	800f188 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f04e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f050:	e853 3f00 	ldrex	r3, [r3]
 800f054:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800f056:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f058:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f05c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	461a      	mov	r2, r3
 800f066:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f06a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f06c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f06e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800f070:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f072:	e841 2300 	strex	r3, r2, [r1]
 800f076:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800f078:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d1e4      	bne.n	800f048 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	3308      	adds	r3, #8
 800f084:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f086:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f088:	e853 3f00 	ldrex	r3, [r3]
 800f08c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800f08e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f090:	4b6e      	ldr	r3, [pc, #440]	@ (800f24c <UART_RxISR_8BIT_FIFOEN+0x354>)
 800f092:	4013      	ands	r3, r2
 800f094:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	3308      	adds	r3, #8
 800f09e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f0a2:	66ba      	str	r2, [r7, #104]	@ 0x68
 800f0a4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0a6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800f0a8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f0aa:	e841 2300 	strex	r3, r2, [r1]
 800f0ae:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f0b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d1e3      	bne.n	800f07e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2220      	movs	r2, #32
 800f0ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	4a60      	ldr	r2, [pc, #384]	@ (800f250 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800f0d0:	4293      	cmp	r3, r2
 800f0d2:	d021      	beq.n	800f118 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	685b      	ldr	r3, [r3, #4]
 800f0da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d01a      	beq.n	800f118 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f0ea:	e853 3f00 	ldrex	r3, [r3]
 800f0ee:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f0f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f0f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f0f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	461a      	mov	r2, r3
 800f100:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f104:	657b      	str	r3, [r7, #84]	@ 0x54
 800f106:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f108:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f10a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f10c:	e841 2300 	strex	r3, r2, [r1]
 800f110:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f112:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f114:	2b00      	cmp	r3, #0
 800f116:	d1e4      	bne.n	800f0e2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f11c:	2b01      	cmp	r3, #1
 800f11e:	d130      	bne.n	800f182 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2200      	movs	r2, #0
 800f124:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f12c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f12e:	e853 3f00 	ldrex	r3, [r3]
 800f132:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f136:	f023 0310 	bic.w	r3, r3, #16
 800f13a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	461a      	mov	r2, r3
 800f144:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f148:	643b      	str	r3, [r7, #64]	@ 0x40
 800f14a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f14c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f14e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f150:	e841 2300 	strex	r3, r2, [r1]
 800f154:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d1e4      	bne.n	800f126 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	69db      	ldr	r3, [r3, #28]
 800f162:	f003 0310 	and.w	r3, r3, #16
 800f166:	2b10      	cmp	r3, #16
 800f168:	d103      	bne.n	800f172 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	2210      	movs	r2, #16
 800f170:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f178:	4619      	mov	r1, r3
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f7f1 ff78 	bl	8001070 <HAL_UARTEx_RxEventCallback>
 800f180:	e002      	b.n	800f188 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f7fe fafc 	bl	800d780 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f188:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d006      	beq.n	800f19e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800f190:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f194:	f003 0320 	and.w	r3, r3, #32
 800f198:	2b00      	cmp	r3, #0
 800f19a:	f47f aed1 	bne.w	800ef40 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f1a4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f1a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d049      	beq.n	800f244 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f1b6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d242      	bcs.n	800f244 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	3308      	adds	r3, #8
 800f1c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1c6:	6a3b      	ldr	r3, [r7, #32]
 800f1c8:	e853 3f00 	ldrex	r3, [r3]
 800f1cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800f1ce:	69fb      	ldr	r3, [r7, #28]
 800f1d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f1d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	3308      	adds	r3, #8
 800f1de:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f1e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f1e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f1e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f1ea:	e841 2300 	strex	r3, r2, [r1]
 800f1ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d1e3      	bne.n	800f1be <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	4a16      	ldr	r2, [pc, #88]	@ (800f254 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800f1fa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	e853 3f00 	ldrex	r3, [r3]
 800f208:	60bb      	str	r3, [r7, #8]
   return(result);
 800f20a:	68bb      	ldr	r3, [r7, #8]
 800f20c:	f043 0320 	orr.w	r3, r3, #32
 800f210:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	461a      	mov	r2, r3
 800f21a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f21e:	61bb      	str	r3, [r7, #24]
 800f220:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f222:	6979      	ldr	r1, [r7, #20]
 800f224:	69ba      	ldr	r2, [r7, #24]
 800f226:	e841 2300 	strex	r3, r2, [r1]
 800f22a:	613b      	str	r3, [r7, #16]
   return(result);
 800f22c:	693b      	ldr	r3, [r7, #16]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d1e4      	bne.n	800f1fc <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f232:	e007      	b.n	800f244 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	699a      	ldr	r2, [r3, #24]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	f042 0208 	orr.w	r2, r2, #8
 800f242:	619a      	str	r2, [r3, #24]
}
 800f244:	bf00      	nop
 800f246:	37b0      	adds	r7, #176	@ 0xb0
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}
 800f24c:	effffffe 	.word	0xeffffffe
 800f250:	58000c00 	.word	0x58000c00
 800f254:	0800eb89 	.word	0x0800eb89

0800f258 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b0ae      	sub	sp, #184	@ 0xb8
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f266:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	69db      	ldr	r3, [r3, #28]
 800f270:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	689b      	ldr	r3, [r3, #8]
 800f284:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f28e:	2b22      	cmp	r3, #34	@ 0x22
 800f290:	f040 8184 	bne.w	800f59c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f29a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f29e:	e127      	b.n	800f4f0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2a6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f2b2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800f2b6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800f2ba:	4013      	ands	r3, r2
 800f2bc:	b29a      	uxth	r2, r3
 800f2be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f2c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2c8:	1c9a      	adds	r2, r3, #2
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	3b01      	subs	r3, #1
 800f2d8:	b29a      	uxth	r2, r3
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	69db      	ldr	r3, [r3, #28]
 800f2e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f2ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f2ee:	f003 0307 	and.w	r3, r3, #7
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d053      	beq.n	800f39e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f2f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f2fa:	f003 0301 	and.w	r3, r3, #1
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d011      	beq.n	800f326 <UART_RxISR_16BIT_FIFOEN+0xce>
 800f302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d00b      	beq.n	800f326 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	2201      	movs	r2, #1
 800f314:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f31c:	f043 0201 	orr.w	r2, r3, #1
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f326:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f32a:	f003 0302 	and.w	r3, r3, #2
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d011      	beq.n	800f356 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f332:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f336:	f003 0301 	and.w	r3, r3, #1
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d00b      	beq.n	800f356 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	2202      	movs	r2, #2
 800f344:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f34c:	f043 0204 	orr.w	r2, r3, #4
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f356:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f35a:	f003 0304 	and.w	r3, r3, #4
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d011      	beq.n	800f386 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f362:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f366:	f003 0301 	and.w	r3, r3, #1
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d00b      	beq.n	800f386 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	2204      	movs	r2, #4
 800f374:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f37c:	f043 0202 	orr.w	r2, r3, #2
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d006      	beq.n	800f39e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f390:	6878      	ldr	r0, [r7, #4]
 800f392:	f7fe f9ff 	bl	800d794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2200      	movs	r2, #0
 800f39a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	f040 80a2 	bne.w	800f4f0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f3b4:	e853 3f00 	ldrex	r3, [r3]
 800f3b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f3ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f3bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f3c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	461a      	mov	r2, r3
 800f3ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f3ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f3d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f3d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f3da:	e841 2300 	strex	r3, r2, [r1]
 800f3de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f3e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d1e2      	bne.n	800f3ac <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	3308      	adds	r3, #8
 800f3ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f3f0:	e853 3f00 	ldrex	r3, [r3]
 800f3f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f3f6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f3f8:	4b6e      	ldr	r3, [pc, #440]	@ (800f5b4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800f3fa:	4013      	ands	r3, r2
 800f3fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	3308      	adds	r3, #8
 800f406:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f40a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f40c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f40e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f410:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f412:	e841 2300 	strex	r3, r2, [r1]
 800f416:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f418:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d1e3      	bne.n	800f3e6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2220      	movs	r2, #32
 800f422:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2200      	movs	r2, #0
 800f42a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2200      	movs	r2, #0
 800f430:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	4a60      	ldr	r2, [pc, #384]	@ (800f5b8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800f438:	4293      	cmp	r3, r2
 800f43a:	d021      	beq.n	800f480 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	685b      	ldr	r3, [r3, #4]
 800f442:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f446:	2b00      	cmp	r3, #0
 800f448:	d01a      	beq.n	800f480 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f452:	e853 3f00 	ldrex	r3, [r3]
 800f456:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f458:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f45a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f45e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	461a      	mov	r2, r3
 800f468:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f46c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f46e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f470:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f472:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f474:	e841 2300 	strex	r3, r2, [r1]
 800f478:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f47a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d1e4      	bne.n	800f44a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f484:	2b01      	cmp	r3, #1
 800f486:	d130      	bne.n	800f4ea <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2200      	movs	r2, #0
 800f48c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f496:	e853 3f00 	ldrex	r3, [r3]
 800f49a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f49c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f49e:	f023 0310 	bic.w	r3, r3, #16
 800f4a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f4b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800f4b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f4b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f4b8:	e841 2300 	strex	r3, r2, [r1]
 800f4bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f4be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d1e4      	bne.n	800f48e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	69db      	ldr	r3, [r3, #28]
 800f4ca:	f003 0310 	and.w	r3, r3, #16
 800f4ce:	2b10      	cmp	r3, #16
 800f4d0:	d103      	bne.n	800f4da <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	2210      	movs	r2, #16
 800f4d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f4e0:	4619      	mov	r1, r3
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f7f1 fdc4 	bl	8001070 <HAL_UARTEx_RxEventCallback>
 800f4e8:	e002      	b.n	800f4f0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f7fe f948 	bl	800d780 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f4f0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d006      	beq.n	800f506 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800f4f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f4fc:	f003 0320 	and.w	r3, r3, #32
 800f500:	2b00      	cmp	r3, #0
 800f502:	f47f aecd 	bne.w	800f2a0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f50c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f510:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800f514:	2b00      	cmp	r3, #0
 800f516:	d049      	beq.n	800f5ac <UART_RxISR_16BIT_FIFOEN+0x354>
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f51e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800f522:	429a      	cmp	r2, r3
 800f524:	d242      	bcs.n	800f5ac <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	3308      	adds	r3, #8
 800f52c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f530:	e853 3f00 	ldrex	r3, [r3]
 800f534:	623b      	str	r3, [r7, #32]
   return(result);
 800f536:	6a3b      	ldr	r3, [r7, #32]
 800f538:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f53c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	3308      	adds	r3, #8
 800f546:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f54a:	633a      	str	r2, [r7, #48]	@ 0x30
 800f54c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f54e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f552:	e841 2300 	strex	r3, r2, [r1]
 800f556:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d1e3      	bne.n	800f526 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	4a16      	ldr	r2, [pc, #88]	@ (800f5bc <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f562:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	e853 3f00 	ldrex	r3, [r3]
 800f570:	60fb      	str	r3, [r7, #12]
   return(result);
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	f043 0320 	orr.w	r3, r3, #32
 800f578:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	461a      	mov	r2, r3
 800f582:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f586:	61fb      	str	r3, [r7, #28]
 800f588:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f58a:	69b9      	ldr	r1, [r7, #24]
 800f58c:	69fa      	ldr	r2, [r7, #28]
 800f58e:	e841 2300 	strex	r3, r2, [r1]
 800f592:	617b      	str	r3, [r7, #20]
   return(result);
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d1e4      	bne.n	800f564 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f59a:	e007      	b.n	800f5ac <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	699a      	ldr	r2, [r3, #24]
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	f042 0208 	orr.w	r2, r2, #8
 800f5aa:	619a      	str	r2, [r3, #24]
}
 800f5ac:	bf00      	nop
 800f5ae:	37b8      	adds	r7, #184	@ 0xb8
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}
 800f5b4:	effffffe 	.word	0xeffffffe
 800f5b8:	58000c00 	.word	0x58000c00
 800f5bc:	0800ed41 	.word	0x0800ed41

0800f5c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f5c0:	b480      	push	{r7}
 800f5c2:	b083      	sub	sp, #12
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f5c8:	bf00      	nop
 800f5ca:	370c      	adds	r7, #12
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d2:	4770      	bx	lr

0800f5d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b083      	sub	sp, #12
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f5dc:	bf00      	nop
 800f5de:	370c      	adds	r7, #12
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e6:	4770      	bx	lr

0800f5e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f5e8:	b480      	push	{r7}
 800f5ea:	b083      	sub	sp, #12
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f5f0:	bf00      	nop
 800f5f2:	370c      	adds	r7, #12
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fa:	4770      	bx	lr

0800f5fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b085      	sub	sp, #20
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f60a:	2b01      	cmp	r3, #1
 800f60c:	d101      	bne.n	800f612 <HAL_UARTEx_DisableFifoMode+0x16>
 800f60e:	2302      	movs	r3, #2
 800f610:	e027      	b.n	800f662 <HAL_UARTEx_DisableFifoMode+0x66>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	2201      	movs	r2, #1
 800f616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2224      	movs	r2, #36	@ 0x24
 800f61e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	681a      	ldr	r2, [r3, #0]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	f022 0201 	bic.w	r2, r2, #1
 800f638:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f640:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2200      	movs	r2, #0
 800f646:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	68fa      	ldr	r2, [r7, #12]
 800f64e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2220      	movs	r2, #32
 800f654:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2200      	movs	r2, #0
 800f65c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f660:	2300      	movs	r3, #0
}
 800f662:	4618      	mov	r0, r3
 800f664:	3714      	adds	r7, #20
 800f666:	46bd      	mov	sp, r7
 800f668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66c:	4770      	bx	lr

0800f66e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f66e:	b580      	push	{r7, lr}
 800f670:	b084      	sub	sp, #16
 800f672:	af00      	add	r7, sp, #0
 800f674:	6078      	str	r0, [r7, #4]
 800f676:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f67e:	2b01      	cmp	r3, #1
 800f680:	d101      	bne.n	800f686 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f682:	2302      	movs	r3, #2
 800f684:	e02d      	b.n	800f6e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2201      	movs	r2, #1
 800f68a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2224      	movs	r2, #36	@ 0x24
 800f692:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	681a      	ldr	r2, [r3, #0]
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	f022 0201 	bic.w	r2, r2, #1
 800f6ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	689b      	ldr	r3, [r3, #8]
 800f6b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	683a      	ldr	r2, [r7, #0]
 800f6be:	430a      	orrs	r2, r1
 800f6c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f000 f8a0 	bl	800f808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	68fa      	ldr	r2, [r7, #12]
 800f6ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2220      	movs	r2, #32
 800f6d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2200      	movs	r2, #0
 800f6dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f6e0:	2300      	movs	r3, #0
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3710      	adds	r7, #16
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}

0800f6ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f6ea:	b580      	push	{r7, lr}
 800f6ec:	b084      	sub	sp, #16
 800f6ee:	af00      	add	r7, sp, #0
 800f6f0:	6078      	str	r0, [r7, #4]
 800f6f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d101      	bne.n	800f702 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f6fe:	2302      	movs	r3, #2
 800f700:	e02d      	b.n	800f75e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	2201      	movs	r2, #1
 800f706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2224      	movs	r2, #36	@ 0x24
 800f70e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	681a      	ldr	r2, [r3, #0]
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	f022 0201 	bic.w	r2, r2, #1
 800f728:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	689b      	ldr	r3, [r3, #8]
 800f730:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	683a      	ldr	r2, [r7, #0]
 800f73a:	430a      	orrs	r2, r1
 800f73c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f73e:	6878      	ldr	r0, [r7, #4]
 800f740:	f000 f862 	bl	800f808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	68fa      	ldr	r2, [r7, #12]
 800f74a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2220      	movs	r2, #32
 800f750:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2200      	movs	r2, #0
 800f758:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f75c:	2300      	movs	r3, #0
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3710      	adds	r7, #16
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}

0800f766 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f766:	b580      	push	{r7, lr}
 800f768:	b08c      	sub	sp, #48	@ 0x30
 800f76a:	af00      	add	r7, sp, #0
 800f76c:	60f8      	str	r0, [r7, #12]
 800f76e:	60b9      	str	r1, [r7, #8]
 800f770:	4613      	mov	r3, r2
 800f772:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800f774:	2300      	movs	r3, #0
 800f776:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f780:	2b20      	cmp	r3, #32
 800f782:	d13b      	bne.n	800f7fc <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d002      	beq.n	800f790 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800f78a:	88fb      	ldrh	r3, [r7, #6]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d101      	bne.n	800f794 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800f790:	2301      	movs	r3, #1
 800f792:	e034      	b.n	800f7fe <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	2201      	movs	r2, #1
 800f798:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	2200      	movs	r2, #0
 800f79e:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800f7a0:	88fb      	ldrh	r3, [r7, #6]
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	68b9      	ldr	r1, [r7, #8]
 800f7a6:	68f8      	ldr	r0, [r7, #12]
 800f7a8:	f7ff f824 	bl	800e7f4 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f7b0:	2b01      	cmp	r3, #1
 800f7b2:	d11d      	bne.n	800f7f0 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	2210      	movs	r2, #16
 800f7ba:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7c2:	69bb      	ldr	r3, [r7, #24]
 800f7c4:	e853 3f00 	ldrex	r3, [r3]
 800f7c8:	617b      	str	r3, [r7, #20]
   return(result);
 800f7ca:	697b      	ldr	r3, [r7, #20]
 800f7cc:	f043 0310 	orr.w	r3, r3, #16
 800f7d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	461a      	mov	r2, r3
 800f7d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7da:	627b      	str	r3, [r7, #36]	@ 0x24
 800f7dc:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7de:	6a39      	ldr	r1, [r7, #32]
 800f7e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f7e2:	e841 2300 	strex	r3, r2, [r1]
 800f7e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800f7e8:	69fb      	ldr	r3, [r7, #28]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d1e6      	bne.n	800f7bc <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 800f7ee:	e002      	b.n	800f7f6 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800f7f0:	2301      	movs	r3, #1
 800f7f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800f7f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f7fa:	e000      	b.n	800f7fe <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 800f7fc:	2302      	movs	r3, #2
  }
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3730      	adds	r7, #48	@ 0x30
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
	...

0800f808 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f808:	b480      	push	{r7}
 800f80a:	b085      	sub	sp, #20
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f814:	2b00      	cmp	r3, #0
 800f816:	d108      	bne.n	800f82a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2201      	movs	r2, #1
 800f81c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2201      	movs	r2, #1
 800f824:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f828:	e031      	b.n	800f88e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f82a:	2310      	movs	r3, #16
 800f82c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f82e:	2310      	movs	r3, #16
 800f830:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	689b      	ldr	r3, [r3, #8]
 800f838:	0e5b      	lsrs	r3, r3, #25
 800f83a:	b2db      	uxtb	r3, r3
 800f83c:	f003 0307 	and.w	r3, r3, #7
 800f840:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	689b      	ldr	r3, [r3, #8]
 800f848:	0f5b      	lsrs	r3, r3, #29
 800f84a:	b2db      	uxtb	r3, r3
 800f84c:	f003 0307 	and.w	r3, r3, #7
 800f850:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f852:	7bbb      	ldrb	r3, [r7, #14]
 800f854:	7b3a      	ldrb	r2, [r7, #12]
 800f856:	4911      	ldr	r1, [pc, #68]	@ (800f89c <UARTEx_SetNbDataToProcess+0x94>)
 800f858:	5c8a      	ldrb	r2, [r1, r2]
 800f85a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f85e:	7b3a      	ldrb	r2, [r7, #12]
 800f860:	490f      	ldr	r1, [pc, #60]	@ (800f8a0 <UARTEx_SetNbDataToProcess+0x98>)
 800f862:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f864:	fb93 f3f2 	sdiv	r3, r3, r2
 800f868:	b29a      	uxth	r2, r3
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f870:	7bfb      	ldrb	r3, [r7, #15]
 800f872:	7b7a      	ldrb	r2, [r7, #13]
 800f874:	4909      	ldr	r1, [pc, #36]	@ (800f89c <UARTEx_SetNbDataToProcess+0x94>)
 800f876:	5c8a      	ldrb	r2, [r1, r2]
 800f878:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f87c:	7b7a      	ldrb	r2, [r7, #13]
 800f87e:	4908      	ldr	r1, [pc, #32]	@ (800f8a0 <UARTEx_SetNbDataToProcess+0x98>)
 800f880:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f882:	fb93 f3f2 	sdiv	r3, r3, r2
 800f886:	b29a      	uxth	r2, r3
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f88e:	bf00      	nop
 800f890:	3714      	adds	r7, #20
 800f892:	46bd      	mov	sp, r7
 800f894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f898:	4770      	bx	lr
 800f89a:	bf00      	nop
 800f89c:	0800fbb0 	.word	0x0800fbb0
 800f8a0:	0800fbb8 	.word	0x0800fbb8

0800f8a4 <memset>:
 800f8a4:	4402      	add	r2, r0
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	4293      	cmp	r3, r2
 800f8aa:	d100      	bne.n	800f8ae <memset+0xa>
 800f8ac:	4770      	bx	lr
 800f8ae:	f803 1b01 	strb.w	r1, [r3], #1
 800f8b2:	e7f9      	b.n	800f8a8 <memset+0x4>

0800f8b4 <__libc_init_array>:
 800f8b4:	b570      	push	{r4, r5, r6, lr}
 800f8b6:	4d0d      	ldr	r5, [pc, #52]	@ (800f8ec <__libc_init_array+0x38>)
 800f8b8:	4c0d      	ldr	r4, [pc, #52]	@ (800f8f0 <__libc_init_array+0x3c>)
 800f8ba:	1b64      	subs	r4, r4, r5
 800f8bc:	10a4      	asrs	r4, r4, #2
 800f8be:	2600      	movs	r6, #0
 800f8c0:	42a6      	cmp	r6, r4
 800f8c2:	d109      	bne.n	800f8d8 <__libc_init_array+0x24>
 800f8c4:	4d0b      	ldr	r5, [pc, #44]	@ (800f8f4 <__libc_init_array+0x40>)
 800f8c6:	4c0c      	ldr	r4, [pc, #48]	@ (800f8f8 <__libc_init_array+0x44>)
 800f8c8:	f000 f826 	bl	800f918 <_init>
 800f8cc:	1b64      	subs	r4, r4, r5
 800f8ce:	10a4      	asrs	r4, r4, #2
 800f8d0:	2600      	movs	r6, #0
 800f8d2:	42a6      	cmp	r6, r4
 800f8d4:	d105      	bne.n	800f8e2 <__libc_init_array+0x2e>
 800f8d6:	bd70      	pop	{r4, r5, r6, pc}
 800f8d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8dc:	4798      	blx	r3
 800f8de:	3601      	adds	r6, #1
 800f8e0:	e7ee      	b.n	800f8c0 <__libc_init_array+0xc>
 800f8e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8e6:	4798      	blx	r3
 800f8e8:	3601      	adds	r6, #1
 800f8ea:	e7f2      	b.n	800f8d2 <__libc_init_array+0x1e>
 800f8ec:	0800fbc8 	.word	0x0800fbc8
 800f8f0:	0800fbc8 	.word	0x0800fbc8
 800f8f4:	0800fbc8 	.word	0x0800fbc8
 800f8f8:	0800fbcc 	.word	0x0800fbcc

0800f8fc <memcpy>:
 800f8fc:	440a      	add	r2, r1
 800f8fe:	4291      	cmp	r1, r2
 800f900:	f100 33ff 	add.w	r3, r0, #4294967295
 800f904:	d100      	bne.n	800f908 <memcpy+0xc>
 800f906:	4770      	bx	lr
 800f908:	b510      	push	{r4, lr}
 800f90a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f90e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f912:	4291      	cmp	r1, r2
 800f914:	d1f9      	bne.n	800f90a <memcpy+0xe>
 800f916:	bd10      	pop	{r4, pc}

0800f918 <_init>:
 800f918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f91a:	bf00      	nop
 800f91c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f91e:	bc08      	pop	{r3}
 800f920:	469e      	mov	lr, r3
 800f922:	4770      	bx	lr

0800f924 <_fini>:
 800f924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f926:	bf00      	nop
 800f928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f92a:	bc08      	pop	{r3}
 800f92c:	469e      	mov	lr, r3
 800f92e:	4770      	bx	lr
