
GENZERO_AGV_VH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f660  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800f930  0800f930  00010930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f9c8  0800f9c8  000109c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f9d0  0800f9d0  000109d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f9d4  0800f9d4  000109d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  24000000  0800f9d8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005c0  24000064  0800fa3c  00011064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000624  0800fa3c  00011624  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00011064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ebfc  00000000  00000000  00011092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003283  00000000  00000000  0002fc8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001848  00000000  00000000  00032f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001302  00000000  00000000  00034760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035f19  00000000  00000000  00035a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000216d4  00000000  00000000  0006b97b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00166f24  00000000  00000000  0008d04f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f3f73  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000069f8  00000000  00000000  001f3fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  001fa9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000064 	.word	0x24000064
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800f914 	.word	0x0800f914

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000068 	.word	0x24000068
 8000308:	0800f914 	.word	0x0800f914

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80005fc:	b4b0      	push	{r4, r5, r7}
 80005fe:	b08f      	sub	sp, #60	@ 0x3c
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000604:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000608:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800060a:	2307      	movs	r3, #7
 800060c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000610:	2307      	movs	r3, #7
 8000612:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000616:	2301      	movs	r3, #1
 8000618:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 800061c:	23ff      	movs	r3, #255	@ 0xff
 800061e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000622:	2364      	movs	r3, #100	@ 0x64
 8000624:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000628:	2308      	movs	r3, #8
 800062a:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	461d      	mov	r5, r3
 8000630:	f107 040c 	add.w	r4, r7, #12
 8000634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800063a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800063c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000640:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	373c      	adds	r7, #60	@ 0x3c
 8000648:	46bd      	mov	sp, r7
 800064a:	bcb0      	pop	{r4, r5, r7}
 800064c:	4770      	bx	lr

0800064e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800064e:	b580      	push	{r7, lr}
 8000650:	b084      	sub	sp, #16
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000658:	2101      	movs	r1, #1
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f9fd 	bl	8000a5a <LoRa_read>
 8000660:	4603      	mov	r3, r0
 8000662:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000664:	7bbb      	ldrb	r3, [r7, #14]
 8000666:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d107      	bne.n	800067e <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	f023 0307 	bic.w	r3, r3, #7
 8000674:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
 800067c:	e03e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d10c      	bne.n	800069e <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000688:	f023 0307 	bic.w	r3, r3, #7
 800068c:	b25b      	sxtb	r3, r3
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	b25b      	sxtb	r3, r3
 8000694:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2201      	movs	r2, #1
 800069a:	61da      	str	r2, [r3, #28]
 800069c:	e02e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	d10c      	bne.n	80006be <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80006a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006a8:	f023 0307 	bic.w	r3, r3, #7
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	f043 0303 	orr.w	r3, r3, #3
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2203      	movs	r2, #3
 80006ba:	61da      	str	r2, [r3, #28]
 80006bc:	e01e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	d10c      	bne.n	80006de <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80006c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006c8:	f023 0307 	bic.w	r3, r3, #7
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	f043 0305 	orr.w	r3, r3, #5
 80006d2:	b25b      	sxtb	r3, r3
 80006d4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2205      	movs	r2, #5
 80006da:	61da      	str	r2, [r3, #28]
 80006dc:	e00e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	2b06      	cmp	r3, #6
 80006e2:	d10b      	bne.n	80006fc <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80006e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006e8:	f023 0307 	bic.w	r3, r3, #7
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	f043 0306 	orr.w	r3, r3, #6
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2206      	movs	r2, #6
 80006fa:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	461a      	mov	r2, r3
 8000700:	2101      	movs	r1, #1
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f000 f9c3 	bl	8000a8e <LoRa_write>
	//HAL_Delay(10);
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4613      	mov	r3, r2
 800071e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	889b      	ldrh	r3, [r3, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	4619      	mov	r1, r3
 800072c:	f007 faf2 	bl	8007d14 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	6998      	ldr	r0, [r3, #24]
 8000734:	88fa      	ldrh	r2, [r7, #6]
 8000736:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800073a:	68b9      	ldr	r1, [r7, #8]
 800073c:	f00a ffe2 	bl	800b704 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000740:	bf00      	nop
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4618      	mov	r0, r3
 8000748:	f00b fc3c 	bl	800bfc4 <HAL_SPI_GetState>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	d1f7      	bne.n	8000742 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6998      	ldr	r0, [r3, #24]
 8000756:	8b3a      	ldrh	r2, [r7, #24]
 8000758:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800075c:	6839      	ldr	r1, [r7, #0]
 800075e:	f00b f9bf 	bl	800bae0 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000762:	bf00      	nop
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4618      	mov	r0, r3
 800076a:	f00b fc2b 	bl	800bfc4 <HAL_SPI_GetState>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d1f7      	bne.n	8000764 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	889b      	ldrh	r3, [r3, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	4619      	mov	r1, r3
 8000780:	f007 fac8 	bl	8007d14 <HAL_GPIO_WritePin>
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	4613      	mov	r3, r2
 800079a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	889b      	ldrh	r3, [r3, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	f007 fab4 	bl	8007d14 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	6998      	ldr	r0, [r3, #24]
 80007b0:	88fa      	ldrh	r2, [r7, #6]
 80007b2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007b6:	68b9      	ldr	r1, [r7, #8]
 80007b8:	f00a ffa4 	bl	800b704 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007bc:	bf00      	nop
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00b fbfe 	bl	800bfc4 <HAL_SPI_GetState>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d1f7      	bne.n	80007be <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6998      	ldr	r0, [r3, #24]
 80007d2:	8b3a      	ldrh	r2, [r7, #24]
 80007d4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007d8:	6839      	ldr	r1, [r7, #0]
 80007da:	f00a ff93 	bl	800b704 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007de:	bf00      	nop
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f00b fbed 	bl	800bfc4 <HAL_SPI_GetState>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d1f7      	bne.n	80007e0 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	889b      	ldrh	r3, [r3, #4]
 80007f8:	2201      	movs	r2, #1
 80007fa:	4619      	mov	r1, r3
 80007fc:	f007 fa8a 	bl	8007d14 <HAL_GPIO_WritePin>
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000814:	2126      	movs	r1, #38	@ 0x26
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 f91f 	bl	8000a5a <LoRa_read>
 800081c:	4603      	mov	r3, r0
 800081e:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d004      	beq.n	8000830 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e003      	b.n	8000838 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000830:	7bbb      	ldrb	r3, [r7, #14]
 8000832:	f023 0308 	bic.w	r3, r3, #8
 8000836:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	461a      	mov	r2, r3
 800083c:	2126      	movs	r1, #38	@ 0x26
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f000 f925 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000844:	200a      	movs	r0, #10
 8000846:	f002 f893 	bl	8002970 <HAL_Delay>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000854:	b580      	push	{r7, lr}
 8000856:	b096      	sub	sp, #88	@ 0x58
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 800085c:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <LoRa_setAutoLDO+0x64>)
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4611      	mov	r1, r2
 8000864:	2250      	movs	r2, #80	@ 0x50
 8000866:	4618      	mov	r0, r3
 8000868:	f00f f846 	bl	800f8f8 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000872:	461a      	mov	r2, r3
 8000874:	2301      	movs	r3, #1
 8000876:	4093      	lsls	r3, r2
 8000878:	ee07 3a90 	vmov	s15, r3
 800087c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	3358      	adds	r3, #88	@ 0x58
 800088a:	443b      	add	r3, r7
 800088c:	3b50      	subs	r3, #80	@ 0x50
 800088e:	ed93 6b00 	vldr	d6, [r3]
 8000892:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000896:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800089a:	ee17 3a90 	vmov	r3, s15
 800089e:	2b10      	cmp	r3, #16
 80008a0:	bfcc      	ite	gt
 80008a2:	2301      	movgt	r3, #1
 80008a4:	2300      	movle	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	4619      	mov	r1, r3
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffac 	bl	8000808 <LoRa_setLowDaraRateOptimization>
}
 80008b0:	bf00      	nop
 80008b2:	3758      	adds	r7, #88	@ 0x58
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	0800f930 	.word	0x0800f930

080008bc <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	04db      	lsls	r3, r3, #19
 80008ca:	115b      	asrs	r3, r3, #5
 80008cc:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	0c1b      	lsrs	r3, r3, #16
 80008d2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80008d4:	7afb      	ldrb	r3, [r7, #11]
 80008d6:	461a      	mov	r2, r3
 80008d8:	2106      	movs	r1, #6
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 f8d7 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 80008e0:	2005      	movs	r0, #5
 80008e2:	f002 f845 	bl	8002970 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80008ec:	7afb      	ldrb	r3, [r7, #11]
 80008ee:	461a      	mov	r2, r3
 80008f0:	2107      	movs	r1, #7
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 f8cb 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 80008f8:	2005      	movs	r0, #5
 80008fa:	f002 f839 	bl	8002970 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000902:	7afb      	ldrb	r3, [r7, #11]
 8000904:	461a      	mov	r2, r3
 8000906:	2108      	movs	r1, #8
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f8c0 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 800090e:	2005      	movs	r0, #5
 8000910:	f002 f82e 	bl	8002970 <HAL_Delay>
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	2b0c      	cmp	r3, #12
 800092a:	dd01      	ble.n	8000930 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 800092c:	230c      	movs	r3, #12
 800092e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	2b06      	cmp	r3, #6
 8000934:	dc01      	bgt.n	800093a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000936:	2307      	movs	r3, #7
 8000938:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800093a:	211e      	movs	r1, #30
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 f88c 	bl	8000a5a <LoRa_read>
 8000942:	4603      	mov	r3, r0
 8000944:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000946:	200a      	movs	r0, #10
 8000948:	f002 f812 	bl	8002970 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	011b      	lsls	r3, r3, #4
 8000952:	b2da      	uxtb	r2, r3
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4413      	add	r3, r2
 800095e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000960:	7bbb      	ldrb	r3, [r7, #14]
 8000962:	461a      	mov	r2, r3
 8000964:	211e      	movs	r1, #30
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f891 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 800096c:	200a      	movs	r0, #10
 800096e:	f001 ffff 	bl	8002970 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ff6e 	bl	8000854 <LoRa_setAutoLDO>
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	461a      	mov	r2, r3
 8000990:	2109      	movs	r1, #9
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 f87b 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000998:	200a      	movs	r0, #10
 800099a:	f001 ffe9 	bl	8002970 <HAL_Delay>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	2b2c      	cmp	r3, #44	@ 0x2c
 80009bc:	d801      	bhi.n	80009c2 <LoRa_setOCP+0x1a>
		current = 45;
 80009be:	232d      	movs	r3, #45	@ 0x2d
 80009c0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	2bf0      	cmp	r3, #240	@ 0xf0
 80009c6:	d901      	bls.n	80009cc <LoRa_setOCP+0x24>
		current = 240;
 80009c8:	23f0      	movs	r3, #240	@ 0xf0
 80009ca:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	2b78      	cmp	r3, #120	@ 0x78
 80009d0:	d809      	bhi.n	80009e6 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80009d2:	78fb      	ldrb	r3, [r7, #3]
 80009d4:	3b2d      	subs	r3, #45	@ 0x2d
 80009d6:	4a12      	ldr	r2, [pc, #72]	@ (8000a20 <LoRa_setOCP+0x78>)
 80009d8:	fb82 1203 	smull	r1, r2, r2, r3
 80009dc:	1052      	asrs	r2, r2, #1
 80009de:	17db      	asrs	r3, r3, #31
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	73fb      	strb	r3, [r7, #15]
 80009e4:	e00b      	b.n	80009fe <LoRa_setOCP+0x56>
	else if(current <= 240)
 80009e6:	78fb      	ldrb	r3, [r7, #3]
 80009e8:	2bf0      	cmp	r3, #240	@ 0xf0
 80009ea:	d808      	bhi.n	80009fe <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	331e      	adds	r3, #30
 80009f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a20 <LoRa_setOCP+0x78>)
 80009f2:	fb82 1203 	smull	r1, r2, r2, r3
 80009f6:	1092      	asrs	r2, r2, #2
 80009f8:	17db      	asrs	r3, r3, #31
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	3320      	adds	r3, #32
 8000a02:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	461a      	mov	r2, r3
 8000a08:	210b      	movs	r1, #11
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f83f 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000a10:	200a      	movs	r0, #10
 8000a12:	f001 ffad 	bl	8002970 <HAL_Delay>
}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	66666667 	.word	0x66666667

08000a24 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000a2c:	211e      	movs	r1, #30
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f000 f813 	bl	8000a5a <LoRa_read>
 8000a34:	4603      	mov	r3, r0
 8000a36:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	f043 0307 	orr.w	r3, r3, #7
 8000a3e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000a40:	7bbb      	ldrb	r3, [r7, #14]
 8000a42:	461a      	mov	r2, r3
 8000a44:	211e      	movs	r1, #30
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 f821 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000a4c:	200a      	movs	r0, #10
 8000a4e:	f001 ff8f 	bl	8002970 <HAL_Delay>
}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af02      	add	r7, sp, #8
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	460b      	mov	r3, r1
 8000a64:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000a66:	78fb      	ldrb	r3, [r7, #3]
 8000a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000a70:	f107 030f 	add.w	r3, r7, #15
 8000a74:	f107 010e 	add.w	r1, r7, #14
 8000a78:	2201      	movs	r2, #1
 8000a7a:	9200      	str	r2, [sp, #0]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff fe46 	bl	8000710 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af02      	add	r7, sp, #8
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	460b      	mov	r3, r1
 8000a98:	70fb      	strb	r3, [r7, #3]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000a9e:	78fb      	ldrb	r3, [r7, #3]
 8000aa0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000aa8:	78bb      	ldrb	r3, [r7, #2]
 8000aaa:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000aac:	f107 030f 	add.w	r3, r7, #15
 8000ab0:	f107 010e 	add.w	r1, r7, #14
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	9200      	str	r2, [sp, #0]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fe66 	bl	800078c <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	72fb      	strb	r3, [r7, #11]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8000adc:	7afb      	ldrb	r3, [r7, #11]
 8000ade:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	6818      	ldr	r0, [r3, #0]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	889b      	ldrh	r3, [r3, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	4619      	mov	r1, r3
 8000af2:	f007 f90f 	bl	8007d14 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	6998      	ldr	r0, [r3, #24]
 8000afa:	f107 0117 	add.w	r1, r7, #23
 8000afe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b02:	2201      	movs	r2, #1
 8000b04:	f00a fdfe 	bl	800b704 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000b08:	bf00      	nop
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f00b fa58 	bl	800bfc4 <HAL_SPI_GetState>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d1f7      	bne.n	8000b0a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	6998      	ldr	r0, [r3, #24]
 8000b1e:	7abb      	ldrb	r3, [r7, #10]
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	f00a fdec 	bl	800b704 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000b2c:	bf00      	nop
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f00b fa46 	bl	800bfc4 <HAL_SPI_GetState>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d1f7      	bne.n	8000b2e <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	6818      	ldr	r0, [r3, #0]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	889b      	ldrh	r3, [r3, #4]
 8000b46:	2201      	movs	r2, #1
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f007 f8e3 	bl	8007d14 <HAL_GPIO_WritePin>
}
 8000b4e:	bf00      	nop
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]

	return 1;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	4611      	mov	r1, r2
 8000b78:	461a      	mov	r2, r3
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	71fb      	strb	r3, [r7, #7]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000b88:	2101      	movs	r1, #1
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff fd5f 	bl	800064e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000b90:	210e      	movs	r1, #14
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f7ff ff61 	bl	8000a5a <LoRa_read>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000b9c:	7cfb      	ldrb	r3, [r7, #19]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	210d      	movs	r1, #13
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f7ff ff73 	bl	8000a8e <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	461a      	mov	r2, r3
 8000bac:	2122      	movs	r1, #34	@ 0x22
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f7ff ff6d 	bl	8000a8e <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	2100      	movs	r1, #0
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f7ff ff84 	bl	8000ac8 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000bc0:	2103      	movs	r1, #3
 8000bc2:	68f8      	ldr	r0, [r7, #12]
 8000bc4:	f7ff fd43 	bl	800064e <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000bc8:	2112      	movs	r1, #18
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	f7ff ff45 	bl	8000a5a <LoRa_read>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8000bd4:	7cfb      	ldrb	r3, [r7, #19]
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d00a      	beq.n	8000bf4 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000bde:	22ff      	movs	r2, #255	@ 0xff
 8000be0:	2112      	movs	r1, #18
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f7ff ff53 	bl	8000a8e <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000be8:	6979      	ldr	r1, [r7, #20]
 8000bea:	68f8      	ldr	r0, [r7, #12]
 8000bec:	f7ff fd2f 	bl	800064e <LoRa_gotoMode>
			return 1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e00f      	b.n	8000c14 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8000bf4:	88bb      	ldrh	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	80bb      	strh	r3, [r7, #4]
 8000bfa:	88bb      	ldrh	r3, [r7, #4]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d105      	bne.n	8000c0c <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8000c00:	6979      	ldr	r1, [r7, #20]
 8000c02:	68f8      	ldr	r0, [r7, #12]
 8000c04:	f7ff fd23 	bl	800064e <LoRa_gotoMode>
				return 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e003      	b.n	8000c14 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f001 feaf 	bl	8002970 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000c12:	e7d9      	b.n	8000bc8 <LoRa_transmit+0x5c>
	}
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000c24:	2105      	movs	r1, #5
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff fd11 	bl	800064e <LoRa_gotoMode>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b089      	sub	sp, #36	@ 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	e007      	b.n	8000c5c <LoRa_receive+0x28>
		data[i]=0;
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	4413      	add	r3, r2
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dbf3      	blt.n	8000c4c <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000c64:	2101      	movs	r1, #1
 8000c66:	68f8      	ldr	r0, [r7, #12]
 8000c68:	f7ff fcf1 	bl	800064e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000c6c:	2112      	movs	r1, #18
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f7ff fef3 	bl	8000a5a <LoRa_read>
 8000c74:	4603      	mov	r3, r0
 8000c76:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000c78:	7cfb      	ldrb	r3, [r7, #19]
 8000c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d02f      	beq.n	8000ce2 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000c82:	22ff      	movs	r2, #255	@ 0xff
 8000c84:	2112      	movs	r1, #18
 8000c86:	68f8      	ldr	r0, [r7, #12]
 8000c88:	f7ff ff01 	bl	8000a8e <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000c8c:	2113      	movs	r1, #19
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f7ff fee3 	bl	8000a5a <LoRa_read>
 8000c94:	4603      	mov	r3, r0
 8000c96:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000c98:	2110      	movs	r1, #16
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f7ff fedd 	bl	8000a5a <LoRa_read>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000ca4:	7cfb      	ldrb	r3, [r7, #19]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	210d      	movs	r1, #13
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f7ff feef 	bl	8000a8e <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000cb0:	7cba      	ldrb	r2, [r7, #18]
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	bf28      	it	cs
 8000cb8:	4613      	movcs	r3, r2
 8000cba:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	e00b      	b.n	8000cda <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	18d4      	adds	r4, r2, r3
 8000cc8:	2100      	movs	r1, #0
 8000cca:	68f8      	ldr	r0, [r7, #12]
 8000ccc:	f7ff fec5 	bl	8000a5a <LoRa_read>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	7ffb      	ldrb	r3, [r7, #31]
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	dbef      	blt.n	8000cc2 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000ce2:	2105      	movs	r1, #5
 8000ce4:	68f8      	ldr	r0, [r7, #12]
 8000ce6:	f7ff fcb2 	bl	800064e <LoRa_gotoMode>
    return min;
 8000cea:	7ffb      	ldrb	r3, [r7, #31]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3724      	adds	r7, #36	@ 0x24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd90      	pop	{r4, r7, pc}

08000cf4 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff2a 	bl	8000b56 <LoRa_isvalid>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 8096 	beq.w	8000e36 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff fc9e 	bl	800064e <LoRa_gotoMode>
			HAL_Delay(10);
 8000d12:	200a      	movs	r0, #10
 8000d14:	f001 fe2c 	bl	8002970 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000d18:	2101      	movs	r1, #1
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff fe9d 	bl	8000a5a <LoRa_read>
 8000d20:	4603      	mov	r3, r0
 8000d22:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000d24:	200a      	movs	r0, #10
 8000d26:	f001 fe23 	bl	8002970 <HAL_Delay>
			data = read | 0x80;
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d30:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000d32:	7bbb      	ldrb	r3, [r7, #14]
 8000d34:	461a      	mov	r2, r3
 8000d36:	2101      	movs	r1, #1
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff fea8 	bl	8000a8e <LoRa_write>
			HAL_Delay(100);
 8000d3e:	2064      	movs	r0, #100	@ 0x64
 8000d40:	f001 fe16 	bl	8002970 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a1b      	ldr	r3, [r3, #32]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff fdb6 	bl	80008bc <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000d56:	4619      	mov	r1, r3
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff fe11 	bl	8000980 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000d64:	4619      	mov	r1, r3
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff fe1e 	bl	80009a8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000d6c:	2223      	movs	r2, #35	@ 0x23
 8000d6e:	210c      	movs	r1, #12
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff fe8c 	bl	8000a8e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff fe54 	bl	8000a24 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d82:	4619      	mov	r1, r3
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff fdc9 	bl	800091c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000d8a:	22ff      	movs	r2, #255	@ 0xff
 8000d8c:	211f      	movs	r1, #31
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff fe7d 	bl	8000a8e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	4413      	add	r3, r2
 8000dae:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000db0:	7bbb      	ldrb	r3, [r7, #14]
 8000db2:	461a      	mov	r2, r3
 8000db4:	211d      	movs	r1, #29
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff fe69 	bl	8000a8e <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff fd49 	bl	8000854 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000dc6:	0a1b      	lsrs	r3, r3, #8
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	461a      	mov	r2, r3
 8000dce:	2120      	movs	r1, #32
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff fe5c 	bl	8000a8e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	461a      	mov	r2, r3
 8000dde:	2121      	movs	r1, #33	@ 0x21
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff fe54 	bl	8000a8e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000de6:	2140      	movs	r1, #64	@ 0x40
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff fe36 	bl	8000a5a <LoRa_read>
 8000dee:	4603      	mov	r3, r0
 8000df0:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8000df8:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	2140      	movs	r1, #64	@ 0x40
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff fe44 	bl	8000a8e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000e06:	2101      	movs	r1, #1
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff fc20 	bl	800064e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2201      	movs	r2, #1
 8000e12:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000e14:	200a      	movs	r0, #10
 8000e16:	f001 fdab 	bl	8002970 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000e1a:	2142      	movs	r1, #66	@ 0x42
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff fe1c 	bl	8000a5a <LoRa_read>
 8000e22:	4603      	mov	r3, r0
 8000e24:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	2b12      	cmp	r3, #18
 8000e2a:	d101      	bne.n	8000e30 <LoRa_init+0x13c>
				return LORA_OK;
 8000e2c:	23c8      	movs	r3, #200	@ 0xc8
 8000e2e:	e004      	b.n	8000e3a <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8000e30:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8000e34:	e001      	b.n	8000e3a <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8000e36:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <ir_array_init>:
                   int      *ir_sen_read_line_old_val,
          volatile uint8_t  *ir_sen_on_line_total_num,
          volatile uint8_t  *ir_sen_on_line_mid_num,
		  volatile uint8_t  *ir_sen_on_line_left_num,
          volatile uint8_t  *ir_sen_on_line_right_num,
             const uint16_t *ir_sen_threshold){
 8000e42:	b480      	push	{r7}
 8000e44:	b087      	sub	sp, #28
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	603b      	str	r3, [r7, #0]

    for(uint8_t i = 0; i < 10; i++){
 8000e50:	2300      	movs	r3, #0
 8000e52:	75fb      	strb	r3, [r7, #23]
 8000e54:	e025      	b.n	8000ea2 <ir_array_init+0x60>
        //ir_struct->ir_sen_val_dma[i] = ir_sen_val_dma[i];
        ir_struct->ir_sen_val_cal[i] = ir_sen_val_cal[i];
 8000e56:	7dfb      	ldrb	r3, [r7, #23]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	441a      	add	r2, r3
 8000e5e:	7dfb      	ldrb	r3, [r7, #23]
 8000e60:	8812      	ldrh	r2, [r2, #0]
 8000e62:	b291      	uxth	r1, r2
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	3308      	adds	r3, #8
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	460a      	mov	r2, r1
 8000e6e:	809a      	strh	r2, [r3, #4]
        ir_struct->ir_sen_max_val[i] = ir_sen_max_val[i];
 8000e70:	7dfb      	ldrb	r3, [r7, #23]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	7dfa      	ldrb	r2, [r7, #23]
 8000e7a:	8819      	ldrh	r1, [r3, #0]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	3214      	adds	r2, #20
 8000e80:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        ir_struct->ir_sen_min_val[i] = ir_sen_min_val[i];
 8000e84:	7dfb      	ldrb	r3, [r7, #23]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	441a      	add	r2, r3
 8000e8c:	7dfb      	ldrb	r3, [r7, #23]
 8000e8e:	8811      	ldrh	r1, [r2, #0]
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	331c      	adds	r3, #28
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	4413      	add	r3, r2
 8000e98:	460a      	mov	r2, r1
 8000e9a:	809a      	strh	r2, [r3, #4]
    for(uint8_t i = 0; i < 10; i++){
 8000e9c:	7dfb      	ldrb	r3, [r7, #23]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	75fb      	strb	r3, [r7, #23]
 8000ea2:	7dfb      	ldrb	r3, [r7, #23]
 8000ea4:	2b09      	cmp	r3, #9
 8000ea6:	d9d6      	bls.n	8000e56 <ir_array_init+0x14>
    }
    ir_struct->ir_sen_channel_num = *ir_sen_channel_num;
 8000ea8:	6a3b      	ldr	r3, [r7, #32]
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    ir_struct->ir_sen_read_line_val = *ir_sen_read_line_val;
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    ir_struct->ir_sen_read_line_old_val = *ir_sen_read_line_old_val;
 8000ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	655a      	str	r2, [r3, #84]	@ 0x54
    ir_struct->ir_sen_on_line_total_num = *ir_sen_on_line_total_num;
 8000ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    ir_struct->ir_sen_on_line_mid_num = *ir_sen_on_line_mid_num;
 8000ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    ir_struct->ir_sen_on_line_left_num = *ir_sen_on_line_left_num;
 8000ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
    ir_struct->ir_sen_on_line_right_num = *ir_sen_on_line_right_num;
 8000eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
    ir_struct->ir_sen_threshold = *ir_sen_threshold;
 8000ef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ef8:	881a      	ldrh	r2, [r3, #0]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

}
 8000f00:	bf00      	nop
 8000f02:	371c      	adds	r7, #28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <Line_Sensor_Calculation>:

void Line_Sensor_Calculation(ir_array *ir_struct){
 8000f0c:	b480      	push	{r7}
 8000f0e:	b08b      	sub	sp, #44	@ 0x2c
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
    uint8_t i, on_line = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint32_t avg = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
    uint32_t sum = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    uint16_t value;
    uint8_t on_sensor_total_number = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	76fb      	strb	r3, [r7, #27]

    uint8_t middle_on_line = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	76bb      	strb	r3, [r7, #26]
    uint8_t left_on_line = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	767b      	strb	r3, [r7, #25]
    uint8_t right_on_line = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	763b      	strb	r3, [r7, #24]


    for(i = 0; i < ir_struct->ir_sen_channel_num; i++){
 8000f32:	2300      	movs	r3, #0
 8000f34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f38:	e092      	b.n	8001060 <Line_Sensor_Calculation+0x154>
        uint16_t calmin, calmax;
        uint16_t denominator;
        calmax = ir_struct->ir_sen_max_val[i];
 8000f3a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3214      	adds	r2, #20
 8000f42:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f46:	827b      	strh	r3, [r7, #18]
        calmin = ir_struct->ir_sen_min_val[i];
 8000f48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	331c      	adds	r3, #28
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	4413      	add	r3, r2
 8000f54:	889b      	ldrh	r3, [r3, #4]
 8000f56:	823b      	strh	r3, [r7, #16]

        denominator = calmax - calmin;
 8000f58:	8a7a      	ldrh	r2, [r7, #18]
 8000f5a:	8a3b      	ldrh	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	81fb      	strh	r3, [r7, #14]

        int x = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
        if(denominator != 0){
 8000f64:	89fb      	ldrh	r3, [r7, #14]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d010      	beq.n	8000f8c <Line_Sensor_Calculation+0x80>
            x = (((signed long)ir_struct->ir_sen_val_dma[i]) - calmin) * 1000/denominator;
 8000f6a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	461a      	mov	r2, r3
 8000f78:	8a3b      	ldrh	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f80:	fb03 f202 	mul.w	r2, r3, r2
 8000f84:	89fb      	ldrh	r3, [r7, #14]
 8000f86:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f8a:	617b      	str	r3, [r7, #20]
        }
        if(x <0){
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	da01      	bge.n	8000f96 <Line_Sensor_Calculation+0x8a>
            x = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
        }
        if(x>1000){
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f9c:	dd02      	ble.n	8000fa4 <Line_Sensor_Calculation+0x98>
            x = 1000;
 8000f9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa2:	617b      	str	r3, [r7, #20]
        }
        value = (1000-x);
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8000fac:	81bb      	strh	r3, [r7, #12]
        ir_struct->ir_sen_val_cal[i] = value;
 8000fae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	3308      	adds	r3, #8
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4413      	add	r3, r2
 8000fba:	89ba      	ldrh	r2, [r7, #12]
 8000fbc:	809a      	strh	r2, [r3, #4]

        // start read line number section
        if(value > 600){
 8000fbe:	89bb      	ldrh	r3, [r7, #12]
 8000fc0:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000fc4:	d902      	bls.n	8000fcc <Line_Sensor_Calculation+0xc0>
            on_line = 1;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }
        if(value > 200){
 8000fcc:	89bb      	ldrh	r3, [r7, #12]
 8000fce:	2bc8      	cmp	r3, #200	@ 0xc8
 8000fd0:	d910      	bls.n	8000ff4 <Line_Sensor_Calculation+0xe8>
            avg += (long)(value)*(i*1000);
 8000fd2:	89bb      	ldrh	r3, [r7, #12]
 8000fd4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000fd8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fdc:	fb01 f202 	mul.w	r2, r1, r2
 8000fe0:	fb02 f303 	mul.w	r3, r2, r3
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	4413      	add	r3, r2
 8000fea:	623b      	str	r3, [r7, #32]
            sum += value;
 8000fec:	89bb      	ldrh	r3, [r7, #12]
 8000fee:	69fa      	ldr	r2, [r7, #28]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	61fb      	str	r3, [r7, #28]
        }
        // end read line number section

        // start on line sensor calculation
        if(value > ir_struct->ir_sen_threshold){
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8000ffa:	89ba      	ldrh	r2, [r7, #12]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d923      	bls.n	8001048 <Line_Sensor_Calculation+0x13c>
            on_sensor_total_number++;
 8001000:	7efb      	ldrb	r3, [r7, #27]
 8001002:	3301      	adds	r3, #1
 8001004:	76fb      	strb	r3, [r7, #27]
            ir_struct->ir_sen_val_cal_trig[i] = 0xff;
 8001006:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	22ff      	movs	r2, #255	@ 0xff
 8001010:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
            if(i >= 2 && i <= 7){
 8001014:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001018:	2b01      	cmp	r3, #1
 800101a:	d906      	bls.n	800102a <Line_Sensor_Calculation+0x11e>
 800101c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001020:	2b07      	cmp	r3, #7
 8001022:	d802      	bhi.n	800102a <Line_Sensor_Calculation+0x11e>
                middle_on_line++;
 8001024:	7ebb      	ldrb	r3, [r7, #26]
 8001026:	3301      	adds	r3, #1
 8001028:	76bb      	strb	r3, [r7, #26]
            }
            if(i <= 2){
 800102a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800102e:	2b02      	cmp	r3, #2
 8001030:	d802      	bhi.n	8001038 <Line_Sensor_Calculation+0x12c>
            	left_on_line++;
 8001032:	7e7b      	ldrb	r3, [r7, #25]
 8001034:	3301      	adds	r3, #1
 8001036:	767b      	strb	r3, [r7, #25]
            }
            if(i >= 7){
 8001038:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800103c:	2b06      	cmp	r3, #6
 800103e:	d90a      	bls.n	8001056 <Line_Sensor_Calculation+0x14a>
            	right_on_line++;
 8001040:	7e3b      	ldrb	r3, [r7, #24]
 8001042:	3301      	adds	r3, #1
 8001044:	763b      	strb	r3, [r7, #24]
 8001046:	e006      	b.n	8001056 <Line_Sensor_Calculation+0x14a>
            }
        }
        else{
        	ir_struct->ir_sen_val_cal_trig[i] = 0x00;
 8001048:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	4413      	add	r3, r2
 8001050:	2200      	movs	r2, #0
 8001052:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
    for(i = 0; i < ir_struct->ir_sen_channel_num; i++){
 8001056:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800105a:	3301      	adds	r3, #1
 800105c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001066:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800106a:	429a      	cmp	r2, r3
 800106c:	f4ff af65 	bcc.w	8000f3a <Line_Sensor_Calculation+0x2e>
        }
        // end on line sensor calculation
    }

    // start read line number section
    if(!on_line){
 8001070:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001074:	2b00      	cmp	r3, #0
 8001076:	d11a      	bne.n	80010ae <Line_Sensor_Calculation+0x1a2>
        if(ir_struct->ir_sen_read_line_old_val < (ir_struct->ir_sen_channel_num - 1) * 1000/2){
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001082:	3b01      	subs	r3, #1
 8001084:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001088:	fb01 f303 	mul.w	r3, r1, r3
 800108c:	429a      	cmp	r2, r3
 800108e:	da03      	bge.n	8001098 <Line_Sensor_Calculation+0x18c>
            ir_struct->ir_sen_read_line_old_val = 0;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	655a      	str	r2, [r3, #84]	@ 0x54
 8001096:	e011      	b.n	80010bc <Line_Sensor_Calculation+0x1b0>
        }
        else{
            ir_struct->ir_sen_read_line_old_val = (ir_struct->ir_sen_channel_num - 1)*1000;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800109e:	3b01      	subs	r3, #1
 80010a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010a4:	fb03 f202 	mul.w	r2, r3, r2
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	655a      	str	r2, [r3, #84]	@ 0x54
 80010ac:	e006      	b.n	80010bc <Line_Sensor_Calculation+0x1b0>
        }
    }
    else{
        ir_struct->ir_sen_read_line_old_val = avg/sum;
 80010ae:	6a3a      	ldr	r2, [r7, #32]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b6:	461a      	mov	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    ir_struct->ir_sen_read_line_val = ir_struct->ir_sen_read_line_old_val;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    // end read line number section

    // start on line sensor calculation

    ir_struct->ir_sen_on_line_left_num = left_on_line;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	7e7a      	ldrb	r2, [r7, #25]
 80010cc:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
    ir_struct->ir_sen_on_line_right_num = right_on_line;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	7e3a      	ldrb	r2, [r7, #24]
 80010d4:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b

    ir_struct->ir_sen_on_line_mid_num = middle_on_line;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7eba      	ldrb	r2, [r7, #26]
 80010dc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    ir_struct->ir_sen_on_line_total_num = on_sensor_total_number;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7efa      	ldrb	r2, [r7, #27]
 80010e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    // end on line sensor calculation
    // 0 - 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9

    // 2 - 7 --> mid

}
 80010e8:	bf00      	nop
 80010ea:	372c      	adds	r7, #44	@ 0x2c
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <HAL_GPIO_EXTI_Callback>:
//		Station_id[3] = uid[3];
//		Station_id[4] = uid[4];
//	}
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d102      	bne.n	800110a <HAL_GPIO_EXTI_Callback+0x16>
		Station = 0;
 8001104:	4b18      	ldr	r3, [pc, #96]	@ (8001168 <HAL_GPIO_EXTI_Callback+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_1){
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d102      	bne.n	8001116 <HAL_GPIO_EXTI_Callback+0x22>
		Station = 1;
 8001110:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <HAL_GPIO_EXTI_Callback+0x74>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_2){
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	2b04      	cmp	r3, #4
 800111a:	d102      	bne.n	8001122 <HAL_GPIO_EXTI_Callback+0x2e>
		Station = 2;
 800111c:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <HAL_GPIO_EXTI_Callback+0x74>)
 800111e:	2202      	movs	r2, #2
 8001120:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_3){
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	2b08      	cmp	r3, #8
 8001126:	d102      	bne.n	800112e <HAL_GPIO_EXTI_Callback+0x3a>
		Station = 3;
 8001128:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <HAL_GPIO_EXTI_Callback+0x74>)
 800112a:	2203      	movs	r2, #3
 800112c:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_4){
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	2b10      	cmp	r3, #16
 8001132:	d103      	bne.n	800113c <HAL_GPIO_EXTI_Callback+0x48>
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_7);
 8001134:	2180      	movs	r1, #128	@ 0x80
 8001136:	480d      	ldr	r0, [pc, #52]	@ (800116c <HAL_GPIO_EXTI_Callback+0x78>)
 8001138:	f006 fe05 	bl	8007d46 <HAL_GPIO_TogglePin>
	}

	if(GPIO_Pin == myLoRa.DIO0_pin){
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <HAL_GPIO_EXTI_Callback+0x7c>)
 800113e:	8a9b      	ldrh	r3, [r3, #20]
 8001140:	88fa      	ldrh	r2, [r7, #6]
 8001142:	429a      	cmp	r2, r3
 8001144:	d10b      	bne.n	800115e <HAL_GPIO_EXTI_Callback+0x6a>
		LoRa_receive(&myLoRa, LoraRxBuffer, 128);
 8001146:	2280      	movs	r2, #128	@ 0x80
 8001148:	490a      	ldr	r1, [pc, #40]	@ (8001174 <HAL_GPIO_EXTI_Callback+0x80>)
 800114a:	4809      	ldr	r0, [pc, #36]	@ (8001170 <HAL_GPIO_EXTI_Callback+0x7c>)
 800114c:	f7ff fd72 	bl	8000c34 <LoRa_receive>
		HAL_GPIO_TogglePin(LORA_RX_LED_GPIO_Port, LORA_RX_LED_Pin);
 8001150:	2140      	movs	r1, #64	@ 0x40
 8001152:	4809      	ldr	r0, [pc, #36]	@ (8001178 <HAL_GPIO_EXTI_Callback+0x84>)
 8001154:	f006 fdf7 	bl	8007d46 <HAL_GPIO_TogglePin>
		lora_receive_toggle = 255;
 8001158:	4b08      	ldr	r3, [pc, #32]	@ (800117c <HAL_GPIO_EXTI_Callback+0x88>)
 800115a:	22ff      	movs	r2, #255	@ 0xff
 800115c:	701a      	strb	r2, [r3, #0]

	}
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	240004e8 	.word	0x240004e8
 800116c:	58021800 	.word	0x58021800
 8001170:	240004ec 	.word	0x240004ec
 8001174:	2400059c 	.word	0x2400059c
 8001178:	58020c00 	.word	0x58020c00
 800117c:	2400061c 	.word	0x2400061c

08001180 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]

//	if(rs485_RxData[1] == 0x6){ //0x6 == writing function code
//
//	}
	if(rs485_RxData[1] == 0x3){ //0x3 == reading function code
 800118c:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <HAL_UARTEx_RxEventCallback+0x6c>)
 800118e:	785b      	ldrb	r3, [r3, #1]
 8001190:	2b03      	cmp	r3, #3
 8001192:	d11b      	bne.n	80011cc <HAL_UARTEx_RxEventCallback+0x4c>
		rs485_rx_num_bytes = rs485_RxData[2];
 8001194:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <HAL_UARTEx_RxEventCallback+0x6c>)
 8001196:	789a      	ldrb	r2, [r3, #2]
 8001198:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <HAL_UARTEx_RxEventCallback+0x70>)
 800119a:	701a      	strb	r2, [r3, #0]
		rs485_reg_address = (rs485_TxData[2] << 8) | (rs485_TxData[3]);
 800119c:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <HAL_UARTEx_RxEventCallback+0x74>)
 800119e:	789b      	ldrb	r3, [r3, #2]
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <HAL_UARTEx_RxEventCallback+0x74>)
 80011a6:	78db      	ldrb	r3, [r3, #3]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <HAL_UARTEx_RxEventCallback+0x78>)
 80011b2:	801a      	strh	r2, [r3, #0]
		rs485_reg_number  = (rs485_TxData[4] << 8) | (rs485_TxData[5]);
 80011b4:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <HAL_UARTEx_RxEventCallback+0x74>)
 80011b6:	791b      	ldrb	r3, [r3, #4]
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <HAL_UARTEx_RxEventCallback+0x74>)
 80011be:	795b      	ldrb	r3, [r3, #5]
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <HAL_UARTEx_RxEventCallback+0x7c>)
 80011ca:	801a      	strh	r2, [r3, #0]

	}
	//rs485_time2 = HAL_GetTick();
	//rs485_exc_time = rs485_time2 - rs485_time1;
	rs485_isbusy = 0;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <HAL_UARTEx_RxEventCallback+0x80>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
	rs485_fail_check = 0;
 80011d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <HAL_UARTEx_RxEventCallback+0x84>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	801a      	strh	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, rs485_RxData, 32);
 80011d8:	2220      	movs	r2, #32
 80011da:	4904      	ldr	r1, [pc, #16]	@ (80011ec <HAL_UARTEx_RxEventCallback+0x6c>)
 80011dc:	480a      	ldr	r0, [pc, #40]	@ (8001208 <HAL_UARTEx_RxEventCallback+0x88>)
 80011de:	f00e fac0 	bl	800f762 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	240003b8 	.word	0x240003b8
 80011f0:	240003d6 	.word	0x240003d6
 80011f4:	240003c8 	.word	0x240003c8
 80011f8:	240003d2 	.word	0x240003d2
 80011fc:	240003d4 	.word	0x240003d4
 8001200:	240003d0 	.word	0x240003d0
 8001204:	240003d8 	.word	0x240003d8
 8001208:	24000324 	.word	0x24000324

0800120c <load_debug_info>:
	rs485_TxData[6] = crc&0xFF;
	rs485_TxData[7] = (crc>>8)&0xFF;
	rs485_send_data(rs485_TxData);
}

void load_debug_info(){
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
	LoraTxBuffer[0] = 0xF3;
 8001210:	4b47      	ldr	r3, [pc, #284]	@ (8001330 <load_debug_info+0x124>)
 8001212:	22f3      	movs	r2, #243	@ 0xf3
 8001214:	701a      	strb	r2, [r3, #0]
	LoraTxBuffer[1] = 0x01;
 8001216:	4b46      	ldr	r3, [pc, #280]	@ (8001330 <load_debug_info+0x124>)
 8001218:	2201      	movs	r2, #1
 800121a:	705a      	strb	r2, [r3, #1]

	LoraTxBuffer[2] = 0xF0;
 800121c:	4b44      	ldr	r3, [pc, #272]	@ (8001330 <load_debug_info+0x124>)
 800121e:	22f0      	movs	r2, #240	@ 0xf0
 8001220:	709a      	strb	r2, [r3, #2]
	LoraTxBuffer[3] = 0x0F;
 8001222:	4b43      	ldr	r3, [pc, #268]	@ (8001330 <load_debug_info+0x124>)
 8001224:	220f      	movs	r2, #15
 8001226:	70da      	strb	r2, [r3, #3]

	LoraTxBuffer[4] = front_array.ir_sen_val_cal_trig[0];
 8001228:	4b42      	ldr	r3, [pc, #264]	@ (8001334 <load_debug_info+0x128>)
 800122a:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 800122e:	b2da      	uxtb	r2, r3
 8001230:	4b3f      	ldr	r3, [pc, #252]	@ (8001330 <load_debug_info+0x124>)
 8001232:	711a      	strb	r2, [r3, #4]
	LoraTxBuffer[5] = front_array.ir_sen_val_cal_trig[1];
 8001234:	4b3f      	ldr	r3, [pc, #252]	@ (8001334 <load_debug_info+0x128>)
 8001236:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 800123a:	b2da      	uxtb	r2, r3
 800123c:	4b3c      	ldr	r3, [pc, #240]	@ (8001330 <load_debug_info+0x124>)
 800123e:	715a      	strb	r2, [r3, #5]
	LoraTxBuffer[6] = front_array.ir_sen_val_cal_trig[2];
 8001240:	4b3c      	ldr	r3, [pc, #240]	@ (8001334 <load_debug_info+0x128>)
 8001242:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8001246:	b2da      	uxtb	r2, r3
 8001248:	4b39      	ldr	r3, [pc, #228]	@ (8001330 <load_debug_info+0x124>)
 800124a:	719a      	strb	r2, [r3, #6]
	LoraTxBuffer[7] = front_array.ir_sen_val_cal_trig[3];
 800124c:	4b39      	ldr	r3, [pc, #228]	@ (8001334 <load_debug_info+0x128>)
 800124e:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b36      	ldr	r3, [pc, #216]	@ (8001330 <load_debug_info+0x124>)
 8001256:	71da      	strb	r2, [r3, #7]
	LoraTxBuffer[8] = front_array.ir_sen_val_cal_trig[4];
 8001258:	4b36      	ldr	r3, [pc, #216]	@ (8001334 <load_debug_info+0x128>)
 800125a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b33      	ldr	r3, [pc, #204]	@ (8001330 <load_debug_info+0x124>)
 8001262:	721a      	strb	r2, [r3, #8]
	LoraTxBuffer[9] = front_array.ir_sen_val_cal_trig[5];
 8001264:	4b33      	ldr	r3, [pc, #204]	@ (8001334 <load_debug_info+0x128>)
 8001266:	f893 3063 	ldrb.w	r3, [r3, #99]	@ 0x63
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b30      	ldr	r3, [pc, #192]	@ (8001330 <load_debug_info+0x124>)
 800126e:	725a      	strb	r2, [r3, #9]
	LoraTxBuffer[10] = front_array.ir_sen_val_cal_trig[6];
 8001270:	4b30      	ldr	r3, [pc, #192]	@ (8001334 <load_debug_info+0x128>)
 8001272:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b2d      	ldr	r3, [pc, #180]	@ (8001330 <load_debug_info+0x124>)
 800127a:	729a      	strb	r2, [r3, #10]
	LoraTxBuffer[11] = front_array.ir_sen_val_cal_trig[7];
 800127c:	4b2d      	ldr	r3, [pc, #180]	@ (8001334 <load_debug_info+0x128>)
 800127e:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8001282:	b2da      	uxtb	r2, r3
 8001284:	4b2a      	ldr	r3, [pc, #168]	@ (8001330 <load_debug_info+0x124>)
 8001286:	72da      	strb	r2, [r3, #11]
	LoraTxBuffer[12] = front_array.ir_sen_val_cal_trig[8];
 8001288:	4b2a      	ldr	r3, [pc, #168]	@ (8001334 <load_debug_info+0x128>)
 800128a:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 800128e:	b2da      	uxtb	r2, r3
 8001290:	4b27      	ldr	r3, [pc, #156]	@ (8001330 <load_debug_info+0x124>)
 8001292:	731a      	strb	r2, [r3, #12]
	LoraTxBuffer[13] = front_array.ir_sen_val_cal_trig[9];
 8001294:	4b27      	ldr	r3, [pc, #156]	@ (8001334 <load_debug_info+0x128>)
 8001296:	f893 3067 	ldrb.w	r3, [r3, #103]	@ 0x67
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <load_debug_info+0x124>)
 800129e:	735a      	strb	r2, [r3, #13]

	LoraTxBuffer[14] = 0xF1;
 80012a0:	4b23      	ldr	r3, [pc, #140]	@ (8001330 <load_debug_info+0x124>)
 80012a2:	22f1      	movs	r2, #241	@ 0xf1
 80012a4:	739a      	strb	r2, [r3, #14]
	LoraTxBuffer[15] = 0x1F;
 80012a6:	4b22      	ldr	r3, [pc, #136]	@ (8001330 <load_debug_info+0x124>)
 80012a8:	221f      	movs	r2, #31
 80012aa:	73da      	strb	r2, [r3, #15]

	LoraTxBuffer[16] = back_array.ir_sen_val_cal_trig[0];
 80012ac:	4b22      	ldr	r3, [pc, #136]	@ (8001338 <load_debug_info+0x12c>)
 80012ae:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001330 <load_debug_info+0x124>)
 80012b6:	741a      	strb	r2, [r3, #16]
	LoraTxBuffer[17] = back_array.ir_sen_val_cal_trig[1];
 80012b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001338 <load_debug_info+0x12c>)
 80012ba:	f893 305f 	ldrb.w	r3, [r3, #95]	@ 0x5f
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <load_debug_info+0x124>)
 80012c2:	745a      	strb	r2, [r3, #17]
	LoraTxBuffer[18] = back_array.ir_sen_val_cal_trig[2];
 80012c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <load_debug_info+0x12c>)
 80012c6:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <load_debug_info+0x124>)
 80012ce:	749a      	strb	r2, [r3, #18]
	LoraTxBuffer[19] = back_array.ir_sen_val_cal_trig[3];
 80012d0:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <load_debug_info+0x12c>)
 80012d2:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <load_debug_info+0x124>)
 80012da:	74da      	strb	r2, [r3, #19]
	LoraTxBuffer[20] = back_array.ir_sen_val_cal_trig[4];
 80012dc:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <load_debug_info+0x12c>)
 80012de:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b12      	ldr	r3, [pc, #72]	@ (8001330 <load_debug_info+0x124>)
 80012e6:	751a      	strb	r2, [r3, #20]
	LoraTxBuffer[21] = back_array.ir_sen_val_cal_trig[5];
 80012e8:	4b13      	ldr	r3, [pc, #76]	@ (8001338 <load_debug_info+0x12c>)
 80012ea:	f893 3063 	ldrb.w	r3, [r3, #99]	@ 0x63
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <load_debug_info+0x124>)
 80012f2:	755a      	strb	r2, [r3, #21]
	LoraTxBuffer[22] = back_array.ir_sen_val_cal_trig[6];
 80012f4:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <load_debug_info+0x12c>)
 80012f6:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <load_debug_info+0x124>)
 80012fe:	759a      	strb	r2, [r3, #22]
	LoraTxBuffer[23] = back_array.ir_sen_val_cal_trig[7];
 8001300:	4b0d      	ldr	r3, [pc, #52]	@ (8001338 <load_debug_info+0x12c>)
 8001302:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8001306:	b2da      	uxtb	r2, r3
 8001308:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <load_debug_info+0x124>)
 800130a:	75da      	strb	r2, [r3, #23]
	LoraTxBuffer[24] = back_array.ir_sen_val_cal_trig[8];
 800130c:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <load_debug_info+0x12c>)
 800130e:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <load_debug_info+0x124>)
 8001316:	761a      	strb	r2, [r3, #24]
	LoraTxBuffer[25] = back_array.ir_sen_val_cal_trig[9];
 8001318:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <load_debug_info+0x12c>)
 800131a:	f893 3067 	ldrb.w	r3, [r3, #103]	@ 0x67
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b03      	ldr	r3, [pc, #12]	@ (8001330 <load_debug_info+0x124>)
 8001322:	765a      	strb	r2, [r3, #25]

}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	2400051c 	.word	0x2400051c
 8001334:	24000418 	.word	0x24000418
 8001338:	24000480 	.word	0x24000480

0800133c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800133c:	b5b0      	push	{r4, r5, r7, lr}
 800133e:	b094      	sub	sp, #80	@ 0x50
 8001340:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001342:	f001 fa83 	bl	800284c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001346:	f000 f935 	bl	80015b4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800134a:	f000 f9a5 	bl	8001698 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134e:	f000 fd1d 	bl	8001d8c <MX_GPIO_Init>
  MX_DMA_Init();
 8001352:	f000 fcf3 	bl	8001d3c <MX_DMA_Init>
  MX_ADC1_Init();
 8001356:	f000 f9d3 	bl	8001700 <MX_ADC1_Init>
  MX_ADC3_Init();
 800135a:	f000 fae3 	bl	8001924 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 800135e:	f000 fca1 	bl	8001ca4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001362:	f000 fc3b 	bl	8001bdc <MX_TIM2_Init>
  MX_SPI1_Init();
 8001366:	f000 fbe3 	bl	8001b30 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */



  HAL_UARTEx_ReceiveToIdle_IT(&huart1, rs485_RxData, 16);
 800136a:	2210      	movs	r2, #16
 800136c:	496d      	ldr	r1, [pc, #436]	@ (8001524 <main+0x1e8>)
 800136e:	486e      	ldr	r0, [pc, #440]	@ (8001528 <main+0x1ec>)
 8001370:	f00e f9f7 	bl	800f762 <HAL_UARTEx_ReceiveToIdle_IT>



  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001374:	2100      	movs	r1, #0
 8001376:	486d      	ldr	r0, [pc, #436]	@ (800152c <main+0x1f0>)
 8001378:	f00a ff72 	bl	800c260 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800137c:	2104      	movs	r1, #4
 800137e:	486b      	ldr	r0, [pc, #428]	@ (800152c <main+0x1f0>)
 8001380:	f00a ff6e 	bl	800c260 <HAL_TIM_PWM_Start>
//						 &line_sensor_back_on_line_total_number,
//						  line_sensor_back_trigger_threshhold,
//						  line_sensor_back_total_channel,
//						 &line_sensor_back_read_line_value);

  if((line_sensor_back_on_line_total_number >= 9) &&(line_sensor_front_on_line_total_number >= 1)){
 8001384:	4b6a      	ldr	r3, [pc, #424]	@ (8001530 <main+0x1f4>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b08      	cmp	r3, #8
 800138c:	d908      	bls.n	80013a0 <main+0x64>
 800138e:	4b69      	ldr	r3, [pc, #420]	@ (8001534 <main+0x1f8>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <main+0x64>
	  agv_orientation = 0xF00F;
 8001398:	4b67      	ldr	r3, [pc, #412]	@ (8001538 <main+0x1fc>)
 800139a:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 800139e:	801a      	strh	r2, [r3, #0]
  }
  if((line_sensor_front_on_line_total_number >= 9) && (line_sensor_back_on_line_total_number >= 1)){
 80013a0:	4b64      	ldr	r3, [pc, #400]	@ (8001534 <main+0x1f8>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b08      	cmp	r3, #8
 80013a8:	d908      	bls.n	80013bc <main+0x80>
 80013aa:	4b61      	ldr	r3, [pc, #388]	@ (8001530 <main+0x1f4>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <main+0x80>
	  agv_orientation = 0xF11F;
 80013b4:	4b60      	ldr	r3, [pc, #384]	@ (8001538 <main+0x1fc>)
 80013b6:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 80013ba:	801a      	strh	r2, [r3, #0]
  }

  myLoRa = newLoRa();
 80013bc:	4c5f      	ldr	r4, [pc, #380]	@ (800153c <main+0x200>)
 80013be:	463b      	mov	r3, r7
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f91b 	bl	80005fc <newLoRa>
 80013c6:	4625      	mov	r5, r4
 80013c8:	463c      	mov	r4, r7
 80013ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80013d6:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = LORA_NSS_GPIO_Port;
 80013da:	4b58      	ldr	r3, [pc, #352]	@ (800153c <main+0x200>)
 80013dc:	4a58      	ldr	r2, [pc, #352]	@ (8001540 <main+0x204>)
 80013de:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = LORA_NSS_Pin;
 80013e0:	4b56      	ldr	r3, [pc, #344]	@ (800153c <main+0x200>)
 80013e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013e6:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = LORA_RST_GPIO_Port;
 80013e8:	4b54      	ldr	r3, [pc, #336]	@ (800153c <main+0x200>)
 80013ea:	4a55      	ldr	r2, [pc, #340]	@ (8001540 <main+0x204>)
 80013ec:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = LORA_RST_Pin;
 80013ee:	4b53      	ldr	r3, [pc, #332]	@ (800153c <main+0x200>)
 80013f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013f4:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = LORA_DIO0_GPIO_Port;
 80013f6:	4b51      	ldr	r3, [pc, #324]	@ (800153c <main+0x200>)
 80013f8:	4a51      	ldr	r2, [pc, #324]	@ (8001540 <main+0x204>)
 80013fa:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = LORA_DIO0_Pin;
 80013fc:	4b4f      	ldr	r3, [pc, #316]	@ (800153c <main+0x200>)
 80013fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001402:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8001404:	4b4d      	ldr	r3, [pc, #308]	@ (800153c <main+0x200>)
 8001406:	4a4f      	ldr	r2, [pc, #316]	@ (8001544 <main+0x208>)
 8001408:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 433;             // default = 433 MHz
 800140a:	4b4c      	ldr	r3, [pc, #304]	@ (800153c <main+0x200>)
 800140c:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8001410:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 8001412:	4b4a      	ldr	r3, [pc, #296]	@ (800153c <main+0x200>)
 8001414:	2207      	movs	r2, #7
 8001416:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  myLoRa.bandWidth             = BW_125KHz;       // default = BW_125KHz
 800141a:	4b48      	ldr	r3, [pc, #288]	@ (800153c <main+0x200>)
 800141c:	2207      	movs	r2, #7
 800141e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 8001422:	4b46      	ldr	r3, [pc, #280]	@ (800153c <main+0x200>)
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 800142a:	4b44      	ldr	r3, [pc, #272]	@ (800153c <main+0x200>)
 800142c:	22ff      	movs	r2, #255	@ 0xff
 800142e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  myLoRa.overCurrentProtection = 100;             // default = 100 mA
 8001432:	4b42      	ldr	r3, [pc, #264]	@ (800153c <main+0x200>)
 8001434:	2264      	movs	r2, #100	@ 0x64
 8001436:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  myLoRa.preamble              = 8;              // default = 8;
 800143a:	4b40      	ldr	r3, [pc, #256]	@ (800153c <main+0x200>)
 800143c:	2208      	movs	r2, #8
 800143e:	851a      	strh	r2, [r3, #40]	@ 0x28

  if(LoRa_init(&myLoRa) == LORA_OK){
 8001440:	483e      	ldr	r0, [pc, #248]	@ (800153c <main+0x200>)
 8001442:	f7ff fc57 	bl	8000cf4 <LoRa_init>
 8001446:	4603      	mov	r3, r0
 8001448:	2bc8      	cmp	r3, #200	@ 0xc8
 800144a:	d102      	bne.n	8001452 <main+0x116>
	  LoRa_stat = 1;
 800144c:	4b3e      	ldr	r3, [pc, #248]	@ (8001548 <main+0x20c>)
 800144e:	2201      	movs	r2, #1
 8001450:	801a      	strh	r2, [r3, #0]
  }

  LoRa_startReceiving(&myLoRa);
 8001452:	483a      	ldr	r0, [pc, #232]	@ (800153c <main+0x200>)
 8001454:	f7ff fbe2 	bl	8000c1c <LoRa_startReceiving>

  LoraTxBuffer[0] = 0xAA;
 8001458:	4b3c      	ldr	r3, [pc, #240]	@ (800154c <main+0x210>)
 800145a:	22aa      	movs	r2, #170	@ 0xaa
 800145c:	701a      	strb	r2, [r3, #0]
  LoraTxBuffer[1] = 0xBB;
 800145e:	4b3b      	ldr	r3, [pc, #236]	@ (800154c <main+0x210>)
 8001460:	22bb      	movs	r2, #187	@ 0xbb
 8001462:	705a      	strb	r2, [r3, #1]
  LoraTxBuffer[2] = 0xCC;
 8001464:	4b39      	ldr	r3, [pc, #228]	@ (800154c <main+0x210>)
 8001466:	22cc      	movs	r2, #204	@ 0xcc
 8001468:	709a      	strb	r2, [r3, #2]

  //LoRa_transmit(&myLoRa, LoraTxBuffer, 3, 500);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) front_array.ir_sen_val_dma, line_sensor_front_channel_number);
 800146a:	230a      	movs	r3, #10
 800146c:	461a      	mov	r2, r3
 800146e:	4938      	ldr	r1, [pc, #224]	@ (8001550 <main+0x214>)
 8001470:	4838      	ldr	r0, [pc, #224]	@ (8001554 <main+0x218>)
 8001472:	f001 ffab 	bl	80033cc <HAL_ADC_Start_DMA>
  ir_array_init(&front_array,
 8001476:	4b38      	ldr	r3, [pc, #224]	@ (8001558 <main+0x21c>)
 8001478:	9307      	str	r3, [sp, #28]
 800147a:	4b38      	ldr	r3, [pc, #224]	@ (800155c <main+0x220>)
 800147c:	9306      	str	r3, [sp, #24]
 800147e:	4b38      	ldr	r3, [pc, #224]	@ (8001560 <main+0x224>)
 8001480:	9305      	str	r3, [sp, #20]
 8001482:	4b38      	ldr	r3, [pc, #224]	@ (8001564 <main+0x228>)
 8001484:	9304      	str	r3, [sp, #16]
 8001486:	4b2b      	ldr	r3, [pc, #172]	@ (8001534 <main+0x1f8>)
 8001488:	9303      	str	r3, [sp, #12]
 800148a:	4b37      	ldr	r3, [pc, #220]	@ (8001568 <main+0x22c>)
 800148c:	9302      	str	r3, [sp, #8]
 800148e:	4b37      	ldr	r3, [pc, #220]	@ (800156c <main+0x230>)
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	4b37      	ldr	r3, [pc, #220]	@ (8001570 <main+0x234>)
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	4b37      	ldr	r3, [pc, #220]	@ (8001574 <main+0x238>)
 8001498:	4a37      	ldr	r2, [pc, #220]	@ (8001578 <main+0x23c>)
 800149a:	4938      	ldr	r1, [pc, #224]	@ (800157c <main+0x240>)
 800149c:	482c      	ldr	r0, [pc, #176]	@ (8001550 <main+0x214>)
 800149e:	f7ff fcd0 	bl	8000e42 <ir_array_init>
                &line_sensor_front_on_line_total_number,
                &line_sensor_front_on_line_middle_number,
                &line_sensor_front_on_line_left_number,
                &line_sensor_front_on_line_right_number,
                &line_sensor_front_threshold);
  Line_Sensor_Calculation(&front_array);
 80014a2:	482b      	ldr	r0, [pc, #172]	@ (8001550 <main+0x214>)
 80014a4:	f7ff fd32 	bl	8000f0c <Line_Sensor_Calculation>


  HAL_ADC_Start_DMA(&hadc3, (uint32_t*) back_array.ir_sen_val_dma, line_sensor_back_channel_number);
 80014a8:	230a      	movs	r3, #10
 80014aa:	461a      	mov	r2, r3
 80014ac:	4934      	ldr	r1, [pc, #208]	@ (8001580 <main+0x244>)
 80014ae:	4835      	ldr	r0, [pc, #212]	@ (8001584 <main+0x248>)
 80014b0:	f001 ff8c 	bl	80033cc <HAL_ADC_Start_DMA>
  ir_array_init(&back_array,
 80014b4:	4b34      	ldr	r3, [pc, #208]	@ (8001588 <main+0x24c>)
 80014b6:	9307      	str	r3, [sp, #28]
 80014b8:	4b34      	ldr	r3, [pc, #208]	@ (800158c <main+0x250>)
 80014ba:	9306      	str	r3, [sp, #24]
 80014bc:	4b34      	ldr	r3, [pc, #208]	@ (8001590 <main+0x254>)
 80014be:	9305      	str	r3, [sp, #20]
 80014c0:	4b34      	ldr	r3, [pc, #208]	@ (8001594 <main+0x258>)
 80014c2:	9304      	str	r3, [sp, #16]
 80014c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <main+0x1f4>)
 80014c6:	9303      	str	r3, [sp, #12]
 80014c8:	4b33      	ldr	r3, [pc, #204]	@ (8001598 <main+0x25c>)
 80014ca:	9302      	str	r3, [sp, #8]
 80014cc:	4b33      	ldr	r3, [pc, #204]	@ (800159c <main+0x260>)
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	4b33      	ldr	r3, [pc, #204]	@ (80015a0 <main+0x264>)
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	4b33      	ldr	r3, [pc, #204]	@ (80015a4 <main+0x268>)
 80014d6:	4a34      	ldr	r2, [pc, #208]	@ (80015a8 <main+0x26c>)
 80014d8:	4934      	ldr	r1, [pc, #208]	@ (80015ac <main+0x270>)
 80014da:	4829      	ldr	r0, [pc, #164]	@ (8001580 <main+0x244>)
 80014dc:	f7ff fcb1 	bl	8000e42 <ir_array_init>
                &line_sensor_back_on_line_total_number,
                &line_sensor_back_on_line_middle_number,
                &line_sensor_back_on_line_left_number,
                &line_sensor_back_on_line_right_number,
                &line_sensor_back_threshold);
  Line_Sensor_Calculation(&back_array);
 80014e0:	4827      	ldr	r0, [pc, #156]	@ (8001580 <main+0x244>)
 80014e2:	f7ff fd13 	bl	8000f0c <Line_Sensor_Calculation>
  while (1)
  {

//	  agv_orientation = 0xF00F;
//
	  if(lora_receive_toggle == 255){
 80014e6:	4b32      	ldr	r3, [pc, #200]	@ (80015b0 <main+0x274>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2bff      	cmp	r3, #255	@ 0xff
 80014ec:	d113      	bne.n	8001516 <main+0x1da>
		  load_debug_info();
 80014ee:	f7ff fe8d 	bl	800120c <load_debug_info>
		  if(LoRa_transmit(&myLoRa, LoraTxBuffer, 26, 500) == 1){
 80014f2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80014f6:	221a      	movs	r2, #26
 80014f8:	4914      	ldr	r1, [pc, #80]	@ (800154c <main+0x210>)
 80014fa:	4810      	ldr	r0, [pc, #64]	@ (800153c <main+0x200>)
 80014fc:	f7ff fb36 	bl	8000b6c <LoRa_transmit>
 8001500:	4603      	mov	r3, r0
 8001502:	2b01      	cmp	r3, #1
 8001504:	d104      	bne.n	8001510 <main+0x1d4>

			  HAL_GPIO_TogglePin(LORA_TX_LED_GPIO_Port, LORA_TX_LED_Pin);
 8001506:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800150a:	480d      	ldr	r0, [pc, #52]	@ (8001540 <main+0x204>)
 800150c:	f006 fc1b 	bl	8007d46 <HAL_GPIO_TogglePin>
		  }
		  lora_receive_toggle = 0;
 8001510:	4b27      	ldr	r3, [pc, #156]	@ (80015b0 <main+0x274>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
	  }

	  Line_Sensor_Calculation(&front_array);
 8001516:	480e      	ldr	r0, [pc, #56]	@ (8001550 <main+0x214>)
 8001518:	f7ff fcf8 	bl	8000f0c <Line_Sensor_Calculation>
	  Line_Sensor_Calculation(&back_array);
 800151c:	4818      	ldr	r0, [pc, #96]	@ (8001580 <main+0x244>)
 800151e:	f7ff fcf5 	bl	8000f0c <Line_Sensor_Calculation>
	  if(lora_receive_toggle == 255){
 8001522:	e7e0      	b.n	80014e6 <main+0x1aa>
 8001524:	240003b8 	.word	0x240003b8
 8001528:	24000324 	.word	0x24000324
 800152c:	240002d8 	.word	0x240002d8
 8001530:	24000413 	.word	0x24000413
 8001534:	2400040f 	.word	0x2400040f
 8001538:	24000050 	.word	0x24000050
 800153c:	240004ec 	.word	0x240004ec
 8001540:	58021800 	.word	0x58021800
 8001544:	24000250 	.word	0x24000250
 8001548:	24000518 	.word	0x24000518
 800154c:	2400051c 	.word	0x2400051c
 8001550:	24000418 	.word	0x24000418
 8001554:	24000080 	.word	0x24000080
 8001558:	0800f982 	.word	0x0800f982
 800155c:	2400040e 	.word	0x2400040e
 8001560:	2400040c 	.word	0x2400040c
 8001564:	2400040d 	.word	0x2400040d
 8001568:	240003dc 	.word	0x240003dc
 800156c:	24000414 	.word	0x24000414
 8001570:	0800f980 	.word	0x0800f980
 8001574:	24000014 	.word	0x24000014
 8001578:	24000000 	.word	0x24000000
 800157c:	240003e4 	.word	0x240003e4
 8001580:	24000480 	.word	0x24000480
 8001584:	240000f0 	.word	0x240000f0
 8001588:	0800f984 	.word	0x0800f984
 800158c:	24000412 	.word	0x24000412
 8001590:	24000410 	.word	0x24000410
 8001594:	24000411 	.word	0x24000411
 8001598:	240003e0 	.word	0x240003e0
 800159c:	24000416 	.word	0x24000416
 80015a0:	0800f981 	.word	0x0800f981
 80015a4:	2400003c 	.word	0x2400003c
 80015a8:	24000028 	.word	0x24000028
 80015ac:	240003f8 	.word	0x240003f8
 80015b0:	2400061c 	.word	0x2400061c

080015b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b09c      	sub	sp, #112	@ 0x70
 80015b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015be:	224c      	movs	r2, #76	@ 0x4c
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f00e f96c 	bl	800f8a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2220      	movs	r2, #32
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f00e f966 	bl	800f8a0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80015d4:	2002      	movs	r0, #2
 80015d6:	f006 fbeb 	bl	8007db0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80015da:	2300      	movs	r3, #0
 80015dc:	603b      	str	r3, [r7, #0]
 80015de:	4b2d      	ldr	r3, [pc, #180]	@ (8001694 <SystemClock_Config+0xe0>)
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	4a2c      	ldr	r2, [pc, #176]	@ (8001694 <SystemClock_Config+0xe0>)
 80015e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015e8:	6193      	str	r3, [r2, #24]
 80015ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001694 <SystemClock_Config+0xe0>)
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80015f6:	bf00      	nop
 80015f8:	4b26      	ldr	r3, [pc, #152]	@ (8001694 <SystemClock_Config+0xe0>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001600:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001604:	d1f8      	bne.n	80015f8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001606:	2303      	movs	r3, #3
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800160a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800160e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001610:	2301      	movs	r3, #1
 8001612:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001614:	2340      	movs	r3, #64	@ 0x40
 8001616:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001618:	2302      	movs	r3, #2
 800161a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800161c:	2302      	movs	r3, #2
 800161e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001620:	2302      	movs	r3, #2
 8001622:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001624:	232c      	movs	r3, #44	@ 0x2c
 8001626:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001628:	2301      	movs	r3, #1
 800162a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800162c:	2303      	movs	r3, #3
 800162e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001630:	2302      	movs	r3, #2
 8001632:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001634:	230c      	movs	r3, #12
 8001636:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001638:	2300      	movs	r3, #0
 800163a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001640:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001644:	4618      	mov	r0, r3
 8001646:	f006 fbed 	bl	8007e24 <HAL_RCC_OscConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001650:	f000 fcf4 	bl	800203c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001654:	233f      	movs	r3, #63	@ 0x3f
 8001656:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001658:	2303      	movs	r3, #3
 800165a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001660:	2308      	movs	r3, #8
 8001662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001664:	2340      	movs	r3, #64	@ 0x40
 8001666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001668:	2340      	movs	r3, #64	@ 0x40
 800166a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800166c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001670:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001672:	2340      	movs	r3, #64	@ 0x40
 8001674:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2103      	movs	r1, #3
 800167a:	4618      	mov	r0, r3
 800167c:	f006 ffac 	bl	80085d8 <HAL_RCC_ClockConfig>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001686:	f000 fcd9 	bl	800203c <Error_Handler>
  }
}
 800168a:	bf00      	nop
 800168c:	3770      	adds	r7, #112	@ 0x70
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	58024800 	.word	0x58024800

08001698 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b0ae      	sub	sp, #184	@ 0xb8
 800169c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800169e:	463b      	mov	r3, r7
 80016a0:	22b8      	movs	r2, #184	@ 0xb8
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f00e f8fb 	bl	800f8a0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CKPER;
 80016aa:	4a14      	ldr	r2, [pc, #80]	@ (80016fc <PeriphCommonClock_Config+0x64>)
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80016b4:	2302      	movs	r3, #2
 80016b6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 80016b8:	230f      	movs	r3, #15
 80016ba:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80016bc:	2302      	movs	r3, #2
 80016be:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80016c0:	2302      	movs	r3, #2
 80016c2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80016c4:	2302      	movs	r3, #2
 80016c6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80016c8:	23c0      	movs	r3, #192	@ 0xc0
 80016ca:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 80016d0:	f640 3386 	movw	r3, #2950	@ 0xb86
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80016d6:	2300      	movs	r3, #0
 80016d8:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80016da:	2300      	movs	r3, #0
 80016dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e0:	463b      	mov	r3, r7
 80016e2:	4618      	mov	r0, r3
 80016e4:	f007 fb04 	bl	8008cf0 <HAL_RCCEx_PeriphCLKConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80016ee:	f000 fca5 	bl	800203c <Error_Handler>
  }
}
 80016f2:	bf00      	nop
 80016f4:	37b8      	adds	r7, #184	@ 0xb8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	80080000 	.word	0x80080000

08001700 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08c      	sub	sp, #48	@ 0x30
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001712:	463b      	mov	r3, r7
 8001714:	2224      	movs	r2, #36	@ 0x24
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f00e f8c1 	bl	800f8a0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800171e:	4b75      	ldr	r3, [pc, #468]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 8001720:	4a75      	ldr	r2, [pc, #468]	@ (80018f8 <MX_ADC1_Init+0x1f8>)
 8001722:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001724:	4b73      	ldr	r3, [pc, #460]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 8001726:	2200      	movs	r2, #0
 8001728:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800172a:	4b72      	ldr	r3, [pc, #456]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 800172c:	2208      	movs	r2, #8
 800172e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001730:	4b70      	ldr	r3, [pc, #448]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 8001732:	2201      	movs	r2, #1
 8001734:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001736:	4b6f      	ldr	r3, [pc, #444]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 8001738:	2204      	movs	r2, #4
 800173a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800173c:	4b6d      	ldr	r3, [pc, #436]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 800173e:	2200      	movs	r2, #0
 8001740:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001742:	4b6c      	ldr	r3, [pc, #432]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 8001744:	2201      	movs	r2, #1
 8001746:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 8001748:	4b6a      	ldr	r3, [pc, #424]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 800174a:	220a      	movs	r2, #10
 800174c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800174e:	4b69      	ldr	r3, [pc, #420]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001756:	4b67      	ldr	r3, [pc, #412]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 8001758:	2200      	movs	r2, #0
 800175a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800175c:	4b65      	ldr	r3, [pc, #404]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 800175e:	2200      	movs	r2, #0
 8001760:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001762:	4b64      	ldr	r3, [pc, #400]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 8001764:	2203      	movs	r2, #3
 8001766:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001768:	4b62      	ldr	r3, [pc, #392]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 800176a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800176e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001770:	4b60      	ldr	r3, [pc, #384]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 8001772:	2200      	movs	r2, #0
 8001774:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001776:	4b5f      	ldr	r3, [pc, #380]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 800177e:	4b5d      	ldr	r3, [pc, #372]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 8001780:	2201      	movs	r2, #1
 8001782:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001784:	485b      	ldr	r0, [pc, #364]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 8001786:	f001 fc19 	bl	8002fbc <HAL_ADC_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001790:	f000 fc54 	bl	800203c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800179c:	4619      	mov	r1, r3
 800179e:	4855      	ldr	r0, [pc, #340]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 80017a0:	f003 f8e6 	bl	8004970 <HAL_ADCEx_MultiModeConfigChannel>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80017aa:	f000 fc47 	bl	800203c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80017ae:	4b53      	ldr	r3, [pc, #332]	@ (80018fc <MX_ADC1_Init+0x1fc>)
 80017b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017b2:	2306      	movs	r3, #6
 80017b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 80017b6:	2305      	movs	r3, #5
 80017b8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017ba:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80017be:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017c0:	2304      	movs	r3, #4
 80017c2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ce:	463b      	mov	r3, r7
 80017d0:	4619      	mov	r1, r3
 80017d2:	4848      	ldr	r0, [pc, #288]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 80017d4:	f002 f938 	bl	8003a48 <HAL_ADC_ConfigChannel>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80017de:	f000 fc2d 	bl	800203c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80017e2:	4b47      	ldr	r3, [pc, #284]	@ (8001900 <MX_ADC1_Init+0x200>)
 80017e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80017e6:	230c      	movs	r3, #12
 80017e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ea:	463b      	mov	r3, r7
 80017ec:	4619      	mov	r1, r3
 80017ee:	4841      	ldr	r0, [pc, #260]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 80017f0:	f002 f92a 	bl	8003a48 <HAL_ADC_ConfigChannel>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80017fa:	f000 fc1f 	bl	800203c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80017fe:	4b41      	ldr	r3, [pc, #260]	@ (8001904 <MX_ADC1_Init+0x204>)
 8001800:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001802:	2312      	movs	r3, #18
 8001804:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001806:	463b      	mov	r3, r7
 8001808:	4619      	mov	r1, r3
 800180a:	483a      	ldr	r0, [pc, #232]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 800180c:	f002 f91c 	bl	8003a48 <HAL_ADC_ConfigChannel>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8001816:	f000 fc11 	bl	800203c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800181a:	4b3b      	ldr	r3, [pc, #236]	@ (8001908 <MX_ADC1_Init+0x208>)
 800181c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800181e:	2318      	movs	r3, #24
 8001820:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001822:	463b      	mov	r3, r7
 8001824:	4619      	mov	r1, r3
 8001826:	4833      	ldr	r0, [pc, #204]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 8001828:	f002 f90e 	bl	8003a48 <HAL_ADC_ConfigChannel>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8001832:	f000 fc03 	bl	800203c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001836:	4b35      	ldr	r3, [pc, #212]	@ (800190c <MX_ADC1_Init+0x20c>)
 8001838:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800183a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800183e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001840:	463b      	mov	r3, r7
 8001842:	4619      	mov	r1, r3
 8001844:	482b      	ldr	r0, [pc, #172]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 8001846:	f002 f8ff 	bl	8003a48 <HAL_ADC_ConfigChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001850:	f000 fbf4 	bl	800203c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001854:	4b2e      	ldr	r3, [pc, #184]	@ (8001910 <MX_ADC1_Init+0x210>)
 8001856:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001858:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800185c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800185e:	463b      	mov	r3, r7
 8001860:	4619      	mov	r1, r3
 8001862:	4824      	ldr	r0, [pc, #144]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 8001864:	f002 f8f0 	bl	8003a48 <HAL_ADC_ConfigChannel>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 800186e:	f000 fbe5 	bl	800203c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001872:	4b28      	ldr	r3, [pc, #160]	@ (8001914 <MX_ADC1_Init+0x214>)
 8001874:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001876:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 800187a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800187c:	463b      	mov	r3, r7
 800187e:	4619      	mov	r1, r3
 8001880:	481c      	ldr	r0, [pc, #112]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 8001882:	f002 f8e1 	bl	8003a48 <HAL_ADC_ConfigChannel>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 800188c:	f000 fbd6 	bl	800203c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001890:	4b21      	ldr	r3, [pc, #132]	@ (8001918 <MX_ADC1_Init+0x218>)
 8001892:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001894:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8001898:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800189a:	463b      	mov	r3, r7
 800189c:	4619      	mov	r1, r3
 800189e:	4815      	ldr	r0, [pc, #84]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 80018a0:	f002 f8d2 	bl	8003a48 <HAL_ADC_ConfigChannel>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 80018aa:	f000 fbc7 	bl	800203c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80018ae:	4b1b      	ldr	r3, [pc, #108]	@ (800191c <MX_ADC1_Init+0x21c>)
 80018b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80018b2:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80018b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b8:	463b      	mov	r3, r7
 80018ba:	4619      	mov	r1, r3
 80018bc:	480d      	ldr	r0, [pc, #52]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 80018be:	f002 f8c3 	bl	8003a48 <HAL_ADC_ConfigChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_ADC1_Init+0x1cc>
  {
    Error_Handler();
 80018c8:	f000 fbb8 	bl	800203c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80018cc:	4b14      	ldr	r3, [pc, #80]	@ (8001920 <MX_ADC1_Init+0x220>)
 80018ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80018d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018d6:	463b      	mov	r3, r7
 80018d8:	4619      	mov	r1, r3
 80018da:	4806      	ldr	r0, [pc, #24]	@ (80018f4 <MX_ADC1_Init+0x1f4>)
 80018dc:	f002 f8b4 	bl	8003a48 <HAL_ADC_ConfigChannel>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_ADC1_Init+0x1ea>
  {
    Error_Handler();
 80018e6:	f000 fba9 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	3730      	adds	r7, #48	@ 0x30
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	24000080 	.word	0x24000080
 80018f8:	40022000 	.word	0x40022000
 80018fc:	08600004 	.word	0x08600004
 8001900:	0c900008 	.word	0x0c900008
 8001904:	10c00010 	.word	0x10c00010
 8001908:	14f00020 	.word	0x14f00020
 800190c:	19200040 	.word	0x19200040
 8001910:	1d500080 	.word	0x1d500080
 8001914:	21800100 	.word	0x21800100
 8001918:	25b00200 	.word	0x25b00200
 800191c:	2a000400 	.word	0x2a000400
 8001920:	2e300800 	.word	0x2e300800

08001924 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	@ 0x28
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	2224      	movs	r2, #36	@ 0x24
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f00d ffb5 	bl	800f8a0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001936:	4b73      	ldr	r3, [pc, #460]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 8001938:	4a73      	ldr	r2, [pc, #460]	@ (8001b08 <MX_ADC3_Init+0x1e4>)
 800193a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800193c:	4b71      	ldr	r3, [pc, #452]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 800193e:	2200      	movs	r2, #0
 8001940:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001942:	4b70      	ldr	r3, [pc, #448]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 8001944:	2208      	movs	r2, #8
 8001946:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001948:	4b6e      	ldr	r3, [pc, #440]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800194e:	4b6d      	ldr	r3, [pc, #436]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 8001950:	2201      	movs	r2, #1
 8001952:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001954:	4b6b      	ldr	r3, [pc, #428]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 8001956:	2204      	movs	r2, #4
 8001958:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800195a:	4b6a      	ldr	r3, [pc, #424]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 800195c:	2200      	movs	r2, #0
 800195e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001960:	4b68      	ldr	r3, [pc, #416]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 8001962:	2201      	movs	r2, #1
 8001964:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 10;
 8001966:	4b67      	ldr	r3, [pc, #412]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 8001968:	220a      	movs	r2, #10
 800196a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800196c:	4b65      	ldr	r3, [pc, #404]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001974:	4b63      	ldr	r3, [pc, #396]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 8001976:	2200      	movs	r2, #0
 8001978:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800197a:	4b62      	ldr	r3, [pc, #392]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 800197c:	2200      	movs	r2, #0
 800197e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001980:	4b60      	ldr	r3, [pc, #384]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001988:	4b5e      	ldr	r3, [pc, #376]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 800198a:	2200      	movs	r2, #0
 800198c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800198e:	4b5d      	ldr	r3, [pc, #372]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 8001990:	2203      	movs	r2, #3
 8001992:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001994:	4b5b      	ldr	r3, [pc, #364]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 8001996:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800199a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800199c:	4b59      	ldr	r3, [pc, #356]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 800199e:	2200      	movs	r2, #0
 80019a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80019a2:	4b58      	ldr	r3, [pc, #352]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 80019aa:	4b56      	ldr	r3, [pc, #344]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80019b0:	4854      	ldr	r0, [pc, #336]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 80019b2:	f001 fb03 	bl	8002fbc <HAL_ADC_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_ADC3_Init+0x9c>
  {
    Error_Handler();
 80019bc:	f000 fb3e 	bl	800203c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80019c0:	2301      	movs	r3, #1
 80019c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019c4:	2306      	movs	r3, #6
 80019c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_92CYCLES_5;
 80019c8:	2305      	movs	r3, #5
 80019ca:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019cc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80019d0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019d2:	2304      	movs	r3, #4
 80019d4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	4619      	mov	r1, r3
 80019e2:	4848      	ldr	r0, [pc, #288]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 80019e4:	f002 f830 	bl	8003a48 <HAL_ADC_ConfigChannel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80019ee:	f000 fb25 	bl	800203c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019f2:	4b46      	ldr	r3, [pc, #280]	@ (8001b0c <MX_ADC3_Init+0x1e8>)
 80019f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019f6:	230c      	movs	r3, #12
 80019f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	4619      	mov	r1, r3
 80019fe:	4841      	ldr	r0, [pc, #260]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 8001a00:	f002 f822 	bl	8003a48 <HAL_ADC_ConfigChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001a0a:	f000 fb17 	bl	800203c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001a0e:	4b40      	ldr	r3, [pc, #256]	@ (8001b10 <MX_ADC3_Init+0x1ec>)
 8001a10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001a12:	2312      	movs	r3, #18
 8001a14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	483a      	ldr	r0, [pc, #232]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 8001a1c:	f002 f814 	bl	8003a48 <HAL_ADC_ConfigChannel>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001a26:	f000 fb09 	bl	800203c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001a2a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b14 <MX_ADC3_Init+0x1f0>)
 8001a2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001a2e:	2318      	movs	r3, #24
 8001a30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	4619      	mov	r1, r3
 8001a36:	4833      	ldr	r0, [pc, #204]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 8001a38:	f002 f806 	bl	8003a48 <HAL_ADC_ConfigChannel>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_ADC3_Init+0x122>
  {
    Error_Handler();
 8001a42:	f000 fafb 	bl	800203c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001a46:	4b34      	ldr	r3, [pc, #208]	@ (8001b18 <MX_ADC3_Init+0x1f4>)
 8001a48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001a4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	4619      	mov	r1, r3
 8001a54:	482b      	ldr	r0, [pc, #172]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 8001a56:	f001 fff7 	bl	8003a48 <HAL_ADC_ConfigChannel>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_ADC3_Init+0x140>
  {
    Error_Handler();
 8001a60:	f000 faec 	bl	800203c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001a64:	4b2d      	ldr	r3, [pc, #180]	@ (8001b1c <MX_ADC3_Init+0x1f8>)
 8001a66:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001a68:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8001a6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	4619      	mov	r1, r3
 8001a72:	4824      	ldr	r0, [pc, #144]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 8001a74:	f001 ffe8 	bl	8003a48 <HAL_ADC_ConfigChannel>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_ADC3_Init+0x15e>
  {
    Error_Handler();
 8001a7e:	f000 fadd 	bl	800203c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001a82:	4b27      	ldr	r3, [pc, #156]	@ (8001b20 <MX_ADC3_Init+0x1fc>)
 8001a84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001a86:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8001a8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	4619      	mov	r1, r3
 8001a90:	481c      	ldr	r0, [pc, #112]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 8001a92:	f001 ffd9 	bl	8003a48 <HAL_ADC_ConfigChannel>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_ADC3_Init+0x17c>
  {
    Error_Handler();
 8001a9c:	f000 face 	bl	800203c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001aa0:	4b20      	ldr	r3, [pc, #128]	@ (8001b24 <MX_ADC3_Init+0x200>)
 8001aa2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001aa4:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8001aa8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	4619      	mov	r1, r3
 8001aae:	4815      	ldr	r0, [pc, #84]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 8001ab0:	f001 ffca 	bl	8003a48 <HAL_ADC_ConfigChannel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_ADC3_Init+0x19a>
  {
    Error_Handler();
 8001aba:	f000 fabf 	bl	800203c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001abe:	4b1a      	ldr	r3, [pc, #104]	@ (8001b28 <MX_ADC3_Init+0x204>)
 8001ac0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001ac2:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001ac6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	4619      	mov	r1, r3
 8001acc:	480d      	ldr	r0, [pc, #52]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 8001ace:	f001 ffbb 	bl	8003a48 <HAL_ADC_ConfigChannel>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_ADC3_Init+0x1b8>
  {
    Error_Handler();
 8001ad8:	f000 fab0 	bl	800203c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001adc:	4b13      	ldr	r3, [pc, #76]	@ (8001b2c <MX_ADC3_Init+0x208>)
 8001ade:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001ae0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ae4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4806      	ldr	r0, [pc, #24]	@ (8001b04 <MX_ADC3_Init+0x1e0>)
 8001aec:	f001 ffac 	bl	8003a48 <HAL_ADC_ConfigChannel>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_ADC3_Init+0x1d6>
  {
    Error_Handler();
 8001af6:	f000 faa1 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	3728      	adds	r7, #40	@ 0x28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	240000f0 	.word	0x240000f0
 8001b08:	58026000 	.word	0x58026000
 8001b0c:	04300002 	.word	0x04300002
 8001b10:	08600004 	.word	0x08600004
 8001b14:	0c900008 	.word	0x0c900008
 8001b18:	10c00010 	.word	0x10c00010
 8001b1c:	14f00020 	.word	0x14f00020
 8001b20:	19200040 	.word	0x19200040
 8001b24:	1d500080 	.word	0x1d500080
 8001b28:	21800100 	.word	0x21800100
 8001b2c:	25b00200 	.word	0x25b00200

08001b30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b34:	4b27      	ldr	r3, [pc, #156]	@ (8001bd4 <MX_SPI1_Init+0xa4>)
 8001b36:	4a28      	ldr	r2, [pc, #160]	@ (8001bd8 <MX_SPI1_Init+0xa8>)
 8001b38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b3a:	4b26      	ldr	r3, [pc, #152]	@ (8001bd4 <MX_SPI1_Init+0xa4>)
 8001b3c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001b40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b42:	4b24      	ldr	r3, [pc, #144]	@ (8001bd4 <MX_SPI1_Init+0xa4>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b48:	4b22      	ldr	r3, [pc, #136]	@ (8001bd4 <MX_SPI1_Init+0xa4>)
 8001b4a:	2207      	movs	r2, #7
 8001b4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b4e:	4b21      	ldr	r3, [pc, #132]	@ (8001bd4 <MX_SPI1_Init+0xa4>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b54:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd4 <MX_SPI1_Init+0xa4>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd4 <MX_SPI1_Init+0xa4>)
 8001b5c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b62:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd4 <MX_SPI1_Init+0xa4>)
 8001b64:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001b68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd4 <MX_SPI1_Init+0xa4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b70:	4b18      	ldr	r3, [pc, #96]	@ (8001bd4 <MX_SPI1_Init+0xa4>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b76:	4b17      	ldr	r3, [pc, #92]	@ (8001bd4 <MX_SPI1_Init+0xa4>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001b7c:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <MX_SPI1_Init+0xa4>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b82:	4b14      	ldr	r3, [pc, #80]	@ (8001bd4 <MX_SPI1_Init+0xa4>)
 8001b84:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b88:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001b8a:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <MX_SPI1_Init+0xa4>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001b90:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <MX_SPI1_Init+0xa4>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b96:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <MX_SPI1_Init+0xa4>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd4 <MX_SPI1_Init+0xa4>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <MX_SPI1_Init+0xa4>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <MX_SPI1_Init+0xa4>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001bae:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <MX_SPI1_Init+0xa4>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001bb4:	4b07      	ldr	r3, [pc, #28]	@ (8001bd4 <MX_SPI1_Init+0xa4>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001bba:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <MX_SPI1_Init+0xa4>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bc0:	4804      	ldr	r0, [pc, #16]	@ (8001bd4 <MX_SPI1_Init+0xa4>)
 8001bc2:	f009 fc7b 	bl	800b4bc <HAL_SPI_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001bcc:	f000 fa36 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	24000250 	.word	0x24000250
 8001bd8:	40013000 	.word	0x40013000

08001bdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	@ 0x28
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be2:	f107 031c 	add.w	r3, r7, #28
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bee:	463b      	mov	r3, r7
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
 8001bfc:	615a      	str	r2, [r3, #20]
 8001bfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c00:	4b27      	ldr	r3, [pc, #156]	@ (8001ca0 <MX_TIM2_Init+0xc4>)
 8001c02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8001c08:	4b25      	ldr	r3, [pc, #148]	@ (8001ca0 <MX_TIM2_Init+0xc4>)
 8001c0a:	2240      	movs	r2, #64	@ 0x40
 8001c0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0e:	4b24      	ldr	r3, [pc, #144]	@ (8001ca0 <MX_TIM2_Init+0xc4>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001c14:	4b22      	ldr	r3, [pc, #136]	@ (8001ca0 <MX_TIM2_Init+0xc4>)
 8001c16:	22ff      	movs	r2, #255	@ 0xff
 8001c18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1a:	4b21      	ldr	r3, [pc, #132]	@ (8001ca0 <MX_TIM2_Init+0xc4>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca0 <MX_TIM2_Init+0xc4>)
 8001c22:	2280      	movs	r2, #128	@ 0x80
 8001c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c26:	481e      	ldr	r0, [pc, #120]	@ (8001ca0 <MX_TIM2_Init+0xc4>)
 8001c28:	f00a fac3 	bl	800c1b2 <HAL_TIM_PWM_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001c32:	f000 fa03 	bl	800203c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c3e:	f107 031c 	add.w	r3, r7, #28
 8001c42:	4619      	mov	r1, r3
 8001c44:	4816      	ldr	r0, [pc, #88]	@ (8001ca0 <MX_TIM2_Init+0xc4>)
 8001c46:	f00b f8e9 	bl	800ce1c <HAL_TIMEx_MasterConfigSynchronization>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001c50:	f000 f9f4 	bl	800203c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c54:	2360      	movs	r3, #96	@ 0x60
 8001c56:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001c60:	2304      	movs	r3, #4
 8001c62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c64:	463b      	mov	r3, r7
 8001c66:	2200      	movs	r2, #0
 8001c68:	4619      	mov	r1, r3
 8001c6a:	480d      	ldr	r0, [pc, #52]	@ (8001ca0 <MX_TIM2_Init+0xc4>)
 8001c6c:	f00a fc14 	bl	800c498 <HAL_TIM_PWM_ConfigChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001c76:	f000 f9e1 	bl	800203c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	2204      	movs	r2, #4
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4807      	ldr	r0, [pc, #28]	@ (8001ca0 <MX_TIM2_Init+0xc4>)
 8001c82:	f00a fc09 	bl	800c498 <HAL_TIM_PWM_ConfigChannel>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001c8c:	f000 f9d6 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c90:	4803      	ldr	r0, [pc, #12]	@ (8001ca0 <MX_TIM2_Init+0xc4>)
 8001c92:	f000 fc09 	bl	80024a8 <HAL_TIM_MspPostInit>

}
 8001c96:	bf00      	nop
 8001c98:	3728      	adds	r7, #40	@ 0x28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	240002d8 	.word	0x240002d8

08001ca4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ca8:	4b22      	ldr	r3, [pc, #136]	@ (8001d34 <MX_USART1_UART_Init+0x90>)
 8001caa:	4a23      	ldr	r2, [pc, #140]	@ (8001d38 <MX_USART1_UART_Init+0x94>)
 8001cac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cae:	4b21      	ldr	r3, [pc, #132]	@ (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cca:	220c      	movs	r2, #12
 8001ccc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cce:	4b19      	ldr	r3, [pc, #100]	@ (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd4:	4b17      	ldr	r3, [pc, #92]	@ (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cda:	4b16      	ldr	r3, [pc, #88]	@ (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ce0:	4b14      	ldr	r3, [pc, #80]	@ (8001d34 <MX_USART1_UART_Init+0x90>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ce6:	4b13      	ldr	r3, [pc, #76]	@ (8001d34 <MX_USART1_UART_Init+0x90>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cec:	4811      	ldr	r0, [pc, #68]	@ (8001d34 <MX_USART1_UART_Init+0x90>)
 8001cee:	f00b f931 	bl	800cf54 <HAL_UART_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001cf8:	f000 f9a0 	bl	800203c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	480d      	ldr	r0, [pc, #52]	@ (8001d34 <MX_USART1_UART_Init+0x90>)
 8001d00:	f00d fcb3 	bl	800f66a <HAL_UARTEx_SetTxFifoThreshold>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d0a:	f000 f997 	bl	800203c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4808      	ldr	r0, [pc, #32]	@ (8001d34 <MX_USART1_UART_Init+0x90>)
 8001d12:	f00d fce8 	bl	800f6e6 <HAL_UARTEx_SetRxFifoThreshold>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d1c:	f000 f98e 	bl	800203c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d20:	4804      	ldr	r0, [pc, #16]	@ (8001d34 <MX_USART1_UART_Init+0x90>)
 8001d22:	f00d fc69 	bl	800f5f8 <HAL_UARTEx_DisableFifoMode>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d2c:	f000 f986 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	24000324 	.word	0x24000324
 8001d38:	40011000 	.word	0x40011000

08001d3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d42:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <MX_DMA_Init+0x4c>)
 8001d44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d48:	4a0f      	ldr	r2, [pc, #60]	@ (8001d88 <MX_DMA_Init+0x4c>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001d52:	4b0d      	ldr	r3, [pc, #52]	@ (8001d88 <MX_DMA_Init+0x4c>)
 8001d54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	2100      	movs	r1, #0
 8001d64:	200b      	movs	r0, #11
 8001d66:	f002 ffc0 	bl	8004cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d6a:	200b      	movs	r0, #11
 8001d6c:	f002 ffd7 	bl	8004d1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2100      	movs	r1, #0
 8001d74:	200c      	movs	r0, #12
 8001d76:	f002 ffb8 	bl	8004cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d7a:	200c      	movs	r0, #12
 8001d7c:	f002 ffcf 	bl	8004d1e <HAL_NVIC_EnableIRQ>

}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	58024400 	.word	0x58024400

08001d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08e      	sub	sp, #56	@ 0x38
 8001d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001da2:	4b9f      	ldr	r3, [pc, #636]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001da8:	4a9d      	ldr	r2, [pc, #628]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001daa:	f043 0310 	orr.w	r3, r3, #16
 8001dae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001db2:	4b9b      	ldr	r3, [pc, #620]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	623b      	str	r3, [r7, #32]
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc0:	4b97      	ldr	r3, [pc, #604]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dc6:	4a96      	ldr	r2, [pc, #600]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dd0:	4b93      	ldr	r3, [pc, #588]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	61fb      	str	r3, [r7, #28]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dde:	4b90      	ldr	r3, [pc, #576]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001de4:	4a8e      	ldr	r2, [pc, #568]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001de6:	f043 0320 	orr.w	r3, r3, #32
 8001dea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dee:	4b8c      	ldr	r3, [pc, #560]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	61bb      	str	r3, [r7, #24]
 8001dfa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dfc:	4b88      	ldr	r3, [pc, #544]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e02:	4a87      	ldr	r2, [pc, #540]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e0c:	4b84      	ldr	r3, [pc, #528]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	4b81      	ldr	r3, [pc, #516]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e20:	4a7f      	ldr	r2, [pc, #508]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e2a:	4b7d      	ldr	r3, [pc, #500]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e38:	4b79      	ldr	r3, [pc, #484]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e3e:	4a78      	ldr	r2, [pc, #480]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e48:	4b75      	ldr	r3, [pc, #468]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e56:	4b72      	ldr	r3, [pc, #456]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e5c:	4a70      	ldr	r2, [pc, #448]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001e5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e66:	4b6e      	ldr	r3, [pc, #440]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e74:	4b6a      	ldr	r3, [pc, #424]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e7a:	4a69      	ldr	r2, [pc, #420]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001e7c:	f043 0308 	orr.w	r3, r3, #8
 8001e80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e84:	4b66      	ldr	r3, [pc, #408]	@ (8002020 <MX_GPIO_Init+0x294>)
 8001e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e92:	2200      	movs	r2, #0
 8001e94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e98:	4862      	ldr	r0, [pc, #392]	@ (8002024 <MX_GPIO_Init+0x298>)
 8001e9a:	f005 ff3b 	bl	8007d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN3_Pin|IN4_Pin|IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	213c      	movs	r1, #60	@ 0x3c
 8001ea2:	4861      	ldr	r0, [pc, #388]	@ (8002028 <MX_GPIO_Init+0x29c>)
 8001ea4:	f005 ff36 	bl	8007d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001eae:	485f      	ldr	r0, [pc, #380]	@ (800202c <MX_GPIO_Init+0x2a0>)
 8001eb0:	f005 ff30 	bl	8007d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001eba:	485d      	ldr	r0, [pc, #372]	@ (8002030 <MX_GPIO_Init+0x2a4>)
 8001ebc:	f005 ff2a 	bl	8007d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|LORA_TX_LED_Pin, GPIO_PIN_RESET);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001ec6:	485b      	ldr	r0, [pc, #364]	@ (8002034 <MX_GPIO_Init+0x2a8>)
 8001ec8:	f005 ff24 	bl	8007d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RX_LED_GPIO_Port, LORA_RX_LED_Pin, GPIO_PIN_SET);
 8001ecc:	2201      	movs	r2, #1
 8001ece:	2140      	movs	r1, #64	@ 0x40
 8001ed0:	4859      	ldr	r0, [pc, #356]	@ (8002038 <MX_GPIO_Init+0x2ac>)
 8001ed2:	f005 ff1f 	bl	8007d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LORA_NSS_Pin|LORA_RST_Pin, GPIO_PIN_SET);
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001edc:	4855      	ldr	r0, [pc, #340]	@ (8002034 <MX_GPIO_Init+0x2a8>)
 8001ede:	f005 ff19 	bl	8007d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_0
 8001ee2:	231f      	movs	r3, #31
 8001ee4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ee6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001eea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ef0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	484d      	ldr	r0, [pc, #308]	@ (800202c <MX_GPIO_Init+0x2a0>)
 8001ef8:	f005 fd64 	bl	80079c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001efc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f02:	2301      	movs	r3, #1
 8001f04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f12:	4619      	mov	r1, r3
 8001f14:	4843      	ldr	r0, [pc, #268]	@ (8002024 <MX_GPIO_Init+0x298>)
 8001f16:	f005 fd55 	bl	80079c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN3_Pin IN4_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin|IN2_Pin|IN1_Pin;
 8001f1a:	233c      	movs	r3, #60	@ 0x3c
 8001f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f2e:	4619      	mov	r1, r3
 8001f30:	483d      	ldr	r0, [pc, #244]	@ (8002028 <MX_GPIO_Init+0x29c>)
 8001f32:	f005 fd47 	bl	80079c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001f36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f40:	2302      	movs	r3, #2
 8001f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f44:	2302      	movs	r3, #2
 8001f46:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001f48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4837      	ldr	r0, [pc, #220]	@ (800202c <MX_GPIO_Init+0x2a0>)
 8001f50:	f005 fd38 	bl	80079c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 8001f54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f62:	2300      	movs	r3, #0
 8001f64:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 8001f66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4830      	ldr	r0, [pc, #192]	@ (8002030 <MX_GPIO_Init+0x2a4>)
 8001f6e:	f005 fd29 	bl	80079c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 LORA_NSS_Pin LORA_RST_Pin LORA_TX_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|LORA_NSS_Pin|LORA_RST_Pin|LORA_TX_LED_Pin;
 8001f72:	f44f 43a9 	mov.w	r3, #21632	@ 0x5480
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f88:	4619      	mov	r1, r3
 8001f8a:	482a      	ldr	r0, [pc, #168]	@ (8002034 <MX_GPIO_Init+0x2a8>)
 8001f8c:	f005 fd1a 	bl	80079c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RX_LED_Pin */
  GPIO_InitStruct.Pin = LORA_RX_LED_Pin;
 8001f90:	2340      	movs	r3, #64	@ 0x40
 8001f92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f94:	2301      	movs	r3, #1
 8001f96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LORA_RX_LED_GPIO_Port, &GPIO_InitStruct);
 8001fa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4824      	ldr	r0, [pc, #144]	@ (8002038 <MX_GPIO_Init+0x2ac>)
 8001fa8:	f005 fd0c 	bl	80079c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO0_Pin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 8001fac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fb2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 8001fbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	481c      	ldr	r0, [pc, #112]	@ (8002034 <MX_GPIO_Init+0x2a8>)
 8001fc4:	f005 fcfe 	bl	80079c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2100      	movs	r1, #0
 8001fcc:	2006      	movs	r0, #6
 8001fce:	f002 fe8c 	bl	8004cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001fd2:	2006      	movs	r0, #6
 8001fd4:	f002 fea3 	bl	8004d1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2100      	movs	r1, #0
 8001fdc:	2007      	movs	r0, #7
 8001fde:	f002 fe84 	bl	8004cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001fe2:	2007      	movs	r0, #7
 8001fe4:	f002 fe9b 	bl	8004d1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2100      	movs	r1, #0
 8001fec:	2008      	movs	r0, #8
 8001fee:	f002 fe7c 	bl	8004cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001ff2:	2008      	movs	r0, #8
 8001ff4:	f002 fe93 	bl	8004d1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	2009      	movs	r0, #9
 8001ffe:	f002 fe74 	bl	8004cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002002:	2009      	movs	r0, #9
 8002004:	f002 fe8b 	bl	8004d1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002008:	2200      	movs	r2, #0
 800200a:	2100      	movs	r1, #0
 800200c:	2028      	movs	r0, #40	@ 0x28
 800200e:	f002 fe6c 	bl	8004cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002012:	2028      	movs	r0, #40	@ 0x28
 8002014:	f002 fe83 	bl	8004d1e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002018:	bf00      	nop
 800201a:	3738      	adds	r7, #56	@ 0x38
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	58024400 	.word	0x58024400
 8002024:	58020800 	.word	0x58020800
 8002028:	58020000 	.word	0x58020000
 800202c:	58021000 	.word	0x58021000
 8002030:	58020400 	.word	0x58020400
 8002034:	58021800 	.word	0x58021800
 8002038:	58020c00 	.word	0x58020c00

0800203c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002040:	b672      	cpsid	i
}
 8002042:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <Error_Handler+0x8>

08002048 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204e:	4b0a      	ldr	r3, [pc, #40]	@ (8002078 <HAL_MspInit+0x30>)
 8002050:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002054:	4a08      	ldr	r2, [pc, #32]	@ (8002078 <HAL_MspInit+0x30>)
 8002056:	f043 0302 	orr.w	r3, r3, #2
 800205a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800205e:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <HAL_MspInit+0x30>)
 8002060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	58024400 	.word	0x58024400

0800207c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b090      	sub	sp, #64	@ 0x40
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4aa0      	ldr	r2, [pc, #640]	@ (800231c <HAL_ADC_MspInit+0x2a0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	f040 80b6 	bne.w	800220c <HAL_ADC_MspInit+0x190>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80020a0:	4b9f      	ldr	r3, [pc, #636]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 80020a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80020a6:	4a9e      	ldr	r2, [pc, #632]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 80020a8:	f043 0320 	orr.w	r3, r3, #32
 80020ac:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80020b0:	4b9b      	ldr	r3, [pc, #620]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 80020b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020be:	4b98      	ldr	r3, [pc, #608]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 80020c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020c4:	4a96      	ldr	r2, [pc, #600]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 80020c6:	f043 0304 	orr.w	r3, r3, #4
 80020ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020ce:	4b94      	ldr	r3, [pc, #592]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 80020d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80020da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020dc:	4b90      	ldr	r3, [pc, #576]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 80020de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e2:	4a8f      	ldr	r2, [pc, #572]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020ec:	4b8c      	ldr	r3, [pc, #560]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 80020ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	623b      	str	r3, [r7, #32]
 80020f8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fa:	4b89      	ldr	r3, [pc, #548]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 80020fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002100:	4a87      	ldr	r2, [pc, #540]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 8002102:	f043 0302 	orr.w	r3, r3, #2
 8002106:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800210a:	4b85      	ldr	r3, [pc, #532]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 800210c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002118:	4b81      	ldr	r3, [pc, #516]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 800211a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800211e:	4a80      	ldr	r2, [pc, #512]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 8002120:	f043 0320 	orr.w	r3, r3, #32
 8002124:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002128:	4b7d      	ldr	r3, [pc, #500]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 800212a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800212e:	f003 0320 	and.w	r3, r3, #32
 8002132:	61bb      	str	r3, [r7, #24]
 8002134:	69bb      	ldr	r3, [r7, #24]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002136:	2333      	movs	r3, #51	@ 0x33
 8002138:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800213a:	2303      	movs	r3, #3
 800213c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002142:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002146:	4619      	mov	r1, r3
 8002148:	4876      	ldr	r0, [pc, #472]	@ (8002324 <HAL_ADC_MspInit+0x2a8>)
 800214a:	f005 fc3b 	bl	80079c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800214e:	23c0      	movs	r3, #192	@ 0xc0
 8002150:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002152:	2303      	movs	r3, #3
 8002154:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800215e:	4619      	mov	r1, r3
 8002160:	4871      	ldr	r0, [pc, #452]	@ (8002328 <HAL_ADC_MspInit+0x2ac>)
 8002162:	f005 fc2f 	bl	80079c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002166:	2303      	movs	r3, #3
 8002168:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800216a:	2303      	movs	r3, #3
 800216c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002172:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002176:	4619      	mov	r1, r3
 8002178:	486c      	ldr	r0, [pc, #432]	@ (800232c <HAL_ADC_MspInit+0x2b0>)
 800217a:	f005 fc23 	bl	80079c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800217e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002182:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002184:	2303      	movs	r3, #3
 8002186:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800218c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002190:	4619      	mov	r1, r3
 8002192:	4867      	ldr	r0, [pc, #412]	@ (8002330 <HAL_ADC_MspInit+0x2b4>)
 8002194:	f005 fc16 	bl	80079c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002198:	4b66      	ldr	r3, [pc, #408]	@ (8002334 <HAL_ADC_MspInit+0x2b8>)
 800219a:	4a67      	ldr	r2, [pc, #412]	@ (8002338 <HAL_ADC_MspInit+0x2bc>)
 800219c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800219e:	4b65      	ldr	r3, [pc, #404]	@ (8002334 <HAL_ADC_MspInit+0x2b8>)
 80021a0:	2209      	movs	r2, #9
 80021a2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021a4:	4b63      	ldr	r3, [pc, #396]	@ (8002334 <HAL_ADC_MspInit+0x2b8>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021aa:	4b62      	ldr	r3, [pc, #392]	@ (8002334 <HAL_ADC_MspInit+0x2b8>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021b0:	4b60      	ldr	r3, [pc, #384]	@ (8002334 <HAL_ADC_MspInit+0x2b8>)
 80021b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002334 <HAL_ADC_MspInit+0x2b8>)
 80021ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021c0:	4b5c      	ldr	r3, [pc, #368]	@ (8002334 <HAL_ADC_MspInit+0x2b8>)
 80021c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021c6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80021c8:	4b5a      	ldr	r3, [pc, #360]	@ (8002334 <HAL_ADC_MspInit+0x2b8>)
 80021ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021ce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80021d0:	4b58      	ldr	r3, [pc, #352]	@ (8002334 <HAL_ADC_MspInit+0x2b8>)
 80021d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021d6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021d8:	4b56      	ldr	r3, [pc, #344]	@ (8002334 <HAL_ADC_MspInit+0x2b8>)
 80021da:	2200      	movs	r2, #0
 80021dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80021de:	4855      	ldr	r0, [pc, #340]	@ (8002334 <HAL_ADC_MspInit+0x2b8>)
 80021e0:	f002 fdb8 	bl	8004d54 <HAL_DMA_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_ADC_MspInit+0x172>
    {
      Error_Handler();
 80021ea:	f7ff ff27 	bl	800203c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a50      	ldr	r2, [pc, #320]	@ (8002334 <HAL_ADC_MspInit+0x2b8>)
 80021f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80021f4:	4a4f      	ldr	r2, [pc, #316]	@ (8002334 <HAL_ADC_MspInit+0x2b8>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2100      	movs	r1, #0
 80021fe:	2012      	movs	r0, #18
 8002200:	f002 fd73 	bl	8004cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002204:	2012      	movs	r0, #18
 8002206:	f002 fd8a 	bl	8004d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800220a:	e083      	b.n	8002314 <HAL_ADC_MspInit+0x298>
  else if(hadc->Instance==ADC3)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a4a      	ldr	r2, [pc, #296]	@ (800233c <HAL_ADC_MspInit+0x2c0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d17e      	bne.n	8002314 <HAL_ADC_MspInit+0x298>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002216:	4b42      	ldr	r3, [pc, #264]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 8002218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800221c:	4a40      	ldr	r2, [pc, #256]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 800221e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002222:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002226:	4b3e      	ldr	r3, [pc, #248]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 8002228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800222c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002234:	4b3a      	ldr	r3, [pc, #232]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 8002236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800223a:	4a39      	ldr	r2, [pc, #228]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 800223c:	f043 0320 	orr.w	r3, r3, #32
 8002240:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002244:	4b36      	ldr	r3, [pc, #216]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 8002246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800224a:	f003 0320 	and.w	r3, r3, #32
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002252:	4b33      	ldr	r3, [pc, #204]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 8002254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002258:	4a31      	ldr	r2, [pc, #196]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 800225a:	f043 0304 	orr.w	r3, r3, #4
 800225e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002262:	4b2f      	ldr	r3, [pc, #188]	@ (8002320 <HAL_ADC_MspInit+0x2a4>)
 8002264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002270:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 8002274:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002276:	2303      	movs	r3, #3
 8002278:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800227e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002282:	4619      	mov	r1, r3
 8002284:	482a      	ldr	r0, [pc, #168]	@ (8002330 <HAL_ADC_MspInit+0x2b4>)
 8002286:	f005 fb9d 	bl	80079c4 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800228a:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 800228e:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002292:	f000 fb91 	bl	80029b8 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002296:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 800229a:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800229e:	f000 fb8b 	bl	80029b8 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 80022a2:	4b27      	ldr	r3, [pc, #156]	@ (8002340 <HAL_ADC_MspInit+0x2c4>)
 80022a4:	4a27      	ldr	r2, [pc, #156]	@ (8002344 <HAL_ADC_MspInit+0x2c8>)
 80022a6:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80022a8:	4b25      	ldr	r3, [pc, #148]	@ (8002340 <HAL_ADC_MspInit+0x2c4>)
 80022aa:	2273      	movs	r2, #115	@ 0x73
 80022ac:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022ae:	4b24      	ldr	r3, [pc, #144]	@ (8002340 <HAL_ADC_MspInit+0x2c4>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80022b4:	4b22      	ldr	r3, [pc, #136]	@ (8002340 <HAL_ADC_MspInit+0x2c4>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80022ba:	4b21      	ldr	r3, [pc, #132]	@ (8002340 <HAL_ADC_MspInit+0x2c4>)
 80022bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022c0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002340 <HAL_ADC_MspInit+0x2c4>)
 80022c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022c8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002340 <HAL_ADC_MspInit+0x2c4>)
 80022cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022d0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80022d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <HAL_ADC_MspInit+0x2c4>)
 80022d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022d8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 80022da:	4b19      	ldr	r3, [pc, #100]	@ (8002340 <HAL_ADC_MspInit+0x2c4>)
 80022dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022e0:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022e2:	4b17      	ldr	r3, [pc, #92]	@ (8002340 <HAL_ADC_MspInit+0x2c4>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80022e8:	4815      	ldr	r0, [pc, #84]	@ (8002340 <HAL_ADC_MspInit+0x2c4>)
 80022ea:	f002 fd33 	bl	8004d54 <HAL_DMA_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_ADC_MspInit+0x27c>
      Error_Handler();
 80022f4:	f7ff fea2 	bl	800203c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a11      	ldr	r2, [pc, #68]	@ (8002340 <HAL_ADC_MspInit+0x2c4>)
 80022fc:	659a      	str	r2, [r3, #88]	@ 0x58
 80022fe:	4a10      	ldr	r2, [pc, #64]	@ (8002340 <HAL_ADC_MspInit+0x2c4>)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8002304:	2200      	movs	r2, #0
 8002306:	2100      	movs	r1, #0
 8002308:	207f      	movs	r0, #127	@ 0x7f
 800230a:	f002 fcee 	bl	8004cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800230e:	207f      	movs	r0, #127	@ 0x7f
 8002310:	f002 fd05 	bl	8004d1e <HAL_NVIC_EnableIRQ>
}
 8002314:	bf00      	nop
 8002316:	3740      	adds	r7, #64	@ 0x40
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40022000 	.word	0x40022000
 8002320:	58024400 	.word	0x58024400
 8002324:	58020800 	.word	0x58020800
 8002328:	58020000 	.word	0x58020000
 800232c:	58020400 	.word	0x58020400
 8002330:	58021400 	.word	0x58021400
 8002334:	24000160 	.word	0x24000160
 8002338:	40020010 	.word	0x40020010
 800233c:	58026000 	.word	0x58026000
 8002340:	240001d8 	.word	0x240001d8
 8002344:	40020028 	.word	0x40020028

08002348 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b0ba      	sub	sp, #232	@ 0xe8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002360:	f107 0318 	add.w	r3, r7, #24
 8002364:	22b8      	movs	r2, #184	@ 0xb8
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f00d fa99 	bl	800f8a0 <memset>
  if(hspi->Instance==SPI1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a39      	ldr	r2, [pc, #228]	@ (8002458 <HAL_SPI_MspInit+0x110>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d16a      	bne.n	800244e <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002378:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002384:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002388:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800238a:	f107 0318 	add.w	r3, r7, #24
 800238e:	4618      	mov	r0, r3
 8002390:	f006 fcae 	bl	8008cf0 <HAL_RCCEx_PeriphCLKConfig>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800239a:	f7ff fe4f 	bl	800203c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800239e:	4b2f      	ldr	r3, [pc, #188]	@ (800245c <HAL_SPI_MspInit+0x114>)
 80023a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023a4:	4a2d      	ldr	r2, [pc, #180]	@ (800245c <HAL_SPI_MspInit+0x114>)
 80023a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023ae:	4b2b      	ldr	r3, [pc, #172]	@ (800245c <HAL_SPI_MspInit+0x114>)
 80023b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023bc:	4b27      	ldr	r3, [pc, #156]	@ (800245c <HAL_SPI_MspInit+0x114>)
 80023be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c2:	4a26      	ldr	r2, [pc, #152]	@ (800245c <HAL_SPI_MspInit+0x114>)
 80023c4:	f043 0308 	orr.w	r3, r3, #8
 80023c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023cc:	4b23      	ldr	r3, [pc, #140]	@ (800245c <HAL_SPI_MspInit+0x114>)
 80023ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023da:	4b20      	ldr	r3, [pc, #128]	@ (800245c <HAL_SPI_MspInit+0x114>)
 80023dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023e0:	4a1e      	ldr	r2, [pc, #120]	@ (800245c <HAL_SPI_MspInit+0x114>)
 80023e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023ea:	4b1c      	ldr	r3, [pc, #112]	@ (800245c <HAL_SPI_MspInit+0x114>)
 80023ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023f8:	2380      	movs	r3, #128	@ 0x80
 80023fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fe:	2302      	movs	r3, #2
 8002400:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	2300      	movs	r3, #0
 800240c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002410:	2305      	movs	r3, #5
 8002412:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002416:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800241a:	4619      	mov	r1, r3
 800241c:	4810      	ldr	r0, [pc, #64]	@ (8002460 <HAL_SPI_MspInit+0x118>)
 800241e:	f005 fad1 	bl	80079c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002422:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002426:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242a:	2302      	movs	r3, #2
 800242c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002436:	2300      	movs	r3, #0
 8002438:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800243c:	2305      	movs	r3, #5
 800243e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002442:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002446:	4619      	mov	r1, r3
 8002448:	4806      	ldr	r0, [pc, #24]	@ (8002464 <HAL_SPI_MspInit+0x11c>)
 800244a:	f005 fabb 	bl	80079c4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800244e:	bf00      	nop
 8002450:	37e8      	adds	r7, #232	@ 0xe8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40013000 	.word	0x40013000
 800245c:	58024400 	.word	0x58024400
 8002460:	58020c00 	.word	0x58020c00
 8002464:	58021800 	.word	0x58021800

08002468 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002478:	d10e      	bne.n	8002498 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800247a:	4b0a      	ldr	r3, [pc, #40]	@ (80024a4 <HAL_TIM_PWM_MspInit+0x3c>)
 800247c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002480:	4a08      	ldr	r2, [pc, #32]	@ (80024a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800248a:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <HAL_TIM_PWM_MspInit+0x3c>)
 800248c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	58024400 	.word	0x58024400

080024a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 030c 	add.w	r3, r7, #12
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c8:	d11e      	bne.n	8002508 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ca:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <HAL_TIM_MspPostInit+0x68>)
 80024cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002510 <HAL_TIM_MspPostInit+0x68>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024da:	4b0d      	ldr	r3, [pc, #52]	@ (8002510 <HAL_TIM_MspPostInit+0x68>)
 80024dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024e8:	2303      	movs	r3, #3
 80024ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ec:	2302      	movs	r3, #2
 80024ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024f8:	2301      	movs	r3, #1
 80024fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fc:	f107 030c 	add.w	r3, r7, #12
 8002500:	4619      	mov	r1, r3
 8002502:	4804      	ldr	r0, [pc, #16]	@ (8002514 <HAL_TIM_MspPostInit+0x6c>)
 8002504:	f005 fa5e 	bl	80079c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002508:	bf00      	nop
 800250a:	3720      	adds	r7, #32
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	58024400 	.word	0x58024400
 8002514:	58020000 	.word	0x58020000

08002518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b0b8      	sub	sp, #224	@ 0xe0
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002530:	f107 0310 	add.w	r3, r7, #16
 8002534:	22b8      	movs	r2, #184	@ 0xb8
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f00d f9b1 	bl	800f8a0 <memset>
  if(huart->Instance==USART1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a2b      	ldr	r2, [pc, #172]	@ (80025f0 <HAL_UART_MspInit+0xd8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d14e      	bne.n	80025e6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002548:	f04f 0201 	mov.w	r2, #1
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002554:	2300      	movs	r3, #0
 8002556:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800255a:	f107 0310 	add.w	r3, r7, #16
 800255e:	4618      	mov	r0, r3
 8002560:	f006 fbc6 	bl	8008cf0 <HAL_RCCEx_PeriphCLKConfig>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800256a:	f7ff fd67 	bl	800203c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800256e:	4b21      	ldr	r3, [pc, #132]	@ (80025f4 <HAL_UART_MspInit+0xdc>)
 8002570:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002574:	4a1f      	ldr	r2, [pc, #124]	@ (80025f4 <HAL_UART_MspInit+0xdc>)
 8002576:	f043 0310 	orr.w	r3, r3, #16
 800257a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800257e:	4b1d      	ldr	r3, [pc, #116]	@ (80025f4 <HAL_UART_MspInit+0xdc>)
 8002580:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800258c:	4b19      	ldr	r3, [pc, #100]	@ (80025f4 <HAL_UART_MspInit+0xdc>)
 800258e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002592:	4a18      	ldr	r2, [pc, #96]	@ (80025f4 <HAL_UART_MspInit+0xdc>)
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800259c:	4b15      	ldr	r3, [pc, #84]	@ (80025f4 <HAL_UART_MspInit+0xdc>)
 800259e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80025aa:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80025ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b2:	2302      	movs	r3, #2
 80025b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025be:	2303      	movs	r3, #3
 80025c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80025c4:	2304      	movs	r3, #4
 80025c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ca:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80025ce:	4619      	mov	r1, r3
 80025d0:	4809      	ldr	r0, [pc, #36]	@ (80025f8 <HAL_UART_MspInit+0xe0>)
 80025d2:	f005 f9f7 	bl	80079c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025d6:	2200      	movs	r2, #0
 80025d8:	2100      	movs	r1, #0
 80025da:	2025      	movs	r0, #37	@ 0x25
 80025dc:	f002 fb85 	bl	8004cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025e0:	2025      	movs	r0, #37	@ 0x25
 80025e2:	f002 fb9c 	bl	8004d1e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80025e6:	bf00      	nop
 80025e8:	37e0      	adds	r7, #224	@ 0xe0
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40011000 	.word	0x40011000
 80025f4:	58024400 	.word	0x58024400
 80025f8:	58020400 	.word	0x58020400

080025fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002600:	bf00      	nop
 8002602:	e7fd      	b.n	8002600 <NMI_Handler+0x4>

08002604 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002608:	bf00      	nop
 800260a:	e7fd      	b.n	8002608 <HardFault_Handler+0x4>

0800260c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002610:	bf00      	nop
 8002612:	e7fd      	b.n	8002610 <MemManage_Handler+0x4>

08002614 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002618:	bf00      	nop
 800261a:	e7fd      	b.n	8002618 <BusFault_Handler+0x4>

0800261c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <UsageFault_Handler+0x4>

08002624 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002652:	f000 f96d 	bl	8002930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}

0800265a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800265e:	2001      	movs	r0, #1
 8002660:	f005 fb8b 	bl	8007d7a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002664:	bf00      	nop
 8002666:	bd80      	pop	{r7, pc}

08002668 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800266c:	2002      	movs	r0, #2
 800266e:	f005 fb84 	bl	8007d7a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}

08002676 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800267a:	2004      	movs	r0, #4
 800267c:	f005 fb7d 	bl	8007d7a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}

08002684 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002688:	2008      	movs	r0, #8
 800268a:	f005 fb76 	bl	8007d7a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002698:	4802      	ldr	r0, [pc, #8]	@ (80026a4 <DMA1_Stream0_IRQHandler+0x10>)
 800269a:	f003 fe81 	bl	80063a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	24000160 	.word	0x24000160

080026a8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80026ac:	4802      	ldr	r0, [pc, #8]	@ (80026b8 <DMA1_Stream1_IRQHandler+0x10>)
 80026ae:	f003 fe77 	bl	80063a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	240001d8 	.word	0x240001d8

080026bc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80026c0:	4802      	ldr	r0, [pc, #8]	@ (80026cc <ADC_IRQHandler+0x10>)
 80026c2:	f000 ff5f 	bl	8003584 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	24000080 	.word	0x24000080

080026d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026d4:	4802      	ldr	r0, [pc, #8]	@ (80026e0 <USART1_IRQHandler+0x10>)
 80026d6:	f00a fc8d 	bl	800cff4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	24000324 	.word	0x24000324

080026e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_DIO0_Pin);
 80026e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80026ec:	f005 fb45 	bl	8007d7a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80026f8:	4802      	ldr	r0, [pc, #8]	@ (8002704 <ADC3_IRQHandler+0x10>)
 80026fa:	f000 ff43 	bl	8003584 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	240000f0 	.word	0x240000f0

08002708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800270c:	4b32      	ldr	r3, [pc, #200]	@ (80027d8 <SystemInit+0xd0>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002712:	4a31      	ldr	r2, [pc, #196]	@ (80027d8 <SystemInit+0xd0>)
 8002714:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002718:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800271c:	4b2f      	ldr	r3, [pc, #188]	@ (80027dc <SystemInit+0xd4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	2b06      	cmp	r3, #6
 8002726:	d807      	bhi.n	8002738 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002728:	4b2c      	ldr	r3, [pc, #176]	@ (80027dc <SystemInit+0xd4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f023 030f 	bic.w	r3, r3, #15
 8002730:	4a2a      	ldr	r2, [pc, #168]	@ (80027dc <SystemInit+0xd4>)
 8002732:	f043 0307 	orr.w	r3, r3, #7
 8002736:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002738:	4b29      	ldr	r3, [pc, #164]	@ (80027e0 <SystemInit+0xd8>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a28      	ldr	r2, [pc, #160]	@ (80027e0 <SystemInit+0xd8>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002744:	4b26      	ldr	r3, [pc, #152]	@ (80027e0 <SystemInit+0xd8>)
 8002746:	2200      	movs	r2, #0
 8002748:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800274a:	4b25      	ldr	r3, [pc, #148]	@ (80027e0 <SystemInit+0xd8>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	4924      	ldr	r1, [pc, #144]	@ (80027e0 <SystemInit+0xd8>)
 8002750:	4b24      	ldr	r3, [pc, #144]	@ (80027e4 <SystemInit+0xdc>)
 8002752:	4013      	ands	r3, r2
 8002754:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002756:	4b21      	ldr	r3, [pc, #132]	@ (80027dc <SystemInit+0xd4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d007      	beq.n	8002772 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002762:	4b1e      	ldr	r3, [pc, #120]	@ (80027dc <SystemInit+0xd4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 030f 	bic.w	r3, r3, #15
 800276a:	4a1c      	ldr	r2, [pc, #112]	@ (80027dc <SystemInit+0xd4>)
 800276c:	f043 0307 	orr.w	r3, r3, #7
 8002770:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002772:	4b1b      	ldr	r3, [pc, #108]	@ (80027e0 <SystemInit+0xd8>)
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002778:	4b19      	ldr	r3, [pc, #100]	@ (80027e0 <SystemInit+0xd8>)
 800277a:	2200      	movs	r2, #0
 800277c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800277e:	4b18      	ldr	r3, [pc, #96]	@ (80027e0 <SystemInit+0xd8>)
 8002780:	2200      	movs	r2, #0
 8002782:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002784:	4b16      	ldr	r3, [pc, #88]	@ (80027e0 <SystemInit+0xd8>)
 8002786:	4a18      	ldr	r2, [pc, #96]	@ (80027e8 <SystemInit+0xe0>)
 8002788:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800278a:	4b15      	ldr	r3, [pc, #84]	@ (80027e0 <SystemInit+0xd8>)
 800278c:	4a17      	ldr	r2, [pc, #92]	@ (80027ec <SystemInit+0xe4>)
 800278e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002790:	4b13      	ldr	r3, [pc, #76]	@ (80027e0 <SystemInit+0xd8>)
 8002792:	4a17      	ldr	r2, [pc, #92]	@ (80027f0 <SystemInit+0xe8>)
 8002794:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002796:	4b12      	ldr	r3, [pc, #72]	@ (80027e0 <SystemInit+0xd8>)
 8002798:	2200      	movs	r2, #0
 800279a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800279c:	4b10      	ldr	r3, [pc, #64]	@ (80027e0 <SystemInit+0xd8>)
 800279e:	4a14      	ldr	r2, [pc, #80]	@ (80027f0 <SystemInit+0xe8>)
 80027a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80027a2:	4b0f      	ldr	r3, [pc, #60]	@ (80027e0 <SystemInit+0xd8>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027a8:	4b0d      	ldr	r3, [pc, #52]	@ (80027e0 <SystemInit+0xd8>)
 80027aa:	4a11      	ldr	r2, [pc, #68]	@ (80027f0 <SystemInit+0xe8>)
 80027ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027ae:	4b0c      	ldr	r3, [pc, #48]	@ (80027e0 <SystemInit+0xd8>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027b4:	4b0a      	ldr	r3, [pc, #40]	@ (80027e0 <SystemInit+0xd8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a09      	ldr	r2, [pc, #36]	@ (80027e0 <SystemInit+0xd8>)
 80027ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027c0:	4b07      	ldr	r3, [pc, #28]	@ (80027e0 <SystemInit+0xd8>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027c6:	4b0b      	ldr	r3, [pc, #44]	@ (80027f4 <SystemInit+0xec>)
 80027c8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80027cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80027ce:	bf00      	nop
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000ed00 	.word	0xe000ed00
 80027dc:	52002000 	.word	0x52002000
 80027e0:	58024400 	.word	0x58024400
 80027e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80027e8:	02020200 	.word	0x02020200
 80027ec:	01ff0000 	.word	0x01ff0000
 80027f0:	01010280 	.word	0x01010280
 80027f4:	52004000 	.word	0x52004000

080027f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80027f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002830 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027fc:	f7ff ff84 	bl	8002708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002800:	480c      	ldr	r0, [pc, #48]	@ (8002834 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002802:	490d      	ldr	r1, [pc, #52]	@ (8002838 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002804:	4a0d      	ldr	r2, [pc, #52]	@ (800283c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002808:	e002      	b.n	8002810 <LoopCopyDataInit>

0800280a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800280c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280e:	3304      	adds	r3, #4

08002810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002814:	d3f9      	bcc.n	800280a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002816:	4a0a      	ldr	r2, [pc, #40]	@ (8002840 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002818:	4c0a      	ldr	r4, [pc, #40]	@ (8002844 <LoopFillZerobss+0x22>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800281c:	e001      	b.n	8002822 <LoopFillZerobss>

0800281e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002820:	3204      	adds	r2, #4

08002822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002824:	d3fb      	bcc.n	800281e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002826:	f00d f843 	bl	800f8b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800282a:	f7fe fd87 	bl	800133c <main>
  bx  lr
 800282e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002830:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002834:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002838:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 800283c:	0800f9d8 	.word	0x0800f9d8
  ldr r2, =_sbss
 8002840:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8002844:	24000624 	.word	0x24000624

08002848 <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002848:	e7fe      	b.n	8002848 <BDMA_Channel0_IRQHandler>
	...

0800284c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002852:	2003      	movs	r0, #3
 8002854:	f002 fa3e 	bl	8004cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002858:	f006 f874 	bl	8008944 <HAL_RCC_GetSysClockFreq>
 800285c:	4602      	mov	r2, r0
 800285e:	4b15      	ldr	r3, [pc, #84]	@ (80028b4 <HAL_Init+0x68>)
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	4913      	ldr	r1, [pc, #76]	@ (80028b8 <HAL_Init+0x6c>)
 800286a:	5ccb      	ldrb	r3, [r1, r3]
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	fa22 f303 	lsr.w	r3, r2, r3
 8002874:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002876:	4b0f      	ldr	r3, [pc, #60]	@ (80028b4 <HAL_Init+0x68>)
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	4a0e      	ldr	r2, [pc, #56]	@ (80028b8 <HAL_Init+0x6c>)
 8002880:	5cd3      	ldrb	r3, [r2, r3]
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
 800288c:	4a0b      	ldr	r2, [pc, #44]	@ (80028bc <HAL_Init+0x70>)
 800288e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002890:	4a0b      	ldr	r2, [pc, #44]	@ (80028c0 <HAL_Init+0x74>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002896:	200f      	movs	r0, #15
 8002898:	f000 f814 	bl	80028c4 <HAL_InitTick>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e002      	b.n	80028ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028a6:	f7ff fbcf 	bl	8002048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	58024400 	.word	0x58024400
 80028b8:	0800f988 	.word	0x0800f988
 80028bc:	24000058 	.word	0x24000058
 80028c0:	24000054 	.word	0x24000054

080028c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028cc:	4b15      	ldr	r3, [pc, #84]	@ (8002924 <HAL_InitTick+0x60>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e021      	b.n	800291c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028d8:	4b13      	ldr	r3, [pc, #76]	@ (8002928 <HAL_InitTick+0x64>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b11      	ldr	r3, [pc, #68]	@ (8002924 <HAL_InitTick+0x60>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	4619      	mov	r1, r3
 80028e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ee:	4618      	mov	r0, r3
 80028f0:	f002 fa23 	bl	8004d3a <HAL_SYSTICK_Config>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e00e      	b.n	800291c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b0f      	cmp	r3, #15
 8002902:	d80a      	bhi.n	800291a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002904:	2200      	movs	r2, #0
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	f04f 30ff 	mov.w	r0, #4294967295
 800290c:	f002 f9ed 	bl	8004cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002910:	4a06      	ldr	r2, [pc, #24]	@ (800292c <HAL_InitTick+0x68>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	e000      	b.n	800291c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	24000060 	.word	0x24000060
 8002928:	24000054 	.word	0x24000054
 800292c:	2400005c 	.word	0x2400005c

08002930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002934:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <HAL_IncTick+0x20>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	4b06      	ldr	r3, [pc, #24]	@ (8002954 <HAL_IncTick+0x24>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4413      	add	r3, r2
 8002940:	4a04      	ldr	r2, [pc, #16]	@ (8002954 <HAL_IncTick+0x24>)
 8002942:	6013      	str	r3, [r2, #0]
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	24000060 	.word	0x24000060
 8002954:	24000620 	.word	0x24000620

08002958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return uwTick;
 800295c:	4b03      	ldr	r3, [pc, #12]	@ (800296c <HAL_GetTick+0x14>)
 800295e:	681b      	ldr	r3, [r3, #0]
}
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	24000620 	.word	0x24000620

08002970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002978:	f7ff ffee 	bl	8002958 <HAL_GetTick>
 800297c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d005      	beq.n	8002996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800298a:	4b0a      	ldr	r3, [pc, #40]	@ (80029b4 <HAL_Delay+0x44>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4413      	add	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002996:	bf00      	nop
 8002998:	f7ff ffde 	bl	8002958 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d8f7      	bhi.n	8002998 <HAL_Delay+0x28>
  {
  }
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	24000060 	.word	0x24000060

080029b8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80029c2:	4b07      	ldr	r3, [pc, #28]	@ (80029e0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	401a      	ands	r2, r3
 80029cc:	4904      	ldr	r1, [pc, #16]	@ (80029e0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	58000400 	.word	0x58000400

080029e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	609a      	str	r2, [r3, #8]
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	609a      	str	r2, [r3, #8]
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3360      	adds	r3, #96	@ 0x60
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4a10      	ldr	r2, [pc, #64]	@ (8002aac <LL_ADC_SetOffset+0x60>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d10b      	bne.n	8002a88 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a86:	e00b      	b.n	8002aa0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	601a      	str	r2, [r3, #0]
}
 8002aa0:	bf00      	nop
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	58026000 	.word	0x58026000

08002ab0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3360      	adds	r3, #96	@ 0x60
 8002abe:	461a      	mov	r2, r3
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f003 031f 	and.w	r3, r3, #31
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	fa01 f303 	lsl.w	r3, r1, r3
 8002afc:	431a      	orrs	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	611a      	str	r2, [r3, #16]
}
 8002b02:	bf00      	nop
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8002b50 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d00e      	beq.n	8002b42 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3360      	adds	r3, #96	@ 0x60
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	601a      	str	r2, [r3, #0]
  }
}
 8002b42:	bf00      	nop
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	58026000 	.word	0x58026000

08002b54 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4a0c      	ldr	r2, [pc, #48]	@ (8002b94 <LL_ADC_SetOffsetSaturation+0x40>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d10e      	bne.n	8002b86 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	3360      	adds	r3, #96	@ 0x60
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	431a      	orrs	r2, r3
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002b86:	bf00      	nop
 8002b88:	371c      	adds	r7, #28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	58026000 	.word	0x58026000

08002b98 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8002bd8 <LL_ADC_SetOffsetSign+0x40>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d10e      	bne.n	8002bca <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	3360      	adds	r3, #96	@ 0x60
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002bca:	bf00      	nop
 8002bcc:	371c      	adds	r7, #28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	58026000 	.word	0x58026000

08002bdc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	3360      	adds	r3, #96	@ 0x60
 8002bec:	461a      	mov	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4a0c      	ldr	r2, [pc, #48]	@ (8002c2c <LL_ADC_SetOffsetState+0x50>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d108      	bne.n	8002c10 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002c0e:	e007      	b.n	8002c20 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	601a      	str	r2, [r3, #0]
}
 8002c20:	bf00      	nop
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	58026000 	.word	0x58026000

08002c30 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b087      	sub	sp, #28
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	3330      	adds	r3, #48	@ 0x30
 8002c66:	461a      	mov	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	0a1b      	lsrs	r3, r3, #8
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	4413      	add	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f003 031f 	and.w	r3, r3, #31
 8002c80:	211f      	movs	r1, #31
 8002c82:	fa01 f303 	lsl.w	r3, r1, r3
 8002c86:	43db      	mvns	r3, r3
 8002c88:	401a      	ands	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	0e9b      	lsrs	r3, r3, #26
 8002c8e:	f003 011f 	and.w	r1, r3, #31
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f003 031f 	and.w	r3, r3, #31
 8002c98:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ca2:	bf00      	nop
 8002ca4:	371c      	adds	r7, #28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f023 0203 	bic.w	r2, r3, #3
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	60da      	str	r2, [r3, #12]
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f043 0201 	orr.w	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	60da      	str	r2, [r3, #12]
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a08      	ldr	r2, [pc, #32]	@ (8002d24 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d107      	bne.n	8002d16 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f023 0203 	bic.w	r2, r3, #3
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	60da      	str	r2, [r3, #12]
  }
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	58026000 	.word	0x58026000

08002d28 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d34:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e000      	b.n	8002d42 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b087      	sub	sp, #28
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	3314      	adds	r3, #20
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	0e5b      	lsrs	r3, r3, #25
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	4413      	add	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	0d1b      	lsrs	r3, r3, #20
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	2107      	movs	r1, #7
 8002d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	401a      	ands	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	0d1b      	lsrs	r3, r3, #20
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d92:	431a      	orrs	r2, r3
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d98:	bf00      	nop
 8002d9a:	371c      	adds	r7, #28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4a1a      	ldr	r2, [pc, #104]	@ (8002e1c <LL_ADC_SetChannelSingleDiff+0x78>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d115      	bne.n	8002de4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f003 0318 	and.w	r3, r3, #24
 8002dce:	4914      	ldr	r1, [pc, #80]	@ (8002e20 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002dd0:	40d9      	lsrs	r1, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	400b      	ands	r3, r1
 8002dd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002de2:	e014      	b.n	8002e0e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002df0:	43db      	mvns	r3, r3
 8002df2:	401a      	ands	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f003 0318 	and.w	r3, r3, #24
 8002dfa:	4909      	ldr	r1, [pc, #36]	@ (8002e20 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002dfc:	40d9      	lsrs	r1, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	400b      	ands	r3, r1
 8002e02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e06:	431a      	orrs	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002e0e:	bf00      	nop
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	58026000 	.word	0x58026000
 8002e20:	000fffff 	.word	0x000fffff

08002e24 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 031f 	and.w	r3, r3, #31
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	4b04      	ldr	r3, [pc, #16]	@ (8002e7c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6093      	str	r3, [r2, #8]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	5fffffc0 	.word	0x5fffffc0

08002e80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e94:	d101      	bne.n	8002e9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ecc <LL_ADC_EnableInternalRegulator+0x24>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	6fffffc0 	.word	0x6fffffc0

08002ed0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ee0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ee4:	d101      	bne.n	8002eea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <LL_ADC_Enable+0x24>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	f043 0201 	orr.w	r2, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	7fffffc0 	.word	0x7fffffc0

08002f20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <LL_ADC_IsEnabled+0x18>
 8002f34:	2301      	movs	r3, #1
 8002f36:	e000      	b.n	8002f3a <LL_ADC_IsEnabled+0x1a>
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
	...

08002f48 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	4b05      	ldr	r3, [pc, #20]	@ (8002f6c <LL_ADC_REG_StartConversion+0x24>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	f043 0204 	orr.w	r2, r3, #4
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	7fffffc0 	.word	0x7fffffc0

08002f70 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d101      	bne.n	8002f88 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f84:	2301      	movs	r3, #1
 8002f86:	e000      	b.n	8002f8a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d101      	bne.n	8002fae <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fbc:	b590      	push	{r4, r7, lr}
 8002fbe:	b089      	sub	sp, #36	@ 0x24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e1ee      	b.n	80033b4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d109      	bne.n	8002ff8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff f849 	bl	800207c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff ff3f 	bl	8002e80 <LL_ADC_IsDeepPowerDownEnabled>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d004      	beq.n	8003012 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff ff25 	bl	8002e5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff ff5a 	bl	8002ed0 <LL_ADC_IsInternalRegulatorEnabled>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d114      	bne.n	800304c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff ff3e 	bl	8002ea8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800302c:	4b8e      	ldr	r3, [pc, #568]	@ (8003268 <HAL_ADC_Init+0x2ac>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	099b      	lsrs	r3, r3, #6
 8003032:	4a8e      	ldr	r2, [pc, #568]	@ (800326c <HAL_ADC_Init+0x2b0>)
 8003034:	fba2 2303 	umull	r2, r3, r2, r3
 8003038:	099b      	lsrs	r3, r3, #6
 800303a:	3301      	adds	r3, #1
 800303c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800303e:	e002      	b.n	8003046 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	3b01      	subs	r3, #1
 8003044:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1f9      	bne.n	8003040 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff ff3d 	bl	8002ed0 <LL_ADC_IsInternalRegulatorEnabled>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10d      	bne.n	8003078 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003060:	f043 0210 	orr.w	r2, r3, #16
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800306c:	f043 0201 	orr.w	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff ff77 	bl	8002f70 <LL_ADC_REG_IsConversionOngoing>
 8003082:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	2b00      	cmp	r3, #0
 800308e:	f040 8188 	bne.w	80033a2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2b00      	cmp	r3, #0
 8003096:	f040 8184 	bne.w	80033a2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800309e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80030a2:	f043 0202 	orr.w	r2, r3, #2
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff ff36 	bl	8002f20 <LL_ADC_IsEnabled>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d136      	bne.n	8003128 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a6c      	ldr	r2, [pc, #432]	@ (8003270 <HAL_ADC_Init+0x2b4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d004      	beq.n	80030ce <HAL_ADC_Init+0x112>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a6a      	ldr	r2, [pc, #424]	@ (8003274 <HAL_ADC_Init+0x2b8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d10e      	bne.n	80030ec <HAL_ADC_Init+0x130>
 80030ce:	4868      	ldr	r0, [pc, #416]	@ (8003270 <HAL_ADC_Init+0x2b4>)
 80030d0:	f7ff ff26 	bl	8002f20 <LL_ADC_IsEnabled>
 80030d4:	4604      	mov	r4, r0
 80030d6:	4867      	ldr	r0, [pc, #412]	@ (8003274 <HAL_ADC_Init+0x2b8>)
 80030d8:	f7ff ff22 	bl	8002f20 <LL_ADC_IsEnabled>
 80030dc:	4603      	mov	r3, r0
 80030de:	4323      	orrs	r3, r4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	bf0c      	ite	eq
 80030e4:	2301      	moveq	r3, #1
 80030e6:	2300      	movne	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	e008      	b.n	80030fe <HAL_ADC_Init+0x142>
 80030ec:	4862      	ldr	r0, [pc, #392]	@ (8003278 <HAL_ADC_Init+0x2bc>)
 80030ee:	f7ff ff17 	bl	8002f20 <LL_ADC_IsEnabled>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d012      	beq.n	8003128 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a5a      	ldr	r2, [pc, #360]	@ (8003270 <HAL_ADC_Init+0x2b4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d004      	beq.n	8003116 <HAL_ADC_Init+0x15a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a58      	ldr	r2, [pc, #352]	@ (8003274 <HAL_ADC_Init+0x2b8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d101      	bne.n	800311a <HAL_ADC_Init+0x15e>
 8003116:	4a59      	ldr	r2, [pc, #356]	@ (800327c <HAL_ADC_Init+0x2c0>)
 8003118:	e000      	b.n	800311c <HAL_ADC_Init+0x160>
 800311a:	4a59      	ldr	r2, [pc, #356]	@ (8003280 <HAL_ADC_Init+0x2c4>)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4619      	mov	r1, r3
 8003122:	4610      	mov	r0, r2
 8003124:	f7ff fc5e 	bl	80029e4 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a52      	ldr	r2, [pc, #328]	@ (8003278 <HAL_ADC_Init+0x2bc>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d129      	bne.n	8003186 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	7e5b      	ldrb	r3, [r3, #25]
 8003136:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800313c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003142:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b08      	cmp	r3, #8
 800314a:	d013      	beq.n	8003174 <HAL_ADC_Init+0x1b8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b0c      	cmp	r3, #12
 8003152:	d00d      	beq.n	8003170 <HAL_ADC_Init+0x1b4>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b1c      	cmp	r3, #28
 800315a:	d007      	beq.n	800316c <HAL_ADC_Init+0x1b0>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b18      	cmp	r3, #24
 8003162:	d101      	bne.n	8003168 <HAL_ADC_Init+0x1ac>
 8003164:	2318      	movs	r3, #24
 8003166:	e006      	b.n	8003176 <HAL_ADC_Init+0x1ba>
 8003168:	2300      	movs	r3, #0
 800316a:	e004      	b.n	8003176 <HAL_ADC_Init+0x1ba>
 800316c:	2310      	movs	r3, #16
 800316e:	e002      	b.n	8003176 <HAL_ADC_Init+0x1ba>
 8003170:	2308      	movs	r3, #8
 8003172:	e000      	b.n	8003176 <HAL_ADC_Init+0x1ba>
 8003174:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003176:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800317e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
 8003184:	e00e      	b.n	80031a4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	7e5b      	ldrb	r3, [r3, #25]
 800318a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003190:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003196:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800319e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d106      	bne.n	80031bc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b2:	3b01      	subs	r3, #1
 80031b4:	045b      	lsls	r3, r3, #17
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d009      	beq.n	80031d8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a26      	ldr	r2, [pc, #152]	@ (8003278 <HAL_ADC_Init+0x2bc>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d115      	bne.n	800320e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	4b26      	ldr	r3, [pc, #152]	@ (8003284 <HAL_ADC_Init+0x2c8>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	69b9      	ldr	r1, [r7, #24]
 80031f2:	430b      	orrs	r3, r1
 80031f4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	611a      	str	r2, [r3, #16]
 800320c:	e009      	b.n	8003222 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	4b1c      	ldr	r3, [pc, #112]	@ (8003288 <HAL_ADC_Init+0x2cc>)
 8003216:	4013      	ands	r3, r2
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	69b9      	ldr	r1, [r7, #24]
 800321e:	430b      	orrs	r3, r1
 8003220:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff fea2 	bl	8002f70 <LL_ADC_REG_IsConversionOngoing>
 800322c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff feaf 	bl	8002f96 <LL_ADC_INJ_IsConversionOngoing>
 8003238:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	f040 808e 	bne.w	800335e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	f040 808a 	bne.w	800335e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a0a      	ldr	r2, [pc, #40]	@ (8003278 <HAL_ADC_Init+0x2bc>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d11b      	bne.n	800328c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	7e1b      	ldrb	r3, [r3, #24]
 8003258:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003260:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	e018      	b.n	800329a <HAL_ADC_Init+0x2de>
 8003268:	24000054 	.word	0x24000054
 800326c:	053e2d63 	.word	0x053e2d63
 8003270:	40022000 	.word	0x40022000
 8003274:	40022100 	.word	0x40022100
 8003278:	58026000 	.word	0x58026000
 800327c:	40022300 	.word	0x40022300
 8003280:	58026300 	.word	0x58026300
 8003284:	fff04007 	.word	0xfff04007
 8003288:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	7e1b      	ldrb	r3, [r3, #24]
 8003290:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	4b46      	ldr	r3, [pc, #280]	@ (80033bc <HAL_ADC_Init+0x400>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	69b9      	ldr	r1, [r7, #24]
 80032aa:	430b      	orrs	r3, r1
 80032ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d137      	bne.n	8003328 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032bc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a3f      	ldr	r2, [pc, #252]	@ (80033c0 <HAL_ADC_Init+0x404>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d116      	bne.n	80032f6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691a      	ldr	r2, [r3, #16]
 80032ce:	4b3d      	ldr	r3, [pc, #244]	@ (80033c4 <HAL_ADC_Init+0x408>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80032da:	4311      	orrs	r1, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80032e0:	4311      	orrs	r1, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80032e6:	430a      	orrs	r2, r1
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	611a      	str	r2, [r3, #16]
 80032f4:	e020      	b.n	8003338 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	4b32      	ldr	r3, [pc, #200]	@ (80033c8 <HAL_ADC_Init+0x40c>)
 80032fe:	4013      	ands	r3, r2
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003304:	3a01      	subs	r2, #1
 8003306:	0411      	lsls	r1, r2, #16
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800330c:	4311      	orrs	r1, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003312:	4311      	orrs	r1, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003318:	430a      	orrs	r2, r1
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0201 	orr.w	r2, r2, #1
 8003324:	611a      	str	r2, [r3, #16]
 8003326:	e007      	b.n	8003338 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0201 	bic.w	r2, r2, #1
 8003336:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a1b      	ldr	r2, [pc, #108]	@ (80033c0 <HAL_ADC_Init+0x404>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d002      	beq.n	800335e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f001 f9c3 	bl	80046e4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d10c      	bne.n	8003380 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336c:	f023 010f 	bic.w	r1, r3, #15
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	1e5a      	subs	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	631a      	str	r2, [r3, #48]	@ 0x30
 800337e:	e007      	b.n	8003390 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 020f 	bic.w	r2, r2, #15
 800338e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003394:	f023 0303 	bic.w	r3, r3, #3
 8003398:	f043 0201 	orr.w	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	661a      	str	r2, [r3, #96]	@ 0x60
 80033a0:	e007      	b.n	80033b2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a6:	f043 0210 	orr.w	r2, r3, #16
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3724      	adds	r7, #36	@ 0x24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd90      	pop	{r4, r7, pc}
 80033bc:	ffffbffc 	.word	0xffffbffc
 80033c0:	58026000 	.word	0x58026000
 80033c4:	fc00f81f 	.word	0xfc00f81f
 80033c8:	fc00f81e 	.word	0xfc00f81e

080033cc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a60      	ldr	r2, [pc, #384]	@ (8003560 <HAL_ADC_Start_DMA+0x194>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d004      	beq.n	80033ec <HAL_ADC_Start_DMA+0x20>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a5f      	ldr	r2, [pc, #380]	@ (8003564 <HAL_ADC_Start_DMA+0x198>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d101      	bne.n	80033f0 <HAL_ADC_Start_DMA+0x24>
 80033ec:	4b5e      	ldr	r3, [pc, #376]	@ (8003568 <HAL_ADC_Start_DMA+0x19c>)
 80033ee:	e000      	b.n	80033f2 <HAL_ADC_Start_DMA+0x26>
 80033f0:	4b5e      	ldr	r3, [pc, #376]	@ (800356c <HAL_ADC_Start_DMA+0x1a0>)
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff fd16 	bl	8002e24 <LL_ADC_GetMultimode>
 80033f8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff fdb6 	bl	8002f70 <LL_ADC_REG_IsConversionOngoing>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	f040 80a2 	bne.w	8003550 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_ADC_Start_DMA+0x4e>
 8003416:	2302      	movs	r3, #2
 8003418:	e09d      	b.n	8003556 <HAL_ADC_Start_DMA+0x18a>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d006      	beq.n	8003436 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	2b05      	cmp	r3, #5
 800342c:	d003      	beq.n	8003436 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2b09      	cmp	r3, #9
 8003432:	f040 8086 	bne.w	8003542 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f001 f836 	bl	80044a8 <ADC_Enable>
 800343c:	4603      	mov	r3, r0
 800343e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003440:	7dfb      	ldrb	r3, [r7, #23]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d178      	bne.n	8003538 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800344a:	4b49      	ldr	r3, [pc, #292]	@ (8003570 <HAL_ADC_Start_DMA+0x1a4>)
 800344c:	4013      	ands	r3, r2
 800344e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a42      	ldr	r2, [pc, #264]	@ (8003564 <HAL_ADC_Start_DMA+0x198>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d002      	beq.n	8003466 <HAL_ADC_Start_DMA+0x9a>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	e000      	b.n	8003468 <HAL_ADC_Start_DMA+0x9c>
 8003466:	4b3e      	ldr	r3, [pc, #248]	@ (8003560 <HAL_ADC_Start_DMA+0x194>)
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	6812      	ldr	r2, [r2, #0]
 800346c:	4293      	cmp	r3, r2
 800346e:	d002      	beq.n	8003476 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d105      	bne.n	8003482 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800347a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003486:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d006      	beq.n	800349c <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003492:	f023 0206 	bic.w	r2, r3, #6
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	665a      	str	r2, [r3, #100]	@ 0x64
 800349a:	e002      	b.n	80034a2 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a6:	4a33      	ldr	r2, [pc, #204]	@ (8003574 <HAL_ADC_Start_DMA+0x1a8>)
 80034a8:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ae:	4a32      	ldr	r2, [pc, #200]	@ (8003578 <HAL_ADC_Start_DMA+0x1ac>)
 80034b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b6:	4a31      	ldr	r2, [pc, #196]	@ (800357c <HAL_ADC_Start_DMA+0x1b0>)
 80034b8:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	221c      	movs	r2, #28
 80034c0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0210 	orr.w	r2, r2, #16
 80034d8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a28      	ldr	r2, [pc, #160]	@ (8003580 <HAL_ADC_Start_DMA+0x1b4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d10f      	bne.n	8003504 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	4619      	mov	r1, r3
 80034f2:	4610      	mov	r0, r2
 80034f4:	f7ff fbfe 	bl	8002cf4 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff fbe9 	bl	8002cd4 <LL_ADC_EnableDMAReq>
 8003502:	e007      	b.n	8003514 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350c:	4619      	mov	r1, r3
 800350e:	4610      	mov	r0, r2
 8003510:	f7ff fbcd 	bl	8002cae <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3340      	adds	r3, #64	@ 0x40
 800351e:	4619      	mov	r1, r3
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f001 ff6e 	bl	8005404 <HAL_DMA_Start_IT>
 8003528:	4603      	mov	r3, r0
 800352a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff fd09 	bl	8002f48 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003536:	e00d      	b.n	8003554 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8003540:	e008      	b.n	8003554 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800354e:	e001      	b.n	8003554 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003550:	2302      	movs	r3, #2
 8003552:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003554:	7dfb      	ldrb	r3, [r7, #23]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40022000 	.word	0x40022000
 8003564:	40022100 	.word	0x40022100
 8003568:	40022300 	.word	0x40022300
 800356c:	58026300 	.word	0x58026300
 8003570:	fffff0fe 	.word	0xfffff0fe
 8003574:	080045bd 	.word	0x080045bd
 8003578:	08004695 	.word	0x08004695
 800357c:	080046b1 	.word	0x080046b1
 8003580:	58026000 	.word	0x58026000

08003584 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08a      	sub	sp, #40	@ 0x28
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800358c:	2300      	movs	r3, #0
 800358e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a87      	ldr	r2, [pc, #540]	@ (80037c4 <HAL_ADC_IRQHandler+0x240>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d004      	beq.n	80035b4 <HAL_ADC_IRQHandler+0x30>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a86      	ldr	r2, [pc, #536]	@ (80037c8 <HAL_ADC_IRQHandler+0x244>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d101      	bne.n	80035b8 <HAL_ADC_IRQHandler+0x34>
 80035b4:	4b85      	ldr	r3, [pc, #532]	@ (80037cc <HAL_ADC_IRQHandler+0x248>)
 80035b6:	e000      	b.n	80035ba <HAL_ADC_IRQHandler+0x36>
 80035b8:	4b85      	ldr	r3, [pc, #532]	@ (80037d0 <HAL_ADC_IRQHandler+0x24c>)
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fc32 	bl	8002e24 <LL_ADC_GetMultimode>
 80035c0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d017      	beq.n	80035fc <HAL_ADC_IRQHandler+0x78>
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d012      	beq.n	80035fc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d105      	bne.n	80035ee <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f001 f9b4 	bl	800495c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2202      	movs	r2, #2
 80035fa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b00      	cmp	r3, #0
 8003604:	d004      	beq.n	8003610 <HAL_ADC_IRQHandler+0x8c>
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10a      	bne.n	8003626 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 8083 	beq.w	8003722 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d07d      	beq.n	8003722 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	2b00      	cmp	r3, #0
 8003630:	d105      	bne.n	800363e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003636:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff faf4 	bl	8002c30 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d062      	beq.n	8003714 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a5d      	ldr	r2, [pc, #372]	@ (80037c8 <HAL_ADC_IRQHandler+0x244>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d002      	beq.n	800365e <HAL_ADC_IRQHandler+0xda>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	e000      	b.n	8003660 <HAL_ADC_IRQHandler+0xdc>
 800365e:	4b59      	ldr	r3, [pc, #356]	@ (80037c4 <HAL_ADC_IRQHandler+0x240>)
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	4293      	cmp	r3, r2
 8003666:	d008      	beq.n	800367a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2b05      	cmp	r3, #5
 8003672:	d002      	beq.n	800367a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	2b09      	cmp	r3, #9
 8003678:	d104      	bne.n	8003684 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	623b      	str	r3, [r7, #32]
 8003682:	e00c      	b.n	800369e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a4f      	ldr	r2, [pc, #316]	@ (80037c8 <HAL_ADC_IRQHandler+0x244>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d002      	beq.n	8003694 <HAL_ADC_IRQHandler+0x110>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	e000      	b.n	8003696 <HAL_ADC_IRQHandler+0x112>
 8003694:	4b4b      	ldr	r3, [pc, #300]	@ (80037c4 <HAL_ADC_IRQHandler+0x240>)
 8003696:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d135      	bne.n	8003714 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d12e      	bne.n	8003714 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fc58 	bl	8002f70 <LL_ADC_REG_IsConversionOngoing>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d11a      	bne.n	80036fc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 020c 	bic.w	r2, r2, #12
 80036d4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d112      	bne.n	8003714 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f2:	f043 0201 	orr.w	r2, r3, #1
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	661a      	str	r2, [r3, #96]	@ 0x60
 80036fa:	e00b      	b.n	8003714 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003700:	f043 0210 	orr.w	r2, r3, #16
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800370c:	f043 0201 	orr.w	r2, r3, #1
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f96f 	bl	80039f8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	220c      	movs	r2, #12
 8003720:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b00      	cmp	r3, #0
 800372a:	d004      	beq.n	8003736 <HAL_ADC_IRQHandler+0x1b2>
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10b      	bne.n	800374e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80a0 	beq.w	8003882 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 809a 	beq.w	8003882 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	2b00      	cmp	r3, #0
 8003758:	d105      	bne.n	8003766 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff fadc 	bl	8002d28 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003770:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff fa5a 	bl	8002c30 <LL_ADC_REG_IsTriggerSourceSWStart>
 800377c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a11      	ldr	r2, [pc, #68]	@ (80037c8 <HAL_ADC_IRQHandler+0x244>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d002      	beq.n	800378e <HAL_ADC_IRQHandler+0x20a>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	e000      	b.n	8003790 <HAL_ADC_IRQHandler+0x20c>
 800378e:	4b0d      	ldr	r3, [pc, #52]	@ (80037c4 <HAL_ADC_IRQHandler+0x240>)
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	4293      	cmp	r3, r2
 8003796:	d008      	beq.n	80037aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d005      	beq.n	80037aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2b06      	cmp	r3, #6
 80037a2:	d002      	beq.n	80037aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2b07      	cmp	r3, #7
 80037a8:	d104      	bne.n	80037b4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	623b      	str	r3, [r7, #32]
 80037b2:	e014      	b.n	80037de <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a03      	ldr	r2, [pc, #12]	@ (80037c8 <HAL_ADC_IRQHandler+0x244>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00a      	beq.n	80037d4 <HAL_ADC_IRQHandler+0x250>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	e008      	b.n	80037d6 <HAL_ADC_IRQHandler+0x252>
 80037c4:	40022000 	.word	0x40022000
 80037c8:	40022100 	.word	0x40022100
 80037cc:	40022300 	.word	0x40022300
 80037d0:	58026300 	.word	0x58026300
 80037d4:	4b84      	ldr	r3, [pc, #528]	@ (80039e8 <HAL_ADC_IRQHandler+0x464>)
 80037d6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d047      	beq.n	8003874 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d007      	beq.n	80037fe <HAL_ADC_IRQHandler+0x27a>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d03f      	beq.n	8003874 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d13a      	bne.n	8003874 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003808:	2b40      	cmp	r3, #64	@ 0x40
 800380a:	d133      	bne.n	8003874 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d12e      	bne.n	8003874 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff fbbb 	bl	8002f96 <LL_ADC_INJ_IsConversionOngoing>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d11a      	bne.n	800385c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003834:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384a:	2b00      	cmp	r3, #0
 800384c:	d112      	bne.n	8003874 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003852:	f043 0201 	orr.w	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	661a      	str	r2, [r3, #96]	@ 0x60
 800385a:	e00b      	b.n	8003874 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003860:	f043 0210 	orr.w	r2, r3, #16
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800386c:	f043 0201 	orr.w	r2, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f001 f849 	bl	800490c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2260      	movs	r2, #96	@ 0x60
 8003880:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003888:	2b00      	cmp	r3, #0
 800388a:	d011      	beq.n	80038b0 <HAL_ADC_IRQHandler+0x32c>
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00c      	beq.n	80038b0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800389a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f8bc 	bl	8003a20 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2280      	movs	r2, #128	@ 0x80
 80038ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d012      	beq.n	80038e0 <HAL_ADC_IRQHandler+0x35c>
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00d      	beq.n	80038e0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f001 f82f 	bl	8004934 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d012      	beq.n	8003910 <HAL_ADC_IRQHandler+0x38c>
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00d      	beq.n	8003910 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f001 f821 	bl	8004948 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800390e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	2b00      	cmp	r3, #0
 8003918:	d043      	beq.n	80039a2 <HAL_ADC_IRQHandler+0x41e>
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b00      	cmp	r3, #0
 8003922:	d03e      	beq.n	80039a2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d102      	bne.n	8003932 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800392c:	2301      	movs	r3, #1
 800392e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003930:	e021      	b.n	8003976 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d015      	beq.n	8003964 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a2a      	ldr	r2, [pc, #168]	@ (80039e8 <HAL_ADC_IRQHandler+0x464>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d004      	beq.n	800394c <HAL_ADC_IRQHandler+0x3c8>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a29      	ldr	r2, [pc, #164]	@ (80039ec <HAL_ADC_IRQHandler+0x468>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d101      	bne.n	8003950 <HAL_ADC_IRQHandler+0x3cc>
 800394c:	4b28      	ldr	r3, [pc, #160]	@ (80039f0 <HAL_ADC_IRQHandler+0x46c>)
 800394e:	e000      	b.n	8003952 <HAL_ADC_IRQHandler+0x3ce>
 8003950:	4b28      	ldr	r3, [pc, #160]	@ (80039f4 <HAL_ADC_IRQHandler+0x470>)
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff fa74 	bl	8002e40 <LL_ADC_GetMultiDMATransfer>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00b      	beq.n	8003976 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800395e:	2301      	movs	r3, #1
 8003960:	627b      	str	r3, [r7, #36]	@ 0x24
 8003962:	e008      	b.n	8003976 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003972:	2301      	movs	r3, #1
 8003974:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003978:	2b01      	cmp	r3, #1
 800397a:	d10e      	bne.n	800399a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003980:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800398c:	f043 0202 	orr.w	r2, r3, #2
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f84d 	bl	8003a34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2210      	movs	r2, #16
 80039a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d018      	beq.n	80039de <HAL_ADC_IRQHandler+0x45a>
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d013      	beq.n	80039de <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ba:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039c6:	f043 0208 	orr.w	r2, r3, #8
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039d6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 ffa1 	bl	8004920 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80039de:	bf00      	nop
 80039e0:	3728      	adds	r7, #40	@ 0x28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40022000 	.word	0x40022000
 80039ec:	40022100 	.word	0x40022100
 80039f0:	40022300 	.word	0x40022300
 80039f4:	58026300 	.word	0x58026300

080039f8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b0b9      	sub	sp, #228	@ 0xe4
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a62:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	4aab      	ldr	r2, [pc, #684]	@ (8003d18 <HAL_ADC_ConfigChannel+0x2d0>)
 8003a6a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d102      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x34>
 8003a76:	2302      	movs	r3, #2
 8003a78:	f000 bcfe 	b.w	8004478 <HAL_ADC_ConfigChannel+0xa30>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff fa71 	bl	8002f70 <LL_ADC_REG_IsConversionOngoing>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f040 84e2 	bne.w	800445a <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	db38      	blt.n	8003b10 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a9e      	ldr	r2, [pc, #632]	@ (8003d1c <HAL_ADC_ConfigChannel+0x2d4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d033      	beq.n	8003b10 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d108      	bne.n	8003ac6 <HAL_ADC_ConfigChannel+0x7e>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	0e9b      	lsrs	r3, r3, #26
 8003aba:	f003 031f 	and.w	r3, r3, #31
 8003abe:	2201      	movs	r2, #1
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	e01d      	b.n	8003b02 <HAL_ADC_ConfigChannel+0xba>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ace:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ad2:	fa93 f3a3 	rbit	r3, r3
 8003ad6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ada:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ade:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003ae2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003aea:	2320      	movs	r3, #32
 8003aec:	e004      	b.n	8003af8 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003aee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003af2:	fab3 f383 	clz	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	2201      	movs	r2, #1
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6812      	ldr	r2, [r2, #0]
 8003b06:	69d1      	ldr	r1, [r2, #28]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6812      	ldr	r2, [r2, #0]
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	6859      	ldr	r1, [r3, #4]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	f7ff f89a 	bl	8002c56 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff fa22 	bl	8002f70 <LL_ADC_REG_IsConversionOngoing>
 8003b2c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fa2e 	bl	8002f96 <LL_ADC_INJ_IsConversionOngoing>
 8003b3a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f040 8270 	bne.w	8004028 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f040 826b 	bne.w	8004028 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6819      	ldr	r1, [r3, #0]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f7ff f8f5 	bl	8002d4e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a6c      	ldr	r2, [pc, #432]	@ (8003d1c <HAL_ADC_ConfigChannel+0x2d4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d10d      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	08db      	lsrs	r3, r3, #3
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b88:	e032      	b.n	8003bf0 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b8a:	4b65      	ldr	r3, [pc, #404]	@ (8003d20 <HAL_ADC_ConfigChannel+0x2d8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003b92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b96:	d10b      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x168>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	695a      	ldr	r2, [r3, #20]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	089b      	lsrs	r3, r3, #2
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	e01d      	b.n	8003bec <HAL_ADC_ConfigChannel+0x1a4>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10b      	bne.n	8003bd6 <HAL_ADC_ConfigChannel+0x18e>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	695a      	ldr	r2, [r3, #20]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	089b      	lsrs	r3, r3, #2
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	e00a      	b.n	8003bec <HAL_ADC_ConfigChannel+0x1a4>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	695a      	ldr	r2, [r3, #20]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	089b      	lsrs	r3, r3, #2
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d048      	beq.n	8003c8a <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	6919      	ldr	r1, [r3, #16]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c08:	f7fe ff20 	bl	8002a4c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a42      	ldr	r2, [pc, #264]	@ (8003d1c <HAL_ADC_ConfigChannel+0x2d4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d119      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	6919      	ldr	r1, [r3, #16]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	461a      	mov	r2, r3
 8003c24:	f7fe ffb8 	bl	8002b98 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6818      	ldr	r0, [r3, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	6919      	ldr	r1, [r3, #16]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d102      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x1f8>
 8003c3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c3e:	e000      	b.n	8003c42 <HAL_ADC_ConfigChannel+0x1fa>
 8003c40:	2300      	movs	r3, #0
 8003c42:	461a      	mov	r2, r3
 8003c44:	f7fe ff86 	bl	8002b54 <LL_ADC_SetOffsetSaturation>
 8003c48:	e1ee      	b.n	8004028 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	6919      	ldr	r1, [r3, #16]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d102      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x21a>
 8003c5c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003c60:	e000      	b.n	8003c64 <HAL_ADC_ConfigChannel+0x21c>
 8003c62:	2300      	movs	r3, #0
 8003c64:	461a      	mov	r2, r3
 8003c66:	f7fe ff53 	bl	8002b10 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6818      	ldr	r0, [r3, #0]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	6919      	ldr	r1, [r3, #16]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	7e1b      	ldrb	r3, [r3, #24]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d102      	bne.n	8003c80 <HAL_ADC_ConfigChannel+0x238>
 8003c7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c7e:	e000      	b.n	8003c82 <HAL_ADC_ConfigChannel+0x23a>
 8003c80:	2300      	movs	r3, #0
 8003c82:	461a      	mov	r2, r3
 8003c84:	f7fe ff2a 	bl	8002adc <LL_ADC_SetDataRightShift>
 8003c88:	e1ce      	b.n	8004028 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a23      	ldr	r2, [pc, #140]	@ (8003d1c <HAL_ADC_ConfigChannel+0x2d4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	f040 8181 	bne.w	8003f98 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fe ff07 	bl	8002ab0 <LL_ADC_GetOffsetChannel>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10a      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x27a>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fe fefc 	bl	8002ab0 <LL_ADC_GetOffsetChannel>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	0e9b      	lsrs	r3, r3, #26
 8003cbc:	f003 021f 	and.w	r2, r3, #31
 8003cc0:	e01e      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x2b8>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fe fef1 	bl	8002ab0 <LL_ADC_GetOffsetChannel>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003cd8:	fa93 f3a3 	rbit	r3, r3
 8003cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003ce0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003ce4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003ce8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003cf0:	2320      	movs	r3, #32
 8003cf2:	e004      	b.n	8003cfe <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003cf4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003cf8:	fab3 f383 	clz	r3, r3
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	461a      	mov	r2, r3
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10b      	bne.n	8003d24 <HAL_ADC_ConfigChannel+0x2dc>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	0e9b      	lsrs	r3, r3, #26
 8003d12:	f003 031f 	and.w	r3, r3, #31
 8003d16:	e01e      	b.n	8003d56 <HAL_ADC_ConfigChannel+0x30e>
 8003d18:	47ff0000 	.word	0x47ff0000
 8003d1c:	58026000 	.word	0x58026000
 8003d20:	5c001000 	.word	0x5c001000
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d30:	fa93 f3a3 	rbit	r3, r3
 8003d34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003d38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003d40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003d48:	2320      	movs	r3, #32
 8003d4a:	e004      	b.n	8003d56 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003d4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003d50:	fab3 f383 	clz	r3, r3
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d106      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2100      	movs	r1, #0
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fe ff3a 	bl	8002bdc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fe fe9e 	bl	8002ab0 <LL_ADC_GetOffsetChannel>
 8003d74:	4603      	mov	r3, r0
 8003d76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10a      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x34c>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2101      	movs	r1, #1
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fe fe93 	bl	8002ab0 <LL_ADC_GetOffsetChannel>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	0e9b      	lsrs	r3, r3, #26
 8003d8e:	f003 021f 	and.w	r2, r3, #31
 8003d92:	e01e      	b.n	8003dd2 <HAL_ADC_ConfigChannel+0x38a>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2101      	movs	r1, #1
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe fe88 	bl	8002ab0 <LL_ADC_GetOffsetChannel>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003daa:	fa93 f3a3 	rbit	r3, r3
 8003dae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003db2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003db6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003dba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003dc2:	2320      	movs	r3, #32
 8003dc4:	e004      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003dc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003dca:	fab3 f383 	clz	r3, r3
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d105      	bne.n	8003dea <HAL_ADC_ConfigChannel+0x3a2>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	0e9b      	lsrs	r3, r3, #26
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	e018      	b.n	8003e1c <HAL_ADC_ConfigChannel+0x3d4>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003df6:	fa93 f3a3 	rbit	r3, r3
 8003dfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003dfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003e02:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003e06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003e0e:	2320      	movs	r3, #32
 8003e10:	e004      	b.n	8003e1c <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8003e12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e16:	fab3 f383 	clz	r3, r3
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d106      	bne.n	8003e2e <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2200      	movs	r2, #0
 8003e26:	2101      	movs	r1, #1
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fe fed7 	bl	8002bdc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2102      	movs	r1, #2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fe fe3b 	bl	8002ab0 <LL_ADC_GetOffsetChannel>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10a      	bne.n	8003e5a <HAL_ADC_ConfigChannel+0x412>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2102      	movs	r1, #2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe fe30 	bl	8002ab0 <LL_ADC_GetOffsetChannel>
 8003e50:	4603      	mov	r3, r0
 8003e52:	0e9b      	lsrs	r3, r3, #26
 8003e54:	f003 021f 	and.w	r2, r3, #31
 8003e58:	e01e      	b.n	8003e98 <HAL_ADC_ConfigChannel+0x450>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2102      	movs	r1, #2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fe fe25 	bl	8002ab0 <LL_ADC_GetOffsetChannel>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e70:	fa93 f3a3 	rbit	r3, r3
 8003e74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003e78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003e80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003e88:	2320      	movs	r3, #32
 8003e8a:	e004      	b.n	8003e96 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e90:	fab3 f383 	clz	r3, r3
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d105      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x468>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	0e9b      	lsrs	r3, r3, #26
 8003eaa:	f003 031f 	and.w	r3, r3, #31
 8003eae:	e014      	b.n	8003eda <HAL_ADC_ConfigChannel+0x492>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003eb8:	fa93 f3a3 	rbit	r3, r3
 8003ebc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003ebe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ec0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003ec4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003ecc:	2320      	movs	r3, #32
 8003ece:	e004      	b.n	8003eda <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003ed0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ed4:	fab3 f383 	clz	r3, r3
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d106      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2102      	movs	r1, #2
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe fe78 	bl	8002bdc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2103      	movs	r1, #3
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe fddc 	bl	8002ab0 <LL_ADC_GetOffsetChannel>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x4d0>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2103      	movs	r1, #3
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fe fdd1 	bl	8002ab0 <LL_ADC_GetOffsetChannel>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	0e9b      	lsrs	r3, r3, #26
 8003f12:	f003 021f 	and.w	r2, r3, #31
 8003f16:	e017      	b.n	8003f48 <HAL_ADC_ConfigChannel+0x500>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2103      	movs	r1, #3
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fe fdc6 	bl	8002ab0 <LL_ADC_GetOffsetChannel>
 8003f24:	4603      	mov	r3, r0
 8003f26:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f2a:	fa93 f3a3 	rbit	r3, r3
 8003f2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003f30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f32:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003f34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003f3a:	2320      	movs	r3, #32
 8003f3c:	e003      	b.n	8003f46 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8003f3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f40:	fab3 f383 	clz	r3, r3
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	461a      	mov	r2, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d105      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x518>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	0e9b      	lsrs	r3, r3, #26
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	e011      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x53c>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f68:	fa93 f3a3 	rbit	r3, r3
 8003f6c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003f6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f70:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003f72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003f78:	2320      	movs	r3, #32
 8003f7a:	e003      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003f7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f7e:	fab3 f383 	clz	r3, r3
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d14f      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	2103      	movs	r1, #3
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fe fe23 	bl	8002bdc <LL_ADC_SetOffsetState>
 8003f96:	e047      	b.n	8004028 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	069b      	lsls	r3, r3, #26
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d107      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003fba:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	069b      	lsls	r3, r3, #26
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d107      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003fde:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fe6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	069b      	lsls	r3, r3, #26
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d107      	bne.n	8004004 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004002:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800400a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	069b      	lsls	r3, r3, #26
 8004014:	429a      	cmp	r2, r3
 8004016:	d107      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004026:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f7fe ff77 	bl	8002f20 <LL_ADC_IsEnabled>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	f040 8219 	bne.w	800446c <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6819      	ldr	r1, [r3, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	461a      	mov	r2, r3
 8004048:	f7fe feac 	bl	8002da4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4aa1      	ldr	r2, [pc, #644]	@ (80042d8 <HAL_ADC_ConfigChannel+0x890>)
 8004052:	4293      	cmp	r3, r2
 8004054:	f040 812e 	bne.w	80042b4 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10b      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x638>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	0e9b      	lsrs	r3, r3, #26
 800406e:	3301      	adds	r3, #1
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	2b09      	cmp	r3, #9
 8004076:	bf94      	ite	ls
 8004078:	2301      	movls	r3, #1
 800407a:	2300      	movhi	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	e019      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x66c>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004086:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004088:	fa93 f3a3 	rbit	r3, r3
 800408c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800408e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004090:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004092:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004098:	2320      	movs	r3, #32
 800409a:	e003      	b.n	80040a4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800409c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800409e:	fab3 f383 	clz	r3, r3
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	3301      	adds	r3, #1
 80040a6:	f003 031f 	and.w	r3, r3, #31
 80040aa:	2b09      	cmp	r3, #9
 80040ac:	bf94      	ite	ls
 80040ae:	2301      	movls	r3, #1
 80040b0:	2300      	movhi	r3, #0
 80040b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d079      	beq.n	80041ac <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d107      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x68c>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	0e9b      	lsrs	r3, r3, #26
 80040ca:	3301      	adds	r3, #1
 80040cc:	069b      	lsls	r3, r3, #26
 80040ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040d2:	e015      	b.n	8004100 <HAL_ADC_ConfigChannel+0x6b8>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040dc:	fa93 f3a3 	rbit	r3, r3
 80040e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80040e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040e4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80040e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80040ec:	2320      	movs	r3, #32
 80040ee:	e003      	b.n	80040f8 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80040f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040f2:	fab3 f383 	clz	r3, r3
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	3301      	adds	r3, #1
 80040fa:	069b      	lsls	r3, r3, #26
 80040fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004108:	2b00      	cmp	r3, #0
 800410a:	d109      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x6d8>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	0e9b      	lsrs	r3, r3, #26
 8004112:	3301      	adds	r3, #1
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	2101      	movs	r1, #1
 800411a:	fa01 f303 	lsl.w	r3, r1, r3
 800411e:	e017      	b.n	8004150 <HAL_ADC_ConfigChannel+0x708>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004128:	fa93 f3a3 	rbit	r3, r3
 800412c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800412e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004130:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004132:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004138:	2320      	movs	r3, #32
 800413a:	e003      	b.n	8004144 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 800413c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800413e:	fab3 f383 	clz	r3, r3
 8004142:	b2db      	uxtb	r3, r3
 8004144:	3301      	adds	r3, #1
 8004146:	f003 031f 	and.w	r3, r3, #31
 800414a:	2101      	movs	r1, #1
 800414c:	fa01 f303 	lsl.w	r3, r1, r3
 8004150:	ea42 0103 	orr.w	r1, r2, r3
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10a      	bne.n	8004176 <HAL_ADC_ConfigChannel+0x72e>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	0e9b      	lsrs	r3, r3, #26
 8004166:	3301      	adds	r3, #1
 8004168:	f003 021f 	and.w	r2, r3, #31
 800416c:	4613      	mov	r3, r2
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	4413      	add	r3, r2
 8004172:	051b      	lsls	r3, r3, #20
 8004174:	e018      	b.n	80041a8 <HAL_ADC_ConfigChannel+0x760>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800417e:	fa93 f3a3 	rbit	r3, r3
 8004182:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004186:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800418e:	2320      	movs	r3, #32
 8004190:	e003      	b.n	800419a <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8004192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004194:	fab3 f383 	clz	r3, r3
 8004198:	b2db      	uxtb	r3, r3
 800419a:	3301      	adds	r3, #1
 800419c:	f003 021f 	and.w	r2, r3, #31
 80041a0:	4613      	mov	r3, r2
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	4413      	add	r3, r2
 80041a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041a8:	430b      	orrs	r3, r1
 80041aa:	e07e      	b.n	80042aa <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d107      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x780>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	0e9b      	lsrs	r3, r3, #26
 80041be:	3301      	adds	r3, #1
 80041c0:	069b      	lsls	r3, r3, #26
 80041c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041c6:	e015      	b.n	80041f4 <HAL_ADC_ConfigChannel+0x7ac>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d0:	fa93 f3a3 	rbit	r3, r3
 80041d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80041d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80041da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80041e0:	2320      	movs	r3, #32
 80041e2:	e003      	b.n	80041ec <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80041e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e6:	fab3 f383 	clz	r3, r3
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	3301      	adds	r3, #1
 80041ee:	069b      	lsls	r3, r3, #26
 80041f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d109      	bne.n	8004214 <HAL_ADC_ConfigChannel+0x7cc>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	0e9b      	lsrs	r3, r3, #26
 8004206:	3301      	adds	r3, #1
 8004208:	f003 031f 	and.w	r3, r3, #31
 800420c:	2101      	movs	r1, #1
 800420e:	fa01 f303 	lsl.w	r3, r1, r3
 8004212:	e017      	b.n	8004244 <HAL_ADC_ConfigChannel+0x7fc>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	fa93 f3a3 	rbit	r3, r3
 8004220:	61bb      	str	r3, [r7, #24]
  return result;
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 800422c:	2320      	movs	r3, #32
 800422e:	e003      	b.n	8004238 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	fab3 f383 	clz	r3, r3
 8004236:	b2db      	uxtb	r3, r3
 8004238:	3301      	adds	r3, #1
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	2101      	movs	r1, #1
 8004240:	fa01 f303 	lsl.w	r3, r1, r3
 8004244:	ea42 0103 	orr.w	r1, r2, r3
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10d      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x828>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	0e9b      	lsrs	r3, r3, #26
 800425a:	3301      	adds	r3, #1
 800425c:	f003 021f 	and.w	r2, r3, #31
 8004260:	4613      	mov	r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4413      	add	r3, r2
 8004266:	3b1e      	subs	r3, #30
 8004268:	051b      	lsls	r3, r3, #20
 800426a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800426e:	e01b      	b.n	80042a8 <HAL_ADC_ConfigChannel+0x860>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	fa93 f3a3 	rbit	r3, r3
 800427c:	60fb      	str	r3, [r7, #12]
  return result;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8004288:	2320      	movs	r3, #32
 800428a:	e003      	b.n	8004294 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	fab3 f383 	clz	r3, r3
 8004292:	b2db      	uxtb	r3, r3
 8004294:	3301      	adds	r3, #1
 8004296:	f003 021f 	and.w	r2, r3, #31
 800429a:	4613      	mov	r3, r2
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	4413      	add	r3, r2
 80042a0:	3b1e      	subs	r3, #30
 80042a2:	051b      	lsls	r3, r3, #20
 80042a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042a8:	430b      	orrs	r3, r1
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	6892      	ldr	r2, [r2, #8]
 80042ae:	4619      	mov	r1, r3
 80042b0:	f7fe fd4d 	bl	8002d4e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f280 80d7 	bge.w	800446c <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a06      	ldr	r2, [pc, #24]	@ (80042dc <HAL_ADC_ConfigChannel+0x894>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d004      	beq.n	80042d2 <HAL_ADC_ConfigChannel+0x88a>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a04      	ldr	r2, [pc, #16]	@ (80042e0 <HAL_ADC_ConfigChannel+0x898>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d10a      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x8a0>
 80042d2:	4b04      	ldr	r3, [pc, #16]	@ (80042e4 <HAL_ADC_ConfigChannel+0x89c>)
 80042d4:	e009      	b.n	80042ea <HAL_ADC_ConfigChannel+0x8a2>
 80042d6:	bf00      	nop
 80042d8:	47ff0000 	.word	0x47ff0000
 80042dc:	40022000 	.word	0x40022000
 80042e0:	40022100 	.word	0x40022100
 80042e4:	40022300 	.word	0x40022300
 80042e8:	4b65      	ldr	r3, [pc, #404]	@ (8004480 <HAL_ADC_ConfigChannel+0xa38>)
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe fba0 	bl	8002a30 <LL_ADC_GetCommonPathInternalCh>
 80042f0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a62      	ldr	r2, [pc, #392]	@ (8004484 <HAL_ADC_ConfigChannel+0xa3c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d004      	beq.n	8004308 <HAL_ADC_ConfigChannel+0x8c0>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a61      	ldr	r2, [pc, #388]	@ (8004488 <HAL_ADC_ConfigChannel+0xa40>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d10e      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x8de>
 8004308:	485e      	ldr	r0, [pc, #376]	@ (8004484 <HAL_ADC_ConfigChannel+0xa3c>)
 800430a:	f7fe fe09 	bl	8002f20 <LL_ADC_IsEnabled>
 800430e:	4604      	mov	r4, r0
 8004310:	485d      	ldr	r0, [pc, #372]	@ (8004488 <HAL_ADC_ConfigChannel+0xa40>)
 8004312:	f7fe fe05 	bl	8002f20 <LL_ADC_IsEnabled>
 8004316:	4603      	mov	r3, r0
 8004318:	4323      	orrs	r3, r4
 800431a:	2b00      	cmp	r3, #0
 800431c:	bf0c      	ite	eq
 800431e:	2301      	moveq	r3, #1
 8004320:	2300      	movne	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	e008      	b.n	8004338 <HAL_ADC_ConfigChannel+0x8f0>
 8004326:	4859      	ldr	r0, [pc, #356]	@ (800448c <HAL_ADC_ConfigChannel+0xa44>)
 8004328:	f7fe fdfa 	bl	8002f20 <LL_ADC_IsEnabled>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	bf0c      	ite	eq
 8004332:	2301      	moveq	r3, #1
 8004334:	2300      	movne	r3, #0
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 8084 	beq.w	8004446 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a53      	ldr	r2, [pc, #332]	@ (8004490 <HAL_ADC_ConfigChannel+0xa48>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d132      	bne.n	80043ae <HAL_ADC_ConfigChannel+0x966>
 8004348:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800434c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d12c      	bne.n	80043ae <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a4c      	ldr	r2, [pc, #304]	@ (800448c <HAL_ADC_ConfigChannel+0xa44>)
 800435a:	4293      	cmp	r3, r2
 800435c:	f040 8086 	bne.w	800446c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a47      	ldr	r2, [pc, #284]	@ (8004484 <HAL_ADC_ConfigChannel+0xa3c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d004      	beq.n	8004374 <HAL_ADC_ConfigChannel+0x92c>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a46      	ldr	r2, [pc, #280]	@ (8004488 <HAL_ADC_ConfigChannel+0xa40>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d101      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x930>
 8004374:	4a47      	ldr	r2, [pc, #284]	@ (8004494 <HAL_ADC_ConfigChannel+0xa4c>)
 8004376:	e000      	b.n	800437a <HAL_ADC_ConfigChannel+0x932>
 8004378:	4a41      	ldr	r2, [pc, #260]	@ (8004480 <HAL_ADC_ConfigChannel+0xa38>)
 800437a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800437e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004382:	4619      	mov	r1, r3
 8004384:	4610      	mov	r0, r2
 8004386:	f7fe fb40 	bl	8002a0a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800438a:	4b43      	ldr	r3, [pc, #268]	@ (8004498 <HAL_ADC_ConfigChannel+0xa50>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	099b      	lsrs	r3, r3, #6
 8004390:	4a42      	ldr	r2, [pc, #264]	@ (800449c <HAL_ADC_ConfigChannel+0xa54>)
 8004392:	fba2 2303 	umull	r2, r3, r2, r3
 8004396:	099b      	lsrs	r3, r3, #6
 8004398:	3301      	adds	r3, #1
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800439e:	e002      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f9      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043ac:	e05e      	b.n	800446c <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a3b      	ldr	r2, [pc, #236]	@ (80044a0 <HAL_ADC_ConfigChannel+0xa58>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d120      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x9b2>
 80043b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d11a      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a30      	ldr	r2, [pc, #192]	@ (800448c <HAL_ADC_ConfigChannel+0xa44>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d14e      	bne.n	800446c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004484 <HAL_ADC_ConfigChannel+0xa3c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d004      	beq.n	80043e2 <HAL_ADC_ConfigChannel+0x99a>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a2a      	ldr	r2, [pc, #168]	@ (8004488 <HAL_ADC_ConfigChannel+0xa40>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d101      	bne.n	80043e6 <HAL_ADC_ConfigChannel+0x99e>
 80043e2:	4a2c      	ldr	r2, [pc, #176]	@ (8004494 <HAL_ADC_ConfigChannel+0xa4c>)
 80043e4:	e000      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x9a0>
 80043e6:	4a26      	ldr	r2, [pc, #152]	@ (8004480 <HAL_ADC_ConfigChannel+0xa38>)
 80043e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80043ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043f0:	4619      	mov	r1, r3
 80043f2:	4610      	mov	r0, r2
 80043f4:	f7fe fb09 	bl	8002a0a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043f8:	e038      	b.n	800446c <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a29      	ldr	r2, [pc, #164]	@ (80044a4 <HAL_ADC_ConfigChannel+0xa5c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d133      	bne.n	800446c <HAL_ADC_ConfigChannel+0xa24>
 8004404:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004408:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d12d      	bne.n	800446c <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a1d      	ldr	r2, [pc, #116]	@ (800448c <HAL_ADC_ConfigChannel+0xa44>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d128      	bne.n	800446c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a19      	ldr	r2, [pc, #100]	@ (8004484 <HAL_ADC_ConfigChannel+0xa3c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d004      	beq.n	800442e <HAL_ADC_ConfigChannel+0x9e6>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a17      	ldr	r2, [pc, #92]	@ (8004488 <HAL_ADC_ConfigChannel+0xa40>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d101      	bne.n	8004432 <HAL_ADC_ConfigChannel+0x9ea>
 800442e:	4a19      	ldr	r2, [pc, #100]	@ (8004494 <HAL_ADC_ConfigChannel+0xa4c>)
 8004430:	e000      	b.n	8004434 <HAL_ADC_ConfigChannel+0x9ec>
 8004432:	4a13      	ldr	r2, [pc, #76]	@ (8004480 <HAL_ADC_ConfigChannel+0xa38>)
 8004434:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004438:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f7fe fae3 	bl	8002a0a <LL_ADC_SetCommonPathInternalCh>
 8004444:	e012      	b.n	800446c <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800444a:	f043 0220 	orr.w	r2, r3, #32
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004458:	e008      	b.n	800446c <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800445e:	f043 0220 	orr.w	r2, r3, #32
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004474:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004478:	4618      	mov	r0, r3
 800447a:	37e4      	adds	r7, #228	@ 0xe4
 800447c:	46bd      	mov	sp, r7
 800447e:	bd90      	pop	{r4, r7, pc}
 8004480:	58026300 	.word	0x58026300
 8004484:	40022000 	.word	0x40022000
 8004488:	40022100 	.word	0x40022100
 800448c:	58026000 	.word	0x58026000
 8004490:	c7520000 	.word	0xc7520000
 8004494:	40022300 	.word	0x40022300
 8004498:	24000054 	.word	0x24000054
 800449c:	053e2d63 	.word	0x053e2d63
 80044a0:	c3210000 	.word	0xc3210000
 80044a4:	cb840000 	.word	0xcb840000

080044a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fe fd33 	bl	8002f20 <LL_ADC_IsEnabled>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d16e      	bne.n	800459e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	4b38      	ldr	r3, [pc, #224]	@ (80045a8 <ADC_Enable+0x100>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00d      	beq.n	80044ea <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d2:	f043 0210 	orr.w	r2, r3, #16
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044de:	f043 0201 	orr.w	r2, r3, #1
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e05a      	b.n	80045a0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fe fd02 	bl	8002ef8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80044f4:	f7fe fa30 	bl	8002958 <HAL_GetTick>
 80044f8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a2b      	ldr	r2, [pc, #172]	@ (80045ac <ADC_Enable+0x104>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d004      	beq.n	800450e <ADC_Enable+0x66>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a29      	ldr	r2, [pc, #164]	@ (80045b0 <ADC_Enable+0x108>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d101      	bne.n	8004512 <ADC_Enable+0x6a>
 800450e:	4b29      	ldr	r3, [pc, #164]	@ (80045b4 <ADC_Enable+0x10c>)
 8004510:	e000      	b.n	8004514 <ADC_Enable+0x6c>
 8004512:	4b29      	ldr	r3, [pc, #164]	@ (80045b8 <ADC_Enable+0x110>)
 8004514:	4618      	mov	r0, r3
 8004516:	f7fe fc85 	bl	8002e24 <LL_ADC_GetMultimode>
 800451a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a23      	ldr	r2, [pc, #140]	@ (80045b0 <ADC_Enable+0x108>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d002      	beq.n	800452c <ADC_Enable+0x84>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	e000      	b.n	800452e <ADC_Enable+0x86>
 800452c:	4b1f      	ldr	r3, [pc, #124]	@ (80045ac <ADC_Enable+0x104>)
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6812      	ldr	r2, [r2, #0]
 8004532:	4293      	cmp	r3, r2
 8004534:	d02c      	beq.n	8004590 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d130      	bne.n	800459e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800453c:	e028      	b.n	8004590 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f7fe fcec 	bl	8002f20 <LL_ADC_IsEnabled>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d104      	bne.n	8004558 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe fcd0 	bl	8002ef8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004558:	f7fe f9fe 	bl	8002958 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d914      	bls.n	8004590 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b01      	cmp	r3, #1
 8004572:	d00d      	beq.n	8004590 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004578:	f043 0210 	orr.w	r2, r3, #16
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004584:	f043 0201 	orr.w	r2, r3, #1
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e007      	b.n	80045a0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b01      	cmp	r3, #1
 800459c:	d1cf      	bne.n	800453e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	8000003f 	.word	0x8000003f
 80045ac:	40022000 	.word	0x40022000
 80045b0:	40022100 	.word	0x40022100
 80045b4:	40022300 	.word	0x40022300
 80045b8:	58026300 	.word	0x58026300

080045bc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ce:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d14b      	bne.n	800466e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045da:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d021      	beq.n	8004634 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fe fb1b 	bl	8002c30 <LL_ADC_REG_IsTriggerSourceSWStart>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d032      	beq.n	8004666 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d12b      	bne.n	8004666 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004612:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800461e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d11f      	bne.n	8004666 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800462a:	f043 0201 	orr.w	r2, r3, #1
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	661a      	str	r2, [r3, #96]	@ 0x60
 8004632:	e018      	b.n	8004666 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d111      	bne.n	8004666 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004646:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004652:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d105      	bne.n	8004666 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800465e:	f043 0201 	orr.w	r2, r3, #1
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f7ff f9c6 	bl	80039f8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800466c:	e00e      	b.n	800468c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004672:	f003 0310 	and.w	r3, r3, #16
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f7ff f9da 	bl	8003a34 <HAL_ADC_ErrorCallback>
}
 8004680:	e004      	b.n	800468c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	4798      	blx	r3
}
 800468c:	bf00      	nop
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f7ff f9b2 	bl	8003a0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046a8:	bf00      	nop
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046bc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046ce:	f043 0204 	orr.w	r2, r3, #4
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f7ff f9ac 	bl	8003a34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a6c      	ldr	r2, [pc, #432]	@ (80048a4 <ADC_ConfigureBoostMode+0x1c0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d004      	beq.n	8004700 <ADC_ConfigureBoostMode+0x1c>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a6b      	ldr	r2, [pc, #428]	@ (80048a8 <ADC_ConfigureBoostMode+0x1c4>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d109      	bne.n	8004714 <ADC_ConfigureBoostMode+0x30>
 8004700:	4b6a      	ldr	r3, [pc, #424]	@ (80048ac <ADC_ConfigureBoostMode+0x1c8>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004708:	2b00      	cmp	r3, #0
 800470a:	bf14      	ite	ne
 800470c:	2301      	movne	r3, #1
 800470e:	2300      	moveq	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	e008      	b.n	8004726 <ADC_ConfigureBoostMode+0x42>
 8004714:	4b66      	ldr	r3, [pc, #408]	@ (80048b0 <ADC_ConfigureBoostMode+0x1cc>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800471c:	2b00      	cmp	r3, #0
 800471e:	bf14      	ite	ne
 8004720:	2301      	movne	r3, #1
 8004722:	2300      	moveq	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d01c      	beq.n	8004764 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800472a:	f004 fa85 	bl	8008c38 <HAL_RCC_GetHCLKFreq>
 800472e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004738:	d010      	beq.n	800475c <ADC_ConfigureBoostMode+0x78>
 800473a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800473e:	d873      	bhi.n	8004828 <ADC_ConfigureBoostMode+0x144>
 8004740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004744:	d002      	beq.n	800474c <ADC_ConfigureBoostMode+0x68>
 8004746:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800474a:	d16d      	bne.n	8004828 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	0c1b      	lsrs	r3, r3, #16
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	fbb2 f3f3 	udiv	r3, r2, r3
 8004758:	60fb      	str	r3, [r7, #12]
        break;
 800475a:	e068      	b.n	800482e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	089b      	lsrs	r3, r3, #2
 8004760:	60fb      	str	r3, [r7, #12]
        break;
 8004762:	e064      	b.n	800482e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004764:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004768:	f04f 0100 	mov.w	r1, #0
 800476c:	f005 fc60 	bl	800a030 <HAL_RCCEx_GetPeriphCLKFreq>
 8004770:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800477a:	d051      	beq.n	8004820 <ADC_ConfigureBoostMode+0x13c>
 800477c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004780:	d854      	bhi.n	800482c <ADC_ConfigureBoostMode+0x148>
 8004782:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004786:	d047      	beq.n	8004818 <ADC_ConfigureBoostMode+0x134>
 8004788:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800478c:	d84e      	bhi.n	800482c <ADC_ConfigureBoostMode+0x148>
 800478e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004792:	d03d      	beq.n	8004810 <ADC_ConfigureBoostMode+0x12c>
 8004794:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004798:	d848      	bhi.n	800482c <ADC_ConfigureBoostMode+0x148>
 800479a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800479e:	d033      	beq.n	8004808 <ADC_ConfigureBoostMode+0x124>
 80047a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047a4:	d842      	bhi.n	800482c <ADC_ConfigureBoostMode+0x148>
 80047a6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80047aa:	d029      	beq.n	8004800 <ADC_ConfigureBoostMode+0x11c>
 80047ac:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80047b0:	d83c      	bhi.n	800482c <ADC_ConfigureBoostMode+0x148>
 80047b2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80047b6:	d01a      	beq.n	80047ee <ADC_ConfigureBoostMode+0x10a>
 80047b8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80047bc:	d836      	bhi.n	800482c <ADC_ConfigureBoostMode+0x148>
 80047be:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80047c2:	d014      	beq.n	80047ee <ADC_ConfigureBoostMode+0x10a>
 80047c4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80047c8:	d830      	bhi.n	800482c <ADC_ConfigureBoostMode+0x148>
 80047ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047ce:	d00e      	beq.n	80047ee <ADC_ConfigureBoostMode+0x10a>
 80047d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047d4:	d82a      	bhi.n	800482c <ADC_ConfigureBoostMode+0x148>
 80047d6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047da:	d008      	beq.n	80047ee <ADC_ConfigureBoostMode+0x10a>
 80047dc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047e0:	d824      	bhi.n	800482c <ADC_ConfigureBoostMode+0x148>
 80047e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047e6:	d002      	beq.n	80047ee <ADC_ConfigureBoostMode+0x10a>
 80047e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047ec:	d11e      	bne.n	800482c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	0c9b      	lsrs	r3, r3, #18
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fc:	60fb      	str	r3, [r7, #12]
        break;
 80047fe:	e016      	b.n	800482e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	091b      	lsrs	r3, r3, #4
 8004804:	60fb      	str	r3, [r7, #12]
        break;
 8004806:	e012      	b.n	800482e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	60fb      	str	r3, [r7, #12]
        break;
 800480e:	e00e      	b.n	800482e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	099b      	lsrs	r3, r3, #6
 8004814:	60fb      	str	r3, [r7, #12]
        break;
 8004816:	e00a      	b.n	800482e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	09db      	lsrs	r3, r3, #7
 800481c:	60fb      	str	r3, [r7, #12]
        break;
 800481e:	e006      	b.n	800482e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	0a1b      	lsrs	r3, r3, #8
 8004824:	60fb      	str	r3, [r7, #12]
        break;
 8004826:	e002      	b.n	800482e <ADC_ConfigureBoostMode+0x14a>
        break;
 8004828:	bf00      	nop
 800482a:	e000      	b.n	800482e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800482c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	085b      	lsrs	r3, r3, #1
 8004832:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4a1f      	ldr	r2, [pc, #124]	@ (80048b4 <ADC_ConfigureBoostMode+0x1d0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d808      	bhi.n	800484e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800484a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800484c:	e025      	b.n	800489a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4a19      	ldr	r2, [pc, #100]	@ (80048b8 <ADC_ConfigureBoostMode+0x1d4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d80a      	bhi.n	800486c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004868:	609a      	str	r2, [r3, #8]
}
 800486a:	e016      	b.n	800489a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4a13      	ldr	r2, [pc, #76]	@ (80048bc <ADC_ConfigureBoostMode+0x1d8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d80a      	bhi.n	800488a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004886:	609a      	str	r2, [r3, #8]
}
 8004888:	e007      	b.n	800489a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004898:	609a      	str	r2, [r3, #8]
}
 800489a:	bf00      	nop
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40022000 	.word	0x40022000
 80048a8:	40022100 	.word	0x40022100
 80048ac:	40022300 	.word	0x40022300
 80048b0:	58026300 	.word	0x58026300
 80048b4:	005f5e10 	.word	0x005f5e10
 80048b8:	00bebc20 	.word	0x00bebc20
 80048bc:	017d7840 	.word	0x017d7840

080048c0 <LL_ADC_IsEnabled>:
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <LL_ADC_IsEnabled+0x18>
 80048d4:	2301      	movs	r3, #1
 80048d6:	e000      	b.n	80048da <LL_ADC_IsEnabled+0x1a>
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d101      	bne.n	80048fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004970:	b590      	push	{r4, r7, lr}
 8004972:	b0a3      	sub	sp, #140	@ 0x8c
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800498a:	2302      	movs	r3, #2
 800498c:	e0c1      	b.n	8004b12 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004996:	2300      	movs	r3, #0
 8004998:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800499a:	2300      	movs	r3, #0
 800499c:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a5e      	ldr	r2, [pc, #376]	@ (8004b1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d102      	bne.n	80049ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80049a8:	4b5d      	ldr	r3, [pc, #372]	@ (8004b20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	e001      	b.n	80049b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80049ae:	2300      	movs	r3, #0
 80049b0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10b      	bne.n	80049d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049bc:	f043 0220 	orr.w	r2, r3, #32
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0a0      	b.n	8004b12 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff ff87 	bl	80048e6 <LL_ADC_REG_IsConversionOngoing>
 80049d8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff ff80 	bl	80048e6 <LL_ADC_REG_IsConversionOngoing>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f040 8081 	bne.w	8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80049ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d17c      	bne.n	8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a48      	ldr	r2, [pc, #288]	@ (8004b1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d004      	beq.n	8004a0a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a46      	ldr	r2, [pc, #280]	@ (8004b20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d101      	bne.n	8004a0e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004a0a:	4b46      	ldr	r3, [pc, #280]	@ (8004b24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004a0c:	e000      	b.n	8004a10 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004a0e:	4b46      	ldr	r3, [pc, #280]	@ (8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004a10:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d039      	beq.n	8004a8e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004a1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a2a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a3a      	ldr	r2, [pc, #232]	@ (8004b1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d004      	beq.n	8004a40 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a39      	ldr	r2, [pc, #228]	@ (8004b20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d10e      	bne.n	8004a5e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004a40:	4836      	ldr	r0, [pc, #216]	@ (8004b1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a42:	f7ff ff3d 	bl	80048c0 <LL_ADC_IsEnabled>
 8004a46:	4604      	mov	r4, r0
 8004a48:	4835      	ldr	r0, [pc, #212]	@ (8004b20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a4a:	f7ff ff39 	bl	80048c0 <LL_ADC_IsEnabled>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	4323      	orrs	r3, r4
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	bf0c      	ite	eq
 8004a56:	2301      	moveq	r3, #1
 8004a58:	2300      	movne	r3, #0
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	e008      	b.n	8004a70 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004a5e:	4833      	ldr	r0, [pc, #204]	@ (8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004a60:	f7ff ff2e 	bl	80048c0 <LL_ADC_IsEnabled>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	bf0c      	ite	eq
 8004a6a:	2301      	moveq	r3, #1
 8004a6c:	2300      	movne	r3, #0
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d047      	beq.n	8004b04 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	4b2d      	ldr	r3, [pc, #180]	@ (8004b30 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	6811      	ldr	r1, [r2, #0]
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	6892      	ldr	r2, [r2, #8]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	431a      	orrs	r2, r3
 8004a88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a8a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a8c:	e03a      	b.n	8004b04 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004a8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a98:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8004b1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d004      	beq.n	8004aae <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d10e      	bne.n	8004acc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004aae:	481b      	ldr	r0, [pc, #108]	@ (8004b1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ab0:	f7ff ff06 	bl	80048c0 <LL_ADC_IsEnabled>
 8004ab4:	4604      	mov	r4, r0
 8004ab6:	481a      	ldr	r0, [pc, #104]	@ (8004b20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ab8:	f7ff ff02 	bl	80048c0 <LL_ADC_IsEnabled>
 8004abc:	4603      	mov	r3, r0
 8004abe:	4323      	orrs	r3, r4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	bf0c      	ite	eq
 8004ac4:	2301      	moveq	r3, #1
 8004ac6:	2300      	movne	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	e008      	b.n	8004ade <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004acc:	4817      	ldr	r0, [pc, #92]	@ (8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004ace:	f7ff fef7 	bl	80048c0 <LL_ADC_IsEnabled>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	bf0c      	ite	eq
 8004ad8:	2301      	moveq	r3, #1
 8004ada:	2300      	movne	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d010      	beq.n	8004b04 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004ae2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	4b12      	ldr	r3, [pc, #72]	@ (8004b30 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004aec:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004aee:	e009      	b.n	8004b04 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004af4:	f043 0220 	orr.w	r2, r3, #32
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004b02:	e000      	b.n	8004b06 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b04:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004b0e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	378c      	adds	r7, #140	@ 0x8c
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd90      	pop	{r4, r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40022000 	.word	0x40022000
 8004b20:	40022100 	.word	0x40022100
 8004b24:	40022300 	.word	0x40022300
 8004b28:	58026300 	.word	0x58026300
 8004b2c:	58026000 	.word	0x58026000
 8004b30:	fffff0e0 	.word	0xfffff0e0

08004b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b44:	4b0b      	ldr	r3, [pc, #44]	@ (8004b74 <__NVIC_SetPriorityGrouping+0x40>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b50:	4013      	ands	r3, r2
 8004b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b5c:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <__NVIC_SetPriorityGrouping+0x44>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b62:	4a04      	ldr	r2, [pc, #16]	@ (8004b74 <__NVIC_SetPriorityGrouping+0x40>)
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	60d3      	str	r3, [r2, #12]
}
 8004b68:	bf00      	nop
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	e000ed00 	.word	0xe000ed00
 8004b78:	05fa0000 	.word	0x05fa0000

08004b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b80:	4b04      	ldr	r3, [pc, #16]	@ (8004b94 <__NVIC_GetPriorityGrouping+0x18>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	0a1b      	lsrs	r3, r3, #8
 8004b86:	f003 0307 	and.w	r3, r3, #7
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	e000ed00 	.word	0xe000ed00

08004b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ba2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	db0b      	blt.n	8004bc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004baa:	88fb      	ldrh	r3, [r7, #6]
 8004bac:	f003 021f 	and.w	r2, r3, #31
 8004bb0:	4907      	ldr	r1, [pc, #28]	@ (8004bd0 <__NVIC_EnableIRQ+0x38>)
 8004bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bb6:	095b      	lsrs	r3, r3, #5
 8004bb8:	2001      	movs	r0, #1
 8004bba:	fa00 f202 	lsl.w	r2, r0, r2
 8004bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	e000e100 	.word	0xe000e100

08004bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	4603      	mov	r3, r0
 8004bdc:	6039      	str	r1, [r7, #0]
 8004bde:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004be0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	db0a      	blt.n	8004bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	490c      	ldr	r1, [pc, #48]	@ (8004c20 <__NVIC_SetPriority+0x4c>)
 8004bee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bf2:	0112      	lsls	r2, r2, #4
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bfc:	e00a      	b.n	8004c14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	4908      	ldr	r1, [pc, #32]	@ (8004c24 <__NVIC_SetPriority+0x50>)
 8004c04:	88fb      	ldrh	r3, [r7, #6]
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	3b04      	subs	r3, #4
 8004c0c:	0112      	lsls	r2, r2, #4
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	440b      	add	r3, r1
 8004c12:	761a      	strb	r2, [r3, #24]
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	e000e100 	.word	0xe000e100
 8004c24:	e000ed00 	.word	0xe000ed00

08004c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b089      	sub	sp, #36	@ 0x24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f1c3 0307 	rsb	r3, r3, #7
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	bf28      	it	cs
 8004c46:	2304      	movcs	r3, #4
 8004c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	2b06      	cmp	r3, #6
 8004c50:	d902      	bls.n	8004c58 <NVIC_EncodePriority+0x30>
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	3b03      	subs	r3, #3
 8004c56:	e000      	b.n	8004c5a <NVIC_EncodePriority+0x32>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	43da      	mvns	r2, r3
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	401a      	ands	r2, r3
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c70:	f04f 31ff 	mov.w	r1, #4294967295
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7a:	43d9      	mvns	r1, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c80:	4313      	orrs	r3, r2
         );
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3724      	adds	r7, #36	@ 0x24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
	...

08004c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ca0:	d301      	bcc.n	8004ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e00f      	b.n	8004cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8004cd0 <SysTick_Config+0x40>)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cae:	210f      	movs	r1, #15
 8004cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb4:	f7ff ff8e 	bl	8004bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cb8:	4b05      	ldr	r3, [pc, #20]	@ (8004cd0 <SysTick_Config+0x40>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cbe:	4b04      	ldr	r3, [pc, #16]	@ (8004cd0 <SysTick_Config+0x40>)
 8004cc0:	2207      	movs	r2, #7
 8004cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	e000e010 	.word	0xe000e010

08004cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff ff29 	bl	8004b34 <__NVIC_SetPriorityGrouping>
}
 8004ce2:	bf00      	nop
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b086      	sub	sp, #24
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	607a      	str	r2, [r7, #4]
 8004cf6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004cf8:	f7ff ff40 	bl	8004b7c <__NVIC_GetPriorityGrouping>
 8004cfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	6978      	ldr	r0, [r7, #20]
 8004d04:	f7ff ff90 	bl	8004c28 <NVIC_EncodePriority>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff ff5f 	bl	8004bd4 <__NVIC_SetPriority>
}
 8004d16:	bf00      	nop
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b082      	sub	sp, #8
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	4603      	mov	r3, r0
 8004d26:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff ff33 	bl	8004b98 <__NVIC_EnableIRQ>
}
 8004d32:	bf00      	nop
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b082      	sub	sp, #8
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7ff ffa4 	bl	8004c90 <SysTick_Config>
 8004d48:	4603      	mov	r3, r0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004d5c:	f7fd fdfc 	bl	8002958 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e312      	b.n	8005392 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a66      	ldr	r2, [pc, #408]	@ (8004f0c <HAL_DMA_Init+0x1b8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d04a      	beq.n	8004e0c <HAL_DMA_Init+0xb8>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a65      	ldr	r2, [pc, #404]	@ (8004f10 <HAL_DMA_Init+0x1bc>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d045      	beq.n	8004e0c <HAL_DMA_Init+0xb8>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a63      	ldr	r2, [pc, #396]	@ (8004f14 <HAL_DMA_Init+0x1c0>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d040      	beq.n	8004e0c <HAL_DMA_Init+0xb8>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a62      	ldr	r2, [pc, #392]	@ (8004f18 <HAL_DMA_Init+0x1c4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d03b      	beq.n	8004e0c <HAL_DMA_Init+0xb8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a60      	ldr	r2, [pc, #384]	@ (8004f1c <HAL_DMA_Init+0x1c8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d036      	beq.n	8004e0c <HAL_DMA_Init+0xb8>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a5f      	ldr	r2, [pc, #380]	@ (8004f20 <HAL_DMA_Init+0x1cc>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d031      	beq.n	8004e0c <HAL_DMA_Init+0xb8>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a5d      	ldr	r2, [pc, #372]	@ (8004f24 <HAL_DMA_Init+0x1d0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d02c      	beq.n	8004e0c <HAL_DMA_Init+0xb8>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a5c      	ldr	r2, [pc, #368]	@ (8004f28 <HAL_DMA_Init+0x1d4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d027      	beq.n	8004e0c <HAL_DMA_Init+0xb8>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a5a      	ldr	r2, [pc, #360]	@ (8004f2c <HAL_DMA_Init+0x1d8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d022      	beq.n	8004e0c <HAL_DMA_Init+0xb8>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a59      	ldr	r2, [pc, #356]	@ (8004f30 <HAL_DMA_Init+0x1dc>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d01d      	beq.n	8004e0c <HAL_DMA_Init+0xb8>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a57      	ldr	r2, [pc, #348]	@ (8004f34 <HAL_DMA_Init+0x1e0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d018      	beq.n	8004e0c <HAL_DMA_Init+0xb8>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a56      	ldr	r2, [pc, #344]	@ (8004f38 <HAL_DMA_Init+0x1e4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d013      	beq.n	8004e0c <HAL_DMA_Init+0xb8>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a54      	ldr	r2, [pc, #336]	@ (8004f3c <HAL_DMA_Init+0x1e8>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00e      	beq.n	8004e0c <HAL_DMA_Init+0xb8>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a53      	ldr	r2, [pc, #332]	@ (8004f40 <HAL_DMA_Init+0x1ec>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d009      	beq.n	8004e0c <HAL_DMA_Init+0xb8>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a51      	ldr	r2, [pc, #324]	@ (8004f44 <HAL_DMA_Init+0x1f0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d004      	beq.n	8004e0c <HAL_DMA_Init+0xb8>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a50      	ldr	r2, [pc, #320]	@ (8004f48 <HAL_DMA_Init+0x1f4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d101      	bne.n	8004e10 <HAL_DMA_Init+0xbc>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e000      	b.n	8004e12 <HAL_DMA_Init+0xbe>
 8004e10:	2300      	movs	r3, #0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 813c 	beq.w	8005090 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a37      	ldr	r2, [pc, #220]	@ (8004f0c <HAL_DMA_Init+0x1b8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d04a      	beq.n	8004ec8 <HAL_DMA_Init+0x174>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a36      	ldr	r2, [pc, #216]	@ (8004f10 <HAL_DMA_Init+0x1bc>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d045      	beq.n	8004ec8 <HAL_DMA_Init+0x174>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a34      	ldr	r2, [pc, #208]	@ (8004f14 <HAL_DMA_Init+0x1c0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d040      	beq.n	8004ec8 <HAL_DMA_Init+0x174>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a33      	ldr	r2, [pc, #204]	@ (8004f18 <HAL_DMA_Init+0x1c4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d03b      	beq.n	8004ec8 <HAL_DMA_Init+0x174>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a31      	ldr	r2, [pc, #196]	@ (8004f1c <HAL_DMA_Init+0x1c8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d036      	beq.n	8004ec8 <HAL_DMA_Init+0x174>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a30      	ldr	r2, [pc, #192]	@ (8004f20 <HAL_DMA_Init+0x1cc>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d031      	beq.n	8004ec8 <HAL_DMA_Init+0x174>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a2e      	ldr	r2, [pc, #184]	@ (8004f24 <HAL_DMA_Init+0x1d0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d02c      	beq.n	8004ec8 <HAL_DMA_Init+0x174>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a2d      	ldr	r2, [pc, #180]	@ (8004f28 <HAL_DMA_Init+0x1d4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d027      	beq.n	8004ec8 <HAL_DMA_Init+0x174>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a2b      	ldr	r2, [pc, #172]	@ (8004f2c <HAL_DMA_Init+0x1d8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d022      	beq.n	8004ec8 <HAL_DMA_Init+0x174>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a2a      	ldr	r2, [pc, #168]	@ (8004f30 <HAL_DMA_Init+0x1dc>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d01d      	beq.n	8004ec8 <HAL_DMA_Init+0x174>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a28      	ldr	r2, [pc, #160]	@ (8004f34 <HAL_DMA_Init+0x1e0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d018      	beq.n	8004ec8 <HAL_DMA_Init+0x174>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a27      	ldr	r2, [pc, #156]	@ (8004f38 <HAL_DMA_Init+0x1e4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d013      	beq.n	8004ec8 <HAL_DMA_Init+0x174>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a25      	ldr	r2, [pc, #148]	@ (8004f3c <HAL_DMA_Init+0x1e8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00e      	beq.n	8004ec8 <HAL_DMA_Init+0x174>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a24      	ldr	r2, [pc, #144]	@ (8004f40 <HAL_DMA_Init+0x1ec>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d009      	beq.n	8004ec8 <HAL_DMA_Init+0x174>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a22      	ldr	r2, [pc, #136]	@ (8004f44 <HAL_DMA_Init+0x1f0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d004      	beq.n	8004ec8 <HAL_DMA_Init+0x174>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a21      	ldr	r2, [pc, #132]	@ (8004f48 <HAL_DMA_Init+0x1f4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d108      	bne.n	8004eda <HAL_DMA_Init+0x186>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 0201 	bic.w	r2, r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	e007      	b.n	8004eea <HAL_DMA_Init+0x196>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 0201 	bic.w	r2, r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004eea:	e02f      	b.n	8004f4c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004eec:	f7fd fd34 	bl	8002958 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b05      	cmp	r3, #5
 8004ef8:	d928      	bls.n	8004f4c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2220      	movs	r2, #32
 8004efe:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2203      	movs	r2, #3
 8004f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e242      	b.n	8005392 <HAL_DMA_Init+0x63e>
 8004f0c:	40020010 	.word	0x40020010
 8004f10:	40020028 	.word	0x40020028
 8004f14:	40020040 	.word	0x40020040
 8004f18:	40020058 	.word	0x40020058
 8004f1c:	40020070 	.word	0x40020070
 8004f20:	40020088 	.word	0x40020088
 8004f24:	400200a0 	.word	0x400200a0
 8004f28:	400200b8 	.word	0x400200b8
 8004f2c:	40020410 	.word	0x40020410
 8004f30:	40020428 	.word	0x40020428
 8004f34:	40020440 	.word	0x40020440
 8004f38:	40020458 	.word	0x40020458
 8004f3c:	40020470 	.word	0x40020470
 8004f40:	40020488 	.word	0x40020488
 8004f44:	400204a0 	.word	0x400204a0
 8004f48:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1c8      	bne.n	8004eec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4b83      	ldr	r3, [pc, #524]	@ (8005174 <HAL_DMA_Init+0x420>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004f72:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f7e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f8a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d107      	bne.n	8004fb0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2b28      	cmp	r3, #40	@ 0x28
 8004fb6:	d903      	bls.n	8004fc0 <HAL_DMA_Init+0x26c>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fbe:	d91f      	bls.n	8005000 <HAL_DMA_Init+0x2ac>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8004fc6:	d903      	bls.n	8004fd0 <HAL_DMA_Init+0x27c>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b42      	cmp	r3, #66	@ 0x42
 8004fce:	d917      	bls.n	8005000 <HAL_DMA_Init+0x2ac>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b46      	cmp	r3, #70	@ 0x46
 8004fd6:	d903      	bls.n	8004fe0 <HAL_DMA_Init+0x28c>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b48      	cmp	r3, #72	@ 0x48
 8004fde:	d90f      	bls.n	8005000 <HAL_DMA_Init+0x2ac>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	2b4e      	cmp	r3, #78	@ 0x4e
 8004fe6:	d903      	bls.n	8004ff0 <HAL_DMA_Init+0x29c>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2b52      	cmp	r3, #82	@ 0x52
 8004fee:	d907      	bls.n	8005000 <HAL_DMA_Init+0x2ac>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b73      	cmp	r3, #115	@ 0x73
 8004ff6:	d905      	bls.n	8005004 <HAL_DMA_Init+0x2b0>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	2b77      	cmp	r3, #119	@ 0x77
 8004ffe:	d801      	bhi.n	8005004 <HAL_DMA_Init+0x2b0>
 8005000:	2301      	movs	r3, #1
 8005002:	e000      	b.n	8005006 <HAL_DMA_Init+0x2b2>
 8005004:	2300      	movs	r3, #0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005010:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f023 0307 	bic.w	r3, r3, #7
 8005028:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	4313      	orrs	r3, r2
 8005032:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005038:	2b04      	cmp	r3, #4
 800503a:	d117      	bne.n	800506c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00e      	beq.n	800506c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f002 fb2e 	bl	80076b0 <DMA_CheckFifoParam>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d008      	beq.n	800506c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2240      	movs	r2, #64	@ 0x40
 800505e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e192      	b.n	8005392 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f002 fa69 	bl	800754c <DMA_CalcBaseAndBitshift>
 800507a:	4603      	mov	r3, r0
 800507c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005082:	f003 031f 	and.w	r3, r3, #31
 8005086:	223f      	movs	r2, #63	@ 0x3f
 8005088:	409a      	lsls	r2, r3
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	609a      	str	r2, [r3, #8]
 800508e:	e0c8      	b.n	8005222 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a38      	ldr	r2, [pc, #224]	@ (8005178 <HAL_DMA_Init+0x424>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d022      	beq.n	80050e0 <HAL_DMA_Init+0x38c>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a37      	ldr	r2, [pc, #220]	@ (800517c <HAL_DMA_Init+0x428>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d01d      	beq.n	80050e0 <HAL_DMA_Init+0x38c>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a35      	ldr	r2, [pc, #212]	@ (8005180 <HAL_DMA_Init+0x42c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d018      	beq.n	80050e0 <HAL_DMA_Init+0x38c>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a34      	ldr	r2, [pc, #208]	@ (8005184 <HAL_DMA_Init+0x430>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d013      	beq.n	80050e0 <HAL_DMA_Init+0x38c>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a32      	ldr	r2, [pc, #200]	@ (8005188 <HAL_DMA_Init+0x434>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00e      	beq.n	80050e0 <HAL_DMA_Init+0x38c>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a31      	ldr	r2, [pc, #196]	@ (800518c <HAL_DMA_Init+0x438>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d009      	beq.n	80050e0 <HAL_DMA_Init+0x38c>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a2f      	ldr	r2, [pc, #188]	@ (8005190 <HAL_DMA_Init+0x43c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d004      	beq.n	80050e0 <HAL_DMA_Init+0x38c>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a2e      	ldr	r2, [pc, #184]	@ (8005194 <HAL_DMA_Init+0x440>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d101      	bne.n	80050e4 <HAL_DMA_Init+0x390>
 80050e0:	2301      	movs	r3, #1
 80050e2:	e000      	b.n	80050e6 <HAL_DMA_Init+0x392>
 80050e4:	2300      	movs	r3, #0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f000 8092 	beq.w	8005210 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a21      	ldr	r2, [pc, #132]	@ (8005178 <HAL_DMA_Init+0x424>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d021      	beq.n	800513a <HAL_DMA_Init+0x3e6>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a20      	ldr	r2, [pc, #128]	@ (800517c <HAL_DMA_Init+0x428>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d01c      	beq.n	800513a <HAL_DMA_Init+0x3e6>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1e      	ldr	r2, [pc, #120]	@ (8005180 <HAL_DMA_Init+0x42c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d017      	beq.n	800513a <HAL_DMA_Init+0x3e6>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1d      	ldr	r2, [pc, #116]	@ (8005184 <HAL_DMA_Init+0x430>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d012      	beq.n	800513a <HAL_DMA_Init+0x3e6>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1b      	ldr	r2, [pc, #108]	@ (8005188 <HAL_DMA_Init+0x434>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00d      	beq.n	800513a <HAL_DMA_Init+0x3e6>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a1a      	ldr	r2, [pc, #104]	@ (800518c <HAL_DMA_Init+0x438>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d008      	beq.n	800513a <HAL_DMA_Init+0x3e6>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a18      	ldr	r2, [pc, #96]	@ (8005190 <HAL_DMA_Init+0x43c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d003      	beq.n	800513a <HAL_DMA_Init+0x3e6>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a17      	ldr	r2, [pc, #92]	@ (8005194 <HAL_DMA_Init+0x440>)
 8005138:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2202      	movs	r2, #2
 800513e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	4b10      	ldr	r3, [pc, #64]	@ (8005198 <HAL_DMA_Init+0x444>)
 8005156:	4013      	ands	r3, r2
 8005158:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	2b40      	cmp	r3, #64	@ 0x40
 8005160:	d01c      	beq.n	800519c <HAL_DMA_Init+0x448>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b80      	cmp	r3, #128	@ 0x80
 8005168:	d102      	bne.n	8005170 <HAL_DMA_Init+0x41c>
 800516a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800516e:	e016      	b.n	800519e <HAL_DMA_Init+0x44a>
 8005170:	2300      	movs	r3, #0
 8005172:	e014      	b.n	800519e <HAL_DMA_Init+0x44a>
 8005174:	fe10803f 	.word	0xfe10803f
 8005178:	58025408 	.word	0x58025408
 800517c:	5802541c 	.word	0x5802541c
 8005180:	58025430 	.word	0x58025430
 8005184:	58025444 	.word	0x58025444
 8005188:	58025458 	.word	0x58025458
 800518c:	5802546c 	.word	0x5802546c
 8005190:	58025480 	.word	0x58025480
 8005194:	58025494 	.word	0x58025494
 8005198:	fffe000f 	.word	0xfffe000f
 800519c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	68d2      	ldr	r2, [r2, #12]
 80051a2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80051ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80051b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80051bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80051cc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	461a      	mov	r2, r3
 80051e2:	4b6e      	ldr	r3, [pc, #440]	@ (800539c <HAL_DMA_Init+0x648>)
 80051e4:	4413      	add	r3, r2
 80051e6:	4a6e      	ldr	r2, [pc, #440]	@ (80053a0 <HAL_DMA_Init+0x64c>)
 80051e8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ec:	091b      	lsrs	r3, r3, #4
 80051ee:	009a      	lsls	r2, r3, #2
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f002 f9a9 	bl	800754c <DMA_CalcBaseAndBitshift>
 80051fa:	4603      	mov	r3, r0
 80051fc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005202:	f003 031f 	and.w	r3, r3, #31
 8005206:	2201      	movs	r2, #1
 8005208:	409a      	lsls	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	605a      	str	r2, [r3, #4]
 800520e:	e008      	b.n	8005222 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2240      	movs	r2, #64	@ 0x40
 8005214:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2203      	movs	r2, #3
 800521a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e0b7      	b.n	8005392 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a5f      	ldr	r2, [pc, #380]	@ (80053a4 <HAL_DMA_Init+0x650>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d072      	beq.n	8005312 <HAL_DMA_Init+0x5be>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a5d      	ldr	r2, [pc, #372]	@ (80053a8 <HAL_DMA_Init+0x654>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d06d      	beq.n	8005312 <HAL_DMA_Init+0x5be>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a5c      	ldr	r2, [pc, #368]	@ (80053ac <HAL_DMA_Init+0x658>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d068      	beq.n	8005312 <HAL_DMA_Init+0x5be>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a5a      	ldr	r2, [pc, #360]	@ (80053b0 <HAL_DMA_Init+0x65c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d063      	beq.n	8005312 <HAL_DMA_Init+0x5be>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a59      	ldr	r2, [pc, #356]	@ (80053b4 <HAL_DMA_Init+0x660>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d05e      	beq.n	8005312 <HAL_DMA_Init+0x5be>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a57      	ldr	r2, [pc, #348]	@ (80053b8 <HAL_DMA_Init+0x664>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d059      	beq.n	8005312 <HAL_DMA_Init+0x5be>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a56      	ldr	r2, [pc, #344]	@ (80053bc <HAL_DMA_Init+0x668>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d054      	beq.n	8005312 <HAL_DMA_Init+0x5be>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a54      	ldr	r2, [pc, #336]	@ (80053c0 <HAL_DMA_Init+0x66c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d04f      	beq.n	8005312 <HAL_DMA_Init+0x5be>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a53      	ldr	r2, [pc, #332]	@ (80053c4 <HAL_DMA_Init+0x670>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d04a      	beq.n	8005312 <HAL_DMA_Init+0x5be>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a51      	ldr	r2, [pc, #324]	@ (80053c8 <HAL_DMA_Init+0x674>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d045      	beq.n	8005312 <HAL_DMA_Init+0x5be>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a50      	ldr	r2, [pc, #320]	@ (80053cc <HAL_DMA_Init+0x678>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d040      	beq.n	8005312 <HAL_DMA_Init+0x5be>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a4e      	ldr	r2, [pc, #312]	@ (80053d0 <HAL_DMA_Init+0x67c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d03b      	beq.n	8005312 <HAL_DMA_Init+0x5be>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a4d      	ldr	r2, [pc, #308]	@ (80053d4 <HAL_DMA_Init+0x680>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d036      	beq.n	8005312 <HAL_DMA_Init+0x5be>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a4b      	ldr	r2, [pc, #300]	@ (80053d8 <HAL_DMA_Init+0x684>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d031      	beq.n	8005312 <HAL_DMA_Init+0x5be>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a4a      	ldr	r2, [pc, #296]	@ (80053dc <HAL_DMA_Init+0x688>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d02c      	beq.n	8005312 <HAL_DMA_Init+0x5be>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a48      	ldr	r2, [pc, #288]	@ (80053e0 <HAL_DMA_Init+0x68c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d027      	beq.n	8005312 <HAL_DMA_Init+0x5be>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a47      	ldr	r2, [pc, #284]	@ (80053e4 <HAL_DMA_Init+0x690>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d022      	beq.n	8005312 <HAL_DMA_Init+0x5be>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a45      	ldr	r2, [pc, #276]	@ (80053e8 <HAL_DMA_Init+0x694>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d01d      	beq.n	8005312 <HAL_DMA_Init+0x5be>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a44      	ldr	r2, [pc, #272]	@ (80053ec <HAL_DMA_Init+0x698>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d018      	beq.n	8005312 <HAL_DMA_Init+0x5be>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a42      	ldr	r2, [pc, #264]	@ (80053f0 <HAL_DMA_Init+0x69c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d013      	beq.n	8005312 <HAL_DMA_Init+0x5be>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a41      	ldr	r2, [pc, #260]	@ (80053f4 <HAL_DMA_Init+0x6a0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d00e      	beq.n	8005312 <HAL_DMA_Init+0x5be>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a3f      	ldr	r2, [pc, #252]	@ (80053f8 <HAL_DMA_Init+0x6a4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d009      	beq.n	8005312 <HAL_DMA_Init+0x5be>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a3e      	ldr	r2, [pc, #248]	@ (80053fc <HAL_DMA_Init+0x6a8>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d004      	beq.n	8005312 <HAL_DMA_Init+0x5be>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a3c      	ldr	r2, [pc, #240]	@ (8005400 <HAL_DMA_Init+0x6ac>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d101      	bne.n	8005316 <HAL_DMA_Init+0x5c2>
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <HAL_DMA_Init+0x5c4>
 8005316:	2300      	movs	r3, #0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d032      	beq.n	8005382 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f002 fa43 	bl	80077a8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	2b80      	cmp	r3, #128	@ 0x80
 8005328:	d102      	bne.n	8005330 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005344:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d010      	beq.n	8005370 <HAL_DMA_Init+0x61c>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	2b08      	cmp	r3, #8
 8005354:	d80c      	bhi.n	8005370 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f002 fac0 	bl	80078dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800536c:	605a      	str	r2, [r3, #4]
 800536e:	e008      	b.n	8005382 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	a7fdabf8 	.word	0xa7fdabf8
 80053a0:	cccccccd 	.word	0xcccccccd
 80053a4:	40020010 	.word	0x40020010
 80053a8:	40020028 	.word	0x40020028
 80053ac:	40020040 	.word	0x40020040
 80053b0:	40020058 	.word	0x40020058
 80053b4:	40020070 	.word	0x40020070
 80053b8:	40020088 	.word	0x40020088
 80053bc:	400200a0 	.word	0x400200a0
 80053c0:	400200b8 	.word	0x400200b8
 80053c4:	40020410 	.word	0x40020410
 80053c8:	40020428 	.word	0x40020428
 80053cc:	40020440 	.word	0x40020440
 80053d0:	40020458 	.word	0x40020458
 80053d4:	40020470 	.word	0x40020470
 80053d8:	40020488 	.word	0x40020488
 80053dc:	400204a0 	.word	0x400204a0
 80053e0:	400204b8 	.word	0x400204b8
 80053e4:	58025408 	.word	0x58025408
 80053e8:	5802541c 	.word	0x5802541c
 80053ec:	58025430 	.word	0x58025430
 80053f0:	58025444 	.word	0x58025444
 80053f4:	58025458 	.word	0x58025458
 80053f8:	5802546c 	.word	0x5802546c
 80053fc:	58025480 	.word	0x58025480
 8005400:	58025494 	.word	0x58025494

08005404 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
 8005410:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e226      	b.n	800586e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <HAL_DMA_Start_IT+0x2a>
 800542a:	2302      	movs	r3, #2
 800542c:	e21f      	b.n	800586e <HAL_DMA_Start_IT+0x46a>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b01      	cmp	r3, #1
 8005440:	f040 820a 	bne.w	8005858 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a68      	ldr	r2, [pc, #416]	@ (80055f8 <HAL_DMA_Start_IT+0x1f4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d04a      	beq.n	80054f2 <HAL_DMA_Start_IT+0xee>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a66      	ldr	r2, [pc, #408]	@ (80055fc <HAL_DMA_Start_IT+0x1f8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d045      	beq.n	80054f2 <HAL_DMA_Start_IT+0xee>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a65      	ldr	r2, [pc, #404]	@ (8005600 <HAL_DMA_Start_IT+0x1fc>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d040      	beq.n	80054f2 <HAL_DMA_Start_IT+0xee>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a63      	ldr	r2, [pc, #396]	@ (8005604 <HAL_DMA_Start_IT+0x200>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d03b      	beq.n	80054f2 <HAL_DMA_Start_IT+0xee>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a62      	ldr	r2, [pc, #392]	@ (8005608 <HAL_DMA_Start_IT+0x204>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d036      	beq.n	80054f2 <HAL_DMA_Start_IT+0xee>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a60      	ldr	r2, [pc, #384]	@ (800560c <HAL_DMA_Start_IT+0x208>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d031      	beq.n	80054f2 <HAL_DMA_Start_IT+0xee>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a5f      	ldr	r2, [pc, #380]	@ (8005610 <HAL_DMA_Start_IT+0x20c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d02c      	beq.n	80054f2 <HAL_DMA_Start_IT+0xee>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a5d      	ldr	r2, [pc, #372]	@ (8005614 <HAL_DMA_Start_IT+0x210>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d027      	beq.n	80054f2 <HAL_DMA_Start_IT+0xee>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a5c      	ldr	r2, [pc, #368]	@ (8005618 <HAL_DMA_Start_IT+0x214>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d022      	beq.n	80054f2 <HAL_DMA_Start_IT+0xee>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a5a      	ldr	r2, [pc, #360]	@ (800561c <HAL_DMA_Start_IT+0x218>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d01d      	beq.n	80054f2 <HAL_DMA_Start_IT+0xee>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a59      	ldr	r2, [pc, #356]	@ (8005620 <HAL_DMA_Start_IT+0x21c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d018      	beq.n	80054f2 <HAL_DMA_Start_IT+0xee>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a57      	ldr	r2, [pc, #348]	@ (8005624 <HAL_DMA_Start_IT+0x220>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d013      	beq.n	80054f2 <HAL_DMA_Start_IT+0xee>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a56      	ldr	r2, [pc, #344]	@ (8005628 <HAL_DMA_Start_IT+0x224>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00e      	beq.n	80054f2 <HAL_DMA_Start_IT+0xee>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a54      	ldr	r2, [pc, #336]	@ (800562c <HAL_DMA_Start_IT+0x228>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d009      	beq.n	80054f2 <HAL_DMA_Start_IT+0xee>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a53      	ldr	r2, [pc, #332]	@ (8005630 <HAL_DMA_Start_IT+0x22c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d004      	beq.n	80054f2 <HAL_DMA_Start_IT+0xee>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a51      	ldr	r2, [pc, #324]	@ (8005634 <HAL_DMA_Start_IT+0x230>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d108      	bne.n	8005504 <HAL_DMA_Start_IT+0x100>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0201 	bic.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	e007      	b.n	8005514 <HAL_DMA_Start_IT+0x110>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0201 	bic.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	68b9      	ldr	r1, [r7, #8]
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f001 fe6a 	bl	80071f4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a34      	ldr	r2, [pc, #208]	@ (80055f8 <HAL_DMA_Start_IT+0x1f4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d04a      	beq.n	80055c0 <HAL_DMA_Start_IT+0x1bc>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a33      	ldr	r2, [pc, #204]	@ (80055fc <HAL_DMA_Start_IT+0x1f8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d045      	beq.n	80055c0 <HAL_DMA_Start_IT+0x1bc>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a31      	ldr	r2, [pc, #196]	@ (8005600 <HAL_DMA_Start_IT+0x1fc>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d040      	beq.n	80055c0 <HAL_DMA_Start_IT+0x1bc>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a30      	ldr	r2, [pc, #192]	@ (8005604 <HAL_DMA_Start_IT+0x200>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d03b      	beq.n	80055c0 <HAL_DMA_Start_IT+0x1bc>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a2e      	ldr	r2, [pc, #184]	@ (8005608 <HAL_DMA_Start_IT+0x204>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d036      	beq.n	80055c0 <HAL_DMA_Start_IT+0x1bc>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a2d      	ldr	r2, [pc, #180]	@ (800560c <HAL_DMA_Start_IT+0x208>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d031      	beq.n	80055c0 <HAL_DMA_Start_IT+0x1bc>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a2b      	ldr	r2, [pc, #172]	@ (8005610 <HAL_DMA_Start_IT+0x20c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d02c      	beq.n	80055c0 <HAL_DMA_Start_IT+0x1bc>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a2a      	ldr	r2, [pc, #168]	@ (8005614 <HAL_DMA_Start_IT+0x210>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d027      	beq.n	80055c0 <HAL_DMA_Start_IT+0x1bc>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a28      	ldr	r2, [pc, #160]	@ (8005618 <HAL_DMA_Start_IT+0x214>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d022      	beq.n	80055c0 <HAL_DMA_Start_IT+0x1bc>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a27      	ldr	r2, [pc, #156]	@ (800561c <HAL_DMA_Start_IT+0x218>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d01d      	beq.n	80055c0 <HAL_DMA_Start_IT+0x1bc>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a25      	ldr	r2, [pc, #148]	@ (8005620 <HAL_DMA_Start_IT+0x21c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d018      	beq.n	80055c0 <HAL_DMA_Start_IT+0x1bc>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a24      	ldr	r2, [pc, #144]	@ (8005624 <HAL_DMA_Start_IT+0x220>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d013      	beq.n	80055c0 <HAL_DMA_Start_IT+0x1bc>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a22      	ldr	r2, [pc, #136]	@ (8005628 <HAL_DMA_Start_IT+0x224>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00e      	beq.n	80055c0 <HAL_DMA_Start_IT+0x1bc>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a21      	ldr	r2, [pc, #132]	@ (800562c <HAL_DMA_Start_IT+0x228>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d009      	beq.n	80055c0 <HAL_DMA_Start_IT+0x1bc>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005630 <HAL_DMA_Start_IT+0x22c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d004      	beq.n	80055c0 <HAL_DMA_Start_IT+0x1bc>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005634 <HAL_DMA_Start_IT+0x230>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d101      	bne.n	80055c4 <HAL_DMA_Start_IT+0x1c0>
 80055c0:	2301      	movs	r3, #1
 80055c2:	e000      	b.n	80055c6 <HAL_DMA_Start_IT+0x1c2>
 80055c4:	2300      	movs	r3, #0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d036      	beq.n	8005638 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f023 021e 	bic.w	r2, r3, #30
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 0216 	orr.w	r2, r2, #22
 80055dc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d03e      	beq.n	8005664 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f042 0208 	orr.w	r2, r2, #8
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	e035      	b.n	8005664 <HAL_DMA_Start_IT+0x260>
 80055f8:	40020010 	.word	0x40020010
 80055fc:	40020028 	.word	0x40020028
 8005600:	40020040 	.word	0x40020040
 8005604:	40020058 	.word	0x40020058
 8005608:	40020070 	.word	0x40020070
 800560c:	40020088 	.word	0x40020088
 8005610:	400200a0 	.word	0x400200a0
 8005614:	400200b8 	.word	0x400200b8
 8005618:	40020410 	.word	0x40020410
 800561c:	40020428 	.word	0x40020428
 8005620:	40020440 	.word	0x40020440
 8005624:	40020458 	.word	0x40020458
 8005628:	40020470 	.word	0x40020470
 800562c:	40020488 	.word	0x40020488
 8005630:	400204a0 	.word	0x400204a0
 8005634:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f023 020e 	bic.w	r2, r3, #14
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 020a 	orr.w	r2, r2, #10
 800564a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005650:	2b00      	cmp	r3, #0
 8005652:	d007      	beq.n	8005664 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0204 	orr.w	r2, r2, #4
 8005662:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a83      	ldr	r2, [pc, #524]	@ (8005878 <HAL_DMA_Start_IT+0x474>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d072      	beq.n	8005754 <HAL_DMA_Start_IT+0x350>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a82      	ldr	r2, [pc, #520]	@ (800587c <HAL_DMA_Start_IT+0x478>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d06d      	beq.n	8005754 <HAL_DMA_Start_IT+0x350>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a80      	ldr	r2, [pc, #512]	@ (8005880 <HAL_DMA_Start_IT+0x47c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d068      	beq.n	8005754 <HAL_DMA_Start_IT+0x350>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a7f      	ldr	r2, [pc, #508]	@ (8005884 <HAL_DMA_Start_IT+0x480>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d063      	beq.n	8005754 <HAL_DMA_Start_IT+0x350>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a7d      	ldr	r2, [pc, #500]	@ (8005888 <HAL_DMA_Start_IT+0x484>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d05e      	beq.n	8005754 <HAL_DMA_Start_IT+0x350>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a7c      	ldr	r2, [pc, #496]	@ (800588c <HAL_DMA_Start_IT+0x488>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d059      	beq.n	8005754 <HAL_DMA_Start_IT+0x350>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a7a      	ldr	r2, [pc, #488]	@ (8005890 <HAL_DMA_Start_IT+0x48c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d054      	beq.n	8005754 <HAL_DMA_Start_IT+0x350>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a79      	ldr	r2, [pc, #484]	@ (8005894 <HAL_DMA_Start_IT+0x490>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d04f      	beq.n	8005754 <HAL_DMA_Start_IT+0x350>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a77      	ldr	r2, [pc, #476]	@ (8005898 <HAL_DMA_Start_IT+0x494>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d04a      	beq.n	8005754 <HAL_DMA_Start_IT+0x350>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a76      	ldr	r2, [pc, #472]	@ (800589c <HAL_DMA_Start_IT+0x498>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d045      	beq.n	8005754 <HAL_DMA_Start_IT+0x350>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a74      	ldr	r2, [pc, #464]	@ (80058a0 <HAL_DMA_Start_IT+0x49c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d040      	beq.n	8005754 <HAL_DMA_Start_IT+0x350>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a73      	ldr	r2, [pc, #460]	@ (80058a4 <HAL_DMA_Start_IT+0x4a0>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d03b      	beq.n	8005754 <HAL_DMA_Start_IT+0x350>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a71      	ldr	r2, [pc, #452]	@ (80058a8 <HAL_DMA_Start_IT+0x4a4>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d036      	beq.n	8005754 <HAL_DMA_Start_IT+0x350>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a70      	ldr	r2, [pc, #448]	@ (80058ac <HAL_DMA_Start_IT+0x4a8>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d031      	beq.n	8005754 <HAL_DMA_Start_IT+0x350>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a6e      	ldr	r2, [pc, #440]	@ (80058b0 <HAL_DMA_Start_IT+0x4ac>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d02c      	beq.n	8005754 <HAL_DMA_Start_IT+0x350>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a6d      	ldr	r2, [pc, #436]	@ (80058b4 <HAL_DMA_Start_IT+0x4b0>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d027      	beq.n	8005754 <HAL_DMA_Start_IT+0x350>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a6b      	ldr	r2, [pc, #428]	@ (80058b8 <HAL_DMA_Start_IT+0x4b4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d022      	beq.n	8005754 <HAL_DMA_Start_IT+0x350>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a6a      	ldr	r2, [pc, #424]	@ (80058bc <HAL_DMA_Start_IT+0x4b8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d01d      	beq.n	8005754 <HAL_DMA_Start_IT+0x350>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a68      	ldr	r2, [pc, #416]	@ (80058c0 <HAL_DMA_Start_IT+0x4bc>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d018      	beq.n	8005754 <HAL_DMA_Start_IT+0x350>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a67      	ldr	r2, [pc, #412]	@ (80058c4 <HAL_DMA_Start_IT+0x4c0>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d013      	beq.n	8005754 <HAL_DMA_Start_IT+0x350>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a65      	ldr	r2, [pc, #404]	@ (80058c8 <HAL_DMA_Start_IT+0x4c4>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00e      	beq.n	8005754 <HAL_DMA_Start_IT+0x350>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a64      	ldr	r2, [pc, #400]	@ (80058cc <HAL_DMA_Start_IT+0x4c8>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d009      	beq.n	8005754 <HAL_DMA_Start_IT+0x350>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a62      	ldr	r2, [pc, #392]	@ (80058d0 <HAL_DMA_Start_IT+0x4cc>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d004      	beq.n	8005754 <HAL_DMA_Start_IT+0x350>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a61      	ldr	r2, [pc, #388]	@ (80058d4 <HAL_DMA_Start_IT+0x4d0>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d101      	bne.n	8005758 <HAL_DMA_Start_IT+0x354>
 8005754:	2301      	movs	r3, #1
 8005756:	e000      	b.n	800575a <HAL_DMA_Start_IT+0x356>
 8005758:	2300      	movs	r3, #0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d01a      	beq.n	8005794 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d007      	beq.n	800577c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005776:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800577a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800578e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005792:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a37      	ldr	r2, [pc, #220]	@ (8005878 <HAL_DMA_Start_IT+0x474>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d04a      	beq.n	8005834 <HAL_DMA_Start_IT+0x430>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a36      	ldr	r2, [pc, #216]	@ (800587c <HAL_DMA_Start_IT+0x478>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d045      	beq.n	8005834 <HAL_DMA_Start_IT+0x430>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a34      	ldr	r2, [pc, #208]	@ (8005880 <HAL_DMA_Start_IT+0x47c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d040      	beq.n	8005834 <HAL_DMA_Start_IT+0x430>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a33      	ldr	r2, [pc, #204]	@ (8005884 <HAL_DMA_Start_IT+0x480>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d03b      	beq.n	8005834 <HAL_DMA_Start_IT+0x430>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a31      	ldr	r2, [pc, #196]	@ (8005888 <HAL_DMA_Start_IT+0x484>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d036      	beq.n	8005834 <HAL_DMA_Start_IT+0x430>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a30      	ldr	r2, [pc, #192]	@ (800588c <HAL_DMA_Start_IT+0x488>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d031      	beq.n	8005834 <HAL_DMA_Start_IT+0x430>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a2e      	ldr	r2, [pc, #184]	@ (8005890 <HAL_DMA_Start_IT+0x48c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d02c      	beq.n	8005834 <HAL_DMA_Start_IT+0x430>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a2d      	ldr	r2, [pc, #180]	@ (8005894 <HAL_DMA_Start_IT+0x490>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d027      	beq.n	8005834 <HAL_DMA_Start_IT+0x430>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a2b      	ldr	r2, [pc, #172]	@ (8005898 <HAL_DMA_Start_IT+0x494>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d022      	beq.n	8005834 <HAL_DMA_Start_IT+0x430>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a2a      	ldr	r2, [pc, #168]	@ (800589c <HAL_DMA_Start_IT+0x498>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d01d      	beq.n	8005834 <HAL_DMA_Start_IT+0x430>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a28      	ldr	r2, [pc, #160]	@ (80058a0 <HAL_DMA_Start_IT+0x49c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d018      	beq.n	8005834 <HAL_DMA_Start_IT+0x430>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a27      	ldr	r2, [pc, #156]	@ (80058a4 <HAL_DMA_Start_IT+0x4a0>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d013      	beq.n	8005834 <HAL_DMA_Start_IT+0x430>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a25      	ldr	r2, [pc, #148]	@ (80058a8 <HAL_DMA_Start_IT+0x4a4>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d00e      	beq.n	8005834 <HAL_DMA_Start_IT+0x430>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a24      	ldr	r2, [pc, #144]	@ (80058ac <HAL_DMA_Start_IT+0x4a8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d009      	beq.n	8005834 <HAL_DMA_Start_IT+0x430>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a22      	ldr	r2, [pc, #136]	@ (80058b0 <HAL_DMA_Start_IT+0x4ac>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d004      	beq.n	8005834 <HAL_DMA_Start_IT+0x430>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a21      	ldr	r2, [pc, #132]	@ (80058b4 <HAL_DMA_Start_IT+0x4b0>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d108      	bne.n	8005846 <HAL_DMA_Start_IT+0x442>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	e012      	b.n	800586c <HAL_DMA_Start_IT+0x468>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f042 0201 	orr.w	r2, r2, #1
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	e009      	b.n	800586c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800585e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800586c:	7dfb      	ldrb	r3, [r7, #23]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	40020010 	.word	0x40020010
 800587c:	40020028 	.word	0x40020028
 8005880:	40020040 	.word	0x40020040
 8005884:	40020058 	.word	0x40020058
 8005888:	40020070 	.word	0x40020070
 800588c:	40020088 	.word	0x40020088
 8005890:	400200a0 	.word	0x400200a0
 8005894:	400200b8 	.word	0x400200b8
 8005898:	40020410 	.word	0x40020410
 800589c:	40020428 	.word	0x40020428
 80058a0:	40020440 	.word	0x40020440
 80058a4:	40020458 	.word	0x40020458
 80058a8:	40020470 	.word	0x40020470
 80058ac:	40020488 	.word	0x40020488
 80058b0:	400204a0 	.word	0x400204a0
 80058b4:	400204b8 	.word	0x400204b8
 80058b8:	58025408 	.word	0x58025408
 80058bc:	5802541c 	.word	0x5802541c
 80058c0:	58025430 	.word	0x58025430
 80058c4:	58025444 	.word	0x58025444
 80058c8:	58025458 	.word	0x58025458
 80058cc:	5802546c 	.word	0x5802546c
 80058d0:	58025480 	.word	0x58025480
 80058d4:	58025494 	.word	0x58025494

080058d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80058e0:	f7fd f83a 	bl	8002958 <HAL_GetTick>
 80058e4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e2dc      	b.n	8005eaa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d008      	beq.n	800590e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2280      	movs	r2, #128	@ 0x80
 8005900:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e2cd      	b.n	8005eaa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a76      	ldr	r2, [pc, #472]	@ (8005aec <HAL_DMA_Abort+0x214>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d04a      	beq.n	80059ae <HAL_DMA_Abort+0xd6>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a74      	ldr	r2, [pc, #464]	@ (8005af0 <HAL_DMA_Abort+0x218>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d045      	beq.n	80059ae <HAL_DMA_Abort+0xd6>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a73      	ldr	r2, [pc, #460]	@ (8005af4 <HAL_DMA_Abort+0x21c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d040      	beq.n	80059ae <HAL_DMA_Abort+0xd6>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a71      	ldr	r2, [pc, #452]	@ (8005af8 <HAL_DMA_Abort+0x220>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d03b      	beq.n	80059ae <HAL_DMA_Abort+0xd6>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a70      	ldr	r2, [pc, #448]	@ (8005afc <HAL_DMA_Abort+0x224>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d036      	beq.n	80059ae <HAL_DMA_Abort+0xd6>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a6e      	ldr	r2, [pc, #440]	@ (8005b00 <HAL_DMA_Abort+0x228>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d031      	beq.n	80059ae <HAL_DMA_Abort+0xd6>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a6d      	ldr	r2, [pc, #436]	@ (8005b04 <HAL_DMA_Abort+0x22c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d02c      	beq.n	80059ae <HAL_DMA_Abort+0xd6>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a6b      	ldr	r2, [pc, #428]	@ (8005b08 <HAL_DMA_Abort+0x230>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d027      	beq.n	80059ae <HAL_DMA_Abort+0xd6>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a6a      	ldr	r2, [pc, #424]	@ (8005b0c <HAL_DMA_Abort+0x234>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d022      	beq.n	80059ae <HAL_DMA_Abort+0xd6>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a68      	ldr	r2, [pc, #416]	@ (8005b10 <HAL_DMA_Abort+0x238>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d01d      	beq.n	80059ae <HAL_DMA_Abort+0xd6>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a67      	ldr	r2, [pc, #412]	@ (8005b14 <HAL_DMA_Abort+0x23c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d018      	beq.n	80059ae <HAL_DMA_Abort+0xd6>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a65      	ldr	r2, [pc, #404]	@ (8005b18 <HAL_DMA_Abort+0x240>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d013      	beq.n	80059ae <HAL_DMA_Abort+0xd6>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a64      	ldr	r2, [pc, #400]	@ (8005b1c <HAL_DMA_Abort+0x244>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00e      	beq.n	80059ae <HAL_DMA_Abort+0xd6>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a62      	ldr	r2, [pc, #392]	@ (8005b20 <HAL_DMA_Abort+0x248>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d009      	beq.n	80059ae <HAL_DMA_Abort+0xd6>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a61      	ldr	r2, [pc, #388]	@ (8005b24 <HAL_DMA_Abort+0x24c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d004      	beq.n	80059ae <HAL_DMA_Abort+0xd6>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a5f      	ldr	r2, [pc, #380]	@ (8005b28 <HAL_DMA_Abort+0x250>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d101      	bne.n	80059b2 <HAL_DMA_Abort+0xda>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <HAL_DMA_Abort+0xdc>
 80059b2:	2300      	movs	r3, #0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d013      	beq.n	80059e0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 021e 	bic.w	r2, r2, #30
 80059c6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695a      	ldr	r2, [r3, #20]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059d6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	e00a      	b.n	80059f6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 020e 	bic.w	r2, r2, #14
 80059ee:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a3c      	ldr	r2, [pc, #240]	@ (8005aec <HAL_DMA_Abort+0x214>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d072      	beq.n	8005ae6 <HAL_DMA_Abort+0x20e>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a3a      	ldr	r2, [pc, #232]	@ (8005af0 <HAL_DMA_Abort+0x218>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d06d      	beq.n	8005ae6 <HAL_DMA_Abort+0x20e>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a39      	ldr	r2, [pc, #228]	@ (8005af4 <HAL_DMA_Abort+0x21c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d068      	beq.n	8005ae6 <HAL_DMA_Abort+0x20e>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a37      	ldr	r2, [pc, #220]	@ (8005af8 <HAL_DMA_Abort+0x220>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d063      	beq.n	8005ae6 <HAL_DMA_Abort+0x20e>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a36      	ldr	r2, [pc, #216]	@ (8005afc <HAL_DMA_Abort+0x224>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d05e      	beq.n	8005ae6 <HAL_DMA_Abort+0x20e>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a34      	ldr	r2, [pc, #208]	@ (8005b00 <HAL_DMA_Abort+0x228>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d059      	beq.n	8005ae6 <HAL_DMA_Abort+0x20e>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a33      	ldr	r2, [pc, #204]	@ (8005b04 <HAL_DMA_Abort+0x22c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d054      	beq.n	8005ae6 <HAL_DMA_Abort+0x20e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a31      	ldr	r2, [pc, #196]	@ (8005b08 <HAL_DMA_Abort+0x230>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d04f      	beq.n	8005ae6 <HAL_DMA_Abort+0x20e>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a30      	ldr	r2, [pc, #192]	@ (8005b0c <HAL_DMA_Abort+0x234>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d04a      	beq.n	8005ae6 <HAL_DMA_Abort+0x20e>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a2e      	ldr	r2, [pc, #184]	@ (8005b10 <HAL_DMA_Abort+0x238>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d045      	beq.n	8005ae6 <HAL_DMA_Abort+0x20e>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a2d      	ldr	r2, [pc, #180]	@ (8005b14 <HAL_DMA_Abort+0x23c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d040      	beq.n	8005ae6 <HAL_DMA_Abort+0x20e>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a2b      	ldr	r2, [pc, #172]	@ (8005b18 <HAL_DMA_Abort+0x240>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d03b      	beq.n	8005ae6 <HAL_DMA_Abort+0x20e>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a2a      	ldr	r2, [pc, #168]	@ (8005b1c <HAL_DMA_Abort+0x244>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d036      	beq.n	8005ae6 <HAL_DMA_Abort+0x20e>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a28      	ldr	r2, [pc, #160]	@ (8005b20 <HAL_DMA_Abort+0x248>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d031      	beq.n	8005ae6 <HAL_DMA_Abort+0x20e>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a27      	ldr	r2, [pc, #156]	@ (8005b24 <HAL_DMA_Abort+0x24c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d02c      	beq.n	8005ae6 <HAL_DMA_Abort+0x20e>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a25      	ldr	r2, [pc, #148]	@ (8005b28 <HAL_DMA_Abort+0x250>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d027      	beq.n	8005ae6 <HAL_DMA_Abort+0x20e>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a24      	ldr	r2, [pc, #144]	@ (8005b2c <HAL_DMA_Abort+0x254>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d022      	beq.n	8005ae6 <HAL_DMA_Abort+0x20e>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a22      	ldr	r2, [pc, #136]	@ (8005b30 <HAL_DMA_Abort+0x258>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d01d      	beq.n	8005ae6 <HAL_DMA_Abort+0x20e>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a21      	ldr	r2, [pc, #132]	@ (8005b34 <HAL_DMA_Abort+0x25c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d018      	beq.n	8005ae6 <HAL_DMA_Abort+0x20e>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a1f      	ldr	r2, [pc, #124]	@ (8005b38 <HAL_DMA_Abort+0x260>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d013      	beq.n	8005ae6 <HAL_DMA_Abort+0x20e>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8005b3c <HAL_DMA_Abort+0x264>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00e      	beq.n	8005ae6 <HAL_DMA_Abort+0x20e>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a1c      	ldr	r2, [pc, #112]	@ (8005b40 <HAL_DMA_Abort+0x268>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d009      	beq.n	8005ae6 <HAL_DMA_Abort+0x20e>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8005b44 <HAL_DMA_Abort+0x26c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d004      	beq.n	8005ae6 <HAL_DMA_Abort+0x20e>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a19      	ldr	r2, [pc, #100]	@ (8005b48 <HAL_DMA_Abort+0x270>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d132      	bne.n	8005b4c <HAL_DMA_Abort+0x274>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e031      	b.n	8005b4e <HAL_DMA_Abort+0x276>
 8005aea:	bf00      	nop
 8005aec:	40020010 	.word	0x40020010
 8005af0:	40020028 	.word	0x40020028
 8005af4:	40020040 	.word	0x40020040
 8005af8:	40020058 	.word	0x40020058
 8005afc:	40020070 	.word	0x40020070
 8005b00:	40020088 	.word	0x40020088
 8005b04:	400200a0 	.word	0x400200a0
 8005b08:	400200b8 	.word	0x400200b8
 8005b0c:	40020410 	.word	0x40020410
 8005b10:	40020428 	.word	0x40020428
 8005b14:	40020440 	.word	0x40020440
 8005b18:	40020458 	.word	0x40020458
 8005b1c:	40020470 	.word	0x40020470
 8005b20:	40020488 	.word	0x40020488
 8005b24:	400204a0 	.word	0x400204a0
 8005b28:	400204b8 	.word	0x400204b8
 8005b2c:	58025408 	.word	0x58025408
 8005b30:	5802541c 	.word	0x5802541c
 8005b34:	58025430 	.word	0x58025430
 8005b38:	58025444 	.word	0x58025444
 8005b3c:	58025458 	.word	0x58025458
 8005b40:	5802546c 	.word	0x5802546c
 8005b44:	58025480 	.word	0x58025480
 8005b48:	58025494 	.word	0x58025494
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d007      	beq.n	8005b62 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b60:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a6d      	ldr	r2, [pc, #436]	@ (8005d1c <HAL_DMA_Abort+0x444>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d04a      	beq.n	8005c02 <HAL_DMA_Abort+0x32a>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a6b      	ldr	r2, [pc, #428]	@ (8005d20 <HAL_DMA_Abort+0x448>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d045      	beq.n	8005c02 <HAL_DMA_Abort+0x32a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a6a      	ldr	r2, [pc, #424]	@ (8005d24 <HAL_DMA_Abort+0x44c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d040      	beq.n	8005c02 <HAL_DMA_Abort+0x32a>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a68      	ldr	r2, [pc, #416]	@ (8005d28 <HAL_DMA_Abort+0x450>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d03b      	beq.n	8005c02 <HAL_DMA_Abort+0x32a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a67      	ldr	r2, [pc, #412]	@ (8005d2c <HAL_DMA_Abort+0x454>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d036      	beq.n	8005c02 <HAL_DMA_Abort+0x32a>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a65      	ldr	r2, [pc, #404]	@ (8005d30 <HAL_DMA_Abort+0x458>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d031      	beq.n	8005c02 <HAL_DMA_Abort+0x32a>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a64      	ldr	r2, [pc, #400]	@ (8005d34 <HAL_DMA_Abort+0x45c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d02c      	beq.n	8005c02 <HAL_DMA_Abort+0x32a>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a62      	ldr	r2, [pc, #392]	@ (8005d38 <HAL_DMA_Abort+0x460>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d027      	beq.n	8005c02 <HAL_DMA_Abort+0x32a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a61      	ldr	r2, [pc, #388]	@ (8005d3c <HAL_DMA_Abort+0x464>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d022      	beq.n	8005c02 <HAL_DMA_Abort+0x32a>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a5f      	ldr	r2, [pc, #380]	@ (8005d40 <HAL_DMA_Abort+0x468>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d01d      	beq.n	8005c02 <HAL_DMA_Abort+0x32a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a5e      	ldr	r2, [pc, #376]	@ (8005d44 <HAL_DMA_Abort+0x46c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d018      	beq.n	8005c02 <HAL_DMA_Abort+0x32a>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a5c      	ldr	r2, [pc, #368]	@ (8005d48 <HAL_DMA_Abort+0x470>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d013      	beq.n	8005c02 <HAL_DMA_Abort+0x32a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a5b      	ldr	r2, [pc, #364]	@ (8005d4c <HAL_DMA_Abort+0x474>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00e      	beq.n	8005c02 <HAL_DMA_Abort+0x32a>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a59      	ldr	r2, [pc, #356]	@ (8005d50 <HAL_DMA_Abort+0x478>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d009      	beq.n	8005c02 <HAL_DMA_Abort+0x32a>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a58      	ldr	r2, [pc, #352]	@ (8005d54 <HAL_DMA_Abort+0x47c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d004      	beq.n	8005c02 <HAL_DMA_Abort+0x32a>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a56      	ldr	r2, [pc, #344]	@ (8005d58 <HAL_DMA_Abort+0x480>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d108      	bne.n	8005c14 <HAL_DMA_Abort+0x33c>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 0201 	bic.w	r2, r2, #1
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	e007      	b.n	8005c24 <HAL_DMA_Abort+0x34c>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 0201 	bic.w	r2, r2, #1
 8005c22:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c24:	e013      	b.n	8005c4e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c26:	f7fc fe97 	bl	8002958 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b05      	cmp	r3, #5
 8005c32:	d90c      	bls.n	8005c4e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2220      	movs	r2, #32
 8005c38:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2203      	movs	r2, #3
 8005c3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e12d      	b.n	8005eaa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e5      	bne.n	8005c26 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a2f      	ldr	r2, [pc, #188]	@ (8005d1c <HAL_DMA_Abort+0x444>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d04a      	beq.n	8005cfa <HAL_DMA_Abort+0x422>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a2d      	ldr	r2, [pc, #180]	@ (8005d20 <HAL_DMA_Abort+0x448>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d045      	beq.n	8005cfa <HAL_DMA_Abort+0x422>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a2c      	ldr	r2, [pc, #176]	@ (8005d24 <HAL_DMA_Abort+0x44c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d040      	beq.n	8005cfa <HAL_DMA_Abort+0x422>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a2a      	ldr	r2, [pc, #168]	@ (8005d28 <HAL_DMA_Abort+0x450>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d03b      	beq.n	8005cfa <HAL_DMA_Abort+0x422>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a29      	ldr	r2, [pc, #164]	@ (8005d2c <HAL_DMA_Abort+0x454>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d036      	beq.n	8005cfa <HAL_DMA_Abort+0x422>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a27      	ldr	r2, [pc, #156]	@ (8005d30 <HAL_DMA_Abort+0x458>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d031      	beq.n	8005cfa <HAL_DMA_Abort+0x422>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a26      	ldr	r2, [pc, #152]	@ (8005d34 <HAL_DMA_Abort+0x45c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d02c      	beq.n	8005cfa <HAL_DMA_Abort+0x422>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a24      	ldr	r2, [pc, #144]	@ (8005d38 <HAL_DMA_Abort+0x460>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d027      	beq.n	8005cfa <HAL_DMA_Abort+0x422>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a23      	ldr	r2, [pc, #140]	@ (8005d3c <HAL_DMA_Abort+0x464>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d022      	beq.n	8005cfa <HAL_DMA_Abort+0x422>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a21      	ldr	r2, [pc, #132]	@ (8005d40 <HAL_DMA_Abort+0x468>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d01d      	beq.n	8005cfa <HAL_DMA_Abort+0x422>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a20      	ldr	r2, [pc, #128]	@ (8005d44 <HAL_DMA_Abort+0x46c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d018      	beq.n	8005cfa <HAL_DMA_Abort+0x422>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1e      	ldr	r2, [pc, #120]	@ (8005d48 <HAL_DMA_Abort+0x470>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d013      	beq.n	8005cfa <HAL_DMA_Abort+0x422>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8005d4c <HAL_DMA_Abort+0x474>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d00e      	beq.n	8005cfa <HAL_DMA_Abort+0x422>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8005d50 <HAL_DMA_Abort+0x478>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d009      	beq.n	8005cfa <HAL_DMA_Abort+0x422>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a1a      	ldr	r2, [pc, #104]	@ (8005d54 <HAL_DMA_Abort+0x47c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d004      	beq.n	8005cfa <HAL_DMA_Abort+0x422>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a18      	ldr	r2, [pc, #96]	@ (8005d58 <HAL_DMA_Abort+0x480>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d101      	bne.n	8005cfe <HAL_DMA_Abort+0x426>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e000      	b.n	8005d00 <HAL_DMA_Abort+0x428>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d02b      	beq.n	8005d5c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d08:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d0e:	f003 031f 	and.w	r3, r3, #31
 8005d12:	223f      	movs	r2, #63	@ 0x3f
 8005d14:	409a      	lsls	r2, r3
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	609a      	str	r2, [r3, #8]
 8005d1a:	e02a      	b.n	8005d72 <HAL_DMA_Abort+0x49a>
 8005d1c:	40020010 	.word	0x40020010
 8005d20:	40020028 	.word	0x40020028
 8005d24:	40020040 	.word	0x40020040
 8005d28:	40020058 	.word	0x40020058
 8005d2c:	40020070 	.word	0x40020070
 8005d30:	40020088 	.word	0x40020088
 8005d34:	400200a0 	.word	0x400200a0
 8005d38:	400200b8 	.word	0x400200b8
 8005d3c:	40020410 	.word	0x40020410
 8005d40:	40020428 	.word	0x40020428
 8005d44:	40020440 	.word	0x40020440
 8005d48:	40020458 	.word	0x40020458
 8005d4c:	40020470 	.word	0x40020470
 8005d50:	40020488 	.word	0x40020488
 8005d54:	400204a0 	.word	0x400204a0
 8005d58:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d60:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d66:	f003 031f 	and.w	r3, r3, #31
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	409a      	lsls	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a4f      	ldr	r2, [pc, #316]	@ (8005eb4 <HAL_DMA_Abort+0x5dc>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d072      	beq.n	8005e62 <HAL_DMA_Abort+0x58a>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a4d      	ldr	r2, [pc, #308]	@ (8005eb8 <HAL_DMA_Abort+0x5e0>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d06d      	beq.n	8005e62 <HAL_DMA_Abort+0x58a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a4c      	ldr	r2, [pc, #304]	@ (8005ebc <HAL_DMA_Abort+0x5e4>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d068      	beq.n	8005e62 <HAL_DMA_Abort+0x58a>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a4a      	ldr	r2, [pc, #296]	@ (8005ec0 <HAL_DMA_Abort+0x5e8>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d063      	beq.n	8005e62 <HAL_DMA_Abort+0x58a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a49      	ldr	r2, [pc, #292]	@ (8005ec4 <HAL_DMA_Abort+0x5ec>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d05e      	beq.n	8005e62 <HAL_DMA_Abort+0x58a>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a47      	ldr	r2, [pc, #284]	@ (8005ec8 <HAL_DMA_Abort+0x5f0>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d059      	beq.n	8005e62 <HAL_DMA_Abort+0x58a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a46      	ldr	r2, [pc, #280]	@ (8005ecc <HAL_DMA_Abort+0x5f4>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d054      	beq.n	8005e62 <HAL_DMA_Abort+0x58a>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a44      	ldr	r2, [pc, #272]	@ (8005ed0 <HAL_DMA_Abort+0x5f8>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d04f      	beq.n	8005e62 <HAL_DMA_Abort+0x58a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a43      	ldr	r2, [pc, #268]	@ (8005ed4 <HAL_DMA_Abort+0x5fc>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d04a      	beq.n	8005e62 <HAL_DMA_Abort+0x58a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a41      	ldr	r2, [pc, #260]	@ (8005ed8 <HAL_DMA_Abort+0x600>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d045      	beq.n	8005e62 <HAL_DMA_Abort+0x58a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a40      	ldr	r2, [pc, #256]	@ (8005edc <HAL_DMA_Abort+0x604>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d040      	beq.n	8005e62 <HAL_DMA_Abort+0x58a>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a3e      	ldr	r2, [pc, #248]	@ (8005ee0 <HAL_DMA_Abort+0x608>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d03b      	beq.n	8005e62 <HAL_DMA_Abort+0x58a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a3d      	ldr	r2, [pc, #244]	@ (8005ee4 <HAL_DMA_Abort+0x60c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d036      	beq.n	8005e62 <HAL_DMA_Abort+0x58a>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a3b      	ldr	r2, [pc, #236]	@ (8005ee8 <HAL_DMA_Abort+0x610>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d031      	beq.n	8005e62 <HAL_DMA_Abort+0x58a>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a3a      	ldr	r2, [pc, #232]	@ (8005eec <HAL_DMA_Abort+0x614>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d02c      	beq.n	8005e62 <HAL_DMA_Abort+0x58a>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a38      	ldr	r2, [pc, #224]	@ (8005ef0 <HAL_DMA_Abort+0x618>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d027      	beq.n	8005e62 <HAL_DMA_Abort+0x58a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a37      	ldr	r2, [pc, #220]	@ (8005ef4 <HAL_DMA_Abort+0x61c>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d022      	beq.n	8005e62 <HAL_DMA_Abort+0x58a>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a35      	ldr	r2, [pc, #212]	@ (8005ef8 <HAL_DMA_Abort+0x620>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d01d      	beq.n	8005e62 <HAL_DMA_Abort+0x58a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a34      	ldr	r2, [pc, #208]	@ (8005efc <HAL_DMA_Abort+0x624>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d018      	beq.n	8005e62 <HAL_DMA_Abort+0x58a>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a32      	ldr	r2, [pc, #200]	@ (8005f00 <HAL_DMA_Abort+0x628>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d013      	beq.n	8005e62 <HAL_DMA_Abort+0x58a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a31      	ldr	r2, [pc, #196]	@ (8005f04 <HAL_DMA_Abort+0x62c>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d00e      	beq.n	8005e62 <HAL_DMA_Abort+0x58a>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a2f      	ldr	r2, [pc, #188]	@ (8005f08 <HAL_DMA_Abort+0x630>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d009      	beq.n	8005e62 <HAL_DMA_Abort+0x58a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a2e      	ldr	r2, [pc, #184]	@ (8005f0c <HAL_DMA_Abort+0x634>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d004      	beq.n	8005e62 <HAL_DMA_Abort+0x58a>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a2c      	ldr	r2, [pc, #176]	@ (8005f10 <HAL_DMA_Abort+0x638>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d101      	bne.n	8005e66 <HAL_DMA_Abort+0x58e>
 8005e62:	2301      	movs	r3, #1
 8005e64:	e000      	b.n	8005e68 <HAL_DMA_Abort+0x590>
 8005e66:	2300      	movs	r3, #0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d015      	beq.n	8005e98 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005e74:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00c      	beq.n	8005e98 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e8c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e96:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	40020010 	.word	0x40020010
 8005eb8:	40020028 	.word	0x40020028
 8005ebc:	40020040 	.word	0x40020040
 8005ec0:	40020058 	.word	0x40020058
 8005ec4:	40020070 	.word	0x40020070
 8005ec8:	40020088 	.word	0x40020088
 8005ecc:	400200a0 	.word	0x400200a0
 8005ed0:	400200b8 	.word	0x400200b8
 8005ed4:	40020410 	.word	0x40020410
 8005ed8:	40020428 	.word	0x40020428
 8005edc:	40020440 	.word	0x40020440
 8005ee0:	40020458 	.word	0x40020458
 8005ee4:	40020470 	.word	0x40020470
 8005ee8:	40020488 	.word	0x40020488
 8005eec:	400204a0 	.word	0x400204a0
 8005ef0:	400204b8 	.word	0x400204b8
 8005ef4:	58025408 	.word	0x58025408
 8005ef8:	5802541c 	.word	0x5802541c
 8005efc:	58025430 	.word	0x58025430
 8005f00:	58025444 	.word	0x58025444
 8005f04:	58025458 	.word	0x58025458
 8005f08:	5802546c 	.word	0x5802546c
 8005f0c:	58025480 	.word	0x58025480
 8005f10:	58025494 	.word	0x58025494

08005f14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e237      	b.n	8006396 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d004      	beq.n	8005f3c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2280      	movs	r2, #128	@ 0x80
 8005f36:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e22c      	b.n	8006396 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a5c      	ldr	r2, [pc, #368]	@ (80060b4 <HAL_DMA_Abort_IT+0x1a0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d04a      	beq.n	8005fdc <HAL_DMA_Abort_IT+0xc8>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a5b      	ldr	r2, [pc, #364]	@ (80060b8 <HAL_DMA_Abort_IT+0x1a4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d045      	beq.n	8005fdc <HAL_DMA_Abort_IT+0xc8>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a59      	ldr	r2, [pc, #356]	@ (80060bc <HAL_DMA_Abort_IT+0x1a8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d040      	beq.n	8005fdc <HAL_DMA_Abort_IT+0xc8>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a58      	ldr	r2, [pc, #352]	@ (80060c0 <HAL_DMA_Abort_IT+0x1ac>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d03b      	beq.n	8005fdc <HAL_DMA_Abort_IT+0xc8>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a56      	ldr	r2, [pc, #344]	@ (80060c4 <HAL_DMA_Abort_IT+0x1b0>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d036      	beq.n	8005fdc <HAL_DMA_Abort_IT+0xc8>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a55      	ldr	r2, [pc, #340]	@ (80060c8 <HAL_DMA_Abort_IT+0x1b4>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d031      	beq.n	8005fdc <HAL_DMA_Abort_IT+0xc8>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a53      	ldr	r2, [pc, #332]	@ (80060cc <HAL_DMA_Abort_IT+0x1b8>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d02c      	beq.n	8005fdc <HAL_DMA_Abort_IT+0xc8>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a52      	ldr	r2, [pc, #328]	@ (80060d0 <HAL_DMA_Abort_IT+0x1bc>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d027      	beq.n	8005fdc <HAL_DMA_Abort_IT+0xc8>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a50      	ldr	r2, [pc, #320]	@ (80060d4 <HAL_DMA_Abort_IT+0x1c0>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d022      	beq.n	8005fdc <HAL_DMA_Abort_IT+0xc8>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a4f      	ldr	r2, [pc, #316]	@ (80060d8 <HAL_DMA_Abort_IT+0x1c4>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d01d      	beq.n	8005fdc <HAL_DMA_Abort_IT+0xc8>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a4d      	ldr	r2, [pc, #308]	@ (80060dc <HAL_DMA_Abort_IT+0x1c8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d018      	beq.n	8005fdc <HAL_DMA_Abort_IT+0xc8>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a4c      	ldr	r2, [pc, #304]	@ (80060e0 <HAL_DMA_Abort_IT+0x1cc>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d013      	beq.n	8005fdc <HAL_DMA_Abort_IT+0xc8>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a4a      	ldr	r2, [pc, #296]	@ (80060e4 <HAL_DMA_Abort_IT+0x1d0>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00e      	beq.n	8005fdc <HAL_DMA_Abort_IT+0xc8>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a49      	ldr	r2, [pc, #292]	@ (80060e8 <HAL_DMA_Abort_IT+0x1d4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d009      	beq.n	8005fdc <HAL_DMA_Abort_IT+0xc8>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a47      	ldr	r2, [pc, #284]	@ (80060ec <HAL_DMA_Abort_IT+0x1d8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d004      	beq.n	8005fdc <HAL_DMA_Abort_IT+0xc8>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a46      	ldr	r2, [pc, #280]	@ (80060f0 <HAL_DMA_Abort_IT+0x1dc>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d101      	bne.n	8005fe0 <HAL_DMA_Abort_IT+0xcc>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e000      	b.n	8005fe2 <HAL_DMA_Abort_IT+0xce>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 8086 	beq.w	80060f4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2204      	movs	r2, #4
 8005fec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a2f      	ldr	r2, [pc, #188]	@ (80060b4 <HAL_DMA_Abort_IT+0x1a0>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d04a      	beq.n	8006090 <HAL_DMA_Abort_IT+0x17c>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a2e      	ldr	r2, [pc, #184]	@ (80060b8 <HAL_DMA_Abort_IT+0x1a4>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d045      	beq.n	8006090 <HAL_DMA_Abort_IT+0x17c>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a2c      	ldr	r2, [pc, #176]	@ (80060bc <HAL_DMA_Abort_IT+0x1a8>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d040      	beq.n	8006090 <HAL_DMA_Abort_IT+0x17c>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a2b      	ldr	r2, [pc, #172]	@ (80060c0 <HAL_DMA_Abort_IT+0x1ac>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d03b      	beq.n	8006090 <HAL_DMA_Abort_IT+0x17c>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a29      	ldr	r2, [pc, #164]	@ (80060c4 <HAL_DMA_Abort_IT+0x1b0>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d036      	beq.n	8006090 <HAL_DMA_Abort_IT+0x17c>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a28      	ldr	r2, [pc, #160]	@ (80060c8 <HAL_DMA_Abort_IT+0x1b4>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d031      	beq.n	8006090 <HAL_DMA_Abort_IT+0x17c>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a26      	ldr	r2, [pc, #152]	@ (80060cc <HAL_DMA_Abort_IT+0x1b8>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d02c      	beq.n	8006090 <HAL_DMA_Abort_IT+0x17c>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a25      	ldr	r2, [pc, #148]	@ (80060d0 <HAL_DMA_Abort_IT+0x1bc>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d027      	beq.n	8006090 <HAL_DMA_Abort_IT+0x17c>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a23      	ldr	r2, [pc, #140]	@ (80060d4 <HAL_DMA_Abort_IT+0x1c0>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d022      	beq.n	8006090 <HAL_DMA_Abort_IT+0x17c>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a22      	ldr	r2, [pc, #136]	@ (80060d8 <HAL_DMA_Abort_IT+0x1c4>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d01d      	beq.n	8006090 <HAL_DMA_Abort_IT+0x17c>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a20      	ldr	r2, [pc, #128]	@ (80060dc <HAL_DMA_Abort_IT+0x1c8>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d018      	beq.n	8006090 <HAL_DMA_Abort_IT+0x17c>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a1f      	ldr	r2, [pc, #124]	@ (80060e0 <HAL_DMA_Abort_IT+0x1cc>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d013      	beq.n	8006090 <HAL_DMA_Abort_IT+0x17c>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a1d      	ldr	r2, [pc, #116]	@ (80060e4 <HAL_DMA_Abort_IT+0x1d0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d00e      	beq.n	8006090 <HAL_DMA_Abort_IT+0x17c>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a1c      	ldr	r2, [pc, #112]	@ (80060e8 <HAL_DMA_Abort_IT+0x1d4>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d009      	beq.n	8006090 <HAL_DMA_Abort_IT+0x17c>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a1a      	ldr	r2, [pc, #104]	@ (80060ec <HAL_DMA_Abort_IT+0x1d8>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d004      	beq.n	8006090 <HAL_DMA_Abort_IT+0x17c>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a19      	ldr	r2, [pc, #100]	@ (80060f0 <HAL_DMA_Abort_IT+0x1dc>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d108      	bne.n	80060a2 <HAL_DMA_Abort_IT+0x18e>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0201 	bic.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	e178      	b.n	8006394 <HAL_DMA_Abort_IT+0x480>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0201 	bic.w	r2, r2, #1
 80060b0:	601a      	str	r2, [r3, #0]
 80060b2:	e16f      	b.n	8006394 <HAL_DMA_Abort_IT+0x480>
 80060b4:	40020010 	.word	0x40020010
 80060b8:	40020028 	.word	0x40020028
 80060bc:	40020040 	.word	0x40020040
 80060c0:	40020058 	.word	0x40020058
 80060c4:	40020070 	.word	0x40020070
 80060c8:	40020088 	.word	0x40020088
 80060cc:	400200a0 	.word	0x400200a0
 80060d0:	400200b8 	.word	0x400200b8
 80060d4:	40020410 	.word	0x40020410
 80060d8:	40020428 	.word	0x40020428
 80060dc:	40020440 	.word	0x40020440
 80060e0:	40020458 	.word	0x40020458
 80060e4:	40020470 	.word	0x40020470
 80060e8:	40020488 	.word	0x40020488
 80060ec:	400204a0 	.word	0x400204a0
 80060f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 020e 	bic.w	r2, r2, #14
 8006102:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a6c      	ldr	r2, [pc, #432]	@ (80062bc <HAL_DMA_Abort_IT+0x3a8>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d04a      	beq.n	80061a4 <HAL_DMA_Abort_IT+0x290>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a6b      	ldr	r2, [pc, #428]	@ (80062c0 <HAL_DMA_Abort_IT+0x3ac>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d045      	beq.n	80061a4 <HAL_DMA_Abort_IT+0x290>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a69      	ldr	r2, [pc, #420]	@ (80062c4 <HAL_DMA_Abort_IT+0x3b0>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d040      	beq.n	80061a4 <HAL_DMA_Abort_IT+0x290>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a68      	ldr	r2, [pc, #416]	@ (80062c8 <HAL_DMA_Abort_IT+0x3b4>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d03b      	beq.n	80061a4 <HAL_DMA_Abort_IT+0x290>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a66      	ldr	r2, [pc, #408]	@ (80062cc <HAL_DMA_Abort_IT+0x3b8>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d036      	beq.n	80061a4 <HAL_DMA_Abort_IT+0x290>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a65      	ldr	r2, [pc, #404]	@ (80062d0 <HAL_DMA_Abort_IT+0x3bc>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d031      	beq.n	80061a4 <HAL_DMA_Abort_IT+0x290>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a63      	ldr	r2, [pc, #396]	@ (80062d4 <HAL_DMA_Abort_IT+0x3c0>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d02c      	beq.n	80061a4 <HAL_DMA_Abort_IT+0x290>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a62      	ldr	r2, [pc, #392]	@ (80062d8 <HAL_DMA_Abort_IT+0x3c4>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d027      	beq.n	80061a4 <HAL_DMA_Abort_IT+0x290>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a60      	ldr	r2, [pc, #384]	@ (80062dc <HAL_DMA_Abort_IT+0x3c8>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d022      	beq.n	80061a4 <HAL_DMA_Abort_IT+0x290>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a5f      	ldr	r2, [pc, #380]	@ (80062e0 <HAL_DMA_Abort_IT+0x3cc>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d01d      	beq.n	80061a4 <HAL_DMA_Abort_IT+0x290>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a5d      	ldr	r2, [pc, #372]	@ (80062e4 <HAL_DMA_Abort_IT+0x3d0>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d018      	beq.n	80061a4 <HAL_DMA_Abort_IT+0x290>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a5c      	ldr	r2, [pc, #368]	@ (80062e8 <HAL_DMA_Abort_IT+0x3d4>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d013      	beq.n	80061a4 <HAL_DMA_Abort_IT+0x290>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a5a      	ldr	r2, [pc, #360]	@ (80062ec <HAL_DMA_Abort_IT+0x3d8>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d00e      	beq.n	80061a4 <HAL_DMA_Abort_IT+0x290>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a59      	ldr	r2, [pc, #356]	@ (80062f0 <HAL_DMA_Abort_IT+0x3dc>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d009      	beq.n	80061a4 <HAL_DMA_Abort_IT+0x290>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a57      	ldr	r2, [pc, #348]	@ (80062f4 <HAL_DMA_Abort_IT+0x3e0>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d004      	beq.n	80061a4 <HAL_DMA_Abort_IT+0x290>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a56      	ldr	r2, [pc, #344]	@ (80062f8 <HAL_DMA_Abort_IT+0x3e4>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d108      	bne.n	80061b6 <HAL_DMA_Abort_IT+0x2a2>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0201 	bic.w	r2, r2, #1
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	e007      	b.n	80061c6 <HAL_DMA_Abort_IT+0x2b2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 0201 	bic.w	r2, r2, #1
 80061c4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a3c      	ldr	r2, [pc, #240]	@ (80062bc <HAL_DMA_Abort_IT+0x3a8>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d072      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x3a2>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a3a      	ldr	r2, [pc, #232]	@ (80062c0 <HAL_DMA_Abort_IT+0x3ac>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d06d      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x3a2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a39      	ldr	r2, [pc, #228]	@ (80062c4 <HAL_DMA_Abort_IT+0x3b0>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d068      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x3a2>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a37      	ldr	r2, [pc, #220]	@ (80062c8 <HAL_DMA_Abort_IT+0x3b4>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d063      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x3a2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a36      	ldr	r2, [pc, #216]	@ (80062cc <HAL_DMA_Abort_IT+0x3b8>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d05e      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x3a2>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a34      	ldr	r2, [pc, #208]	@ (80062d0 <HAL_DMA_Abort_IT+0x3bc>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d059      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x3a2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a33      	ldr	r2, [pc, #204]	@ (80062d4 <HAL_DMA_Abort_IT+0x3c0>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d054      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x3a2>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a31      	ldr	r2, [pc, #196]	@ (80062d8 <HAL_DMA_Abort_IT+0x3c4>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d04f      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x3a2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a30      	ldr	r2, [pc, #192]	@ (80062dc <HAL_DMA_Abort_IT+0x3c8>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d04a      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x3a2>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a2e      	ldr	r2, [pc, #184]	@ (80062e0 <HAL_DMA_Abort_IT+0x3cc>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d045      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x3a2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a2d      	ldr	r2, [pc, #180]	@ (80062e4 <HAL_DMA_Abort_IT+0x3d0>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d040      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x3a2>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a2b      	ldr	r2, [pc, #172]	@ (80062e8 <HAL_DMA_Abort_IT+0x3d4>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d03b      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x3a2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a2a      	ldr	r2, [pc, #168]	@ (80062ec <HAL_DMA_Abort_IT+0x3d8>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d036      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x3a2>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a28      	ldr	r2, [pc, #160]	@ (80062f0 <HAL_DMA_Abort_IT+0x3dc>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d031      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x3a2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a27      	ldr	r2, [pc, #156]	@ (80062f4 <HAL_DMA_Abort_IT+0x3e0>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d02c      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x3a2>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a25      	ldr	r2, [pc, #148]	@ (80062f8 <HAL_DMA_Abort_IT+0x3e4>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d027      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x3a2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a24      	ldr	r2, [pc, #144]	@ (80062fc <HAL_DMA_Abort_IT+0x3e8>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d022      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x3a2>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a22      	ldr	r2, [pc, #136]	@ (8006300 <HAL_DMA_Abort_IT+0x3ec>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d01d      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x3a2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a21      	ldr	r2, [pc, #132]	@ (8006304 <HAL_DMA_Abort_IT+0x3f0>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d018      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x3a2>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a1f      	ldr	r2, [pc, #124]	@ (8006308 <HAL_DMA_Abort_IT+0x3f4>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d013      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x3a2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a1e      	ldr	r2, [pc, #120]	@ (800630c <HAL_DMA_Abort_IT+0x3f8>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d00e      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x3a2>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a1c      	ldr	r2, [pc, #112]	@ (8006310 <HAL_DMA_Abort_IT+0x3fc>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d009      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x3a2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a1b      	ldr	r2, [pc, #108]	@ (8006314 <HAL_DMA_Abort_IT+0x400>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d004      	beq.n	80062b6 <HAL_DMA_Abort_IT+0x3a2>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a19      	ldr	r2, [pc, #100]	@ (8006318 <HAL_DMA_Abort_IT+0x404>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d132      	bne.n	800631c <HAL_DMA_Abort_IT+0x408>
 80062b6:	2301      	movs	r3, #1
 80062b8:	e031      	b.n	800631e <HAL_DMA_Abort_IT+0x40a>
 80062ba:	bf00      	nop
 80062bc:	40020010 	.word	0x40020010
 80062c0:	40020028 	.word	0x40020028
 80062c4:	40020040 	.word	0x40020040
 80062c8:	40020058 	.word	0x40020058
 80062cc:	40020070 	.word	0x40020070
 80062d0:	40020088 	.word	0x40020088
 80062d4:	400200a0 	.word	0x400200a0
 80062d8:	400200b8 	.word	0x400200b8
 80062dc:	40020410 	.word	0x40020410
 80062e0:	40020428 	.word	0x40020428
 80062e4:	40020440 	.word	0x40020440
 80062e8:	40020458 	.word	0x40020458
 80062ec:	40020470 	.word	0x40020470
 80062f0:	40020488 	.word	0x40020488
 80062f4:	400204a0 	.word	0x400204a0
 80062f8:	400204b8 	.word	0x400204b8
 80062fc:	58025408 	.word	0x58025408
 8006300:	5802541c 	.word	0x5802541c
 8006304:	58025430 	.word	0x58025430
 8006308:	58025444 	.word	0x58025444
 800630c:	58025458 	.word	0x58025458
 8006310:	5802546c 	.word	0x5802546c
 8006314:	58025480 	.word	0x58025480
 8006318:	58025494 	.word	0x58025494
 800631c:	2300      	movs	r3, #0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d028      	beq.n	8006374 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800632c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006330:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006336:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800633c:	f003 031f 	and.w	r3, r3, #31
 8006340:	2201      	movs	r2, #1
 8006342:	409a      	lsls	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006350:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00c      	beq.n	8006374 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006364:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006368:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006372:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006388:	2b00      	cmp	r3, #0
 800638a:	d003      	beq.n	8006394 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop

080063a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08a      	sub	sp, #40	@ 0x28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80063a8:	2300      	movs	r3, #0
 80063aa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80063ac:	4b67      	ldr	r3, [pc, #412]	@ (800654c <HAL_DMA_IRQHandler+0x1ac>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a67      	ldr	r2, [pc, #412]	@ (8006550 <HAL_DMA_IRQHandler+0x1b0>)
 80063b2:	fba2 2303 	umull	r2, r3, r2, r3
 80063b6:	0a9b      	lsrs	r3, r3, #10
 80063b8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063be:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a5f      	ldr	r2, [pc, #380]	@ (8006554 <HAL_DMA_IRQHandler+0x1b4>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d04a      	beq.n	8006472 <HAL_DMA_IRQHandler+0xd2>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a5d      	ldr	r2, [pc, #372]	@ (8006558 <HAL_DMA_IRQHandler+0x1b8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d045      	beq.n	8006472 <HAL_DMA_IRQHandler+0xd2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a5c      	ldr	r2, [pc, #368]	@ (800655c <HAL_DMA_IRQHandler+0x1bc>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d040      	beq.n	8006472 <HAL_DMA_IRQHandler+0xd2>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a5a      	ldr	r2, [pc, #360]	@ (8006560 <HAL_DMA_IRQHandler+0x1c0>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d03b      	beq.n	8006472 <HAL_DMA_IRQHandler+0xd2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a59      	ldr	r2, [pc, #356]	@ (8006564 <HAL_DMA_IRQHandler+0x1c4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d036      	beq.n	8006472 <HAL_DMA_IRQHandler+0xd2>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a57      	ldr	r2, [pc, #348]	@ (8006568 <HAL_DMA_IRQHandler+0x1c8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d031      	beq.n	8006472 <HAL_DMA_IRQHandler+0xd2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a56      	ldr	r2, [pc, #344]	@ (800656c <HAL_DMA_IRQHandler+0x1cc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d02c      	beq.n	8006472 <HAL_DMA_IRQHandler+0xd2>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a54      	ldr	r2, [pc, #336]	@ (8006570 <HAL_DMA_IRQHandler+0x1d0>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d027      	beq.n	8006472 <HAL_DMA_IRQHandler+0xd2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a53      	ldr	r2, [pc, #332]	@ (8006574 <HAL_DMA_IRQHandler+0x1d4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d022      	beq.n	8006472 <HAL_DMA_IRQHandler+0xd2>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a51      	ldr	r2, [pc, #324]	@ (8006578 <HAL_DMA_IRQHandler+0x1d8>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d01d      	beq.n	8006472 <HAL_DMA_IRQHandler+0xd2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a50      	ldr	r2, [pc, #320]	@ (800657c <HAL_DMA_IRQHandler+0x1dc>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d018      	beq.n	8006472 <HAL_DMA_IRQHandler+0xd2>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a4e      	ldr	r2, [pc, #312]	@ (8006580 <HAL_DMA_IRQHandler+0x1e0>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d013      	beq.n	8006472 <HAL_DMA_IRQHandler+0xd2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a4d      	ldr	r2, [pc, #308]	@ (8006584 <HAL_DMA_IRQHandler+0x1e4>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d00e      	beq.n	8006472 <HAL_DMA_IRQHandler+0xd2>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a4b      	ldr	r2, [pc, #300]	@ (8006588 <HAL_DMA_IRQHandler+0x1e8>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d009      	beq.n	8006472 <HAL_DMA_IRQHandler+0xd2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a4a      	ldr	r2, [pc, #296]	@ (800658c <HAL_DMA_IRQHandler+0x1ec>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d004      	beq.n	8006472 <HAL_DMA_IRQHandler+0xd2>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a48      	ldr	r2, [pc, #288]	@ (8006590 <HAL_DMA_IRQHandler+0x1f0>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d101      	bne.n	8006476 <HAL_DMA_IRQHandler+0xd6>
 8006472:	2301      	movs	r3, #1
 8006474:	e000      	b.n	8006478 <HAL_DMA_IRQHandler+0xd8>
 8006476:	2300      	movs	r3, #0
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 842b 	beq.w	8006cd4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006482:	f003 031f 	and.w	r3, r3, #31
 8006486:	2208      	movs	r2, #8
 8006488:	409a      	lsls	r2, r3
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	4013      	ands	r3, r2
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 80a2 	beq.w	80065d8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a2e      	ldr	r2, [pc, #184]	@ (8006554 <HAL_DMA_IRQHandler+0x1b4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d04a      	beq.n	8006534 <HAL_DMA_IRQHandler+0x194>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a2d      	ldr	r2, [pc, #180]	@ (8006558 <HAL_DMA_IRQHandler+0x1b8>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d045      	beq.n	8006534 <HAL_DMA_IRQHandler+0x194>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a2b      	ldr	r2, [pc, #172]	@ (800655c <HAL_DMA_IRQHandler+0x1bc>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d040      	beq.n	8006534 <HAL_DMA_IRQHandler+0x194>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a2a      	ldr	r2, [pc, #168]	@ (8006560 <HAL_DMA_IRQHandler+0x1c0>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d03b      	beq.n	8006534 <HAL_DMA_IRQHandler+0x194>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a28      	ldr	r2, [pc, #160]	@ (8006564 <HAL_DMA_IRQHandler+0x1c4>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d036      	beq.n	8006534 <HAL_DMA_IRQHandler+0x194>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a27      	ldr	r2, [pc, #156]	@ (8006568 <HAL_DMA_IRQHandler+0x1c8>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d031      	beq.n	8006534 <HAL_DMA_IRQHandler+0x194>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a25      	ldr	r2, [pc, #148]	@ (800656c <HAL_DMA_IRQHandler+0x1cc>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d02c      	beq.n	8006534 <HAL_DMA_IRQHandler+0x194>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a24      	ldr	r2, [pc, #144]	@ (8006570 <HAL_DMA_IRQHandler+0x1d0>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d027      	beq.n	8006534 <HAL_DMA_IRQHandler+0x194>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a22      	ldr	r2, [pc, #136]	@ (8006574 <HAL_DMA_IRQHandler+0x1d4>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d022      	beq.n	8006534 <HAL_DMA_IRQHandler+0x194>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a21      	ldr	r2, [pc, #132]	@ (8006578 <HAL_DMA_IRQHandler+0x1d8>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d01d      	beq.n	8006534 <HAL_DMA_IRQHandler+0x194>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a1f      	ldr	r2, [pc, #124]	@ (800657c <HAL_DMA_IRQHandler+0x1dc>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d018      	beq.n	8006534 <HAL_DMA_IRQHandler+0x194>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a1e      	ldr	r2, [pc, #120]	@ (8006580 <HAL_DMA_IRQHandler+0x1e0>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d013      	beq.n	8006534 <HAL_DMA_IRQHandler+0x194>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a1c      	ldr	r2, [pc, #112]	@ (8006584 <HAL_DMA_IRQHandler+0x1e4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00e      	beq.n	8006534 <HAL_DMA_IRQHandler+0x194>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a1b      	ldr	r2, [pc, #108]	@ (8006588 <HAL_DMA_IRQHandler+0x1e8>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d009      	beq.n	8006534 <HAL_DMA_IRQHandler+0x194>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a19      	ldr	r2, [pc, #100]	@ (800658c <HAL_DMA_IRQHandler+0x1ec>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d004      	beq.n	8006534 <HAL_DMA_IRQHandler+0x194>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a18      	ldr	r2, [pc, #96]	@ (8006590 <HAL_DMA_IRQHandler+0x1f0>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d12f      	bne.n	8006594 <HAL_DMA_IRQHandler+0x1f4>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0304 	and.w	r3, r3, #4
 800653e:	2b00      	cmp	r3, #0
 8006540:	bf14      	ite	ne
 8006542:	2301      	movne	r3, #1
 8006544:	2300      	moveq	r3, #0
 8006546:	b2db      	uxtb	r3, r3
 8006548:	e02e      	b.n	80065a8 <HAL_DMA_IRQHandler+0x208>
 800654a:	bf00      	nop
 800654c:	24000054 	.word	0x24000054
 8006550:	1b4e81b5 	.word	0x1b4e81b5
 8006554:	40020010 	.word	0x40020010
 8006558:	40020028 	.word	0x40020028
 800655c:	40020040 	.word	0x40020040
 8006560:	40020058 	.word	0x40020058
 8006564:	40020070 	.word	0x40020070
 8006568:	40020088 	.word	0x40020088
 800656c:	400200a0 	.word	0x400200a0
 8006570:	400200b8 	.word	0x400200b8
 8006574:	40020410 	.word	0x40020410
 8006578:	40020428 	.word	0x40020428
 800657c:	40020440 	.word	0x40020440
 8006580:	40020458 	.word	0x40020458
 8006584:	40020470 	.word	0x40020470
 8006588:	40020488 	.word	0x40020488
 800658c:	400204a0 	.word	0x400204a0
 8006590:	400204b8 	.word	0x400204b8
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0308 	and.w	r3, r3, #8
 800659e:	2b00      	cmp	r3, #0
 80065a0:	bf14      	ite	ne
 80065a2:	2301      	movne	r3, #1
 80065a4:	2300      	moveq	r3, #0
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d015      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 0204 	bic.w	r2, r2, #4
 80065ba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065c0:	f003 031f 	and.w	r3, r3, #31
 80065c4:	2208      	movs	r2, #8
 80065c6:	409a      	lsls	r2, r3
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065d0:	f043 0201 	orr.w	r2, r3, #1
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065dc:	f003 031f 	and.w	r3, r3, #31
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	fa22 f303 	lsr.w	r3, r2, r3
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d06e      	beq.n	80066cc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a69      	ldr	r2, [pc, #420]	@ (8006798 <HAL_DMA_IRQHandler+0x3f8>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d04a      	beq.n	800668e <HAL_DMA_IRQHandler+0x2ee>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a67      	ldr	r2, [pc, #412]	@ (800679c <HAL_DMA_IRQHandler+0x3fc>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d045      	beq.n	800668e <HAL_DMA_IRQHandler+0x2ee>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a66      	ldr	r2, [pc, #408]	@ (80067a0 <HAL_DMA_IRQHandler+0x400>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d040      	beq.n	800668e <HAL_DMA_IRQHandler+0x2ee>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a64      	ldr	r2, [pc, #400]	@ (80067a4 <HAL_DMA_IRQHandler+0x404>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d03b      	beq.n	800668e <HAL_DMA_IRQHandler+0x2ee>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a63      	ldr	r2, [pc, #396]	@ (80067a8 <HAL_DMA_IRQHandler+0x408>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d036      	beq.n	800668e <HAL_DMA_IRQHandler+0x2ee>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a61      	ldr	r2, [pc, #388]	@ (80067ac <HAL_DMA_IRQHandler+0x40c>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d031      	beq.n	800668e <HAL_DMA_IRQHandler+0x2ee>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a60      	ldr	r2, [pc, #384]	@ (80067b0 <HAL_DMA_IRQHandler+0x410>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d02c      	beq.n	800668e <HAL_DMA_IRQHandler+0x2ee>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a5e      	ldr	r2, [pc, #376]	@ (80067b4 <HAL_DMA_IRQHandler+0x414>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d027      	beq.n	800668e <HAL_DMA_IRQHandler+0x2ee>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a5d      	ldr	r2, [pc, #372]	@ (80067b8 <HAL_DMA_IRQHandler+0x418>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d022      	beq.n	800668e <HAL_DMA_IRQHandler+0x2ee>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a5b      	ldr	r2, [pc, #364]	@ (80067bc <HAL_DMA_IRQHandler+0x41c>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d01d      	beq.n	800668e <HAL_DMA_IRQHandler+0x2ee>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a5a      	ldr	r2, [pc, #360]	@ (80067c0 <HAL_DMA_IRQHandler+0x420>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d018      	beq.n	800668e <HAL_DMA_IRQHandler+0x2ee>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a58      	ldr	r2, [pc, #352]	@ (80067c4 <HAL_DMA_IRQHandler+0x424>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d013      	beq.n	800668e <HAL_DMA_IRQHandler+0x2ee>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a57      	ldr	r2, [pc, #348]	@ (80067c8 <HAL_DMA_IRQHandler+0x428>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d00e      	beq.n	800668e <HAL_DMA_IRQHandler+0x2ee>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a55      	ldr	r2, [pc, #340]	@ (80067cc <HAL_DMA_IRQHandler+0x42c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d009      	beq.n	800668e <HAL_DMA_IRQHandler+0x2ee>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a54      	ldr	r2, [pc, #336]	@ (80067d0 <HAL_DMA_IRQHandler+0x430>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d004      	beq.n	800668e <HAL_DMA_IRQHandler+0x2ee>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a52      	ldr	r2, [pc, #328]	@ (80067d4 <HAL_DMA_IRQHandler+0x434>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d10a      	bne.n	80066a4 <HAL_DMA_IRQHandler+0x304>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006698:	2b00      	cmp	r3, #0
 800669a:	bf14      	ite	ne
 800669c:	2301      	movne	r3, #1
 800669e:	2300      	moveq	r3, #0
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	e003      	b.n	80066ac <HAL_DMA_IRQHandler+0x30c>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2300      	movs	r3, #0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00d      	beq.n	80066cc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066b4:	f003 031f 	and.w	r3, r3, #31
 80066b8:	2201      	movs	r2, #1
 80066ba:	409a      	lsls	r2, r3
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066c4:	f043 0202 	orr.w	r2, r3, #2
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066d0:	f003 031f 	and.w	r3, r3, #31
 80066d4:	2204      	movs	r2, #4
 80066d6:	409a      	lsls	r2, r3
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	4013      	ands	r3, r2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 808f 	beq.w	8006800 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a2c      	ldr	r2, [pc, #176]	@ (8006798 <HAL_DMA_IRQHandler+0x3f8>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d04a      	beq.n	8006782 <HAL_DMA_IRQHandler+0x3e2>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a2a      	ldr	r2, [pc, #168]	@ (800679c <HAL_DMA_IRQHandler+0x3fc>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d045      	beq.n	8006782 <HAL_DMA_IRQHandler+0x3e2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a29      	ldr	r2, [pc, #164]	@ (80067a0 <HAL_DMA_IRQHandler+0x400>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d040      	beq.n	8006782 <HAL_DMA_IRQHandler+0x3e2>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a27      	ldr	r2, [pc, #156]	@ (80067a4 <HAL_DMA_IRQHandler+0x404>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d03b      	beq.n	8006782 <HAL_DMA_IRQHandler+0x3e2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a26      	ldr	r2, [pc, #152]	@ (80067a8 <HAL_DMA_IRQHandler+0x408>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d036      	beq.n	8006782 <HAL_DMA_IRQHandler+0x3e2>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a24      	ldr	r2, [pc, #144]	@ (80067ac <HAL_DMA_IRQHandler+0x40c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d031      	beq.n	8006782 <HAL_DMA_IRQHandler+0x3e2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a23      	ldr	r2, [pc, #140]	@ (80067b0 <HAL_DMA_IRQHandler+0x410>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d02c      	beq.n	8006782 <HAL_DMA_IRQHandler+0x3e2>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a21      	ldr	r2, [pc, #132]	@ (80067b4 <HAL_DMA_IRQHandler+0x414>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d027      	beq.n	8006782 <HAL_DMA_IRQHandler+0x3e2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a20      	ldr	r2, [pc, #128]	@ (80067b8 <HAL_DMA_IRQHandler+0x418>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d022      	beq.n	8006782 <HAL_DMA_IRQHandler+0x3e2>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a1e      	ldr	r2, [pc, #120]	@ (80067bc <HAL_DMA_IRQHandler+0x41c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d01d      	beq.n	8006782 <HAL_DMA_IRQHandler+0x3e2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a1d      	ldr	r2, [pc, #116]	@ (80067c0 <HAL_DMA_IRQHandler+0x420>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d018      	beq.n	8006782 <HAL_DMA_IRQHandler+0x3e2>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a1b      	ldr	r2, [pc, #108]	@ (80067c4 <HAL_DMA_IRQHandler+0x424>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d013      	beq.n	8006782 <HAL_DMA_IRQHandler+0x3e2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a1a      	ldr	r2, [pc, #104]	@ (80067c8 <HAL_DMA_IRQHandler+0x428>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d00e      	beq.n	8006782 <HAL_DMA_IRQHandler+0x3e2>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a18      	ldr	r2, [pc, #96]	@ (80067cc <HAL_DMA_IRQHandler+0x42c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d009      	beq.n	8006782 <HAL_DMA_IRQHandler+0x3e2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a17      	ldr	r2, [pc, #92]	@ (80067d0 <HAL_DMA_IRQHandler+0x430>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d004      	beq.n	8006782 <HAL_DMA_IRQHandler+0x3e2>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a15      	ldr	r2, [pc, #84]	@ (80067d4 <HAL_DMA_IRQHandler+0x434>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d12a      	bne.n	80067d8 <HAL_DMA_IRQHandler+0x438>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0302 	and.w	r3, r3, #2
 800678c:	2b00      	cmp	r3, #0
 800678e:	bf14      	ite	ne
 8006790:	2301      	movne	r3, #1
 8006792:	2300      	moveq	r3, #0
 8006794:	b2db      	uxtb	r3, r3
 8006796:	e023      	b.n	80067e0 <HAL_DMA_IRQHandler+0x440>
 8006798:	40020010 	.word	0x40020010
 800679c:	40020028 	.word	0x40020028
 80067a0:	40020040 	.word	0x40020040
 80067a4:	40020058 	.word	0x40020058
 80067a8:	40020070 	.word	0x40020070
 80067ac:	40020088 	.word	0x40020088
 80067b0:	400200a0 	.word	0x400200a0
 80067b4:	400200b8 	.word	0x400200b8
 80067b8:	40020410 	.word	0x40020410
 80067bc:	40020428 	.word	0x40020428
 80067c0:	40020440 	.word	0x40020440
 80067c4:	40020458 	.word	0x40020458
 80067c8:	40020470 	.word	0x40020470
 80067cc:	40020488 	.word	0x40020488
 80067d0:	400204a0 	.word	0x400204a0
 80067d4:	400204b8 	.word	0x400204b8
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2300      	movs	r3, #0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00d      	beq.n	8006800 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067e8:	f003 031f 	and.w	r3, r3, #31
 80067ec:	2204      	movs	r2, #4
 80067ee:	409a      	lsls	r2, r3
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067f8:	f043 0204 	orr.w	r2, r3, #4
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006804:	f003 031f 	and.w	r3, r3, #31
 8006808:	2210      	movs	r2, #16
 800680a:	409a      	lsls	r2, r3
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	4013      	ands	r3, r2
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 80a6 	beq.w	8006962 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a85      	ldr	r2, [pc, #532]	@ (8006a30 <HAL_DMA_IRQHandler+0x690>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d04a      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x516>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a83      	ldr	r2, [pc, #524]	@ (8006a34 <HAL_DMA_IRQHandler+0x694>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d045      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x516>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a82      	ldr	r2, [pc, #520]	@ (8006a38 <HAL_DMA_IRQHandler+0x698>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d040      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x516>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a80      	ldr	r2, [pc, #512]	@ (8006a3c <HAL_DMA_IRQHandler+0x69c>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d03b      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x516>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a7f      	ldr	r2, [pc, #508]	@ (8006a40 <HAL_DMA_IRQHandler+0x6a0>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d036      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x516>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a7d      	ldr	r2, [pc, #500]	@ (8006a44 <HAL_DMA_IRQHandler+0x6a4>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d031      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x516>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a7c      	ldr	r2, [pc, #496]	@ (8006a48 <HAL_DMA_IRQHandler+0x6a8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d02c      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x516>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a7a      	ldr	r2, [pc, #488]	@ (8006a4c <HAL_DMA_IRQHandler+0x6ac>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d027      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x516>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a79      	ldr	r2, [pc, #484]	@ (8006a50 <HAL_DMA_IRQHandler+0x6b0>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d022      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x516>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a77      	ldr	r2, [pc, #476]	@ (8006a54 <HAL_DMA_IRQHandler+0x6b4>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d01d      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x516>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a76      	ldr	r2, [pc, #472]	@ (8006a58 <HAL_DMA_IRQHandler+0x6b8>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d018      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x516>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a74      	ldr	r2, [pc, #464]	@ (8006a5c <HAL_DMA_IRQHandler+0x6bc>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d013      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x516>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a73      	ldr	r2, [pc, #460]	@ (8006a60 <HAL_DMA_IRQHandler+0x6c0>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00e      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x516>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a71      	ldr	r2, [pc, #452]	@ (8006a64 <HAL_DMA_IRQHandler+0x6c4>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d009      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x516>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a70      	ldr	r2, [pc, #448]	@ (8006a68 <HAL_DMA_IRQHandler+0x6c8>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d004      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x516>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a6e      	ldr	r2, [pc, #440]	@ (8006a6c <HAL_DMA_IRQHandler+0x6cc>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d10a      	bne.n	80068cc <HAL_DMA_IRQHandler+0x52c>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0308 	and.w	r3, r3, #8
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	bf14      	ite	ne
 80068c4:	2301      	movne	r3, #1
 80068c6:	2300      	moveq	r3, #0
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	e009      	b.n	80068e0 <HAL_DMA_IRQHandler+0x540>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0304 	and.w	r3, r3, #4
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	bf14      	ite	ne
 80068da:	2301      	movne	r3, #1
 80068dc:	2300      	moveq	r3, #0
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d03e      	beq.n	8006962 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068e8:	f003 031f 	and.w	r3, r3, #31
 80068ec:	2210      	movs	r2, #16
 80068ee:	409a      	lsls	r2, r3
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d018      	beq.n	8006934 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d108      	bne.n	8006922 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006914:	2b00      	cmp	r3, #0
 8006916:	d024      	beq.n	8006962 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	4798      	blx	r3
 8006920:	e01f      	b.n	8006962 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006926:	2b00      	cmp	r3, #0
 8006928:	d01b      	beq.n	8006962 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	4798      	blx	r3
 8006932:	e016      	b.n	8006962 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800693e:	2b00      	cmp	r3, #0
 8006940:	d107      	bne.n	8006952 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0208 	bic.w	r2, r2, #8
 8006950:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006966:	f003 031f 	and.w	r3, r3, #31
 800696a:	2220      	movs	r2, #32
 800696c:	409a      	lsls	r2, r3
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	4013      	ands	r3, r2
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 8110 	beq.w	8006b98 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a2c      	ldr	r2, [pc, #176]	@ (8006a30 <HAL_DMA_IRQHandler+0x690>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d04a      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x678>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a2b      	ldr	r2, [pc, #172]	@ (8006a34 <HAL_DMA_IRQHandler+0x694>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d045      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x678>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a29      	ldr	r2, [pc, #164]	@ (8006a38 <HAL_DMA_IRQHandler+0x698>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d040      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x678>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a28      	ldr	r2, [pc, #160]	@ (8006a3c <HAL_DMA_IRQHandler+0x69c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d03b      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x678>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a26      	ldr	r2, [pc, #152]	@ (8006a40 <HAL_DMA_IRQHandler+0x6a0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d036      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x678>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a25      	ldr	r2, [pc, #148]	@ (8006a44 <HAL_DMA_IRQHandler+0x6a4>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d031      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x678>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a23      	ldr	r2, [pc, #140]	@ (8006a48 <HAL_DMA_IRQHandler+0x6a8>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d02c      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x678>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a22      	ldr	r2, [pc, #136]	@ (8006a4c <HAL_DMA_IRQHandler+0x6ac>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d027      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x678>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a20      	ldr	r2, [pc, #128]	@ (8006a50 <HAL_DMA_IRQHandler+0x6b0>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d022      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x678>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a1f      	ldr	r2, [pc, #124]	@ (8006a54 <HAL_DMA_IRQHandler+0x6b4>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d01d      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x678>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a58 <HAL_DMA_IRQHandler+0x6b8>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d018      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x678>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a1c      	ldr	r2, [pc, #112]	@ (8006a5c <HAL_DMA_IRQHandler+0x6bc>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d013      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x678>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a1a      	ldr	r2, [pc, #104]	@ (8006a60 <HAL_DMA_IRQHandler+0x6c0>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00e      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x678>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a19      	ldr	r2, [pc, #100]	@ (8006a64 <HAL_DMA_IRQHandler+0x6c4>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d009      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x678>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a17      	ldr	r2, [pc, #92]	@ (8006a68 <HAL_DMA_IRQHandler+0x6c8>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d004      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x678>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a16      	ldr	r2, [pc, #88]	@ (8006a6c <HAL_DMA_IRQHandler+0x6cc>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d12b      	bne.n	8006a70 <HAL_DMA_IRQHandler+0x6d0>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0310 	and.w	r3, r3, #16
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	bf14      	ite	ne
 8006a26:	2301      	movne	r3, #1
 8006a28:	2300      	moveq	r3, #0
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	e02a      	b.n	8006a84 <HAL_DMA_IRQHandler+0x6e4>
 8006a2e:	bf00      	nop
 8006a30:	40020010 	.word	0x40020010
 8006a34:	40020028 	.word	0x40020028
 8006a38:	40020040 	.word	0x40020040
 8006a3c:	40020058 	.word	0x40020058
 8006a40:	40020070 	.word	0x40020070
 8006a44:	40020088 	.word	0x40020088
 8006a48:	400200a0 	.word	0x400200a0
 8006a4c:	400200b8 	.word	0x400200b8
 8006a50:	40020410 	.word	0x40020410
 8006a54:	40020428 	.word	0x40020428
 8006a58:	40020440 	.word	0x40020440
 8006a5c:	40020458 	.word	0x40020458
 8006a60:	40020470 	.word	0x40020470
 8006a64:	40020488 	.word	0x40020488
 8006a68:	400204a0 	.word	0x400204a0
 8006a6c:	400204b8 	.word	0x400204b8
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	bf14      	ite	ne
 8006a7e:	2301      	movne	r3, #1
 8006a80:	2300      	moveq	r3, #0
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 8087 	beq.w	8006b98 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a8e:	f003 031f 	and.w	r3, r3, #31
 8006a92:	2220      	movs	r2, #32
 8006a94:	409a      	lsls	r2, r3
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b04      	cmp	r3, #4
 8006aa4:	d139      	bne.n	8006b1a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0216 	bic.w	r2, r2, #22
 8006ab4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	695a      	ldr	r2, [r3, #20]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ac4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d103      	bne.n	8006ad6 <HAL_DMA_IRQHandler+0x736>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d007      	beq.n	8006ae6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 0208 	bic.w	r2, r2, #8
 8006ae4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aea:	f003 031f 	and.w	r3, r3, #31
 8006aee:	223f      	movs	r2, #63	@ 0x3f
 8006af0:	409a      	lsls	r2, r3
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 834a 	beq.w	80071a4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	4798      	blx	r3
          }
          return;
 8006b18:	e344      	b.n	80071a4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d018      	beq.n	8006b5a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d108      	bne.n	8006b48 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d02c      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	4798      	blx	r3
 8006b46:	e027      	b.n	8006b98 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d023      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	4798      	blx	r3
 8006b58:	e01e      	b.n	8006b98 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10f      	bne.n	8006b88 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 0210 	bic.w	r2, r2, #16
 8006b76:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 8306 	beq.w	80071ae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 8088 	beq.w	8006cc0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2204      	movs	r2, #4
 8006bb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a7a      	ldr	r2, [pc, #488]	@ (8006da8 <HAL_DMA_IRQHandler+0xa08>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d04a      	beq.n	8006c58 <HAL_DMA_IRQHandler+0x8b8>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a79      	ldr	r2, [pc, #484]	@ (8006dac <HAL_DMA_IRQHandler+0xa0c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d045      	beq.n	8006c58 <HAL_DMA_IRQHandler+0x8b8>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a77      	ldr	r2, [pc, #476]	@ (8006db0 <HAL_DMA_IRQHandler+0xa10>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d040      	beq.n	8006c58 <HAL_DMA_IRQHandler+0x8b8>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a76      	ldr	r2, [pc, #472]	@ (8006db4 <HAL_DMA_IRQHandler+0xa14>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d03b      	beq.n	8006c58 <HAL_DMA_IRQHandler+0x8b8>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a74      	ldr	r2, [pc, #464]	@ (8006db8 <HAL_DMA_IRQHandler+0xa18>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d036      	beq.n	8006c58 <HAL_DMA_IRQHandler+0x8b8>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a73      	ldr	r2, [pc, #460]	@ (8006dbc <HAL_DMA_IRQHandler+0xa1c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d031      	beq.n	8006c58 <HAL_DMA_IRQHandler+0x8b8>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a71      	ldr	r2, [pc, #452]	@ (8006dc0 <HAL_DMA_IRQHandler+0xa20>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d02c      	beq.n	8006c58 <HAL_DMA_IRQHandler+0x8b8>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a70      	ldr	r2, [pc, #448]	@ (8006dc4 <HAL_DMA_IRQHandler+0xa24>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d027      	beq.n	8006c58 <HAL_DMA_IRQHandler+0x8b8>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a6e      	ldr	r2, [pc, #440]	@ (8006dc8 <HAL_DMA_IRQHandler+0xa28>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d022      	beq.n	8006c58 <HAL_DMA_IRQHandler+0x8b8>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a6d      	ldr	r2, [pc, #436]	@ (8006dcc <HAL_DMA_IRQHandler+0xa2c>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d01d      	beq.n	8006c58 <HAL_DMA_IRQHandler+0x8b8>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a6b      	ldr	r2, [pc, #428]	@ (8006dd0 <HAL_DMA_IRQHandler+0xa30>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d018      	beq.n	8006c58 <HAL_DMA_IRQHandler+0x8b8>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a6a      	ldr	r2, [pc, #424]	@ (8006dd4 <HAL_DMA_IRQHandler+0xa34>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d013      	beq.n	8006c58 <HAL_DMA_IRQHandler+0x8b8>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a68      	ldr	r2, [pc, #416]	@ (8006dd8 <HAL_DMA_IRQHandler+0xa38>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d00e      	beq.n	8006c58 <HAL_DMA_IRQHandler+0x8b8>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a67      	ldr	r2, [pc, #412]	@ (8006ddc <HAL_DMA_IRQHandler+0xa3c>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d009      	beq.n	8006c58 <HAL_DMA_IRQHandler+0x8b8>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a65      	ldr	r2, [pc, #404]	@ (8006de0 <HAL_DMA_IRQHandler+0xa40>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d004      	beq.n	8006c58 <HAL_DMA_IRQHandler+0x8b8>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a64      	ldr	r2, [pc, #400]	@ (8006de4 <HAL_DMA_IRQHandler+0xa44>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d108      	bne.n	8006c6a <HAL_DMA_IRQHandler+0x8ca>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0201 	bic.w	r2, r2, #1
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	e007      	b.n	8006c7a <HAL_DMA_IRQHandler+0x8da>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 0201 	bic.w	r2, r2, #1
 8006c78:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d307      	bcc.n	8006c96 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1f2      	bne.n	8006c7a <HAL_DMA_IRQHandler+0x8da>
 8006c94:	e000      	b.n	8006c98 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006c96:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d004      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2203      	movs	r2, #3
 8006caa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006cae:	e003      	b.n	8006cb8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 8272 	beq.w	80071ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	4798      	blx	r3
 8006cd2:	e26c      	b.n	80071ae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a43      	ldr	r2, [pc, #268]	@ (8006de8 <HAL_DMA_IRQHandler+0xa48>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d022      	beq.n	8006d24 <HAL_DMA_IRQHandler+0x984>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a42      	ldr	r2, [pc, #264]	@ (8006dec <HAL_DMA_IRQHandler+0xa4c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d01d      	beq.n	8006d24 <HAL_DMA_IRQHandler+0x984>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a40      	ldr	r2, [pc, #256]	@ (8006df0 <HAL_DMA_IRQHandler+0xa50>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d018      	beq.n	8006d24 <HAL_DMA_IRQHandler+0x984>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a3f      	ldr	r2, [pc, #252]	@ (8006df4 <HAL_DMA_IRQHandler+0xa54>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d013      	beq.n	8006d24 <HAL_DMA_IRQHandler+0x984>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a3d      	ldr	r2, [pc, #244]	@ (8006df8 <HAL_DMA_IRQHandler+0xa58>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d00e      	beq.n	8006d24 <HAL_DMA_IRQHandler+0x984>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a3c      	ldr	r2, [pc, #240]	@ (8006dfc <HAL_DMA_IRQHandler+0xa5c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d009      	beq.n	8006d24 <HAL_DMA_IRQHandler+0x984>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a3a      	ldr	r2, [pc, #232]	@ (8006e00 <HAL_DMA_IRQHandler+0xa60>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d004      	beq.n	8006d24 <HAL_DMA_IRQHandler+0x984>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a39      	ldr	r2, [pc, #228]	@ (8006e04 <HAL_DMA_IRQHandler+0xa64>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d101      	bne.n	8006d28 <HAL_DMA_IRQHandler+0x988>
 8006d24:	2301      	movs	r3, #1
 8006d26:	e000      	b.n	8006d2a <HAL_DMA_IRQHandler+0x98a>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 823f 	beq.w	80071ae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d3c:	f003 031f 	and.w	r3, r3, #31
 8006d40:	2204      	movs	r2, #4
 8006d42:	409a      	lsls	r2, r3
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	4013      	ands	r3, r2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 80cd 	beq.w	8006ee8 <HAL_DMA_IRQHandler+0xb48>
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 80c7 	beq.w	8006ee8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d5e:	f003 031f 	and.w	r3, r3, #31
 8006d62:	2204      	movs	r2, #4
 8006d64:	409a      	lsls	r2, r3
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d049      	beq.n	8006e08 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d109      	bne.n	8006d92 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 8210 	beq.w	80071a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d90:	e20a      	b.n	80071a8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f000 8206 	beq.w	80071a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006da4:	e200      	b.n	80071a8 <HAL_DMA_IRQHandler+0xe08>
 8006da6:	bf00      	nop
 8006da8:	40020010 	.word	0x40020010
 8006dac:	40020028 	.word	0x40020028
 8006db0:	40020040 	.word	0x40020040
 8006db4:	40020058 	.word	0x40020058
 8006db8:	40020070 	.word	0x40020070
 8006dbc:	40020088 	.word	0x40020088
 8006dc0:	400200a0 	.word	0x400200a0
 8006dc4:	400200b8 	.word	0x400200b8
 8006dc8:	40020410 	.word	0x40020410
 8006dcc:	40020428 	.word	0x40020428
 8006dd0:	40020440 	.word	0x40020440
 8006dd4:	40020458 	.word	0x40020458
 8006dd8:	40020470 	.word	0x40020470
 8006ddc:	40020488 	.word	0x40020488
 8006de0:	400204a0 	.word	0x400204a0
 8006de4:	400204b8 	.word	0x400204b8
 8006de8:	58025408 	.word	0x58025408
 8006dec:	5802541c 	.word	0x5802541c
 8006df0:	58025430 	.word	0x58025430
 8006df4:	58025444 	.word	0x58025444
 8006df8:	58025458 	.word	0x58025458
 8006dfc:	5802546c 	.word	0x5802546c
 8006e00:	58025480 	.word	0x58025480
 8006e04:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f003 0320 	and.w	r3, r3, #32
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d160      	bne.n	8006ed4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a7f      	ldr	r2, [pc, #508]	@ (8007014 <HAL_DMA_IRQHandler+0xc74>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d04a      	beq.n	8006eb2 <HAL_DMA_IRQHandler+0xb12>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a7d      	ldr	r2, [pc, #500]	@ (8007018 <HAL_DMA_IRQHandler+0xc78>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d045      	beq.n	8006eb2 <HAL_DMA_IRQHandler+0xb12>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a7c      	ldr	r2, [pc, #496]	@ (800701c <HAL_DMA_IRQHandler+0xc7c>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d040      	beq.n	8006eb2 <HAL_DMA_IRQHandler+0xb12>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a7a      	ldr	r2, [pc, #488]	@ (8007020 <HAL_DMA_IRQHandler+0xc80>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d03b      	beq.n	8006eb2 <HAL_DMA_IRQHandler+0xb12>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a79      	ldr	r2, [pc, #484]	@ (8007024 <HAL_DMA_IRQHandler+0xc84>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d036      	beq.n	8006eb2 <HAL_DMA_IRQHandler+0xb12>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a77      	ldr	r2, [pc, #476]	@ (8007028 <HAL_DMA_IRQHandler+0xc88>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d031      	beq.n	8006eb2 <HAL_DMA_IRQHandler+0xb12>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a76      	ldr	r2, [pc, #472]	@ (800702c <HAL_DMA_IRQHandler+0xc8c>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d02c      	beq.n	8006eb2 <HAL_DMA_IRQHandler+0xb12>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a74      	ldr	r2, [pc, #464]	@ (8007030 <HAL_DMA_IRQHandler+0xc90>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d027      	beq.n	8006eb2 <HAL_DMA_IRQHandler+0xb12>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a73      	ldr	r2, [pc, #460]	@ (8007034 <HAL_DMA_IRQHandler+0xc94>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d022      	beq.n	8006eb2 <HAL_DMA_IRQHandler+0xb12>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a71      	ldr	r2, [pc, #452]	@ (8007038 <HAL_DMA_IRQHandler+0xc98>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d01d      	beq.n	8006eb2 <HAL_DMA_IRQHandler+0xb12>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a70      	ldr	r2, [pc, #448]	@ (800703c <HAL_DMA_IRQHandler+0xc9c>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d018      	beq.n	8006eb2 <HAL_DMA_IRQHandler+0xb12>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a6e      	ldr	r2, [pc, #440]	@ (8007040 <HAL_DMA_IRQHandler+0xca0>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d013      	beq.n	8006eb2 <HAL_DMA_IRQHandler+0xb12>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a6d      	ldr	r2, [pc, #436]	@ (8007044 <HAL_DMA_IRQHandler+0xca4>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d00e      	beq.n	8006eb2 <HAL_DMA_IRQHandler+0xb12>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a6b      	ldr	r2, [pc, #428]	@ (8007048 <HAL_DMA_IRQHandler+0xca8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d009      	beq.n	8006eb2 <HAL_DMA_IRQHandler+0xb12>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a6a      	ldr	r2, [pc, #424]	@ (800704c <HAL_DMA_IRQHandler+0xcac>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d004      	beq.n	8006eb2 <HAL_DMA_IRQHandler+0xb12>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a68      	ldr	r2, [pc, #416]	@ (8007050 <HAL_DMA_IRQHandler+0xcb0>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d108      	bne.n	8006ec4 <HAL_DMA_IRQHandler+0xb24>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f022 0208 	bic.w	r2, r2, #8
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	e007      	b.n	8006ed4 <HAL_DMA_IRQHandler+0xb34>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f022 0204 	bic.w	r2, r2, #4
 8006ed2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 8165 	beq.w	80071a8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ee6:	e15f      	b.n	80071a8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eec:	f003 031f 	and.w	r3, r3, #31
 8006ef0:	2202      	movs	r2, #2
 8006ef2:	409a      	lsls	r2, r3
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 80c5 	beq.w	8007088 <HAL_DMA_IRQHandler+0xce8>
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 80bf 	beq.w	8007088 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f0e:	f003 031f 	and.w	r3, r3, #31
 8006f12:	2202      	movs	r2, #2
 8006f14:	409a      	lsls	r2, r3
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d018      	beq.n	8006f56 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d109      	bne.n	8006f42 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 813a 	beq.w	80071ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f40:	e134      	b.n	80071ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f000 8130 	beq.w	80071ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f54:	e12a      	b.n	80071ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	f003 0320 	and.w	r3, r3, #32
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f040 8089 	bne.w	8007074 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a2b      	ldr	r2, [pc, #172]	@ (8007014 <HAL_DMA_IRQHandler+0xc74>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d04a      	beq.n	8007002 <HAL_DMA_IRQHandler+0xc62>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a29      	ldr	r2, [pc, #164]	@ (8007018 <HAL_DMA_IRQHandler+0xc78>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d045      	beq.n	8007002 <HAL_DMA_IRQHandler+0xc62>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a28      	ldr	r2, [pc, #160]	@ (800701c <HAL_DMA_IRQHandler+0xc7c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d040      	beq.n	8007002 <HAL_DMA_IRQHandler+0xc62>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a26      	ldr	r2, [pc, #152]	@ (8007020 <HAL_DMA_IRQHandler+0xc80>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d03b      	beq.n	8007002 <HAL_DMA_IRQHandler+0xc62>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a25      	ldr	r2, [pc, #148]	@ (8007024 <HAL_DMA_IRQHandler+0xc84>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d036      	beq.n	8007002 <HAL_DMA_IRQHandler+0xc62>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a23      	ldr	r2, [pc, #140]	@ (8007028 <HAL_DMA_IRQHandler+0xc88>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d031      	beq.n	8007002 <HAL_DMA_IRQHandler+0xc62>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a22      	ldr	r2, [pc, #136]	@ (800702c <HAL_DMA_IRQHandler+0xc8c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d02c      	beq.n	8007002 <HAL_DMA_IRQHandler+0xc62>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a20      	ldr	r2, [pc, #128]	@ (8007030 <HAL_DMA_IRQHandler+0xc90>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d027      	beq.n	8007002 <HAL_DMA_IRQHandler+0xc62>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a1f      	ldr	r2, [pc, #124]	@ (8007034 <HAL_DMA_IRQHandler+0xc94>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d022      	beq.n	8007002 <HAL_DMA_IRQHandler+0xc62>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8007038 <HAL_DMA_IRQHandler+0xc98>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d01d      	beq.n	8007002 <HAL_DMA_IRQHandler+0xc62>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a1c      	ldr	r2, [pc, #112]	@ (800703c <HAL_DMA_IRQHandler+0xc9c>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d018      	beq.n	8007002 <HAL_DMA_IRQHandler+0xc62>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a1a      	ldr	r2, [pc, #104]	@ (8007040 <HAL_DMA_IRQHandler+0xca0>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d013      	beq.n	8007002 <HAL_DMA_IRQHandler+0xc62>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a19      	ldr	r2, [pc, #100]	@ (8007044 <HAL_DMA_IRQHandler+0xca4>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d00e      	beq.n	8007002 <HAL_DMA_IRQHandler+0xc62>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a17      	ldr	r2, [pc, #92]	@ (8007048 <HAL_DMA_IRQHandler+0xca8>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d009      	beq.n	8007002 <HAL_DMA_IRQHandler+0xc62>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a16      	ldr	r2, [pc, #88]	@ (800704c <HAL_DMA_IRQHandler+0xcac>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d004      	beq.n	8007002 <HAL_DMA_IRQHandler+0xc62>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a14      	ldr	r2, [pc, #80]	@ (8007050 <HAL_DMA_IRQHandler+0xcb0>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d128      	bne.n	8007054 <HAL_DMA_IRQHandler+0xcb4>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f022 0214 	bic.w	r2, r2, #20
 8007010:	601a      	str	r2, [r3, #0]
 8007012:	e027      	b.n	8007064 <HAL_DMA_IRQHandler+0xcc4>
 8007014:	40020010 	.word	0x40020010
 8007018:	40020028 	.word	0x40020028
 800701c:	40020040 	.word	0x40020040
 8007020:	40020058 	.word	0x40020058
 8007024:	40020070 	.word	0x40020070
 8007028:	40020088 	.word	0x40020088
 800702c:	400200a0 	.word	0x400200a0
 8007030:	400200b8 	.word	0x400200b8
 8007034:	40020410 	.word	0x40020410
 8007038:	40020428 	.word	0x40020428
 800703c:	40020440 	.word	0x40020440
 8007040:	40020458 	.word	0x40020458
 8007044:	40020470 	.word	0x40020470
 8007048:	40020488 	.word	0x40020488
 800704c:	400204a0 	.word	0x400204a0
 8007050:	400204b8 	.word	0x400204b8
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 020a 	bic.w	r2, r2, #10
 8007062:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 8097 	beq.w	80071ac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007086:	e091      	b.n	80071ac <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800708c:	f003 031f 	and.w	r3, r3, #31
 8007090:	2208      	movs	r2, #8
 8007092:	409a      	lsls	r2, r3
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	4013      	ands	r3, r2
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 8088 	beq.w	80071ae <HAL_DMA_IRQHandler+0xe0e>
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f003 0308 	and.w	r3, r3, #8
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 8082 	beq.w	80071ae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a41      	ldr	r2, [pc, #260]	@ (80071b4 <HAL_DMA_IRQHandler+0xe14>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d04a      	beq.n	800714a <HAL_DMA_IRQHandler+0xdaa>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a3f      	ldr	r2, [pc, #252]	@ (80071b8 <HAL_DMA_IRQHandler+0xe18>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d045      	beq.n	800714a <HAL_DMA_IRQHandler+0xdaa>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a3e      	ldr	r2, [pc, #248]	@ (80071bc <HAL_DMA_IRQHandler+0xe1c>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d040      	beq.n	800714a <HAL_DMA_IRQHandler+0xdaa>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a3c      	ldr	r2, [pc, #240]	@ (80071c0 <HAL_DMA_IRQHandler+0xe20>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d03b      	beq.n	800714a <HAL_DMA_IRQHandler+0xdaa>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a3b      	ldr	r2, [pc, #236]	@ (80071c4 <HAL_DMA_IRQHandler+0xe24>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d036      	beq.n	800714a <HAL_DMA_IRQHandler+0xdaa>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a39      	ldr	r2, [pc, #228]	@ (80071c8 <HAL_DMA_IRQHandler+0xe28>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d031      	beq.n	800714a <HAL_DMA_IRQHandler+0xdaa>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a38      	ldr	r2, [pc, #224]	@ (80071cc <HAL_DMA_IRQHandler+0xe2c>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d02c      	beq.n	800714a <HAL_DMA_IRQHandler+0xdaa>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a36      	ldr	r2, [pc, #216]	@ (80071d0 <HAL_DMA_IRQHandler+0xe30>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d027      	beq.n	800714a <HAL_DMA_IRQHandler+0xdaa>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a35      	ldr	r2, [pc, #212]	@ (80071d4 <HAL_DMA_IRQHandler+0xe34>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d022      	beq.n	800714a <HAL_DMA_IRQHandler+0xdaa>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a33      	ldr	r2, [pc, #204]	@ (80071d8 <HAL_DMA_IRQHandler+0xe38>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d01d      	beq.n	800714a <HAL_DMA_IRQHandler+0xdaa>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a32      	ldr	r2, [pc, #200]	@ (80071dc <HAL_DMA_IRQHandler+0xe3c>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d018      	beq.n	800714a <HAL_DMA_IRQHandler+0xdaa>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a30      	ldr	r2, [pc, #192]	@ (80071e0 <HAL_DMA_IRQHandler+0xe40>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d013      	beq.n	800714a <HAL_DMA_IRQHandler+0xdaa>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a2f      	ldr	r2, [pc, #188]	@ (80071e4 <HAL_DMA_IRQHandler+0xe44>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00e      	beq.n	800714a <HAL_DMA_IRQHandler+0xdaa>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a2d      	ldr	r2, [pc, #180]	@ (80071e8 <HAL_DMA_IRQHandler+0xe48>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d009      	beq.n	800714a <HAL_DMA_IRQHandler+0xdaa>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a2c      	ldr	r2, [pc, #176]	@ (80071ec <HAL_DMA_IRQHandler+0xe4c>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d004      	beq.n	800714a <HAL_DMA_IRQHandler+0xdaa>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a2a      	ldr	r2, [pc, #168]	@ (80071f0 <HAL_DMA_IRQHandler+0xe50>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d108      	bne.n	800715c <HAL_DMA_IRQHandler+0xdbc>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f022 021c 	bic.w	r2, r2, #28
 8007158:	601a      	str	r2, [r3, #0]
 800715a:	e007      	b.n	800716c <HAL_DMA_IRQHandler+0xdcc>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 020e 	bic.w	r2, r2, #14
 800716a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007170:	f003 031f 	and.w	r3, r3, #31
 8007174:	2201      	movs	r2, #1
 8007176:	409a      	lsls	r2, r3
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007196:	2b00      	cmp	r3, #0
 8007198:	d009      	beq.n	80071ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	4798      	blx	r3
 80071a2:	e004      	b.n	80071ae <HAL_DMA_IRQHandler+0xe0e>
          return;
 80071a4:	bf00      	nop
 80071a6:	e002      	b.n	80071ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071a8:	bf00      	nop
 80071aa:	e000      	b.n	80071ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071ac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80071ae:	3728      	adds	r7, #40	@ 0x28
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	40020010 	.word	0x40020010
 80071b8:	40020028 	.word	0x40020028
 80071bc:	40020040 	.word	0x40020040
 80071c0:	40020058 	.word	0x40020058
 80071c4:	40020070 	.word	0x40020070
 80071c8:	40020088 	.word	0x40020088
 80071cc:	400200a0 	.word	0x400200a0
 80071d0:	400200b8 	.word	0x400200b8
 80071d4:	40020410 	.word	0x40020410
 80071d8:	40020428 	.word	0x40020428
 80071dc:	40020440 	.word	0x40020440
 80071e0:	40020458 	.word	0x40020458
 80071e4:	40020470 	.word	0x40020470
 80071e8:	40020488 	.word	0x40020488
 80071ec:	400204a0 	.word	0x400204a0
 80071f0:	400204b8 	.word	0x400204b8

080071f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
 8007200:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007206:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800720c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a7f      	ldr	r2, [pc, #508]	@ (8007410 <DMA_SetConfig+0x21c>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d072      	beq.n	80072fe <DMA_SetConfig+0x10a>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a7d      	ldr	r2, [pc, #500]	@ (8007414 <DMA_SetConfig+0x220>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d06d      	beq.n	80072fe <DMA_SetConfig+0x10a>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a7c      	ldr	r2, [pc, #496]	@ (8007418 <DMA_SetConfig+0x224>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d068      	beq.n	80072fe <DMA_SetConfig+0x10a>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a7a      	ldr	r2, [pc, #488]	@ (800741c <DMA_SetConfig+0x228>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d063      	beq.n	80072fe <DMA_SetConfig+0x10a>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a79      	ldr	r2, [pc, #484]	@ (8007420 <DMA_SetConfig+0x22c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d05e      	beq.n	80072fe <DMA_SetConfig+0x10a>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a77      	ldr	r2, [pc, #476]	@ (8007424 <DMA_SetConfig+0x230>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d059      	beq.n	80072fe <DMA_SetConfig+0x10a>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a76      	ldr	r2, [pc, #472]	@ (8007428 <DMA_SetConfig+0x234>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d054      	beq.n	80072fe <DMA_SetConfig+0x10a>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a74      	ldr	r2, [pc, #464]	@ (800742c <DMA_SetConfig+0x238>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d04f      	beq.n	80072fe <DMA_SetConfig+0x10a>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a73      	ldr	r2, [pc, #460]	@ (8007430 <DMA_SetConfig+0x23c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d04a      	beq.n	80072fe <DMA_SetConfig+0x10a>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a71      	ldr	r2, [pc, #452]	@ (8007434 <DMA_SetConfig+0x240>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d045      	beq.n	80072fe <DMA_SetConfig+0x10a>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a70      	ldr	r2, [pc, #448]	@ (8007438 <DMA_SetConfig+0x244>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d040      	beq.n	80072fe <DMA_SetConfig+0x10a>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a6e      	ldr	r2, [pc, #440]	@ (800743c <DMA_SetConfig+0x248>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d03b      	beq.n	80072fe <DMA_SetConfig+0x10a>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a6d      	ldr	r2, [pc, #436]	@ (8007440 <DMA_SetConfig+0x24c>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d036      	beq.n	80072fe <DMA_SetConfig+0x10a>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a6b      	ldr	r2, [pc, #428]	@ (8007444 <DMA_SetConfig+0x250>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d031      	beq.n	80072fe <DMA_SetConfig+0x10a>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a6a      	ldr	r2, [pc, #424]	@ (8007448 <DMA_SetConfig+0x254>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d02c      	beq.n	80072fe <DMA_SetConfig+0x10a>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a68      	ldr	r2, [pc, #416]	@ (800744c <DMA_SetConfig+0x258>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d027      	beq.n	80072fe <DMA_SetConfig+0x10a>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a67      	ldr	r2, [pc, #412]	@ (8007450 <DMA_SetConfig+0x25c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d022      	beq.n	80072fe <DMA_SetConfig+0x10a>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a65      	ldr	r2, [pc, #404]	@ (8007454 <DMA_SetConfig+0x260>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d01d      	beq.n	80072fe <DMA_SetConfig+0x10a>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a64      	ldr	r2, [pc, #400]	@ (8007458 <DMA_SetConfig+0x264>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d018      	beq.n	80072fe <DMA_SetConfig+0x10a>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a62      	ldr	r2, [pc, #392]	@ (800745c <DMA_SetConfig+0x268>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d013      	beq.n	80072fe <DMA_SetConfig+0x10a>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a61      	ldr	r2, [pc, #388]	@ (8007460 <DMA_SetConfig+0x26c>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d00e      	beq.n	80072fe <DMA_SetConfig+0x10a>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a5f      	ldr	r2, [pc, #380]	@ (8007464 <DMA_SetConfig+0x270>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d009      	beq.n	80072fe <DMA_SetConfig+0x10a>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a5e      	ldr	r2, [pc, #376]	@ (8007468 <DMA_SetConfig+0x274>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d004      	beq.n	80072fe <DMA_SetConfig+0x10a>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a5c      	ldr	r2, [pc, #368]	@ (800746c <DMA_SetConfig+0x278>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d101      	bne.n	8007302 <DMA_SetConfig+0x10e>
 80072fe:	2301      	movs	r3, #1
 8007300:	e000      	b.n	8007304 <DMA_SetConfig+0x110>
 8007302:	2300      	movs	r3, #0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00d      	beq.n	8007324 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007310:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007316:	2b00      	cmp	r3, #0
 8007318:	d004      	beq.n	8007324 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007322:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a39      	ldr	r2, [pc, #228]	@ (8007410 <DMA_SetConfig+0x21c>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d04a      	beq.n	80073c4 <DMA_SetConfig+0x1d0>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a38      	ldr	r2, [pc, #224]	@ (8007414 <DMA_SetConfig+0x220>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d045      	beq.n	80073c4 <DMA_SetConfig+0x1d0>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a36      	ldr	r2, [pc, #216]	@ (8007418 <DMA_SetConfig+0x224>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d040      	beq.n	80073c4 <DMA_SetConfig+0x1d0>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a35      	ldr	r2, [pc, #212]	@ (800741c <DMA_SetConfig+0x228>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d03b      	beq.n	80073c4 <DMA_SetConfig+0x1d0>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a33      	ldr	r2, [pc, #204]	@ (8007420 <DMA_SetConfig+0x22c>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d036      	beq.n	80073c4 <DMA_SetConfig+0x1d0>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a32      	ldr	r2, [pc, #200]	@ (8007424 <DMA_SetConfig+0x230>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d031      	beq.n	80073c4 <DMA_SetConfig+0x1d0>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a30      	ldr	r2, [pc, #192]	@ (8007428 <DMA_SetConfig+0x234>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d02c      	beq.n	80073c4 <DMA_SetConfig+0x1d0>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a2f      	ldr	r2, [pc, #188]	@ (800742c <DMA_SetConfig+0x238>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d027      	beq.n	80073c4 <DMA_SetConfig+0x1d0>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a2d      	ldr	r2, [pc, #180]	@ (8007430 <DMA_SetConfig+0x23c>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d022      	beq.n	80073c4 <DMA_SetConfig+0x1d0>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a2c      	ldr	r2, [pc, #176]	@ (8007434 <DMA_SetConfig+0x240>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d01d      	beq.n	80073c4 <DMA_SetConfig+0x1d0>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a2a      	ldr	r2, [pc, #168]	@ (8007438 <DMA_SetConfig+0x244>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d018      	beq.n	80073c4 <DMA_SetConfig+0x1d0>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a29      	ldr	r2, [pc, #164]	@ (800743c <DMA_SetConfig+0x248>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d013      	beq.n	80073c4 <DMA_SetConfig+0x1d0>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a27      	ldr	r2, [pc, #156]	@ (8007440 <DMA_SetConfig+0x24c>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d00e      	beq.n	80073c4 <DMA_SetConfig+0x1d0>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a26      	ldr	r2, [pc, #152]	@ (8007444 <DMA_SetConfig+0x250>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d009      	beq.n	80073c4 <DMA_SetConfig+0x1d0>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a24      	ldr	r2, [pc, #144]	@ (8007448 <DMA_SetConfig+0x254>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d004      	beq.n	80073c4 <DMA_SetConfig+0x1d0>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a23      	ldr	r2, [pc, #140]	@ (800744c <DMA_SetConfig+0x258>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d101      	bne.n	80073c8 <DMA_SetConfig+0x1d4>
 80073c4:	2301      	movs	r3, #1
 80073c6:	e000      	b.n	80073ca <DMA_SetConfig+0x1d6>
 80073c8:	2300      	movs	r3, #0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d059      	beq.n	8007482 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073d2:	f003 031f 	and.w	r3, r3, #31
 80073d6:	223f      	movs	r2, #63	@ 0x3f
 80073d8:	409a      	lsls	r2, r3
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80073ec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	2b40      	cmp	r3, #64	@ 0x40
 80073fc:	d138      	bne.n	8007470 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800740e:	e086      	b.n	800751e <DMA_SetConfig+0x32a>
 8007410:	40020010 	.word	0x40020010
 8007414:	40020028 	.word	0x40020028
 8007418:	40020040 	.word	0x40020040
 800741c:	40020058 	.word	0x40020058
 8007420:	40020070 	.word	0x40020070
 8007424:	40020088 	.word	0x40020088
 8007428:	400200a0 	.word	0x400200a0
 800742c:	400200b8 	.word	0x400200b8
 8007430:	40020410 	.word	0x40020410
 8007434:	40020428 	.word	0x40020428
 8007438:	40020440 	.word	0x40020440
 800743c:	40020458 	.word	0x40020458
 8007440:	40020470 	.word	0x40020470
 8007444:	40020488 	.word	0x40020488
 8007448:	400204a0 	.word	0x400204a0
 800744c:	400204b8 	.word	0x400204b8
 8007450:	58025408 	.word	0x58025408
 8007454:	5802541c 	.word	0x5802541c
 8007458:	58025430 	.word	0x58025430
 800745c:	58025444 	.word	0x58025444
 8007460:	58025458 	.word	0x58025458
 8007464:	5802546c 	.word	0x5802546c
 8007468:	58025480 	.word	0x58025480
 800746c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	60da      	str	r2, [r3, #12]
}
 8007480:	e04d      	b.n	800751e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a29      	ldr	r2, [pc, #164]	@ (800752c <DMA_SetConfig+0x338>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d022      	beq.n	80074d2 <DMA_SetConfig+0x2de>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a27      	ldr	r2, [pc, #156]	@ (8007530 <DMA_SetConfig+0x33c>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d01d      	beq.n	80074d2 <DMA_SetConfig+0x2de>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a26      	ldr	r2, [pc, #152]	@ (8007534 <DMA_SetConfig+0x340>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d018      	beq.n	80074d2 <DMA_SetConfig+0x2de>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a24      	ldr	r2, [pc, #144]	@ (8007538 <DMA_SetConfig+0x344>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d013      	beq.n	80074d2 <DMA_SetConfig+0x2de>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a23      	ldr	r2, [pc, #140]	@ (800753c <DMA_SetConfig+0x348>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d00e      	beq.n	80074d2 <DMA_SetConfig+0x2de>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a21      	ldr	r2, [pc, #132]	@ (8007540 <DMA_SetConfig+0x34c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d009      	beq.n	80074d2 <DMA_SetConfig+0x2de>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a20      	ldr	r2, [pc, #128]	@ (8007544 <DMA_SetConfig+0x350>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d004      	beq.n	80074d2 <DMA_SetConfig+0x2de>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a1e      	ldr	r2, [pc, #120]	@ (8007548 <DMA_SetConfig+0x354>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d101      	bne.n	80074d6 <DMA_SetConfig+0x2e2>
 80074d2:	2301      	movs	r3, #1
 80074d4:	e000      	b.n	80074d8 <DMA_SetConfig+0x2e4>
 80074d6:	2300      	movs	r3, #0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d020      	beq.n	800751e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074e0:	f003 031f 	and.w	r3, r3, #31
 80074e4:	2201      	movs	r2, #1
 80074e6:	409a      	lsls	r2, r3
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	2b40      	cmp	r3, #64	@ 0x40
 80074fa:	d108      	bne.n	800750e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	60da      	str	r2, [r3, #12]
}
 800750c:	e007      	b.n	800751e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	60da      	str	r2, [r3, #12]
}
 800751e:	bf00      	nop
 8007520:	371c      	adds	r7, #28
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	58025408 	.word	0x58025408
 8007530:	5802541c 	.word	0x5802541c
 8007534:	58025430 	.word	0x58025430
 8007538:	58025444 	.word	0x58025444
 800753c:	58025458 	.word	0x58025458
 8007540:	5802546c 	.word	0x5802546c
 8007544:	58025480 	.word	0x58025480
 8007548:	58025494 	.word	0x58025494

0800754c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a42      	ldr	r2, [pc, #264]	@ (8007664 <DMA_CalcBaseAndBitshift+0x118>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d04a      	beq.n	80075f4 <DMA_CalcBaseAndBitshift+0xa8>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a41      	ldr	r2, [pc, #260]	@ (8007668 <DMA_CalcBaseAndBitshift+0x11c>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d045      	beq.n	80075f4 <DMA_CalcBaseAndBitshift+0xa8>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a3f      	ldr	r2, [pc, #252]	@ (800766c <DMA_CalcBaseAndBitshift+0x120>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d040      	beq.n	80075f4 <DMA_CalcBaseAndBitshift+0xa8>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a3e      	ldr	r2, [pc, #248]	@ (8007670 <DMA_CalcBaseAndBitshift+0x124>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d03b      	beq.n	80075f4 <DMA_CalcBaseAndBitshift+0xa8>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a3c      	ldr	r2, [pc, #240]	@ (8007674 <DMA_CalcBaseAndBitshift+0x128>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d036      	beq.n	80075f4 <DMA_CalcBaseAndBitshift+0xa8>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a3b      	ldr	r2, [pc, #236]	@ (8007678 <DMA_CalcBaseAndBitshift+0x12c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d031      	beq.n	80075f4 <DMA_CalcBaseAndBitshift+0xa8>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a39      	ldr	r2, [pc, #228]	@ (800767c <DMA_CalcBaseAndBitshift+0x130>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d02c      	beq.n	80075f4 <DMA_CalcBaseAndBitshift+0xa8>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a38      	ldr	r2, [pc, #224]	@ (8007680 <DMA_CalcBaseAndBitshift+0x134>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d027      	beq.n	80075f4 <DMA_CalcBaseAndBitshift+0xa8>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a36      	ldr	r2, [pc, #216]	@ (8007684 <DMA_CalcBaseAndBitshift+0x138>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d022      	beq.n	80075f4 <DMA_CalcBaseAndBitshift+0xa8>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a35      	ldr	r2, [pc, #212]	@ (8007688 <DMA_CalcBaseAndBitshift+0x13c>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d01d      	beq.n	80075f4 <DMA_CalcBaseAndBitshift+0xa8>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a33      	ldr	r2, [pc, #204]	@ (800768c <DMA_CalcBaseAndBitshift+0x140>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d018      	beq.n	80075f4 <DMA_CalcBaseAndBitshift+0xa8>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a32      	ldr	r2, [pc, #200]	@ (8007690 <DMA_CalcBaseAndBitshift+0x144>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d013      	beq.n	80075f4 <DMA_CalcBaseAndBitshift+0xa8>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a30      	ldr	r2, [pc, #192]	@ (8007694 <DMA_CalcBaseAndBitshift+0x148>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d00e      	beq.n	80075f4 <DMA_CalcBaseAndBitshift+0xa8>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a2f      	ldr	r2, [pc, #188]	@ (8007698 <DMA_CalcBaseAndBitshift+0x14c>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d009      	beq.n	80075f4 <DMA_CalcBaseAndBitshift+0xa8>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a2d      	ldr	r2, [pc, #180]	@ (800769c <DMA_CalcBaseAndBitshift+0x150>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d004      	beq.n	80075f4 <DMA_CalcBaseAndBitshift+0xa8>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a2c      	ldr	r2, [pc, #176]	@ (80076a0 <DMA_CalcBaseAndBitshift+0x154>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d101      	bne.n	80075f8 <DMA_CalcBaseAndBitshift+0xac>
 80075f4:	2301      	movs	r3, #1
 80075f6:	e000      	b.n	80075fa <DMA_CalcBaseAndBitshift+0xae>
 80075f8:	2300      	movs	r3, #0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d024      	beq.n	8007648 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	3b10      	subs	r3, #16
 8007606:	4a27      	ldr	r2, [pc, #156]	@ (80076a4 <DMA_CalcBaseAndBitshift+0x158>)
 8007608:	fba2 2303 	umull	r2, r3, r2, r3
 800760c:	091b      	lsrs	r3, r3, #4
 800760e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f003 0307 	and.w	r3, r3, #7
 8007616:	4a24      	ldr	r2, [pc, #144]	@ (80076a8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007618:	5cd3      	ldrb	r3, [r2, r3]
 800761a:	461a      	mov	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2b03      	cmp	r3, #3
 8007624:	d908      	bls.n	8007638 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	4b1f      	ldr	r3, [pc, #124]	@ (80076ac <DMA_CalcBaseAndBitshift+0x160>)
 800762e:	4013      	ands	r3, r2
 8007630:	1d1a      	adds	r2, r3, #4
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	659a      	str	r2, [r3, #88]	@ 0x58
 8007636:	e00d      	b.n	8007654 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	461a      	mov	r2, r3
 800763e:	4b1b      	ldr	r3, [pc, #108]	@ (80076ac <DMA_CalcBaseAndBitshift+0x160>)
 8007640:	4013      	ands	r3, r2
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	6593      	str	r3, [r2, #88]	@ 0x58
 8007646:	e005      	b.n	8007654 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007658:	4618      	mov	r0, r3
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	40020010 	.word	0x40020010
 8007668:	40020028 	.word	0x40020028
 800766c:	40020040 	.word	0x40020040
 8007670:	40020058 	.word	0x40020058
 8007674:	40020070 	.word	0x40020070
 8007678:	40020088 	.word	0x40020088
 800767c:	400200a0 	.word	0x400200a0
 8007680:	400200b8 	.word	0x400200b8
 8007684:	40020410 	.word	0x40020410
 8007688:	40020428 	.word	0x40020428
 800768c:	40020440 	.word	0x40020440
 8007690:	40020458 	.word	0x40020458
 8007694:	40020470 	.word	0x40020470
 8007698:	40020488 	.word	0x40020488
 800769c:	400204a0 	.word	0x400204a0
 80076a0:	400204b8 	.word	0x400204b8
 80076a4:	aaaaaaab 	.word	0xaaaaaaab
 80076a8:	0800f998 	.word	0x0800f998
 80076ac:	fffffc00 	.word	0xfffffc00

080076b0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d120      	bne.n	8007706 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c8:	2b03      	cmp	r3, #3
 80076ca:	d858      	bhi.n	800777e <DMA_CheckFifoParam+0xce>
 80076cc:	a201      	add	r2, pc, #4	@ (adr r2, 80076d4 <DMA_CheckFifoParam+0x24>)
 80076ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d2:	bf00      	nop
 80076d4:	080076e5 	.word	0x080076e5
 80076d8:	080076f7 	.word	0x080076f7
 80076dc:	080076e5 	.word	0x080076e5
 80076e0:	0800777f 	.word	0x0800777f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d048      	beq.n	8007782 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076f4:	e045      	b.n	8007782 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80076fe:	d142      	bne.n	8007786 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007704:	e03f      	b.n	8007786 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800770e:	d123      	bne.n	8007758 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007714:	2b03      	cmp	r3, #3
 8007716:	d838      	bhi.n	800778a <DMA_CheckFifoParam+0xda>
 8007718:	a201      	add	r2, pc, #4	@ (adr r2, 8007720 <DMA_CheckFifoParam+0x70>)
 800771a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771e:	bf00      	nop
 8007720:	08007731 	.word	0x08007731
 8007724:	08007737 	.word	0x08007737
 8007728:	08007731 	.word	0x08007731
 800772c:	08007749 	.word	0x08007749
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	73fb      	strb	r3, [r7, #15]
        break;
 8007734:	e030      	b.n	8007798 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d025      	beq.n	800778e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007746:	e022      	b.n	800778e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800774c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007750:	d11f      	bne.n	8007792 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007756:	e01c      	b.n	8007792 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800775c:	2b02      	cmp	r3, #2
 800775e:	d902      	bls.n	8007766 <DMA_CheckFifoParam+0xb6>
 8007760:	2b03      	cmp	r3, #3
 8007762:	d003      	beq.n	800776c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007764:	e018      	b.n	8007798 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	73fb      	strb	r3, [r7, #15]
        break;
 800776a:	e015      	b.n	8007798 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007770:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00e      	beq.n	8007796 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	73fb      	strb	r3, [r7, #15]
    break;
 800777c:	e00b      	b.n	8007796 <DMA_CheckFifoParam+0xe6>
        break;
 800777e:	bf00      	nop
 8007780:	e00a      	b.n	8007798 <DMA_CheckFifoParam+0xe8>
        break;
 8007782:	bf00      	nop
 8007784:	e008      	b.n	8007798 <DMA_CheckFifoParam+0xe8>
        break;
 8007786:	bf00      	nop
 8007788:	e006      	b.n	8007798 <DMA_CheckFifoParam+0xe8>
        break;
 800778a:	bf00      	nop
 800778c:	e004      	b.n	8007798 <DMA_CheckFifoParam+0xe8>
        break;
 800778e:	bf00      	nop
 8007790:	e002      	b.n	8007798 <DMA_CheckFifoParam+0xe8>
        break;
 8007792:	bf00      	nop
 8007794:	e000      	b.n	8007798 <DMA_CheckFifoParam+0xe8>
    break;
 8007796:	bf00      	nop
    }
  }

  return status;
 8007798:	7bfb      	ldrb	r3, [r7, #15]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop

080077a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a38      	ldr	r2, [pc, #224]	@ (800789c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d022      	beq.n	8007806 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a36      	ldr	r2, [pc, #216]	@ (80078a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d01d      	beq.n	8007806 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a35      	ldr	r2, [pc, #212]	@ (80078a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d018      	beq.n	8007806 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a33      	ldr	r2, [pc, #204]	@ (80078a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d013      	beq.n	8007806 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a32      	ldr	r2, [pc, #200]	@ (80078ac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d00e      	beq.n	8007806 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a30      	ldr	r2, [pc, #192]	@ (80078b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d009      	beq.n	8007806 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a2f      	ldr	r2, [pc, #188]	@ (80078b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d004      	beq.n	8007806 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a2d      	ldr	r2, [pc, #180]	@ (80078b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d101      	bne.n	800780a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007806:	2301      	movs	r3, #1
 8007808:	e000      	b.n	800780c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800780a:	2300      	movs	r3, #0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d01a      	beq.n	8007846 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	b2db      	uxtb	r3, r3
 8007816:	3b08      	subs	r3, #8
 8007818:	4a28      	ldr	r2, [pc, #160]	@ (80078bc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800781a:	fba2 2303 	umull	r2, r3, r2, r3
 800781e:	091b      	lsrs	r3, r3, #4
 8007820:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	4b26      	ldr	r3, [pc, #152]	@ (80078c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007826:	4413      	add	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	461a      	mov	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a24      	ldr	r2, [pc, #144]	@ (80078c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007834:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f003 031f 	and.w	r3, r3, #31
 800783c:	2201      	movs	r2, #1
 800783e:	409a      	lsls	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007844:	e024      	b.n	8007890 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	b2db      	uxtb	r3, r3
 800784c:	3b10      	subs	r3, #16
 800784e:	4a1e      	ldr	r2, [pc, #120]	@ (80078c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007850:	fba2 2303 	umull	r2, r3, r2, r3
 8007854:	091b      	lsrs	r3, r3, #4
 8007856:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	4a1c      	ldr	r2, [pc, #112]	@ (80078cc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d806      	bhi.n	800786e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	4a1b      	ldr	r2, [pc, #108]	@ (80078d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d902      	bls.n	800786e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	3308      	adds	r3, #8
 800786c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	4b18      	ldr	r3, [pc, #96]	@ (80078d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007872:	4413      	add	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	461a      	mov	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a16      	ldr	r2, [pc, #88]	@ (80078d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007880:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f003 031f 	and.w	r3, r3, #31
 8007888:	2201      	movs	r2, #1
 800788a:	409a      	lsls	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007890:	bf00      	nop
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	58025408 	.word	0x58025408
 80078a0:	5802541c 	.word	0x5802541c
 80078a4:	58025430 	.word	0x58025430
 80078a8:	58025444 	.word	0x58025444
 80078ac:	58025458 	.word	0x58025458
 80078b0:	5802546c 	.word	0x5802546c
 80078b4:	58025480 	.word	0x58025480
 80078b8:	58025494 	.word	0x58025494
 80078bc:	cccccccd 	.word	0xcccccccd
 80078c0:	16009600 	.word	0x16009600
 80078c4:	58025880 	.word	0x58025880
 80078c8:	aaaaaaab 	.word	0xaaaaaaab
 80078cc:	400204b8 	.word	0x400204b8
 80078d0:	4002040f 	.word	0x4002040f
 80078d4:	10008200 	.word	0x10008200
 80078d8:	40020880 	.word	0x40020880

080078dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d04a      	beq.n	8007988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b08      	cmp	r3, #8
 80078f6:	d847      	bhi.n	8007988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a25      	ldr	r2, [pc, #148]	@ (8007994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d022      	beq.n	8007948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a24      	ldr	r2, [pc, #144]	@ (8007998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d01d      	beq.n	8007948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a22      	ldr	r2, [pc, #136]	@ (800799c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d018      	beq.n	8007948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a21      	ldr	r2, [pc, #132]	@ (80079a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d013      	beq.n	8007948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a1f      	ldr	r2, [pc, #124]	@ (80079a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d00e      	beq.n	8007948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a1e      	ldr	r2, [pc, #120]	@ (80079a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d009      	beq.n	8007948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a1c      	ldr	r2, [pc, #112]	@ (80079ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d004      	beq.n	8007948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a1b      	ldr	r2, [pc, #108]	@ (80079b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d101      	bne.n	800794c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007948:	2301      	movs	r3, #1
 800794a:	e000      	b.n	800794e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800794c:	2300      	movs	r3, #0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00a      	beq.n	8007968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	4b17      	ldr	r3, [pc, #92]	@ (80079b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007956:	4413      	add	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	461a      	mov	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a15      	ldr	r2, [pc, #84]	@ (80079b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007964:	671a      	str	r2, [r3, #112]	@ 0x70
 8007966:	e009      	b.n	800797c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	4b14      	ldr	r3, [pc, #80]	@ (80079bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800796c:	4413      	add	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	461a      	mov	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a11      	ldr	r2, [pc, #68]	@ (80079c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800797a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3b01      	subs	r3, #1
 8007980:	2201      	movs	r2, #1
 8007982:	409a      	lsls	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007988:	bf00      	nop
 800798a:	3714      	adds	r7, #20
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr
 8007994:	58025408 	.word	0x58025408
 8007998:	5802541c 	.word	0x5802541c
 800799c:	58025430 	.word	0x58025430
 80079a0:	58025444 	.word	0x58025444
 80079a4:	58025458 	.word	0x58025458
 80079a8:	5802546c 	.word	0x5802546c
 80079ac:	58025480 	.word	0x58025480
 80079b0:	58025494 	.word	0x58025494
 80079b4:	1600963f 	.word	0x1600963f
 80079b8:	58025940 	.word	0x58025940
 80079bc:	1000823f 	.word	0x1000823f
 80079c0:	40020940 	.word	0x40020940

080079c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b089      	sub	sp, #36	@ 0x24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80079ce:	2300      	movs	r3, #0
 80079d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80079d2:	4b86      	ldr	r3, [pc, #536]	@ (8007bec <HAL_GPIO_Init+0x228>)
 80079d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80079d6:	e18c      	b.n	8007cf2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	2101      	movs	r1, #1
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	fa01 f303 	lsl.w	r3, r1, r3
 80079e4:	4013      	ands	r3, r2
 80079e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 817e 	beq.w	8007cec <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f003 0303 	and.w	r3, r3, #3
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d005      	beq.n	8007a08 <HAL_GPIO_Init+0x44>
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f003 0303 	and.w	r3, r3, #3
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d130      	bne.n	8007a6a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	005b      	lsls	r3, r3, #1
 8007a12:	2203      	movs	r2, #3
 8007a14:	fa02 f303 	lsl.w	r3, r2, r3
 8007a18:	43db      	mvns	r3, r3
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	68da      	ldr	r2, [r3, #12]
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	005b      	lsls	r3, r3, #1
 8007a28:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a3e:	2201      	movs	r2, #1
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	fa02 f303 	lsl.w	r3, r2, r3
 8007a46:	43db      	mvns	r3, r3
 8007a48:	69ba      	ldr	r2, [r7, #24]
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	091b      	lsrs	r3, r3, #4
 8007a54:	f003 0201 	and.w	r2, r3, #1
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	69ba      	ldr	r2, [r7, #24]
 8007a68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f003 0303 	and.w	r3, r3, #3
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d017      	beq.n	8007aa6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	005b      	lsls	r3, r3, #1
 8007a80:	2203      	movs	r2, #3
 8007a82:	fa02 f303 	lsl.w	r3, r2, r3
 8007a86:	43db      	mvns	r3, r3
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	689a      	ldr	r2, [r3, #8]
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	005b      	lsls	r3, r3, #1
 8007a96:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9a:	69ba      	ldr	r2, [r7, #24]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	69ba      	ldr	r2, [r7, #24]
 8007aa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	f003 0303 	and.w	r3, r3, #3
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d123      	bne.n	8007afa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	08da      	lsrs	r2, r3, #3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	3208      	adds	r2, #8
 8007aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	f003 0307 	and.w	r3, r3, #7
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	220f      	movs	r2, #15
 8007aca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ace:	43db      	mvns	r3, r3
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	691a      	ldr	r2, [r3, #16]
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	f003 0307 	and.w	r3, r3, #7
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	08da      	lsrs	r2, r3, #3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	3208      	adds	r2, #8
 8007af4:	69b9      	ldr	r1, [r7, #24]
 8007af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	005b      	lsls	r3, r3, #1
 8007b04:	2203      	movs	r2, #3
 8007b06:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0a:	43db      	mvns	r3, r3
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	4013      	ands	r3, r2
 8007b10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f003 0203 	and.w	r2, r3, #3
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	005b      	lsls	r3, r3, #1
 8007b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b22:	69ba      	ldr	r2, [r7, #24]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	69ba      	ldr	r2, [r7, #24]
 8007b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f000 80d8 	beq.w	8007cec <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b3c:	4b2c      	ldr	r3, [pc, #176]	@ (8007bf0 <HAL_GPIO_Init+0x22c>)
 8007b3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b42:	4a2b      	ldr	r2, [pc, #172]	@ (8007bf0 <HAL_GPIO_Init+0x22c>)
 8007b44:	f043 0302 	orr.w	r3, r3, #2
 8007b48:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007b4c:	4b28      	ldr	r3, [pc, #160]	@ (8007bf0 <HAL_GPIO_Init+0x22c>)
 8007b4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b52:	f003 0302 	and.w	r3, r3, #2
 8007b56:	60fb      	str	r3, [r7, #12]
 8007b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b5a:	4a26      	ldr	r2, [pc, #152]	@ (8007bf4 <HAL_GPIO_Init+0x230>)
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	089b      	lsrs	r3, r3, #2
 8007b60:	3302      	adds	r3, #2
 8007b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	f003 0303 	and.w	r3, r3, #3
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	220f      	movs	r2, #15
 8007b72:	fa02 f303 	lsl.w	r3, r2, r3
 8007b76:	43db      	mvns	r3, r3
 8007b78:	69ba      	ldr	r2, [r7, #24]
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a1d      	ldr	r2, [pc, #116]	@ (8007bf8 <HAL_GPIO_Init+0x234>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d04a      	beq.n	8007c1c <HAL_GPIO_Init+0x258>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a1c      	ldr	r2, [pc, #112]	@ (8007bfc <HAL_GPIO_Init+0x238>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d02b      	beq.n	8007be6 <HAL_GPIO_Init+0x222>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a1b      	ldr	r2, [pc, #108]	@ (8007c00 <HAL_GPIO_Init+0x23c>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d025      	beq.n	8007be2 <HAL_GPIO_Init+0x21e>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a1a      	ldr	r2, [pc, #104]	@ (8007c04 <HAL_GPIO_Init+0x240>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d01f      	beq.n	8007bde <HAL_GPIO_Init+0x21a>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a19      	ldr	r2, [pc, #100]	@ (8007c08 <HAL_GPIO_Init+0x244>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d019      	beq.n	8007bda <HAL_GPIO_Init+0x216>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a18      	ldr	r2, [pc, #96]	@ (8007c0c <HAL_GPIO_Init+0x248>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d013      	beq.n	8007bd6 <HAL_GPIO_Init+0x212>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a17      	ldr	r2, [pc, #92]	@ (8007c10 <HAL_GPIO_Init+0x24c>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d00d      	beq.n	8007bd2 <HAL_GPIO_Init+0x20e>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a16      	ldr	r2, [pc, #88]	@ (8007c14 <HAL_GPIO_Init+0x250>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d007      	beq.n	8007bce <HAL_GPIO_Init+0x20a>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a15      	ldr	r2, [pc, #84]	@ (8007c18 <HAL_GPIO_Init+0x254>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d101      	bne.n	8007bca <HAL_GPIO_Init+0x206>
 8007bc6:	2309      	movs	r3, #9
 8007bc8:	e029      	b.n	8007c1e <HAL_GPIO_Init+0x25a>
 8007bca:	230a      	movs	r3, #10
 8007bcc:	e027      	b.n	8007c1e <HAL_GPIO_Init+0x25a>
 8007bce:	2307      	movs	r3, #7
 8007bd0:	e025      	b.n	8007c1e <HAL_GPIO_Init+0x25a>
 8007bd2:	2306      	movs	r3, #6
 8007bd4:	e023      	b.n	8007c1e <HAL_GPIO_Init+0x25a>
 8007bd6:	2305      	movs	r3, #5
 8007bd8:	e021      	b.n	8007c1e <HAL_GPIO_Init+0x25a>
 8007bda:	2304      	movs	r3, #4
 8007bdc:	e01f      	b.n	8007c1e <HAL_GPIO_Init+0x25a>
 8007bde:	2303      	movs	r3, #3
 8007be0:	e01d      	b.n	8007c1e <HAL_GPIO_Init+0x25a>
 8007be2:	2302      	movs	r3, #2
 8007be4:	e01b      	b.n	8007c1e <HAL_GPIO_Init+0x25a>
 8007be6:	2301      	movs	r3, #1
 8007be8:	e019      	b.n	8007c1e <HAL_GPIO_Init+0x25a>
 8007bea:	bf00      	nop
 8007bec:	58000080 	.word	0x58000080
 8007bf0:	58024400 	.word	0x58024400
 8007bf4:	58000400 	.word	0x58000400
 8007bf8:	58020000 	.word	0x58020000
 8007bfc:	58020400 	.word	0x58020400
 8007c00:	58020800 	.word	0x58020800
 8007c04:	58020c00 	.word	0x58020c00
 8007c08:	58021000 	.word	0x58021000
 8007c0c:	58021400 	.word	0x58021400
 8007c10:	58021800 	.word	0x58021800
 8007c14:	58021c00 	.word	0x58021c00
 8007c18:	58022400 	.word	0x58022400
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	69fa      	ldr	r2, [r7, #28]
 8007c20:	f002 0203 	and.w	r2, r2, #3
 8007c24:	0092      	lsls	r2, r2, #2
 8007c26:	4093      	lsls	r3, r2
 8007c28:	69ba      	ldr	r2, [r7, #24]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c2e:	4938      	ldr	r1, [pc, #224]	@ (8007d10 <HAL_GPIO_Init+0x34c>)
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	089b      	lsrs	r3, r3, #2
 8007c34:	3302      	adds	r3, #2
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	43db      	mvns	r3, r3
 8007c48:	69ba      	ldr	r2, [r7, #24]
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007c5a:	69ba      	ldr	r2, [r7, #24]
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007c62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007c6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	43db      	mvns	r3, r3
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	4013      	ands	r3, r2
 8007c7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d003      	beq.n	8007c90 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007c88:	69ba      	ldr	r2, [r7, #24]
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007c90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	43db      	mvns	r3, r3
 8007ca2:	69ba      	ldr	r2, [r7, #24]
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d003      	beq.n	8007cbc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007cb4:	69ba      	ldr	r2, [r7, #24]
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	69ba      	ldr	r2, [r7, #24]
 8007cc0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	43db      	mvns	r3, r3
 8007ccc:	69ba      	ldr	r2, [r7, #24]
 8007cce:	4013      	ands	r3, r2
 8007cd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007cde:	69ba      	ldr	r2, [r7, #24]
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f47f ae6b 	bne.w	80079d8 <HAL_GPIO_Init+0x14>
  }
}
 8007d02:	bf00      	nop
 8007d04:	bf00      	nop
 8007d06:	3724      	adds	r7, #36	@ 0x24
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr
 8007d10:	58000400 	.word	0x58000400

08007d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	807b      	strh	r3, [r7, #2]
 8007d20:	4613      	mov	r3, r2
 8007d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d24:	787b      	ldrb	r3, [r7, #1]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d2a:	887a      	ldrh	r2, [r7, #2]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007d30:	e003      	b.n	8007d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007d32:	887b      	ldrh	r3, [r7, #2]
 8007d34:	041a      	lsls	r2, r3, #16
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	619a      	str	r2, [r3, #24]
}
 8007d3a:	bf00      	nop
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b085      	sub	sp, #20
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	460b      	mov	r3, r1
 8007d50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007d58:	887a      	ldrh	r2, [r7, #2]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	041a      	lsls	r2, r3, #16
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	43d9      	mvns	r1, r3
 8007d64:	887b      	ldrh	r3, [r7, #2]
 8007d66:	400b      	ands	r3, r1
 8007d68:	431a      	orrs	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	619a      	str	r2, [r3, #24]
}
 8007d6e:	bf00      	nop
 8007d70:	3714      	adds	r7, #20
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b082      	sub	sp, #8
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	4603      	mov	r3, r0
 8007d82:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d88:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007d8c:	88fb      	ldrh	r3, [r7, #6]
 8007d8e:	4013      	ands	r3, r2
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d008      	beq.n	8007da6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007d94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d98:	88fb      	ldrh	r3, [r7, #6]
 8007d9a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007d9e:	88fb      	ldrh	r3, [r7, #6]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7f9 f9a7 	bl	80010f4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007da6:	bf00      	nop
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007db8:	4b19      	ldr	r3, [pc, #100]	@ (8007e20 <HAL_PWREx_ConfigSupply+0x70>)
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	f003 0304 	and.w	r3, r3, #4
 8007dc0:	2b04      	cmp	r3, #4
 8007dc2:	d00a      	beq.n	8007dda <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007dc4:	4b16      	ldr	r3, [pc, #88]	@ (8007e20 <HAL_PWREx_ConfigSupply+0x70>)
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	f003 0307 	and.w	r3, r3, #7
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d001      	beq.n	8007dd6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e01f      	b.n	8007e16 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	e01d      	b.n	8007e16 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007dda:	4b11      	ldr	r3, [pc, #68]	@ (8007e20 <HAL_PWREx_ConfigSupply+0x70>)
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	f023 0207 	bic.w	r2, r3, #7
 8007de2:	490f      	ldr	r1, [pc, #60]	@ (8007e20 <HAL_PWREx_ConfigSupply+0x70>)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007dea:	f7fa fdb5 	bl	8002958 <HAL_GetTick>
 8007dee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007df0:	e009      	b.n	8007e06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007df2:	f7fa fdb1 	bl	8002958 <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e00:	d901      	bls.n	8007e06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e007      	b.n	8007e16 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e06:	4b06      	ldr	r3, [pc, #24]	@ (8007e20 <HAL_PWREx_ConfigSupply+0x70>)
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e12:	d1ee      	bne.n	8007df2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	58024800 	.word	0x58024800

08007e24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b08c      	sub	sp, #48	@ 0x30
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d101      	bne.n	8007e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e3c8      	b.n	80085c8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 8087 	beq.w	8007f52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e44:	4b88      	ldr	r3, [pc, #544]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e4e:	4b86      	ldr	r3, [pc, #536]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e52:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e56:	2b10      	cmp	r3, #16
 8007e58:	d007      	beq.n	8007e6a <HAL_RCC_OscConfig+0x46>
 8007e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e5c:	2b18      	cmp	r3, #24
 8007e5e:	d110      	bne.n	8007e82 <HAL_RCC_OscConfig+0x5e>
 8007e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e62:	f003 0303 	and.w	r3, r3, #3
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d10b      	bne.n	8007e82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e6a:	4b7f      	ldr	r3, [pc, #508]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d06c      	beq.n	8007f50 <HAL_RCC_OscConfig+0x12c>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d168      	bne.n	8007f50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e3a2      	b.n	80085c8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e8a:	d106      	bne.n	8007e9a <HAL_RCC_OscConfig+0x76>
 8007e8c:	4b76      	ldr	r3, [pc, #472]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a75      	ldr	r2, [pc, #468]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007e92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e96:	6013      	str	r3, [r2, #0]
 8007e98:	e02e      	b.n	8007ef8 <HAL_RCC_OscConfig+0xd4>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10c      	bne.n	8007ebc <HAL_RCC_OscConfig+0x98>
 8007ea2:	4b71      	ldr	r3, [pc, #452]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a70      	ldr	r2, [pc, #448]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007ea8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007eac:	6013      	str	r3, [r2, #0]
 8007eae:	4b6e      	ldr	r3, [pc, #440]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a6d      	ldr	r2, [pc, #436]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007eb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007eb8:	6013      	str	r3, [r2, #0]
 8007eba:	e01d      	b.n	8007ef8 <HAL_RCC_OscConfig+0xd4>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ec4:	d10c      	bne.n	8007ee0 <HAL_RCC_OscConfig+0xbc>
 8007ec6:	4b68      	ldr	r3, [pc, #416]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a67      	ldr	r2, [pc, #412]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007ecc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ed0:	6013      	str	r3, [r2, #0]
 8007ed2:	4b65      	ldr	r3, [pc, #404]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a64      	ldr	r2, [pc, #400]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007edc:	6013      	str	r3, [r2, #0]
 8007ede:	e00b      	b.n	8007ef8 <HAL_RCC_OscConfig+0xd4>
 8007ee0:	4b61      	ldr	r3, [pc, #388]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a60      	ldr	r2, [pc, #384]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007eea:	6013      	str	r3, [r2, #0]
 8007eec:	4b5e      	ldr	r3, [pc, #376]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a5d      	ldr	r2, [pc, #372]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007ef2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d013      	beq.n	8007f28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f00:	f7fa fd2a 	bl	8002958 <HAL_GetTick>
 8007f04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f06:	e008      	b.n	8007f1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f08:	f7fa fd26 	bl	8002958 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	2b64      	cmp	r3, #100	@ 0x64
 8007f14:	d901      	bls.n	8007f1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e356      	b.n	80085c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f1a:	4b53      	ldr	r3, [pc, #332]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d0f0      	beq.n	8007f08 <HAL_RCC_OscConfig+0xe4>
 8007f26:	e014      	b.n	8007f52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f28:	f7fa fd16 	bl	8002958 <HAL_GetTick>
 8007f2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f2e:	e008      	b.n	8007f42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f30:	f7fa fd12 	bl	8002958 <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	2b64      	cmp	r3, #100	@ 0x64
 8007f3c:	d901      	bls.n	8007f42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e342      	b.n	80085c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f42:	4b49      	ldr	r3, [pc, #292]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1f0      	bne.n	8007f30 <HAL_RCC_OscConfig+0x10c>
 8007f4e:	e000      	b.n	8007f52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0302 	and.w	r3, r3, #2
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f000 808c 	beq.w	8008078 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f60:	4b41      	ldr	r3, [pc, #260]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f68:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f6a:	4b3f      	ldr	r3, [pc, #252]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f6e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d007      	beq.n	8007f86 <HAL_RCC_OscConfig+0x162>
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	2b18      	cmp	r3, #24
 8007f7a:	d137      	bne.n	8007fec <HAL_RCC_OscConfig+0x1c8>
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	f003 0303 	and.w	r3, r3, #3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d132      	bne.n	8007fec <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f86:	4b38      	ldr	r3, [pc, #224]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0304 	and.w	r3, r3, #4
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d005      	beq.n	8007f9e <HAL_RCC_OscConfig+0x17a>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e314      	b.n	80085c8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f9e:	4b32      	ldr	r3, [pc, #200]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f023 0219 	bic.w	r2, r3, #25
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	492f      	ldr	r1, [pc, #188]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007fac:	4313      	orrs	r3, r2
 8007fae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb0:	f7fa fcd2 	bl	8002958 <HAL_GetTick>
 8007fb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fb6:	e008      	b.n	8007fca <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fb8:	f7fa fcce 	bl	8002958 <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d901      	bls.n	8007fca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e2fe      	b.n	80085c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fca:	4b27      	ldr	r3, [pc, #156]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0304 	and.w	r3, r3, #4
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0f0      	beq.n	8007fb8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fd6:	4b24      	ldr	r3, [pc, #144]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	061b      	lsls	r3, r3, #24
 8007fe4:	4920      	ldr	r1, [pc, #128]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fea:	e045      	b.n	8008078 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d026      	beq.n	8008042 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f023 0219 	bic.w	r2, r3, #25
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	4919      	ldr	r1, [pc, #100]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8008002:	4313      	orrs	r3, r2
 8008004:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008006:	f7fa fca7 	bl	8002958 <HAL_GetTick>
 800800a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800800c:	e008      	b.n	8008020 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800800e:	f7fa fca3 	bl	8002958 <HAL_GetTick>
 8008012:	4602      	mov	r2, r0
 8008014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	2b02      	cmp	r3, #2
 800801a:	d901      	bls.n	8008020 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	e2d3      	b.n	80085c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008020:	4b11      	ldr	r3, [pc, #68]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0304 	and.w	r3, r3, #4
 8008028:	2b00      	cmp	r3, #0
 800802a:	d0f0      	beq.n	800800e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800802c:	4b0e      	ldr	r3, [pc, #56]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	061b      	lsls	r3, r3, #24
 800803a:	490b      	ldr	r1, [pc, #44]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 800803c:	4313      	orrs	r3, r2
 800803e:	604b      	str	r3, [r1, #4]
 8008040:	e01a      	b.n	8008078 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008042:	4b09      	ldr	r3, [pc, #36]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a08      	ldr	r2, [pc, #32]	@ (8008068 <HAL_RCC_OscConfig+0x244>)
 8008048:	f023 0301 	bic.w	r3, r3, #1
 800804c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800804e:	f7fa fc83 	bl	8002958 <HAL_GetTick>
 8008052:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008054:	e00a      	b.n	800806c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008056:	f7fa fc7f 	bl	8002958 <HAL_GetTick>
 800805a:	4602      	mov	r2, r0
 800805c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	2b02      	cmp	r3, #2
 8008062:	d903      	bls.n	800806c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	e2af      	b.n	80085c8 <HAL_RCC_OscConfig+0x7a4>
 8008068:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800806c:	4b96      	ldr	r3, [pc, #600]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0304 	and.w	r3, r3, #4
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1ee      	bne.n	8008056 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 0310 	and.w	r3, r3, #16
 8008080:	2b00      	cmp	r3, #0
 8008082:	d06a      	beq.n	800815a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008084:	4b90      	ldr	r3, [pc, #576]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800808c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800808e:	4b8e      	ldr	r3, [pc, #568]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 8008090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008092:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	2b08      	cmp	r3, #8
 8008098:	d007      	beq.n	80080aa <HAL_RCC_OscConfig+0x286>
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	2b18      	cmp	r3, #24
 800809e:	d11b      	bne.n	80080d8 <HAL_RCC_OscConfig+0x2b4>
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d116      	bne.n	80080d8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080aa:	4b87      	ldr	r3, [pc, #540]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d005      	beq.n	80080c2 <HAL_RCC_OscConfig+0x29e>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	69db      	ldr	r3, [r3, #28]
 80080ba:	2b80      	cmp	r3, #128	@ 0x80
 80080bc:	d001      	beq.n	80080c2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e282      	b.n	80085c8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080c2:	4b81      	ldr	r3, [pc, #516]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a1b      	ldr	r3, [r3, #32]
 80080ce:	061b      	lsls	r3, r3, #24
 80080d0:	497d      	ldr	r1, [pc, #500]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 80080d2:	4313      	orrs	r3, r2
 80080d4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080d6:	e040      	b.n	800815a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	69db      	ldr	r3, [r3, #28]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d023      	beq.n	8008128 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80080e0:	4b79      	ldr	r3, [pc, #484]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a78      	ldr	r2, [pc, #480]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 80080e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ec:	f7fa fc34 	bl	8002958 <HAL_GetTick>
 80080f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080f2:	e008      	b.n	8008106 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80080f4:	f7fa fc30 	bl	8002958 <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d901      	bls.n	8008106 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008102:	2303      	movs	r3, #3
 8008104:	e260      	b.n	80085c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008106:	4b70      	ldr	r3, [pc, #448]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800810e:	2b00      	cmp	r3, #0
 8008110:	d0f0      	beq.n	80080f4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008112:	4b6d      	ldr	r3, [pc, #436]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a1b      	ldr	r3, [r3, #32]
 800811e:	061b      	lsls	r3, r3, #24
 8008120:	4969      	ldr	r1, [pc, #420]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 8008122:	4313      	orrs	r3, r2
 8008124:	60cb      	str	r3, [r1, #12]
 8008126:	e018      	b.n	800815a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008128:	4b67      	ldr	r3, [pc, #412]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a66      	ldr	r2, [pc, #408]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 800812e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008134:	f7fa fc10 	bl	8002958 <HAL_GetTick>
 8008138:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800813a:	e008      	b.n	800814e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800813c:	f7fa fc0c 	bl	8002958 <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	2b02      	cmp	r3, #2
 8008148:	d901      	bls.n	800814e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e23c      	b.n	80085c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800814e:	4b5e      	ldr	r3, [pc, #376]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1f0      	bne.n	800813c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 0308 	and.w	r3, r3, #8
 8008162:	2b00      	cmp	r3, #0
 8008164:	d036      	beq.n	80081d4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d019      	beq.n	80081a2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800816e:	4b56      	ldr	r3, [pc, #344]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 8008170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008172:	4a55      	ldr	r2, [pc, #340]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 8008174:	f043 0301 	orr.w	r3, r3, #1
 8008178:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800817a:	f7fa fbed 	bl	8002958 <HAL_GetTick>
 800817e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008180:	e008      	b.n	8008194 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008182:	f7fa fbe9 	bl	8002958 <HAL_GetTick>
 8008186:	4602      	mov	r2, r0
 8008188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	2b02      	cmp	r3, #2
 800818e:	d901      	bls.n	8008194 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e219      	b.n	80085c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008194:	4b4c      	ldr	r3, [pc, #304]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 8008196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008198:	f003 0302 	and.w	r3, r3, #2
 800819c:	2b00      	cmp	r3, #0
 800819e:	d0f0      	beq.n	8008182 <HAL_RCC_OscConfig+0x35e>
 80081a0:	e018      	b.n	80081d4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081a2:	4b49      	ldr	r3, [pc, #292]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 80081a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081a6:	4a48      	ldr	r2, [pc, #288]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 80081a8:	f023 0301 	bic.w	r3, r3, #1
 80081ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ae:	f7fa fbd3 	bl	8002958 <HAL_GetTick>
 80081b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80081b4:	e008      	b.n	80081c8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081b6:	f7fa fbcf 	bl	8002958 <HAL_GetTick>
 80081ba:	4602      	mov	r2, r0
 80081bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d901      	bls.n	80081c8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e1ff      	b.n	80085c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80081c8:	4b3f      	ldr	r3, [pc, #252]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 80081ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081cc:	f003 0302 	and.w	r3, r3, #2
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1f0      	bne.n	80081b6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0320 	and.w	r3, r3, #32
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d036      	beq.n	800824e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d019      	beq.n	800821c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80081e8:	4b37      	ldr	r3, [pc, #220]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a36      	ldr	r2, [pc, #216]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 80081ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80081f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081f4:	f7fa fbb0 	bl	8002958 <HAL_GetTick>
 80081f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80081fa:	e008      	b.n	800820e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081fc:	f7fa fbac 	bl	8002958 <HAL_GetTick>
 8008200:	4602      	mov	r2, r0
 8008202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	2b02      	cmp	r3, #2
 8008208:	d901      	bls.n	800820e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800820a:	2303      	movs	r3, #3
 800820c:	e1dc      	b.n	80085c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800820e:	4b2e      	ldr	r3, [pc, #184]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008216:	2b00      	cmp	r3, #0
 8008218:	d0f0      	beq.n	80081fc <HAL_RCC_OscConfig+0x3d8>
 800821a:	e018      	b.n	800824e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800821c:	4b2a      	ldr	r3, [pc, #168]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a29      	ldr	r2, [pc, #164]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 8008222:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008226:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008228:	f7fa fb96 	bl	8002958 <HAL_GetTick>
 800822c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800822e:	e008      	b.n	8008242 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008230:	f7fa fb92 	bl	8002958 <HAL_GetTick>
 8008234:	4602      	mov	r2, r0
 8008236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	2b02      	cmp	r3, #2
 800823c:	d901      	bls.n	8008242 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e1c2      	b.n	80085c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008242:	4b21      	ldr	r3, [pc, #132]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1f0      	bne.n	8008230 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0304 	and.w	r3, r3, #4
 8008256:	2b00      	cmp	r3, #0
 8008258:	f000 8086 	beq.w	8008368 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800825c:	4b1b      	ldr	r3, [pc, #108]	@ (80082cc <HAL_RCC_OscConfig+0x4a8>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a1a      	ldr	r2, [pc, #104]	@ (80082cc <HAL_RCC_OscConfig+0x4a8>)
 8008262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008266:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008268:	f7fa fb76 	bl	8002958 <HAL_GetTick>
 800826c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800826e:	e008      	b.n	8008282 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008270:	f7fa fb72 	bl	8002958 <HAL_GetTick>
 8008274:	4602      	mov	r2, r0
 8008276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	2b64      	cmp	r3, #100	@ 0x64
 800827c:	d901      	bls.n	8008282 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e1a2      	b.n	80085c8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008282:	4b12      	ldr	r3, [pc, #72]	@ (80082cc <HAL_RCC_OscConfig+0x4a8>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800828a:	2b00      	cmp	r3, #0
 800828c:	d0f0      	beq.n	8008270 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d106      	bne.n	80082a4 <HAL_RCC_OscConfig+0x480>
 8008296:	4b0c      	ldr	r3, [pc, #48]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 8008298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800829a:	4a0b      	ldr	r2, [pc, #44]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 800829c:	f043 0301 	orr.w	r3, r3, #1
 80082a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80082a2:	e032      	b.n	800830a <HAL_RCC_OscConfig+0x4e6>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d111      	bne.n	80082d0 <HAL_RCC_OscConfig+0x4ac>
 80082ac:	4b06      	ldr	r3, [pc, #24]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 80082ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082b0:	4a05      	ldr	r2, [pc, #20]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 80082b2:	f023 0301 	bic.w	r3, r3, #1
 80082b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80082b8:	4b03      	ldr	r3, [pc, #12]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 80082ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082bc:	4a02      	ldr	r2, [pc, #8]	@ (80082c8 <HAL_RCC_OscConfig+0x4a4>)
 80082be:	f023 0304 	bic.w	r3, r3, #4
 80082c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80082c4:	e021      	b.n	800830a <HAL_RCC_OscConfig+0x4e6>
 80082c6:	bf00      	nop
 80082c8:	58024400 	.word	0x58024400
 80082cc:	58024800 	.word	0x58024800
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	2b05      	cmp	r3, #5
 80082d6:	d10c      	bne.n	80082f2 <HAL_RCC_OscConfig+0x4ce>
 80082d8:	4b83      	ldr	r3, [pc, #524]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 80082da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082dc:	4a82      	ldr	r2, [pc, #520]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 80082de:	f043 0304 	orr.w	r3, r3, #4
 80082e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80082e4:	4b80      	ldr	r3, [pc, #512]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 80082e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082e8:	4a7f      	ldr	r2, [pc, #508]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 80082ea:	f043 0301 	orr.w	r3, r3, #1
 80082ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80082f0:	e00b      	b.n	800830a <HAL_RCC_OscConfig+0x4e6>
 80082f2:	4b7d      	ldr	r3, [pc, #500]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 80082f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082f6:	4a7c      	ldr	r2, [pc, #496]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 80082f8:	f023 0301 	bic.w	r3, r3, #1
 80082fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80082fe:	4b7a      	ldr	r3, [pc, #488]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 8008300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008302:	4a79      	ldr	r2, [pc, #484]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 8008304:	f023 0304 	bic.w	r3, r3, #4
 8008308:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d015      	beq.n	800833e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008312:	f7fa fb21 	bl	8002958 <HAL_GetTick>
 8008316:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008318:	e00a      	b.n	8008330 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800831a:	f7fa fb1d 	bl	8002958 <HAL_GetTick>
 800831e:	4602      	mov	r2, r0
 8008320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008328:	4293      	cmp	r3, r2
 800832a:	d901      	bls.n	8008330 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	e14b      	b.n	80085c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008330:	4b6d      	ldr	r3, [pc, #436]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 8008332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008334:	f003 0302 	and.w	r3, r3, #2
 8008338:	2b00      	cmp	r3, #0
 800833a:	d0ee      	beq.n	800831a <HAL_RCC_OscConfig+0x4f6>
 800833c:	e014      	b.n	8008368 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800833e:	f7fa fb0b 	bl	8002958 <HAL_GetTick>
 8008342:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008344:	e00a      	b.n	800835c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008346:	f7fa fb07 	bl	8002958 <HAL_GetTick>
 800834a:	4602      	mov	r2, r0
 800834c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008354:	4293      	cmp	r3, r2
 8008356:	d901      	bls.n	800835c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e135      	b.n	80085c8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800835c:	4b62      	ldr	r3, [pc, #392]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 800835e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008360:	f003 0302 	and.w	r3, r3, #2
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1ee      	bne.n	8008346 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800836c:	2b00      	cmp	r3, #0
 800836e:	f000 812a 	beq.w	80085c6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008372:	4b5d      	ldr	r3, [pc, #372]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800837a:	2b18      	cmp	r3, #24
 800837c:	f000 80ba 	beq.w	80084f4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008384:	2b02      	cmp	r3, #2
 8008386:	f040 8095 	bne.w	80084b4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800838a:	4b57      	ldr	r3, [pc, #348]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a56      	ldr	r2, [pc, #344]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 8008390:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008396:	f7fa fadf 	bl	8002958 <HAL_GetTick>
 800839a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800839c:	e008      	b.n	80083b0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800839e:	f7fa fadb 	bl	8002958 <HAL_GetTick>
 80083a2:	4602      	mov	r2, r0
 80083a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d901      	bls.n	80083b0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80083ac:	2303      	movs	r3, #3
 80083ae:	e10b      	b.n	80085c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083b0:	4b4d      	ldr	r3, [pc, #308]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1f0      	bne.n	800839e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80083bc:	4b4a      	ldr	r3, [pc, #296]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 80083be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80083c0:	4b4a      	ldr	r3, [pc, #296]	@ (80084ec <HAL_RCC_OscConfig+0x6c8>)
 80083c2:	4013      	ands	r3, r2
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80083cc:	0112      	lsls	r2, r2, #4
 80083ce:	430a      	orrs	r2, r1
 80083d0:	4945      	ldr	r1, [pc, #276]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	628b      	str	r3, [r1, #40]	@ 0x28
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083da:	3b01      	subs	r3, #1
 80083dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083e4:	3b01      	subs	r3, #1
 80083e6:	025b      	lsls	r3, r3, #9
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	431a      	orrs	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f0:	3b01      	subs	r3, #1
 80083f2:	041b      	lsls	r3, r3, #16
 80083f4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80083f8:	431a      	orrs	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083fe:	3b01      	subs	r3, #1
 8008400:	061b      	lsls	r3, r3, #24
 8008402:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008406:	4938      	ldr	r1, [pc, #224]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 8008408:	4313      	orrs	r3, r2
 800840a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800840c:	4b36      	ldr	r3, [pc, #216]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 800840e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008410:	4a35      	ldr	r2, [pc, #212]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 8008412:	f023 0301 	bic.w	r3, r3, #1
 8008416:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008418:	4b33      	ldr	r3, [pc, #204]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 800841a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800841c:	4b34      	ldr	r3, [pc, #208]	@ (80084f0 <HAL_RCC_OscConfig+0x6cc>)
 800841e:	4013      	ands	r3, r2
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008424:	00d2      	lsls	r2, r2, #3
 8008426:	4930      	ldr	r1, [pc, #192]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 8008428:	4313      	orrs	r3, r2
 800842a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800842c:	4b2e      	ldr	r3, [pc, #184]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 800842e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008430:	f023 020c 	bic.w	r2, r3, #12
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008438:	492b      	ldr	r1, [pc, #172]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 800843a:	4313      	orrs	r3, r2
 800843c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800843e:	4b2a      	ldr	r3, [pc, #168]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 8008440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008442:	f023 0202 	bic.w	r2, r3, #2
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800844a:	4927      	ldr	r1, [pc, #156]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 800844c:	4313      	orrs	r3, r2
 800844e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008450:	4b25      	ldr	r3, [pc, #148]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 8008452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008454:	4a24      	ldr	r2, [pc, #144]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 8008456:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800845a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800845c:	4b22      	ldr	r3, [pc, #136]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 800845e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008460:	4a21      	ldr	r2, [pc, #132]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 8008462:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008466:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008468:	4b1f      	ldr	r3, [pc, #124]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 800846a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800846c:	4a1e      	ldr	r2, [pc, #120]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 800846e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008472:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008474:	4b1c      	ldr	r3, [pc, #112]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 8008476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008478:	4a1b      	ldr	r2, [pc, #108]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 800847a:	f043 0301 	orr.w	r3, r3, #1
 800847e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008480:	4b19      	ldr	r3, [pc, #100]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a18      	ldr	r2, [pc, #96]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 8008486:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800848a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800848c:	f7fa fa64 	bl	8002958 <HAL_GetTick>
 8008490:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008492:	e008      	b.n	80084a6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008494:	f7fa fa60 	bl	8002958 <HAL_GetTick>
 8008498:	4602      	mov	r2, r0
 800849a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d901      	bls.n	80084a6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80084a2:	2303      	movs	r3, #3
 80084a4:	e090      	b.n	80085c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084a6:	4b10      	ldr	r3, [pc, #64]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d0f0      	beq.n	8008494 <HAL_RCC_OscConfig+0x670>
 80084b2:	e088      	b.n	80085c6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084b4:	4b0c      	ldr	r3, [pc, #48]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a0b      	ldr	r2, [pc, #44]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 80084ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80084be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084c0:	f7fa fa4a 	bl	8002958 <HAL_GetTick>
 80084c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084c6:	e008      	b.n	80084da <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084c8:	f7fa fa46 	bl	8002958 <HAL_GetTick>
 80084cc:	4602      	mov	r2, r0
 80084ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d901      	bls.n	80084da <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e076      	b.n	80085c8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084da:	4b03      	ldr	r3, [pc, #12]	@ (80084e8 <HAL_RCC_OscConfig+0x6c4>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1f0      	bne.n	80084c8 <HAL_RCC_OscConfig+0x6a4>
 80084e6:	e06e      	b.n	80085c6 <HAL_RCC_OscConfig+0x7a2>
 80084e8:	58024400 	.word	0x58024400
 80084ec:	fffffc0c 	.word	0xfffffc0c
 80084f0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80084f4:	4b36      	ldr	r3, [pc, #216]	@ (80085d0 <HAL_RCC_OscConfig+0x7ac>)
 80084f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80084fa:	4b35      	ldr	r3, [pc, #212]	@ (80085d0 <HAL_RCC_OscConfig+0x7ac>)
 80084fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008504:	2b01      	cmp	r3, #1
 8008506:	d031      	beq.n	800856c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	f003 0203 	and.w	r2, r3, #3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008512:	429a      	cmp	r2, r3
 8008514:	d12a      	bne.n	800856c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	091b      	lsrs	r3, r3, #4
 800851a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008522:	429a      	cmp	r2, r3
 8008524:	d122      	bne.n	800856c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008530:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008532:	429a      	cmp	r2, r3
 8008534:	d11a      	bne.n	800856c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	0a5b      	lsrs	r3, r3, #9
 800853a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008542:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008544:	429a      	cmp	r2, r3
 8008546:	d111      	bne.n	800856c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	0c1b      	lsrs	r3, r3, #16
 800854c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008554:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008556:	429a      	cmp	r2, r3
 8008558:	d108      	bne.n	800856c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	0e1b      	lsrs	r3, r3, #24
 800855e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008566:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008568:	429a      	cmp	r2, r3
 800856a:	d001      	beq.n	8008570 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	e02b      	b.n	80085c8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008570:	4b17      	ldr	r3, [pc, #92]	@ (80085d0 <HAL_RCC_OscConfig+0x7ac>)
 8008572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008574:	08db      	lsrs	r3, r3, #3
 8008576:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800857a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	429a      	cmp	r2, r3
 8008584:	d01f      	beq.n	80085c6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008586:	4b12      	ldr	r3, [pc, #72]	@ (80085d0 <HAL_RCC_OscConfig+0x7ac>)
 8008588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800858a:	4a11      	ldr	r2, [pc, #68]	@ (80085d0 <HAL_RCC_OscConfig+0x7ac>)
 800858c:	f023 0301 	bic.w	r3, r3, #1
 8008590:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008592:	f7fa f9e1 	bl	8002958 <HAL_GetTick>
 8008596:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008598:	bf00      	nop
 800859a:	f7fa f9dd 	bl	8002958 <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d0f9      	beq.n	800859a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80085a6:	4b0a      	ldr	r3, [pc, #40]	@ (80085d0 <HAL_RCC_OscConfig+0x7ac>)
 80085a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085aa:	4b0a      	ldr	r3, [pc, #40]	@ (80085d4 <HAL_RCC_OscConfig+0x7b0>)
 80085ac:	4013      	ands	r3, r2
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80085b2:	00d2      	lsls	r2, r2, #3
 80085b4:	4906      	ldr	r1, [pc, #24]	@ (80085d0 <HAL_RCC_OscConfig+0x7ac>)
 80085b6:	4313      	orrs	r3, r2
 80085b8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80085ba:	4b05      	ldr	r3, [pc, #20]	@ (80085d0 <HAL_RCC_OscConfig+0x7ac>)
 80085bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085be:	4a04      	ldr	r2, [pc, #16]	@ (80085d0 <HAL_RCC_OscConfig+0x7ac>)
 80085c0:	f043 0301 	orr.w	r3, r3, #1
 80085c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3730      	adds	r7, #48	@ 0x30
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	58024400 	.word	0x58024400
 80085d4:	ffff0007 	.word	0xffff0007

080085d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d101      	bne.n	80085ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e19c      	b.n	8008926 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80085ec:	4b8a      	ldr	r3, [pc, #552]	@ (8008818 <HAL_RCC_ClockConfig+0x240>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 030f 	and.w	r3, r3, #15
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d910      	bls.n	800861c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085fa:	4b87      	ldr	r3, [pc, #540]	@ (8008818 <HAL_RCC_ClockConfig+0x240>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f023 020f 	bic.w	r2, r3, #15
 8008602:	4985      	ldr	r1, [pc, #532]	@ (8008818 <HAL_RCC_ClockConfig+0x240>)
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	4313      	orrs	r3, r2
 8008608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800860a:	4b83      	ldr	r3, [pc, #524]	@ (8008818 <HAL_RCC_ClockConfig+0x240>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 030f 	and.w	r3, r3, #15
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	429a      	cmp	r2, r3
 8008616:	d001      	beq.n	800861c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e184      	b.n	8008926 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0304 	and.w	r3, r3, #4
 8008624:	2b00      	cmp	r3, #0
 8008626:	d010      	beq.n	800864a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	691a      	ldr	r2, [r3, #16]
 800862c:	4b7b      	ldr	r3, [pc, #492]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 800862e:	699b      	ldr	r3, [r3, #24]
 8008630:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008634:	429a      	cmp	r2, r3
 8008636:	d908      	bls.n	800864a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008638:	4b78      	ldr	r3, [pc, #480]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	4975      	ldr	r1, [pc, #468]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 8008646:	4313      	orrs	r3, r2
 8008648:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0308 	and.w	r3, r3, #8
 8008652:	2b00      	cmp	r3, #0
 8008654:	d010      	beq.n	8008678 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	695a      	ldr	r2, [r3, #20]
 800865a:	4b70      	ldr	r3, [pc, #448]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 800865c:	69db      	ldr	r3, [r3, #28]
 800865e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008662:	429a      	cmp	r2, r3
 8008664:	d908      	bls.n	8008678 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008666:	4b6d      	ldr	r3, [pc, #436]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 8008668:	69db      	ldr	r3, [r3, #28]
 800866a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	496a      	ldr	r1, [pc, #424]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 8008674:	4313      	orrs	r3, r2
 8008676:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0310 	and.w	r3, r3, #16
 8008680:	2b00      	cmp	r3, #0
 8008682:	d010      	beq.n	80086a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	699a      	ldr	r2, [r3, #24]
 8008688:	4b64      	ldr	r3, [pc, #400]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008690:	429a      	cmp	r2, r3
 8008692:	d908      	bls.n	80086a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008694:	4b61      	ldr	r3, [pc, #388]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 8008696:	69db      	ldr	r3, [r3, #28]
 8008698:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	495e      	ldr	r1, [pc, #376]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0320 	and.w	r3, r3, #32
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d010      	beq.n	80086d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	69da      	ldr	r2, [r3, #28]
 80086b6:	4b59      	ldr	r3, [pc, #356]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 80086b8:	6a1b      	ldr	r3, [r3, #32]
 80086ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80086be:	429a      	cmp	r2, r3
 80086c0:	d908      	bls.n	80086d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80086c2:	4b56      	ldr	r3, [pc, #344]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	4953      	ldr	r1, [pc, #332]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 80086d0:	4313      	orrs	r3, r2
 80086d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0302 	and.w	r3, r3, #2
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d010      	beq.n	8008702 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	68da      	ldr	r2, [r3, #12]
 80086e4:	4b4d      	ldr	r3, [pc, #308]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 80086e6:	699b      	ldr	r3, [r3, #24]
 80086e8:	f003 030f 	and.w	r3, r3, #15
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d908      	bls.n	8008702 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086f0:	4b4a      	ldr	r3, [pc, #296]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	f023 020f 	bic.w	r2, r3, #15
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	4947      	ldr	r1, [pc, #284]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 80086fe:	4313      	orrs	r3, r2
 8008700:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	2b00      	cmp	r3, #0
 800870c:	d055      	beq.n	80087ba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800870e:	4b43      	ldr	r3, [pc, #268]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 8008710:	699b      	ldr	r3, [r3, #24]
 8008712:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	4940      	ldr	r1, [pc, #256]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 800871c:	4313      	orrs	r3, r2
 800871e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	2b02      	cmp	r3, #2
 8008726:	d107      	bne.n	8008738 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008728:	4b3c      	ldr	r3, [pc, #240]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d121      	bne.n	8008778 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e0f6      	b.n	8008926 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	2b03      	cmp	r3, #3
 800873e:	d107      	bne.n	8008750 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008740:	4b36      	ldr	r3, [pc, #216]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d115      	bne.n	8008778 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e0ea      	b.n	8008926 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d107      	bne.n	8008768 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008758:	4b30      	ldr	r3, [pc, #192]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008760:	2b00      	cmp	r3, #0
 8008762:	d109      	bne.n	8008778 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e0de      	b.n	8008926 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008768:	4b2c      	ldr	r3, [pc, #176]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 0304 	and.w	r3, r3, #4
 8008770:	2b00      	cmp	r3, #0
 8008772:	d101      	bne.n	8008778 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e0d6      	b.n	8008926 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008778:	4b28      	ldr	r3, [pc, #160]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	f023 0207 	bic.w	r2, r3, #7
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	4925      	ldr	r1, [pc, #148]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 8008786:	4313      	orrs	r3, r2
 8008788:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800878a:	f7fa f8e5 	bl	8002958 <HAL_GetTick>
 800878e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008790:	e00a      	b.n	80087a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008792:	f7fa f8e1 	bl	8002958 <HAL_GetTick>
 8008796:	4602      	mov	r2, r0
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d901      	bls.n	80087a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e0be      	b.n	8008926 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087a8:	4b1c      	ldr	r3, [pc, #112]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	00db      	lsls	r3, r3, #3
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d1eb      	bne.n	8008792 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0302 	and.w	r3, r3, #2
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d010      	beq.n	80087e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68da      	ldr	r2, [r3, #12]
 80087ca:	4b14      	ldr	r3, [pc, #80]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	f003 030f 	and.w	r3, r3, #15
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d208      	bcs.n	80087e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087d6:	4b11      	ldr	r3, [pc, #68]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 80087d8:	699b      	ldr	r3, [r3, #24]
 80087da:	f023 020f 	bic.w	r2, r3, #15
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	490e      	ldr	r1, [pc, #56]	@ (800881c <HAL_RCC_ClockConfig+0x244>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80087e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008818 <HAL_RCC_ClockConfig+0x240>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 030f 	and.w	r3, r3, #15
 80087f0:	683a      	ldr	r2, [r7, #0]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d214      	bcs.n	8008820 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087f6:	4b08      	ldr	r3, [pc, #32]	@ (8008818 <HAL_RCC_ClockConfig+0x240>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f023 020f 	bic.w	r2, r3, #15
 80087fe:	4906      	ldr	r1, [pc, #24]	@ (8008818 <HAL_RCC_ClockConfig+0x240>)
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	4313      	orrs	r3, r2
 8008804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008806:	4b04      	ldr	r3, [pc, #16]	@ (8008818 <HAL_RCC_ClockConfig+0x240>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 030f 	and.w	r3, r3, #15
 800880e:	683a      	ldr	r2, [r7, #0]
 8008810:	429a      	cmp	r2, r3
 8008812:	d005      	beq.n	8008820 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	e086      	b.n	8008926 <HAL_RCC_ClockConfig+0x34e>
 8008818:	52002000 	.word	0x52002000
 800881c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0304 	and.w	r3, r3, #4
 8008828:	2b00      	cmp	r3, #0
 800882a:	d010      	beq.n	800884e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	691a      	ldr	r2, [r3, #16]
 8008830:	4b3f      	ldr	r3, [pc, #252]	@ (8008930 <HAL_RCC_ClockConfig+0x358>)
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008838:	429a      	cmp	r2, r3
 800883a:	d208      	bcs.n	800884e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800883c:	4b3c      	ldr	r3, [pc, #240]	@ (8008930 <HAL_RCC_ClockConfig+0x358>)
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	4939      	ldr	r1, [pc, #228]	@ (8008930 <HAL_RCC_ClockConfig+0x358>)
 800884a:	4313      	orrs	r3, r2
 800884c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 0308 	and.w	r3, r3, #8
 8008856:	2b00      	cmp	r3, #0
 8008858:	d010      	beq.n	800887c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	695a      	ldr	r2, [r3, #20]
 800885e:	4b34      	ldr	r3, [pc, #208]	@ (8008930 <HAL_RCC_ClockConfig+0x358>)
 8008860:	69db      	ldr	r3, [r3, #28]
 8008862:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008866:	429a      	cmp	r2, r3
 8008868:	d208      	bcs.n	800887c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800886a:	4b31      	ldr	r3, [pc, #196]	@ (8008930 <HAL_RCC_ClockConfig+0x358>)
 800886c:	69db      	ldr	r3, [r3, #28]
 800886e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	492e      	ldr	r1, [pc, #184]	@ (8008930 <HAL_RCC_ClockConfig+0x358>)
 8008878:	4313      	orrs	r3, r2
 800887a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0310 	and.w	r3, r3, #16
 8008884:	2b00      	cmp	r3, #0
 8008886:	d010      	beq.n	80088aa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	699a      	ldr	r2, [r3, #24]
 800888c:	4b28      	ldr	r3, [pc, #160]	@ (8008930 <HAL_RCC_ClockConfig+0x358>)
 800888e:	69db      	ldr	r3, [r3, #28]
 8008890:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008894:	429a      	cmp	r2, r3
 8008896:	d208      	bcs.n	80088aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008898:	4b25      	ldr	r3, [pc, #148]	@ (8008930 <HAL_RCC_ClockConfig+0x358>)
 800889a:	69db      	ldr	r3, [r3, #28]
 800889c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	4922      	ldr	r1, [pc, #136]	@ (8008930 <HAL_RCC_ClockConfig+0x358>)
 80088a6:	4313      	orrs	r3, r2
 80088a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 0320 	and.w	r3, r3, #32
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d010      	beq.n	80088d8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	69da      	ldr	r2, [r3, #28]
 80088ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008930 <HAL_RCC_ClockConfig+0x358>)
 80088bc:	6a1b      	ldr	r3, [r3, #32]
 80088be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d208      	bcs.n	80088d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80088c6:	4b1a      	ldr	r3, [pc, #104]	@ (8008930 <HAL_RCC_ClockConfig+0x358>)
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	69db      	ldr	r3, [r3, #28]
 80088d2:	4917      	ldr	r1, [pc, #92]	@ (8008930 <HAL_RCC_ClockConfig+0x358>)
 80088d4:	4313      	orrs	r3, r2
 80088d6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80088d8:	f000 f834 	bl	8008944 <HAL_RCC_GetSysClockFreq>
 80088dc:	4602      	mov	r2, r0
 80088de:	4b14      	ldr	r3, [pc, #80]	@ (8008930 <HAL_RCC_ClockConfig+0x358>)
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	0a1b      	lsrs	r3, r3, #8
 80088e4:	f003 030f 	and.w	r3, r3, #15
 80088e8:	4912      	ldr	r1, [pc, #72]	@ (8008934 <HAL_RCC_ClockConfig+0x35c>)
 80088ea:	5ccb      	ldrb	r3, [r1, r3]
 80088ec:	f003 031f 	and.w	r3, r3, #31
 80088f0:	fa22 f303 	lsr.w	r3, r2, r3
 80088f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088f6:	4b0e      	ldr	r3, [pc, #56]	@ (8008930 <HAL_RCC_ClockConfig+0x358>)
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	f003 030f 	and.w	r3, r3, #15
 80088fe:	4a0d      	ldr	r2, [pc, #52]	@ (8008934 <HAL_RCC_ClockConfig+0x35c>)
 8008900:	5cd3      	ldrb	r3, [r2, r3]
 8008902:	f003 031f 	and.w	r3, r3, #31
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	fa22 f303 	lsr.w	r3, r2, r3
 800890c:	4a0a      	ldr	r2, [pc, #40]	@ (8008938 <HAL_RCC_ClockConfig+0x360>)
 800890e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008910:	4a0a      	ldr	r2, [pc, #40]	@ (800893c <HAL_RCC_ClockConfig+0x364>)
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008916:	4b0a      	ldr	r3, [pc, #40]	@ (8008940 <HAL_RCC_ClockConfig+0x368>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4618      	mov	r0, r3
 800891c:	f7f9 ffd2 	bl	80028c4 <HAL_InitTick>
 8008920:	4603      	mov	r3, r0
 8008922:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008924:	7bfb      	ldrb	r3, [r7, #15]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3718      	adds	r7, #24
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	58024400 	.word	0x58024400
 8008934:	0800f988 	.word	0x0800f988
 8008938:	24000058 	.word	0x24000058
 800893c:	24000054 	.word	0x24000054
 8008940:	2400005c 	.word	0x2400005c

08008944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008944:	b480      	push	{r7}
 8008946:	b089      	sub	sp, #36	@ 0x24
 8008948:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800894a:	4bb3      	ldr	r3, [pc, #716]	@ (8008c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008952:	2b18      	cmp	r3, #24
 8008954:	f200 8155 	bhi.w	8008c02 <HAL_RCC_GetSysClockFreq+0x2be>
 8008958:	a201      	add	r2, pc, #4	@ (adr r2, 8008960 <HAL_RCC_GetSysClockFreq+0x1c>)
 800895a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895e:	bf00      	nop
 8008960:	080089c5 	.word	0x080089c5
 8008964:	08008c03 	.word	0x08008c03
 8008968:	08008c03 	.word	0x08008c03
 800896c:	08008c03 	.word	0x08008c03
 8008970:	08008c03 	.word	0x08008c03
 8008974:	08008c03 	.word	0x08008c03
 8008978:	08008c03 	.word	0x08008c03
 800897c:	08008c03 	.word	0x08008c03
 8008980:	080089eb 	.word	0x080089eb
 8008984:	08008c03 	.word	0x08008c03
 8008988:	08008c03 	.word	0x08008c03
 800898c:	08008c03 	.word	0x08008c03
 8008990:	08008c03 	.word	0x08008c03
 8008994:	08008c03 	.word	0x08008c03
 8008998:	08008c03 	.word	0x08008c03
 800899c:	08008c03 	.word	0x08008c03
 80089a0:	080089f1 	.word	0x080089f1
 80089a4:	08008c03 	.word	0x08008c03
 80089a8:	08008c03 	.word	0x08008c03
 80089ac:	08008c03 	.word	0x08008c03
 80089b0:	08008c03 	.word	0x08008c03
 80089b4:	08008c03 	.word	0x08008c03
 80089b8:	08008c03 	.word	0x08008c03
 80089bc:	08008c03 	.word	0x08008c03
 80089c0:	080089f7 	.word	0x080089f7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089c4:	4b94      	ldr	r3, [pc, #592]	@ (8008c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 0320 	and.w	r3, r3, #32
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d009      	beq.n	80089e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089d0:	4b91      	ldr	r3, [pc, #580]	@ (8008c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	08db      	lsrs	r3, r3, #3
 80089d6:	f003 0303 	and.w	r3, r3, #3
 80089da:	4a90      	ldr	r2, [pc, #576]	@ (8008c1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089dc:	fa22 f303 	lsr.w	r3, r2, r3
 80089e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80089e2:	e111      	b.n	8008c08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80089e4:	4b8d      	ldr	r3, [pc, #564]	@ (8008c1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089e6:	61bb      	str	r3, [r7, #24]
      break;
 80089e8:	e10e      	b.n	8008c08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80089ea:	4b8d      	ldr	r3, [pc, #564]	@ (8008c20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80089ec:	61bb      	str	r3, [r7, #24]
      break;
 80089ee:	e10b      	b.n	8008c08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80089f0:	4b8c      	ldr	r3, [pc, #560]	@ (8008c24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80089f2:	61bb      	str	r3, [r7, #24]
      break;
 80089f4:	e108      	b.n	8008c08 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089f6:	4b88      	ldr	r3, [pc, #544]	@ (8008c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089fa:	f003 0303 	and.w	r3, r3, #3
 80089fe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008a00:	4b85      	ldr	r3, [pc, #532]	@ (8008c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a04:	091b      	lsrs	r3, r3, #4
 8008a06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a0a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008a0c:	4b82      	ldr	r3, [pc, #520]	@ (8008c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a10:	f003 0301 	and.w	r3, r3, #1
 8008a14:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008a16:	4b80      	ldr	r3, [pc, #512]	@ (8008c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a1a:	08db      	lsrs	r3, r3, #3
 8008a1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	fb02 f303 	mul.w	r3, r2, r3
 8008a26:	ee07 3a90 	vmov	s15, r3
 8008a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a2e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 80e1 	beq.w	8008bfc <HAL_RCC_GetSysClockFreq+0x2b8>
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	f000 8083 	beq.w	8008b48 <HAL_RCC_GetSysClockFreq+0x204>
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	f200 80a1 	bhi.w	8008b8c <HAL_RCC_GetSysClockFreq+0x248>
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d003      	beq.n	8008a58 <HAL_RCC_GetSysClockFreq+0x114>
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d056      	beq.n	8008b04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008a56:	e099      	b.n	8008b8c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a58:	4b6f      	ldr	r3, [pc, #444]	@ (8008c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 0320 	and.w	r3, r3, #32
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d02d      	beq.n	8008ac0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a64:	4b6c      	ldr	r3, [pc, #432]	@ (8008c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	08db      	lsrs	r3, r3, #3
 8008a6a:	f003 0303 	and.w	r3, r3, #3
 8008a6e:	4a6b      	ldr	r2, [pc, #428]	@ (8008c1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a70:	fa22 f303 	lsr.w	r3, r2, r3
 8008a74:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	ee07 3a90 	vmov	s15, r3
 8008a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	ee07 3a90 	vmov	s15, r3
 8008a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a8e:	4b62      	ldr	r3, [pc, #392]	@ (8008c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a96:	ee07 3a90 	vmov	s15, r3
 8008a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aa2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008abe:	e087      	b.n	8008bd0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	ee07 3a90 	vmov	s15, r3
 8008ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008c2c <HAL_RCC_GetSysClockFreq+0x2e8>
 8008ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ad2:	4b51      	ldr	r3, [pc, #324]	@ (8008c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ada:	ee07 3a90 	vmov	s15, r3
 8008ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ae2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ae6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008afe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b02:	e065      	b.n	8008bd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	ee07 3a90 	vmov	s15, r3
 8008b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b0e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008c30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b16:	4b40      	ldr	r3, [pc, #256]	@ (8008c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b1e:	ee07 3a90 	vmov	s15, r3
 8008b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b26:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b2a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b46:	e043      	b.n	8008bd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	ee07 3a90 	vmov	s15, r3
 8008b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b52:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008c34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8008c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b62:	ee07 3a90 	vmov	s15, r3
 8008b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b6e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b8a:	e021      	b.n	8008bd0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	ee07 3a90 	vmov	s15, r3
 8008b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b96:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008c30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8008c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ba6:	ee07 3a90 	vmov	s15, r3
 8008baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bae:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bb2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008bce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008bd0:	4b11      	ldr	r3, [pc, #68]	@ (8008c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bd4:	0a5b      	lsrs	r3, r3, #9
 8008bd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bda:	3301      	adds	r3, #1
 8008bdc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	ee07 3a90 	vmov	s15, r3
 8008be4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008be8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bf4:	ee17 3a90 	vmov	r3, s15
 8008bf8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008bfa:	e005      	b.n	8008c08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	61bb      	str	r3, [r7, #24]
      break;
 8008c00:	e002      	b.n	8008c08 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008c02:	4b07      	ldr	r3, [pc, #28]	@ (8008c20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008c04:	61bb      	str	r3, [r7, #24]
      break;
 8008c06:	bf00      	nop
  }

  return sysclockfreq;
 8008c08:	69bb      	ldr	r3, [r7, #24]
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3724      	adds	r7, #36	@ 0x24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	58024400 	.word	0x58024400
 8008c1c:	03d09000 	.word	0x03d09000
 8008c20:	003d0900 	.word	0x003d0900
 8008c24:	017d7840 	.word	0x017d7840
 8008c28:	46000000 	.word	0x46000000
 8008c2c:	4c742400 	.word	0x4c742400
 8008c30:	4a742400 	.word	0x4a742400
 8008c34:	4bbebc20 	.word	0x4bbebc20

08008c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c3e:	f7ff fe81 	bl	8008944 <HAL_RCC_GetSysClockFreq>
 8008c42:	4602      	mov	r2, r0
 8008c44:	4b10      	ldr	r3, [pc, #64]	@ (8008c88 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	0a1b      	lsrs	r3, r3, #8
 8008c4a:	f003 030f 	and.w	r3, r3, #15
 8008c4e:	490f      	ldr	r1, [pc, #60]	@ (8008c8c <HAL_RCC_GetHCLKFreq+0x54>)
 8008c50:	5ccb      	ldrb	r3, [r1, r3]
 8008c52:	f003 031f 	and.w	r3, r3, #31
 8008c56:	fa22 f303 	lsr.w	r3, r2, r3
 8008c5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c88 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	f003 030f 	and.w	r3, r3, #15
 8008c64:	4a09      	ldr	r2, [pc, #36]	@ (8008c8c <HAL_RCC_GetHCLKFreq+0x54>)
 8008c66:	5cd3      	ldrb	r3, [r2, r3]
 8008c68:	f003 031f 	and.w	r3, r3, #31
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c72:	4a07      	ldr	r2, [pc, #28]	@ (8008c90 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c76:	4a07      	ldr	r2, [pc, #28]	@ (8008c94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008c7c:	4b04      	ldr	r3, [pc, #16]	@ (8008c90 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	58024400 	.word	0x58024400
 8008c8c:	0800f988 	.word	0x0800f988
 8008c90:	24000058 	.word	0x24000058
 8008c94:	24000054 	.word	0x24000054

08008c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008c9c:	f7ff ffcc 	bl	8008c38 <HAL_RCC_GetHCLKFreq>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	4b06      	ldr	r3, [pc, #24]	@ (8008cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	091b      	lsrs	r3, r3, #4
 8008ca8:	f003 0307 	and.w	r3, r3, #7
 8008cac:	4904      	ldr	r1, [pc, #16]	@ (8008cc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008cae:	5ccb      	ldrb	r3, [r1, r3]
 8008cb0:	f003 031f 	and.w	r3, r3, #31
 8008cb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	58024400 	.word	0x58024400
 8008cc0:	0800f988 	.word	0x0800f988

08008cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008cc8:	f7ff ffb6 	bl	8008c38 <HAL_RCC_GetHCLKFreq>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	4b06      	ldr	r3, [pc, #24]	@ (8008ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008cd0:	69db      	ldr	r3, [r3, #28]
 8008cd2:	0a1b      	lsrs	r3, r3, #8
 8008cd4:	f003 0307 	and.w	r3, r3, #7
 8008cd8:	4904      	ldr	r1, [pc, #16]	@ (8008cec <HAL_RCC_GetPCLK2Freq+0x28>)
 8008cda:	5ccb      	ldrb	r3, [r1, r3]
 8008cdc:	f003 031f 	and.w	r3, r3, #31
 8008ce0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	58024400 	.word	0x58024400
 8008cec:	0800f988 	.word	0x0800f988

08008cf0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cf4:	b0c6      	sub	sp, #280	@ 0x118
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008d02:	2300      	movs	r3, #0
 8008d04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d10:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008d14:	2500      	movs	r5, #0
 8008d16:	ea54 0305 	orrs.w	r3, r4, r5
 8008d1a:	d049      	beq.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d26:	d02f      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008d28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d2c:	d828      	bhi.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008d2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d32:	d01a      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008d34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d38:	d822      	bhi.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d003      	beq.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008d3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d42:	d007      	beq.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008d44:	e01c      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d46:	4bab      	ldr	r3, [pc, #684]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4a:	4aaa      	ldr	r2, [pc, #680]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d52:	e01a      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d58:	3308      	adds	r3, #8
 8008d5a:	2102      	movs	r1, #2
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f002 fa49 	bl	800b1f4 <RCCEx_PLL2_Config>
 8008d62:	4603      	mov	r3, r0
 8008d64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d68:	e00f      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d6e:	3328      	adds	r3, #40	@ 0x28
 8008d70:	2102      	movs	r1, #2
 8008d72:	4618      	mov	r0, r3
 8008d74:	f002 faf0 	bl	800b358 <RCCEx_PLL3_Config>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d7e:	e004      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008d86:	e000      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10a      	bne.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008d92:	4b98      	ldr	r3, [pc, #608]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008da0:	4a94      	ldr	r2, [pc, #592]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008da2:	430b      	orrs	r3, r1
 8008da4:	6513      	str	r3, [r2, #80]	@ 0x50
 8008da6:	e003      	b.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008dac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008dbc:	f04f 0900 	mov.w	r9, #0
 8008dc0:	ea58 0309 	orrs.w	r3, r8, r9
 8008dc4:	d047      	beq.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dcc:	2b04      	cmp	r3, #4
 8008dce:	d82a      	bhi.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd6:	bf00      	nop
 8008dd8:	08008ded 	.word	0x08008ded
 8008ddc:	08008dfb 	.word	0x08008dfb
 8008de0:	08008e11 	.word	0x08008e11
 8008de4:	08008e2f 	.word	0x08008e2f
 8008de8:	08008e2f 	.word	0x08008e2f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dec:	4b81      	ldr	r3, [pc, #516]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df0:	4a80      	ldr	r2, [pc, #512]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008df2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008df6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008df8:	e01a      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dfe:	3308      	adds	r3, #8
 8008e00:	2100      	movs	r1, #0
 8008e02:	4618      	mov	r0, r3
 8008e04:	f002 f9f6 	bl	800b1f4 <RCCEx_PLL2_Config>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e0e:	e00f      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e14:	3328      	adds	r3, #40	@ 0x28
 8008e16:	2100      	movs	r1, #0
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f002 fa9d 	bl	800b358 <RCCEx_PLL3_Config>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e24:	e004      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008e2c:	e000      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008e2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10a      	bne.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e38:	4b6e      	ldr	r3, [pc, #440]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e3c:	f023 0107 	bic.w	r1, r3, #7
 8008e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e46:	4a6b      	ldr	r2, [pc, #428]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e48:	430b      	orrs	r3, r1
 8008e4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e4c:	e003      	b.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8008e62:	f04f 0b00 	mov.w	fp, #0
 8008e66:	ea5a 030b 	orrs.w	r3, sl, fp
 8008e6a:	d05b      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e74:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008e78:	d03b      	beq.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008e7a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008e7e:	d834      	bhi.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e84:	d037      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008e86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e8a:	d82e      	bhi.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e8c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008e90:	d033      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008e92:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008e96:	d828      	bhi.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e9c:	d01a      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008e9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008ea2:	d822      	bhi.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d003      	beq.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008ea8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008eac:	d007      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008eae:	e01c      	b.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eb0:	4b50      	ldr	r3, [pc, #320]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb4:	4a4f      	ldr	r2, [pc, #316]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008eb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008eba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ebc:	e01e      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ec2:	3308      	adds	r3, #8
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f002 f994 	bl	800b1f4 <RCCEx_PLL2_Config>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008ed2:	e013      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ed8:	3328      	adds	r3, #40	@ 0x28
 8008eda:	2100      	movs	r1, #0
 8008edc:	4618      	mov	r0, r3
 8008ede:	f002 fa3b 	bl	800b358 <RCCEx_PLL3_Config>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ee8:	e008      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ef0:	e004      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008ef2:	bf00      	nop
 8008ef4:	e002      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008ef6:	bf00      	nop
 8008ef8:	e000      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008efa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008efc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10b      	bne.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008f04:	4b3b      	ldr	r3, [pc, #236]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f08:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f14:	4a37      	ldr	r2, [pc, #220]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f16:	430b      	orrs	r3, r1
 8008f18:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f1a:	e003      	b.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008f30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008f34:	2300      	movs	r3, #0
 8008f36:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008f3a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008f3e:	460b      	mov	r3, r1
 8008f40:	4313      	orrs	r3, r2
 8008f42:	d05d      	beq.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008f4c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008f50:	d03b      	beq.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008f52:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008f56:	d834      	bhi.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f5c:	d037      	beq.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008f5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f62:	d82e      	bhi.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f64:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008f68:	d033      	beq.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008f6a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008f6e:	d828      	bhi.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f74:	d01a      	beq.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008f76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f7a:	d822      	bhi.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d003      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008f80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f84:	d007      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008f86:	e01c      	b.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f88:	4b1a      	ldr	r3, [pc, #104]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f8c:	4a19      	ldr	r2, [pc, #100]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f94:	e01e      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f9a:	3308      	adds	r3, #8
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f002 f928 	bl	800b1f4 <RCCEx_PLL2_Config>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008faa:	e013      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fb0:	3328      	adds	r3, #40	@ 0x28
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f002 f9cf 	bl	800b358 <RCCEx_PLL3_Config>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fc0:	e008      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008fc8:	e004      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008fca:	bf00      	nop
 8008fcc:	e002      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008fce:	bf00      	nop
 8008fd0:	e000      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10d      	bne.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008fdc:	4b05      	ldr	r3, [pc, #20]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fe0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fe8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008fec:	4a01      	ldr	r2, [pc, #4]	@ (8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fee:	430b      	orrs	r3, r1
 8008ff0:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ff2:	e005      	b.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008ff4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ff8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ffc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009008:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800900c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009010:	2300      	movs	r3, #0
 8009012:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009016:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800901a:	460b      	mov	r3, r1
 800901c:	4313      	orrs	r3, r2
 800901e:	d03a      	beq.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009026:	2b30      	cmp	r3, #48	@ 0x30
 8009028:	d01f      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800902a:	2b30      	cmp	r3, #48	@ 0x30
 800902c:	d819      	bhi.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800902e:	2b20      	cmp	r3, #32
 8009030:	d00c      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009032:	2b20      	cmp	r3, #32
 8009034:	d815      	bhi.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009036:	2b00      	cmp	r3, #0
 8009038:	d019      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800903a:	2b10      	cmp	r3, #16
 800903c:	d111      	bne.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800903e:	4baa      	ldr	r3, [pc, #680]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009042:	4aa9      	ldr	r2, [pc, #676]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009048:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800904a:	e011      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800904c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009050:	3308      	adds	r3, #8
 8009052:	2102      	movs	r1, #2
 8009054:	4618      	mov	r0, r3
 8009056:	f002 f8cd 	bl	800b1f4 <RCCEx_PLL2_Config>
 800905a:	4603      	mov	r3, r0
 800905c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009060:	e006      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009068:	e002      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800906a:	bf00      	nop
 800906c:	e000      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800906e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009070:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10a      	bne.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009078:	4b9b      	ldr	r3, [pc, #620]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800907a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800907c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009086:	4a98      	ldr	r2, [pc, #608]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009088:	430b      	orrs	r3, r1
 800908a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800908c:	e003      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800908e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009092:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800909a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80090a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80090a6:	2300      	movs	r3, #0
 80090a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80090ac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80090b0:	460b      	mov	r3, r1
 80090b2:	4313      	orrs	r3, r2
 80090b4:	d051      	beq.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80090b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090c0:	d035      	beq.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80090c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090c6:	d82e      	bhi.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80090c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80090cc:	d031      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80090ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80090d2:	d828      	bhi.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80090d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090d8:	d01a      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80090da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090de:	d822      	bhi.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d003      	beq.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80090e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090e8:	d007      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80090ea:	e01c      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090ec:	4b7e      	ldr	r3, [pc, #504]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f0:	4a7d      	ldr	r2, [pc, #500]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090f8:	e01c      	b.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090fe:	3308      	adds	r3, #8
 8009100:	2100      	movs	r1, #0
 8009102:	4618      	mov	r0, r3
 8009104:	f002 f876 	bl	800b1f4 <RCCEx_PLL2_Config>
 8009108:	4603      	mov	r3, r0
 800910a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800910e:	e011      	b.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009114:	3328      	adds	r3, #40	@ 0x28
 8009116:	2100      	movs	r1, #0
 8009118:	4618      	mov	r0, r3
 800911a:	f002 f91d 	bl	800b358 <RCCEx_PLL3_Config>
 800911e:	4603      	mov	r3, r0
 8009120:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009124:	e006      	b.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800912c:	e002      	b.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800912e:	bf00      	nop
 8009130:	e000      	b.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009132:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009134:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009138:	2b00      	cmp	r3, #0
 800913a:	d10a      	bne.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800913c:	4b6a      	ldr	r3, [pc, #424]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800913e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009140:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800914a:	4a67      	ldr	r2, [pc, #412]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800914c:	430b      	orrs	r3, r1
 800914e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009150:	e003      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009152:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009156:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800915a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800915e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009162:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009166:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800916a:	2300      	movs	r3, #0
 800916c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009170:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009174:	460b      	mov	r3, r1
 8009176:	4313      	orrs	r3, r2
 8009178:	d053      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800917a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800917e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009180:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009184:	d033      	beq.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009186:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800918a:	d82c      	bhi.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800918c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009190:	d02f      	beq.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009192:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009196:	d826      	bhi.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009198:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800919c:	d02b      	beq.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800919e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80091a2:	d820      	bhi.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80091a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091a8:	d012      	beq.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80091aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091ae:	d81a      	bhi.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d022      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80091b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091b8:	d115      	bne.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091be:	3308      	adds	r3, #8
 80091c0:	2101      	movs	r1, #1
 80091c2:	4618      	mov	r0, r3
 80091c4:	f002 f816 	bl	800b1f4 <RCCEx_PLL2_Config>
 80091c8:	4603      	mov	r3, r0
 80091ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80091ce:	e015      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091d4:	3328      	adds	r3, #40	@ 0x28
 80091d6:	2101      	movs	r1, #1
 80091d8:	4618      	mov	r0, r3
 80091da:	f002 f8bd 	bl	800b358 <RCCEx_PLL3_Config>
 80091de:	4603      	mov	r3, r0
 80091e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80091e4:	e00a      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80091ec:	e006      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091ee:	bf00      	nop
 80091f0:	e004      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091f2:	bf00      	nop
 80091f4:	e002      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091f6:	bf00      	nop
 80091f8:	e000      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009200:	2b00      	cmp	r3, #0
 8009202:	d10a      	bne.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009204:	4b38      	ldr	r3, [pc, #224]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009208:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800920c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009212:	4a35      	ldr	r2, [pc, #212]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009214:	430b      	orrs	r3, r1
 8009216:	6513      	str	r3, [r2, #80]	@ 0x50
 8009218:	e003      	b.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800921a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800921e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800922e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009232:	2300      	movs	r3, #0
 8009234:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009238:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800923c:	460b      	mov	r3, r1
 800923e:	4313      	orrs	r3, r2
 8009240:	d058      	beq.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009246:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800924a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800924e:	d033      	beq.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009250:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009254:	d82c      	bhi.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800925a:	d02f      	beq.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800925c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009260:	d826      	bhi.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009262:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009266:	d02b      	beq.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009268:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800926c:	d820      	bhi.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800926e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009272:	d012      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009274:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009278:	d81a      	bhi.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800927a:	2b00      	cmp	r3, #0
 800927c:	d022      	beq.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800927e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009282:	d115      	bne.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009288:	3308      	adds	r3, #8
 800928a:	2101      	movs	r1, #1
 800928c:	4618      	mov	r0, r3
 800928e:	f001 ffb1 	bl	800b1f4 <RCCEx_PLL2_Config>
 8009292:	4603      	mov	r3, r0
 8009294:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009298:	e015      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800929a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800929e:	3328      	adds	r3, #40	@ 0x28
 80092a0:	2101      	movs	r1, #1
 80092a2:	4618      	mov	r0, r3
 80092a4:	f002 f858 	bl	800b358 <RCCEx_PLL3_Config>
 80092a8:	4603      	mov	r3, r0
 80092aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80092ae:	e00a      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80092b6:	e006      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80092b8:	bf00      	nop
 80092ba:	e004      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80092bc:	bf00      	nop
 80092be:	e002      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80092c0:	bf00      	nop
 80092c2:	e000      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80092c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10e      	bne.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80092ce:	4b06      	ldr	r3, [pc, #24]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092d2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80092d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80092de:	4a02      	ldr	r2, [pc, #8]	@ (80092e8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092e0:	430b      	orrs	r3, r1
 80092e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80092e4:	e006      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80092e6:	bf00      	nop
 80092e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80092f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009300:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009304:	2300      	movs	r3, #0
 8009306:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800930a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800930e:	460b      	mov	r3, r1
 8009310:	4313      	orrs	r3, r2
 8009312:	d037      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009318:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800931a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800931e:	d00e      	beq.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009320:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009324:	d816      	bhi.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009326:	2b00      	cmp	r3, #0
 8009328:	d018      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800932a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800932e:	d111      	bne.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009330:	4bc4      	ldr	r3, [pc, #784]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009334:	4ac3      	ldr	r2, [pc, #780]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009336:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800933a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800933c:	e00f      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800933e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009342:	3308      	adds	r3, #8
 8009344:	2101      	movs	r1, #1
 8009346:	4618      	mov	r0, r3
 8009348:	f001 ff54 	bl	800b1f4 <RCCEx_PLL2_Config>
 800934c:	4603      	mov	r3, r0
 800934e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009352:	e004      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800935a:	e000      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800935c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800935e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009362:	2b00      	cmp	r3, #0
 8009364:	d10a      	bne.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009366:	4bb7      	ldr	r3, [pc, #732]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800936a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800936e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009372:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009374:	4ab3      	ldr	r2, [pc, #716]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009376:	430b      	orrs	r3, r1
 8009378:	6513      	str	r3, [r2, #80]	@ 0x50
 800937a:	e003      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800937c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009380:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009390:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009394:	2300      	movs	r3, #0
 8009396:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800939a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800939e:	460b      	mov	r3, r1
 80093a0:	4313      	orrs	r3, r2
 80093a2:	d039      	beq.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80093a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093aa:	2b03      	cmp	r3, #3
 80093ac:	d81c      	bhi.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80093ae:	a201      	add	r2, pc, #4	@ (adr r2, 80093b4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80093b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b4:	080093f1 	.word	0x080093f1
 80093b8:	080093c5 	.word	0x080093c5
 80093bc:	080093d3 	.word	0x080093d3
 80093c0:	080093f1 	.word	0x080093f1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093c4:	4b9f      	ldr	r3, [pc, #636]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c8:	4a9e      	ldr	r2, [pc, #632]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80093d0:	e00f      	b.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80093d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093d6:	3308      	adds	r3, #8
 80093d8:	2102      	movs	r1, #2
 80093da:	4618      	mov	r0, r3
 80093dc:	f001 ff0a 	bl	800b1f4 <RCCEx_PLL2_Config>
 80093e0:	4603      	mov	r3, r0
 80093e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80093e6:	e004      	b.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80093ee:	e000      	b.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80093f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10a      	bne.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80093fa:	4b92      	ldr	r3, [pc, #584]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093fe:	f023 0103 	bic.w	r1, r3, #3
 8009402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009408:	4a8e      	ldr	r2, [pc, #568]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800940a:	430b      	orrs	r3, r1
 800940c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800940e:	e003      	b.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009410:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009414:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800941c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009420:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009424:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009428:	2300      	movs	r3, #0
 800942a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800942e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009432:	460b      	mov	r3, r1
 8009434:	4313      	orrs	r3, r2
 8009436:	f000 8099 	beq.w	800956c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800943a:	4b83      	ldr	r3, [pc, #524]	@ (8009648 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a82      	ldr	r2, [pc, #520]	@ (8009648 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009444:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009446:	f7f9 fa87 	bl	8002958 <HAL_GetTick>
 800944a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800944e:	e00b      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009450:	f7f9 fa82 	bl	8002958 <HAL_GetTick>
 8009454:	4602      	mov	r2, r0
 8009456:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	2b64      	cmp	r3, #100	@ 0x64
 800945e:	d903      	bls.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009460:	2303      	movs	r3, #3
 8009462:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009466:	e005      	b.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009468:	4b77      	ldr	r3, [pc, #476]	@ (8009648 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009470:	2b00      	cmp	r3, #0
 8009472:	d0ed      	beq.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009474:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009478:	2b00      	cmp	r3, #0
 800947a:	d173      	bne.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800947c:	4b71      	ldr	r3, [pc, #452]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800947e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009484:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009488:	4053      	eors	r3, r2
 800948a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800948e:	2b00      	cmp	r3, #0
 8009490:	d015      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009492:	4b6c      	ldr	r3, [pc, #432]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009496:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800949a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800949e:	4b69      	ldr	r3, [pc, #420]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094a2:	4a68      	ldr	r2, [pc, #416]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094a8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80094aa:	4b66      	ldr	r3, [pc, #408]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094ae:	4a65      	ldr	r2, [pc, #404]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094b4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80094b6:	4a63      	ldr	r2, [pc, #396]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094bc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80094be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80094c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094ca:	d118      	bne.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094cc:	f7f9 fa44 	bl	8002958 <HAL_GetTick>
 80094d0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094d4:	e00d      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094d6:	f7f9 fa3f 	bl	8002958 <HAL_GetTick>
 80094da:	4602      	mov	r2, r0
 80094dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80094e0:	1ad2      	subs	r2, r2, r3
 80094e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d903      	bls.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80094ea:	2303      	movs	r3, #3
 80094ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80094f0:	e005      	b.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094f2:	4b54      	ldr	r3, [pc, #336]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094f6:	f003 0302 	and.w	r3, r3, #2
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d0eb      	beq.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80094fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009502:	2b00      	cmp	r3, #0
 8009504:	d129      	bne.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800950a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800950e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009512:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009516:	d10e      	bne.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009518:	4b4a      	ldr	r3, [pc, #296]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009524:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009528:	091a      	lsrs	r2, r3, #4
 800952a:	4b48      	ldr	r3, [pc, #288]	@ (800964c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800952c:	4013      	ands	r3, r2
 800952e:	4a45      	ldr	r2, [pc, #276]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009530:	430b      	orrs	r3, r1
 8009532:	6113      	str	r3, [r2, #16]
 8009534:	e005      	b.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009536:	4b43      	ldr	r3, [pc, #268]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	4a42      	ldr	r2, [pc, #264]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800953c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009540:	6113      	str	r3, [r2, #16]
 8009542:	4b40      	ldr	r3, [pc, #256]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009544:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800954a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800954e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009552:	4a3c      	ldr	r2, [pc, #240]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009554:	430b      	orrs	r3, r1
 8009556:	6713      	str	r3, [r2, #112]	@ 0x70
 8009558:	e008      	b.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800955a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800955e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8009562:	e003      	b.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009564:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009568:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800956c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009574:	f002 0301 	and.w	r3, r2, #1
 8009578:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800957c:	2300      	movs	r3, #0
 800957e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009582:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009586:	460b      	mov	r3, r1
 8009588:	4313      	orrs	r3, r2
 800958a:	f000 808f 	beq.w	80096ac <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800958e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009592:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009594:	2b28      	cmp	r3, #40	@ 0x28
 8009596:	d871      	bhi.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009598:	a201      	add	r2, pc, #4	@ (adr r2, 80095a0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800959a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959e:	bf00      	nop
 80095a0:	08009685 	.word	0x08009685
 80095a4:	0800967d 	.word	0x0800967d
 80095a8:	0800967d 	.word	0x0800967d
 80095ac:	0800967d 	.word	0x0800967d
 80095b0:	0800967d 	.word	0x0800967d
 80095b4:	0800967d 	.word	0x0800967d
 80095b8:	0800967d 	.word	0x0800967d
 80095bc:	0800967d 	.word	0x0800967d
 80095c0:	08009651 	.word	0x08009651
 80095c4:	0800967d 	.word	0x0800967d
 80095c8:	0800967d 	.word	0x0800967d
 80095cc:	0800967d 	.word	0x0800967d
 80095d0:	0800967d 	.word	0x0800967d
 80095d4:	0800967d 	.word	0x0800967d
 80095d8:	0800967d 	.word	0x0800967d
 80095dc:	0800967d 	.word	0x0800967d
 80095e0:	08009667 	.word	0x08009667
 80095e4:	0800967d 	.word	0x0800967d
 80095e8:	0800967d 	.word	0x0800967d
 80095ec:	0800967d 	.word	0x0800967d
 80095f0:	0800967d 	.word	0x0800967d
 80095f4:	0800967d 	.word	0x0800967d
 80095f8:	0800967d 	.word	0x0800967d
 80095fc:	0800967d 	.word	0x0800967d
 8009600:	08009685 	.word	0x08009685
 8009604:	0800967d 	.word	0x0800967d
 8009608:	0800967d 	.word	0x0800967d
 800960c:	0800967d 	.word	0x0800967d
 8009610:	0800967d 	.word	0x0800967d
 8009614:	0800967d 	.word	0x0800967d
 8009618:	0800967d 	.word	0x0800967d
 800961c:	0800967d 	.word	0x0800967d
 8009620:	08009685 	.word	0x08009685
 8009624:	0800967d 	.word	0x0800967d
 8009628:	0800967d 	.word	0x0800967d
 800962c:	0800967d 	.word	0x0800967d
 8009630:	0800967d 	.word	0x0800967d
 8009634:	0800967d 	.word	0x0800967d
 8009638:	0800967d 	.word	0x0800967d
 800963c:	0800967d 	.word	0x0800967d
 8009640:	08009685 	.word	0x08009685
 8009644:	58024400 	.word	0x58024400
 8009648:	58024800 	.word	0x58024800
 800964c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009654:	3308      	adds	r3, #8
 8009656:	2101      	movs	r1, #1
 8009658:	4618      	mov	r0, r3
 800965a:	f001 fdcb 	bl	800b1f4 <RCCEx_PLL2_Config>
 800965e:	4603      	mov	r3, r0
 8009660:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009664:	e00f      	b.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800966a:	3328      	adds	r3, #40	@ 0x28
 800966c:	2101      	movs	r1, #1
 800966e:	4618      	mov	r0, r3
 8009670:	f001 fe72 	bl	800b358 <RCCEx_PLL3_Config>
 8009674:	4603      	mov	r3, r0
 8009676:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800967a:	e004      	b.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009682:	e000      	b.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009686:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800968a:	2b00      	cmp	r3, #0
 800968c:	d10a      	bne.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800968e:	4bbf      	ldr	r3, [pc, #764]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009692:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800969a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800969c:	4abb      	ldr	r2, [pc, #748]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800969e:	430b      	orrs	r3, r1
 80096a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80096a2:	e003      	b.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80096ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b4:	f002 0302 	and.w	r3, r2, #2
 80096b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80096bc:	2300      	movs	r3, #0
 80096be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80096c2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80096c6:	460b      	mov	r3, r1
 80096c8:	4313      	orrs	r3, r2
 80096ca:	d041      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80096cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096d2:	2b05      	cmp	r3, #5
 80096d4:	d824      	bhi.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80096d6:	a201      	add	r2, pc, #4	@ (adr r2, 80096dc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80096d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096dc:	08009729 	.word	0x08009729
 80096e0:	080096f5 	.word	0x080096f5
 80096e4:	0800970b 	.word	0x0800970b
 80096e8:	08009729 	.word	0x08009729
 80096ec:	08009729 	.word	0x08009729
 80096f0:	08009729 	.word	0x08009729
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096f8:	3308      	adds	r3, #8
 80096fa:	2101      	movs	r1, #1
 80096fc:	4618      	mov	r0, r3
 80096fe:	f001 fd79 	bl	800b1f4 <RCCEx_PLL2_Config>
 8009702:	4603      	mov	r3, r0
 8009704:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009708:	e00f      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800970a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800970e:	3328      	adds	r3, #40	@ 0x28
 8009710:	2101      	movs	r1, #1
 8009712:	4618      	mov	r0, r3
 8009714:	f001 fe20 	bl	800b358 <RCCEx_PLL3_Config>
 8009718:	4603      	mov	r3, r0
 800971a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800971e:	e004      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009726:	e000      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800972a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10a      	bne.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009732:	4b96      	ldr	r3, [pc, #600]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009736:	f023 0107 	bic.w	r1, r3, #7
 800973a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800973e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009740:	4a92      	ldr	r2, [pc, #584]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009742:	430b      	orrs	r3, r1
 8009744:	6553      	str	r3, [r2, #84]	@ 0x54
 8009746:	e003      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009748:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800974c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009758:	f002 0304 	and.w	r3, r2, #4
 800975c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009760:	2300      	movs	r3, #0
 8009762:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009766:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800976a:	460b      	mov	r3, r1
 800976c:	4313      	orrs	r3, r2
 800976e:	d044      	beq.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009778:	2b05      	cmp	r3, #5
 800977a:	d825      	bhi.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800977c:	a201      	add	r2, pc, #4	@ (adr r2, 8009784 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800977e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009782:	bf00      	nop
 8009784:	080097d1 	.word	0x080097d1
 8009788:	0800979d 	.word	0x0800979d
 800978c:	080097b3 	.word	0x080097b3
 8009790:	080097d1 	.word	0x080097d1
 8009794:	080097d1 	.word	0x080097d1
 8009798:	080097d1 	.word	0x080097d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800979c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097a0:	3308      	adds	r3, #8
 80097a2:	2101      	movs	r1, #1
 80097a4:	4618      	mov	r0, r3
 80097a6:	f001 fd25 	bl	800b1f4 <RCCEx_PLL2_Config>
 80097aa:	4603      	mov	r3, r0
 80097ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80097b0:	e00f      	b.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097b6:	3328      	adds	r3, #40	@ 0x28
 80097b8:	2101      	movs	r1, #1
 80097ba:	4618      	mov	r0, r3
 80097bc:	f001 fdcc 	bl	800b358 <RCCEx_PLL3_Config>
 80097c0:	4603      	mov	r3, r0
 80097c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80097c6:	e004      	b.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80097ce:	e000      	b.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80097d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10b      	bne.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80097da:	4b6c      	ldr	r3, [pc, #432]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80097dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097de:	f023 0107 	bic.w	r1, r3, #7
 80097e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097ea:	4a68      	ldr	r2, [pc, #416]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80097ec:	430b      	orrs	r3, r1
 80097ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80097f0:	e003      	b.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80097fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009802:	f002 0320 	and.w	r3, r2, #32
 8009806:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800980a:	2300      	movs	r3, #0
 800980c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009810:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009814:	460b      	mov	r3, r1
 8009816:	4313      	orrs	r3, r2
 8009818:	d055      	beq.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800981a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800981e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009822:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009826:	d033      	beq.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009828:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800982c:	d82c      	bhi.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800982e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009832:	d02f      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009838:	d826      	bhi.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800983a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800983e:	d02b      	beq.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009840:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009844:	d820      	bhi.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009846:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800984a:	d012      	beq.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800984c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009850:	d81a      	bhi.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009852:	2b00      	cmp	r3, #0
 8009854:	d022      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009856:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800985a:	d115      	bne.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800985c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009860:	3308      	adds	r3, #8
 8009862:	2100      	movs	r1, #0
 8009864:	4618      	mov	r0, r3
 8009866:	f001 fcc5 	bl	800b1f4 <RCCEx_PLL2_Config>
 800986a:	4603      	mov	r3, r0
 800986c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009870:	e015      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009876:	3328      	adds	r3, #40	@ 0x28
 8009878:	2102      	movs	r1, #2
 800987a:	4618      	mov	r0, r3
 800987c:	f001 fd6c 	bl	800b358 <RCCEx_PLL3_Config>
 8009880:	4603      	mov	r3, r0
 8009882:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009886:	e00a      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800988e:	e006      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009890:	bf00      	nop
 8009892:	e004      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009894:	bf00      	nop
 8009896:	e002      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009898:	bf00      	nop
 800989a:	e000      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800989c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800989e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d10b      	bne.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80098a6:	4b39      	ldr	r3, [pc, #228]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80098a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098aa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80098ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098b6:	4a35      	ldr	r2, [pc, #212]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80098b8:	430b      	orrs	r3, r1
 80098ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80098bc:	e003      	b.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80098c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ce:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80098d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80098d6:	2300      	movs	r3, #0
 80098d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80098dc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80098e0:	460b      	mov	r3, r1
 80098e2:	4313      	orrs	r3, r2
 80098e4:	d058      	beq.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80098e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80098ee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80098f2:	d033      	beq.n	800995c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80098f4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80098f8:	d82c      	bhi.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098fe:	d02f      	beq.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009900:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009904:	d826      	bhi.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009906:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800990a:	d02b      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800990c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009910:	d820      	bhi.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009912:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009916:	d012      	beq.n	800993e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009918:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800991c:	d81a      	bhi.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800991e:	2b00      	cmp	r3, #0
 8009920:	d022      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009926:	d115      	bne.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800992c:	3308      	adds	r3, #8
 800992e:	2100      	movs	r1, #0
 8009930:	4618      	mov	r0, r3
 8009932:	f001 fc5f 	bl	800b1f4 <RCCEx_PLL2_Config>
 8009936:	4603      	mov	r3, r0
 8009938:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800993c:	e015      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800993e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009942:	3328      	adds	r3, #40	@ 0x28
 8009944:	2102      	movs	r1, #2
 8009946:	4618      	mov	r0, r3
 8009948:	f001 fd06 	bl	800b358 <RCCEx_PLL3_Config>
 800994c:	4603      	mov	r3, r0
 800994e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009952:	e00a      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800995a:	e006      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800995c:	bf00      	nop
 800995e:	e004      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009960:	bf00      	nop
 8009962:	e002      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009964:	bf00      	nop
 8009966:	e000      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800996a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800996e:	2b00      	cmp	r3, #0
 8009970:	d10e      	bne.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009972:	4b06      	ldr	r3, [pc, #24]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009976:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800997a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800997e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009982:	4a02      	ldr	r2, [pc, #8]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009984:	430b      	orrs	r3, r1
 8009986:	6593      	str	r3, [r2, #88]	@ 0x58
 8009988:	e006      	b.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800998a:	bf00      	nop
 800998c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009990:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009994:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800999c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80099a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80099a8:	2300      	movs	r3, #0
 80099aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80099ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80099b2:	460b      	mov	r3, r1
 80099b4:	4313      	orrs	r3, r2
 80099b6:	d055      	beq.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80099b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80099c0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80099c4:	d033      	beq.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80099c6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80099ca:	d82c      	bhi.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80099cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099d0:	d02f      	beq.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80099d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099d6:	d826      	bhi.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80099d8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80099dc:	d02b      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80099de:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80099e2:	d820      	bhi.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80099e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099e8:	d012      	beq.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80099ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099ee:	d81a      	bhi.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d022      	beq.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80099f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099f8:	d115      	bne.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099fe:	3308      	adds	r3, #8
 8009a00:	2100      	movs	r1, #0
 8009a02:	4618      	mov	r0, r3
 8009a04:	f001 fbf6 	bl	800b1f4 <RCCEx_PLL2_Config>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009a0e:	e015      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a14:	3328      	adds	r3, #40	@ 0x28
 8009a16:	2102      	movs	r1, #2
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f001 fc9d 	bl	800b358 <RCCEx_PLL3_Config>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009a24:	e00a      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a2c:	e006      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009a2e:	bf00      	nop
 8009a30:	e004      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009a32:	bf00      	nop
 8009a34:	e002      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009a36:	bf00      	nop
 8009a38:	e000      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009a3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d10b      	bne.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009a44:	4ba0      	ldr	r3, [pc, #640]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a48:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a54:	4a9c      	ldr	r2, [pc, #624]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a56:	430b      	orrs	r3, r1
 8009a58:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a5a:	e003      	b.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6c:	f002 0308 	and.w	r3, r2, #8
 8009a70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009a74:	2300      	movs	r3, #0
 8009a76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a7a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009a7e:	460b      	mov	r3, r1
 8009a80:	4313      	orrs	r3, r2
 8009a82:	d01e      	beq.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a90:	d10c      	bne.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a96:	3328      	adds	r3, #40	@ 0x28
 8009a98:	2102      	movs	r1, #2
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f001 fc5c 	bl	800b358 <RCCEx_PLL3_Config>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d002      	beq.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009aac:	4b86      	ldr	r3, [pc, #536]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ab0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009abc:	4a82      	ldr	r2, [pc, #520]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009abe:	430b      	orrs	r3, r1
 8009ac0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aca:	f002 0310 	and.w	r3, r2, #16
 8009ace:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ad8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009adc:	460b      	mov	r3, r1
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	d01e      	beq.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009aea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009aee:	d10c      	bne.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009af4:	3328      	adds	r3, #40	@ 0x28
 8009af6:	2102      	movs	r1, #2
 8009af8:	4618      	mov	r0, r3
 8009afa:	f001 fc2d 	bl	800b358 <RCCEx_PLL3_Config>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d002      	beq.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009b0a:	4b6f      	ldr	r3, [pc, #444]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b0e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b1a:	4a6b      	ldr	r2, [pc, #428]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b1c:	430b      	orrs	r3, r1
 8009b1e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b28:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009b2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009b2e:	2300      	movs	r3, #0
 8009b30:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009b32:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009b36:	460b      	mov	r3, r1
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	d03e      	beq.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009b44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b48:	d022      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009b4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b4e:	d81b      	bhi.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d003      	beq.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b58:	d00b      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009b5a:	e015      	b.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b60:	3308      	adds	r3, #8
 8009b62:	2100      	movs	r1, #0
 8009b64:	4618      	mov	r0, r3
 8009b66:	f001 fb45 	bl	800b1f4 <RCCEx_PLL2_Config>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b70:	e00f      	b.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b76:	3328      	adds	r3, #40	@ 0x28
 8009b78:	2102      	movs	r1, #2
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f001 fbec 	bl	800b358 <RCCEx_PLL3_Config>
 8009b80:	4603      	mov	r3, r0
 8009b82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b86:	e004      	b.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b8e:	e000      	b.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d10b      	bne.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009b9a:	4b4b      	ldr	r3, [pc, #300]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b9e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ba6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009baa:	4a47      	ldr	r2, [pc, #284]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bac:	430b      	orrs	r3, r1
 8009bae:	6593      	str	r3, [r2, #88]	@ 0x58
 8009bb0:	e003      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009bb6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009bc6:	673b      	str	r3, [r7, #112]	@ 0x70
 8009bc8:	2300      	movs	r3, #0
 8009bca:	677b      	str	r3, [r7, #116]	@ 0x74
 8009bcc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	d03b      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bde:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009be2:	d01f      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009be4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009be8:	d818      	bhi.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009bea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bee:	d003      	beq.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009bf0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009bf4:	d007      	beq.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009bf6:	e011      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bf8:	4b33      	ldr	r3, [pc, #204]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bfc:	4a32      	ldr	r2, [pc, #200]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009c04:	e00f      	b.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c0a:	3328      	adds	r3, #40	@ 0x28
 8009c0c:	2101      	movs	r1, #1
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f001 fba2 	bl	800b358 <RCCEx_PLL3_Config>
 8009c14:	4603      	mov	r3, r0
 8009c16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009c1a:	e004      	b.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c22:	e000      	b.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10b      	bne.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009c2e:	4b26      	ldr	r3, [pc, #152]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c32:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c3e:	4a22      	ldr	r2, [pc, #136]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c40:	430b      	orrs	r3, r1
 8009c42:	6553      	str	r3, [r2, #84]	@ 0x54
 8009c44:	e003      	b.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c4a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c56:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009c5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c60:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009c64:	460b      	mov	r3, r1
 8009c66:	4313      	orrs	r3, r2
 8009c68:	d034      	beq.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d003      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c78:	d007      	beq.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009c7a:	e011      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c7c:	4b12      	ldr	r3, [pc, #72]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c80:	4a11      	ldr	r2, [pc, #68]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c88:	e00e      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c8e:	3308      	adds	r3, #8
 8009c90:	2102      	movs	r1, #2
 8009c92:	4618      	mov	r0, r3
 8009c94:	f001 faae 	bl	800b1f4 <RCCEx_PLL2_Config>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c9e:	e003      	b.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009ca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ca8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d10d      	bne.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009cb0:	4b05      	ldr	r3, [pc, #20]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009cb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cb4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cbe:	4a02      	ldr	r2, [pc, #8]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009cc0:	430b      	orrs	r3, r1
 8009cc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009cc4:	e006      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009cc6:	bf00      	nop
 8009cc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ccc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009cd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cdc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009ce0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ce6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009cea:	460b      	mov	r3, r1
 8009cec:	4313      	orrs	r3, r2
 8009cee:	d00c      	beq.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cf4:	3328      	adds	r3, #40	@ 0x28
 8009cf6:	2102      	movs	r1, #2
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f001 fb2d 	bl	800b358 <RCCEx_PLL3_Config>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d002      	beq.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d12:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009d16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d18:	2300      	movs	r3, #0
 8009d1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d1c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009d20:	460b      	mov	r3, r1
 8009d22:	4313      	orrs	r3, r2
 8009d24:	d036      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d30:	d018      	beq.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009d32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d36:	d811      	bhi.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d3c:	d014      	beq.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009d3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d42:	d80b      	bhi.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d011      	beq.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009d48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d4c:	d106      	bne.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d4e:	4bb7      	ldr	r3, [pc, #732]	@ (800a02c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d52:	4ab6      	ldr	r2, [pc, #728]	@ (800a02c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009d5a:	e008      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d62:	e004      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009d64:	bf00      	nop
 8009d66:	e002      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009d68:	bf00      	nop
 8009d6a:	e000      	b.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009d6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10a      	bne.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d76:	4bad      	ldr	r3, [pc, #692]	@ (800a02c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d84:	4aa9      	ldr	r2, [pc, #676]	@ (800a02c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d86:	430b      	orrs	r3, r1
 8009d88:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d8a:	e003      	b.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009da0:	653b      	str	r3, [r7, #80]	@ 0x50
 8009da2:	2300      	movs	r3, #0
 8009da4:	657b      	str	r3, [r7, #84]	@ 0x54
 8009da6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009daa:	460b      	mov	r3, r1
 8009dac:	4313      	orrs	r3, r2
 8009dae:	d009      	beq.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009db0:	4b9e      	ldr	r3, [pc, #632]	@ (800a02c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009db4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dbe:	4a9b      	ldr	r2, [pc, #620]	@ (800a02c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dc0:	430b      	orrs	r3, r1
 8009dc2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dcc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dd6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009dda:	460b      	mov	r3, r1
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	d009      	beq.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009de0:	4b92      	ldr	r3, [pc, #584]	@ (800a02c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009de4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009dee:	4a8f      	ldr	r2, [pc, #572]	@ (800a02c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009df0:	430b      	orrs	r3, r1
 8009df2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009e00:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e02:	2300      	movs	r3, #0
 8009e04:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e06:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	d00e      	beq.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009e10:	4b86      	ldr	r3, [pc, #536]	@ (800a02c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	4a85      	ldr	r2, [pc, #532]	@ (800a02c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e16:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009e1a:	6113      	str	r3, [r2, #16]
 8009e1c:	4b83      	ldr	r3, [pc, #524]	@ (800a02c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e1e:	6919      	ldr	r1, [r3, #16]
 8009e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009e28:	4a80      	ldr	r2, [pc, #512]	@ (800a02c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e2a:	430b      	orrs	r3, r1
 8009e2c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e36:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e40:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009e44:	460b      	mov	r3, r1
 8009e46:	4313      	orrs	r3, r2
 8009e48:	d009      	beq.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009e4a:	4b78      	ldr	r3, [pc, #480]	@ (800a02c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e4e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e58:	4a74      	ldr	r2, [pc, #464]	@ (800a02c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e5a:	430b      	orrs	r3, r1
 8009e5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e66:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009e6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e70:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009e74:	460b      	mov	r3, r1
 8009e76:	4313      	orrs	r3, r2
 8009e78:	d00a      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009e7a:	4b6c      	ldr	r3, [pc, #432]	@ (800a02c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e7e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e8a:	4a68      	ldr	r2, [pc, #416]	@ (800a02c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e8c:	430b      	orrs	r3, r1
 8009e8e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	2100      	movs	r1, #0
 8009e9a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009e9c:	f003 0301 	and.w	r3, r3, #1
 8009ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ea2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	d011      	beq.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eb0:	3308      	adds	r3, #8
 8009eb2:	2100      	movs	r1, #0
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f001 f99d 	bl	800b1f4 <RCCEx_PLL2_Config>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009ec0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d003      	beq.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ec8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ecc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed8:	2100      	movs	r1, #0
 8009eda:	6239      	str	r1, [r7, #32]
 8009edc:	f003 0302 	and.w	r3, r3, #2
 8009ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ee2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	d011      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ef0:	3308      	adds	r3, #8
 8009ef2:	2101      	movs	r1, #1
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f001 f97d 	bl	800b1f4 <RCCEx_PLL2_Config>
 8009efa:	4603      	mov	r3, r0
 8009efc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009f00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d003      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f18:	2100      	movs	r1, #0
 8009f1a:	61b9      	str	r1, [r7, #24]
 8009f1c:	f003 0304 	and.w	r3, r3, #4
 8009f20:	61fb      	str	r3, [r7, #28]
 8009f22:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009f26:	460b      	mov	r3, r1
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	d011      	beq.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f30:	3308      	adds	r3, #8
 8009f32:	2102      	movs	r1, #2
 8009f34:	4618      	mov	r0, r3
 8009f36:	f001 f95d 	bl	800b1f4 <RCCEx_PLL2_Config>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009f40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d003      	beq.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f58:	2100      	movs	r1, #0
 8009f5a:	6139      	str	r1, [r7, #16]
 8009f5c:	f003 0308 	and.w	r3, r3, #8
 8009f60:	617b      	str	r3, [r7, #20]
 8009f62:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009f66:	460b      	mov	r3, r1
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	d011      	beq.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f70:	3328      	adds	r3, #40	@ 0x28
 8009f72:	2100      	movs	r1, #0
 8009f74:	4618      	mov	r0, r3
 8009f76:	f001 f9ef 	bl	800b358 <RCCEx_PLL3_Config>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8009f80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d003      	beq.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f98:	2100      	movs	r1, #0
 8009f9a:	60b9      	str	r1, [r7, #8]
 8009f9c:	f003 0310 	and.w	r3, r3, #16
 8009fa0:	60fb      	str	r3, [r7, #12]
 8009fa2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	d011      	beq.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fb0:	3328      	adds	r3, #40	@ 0x28
 8009fb2:	2101      	movs	r1, #1
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f001 f9cf 	bl	800b358 <RCCEx_PLL3_Config>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009fc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d003      	beq.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fcc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd8:	2100      	movs	r1, #0
 8009fda:	6039      	str	r1, [r7, #0]
 8009fdc:	f003 0320 	and.w	r3, r3, #32
 8009fe0:	607b      	str	r3, [r7, #4]
 8009fe2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	d011      	beq.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ff0:	3328      	adds	r3, #40	@ 0x28
 8009ff2:	2102      	movs	r1, #2
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f001 f9af 	bl	800b358 <RCCEx_PLL3_Config>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a000:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a004:	2b00      	cmp	r3, #0
 800a006:	d003      	beq.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a008:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a00c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800a010:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800a014:	2b00      	cmp	r3, #0
 800a016:	d101      	bne.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a018:	2300      	movs	r3, #0
 800a01a:	e000      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
}
 800a01e:	4618      	mov	r0, r3
 800a020:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a024:	46bd      	mov	sp, r7
 800a026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a02a:	bf00      	nop
 800a02c:	58024400 	.word	0x58024400

0800a030 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b090      	sub	sp, #64	@ 0x40
 800a034:	af00      	add	r7, sp, #0
 800a036:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a03a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a03e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a042:	430b      	orrs	r3, r1
 800a044:	f040 8094 	bne.w	800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a048:	4b9b      	ldr	r3, [pc, #620]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a04a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a04c:	f003 0307 	and.w	r3, r3, #7
 800a050:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a054:	2b04      	cmp	r3, #4
 800a056:	f200 8087 	bhi.w	800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a05a:	a201      	add	r2, pc, #4	@ (adr r2, 800a060 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a060:	0800a075 	.word	0x0800a075
 800a064:	0800a09d 	.word	0x0800a09d
 800a068:	0800a0c5 	.word	0x0800a0c5
 800a06c:	0800a161 	.word	0x0800a161
 800a070:	0800a0ed 	.word	0x0800a0ed
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a074:	4b90      	ldr	r3, [pc, #576]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a07c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a080:	d108      	bne.n	800a094 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a086:	4618      	mov	r0, r3
 800a088:	f000 ff62 	bl	800af50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a08e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a090:	f000 bc93 	b.w	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a094:	2300      	movs	r3, #0
 800a096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a098:	f000 bc8f 	b.w	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a09c:	4b86      	ldr	r3, [pc, #536]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0a8:	d108      	bne.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0aa:	f107 0318 	add.w	r3, r7, #24
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 fca6 	bl	800aa00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0b8:	f000 bc7f 	b.w	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0c0:	f000 bc7b 	b.w	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0c4:	4b7c      	ldr	r3, [pc, #496]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0d0:	d108      	bne.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0d2:	f107 030c 	add.w	r3, r7, #12
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f000 fde6 	bl	800aca8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0e0:	f000 bc6b 	b.w	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0e8:	f000 bc67 	b.w	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0ec:	4b72      	ldr	r3, [pc, #456]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a0f4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0f6:	4b70      	ldr	r3, [pc, #448]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f003 0304 	and.w	r3, r3, #4
 800a0fe:	2b04      	cmp	r3, #4
 800a100:	d10c      	bne.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a104:	2b00      	cmp	r3, #0
 800a106:	d109      	bne.n	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a108:	4b6b      	ldr	r3, [pc, #428]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	08db      	lsrs	r3, r3, #3
 800a10e:	f003 0303 	and.w	r3, r3, #3
 800a112:	4a6a      	ldr	r2, [pc, #424]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a114:	fa22 f303 	lsr.w	r3, r2, r3
 800a118:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a11a:	e01f      	b.n	800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a11c:	4b66      	ldr	r3, [pc, #408]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a124:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a128:	d106      	bne.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a12a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a12c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a130:	d102      	bne.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a132:	4b63      	ldr	r3, [pc, #396]	@ (800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a134:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a136:	e011      	b.n	800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a138:	4b5f      	ldr	r3, [pc, #380]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a140:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a144:	d106      	bne.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a148:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a14c:	d102      	bne.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a14e:	4b5d      	ldr	r3, [pc, #372]	@ (800a2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a150:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a152:	e003      	b.n	800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a154:	2300      	movs	r3, #0
 800a156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a158:	f000 bc2f 	b.w	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a15c:	f000 bc2d 	b.w	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a160:	4b59      	ldr	r3, [pc, #356]	@ (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a164:	f000 bc29 	b.w	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a168:	2300      	movs	r3, #0
 800a16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a16c:	f000 bc25 	b.w	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a170:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a174:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a178:	430b      	orrs	r3, r1
 800a17a:	f040 80a7 	bne.w	800a2cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a17e:	4b4e      	ldr	r3, [pc, #312]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a182:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a186:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a18e:	d054      	beq.n	800a23a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a192:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a196:	f200 808b 	bhi.w	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a19c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a1a0:	f000 8083 	beq.w	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a1aa:	f200 8081 	bhi.w	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a1b4:	d02f      	beq.n	800a216 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a1bc:	d878      	bhi.n	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d004      	beq.n	800a1ce <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a1ca:	d012      	beq.n	800a1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a1cc:	e070      	b.n	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1ce:	4b3a      	ldr	r3, [pc, #232]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1da:	d107      	bne.n	800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f000 feb5 	bl	800af50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1ea:	e3e6      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1f0:	e3e3      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1f2:	4b31      	ldr	r3, [pc, #196]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1fe:	d107      	bne.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a200:	f107 0318 	add.w	r3, r7, #24
 800a204:	4618      	mov	r0, r3
 800a206:	f000 fbfb 	bl	800aa00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a20e:	e3d4      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a210:	2300      	movs	r3, #0
 800a212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a214:	e3d1      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a216:	4b28      	ldr	r3, [pc, #160]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a21e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a222:	d107      	bne.n	800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a224:	f107 030c 	add.w	r3, r7, #12
 800a228:	4618      	mov	r0, r3
 800a22a:	f000 fd3d 	bl	800aca8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a232:	e3c2      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a234:	2300      	movs	r3, #0
 800a236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a238:	e3bf      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a23a:	4b1f      	ldr	r3, [pc, #124]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a23c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a23e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a242:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a244:	4b1c      	ldr	r3, [pc, #112]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f003 0304 	and.w	r3, r3, #4
 800a24c:	2b04      	cmp	r3, #4
 800a24e:	d10c      	bne.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a252:	2b00      	cmp	r3, #0
 800a254:	d109      	bne.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a256:	4b18      	ldr	r3, [pc, #96]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	08db      	lsrs	r3, r3, #3
 800a25c:	f003 0303 	and.w	r3, r3, #3
 800a260:	4a16      	ldr	r2, [pc, #88]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a262:	fa22 f303 	lsr.w	r3, r2, r3
 800a266:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a268:	e01e      	b.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a26a:	4b13      	ldr	r3, [pc, #76]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a272:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a276:	d106      	bne.n	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a27a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a27e:	d102      	bne.n	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a280:	4b0f      	ldr	r3, [pc, #60]	@ (800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a282:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a284:	e010      	b.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a286:	4b0c      	ldr	r3, [pc, #48]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a28e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a292:	d106      	bne.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a296:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a29a:	d102      	bne.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a29c:	4b09      	ldr	r3, [pc, #36]	@ (800a2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a29e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2a0:	e002      	b.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a2a6:	e388      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a2a8:	e387      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a2aa:	4b07      	ldr	r3, [pc, #28]	@ (800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a2ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2ae:	e384      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2b4:	e381      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a2b6:	bf00      	nop
 800a2b8:	58024400 	.word	0x58024400
 800a2bc:	03d09000 	.word	0x03d09000
 800a2c0:	003d0900 	.word	0x003d0900
 800a2c4:	017d7840 	.word	0x017d7840
 800a2c8:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a2cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2d0:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a2d4:	430b      	orrs	r3, r1
 800a2d6:	f040 809c 	bne.w	800a412 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a2da:	4b9e      	ldr	r3, [pc, #632]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a2dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2de:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a2e2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a2e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2ea:	d054      	beq.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a2ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2f2:	f200 808b 	bhi.w	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a2fc:	f000 8083 	beq.w	800a406 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a302:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a306:	f200 8081 	bhi.w	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a30c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a310:	d02f      	beq.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a314:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a318:	d878      	bhi.n	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d004      	beq.n	800a32a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a322:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a326:	d012      	beq.n	800a34e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a328:	e070      	b.n	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a32a:	4b8a      	ldr	r3, [pc, #552]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a332:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a336:	d107      	bne.n	800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a338:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a33c:	4618      	mov	r0, r3
 800a33e:	f000 fe07 	bl	800af50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a346:	e338      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a348:	2300      	movs	r3, #0
 800a34a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a34c:	e335      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a34e:	4b81      	ldr	r3, [pc, #516]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a356:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a35a:	d107      	bne.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a35c:	f107 0318 	add.w	r3, r7, #24
 800a360:	4618      	mov	r0, r3
 800a362:	f000 fb4d 	bl	800aa00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a36a:	e326      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a36c:	2300      	movs	r3, #0
 800a36e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a370:	e323      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a372:	4b78      	ldr	r3, [pc, #480]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a37a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a37e:	d107      	bne.n	800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a380:	f107 030c 	add.w	r3, r7, #12
 800a384:	4618      	mov	r0, r3
 800a386:	f000 fc8f 	bl	800aca8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a38e:	e314      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a390:	2300      	movs	r3, #0
 800a392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a394:	e311      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a396:	4b6f      	ldr	r3, [pc, #444]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a39a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a39e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a3a0:	4b6c      	ldr	r3, [pc, #432]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f003 0304 	and.w	r3, r3, #4
 800a3a8:	2b04      	cmp	r3, #4
 800a3aa:	d10c      	bne.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a3ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d109      	bne.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3b2:	4b68      	ldr	r3, [pc, #416]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	08db      	lsrs	r3, r3, #3
 800a3b8:	f003 0303 	and.w	r3, r3, #3
 800a3bc:	4a66      	ldr	r2, [pc, #408]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a3be:	fa22 f303 	lsr.w	r3, r2, r3
 800a3c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3c4:	e01e      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3c6:	4b63      	ldr	r3, [pc, #396]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3d2:	d106      	bne.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a3d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3da:	d102      	bne.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a3dc:	4b5f      	ldr	r3, [pc, #380]	@ (800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a3de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3e0:	e010      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3e2:	4b5c      	ldr	r3, [pc, #368]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3ee:	d106      	bne.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a3f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3f6:	d102      	bne.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3f8:	4b59      	ldr	r3, [pc, #356]	@ (800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3fc:	e002      	b.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3fe:	2300      	movs	r3, #0
 800a400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a402:	e2da      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a404:	e2d9      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a406:	4b57      	ldr	r3, [pc, #348]	@ (800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a40a:	e2d6      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a40c:	2300      	movs	r3, #0
 800a40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a410:	e2d3      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a412:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a416:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a41a:	430b      	orrs	r3, r1
 800a41c:	f040 80a7 	bne.w	800a56e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a420:	4b4c      	ldr	r3, [pc, #304]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a424:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a428:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a42c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a430:	d055      	beq.n	800a4de <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a434:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a438:	f200 8096 	bhi.w	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a43e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a442:	f000 8084 	beq.w	800a54e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a448:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a44c:	f200 808c 	bhi.w	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a456:	d030      	beq.n	800a4ba <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a45a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a45e:	f200 8083 	bhi.w	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a464:	2b00      	cmp	r3, #0
 800a466:	d004      	beq.n	800a472 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800a468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a46a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a46e:	d012      	beq.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a470:	e07a      	b.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a472:	4b38      	ldr	r3, [pc, #224]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a47a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a47e:	d107      	bne.n	800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a480:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a484:	4618      	mov	r0, r3
 800a486:	f000 fd63 	bl	800af50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a48c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a48e:	e294      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a490:	2300      	movs	r3, #0
 800a492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a494:	e291      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a496:	4b2f      	ldr	r3, [pc, #188]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a49e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4a2:	d107      	bne.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4a4:	f107 0318 	add.w	r3, r7, #24
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f000 faa9 	bl	800aa00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4b2:	e282      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4b8:	e27f      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4ba:	4b26      	ldr	r3, [pc, #152]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4c6:	d107      	bne.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4c8:	f107 030c 	add.w	r3, r7, #12
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f000 fbeb 	bl	800aca8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4d6:	e270      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4dc:	e26d      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a4de:	4b1d      	ldr	r3, [pc, #116]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a4e6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4e8:	4b1a      	ldr	r3, [pc, #104]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 0304 	and.w	r3, r3, #4
 800a4f0:	2b04      	cmp	r3, #4
 800a4f2:	d10c      	bne.n	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800a4f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d109      	bne.n	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4fa:	4b16      	ldr	r3, [pc, #88]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	08db      	lsrs	r3, r3, #3
 800a500:	f003 0303 	and.w	r3, r3, #3
 800a504:	4a14      	ldr	r2, [pc, #80]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a506:	fa22 f303 	lsr.w	r3, r2, r3
 800a50a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a50c:	e01e      	b.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a50e:	4b11      	ldr	r3, [pc, #68]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a516:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a51a:	d106      	bne.n	800a52a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a51c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a51e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a522:	d102      	bne.n	800a52a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a524:	4b0d      	ldr	r3, [pc, #52]	@ (800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a526:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a528:	e010      	b.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a52a:	4b0a      	ldr	r3, [pc, #40]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a532:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a536:	d106      	bne.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800a538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a53a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a53e:	d102      	bne.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a540:	4b07      	ldr	r3, [pc, #28]	@ (800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a542:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a544:	e002      	b.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a546:	2300      	movs	r3, #0
 800a548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a54a:	e236      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a54c:	e235      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a54e:	4b05      	ldr	r3, [pc, #20]	@ (800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a552:	e232      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a554:	58024400 	.word	0x58024400
 800a558:	03d09000 	.word	0x03d09000
 800a55c:	003d0900 	.word	0x003d0900
 800a560:	017d7840 	.word	0x017d7840
 800a564:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a568:	2300      	movs	r3, #0
 800a56a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a56c:	e225      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a56e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a572:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a576:	430b      	orrs	r3, r1
 800a578:	f040 8085 	bne.w	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a57c:	4b9c      	ldr	r3, [pc, #624]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a57e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a580:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a584:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a588:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a58c:	d06b      	beq.n	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a590:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a594:	d874      	bhi.n	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a598:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a59c:	d056      	beq.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a5a4:	d86c      	bhi.n	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a5ac:	d03b      	beq.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a5ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a5b4:	d864      	bhi.n	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5bc:	d021      	beq.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a5be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5c4:	d85c      	bhi.n	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d004      	beq.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5d2:	d004      	beq.n	800a5de <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a5d4:	e054      	b.n	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a5d6:	f7fe fb5f 	bl	8008c98 <HAL_RCC_GetPCLK1Freq>
 800a5da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a5dc:	e1ed      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5de:	4b84      	ldr	r3, [pc, #528]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5ea:	d107      	bne.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5ec:	f107 0318 	add.w	r3, r7, #24
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f000 fa05 	bl	800aa00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5fa:	e1de      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a600:	e1db      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a602:	4b7b      	ldr	r3, [pc, #492]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a60a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a60e:	d107      	bne.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a610:	f107 030c 	add.w	r3, r7, #12
 800a614:	4618      	mov	r0, r3
 800a616:	f000 fb47 	bl	800aca8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a61e:	e1cc      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a620:	2300      	movs	r3, #0
 800a622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a624:	e1c9      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a626:	4b72      	ldr	r3, [pc, #456]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f003 0304 	and.w	r3, r3, #4
 800a62e:	2b04      	cmp	r3, #4
 800a630:	d109      	bne.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a632:	4b6f      	ldr	r3, [pc, #444]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	08db      	lsrs	r3, r3, #3
 800a638:	f003 0303 	and.w	r3, r3, #3
 800a63c:	4a6d      	ldr	r2, [pc, #436]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a63e:	fa22 f303 	lsr.w	r3, r2, r3
 800a642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a644:	e1b9      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a646:	2300      	movs	r3, #0
 800a648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a64a:	e1b6      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a64c:	4b68      	ldr	r3, [pc, #416]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a654:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a658:	d102      	bne.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a65a:	4b67      	ldr	r3, [pc, #412]	@ (800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a65c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a65e:	e1ac      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a660:	2300      	movs	r3, #0
 800a662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a664:	e1a9      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a666:	4b62      	ldr	r3, [pc, #392]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a66e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a672:	d102      	bne.n	800a67a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a674:	4b61      	ldr	r3, [pc, #388]	@ (800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a678:	e19f      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a67a:	2300      	movs	r3, #0
 800a67c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a67e:	e19c      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a680:	2300      	movs	r3, #0
 800a682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a684:	e199      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a686:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a68a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a68e:	430b      	orrs	r3, r1
 800a690:	d173      	bne.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a692:	4b57      	ldr	r3, [pc, #348]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a696:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a69a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a69e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6a2:	d02f      	beq.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6aa:	d863      	bhi.n	800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d004      	beq.n	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a6b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6b8:	d012      	beq.n	800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a6ba:	e05b      	b.n	800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6bc:	4b4c      	ldr	r3, [pc, #304]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6c8:	d107      	bne.n	800a6da <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ca:	f107 0318 	add.w	r3, r7, #24
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f000 f996 	bl	800aa00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6d8:	e16f      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6de:	e16c      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6e0:	4b43      	ldr	r3, [pc, #268]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6ec:	d107      	bne.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6ee:	f107 030c 	add.w	r3, r7, #12
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f000 fad8 	bl	800aca8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6fc:	e15d      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a6fe:	2300      	movs	r3, #0
 800a700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a702:	e15a      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a704:	4b3a      	ldr	r3, [pc, #232]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a708:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a70c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a70e:	4b38      	ldr	r3, [pc, #224]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 0304 	and.w	r3, r3, #4
 800a716:	2b04      	cmp	r3, #4
 800a718:	d10c      	bne.n	800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a71a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d109      	bne.n	800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a720:	4b33      	ldr	r3, [pc, #204]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	08db      	lsrs	r3, r3, #3
 800a726:	f003 0303 	and.w	r3, r3, #3
 800a72a:	4a32      	ldr	r2, [pc, #200]	@ (800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a72c:	fa22 f303 	lsr.w	r3, r2, r3
 800a730:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a732:	e01e      	b.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a734:	4b2e      	ldr	r3, [pc, #184]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a73c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a740:	d106      	bne.n	800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a744:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a748:	d102      	bne.n	800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a74a:	4b2b      	ldr	r3, [pc, #172]	@ (800a7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a74c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a74e:	e010      	b.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a750:	4b27      	ldr	r3, [pc, #156]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a758:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a75c:	d106      	bne.n	800a76c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a75e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a760:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a764:	d102      	bne.n	800a76c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a766:	4b25      	ldr	r3, [pc, #148]	@ (800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a768:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a76a:	e002      	b.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a76c:	2300      	movs	r3, #0
 800a76e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a770:	e123      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a772:	e122      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a774:	2300      	movs	r3, #0
 800a776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a778:	e11f      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a77a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a77e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a782:	430b      	orrs	r3, r1
 800a784:	d13c      	bne.n	800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a786:	4b1a      	ldr	r3, [pc, #104]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a78a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a78e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a792:	2b00      	cmp	r3, #0
 800a794:	d004      	beq.n	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a79c:	d012      	beq.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a79e:	e023      	b.n	800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7a0:	4b13      	ldr	r3, [pc, #76]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7ac:	d107      	bne.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f000 fbcc 	bl	800af50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7bc:	e0fd      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7c2:	e0fa      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7c4:	4b0a      	ldr	r3, [pc, #40]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7d0:	d107      	bne.n	800a7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7d2:	f107 0318 	add.w	r3, r7, #24
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f000 f912 	bl	800aa00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a7dc:	6a3b      	ldr	r3, [r7, #32]
 800a7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7e0:	e0eb      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7e6:	e0e8      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7ec:	e0e5      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a7ee:	bf00      	nop
 800a7f0:	58024400 	.word	0x58024400
 800a7f4:	03d09000 	.word	0x03d09000
 800a7f8:	003d0900 	.word	0x003d0900
 800a7fc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a800:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a804:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a808:	430b      	orrs	r3, r1
 800a80a:	f040 8085 	bne.w	800a918 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a80e:	4b6d      	ldr	r3, [pc, #436]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a812:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a816:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a81a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a81e:	d06b      	beq.n	800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a822:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a826:	d874      	bhi.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a82a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a82e:	d056      	beq.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a836:	d86c      	bhi.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a83a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a83e:	d03b      	beq.n	800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a842:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a846:	d864      	bhi.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a84a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a84e:	d021      	beq.n	800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a852:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a856:	d85c      	bhi.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d004      	beq.n	800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800a85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a860:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a864:	d004      	beq.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a866:	e054      	b.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a868:	f000 f8b4 	bl	800a9d4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a86c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a86e:	e0a4      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a870:	4b54      	ldr	r3, [pc, #336]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a878:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a87c:	d107      	bne.n	800a88e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a87e:	f107 0318 	add.w	r3, r7, #24
 800a882:	4618      	mov	r0, r3
 800a884:	f000 f8bc 	bl	800aa00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a88c:	e095      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a88e:	2300      	movs	r3, #0
 800a890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a892:	e092      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a894:	4b4b      	ldr	r3, [pc, #300]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a89c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8a0:	d107      	bne.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8a2:	f107 030c 	add.w	r3, r7, #12
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f000 f9fe 	bl	800aca8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8b0:	e083      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8b6:	e080      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a8b8:	4b42      	ldr	r3, [pc, #264]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 0304 	and.w	r3, r3, #4
 800a8c0:	2b04      	cmp	r3, #4
 800a8c2:	d109      	bne.n	800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8c4:	4b3f      	ldr	r3, [pc, #252]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	08db      	lsrs	r3, r3, #3
 800a8ca:	f003 0303 	and.w	r3, r3, #3
 800a8ce:	4a3e      	ldr	r2, [pc, #248]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a8d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8d6:	e070      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8dc:	e06d      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a8de:	4b39      	ldr	r3, [pc, #228]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8ea:	d102      	bne.n	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a8ec:	4b37      	ldr	r3, [pc, #220]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a8ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8f0:	e063      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8f6:	e060      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a8f8:	4b32      	ldr	r3, [pc, #200]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a900:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a904:	d102      	bne.n	800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800a906:	4b32      	ldr	r3, [pc, #200]	@ (800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a90a:	e056      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a90c:	2300      	movs	r3, #0
 800a90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a910:	e053      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a912:	2300      	movs	r3, #0
 800a914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a916:	e050      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a91c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a920:	430b      	orrs	r3, r1
 800a922:	d148      	bne.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a924:	4b27      	ldr	r3, [pc, #156]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a928:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a92c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a92e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a930:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a934:	d02a      	beq.n	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a93c:	d838      	bhi.n	800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a93e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a940:	2b00      	cmp	r3, #0
 800a942:	d004      	beq.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a946:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a94a:	d00d      	beq.n	800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a94c:	e030      	b.n	800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a94e:	4b1d      	ldr	r3, [pc, #116]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a956:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a95a:	d102      	bne.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800a95c:	4b1c      	ldr	r3, [pc, #112]	@ (800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a960:	e02b      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a962:	2300      	movs	r3, #0
 800a964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a966:	e028      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a968:	4b16      	ldr	r3, [pc, #88]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a970:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a974:	d107      	bne.n	800a986 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a97a:	4618      	mov	r0, r3
 800a97c:	f000 fae8 	bl	800af50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a984:	e019      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a986:	2300      	movs	r3, #0
 800a988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a98a:	e016      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a98c:	4b0d      	ldr	r3, [pc, #52]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a994:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a998:	d107      	bne.n	800a9aa <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a99a:	f107 0318 	add.w	r3, r7, #24
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f000 f82e 	bl	800aa00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9a4:	69fb      	ldr	r3, [r7, #28]
 800a9a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9a8:	e007      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9ae:	e004      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9b4:	e001      	b.n	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a9ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3740      	adds	r7, #64	@ 0x40
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	58024400 	.word	0x58024400
 800a9c8:	03d09000 	.word	0x03d09000
 800a9cc:	003d0900 	.word	0x003d0900
 800a9d0:	017d7840 	.word	0x017d7840

0800a9d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a9d8:	f7fe f92e 	bl	8008c38 <HAL_RCC_GetHCLKFreq>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	4b06      	ldr	r3, [pc, #24]	@ (800a9f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a9e0:	6a1b      	ldr	r3, [r3, #32]
 800a9e2:	091b      	lsrs	r3, r3, #4
 800a9e4:	f003 0307 	and.w	r3, r3, #7
 800a9e8:	4904      	ldr	r1, [pc, #16]	@ (800a9fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a9ea:	5ccb      	ldrb	r3, [r1, r3]
 800a9ec:	f003 031f 	and.w	r3, r3, #31
 800a9f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	58024400 	.word	0x58024400
 800a9fc:	0800f988 	.word	0x0800f988

0800aa00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b089      	sub	sp, #36	@ 0x24
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa08:	4ba1      	ldr	r3, [pc, #644]	@ (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa0c:	f003 0303 	and.w	r3, r3, #3
 800aa10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800aa12:	4b9f      	ldr	r3, [pc, #636]	@ (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa16:	0b1b      	lsrs	r3, r3, #12
 800aa18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aa1e:	4b9c      	ldr	r3, [pc, #624]	@ (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa22:	091b      	lsrs	r3, r3, #4
 800aa24:	f003 0301 	and.w	r3, r3, #1
 800aa28:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800aa2a:	4b99      	ldr	r3, [pc, #612]	@ (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa2e:	08db      	lsrs	r3, r3, #3
 800aa30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa34:	693a      	ldr	r2, [r7, #16]
 800aa36:	fb02 f303 	mul.w	r3, r2, r3
 800aa3a:	ee07 3a90 	vmov	s15, r3
 800aa3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f000 8111 	beq.w	800ac70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	2b02      	cmp	r3, #2
 800aa52:	f000 8083 	beq.w	800ab5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	2b02      	cmp	r3, #2
 800aa5a:	f200 80a1 	bhi.w	800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d003      	beq.n	800aa6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d056      	beq.n	800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aa6a:	e099      	b.n	800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa6c:	4b88      	ldr	r3, [pc, #544]	@ (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f003 0320 	and.w	r3, r3, #32
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d02d      	beq.n	800aad4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa78:	4b85      	ldr	r3, [pc, #532]	@ (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	08db      	lsrs	r3, r3, #3
 800aa7e:	f003 0303 	and.w	r3, r3, #3
 800aa82:	4a84      	ldr	r2, [pc, #528]	@ (800ac94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aa84:	fa22 f303 	lsr.w	r3, r2, r3
 800aa88:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	ee07 3a90 	vmov	s15, r3
 800aa90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	ee07 3a90 	vmov	s15, r3
 800aa9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaa2:	4b7b      	ldr	r3, [pc, #492]	@ (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaaa:	ee07 3a90 	vmov	s15, r3
 800aaae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aab2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aab6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ac98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aaba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aabe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aace:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aad2:	e087      	b.n	800abe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	ee07 3a90 	vmov	s15, r3
 800aada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aade:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ac9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aae6:	4b6a      	ldr	r3, [pc, #424]	@ (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaee:	ee07 3a90 	vmov	s15, r3
 800aaf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aafa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ac98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aafe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab16:	e065      	b.n	800abe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	ee07 3a90 	vmov	s15, r3
 800ab1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800aca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab2a:	4b59      	ldr	r3, [pc, #356]	@ (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab32:	ee07 3a90 	vmov	s15, r3
 800ab36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ac98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab5a:	e043      	b.n	800abe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	ee07 3a90 	vmov	s15, r3
 800ab62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ab6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab6e:	4b48      	ldr	r3, [pc, #288]	@ (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab76:	ee07 3a90 	vmov	s15, r3
 800ab7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ac98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab9e:	e021      	b.n	800abe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	ee07 3a90 	vmov	s15, r3
 800aba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abaa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800aca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800abae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abb2:	4b37      	ldr	r3, [pc, #220]	@ (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abba:	ee07 3a90 	vmov	s15, r3
 800abbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800abc6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ac98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abe2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800abe4:	4b2a      	ldr	r3, [pc, #168]	@ (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abe8:	0a5b      	lsrs	r3, r3, #9
 800abea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abee:	ee07 3a90 	vmov	s15, r3
 800abf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abfe:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac0a:	ee17 2a90 	vmov	r2, s15
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ac12:	4b1f      	ldr	r3, [pc, #124]	@ (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac16:	0c1b      	lsrs	r3, r3, #16
 800ac18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac1c:	ee07 3a90 	vmov	s15, r3
 800ac20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac28:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac38:	ee17 2a90 	vmov	r2, s15
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ac40:	4b13      	ldr	r3, [pc, #76]	@ (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac44:	0e1b      	lsrs	r3, r3, #24
 800ac46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac4a:	ee07 3a90 	vmov	s15, r3
 800ac4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac66:	ee17 2a90 	vmov	r2, s15
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ac6e:	e008      	b.n	800ac82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	609a      	str	r2, [r3, #8]
}
 800ac82:	bf00      	nop
 800ac84:	3724      	adds	r7, #36	@ 0x24
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	58024400 	.word	0x58024400
 800ac94:	03d09000 	.word	0x03d09000
 800ac98:	46000000 	.word	0x46000000
 800ac9c:	4c742400 	.word	0x4c742400
 800aca0:	4a742400 	.word	0x4a742400
 800aca4:	4bbebc20 	.word	0x4bbebc20

0800aca8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b089      	sub	sp, #36	@ 0x24
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800acb0:	4ba1      	ldr	r3, [pc, #644]	@ (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acb4:	f003 0303 	and.w	r3, r3, #3
 800acb8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800acba:	4b9f      	ldr	r3, [pc, #636]	@ (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acbe:	0d1b      	lsrs	r3, r3, #20
 800acc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800acc4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800acc6:	4b9c      	ldr	r3, [pc, #624]	@ (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acca:	0a1b      	lsrs	r3, r3, #8
 800accc:	f003 0301 	and.w	r3, r3, #1
 800acd0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800acd2:	4b99      	ldr	r3, [pc, #612]	@ (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acd6:	08db      	lsrs	r3, r3, #3
 800acd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800acdc:	693a      	ldr	r2, [r7, #16]
 800acde:	fb02 f303 	mul.w	r3, r2, r3
 800ace2:	ee07 3a90 	vmov	s15, r3
 800ace6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	f000 8111 	beq.w	800af18 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	2b02      	cmp	r3, #2
 800acfa:	f000 8083 	beq.w	800ae04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	2b02      	cmp	r3, #2
 800ad02:	f200 80a1 	bhi.w	800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d003      	beq.n	800ad14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d056      	beq.n	800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ad12:	e099      	b.n	800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad14:	4b88      	ldr	r3, [pc, #544]	@ (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 0320 	and.w	r3, r3, #32
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d02d      	beq.n	800ad7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad20:	4b85      	ldr	r3, [pc, #532]	@ (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	08db      	lsrs	r3, r3, #3
 800ad26:	f003 0303 	and.w	r3, r3, #3
 800ad2a:	4a84      	ldr	r2, [pc, #528]	@ (800af3c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ad2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad30:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	ee07 3a90 	vmov	s15, r3
 800ad38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	ee07 3a90 	vmov	s15, r3
 800ad42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad4a:	4b7b      	ldr	r3, [pc, #492]	@ (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad52:	ee07 3a90 	vmov	s15, r3
 800ad56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad5e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ad7a:	e087      	b.n	800ae8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	ee07 3a90 	vmov	s15, r3
 800ad82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad86:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800af44 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ad8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad8e:	4b6a      	ldr	r3, [pc, #424]	@ (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad96:	ee07 3a90 	vmov	s15, r3
 800ad9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ada2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ada6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adbe:	e065      	b.n	800ae8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	ee07 3a90 	vmov	s15, r3
 800adc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800adce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800add2:	4b59      	ldr	r3, [pc, #356]	@ (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800add4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800add6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adda:	ee07 3a90 	vmov	s15, r3
 800adde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ade2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ade6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae02:	e043      	b.n	800ae8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	ee07 3a90 	vmov	s15, r3
 800ae0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae0e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ae12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae16:	4b48      	ldr	r3, [pc, #288]	@ (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae1e:	ee07 3a90 	vmov	s15, r3
 800ae22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae2a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae46:	e021      	b.n	800ae8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	ee07 3a90 	vmov	s15, r3
 800ae4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae52:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae5a:	4b37      	ldr	r3, [pc, #220]	@ (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae62:	ee07 3a90 	vmov	s15, r3
 800ae66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae6e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ae8c:	4b2a      	ldr	r3, [pc, #168]	@ (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae90:	0a5b      	lsrs	r3, r3, #9
 800ae92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae96:	ee07 3a90 	vmov	s15, r3
 800ae9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aea6:	edd7 6a07 	vldr	s13, [r7, #28]
 800aeaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aeae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aeb2:	ee17 2a90 	vmov	r2, s15
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800aeba:	4b1f      	ldr	r3, [pc, #124]	@ (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aebe:	0c1b      	lsrs	r3, r3, #16
 800aec0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aec4:	ee07 3a90 	vmov	s15, r3
 800aec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aecc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aed0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aed4:	edd7 6a07 	vldr	s13, [r7, #28]
 800aed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aedc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aee0:	ee17 2a90 	vmov	r2, s15
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800aee8:	4b13      	ldr	r3, [pc, #76]	@ (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeec:	0e1b      	lsrs	r3, r3, #24
 800aeee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aef2:	ee07 3a90 	vmov	s15, r3
 800aef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aefa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aefe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af02:	edd7 6a07 	vldr	s13, [r7, #28]
 800af06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af0e:	ee17 2a90 	vmov	r2, s15
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800af16:	e008      	b.n	800af2a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	609a      	str	r2, [r3, #8]
}
 800af2a:	bf00      	nop
 800af2c:	3724      	adds	r7, #36	@ 0x24
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop
 800af38:	58024400 	.word	0x58024400
 800af3c:	03d09000 	.word	0x03d09000
 800af40:	46000000 	.word	0x46000000
 800af44:	4c742400 	.word	0x4c742400
 800af48:	4a742400 	.word	0x4a742400
 800af4c:	4bbebc20 	.word	0x4bbebc20

0800af50 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800af50:	b480      	push	{r7}
 800af52:	b089      	sub	sp, #36	@ 0x24
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af58:	4ba0      	ldr	r3, [pc, #640]	@ (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af5c:	f003 0303 	and.w	r3, r3, #3
 800af60:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800af62:	4b9e      	ldr	r3, [pc, #632]	@ (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af66:	091b      	lsrs	r3, r3, #4
 800af68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800af6c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800af6e:	4b9b      	ldr	r3, [pc, #620]	@ (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af72:	f003 0301 	and.w	r3, r3, #1
 800af76:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800af78:	4b98      	ldr	r3, [pc, #608]	@ (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af7c:	08db      	lsrs	r3, r3, #3
 800af7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af82:	693a      	ldr	r2, [r7, #16]
 800af84:	fb02 f303 	mul.w	r3, r2, r3
 800af88:	ee07 3a90 	vmov	s15, r3
 800af8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af90:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	2b00      	cmp	r3, #0
 800af98:	f000 8111 	beq.w	800b1be <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800af9c:	69bb      	ldr	r3, [r7, #24]
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	f000 8083 	beq.w	800b0aa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	f200 80a1 	bhi.w	800b0ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d003      	beq.n	800afba <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d056      	beq.n	800b066 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800afb8:	e099      	b.n	800b0ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afba:	4b88      	ldr	r3, [pc, #544]	@ (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f003 0320 	and.w	r3, r3, #32
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d02d      	beq.n	800b022 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afc6:	4b85      	ldr	r3, [pc, #532]	@ (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	08db      	lsrs	r3, r3, #3
 800afcc:	f003 0303 	and.w	r3, r3, #3
 800afd0:	4a83      	ldr	r2, [pc, #524]	@ (800b1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800afd2:	fa22 f303 	lsr.w	r3, r2, r3
 800afd6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	ee07 3a90 	vmov	s15, r3
 800afde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	ee07 3a90 	vmov	s15, r3
 800afe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aff0:	4b7a      	ldr	r3, [pc, #488]	@ (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff8:	ee07 3a90 	vmov	s15, r3
 800affc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b000:	ed97 6a03 	vldr	s12, [r7, #12]
 800b004:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b008:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b00c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b010:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b014:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b01c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b020:	e087      	b.n	800b132 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	ee07 3a90 	vmov	s15, r3
 800b028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b02c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b034:	4b69      	ldr	r3, [pc, #420]	@ (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b03c:	ee07 3a90 	vmov	s15, r3
 800b040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b044:	ed97 6a03 	vldr	s12, [r7, #12]
 800b048:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b04c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b050:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b054:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b058:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b05c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b060:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b064:	e065      	b.n	800b132 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	ee07 3a90 	vmov	s15, r3
 800b06c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b070:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b1ec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b074:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b078:	4b58      	ldr	r3, [pc, #352]	@ (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b07a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b07c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b080:	ee07 3a90 	vmov	s15, r3
 800b084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b088:	ed97 6a03 	vldr	s12, [r7, #12]
 800b08c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b090:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b094:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b098:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b09c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0a8:	e043      	b.n	800b132 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	ee07 3a90 	vmov	s15, r3
 800b0b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b0b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0bc:	4b47      	ldr	r3, [pc, #284]	@ (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0c4:	ee07 3a90 	vmov	s15, r3
 800b0c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0d0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0ec:	e021      	b.n	800b132 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	ee07 3a90 	vmov	s15, r3
 800b0f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b0fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b100:	4b36      	ldr	r3, [pc, #216]	@ (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b108:	ee07 3a90 	vmov	s15, r3
 800b10c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b110:	ed97 6a03 	vldr	s12, [r7, #12]
 800b114:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b118:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b11c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b120:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b124:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b12c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b130:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b132:	4b2a      	ldr	r3, [pc, #168]	@ (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b136:	0a5b      	lsrs	r3, r3, #9
 800b138:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b13c:	ee07 3a90 	vmov	s15, r3
 800b140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b144:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b148:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b14c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b158:	ee17 2a90 	vmov	r2, s15
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b160:	4b1e      	ldr	r3, [pc, #120]	@ (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b164:	0c1b      	lsrs	r3, r3, #16
 800b166:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b16a:	ee07 3a90 	vmov	s15, r3
 800b16e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b172:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b176:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b17a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b17e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b186:	ee17 2a90 	vmov	r2, s15
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b18e:	4b13      	ldr	r3, [pc, #76]	@ (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b192:	0e1b      	lsrs	r3, r3, #24
 800b194:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b198:	ee07 3a90 	vmov	s15, r3
 800b19c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1b4:	ee17 2a90 	vmov	r2, s15
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b1bc:	e008      	b.n	800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	609a      	str	r2, [r3, #8]
}
 800b1d0:	bf00      	nop
 800b1d2:	3724      	adds	r7, #36	@ 0x24
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr
 800b1dc:	58024400 	.word	0x58024400
 800b1e0:	03d09000 	.word	0x03d09000
 800b1e4:	46000000 	.word	0x46000000
 800b1e8:	4c742400 	.word	0x4c742400
 800b1ec:	4a742400 	.word	0x4a742400
 800b1f0:	4bbebc20 	.word	0x4bbebc20

0800b1f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b1fe:	2300      	movs	r3, #0
 800b200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b202:	4b53      	ldr	r3, [pc, #332]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b206:	f003 0303 	and.w	r3, r3, #3
 800b20a:	2b03      	cmp	r3, #3
 800b20c:	d101      	bne.n	800b212 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	e099      	b.n	800b346 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b212:	4b4f      	ldr	r3, [pc, #316]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a4e      	ldr	r2, [pc, #312]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b218:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b21c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b21e:	f7f7 fb9b 	bl	8002958 <HAL_GetTick>
 800b222:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b224:	e008      	b.n	800b238 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b226:	f7f7 fb97 	bl	8002958 <HAL_GetTick>
 800b22a:	4602      	mov	r2, r0
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	2b02      	cmp	r3, #2
 800b232:	d901      	bls.n	800b238 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b234:	2303      	movs	r3, #3
 800b236:	e086      	b.n	800b346 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b238:	4b45      	ldr	r3, [pc, #276]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b240:	2b00      	cmp	r3, #0
 800b242:	d1f0      	bne.n	800b226 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b244:	4b42      	ldr	r3, [pc, #264]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b248:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	031b      	lsls	r3, r3, #12
 800b252:	493f      	ldr	r1, [pc, #252]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b254:	4313      	orrs	r3, r2
 800b256:	628b      	str	r3, [r1, #40]	@ 0x28
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	3b01      	subs	r3, #1
 800b25e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	689b      	ldr	r3, [r3, #8]
 800b266:	3b01      	subs	r3, #1
 800b268:	025b      	lsls	r3, r3, #9
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	431a      	orrs	r2, r3
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	3b01      	subs	r3, #1
 800b274:	041b      	lsls	r3, r3, #16
 800b276:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b27a:	431a      	orrs	r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	691b      	ldr	r3, [r3, #16]
 800b280:	3b01      	subs	r3, #1
 800b282:	061b      	lsls	r3, r3, #24
 800b284:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b288:	4931      	ldr	r1, [pc, #196]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b28a:	4313      	orrs	r3, r2
 800b28c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b28e:	4b30      	ldr	r3, [pc, #192]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b292:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	695b      	ldr	r3, [r3, #20]
 800b29a:	492d      	ldr	r1, [pc, #180]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b29c:	4313      	orrs	r3, r2
 800b29e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b2a0:	4b2b      	ldr	r3, [pc, #172]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2a4:	f023 0220 	bic.w	r2, r3, #32
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	699b      	ldr	r3, [r3, #24]
 800b2ac:	4928      	ldr	r1, [pc, #160]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b2b2:	4b27      	ldr	r3, [pc, #156]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2b6:	4a26      	ldr	r2, [pc, #152]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2b8:	f023 0310 	bic.w	r3, r3, #16
 800b2bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b2be:	4b24      	ldr	r3, [pc, #144]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b2c2:	4b24      	ldr	r3, [pc, #144]	@ (800b354 <RCCEx_PLL2_Config+0x160>)
 800b2c4:	4013      	ands	r3, r2
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	69d2      	ldr	r2, [r2, #28]
 800b2ca:	00d2      	lsls	r2, r2, #3
 800b2cc:	4920      	ldr	r1, [pc, #128]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b2d2:	4b1f      	ldr	r3, [pc, #124]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2d6:	4a1e      	ldr	r2, [pc, #120]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2d8:	f043 0310 	orr.w	r3, r3, #16
 800b2dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d106      	bne.n	800b2f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b2e4:	4b1a      	ldr	r3, [pc, #104]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2e8:	4a19      	ldr	r2, [pc, #100]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b2ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b2f0:	e00f      	b.n	800b312 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d106      	bne.n	800b306 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b2f8:	4b15      	ldr	r3, [pc, #84]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2fc:	4a14      	ldr	r2, [pc, #80]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b302:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b304:	e005      	b.n	800b312 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b306:	4b12      	ldr	r3, [pc, #72]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b30a:	4a11      	ldr	r2, [pc, #68]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b30c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b310:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b312:	4b0f      	ldr	r3, [pc, #60]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4a0e      	ldr	r2, [pc, #56]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b318:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b31c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b31e:	f7f7 fb1b 	bl	8002958 <HAL_GetTick>
 800b322:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b324:	e008      	b.n	800b338 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b326:	f7f7 fb17 	bl	8002958 <HAL_GetTick>
 800b32a:	4602      	mov	r2, r0
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	1ad3      	subs	r3, r2, r3
 800b330:	2b02      	cmp	r3, #2
 800b332:	d901      	bls.n	800b338 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b334:	2303      	movs	r3, #3
 800b336:	e006      	b.n	800b346 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b338:	4b05      	ldr	r3, [pc, #20]	@ (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b340:	2b00      	cmp	r3, #0
 800b342:	d0f0      	beq.n	800b326 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b344:	7bfb      	ldrb	r3, [r7, #15]
}
 800b346:	4618      	mov	r0, r3
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	58024400 	.word	0x58024400
 800b354:	ffff0007 	.word	0xffff0007

0800b358 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b362:	2300      	movs	r3, #0
 800b364:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b366:	4b53      	ldr	r3, [pc, #332]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b36a:	f003 0303 	and.w	r3, r3, #3
 800b36e:	2b03      	cmp	r3, #3
 800b370:	d101      	bne.n	800b376 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b372:	2301      	movs	r3, #1
 800b374:	e099      	b.n	800b4aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b376:	4b4f      	ldr	r3, [pc, #316]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a4e      	ldr	r2, [pc, #312]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b37c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b380:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b382:	f7f7 fae9 	bl	8002958 <HAL_GetTick>
 800b386:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b388:	e008      	b.n	800b39c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b38a:	f7f7 fae5 	bl	8002958 <HAL_GetTick>
 800b38e:	4602      	mov	r2, r0
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	1ad3      	subs	r3, r2, r3
 800b394:	2b02      	cmp	r3, #2
 800b396:	d901      	bls.n	800b39c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b398:	2303      	movs	r3, #3
 800b39a:	e086      	b.n	800b4aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b39c:	4b45      	ldr	r3, [pc, #276]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d1f0      	bne.n	800b38a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b3a8:	4b42      	ldr	r3, [pc, #264]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b3aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ac:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	051b      	lsls	r3, r3, #20
 800b3b6:	493f      	ldr	r1, [pc, #252]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	628b      	str	r3, [r1, #40]	@ 0x28
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	3b01      	subs	r3, #1
 800b3c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	3b01      	subs	r3, #1
 800b3cc:	025b      	lsls	r3, r3, #9
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	431a      	orrs	r2, r3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	041b      	lsls	r3, r3, #16
 800b3da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b3de:	431a      	orrs	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	061b      	lsls	r3, r3, #24
 800b3e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b3ec:	4931      	ldr	r1, [pc, #196]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b3f2:	4b30      	ldr	r3, [pc, #192]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b3f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	695b      	ldr	r3, [r3, #20]
 800b3fe:	492d      	ldr	r1, [pc, #180]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b400:	4313      	orrs	r3, r2
 800b402:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b404:	4b2b      	ldr	r3, [pc, #172]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b408:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	699b      	ldr	r3, [r3, #24]
 800b410:	4928      	ldr	r1, [pc, #160]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b412:	4313      	orrs	r3, r2
 800b414:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b416:	4b27      	ldr	r3, [pc, #156]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b41a:	4a26      	ldr	r2, [pc, #152]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b41c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b420:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b422:	4b24      	ldr	r3, [pc, #144]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b424:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b426:	4b24      	ldr	r3, [pc, #144]	@ (800b4b8 <RCCEx_PLL3_Config+0x160>)
 800b428:	4013      	ands	r3, r2
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	69d2      	ldr	r2, [r2, #28]
 800b42e:	00d2      	lsls	r2, r2, #3
 800b430:	4920      	ldr	r1, [pc, #128]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b432:	4313      	orrs	r3, r2
 800b434:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b436:	4b1f      	ldr	r3, [pc, #124]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b43a:	4a1e      	ldr	r2, [pc, #120]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b43c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b440:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d106      	bne.n	800b456 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b448:	4b1a      	ldr	r3, [pc, #104]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b44a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b44c:	4a19      	ldr	r2, [pc, #100]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b44e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b452:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b454:	e00f      	b.n	800b476 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d106      	bne.n	800b46a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b45c:	4b15      	ldr	r3, [pc, #84]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b45e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b460:	4a14      	ldr	r2, [pc, #80]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b462:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b466:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b468:	e005      	b.n	800b476 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b46a:	4b12      	ldr	r3, [pc, #72]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b46c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b46e:	4a11      	ldr	r2, [pc, #68]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b470:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b474:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b476:	4b0f      	ldr	r3, [pc, #60]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a0e      	ldr	r2, [pc, #56]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b47c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b480:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b482:	f7f7 fa69 	bl	8002958 <HAL_GetTick>
 800b486:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b488:	e008      	b.n	800b49c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b48a:	f7f7 fa65 	bl	8002958 <HAL_GetTick>
 800b48e:	4602      	mov	r2, r0
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	1ad3      	subs	r3, r2, r3
 800b494:	2b02      	cmp	r3, #2
 800b496:	d901      	bls.n	800b49c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b498:	2303      	movs	r3, #3
 800b49a:	e006      	b.n	800b4aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b49c:	4b05      	ldr	r3, [pc, #20]	@ (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d0f0      	beq.n	800b48a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	58024400 	.word	0x58024400
 800b4b8:	ffff0007 	.word	0xffff0007

0800b4bc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d101      	bne.n	800b4ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e10f      	b.n	800b6ee <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a87      	ldr	r2, [pc, #540]	@ (800b6f8 <HAL_SPI_Init+0x23c>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d00f      	beq.n	800b4fe <HAL_SPI_Init+0x42>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a86      	ldr	r2, [pc, #536]	@ (800b6fc <HAL_SPI_Init+0x240>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d00a      	beq.n	800b4fe <HAL_SPI_Init+0x42>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a84      	ldr	r2, [pc, #528]	@ (800b700 <HAL_SPI_Init+0x244>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d005      	beq.n	800b4fe <HAL_SPI_Init+0x42>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	2b0f      	cmp	r3, #15
 800b4f8:	d901      	bls.n	800b4fe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	e0f7      	b.n	800b6ee <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 fe3c 	bl	800c17c <SPI_GetPacketSize>
 800b504:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a7b      	ldr	r2, [pc, #492]	@ (800b6f8 <HAL_SPI_Init+0x23c>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d00c      	beq.n	800b52a <HAL_SPI_Init+0x6e>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a79      	ldr	r2, [pc, #484]	@ (800b6fc <HAL_SPI_Init+0x240>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d007      	beq.n	800b52a <HAL_SPI_Init+0x6e>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a78      	ldr	r2, [pc, #480]	@ (800b700 <HAL_SPI_Init+0x244>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d002      	beq.n	800b52a <HAL_SPI_Init+0x6e>
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2b08      	cmp	r3, #8
 800b528:	d811      	bhi.n	800b54e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b52e:	4a72      	ldr	r2, [pc, #456]	@ (800b6f8 <HAL_SPI_Init+0x23c>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d009      	beq.n	800b548 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a70      	ldr	r2, [pc, #448]	@ (800b6fc <HAL_SPI_Init+0x240>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d004      	beq.n	800b548 <HAL_SPI_Init+0x8c>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4a6f      	ldr	r2, [pc, #444]	@ (800b700 <HAL_SPI_Init+0x244>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d104      	bne.n	800b552 <HAL_SPI_Init+0x96>
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2b10      	cmp	r3, #16
 800b54c:	d901      	bls.n	800b552 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	e0cd      	b.n	800b6ee <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d106      	bne.n	800b56c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f7f6 feee 	bl	8002348 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2202      	movs	r2, #2
 800b570:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f022 0201 	bic.w	r2, r2, #1
 800b582:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b58e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	699b      	ldr	r3, [r3, #24]
 800b594:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b598:	d119      	bne.n	800b5ce <HAL_SPI_Init+0x112>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b5a2:	d103      	bne.n	800b5ac <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d008      	beq.n	800b5be <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10c      	bne.n	800b5ce <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b5b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5bc:	d107      	bne.n	800b5ce <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b5cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d00f      	beq.n	800b5fa <HAL_SPI_Init+0x13e>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	2b06      	cmp	r3, #6
 800b5e0:	d90b      	bls.n	800b5fa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	430a      	orrs	r2, r1
 800b5f6:	601a      	str	r2, [r3, #0]
 800b5f8:	e007      	b.n	800b60a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b608:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	69da      	ldr	r2, [r3, #28]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b612:	431a      	orrs	r2, r3
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	431a      	orrs	r2, r3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b61c:	ea42 0103 	orr.w	r1, r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	68da      	ldr	r2, [r3, #12]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	430a      	orrs	r2, r1
 800b62a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b634:	431a      	orrs	r2, r3
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b63a:	431a      	orrs	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	699b      	ldr	r3, [r3, #24]
 800b640:	431a      	orrs	r2, r3
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	691b      	ldr	r3, [r3, #16]
 800b646:	431a      	orrs	r2, r3
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	695b      	ldr	r3, [r3, #20]
 800b64c:	431a      	orrs	r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6a1b      	ldr	r3, [r3, #32]
 800b652:	431a      	orrs	r2, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	431a      	orrs	r2, r3
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b65e:	431a      	orrs	r2, r3
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	431a      	orrs	r2, r3
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b66a:	ea42 0103 	orr.w	r1, r2, r3
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	430a      	orrs	r2, r1
 800b678:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d113      	bne.n	800b6aa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b694:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b6a8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f022 0201 	bic.w	r2, r2, #1
 800b6b8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d00a      	beq.n	800b6dc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	68db      	ldr	r3, [r3, #12]
 800b6cc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	430a      	orrs	r2, r1
 800b6da:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b6ec:	2300      	movs	r3, #0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	40013000 	.word	0x40013000
 800b6fc:	40003800 	.word	0x40003800
 800b700:	40003c00 	.word	0x40003c00

0800b704 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b088      	sub	sp, #32
 800b708:	af02      	add	r7, sp, #8
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	60b9      	str	r1, [r7, #8]
 800b70e:	603b      	str	r3, [r7, #0]
 800b710:	4613      	mov	r3, r2
 800b712:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	3320      	adds	r3, #32
 800b71a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b71c:	f7f7 f91c 	bl	8002958 <HAL_GetTick>
 800b720:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d001      	beq.n	800b732 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800b72e:	2302      	movs	r3, #2
 800b730:	e1d1      	b.n	800bad6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d002      	beq.n	800b73e <HAL_SPI_Transmit+0x3a>
 800b738:	88fb      	ldrh	r3, [r7, #6]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d101      	bne.n	800b742 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800b73e:	2301      	movs	r3, #1
 800b740:	e1c9      	b.n	800bad6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d101      	bne.n	800b750 <HAL_SPI_Transmit+0x4c>
 800b74c:	2302      	movs	r3, #2
 800b74e:	e1c2      	b.n	800bad6 <HAL_SPI_Transmit+0x3d2>
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2201      	movs	r2, #1
 800b754:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2203      	movs	r2, #3
 800b75c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2200      	movs	r2, #0
 800b764:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	68ba      	ldr	r2, [r7, #8]
 800b76c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	88fa      	ldrh	r2, [r7, #6]
 800b772:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	88fa      	ldrh	r2, [r7, #6]
 800b77a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2200      	movs	r2, #0
 800b782:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2200      	movs	r2, #0
 800b788:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2200      	movs	r2, #0
 800b790:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2200      	movs	r2, #0
 800b798:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2200      	movs	r2, #0
 800b79e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	689b      	ldr	r3, [r3, #8]
 800b7a4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b7a8:	d108      	bne.n	800b7bc <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b7b8:	601a      	str	r2, [r3, #0]
 800b7ba:	e009      	b.n	800b7d0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b7ce:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	685a      	ldr	r2, [r3, #4]
 800b7d6:	4b96      	ldr	r3, [pc, #600]	@ (800ba30 <HAL_SPI_Transmit+0x32c>)
 800b7d8:	4013      	ands	r3, r2
 800b7da:	88f9      	ldrh	r1, [r7, #6]
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	6812      	ldr	r2, [r2, #0]
 800b7e0:	430b      	orrs	r3, r1
 800b7e2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f042 0201 	orr.w	r2, r2, #1
 800b7f2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b7fc:	d107      	bne.n	800b80e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	681a      	ldr	r2, [r3, #0]
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b80c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	2b0f      	cmp	r3, #15
 800b814:	d947      	bls.n	800b8a6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b816:	e03f      	b.n	800b898 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	695b      	ldr	r3, [r3, #20]
 800b81e:	f003 0302 	and.w	r3, r3, #2
 800b822:	2b02      	cmp	r3, #2
 800b824:	d114      	bne.n	800b850 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	6812      	ldr	r2, [r2, #0]
 800b830:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b836:	1d1a      	adds	r2, r3, #4
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b842:	b29b      	uxth	r3, r3
 800b844:	3b01      	subs	r3, #1
 800b846:	b29a      	uxth	r2, r3
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b84e:	e023      	b.n	800b898 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b850:	f7f7 f882 	bl	8002958 <HAL_GetTick>
 800b854:	4602      	mov	r2, r0
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	683a      	ldr	r2, [r7, #0]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d803      	bhi.n	800b868 <HAL_SPI_Transmit+0x164>
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b866:	d102      	bne.n	800b86e <HAL_SPI_Transmit+0x16a>
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d114      	bne.n	800b898 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f000 fbb6 	bl	800bfe0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b87a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2201      	movs	r2, #1
 800b888:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2200      	movs	r2, #0
 800b890:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b894:	2303      	movs	r3, #3
 800b896:	e11e      	b.n	800bad6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d1b9      	bne.n	800b818 <HAL_SPI_Transmit+0x114>
 800b8a4:	e0f1      	b.n	800ba8a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	2b07      	cmp	r3, #7
 800b8ac:	f240 80e6 	bls.w	800ba7c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b8b0:	e05d      	b.n	800b96e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	695b      	ldr	r3, [r3, #20]
 800b8b8:	f003 0302 	and.w	r3, r3, #2
 800b8bc:	2b02      	cmp	r3, #2
 800b8be:	d132      	bne.n	800b926 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d918      	bls.n	800b8fe <HAL_SPI_Transmit+0x1fa>
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d014      	beq.n	800b8fe <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	6812      	ldr	r2, [r2, #0]
 800b8de:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8e4:	1d1a      	adds	r2, r3, #4
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	3b02      	subs	r3, #2
 800b8f4:	b29a      	uxth	r2, r3
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b8fc:	e037      	b.n	800b96e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b902:	881a      	ldrh	r2, [r3, #0]
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b90c:	1c9a      	adds	r2, r3, #2
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b918:	b29b      	uxth	r3, r3
 800b91a:	3b01      	subs	r3, #1
 800b91c:	b29a      	uxth	r2, r3
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b924:	e023      	b.n	800b96e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b926:	f7f7 f817 	bl	8002958 <HAL_GetTick>
 800b92a:	4602      	mov	r2, r0
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	1ad3      	subs	r3, r2, r3
 800b930:	683a      	ldr	r2, [r7, #0]
 800b932:	429a      	cmp	r2, r3
 800b934:	d803      	bhi.n	800b93e <HAL_SPI_Transmit+0x23a>
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b93c:	d102      	bne.n	800b944 <HAL_SPI_Transmit+0x240>
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d114      	bne.n	800b96e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f000 fb4b 	bl	800bfe0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b950:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2201      	movs	r2, #1
 800b95e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2200      	movs	r2, #0
 800b966:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b96a:	2303      	movs	r3, #3
 800b96c:	e0b3      	b.n	800bad6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b974:	b29b      	uxth	r3, r3
 800b976:	2b00      	cmp	r3, #0
 800b978:	d19b      	bne.n	800b8b2 <HAL_SPI_Transmit+0x1ae>
 800b97a:	e086      	b.n	800ba8a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	695b      	ldr	r3, [r3, #20]
 800b982:	f003 0302 	and.w	r3, r3, #2
 800b986:	2b02      	cmp	r3, #2
 800b988:	d154      	bne.n	800ba34 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b990:	b29b      	uxth	r3, r3
 800b992:	2b03      	cmp	r3, #3
 800b994:	d918      	bls.n	800b9c8 <HAL_SPI_Transmit+0x2c4>
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b99a:	2b40      	cmp	r3, #64	@ 0x40
 800b99c:	d914      	bls.n	800b9c8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	6812      	ldr	r2, [r2, #0]
 800b9a8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9ae:	1d1a      	adds	r2, r3, #4
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	3b04      	subs	r3, #4
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b9c6:	e059      	b.n	800ba7c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d917      	bls.n	800ba04 <HAL_SPI_Transmit+0x300>
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d013      	beq.n	800ba04 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9e0:	881a      	ldrh	r2, [r3, #0]
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9ea:	1c9a      	adds	r2, r3, #2
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	3b02      	subs	r3, #2
 800b9fa:	b29a      	uxth	r2, r3
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ba02:	e03b      	b.n	800ba7c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	3320      	adds	r3, #32
 800ba0e:	7812      	ldrb	r2, [r2, #0]
 800ba10:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba16:	1c5a      	adds	r2, r3, #1
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	3b01      	subs	r3, #1
 800ba26:	b29a      	uxth	r2, r3
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ba2e:	e025      	b.n	800ba7c <HAL_SPI_Transmit+0x378>
 800ba30:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba34:	f7f6 ff90 	bl	8002958 <HAL_GetTick>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	1ad3      	subs	r3, r2, r3
 800ba3e:	683a      	ldr	r2, [r7, #0]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d803      	bhi.n	800ba4c <HAL_SPI_Transmit+0x348>
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba4a:	d102      	bne.n	800ba52 <HAL_SPI_Transmit+0x34e>
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d114      	bne.n	800ba7c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f000 fac4 	bl	800bfe0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba5e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2200      	movs	r2, #0
 800ba74:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ba78:	2303      	movs	r3, #3
 800ba7a:	e02c      	b.n	800bad6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f47f af79 	bne.w	800b97c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	9300      	str	r3, [sp, #0]
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	2200      	movs	r2, #0
 800ba92:	2108      	movs	r1, #8
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f000 fb43 	bl	800c120 <SPI_WaitOnFlagUntilTimeout>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d007      	beq.n	800bab0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800baa6:	f043 0220 	orr.w	r2, r3, #32
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bab0:	68f8      	ldr	r0, [r7, #12]
 800bab2:	f000 fa95 	bl	800bfe0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2201      	movs	r2, #1
 800baba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2200      	movs	r2, #0
 800bac2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d001      	beq.n	800bad4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800bad0:	2301      	movs	r3, #1
 800bad2:	e000      	b.n	800bad6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800bad4:	2300      	movs	r3, #0
  }
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3718      	adds	r7, #24
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
 800bade:	bf00      	nop

0800bae0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b088      	sub	sp, #32
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	603b      	str	r3, [r7, #0]
 800baec:	4613      	mov	r3, r2
 800baee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baf4:	095b      	lsrs	r3, r3, #5
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	3301      	adds	r3, #1
 800bafa:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	3330      	adds	r3, #48	@ 0x30
 800bb02:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bb04:	f7f6 ff28 	bl	8002958 <HAL_GetTick>
 800bb08:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d001      	beq.n	800bb1a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800bb16:	2302      	movs	r3, #2
 800bb18:	e250      	b.n	800bfbc <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d002      	beq.n	800bb26 <HAL_SPI_Receive+0x46>
 800bb20:	88fb      	ldrh	r3, [r7, #6]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d101      	bne.n	800bb2a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800bb26:	2301      	movs	r3, #1
 800bb28:	e248      	b.n	800bfbc <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d101      	bne.n	800bb38 <HAL_SPI_Receive+0x58>
 800bb34:	2302      	movs	r3, #2
 800bb36:	e241      	b.n	800bfbc <HAL_SPI_Receive+0x4dc>
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2204      	movs	r2, #4
 800bb44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	68ba      	ldr	r2, [r7, #8]
 800bb54:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	88fa      	ldrh	r2, [r7, #6]
 800bb5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	88fa      	ldrh	r2, [r7, #6]
 800bb62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2200      	movs	r2, #0
 800bb78:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2200      	movs	r2, #0
 800bb86:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	689b      	ldr	r3, [r3, #8]
 800bb8c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800bb90:	d108      	bne.n	800bba4 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bba0:	601a      	str	r2, [r3, #0]
 800bba2:	e009      	b.n	800bbb8 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	68db      	ldr	r3, [r3, #12]
 800bbaa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800bbb6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	685a      	ldr	r2, [r3, #4]
 800bbbe:	4b95      	ldr	r3, [pc, #596]	@ (800be14 <HAL_SPI_Receive+0x334>)
 800bbc0:	4013      	ands	r3, r2
 800bbc2:	88f9      	ldrh	r1, [r7, #6]
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	6812      	ldr	r2, [r2, #0]
 800bbc8:	430b      	orrs	r3, r1
 800bbca:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f042 0201 	orr.w	r2, r2, #1
 800bbda:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bbe4:	d107      	bne.n	800bbf6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bbf4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	68db      	ldr	r3, [r3, #12]
 800bbfa:	2b0f      	cmp	r3, #15
 800bbfc:	d96c      	bls.n	800bcd8 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bbfe:	e064      	b.n	800bcca <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	695b      	ldr	r3, [r3, #20]
 800bc06:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	695b      	ldr	r3, [r3, #20]
 800bc0e:	f003 0301 	and.w	r3, r3, #1
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d114      	bne.n	800bc40 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc1e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bc20:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc26:	1d1a      	adds	r2, r3, #4
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	3b01      	subs	r3, #1
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bc3e:	e044      	b.n	800bcca <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	8bfa      	ldrh	r2, [r7, #30]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d919      	bls.n	800bc82 <HAL_SPI_Receive+0x1a2>
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d014      	beq.n	800bc82 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc60:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bc62:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc68:	1d1a      	adds	r2, r3, #4
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	3b01      	subs	r3, #1
 800bc78:	b29a      	uxth	r2, r3
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bc80:	e023      	b.n	800bcca <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc82:	f7f6 fe69 	bl	8002958 <HAL_GetTick>
 800bc86:	4602      	mov	r2, r0
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	1ad3      	subs	r3, r2, r3
 800bc8c:	683a      	ldr	r2, [r7, #0]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d803      	bhi.n	800bc9a <HAL_SPI_Receive+0x1ba>
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc98:	d102      	bne.n	800bca0 <HAL_SPI_Receive+0x1c0>
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d114      	bne.n	800bcca <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bca0:	68f8      	ldr	r0, [r7, #12]
 800bca2:	f000 f99d 	bl	800bfe0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bcac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2201      	movs	r2, #1
 800bcba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bcc6:	2303      	movs	r3, #3
 800bcc8:	e178      	b.n	800bfbc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d194      	bne.n	800bc00 <HAL_SPI_Receive+0x120>
 800bcd6:	e15e      	b.n	800bf96 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	2b07      	cmp	r3, #7
 800bcde:	f240 8153 	bls.w	800bf88 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bce2:	e08f      	b.n	800be04 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	695b      	ldr	r3, [r3, #20]
 800bcea:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	695b      	ldr	r3, [r3, #20]
 800bcf2:	f003 0301 	and.w	r3, r3, #1
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	d114      	bne.n	800bd24 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcfe:	69ba      	ldr	r2, [r7, #24]
 800bd00:	8812      	ldrh	r2, [r2, #0]
 800bd02:	b292      	uxth	r2, r2
 800bd04:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd0a:	1c9a      	adds	r2, r3, #2
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	b29a      	uxth	r2, r3
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bd22:	e06f      	b.n	800be04 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	8bfa      	ldrh	r2, [r7, #30]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d924      	bls.n	800bd7c <HAL_SPI_Receive+0x29c>
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d01f      	beq.n	800bd7c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd40:	69ba      	ldr	r2, [r7, #24]
 800bd42:	8812      	ldrh	r2, [r2, #0]
 800bd44:	b292      	uxth	r2, r2
 800bd46:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd4c:	1c9a      	adds	r2, r3, #2
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd56:	69ba      	ldr	r2, [r7, #24]
 800bd58:	8812      	ldrh	r2, [r2, #0]
 800bd5a:	b292      	uxth	r2, r2
 800bd5c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd62:	1c9a      	adds	r2, r3, #2
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	3b02      	subs	r3, #2
 800bd72:	b29a      	uxth	r2, r3
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bd7a:	e043      	b.n	800be04 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd82:	b29b      	uxth	r3, r3
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d119      	bne.n	800bdbc <HAL_SPI_Receive+0x2dc>
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d014      	beq.n	800bdbc <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd96:	69ba      	ldr	r2, [r7, #24]
 800bd98:	8812      	ldrh	r2, [r2, #0]
 800bd9a:	b292      	uxth	r2, r2
 800bd9c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bda2:	1c9a      	adds	r2, r3, #2
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bdae:	b29b      	uxth	r3, r3
 800bdb0:	3b01      	subs	r3, #1
 800bdb2:	b29a      	uxth	r2, r3
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bdba:	e023      	b.n	800be04 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bdbc:	f7f6 fdcc 	bl	8002958 <HAL_GetTick>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	1ad3      	subs	r3, r2, r3
 800bdc6:	683a      	ldr	r2, [r7, #0]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d803      	bhi.n	800bdd4 <HAL_SPI_Receive+0x2f4>
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd2:	d102      	bne.n	800bdda <HAL_SPI_Receive+0x2fa>
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d114      	bne.n	800be04 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f000 f900 	bl	800bfe0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bde6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800be00:	2303      	movs	r3, #3
 800be02:	e0db      	b.n	800bfbc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f47f af69 	bne.w	800bce4 <HAL_SPI_Receive+0x204>
 800be12:	e0c0      	b.n	800bf96 <HAL_SPI_Receive+0x4b6>
 800be14:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	695b      	ldr	r3, [r3, #20]
 800be1e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	695b      	ldr	r3, [r3, #20]
 800be26:	f003 0301 	and.w	r3, r3, #1
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d117      	bne.n	800be5e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be3a:	7812      	ldrb	r2, [r2, #0]
 800be3c:	b2d2      	uxtb	r2, r2
 800be3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be44:	1c5a      	adds	r2, r3, #1
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be50:	b29b      	uxth	r3, r3
 800be52:	3b01      	subs	r3, #1
 800be54:	b29a      	uxth	r2, r3
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800be5c:	e094      	b.n	800bf88 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be64:	b29b      	uxth	r3, r3
 800be66:	8bfa      	ldrh	r2, [r7, #30]
 800be68:	429a      	cmp	r2, r3
 800be6a:	d946      	bls.n	800befa <HAL_SPI_Receive+0x41a>
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800be72:	2b00      	cmp	r3, #0
 800be74:	d041      	beq.n	800befa <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be82:	7812      	ldrb	r2, [r2, #0]
 800be84:	b2d2      	uxtb	r2, r2
 800be86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be8c:	1c5a      	adds	r2, r3, #1
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be9e:	7812      	ldrb	r2, [r2, #0]
 800bea0:	b2d2      	uxtb	r2, r2
 800bea2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bea8:	1c5a      	adds	r2, r3, #1
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800beba:	7812      	ldrb	r2, [r2, #0]
 800bebc:	b2d2      	uxtb	r2, r2
 800bebe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bec4:	1c5a      	adds	r2, r3, #1
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bed6:	7812      	ldrb	r2, [r2, #0]
 800bed8:	b2d2      	uxtb	r2, r2
 800beda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bee0:	1c5a      	adds	r2, r3, #1
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800beec:	b29b      	uxth	r3, r3
 800beee:	3b04      	subs	r3, #4
 800bef0:	b29a      	uxth	r2, r3
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bef8:	e046      	b.n	800bf88 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	2b03      	cmp	r3, #3
 800bf04:	d81c      	bhi.n	800bf40 <HAL_SPI_Receive+0x460>
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d017      	beq.n	800bf40 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf1c:	7812      	ldrb	r2, [r2, #0]
 800bf1e:	b2d2      	uxtb	r2, r2
 800bf20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf26:	1c5a      	adds	r2, r3, #1
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	3b01      	subs	r3, #1
 800bf36:	b29a      	uxth	r2, r3
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bf3e:	e023      	b.n	800bf88 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf40:	f7f6 fd0a 	bl	8002958 <HAL_GetTick>
 800bf44:	4602      	mov	r2, r0
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	1ad3      	subs	r3, r2, r3
 800bf4a:	683a      	ldr	r2, [r7, #0]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d803      	bhi.n	800bf58 <HAL_SPI_Receive+0x478>
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf56:	d102      	bne.n	800bf5e <HAL_SPI_Receive+0x47e>
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d114      	bne.n	800bf88 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bf5e:	68f8      	ldr	r0, [r7, #12]
 800bf60:	f000 f83e 	bl	800bfe0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf6a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2201      	movs	r2, #1
 800bf78:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bf84:	2303      	movs	r3, #3
 800bf86:	e019      	b.n	800bfbc <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	f47f af41 	bne.w	800be18 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bf96:	68f8      	ldr	r0, [r7, #12]
 800bf98:	f000 f822 	bl	800bfe0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d001      	beq.n	800bfba <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	e000      	b.n	800bfbc <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800bfba:	2300      	movs	r3, #0
  }
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3720      	adds	r7, #32
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bfd2:	b2db      	uxtb	r3, r3
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	370c      	adds	r7, #12
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b085      	sub	sp, #20
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	695b      	ldr	r3, [r3, #20]
 800bfee:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	699a      	ldr	r2, [r3, #24]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f042 0208 	orr.w	r2, r2, #8
 800bffe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	699a      	ldr	r2, [r3, #24]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f042 0210 	orr.w	r2, r2, #16
 800c00e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	681a      	ldr	r2, [r3, #0]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f022 0201 	bic.w	r2, r2, #1
 800c01e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	6919      	ldr	r1, [r3, #16]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681a      	ldr	r2, [r3, #0]
 800c02a:	4b3c      	ldr	r3, [pc, #240]	@ (800c11c <SPI_CloseTransfer+0x13c>)
 800c02c:	400b      	ands	r3, r1
 800c02e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	689a      	ldr	r2, [r3, #8]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c03e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c046:	b2db      	uxtb	r3, r3
 800c048:	2b04      	cmp	r3, #4
 800c04a:	d014      	beq.n	800c076 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f003 0320 	and.w	r3, r3, #32
 800c052:	2b00      	cmp	r3, #0
 800c054:	d00f      	beq.n	800c076 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c05c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	699a      	ldr	r2, [r3, #24]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f042 0220 	orr.w	r2, r2, #32
 800c074:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	2b03      	cmp	r3, #3
 800c080:	d014      	beq.n	800c0ac <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00f      	beq.n	800c0ac <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c092:	f043 0204 	orr.w	r2, r3, #4
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	699a      	ldr	r2, [r3, #24]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c0aa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00f      	beq.n	800c0d6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c0bc:	f043 0201 	orr.w	r2, r3, #1
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	699a      	ldr	r2, [r3, #24]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c0d4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d00f      	beq.n	800c100 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c0e6:	f043 0208 	orr.w	r2, r3, #8
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	699a      	ldr	r2, [r3, #24]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c0fe:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2200      	movs	r2, #0
 800c104:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2200      	movs	r2, #0
 800c10c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c110:	bf00      	nop
 800c112:	3714      	adds	r7, #20
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr
 800c11c:	fffffc90 	.word	0xfffffc90

0800c120 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	603b      	str	r3, [r7, #0]
 800c12c:	4613      	mov	r3, r2
 800c12e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c130:	e010      	b.n	800c154 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c132:	f7f6 fc11 	bl	8002958 <HAL_GetTick>
 800c136:	4602      	mov	r2, r0
 800c138:	69bb      	ldr	r3, [r7, #24]
 800c13a:	1ad3      	subs	r3, r2, r3
 800c13c:	683a      	ldr	r2, [r7, #0]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d803      	bhi.n	800c14a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c148:	d102      	bne.n	800c150 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d101      	bne.n	800c154 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c150:	2303      	movs	r3, #3
 800c152:	e00f      	b.n	800c174 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	695a      	ldr	r2, [r3, #20]
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	4013      	ands	r3, r2
 800c15e:	68ba      	ldr	r2, [r7, #8]
 800c160:	429a      	cmp	r2, r3
 800c162:	bf0c      	ite	eq
 800c164:	2301      	moveq	r3, #1
 800c166:	2300      	movne	r3, #0
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	461a      	mov	r2, r3
 800c16c:	79fb      	ldrb	r3, [r7, #7]
 800c16e:	429a      	cmp	r2, r3
 800c170:	d0df      	beq.n	800c132 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c172:	2300      	movs	r3, #0
}
 800c174:	4618      	mov	r0, r3
 800c176:	3710      	adds	r7, #16
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b085      	sub	sp, #20
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c188:	095b      	lsrs	r3, r3, #5
 800c18a:	3301      	adds	r3, #1
 800c18c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	68db      	ldr	r3, [r3, #12]
 800c192:	3301      	adds	r3, #1
 800c194:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	3307      	adds	r3, #7
 800c19a:	08db      	lsrs	r3, r3, #3
 800c19c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	68fa      	ldr	r2, [r7, #12]
 800c1a2:	fb02 f303 	mul.w	r3, r2, r3
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3714      	adds	r7, #20
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr

0800c1b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b082      	sub	sp, #8
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d101      	bne.n	800c1c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	e049      	b.n	800c258 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c1ca:	b2db      	uxtb	r3, r3
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d106      	bne.n	800c1de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f7f6 f945 	bl	8002468 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2202      	movs	r2, #2
 800c1e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	3304      	adds	r3, #4
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	4610      	mov	r0, r2
 800c1f2:	f000 fa65 	bl	800c6c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2201      	movs	r2, #1
 800c202:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2201      	movs	r2, #1
 800c20a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2201      	movs	r2, #1
 800c212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2201      	movs	r2, #1
 800c21a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2201      	movs	r2, #1
 800c222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2201      	movs	r2, #1
 800c22a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2201      	movs	r2, #1
 800c232:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2201      	movs	r2, #1
 800c23a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2201      	movs	r2, #1
 800c242:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2201      	movs	r2, #1
 800c24a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2201      	movs	r2, #1
 800c252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c256:	2300      	movs	r3, #0
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3708      	adds	r7, #8
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d109      	bne.n	800c284 <HAL_TIM_PWM_Start+0x24>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c276:	b2db      	uxtb	r3, r3
 800c278:	2b01      	cmp	r3, #1
 800c27a:	bf14      	ite	ne
 800c27c:	2301      	movne	r3, #1
 800c27e:	2300      	moveq	r3, #0
 800c280:	b2db      	uxtb	r3, r3
 800c282:	e03c      	b.n	800c2fe <HAL_TIM_PWM_Start+0x9e>
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	2b04      	cmp	r3, #4
 800c288:	d109      	bne.n	800c29e <HAL_TIM_PWM_Start+0x3e>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c290:	b2db      	uxtb	r3, r3
 800c292:	2b01      	cmp	r3, #1
 800c294:	bf14      	ite	ne
 800c296:	2301      	movne	r3, #1
 800c298:	2300      	moveq	r3, #0
 800c29a:	b2db      	uxtb	r3, r3
 800c29c:	e02f      	b.n	800c2fe <HAL_TIM_PWM_Start+0x9e>
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	2b08      	cmp	r3, #8
 800c2a2:	d109      	bne.n	800c2b8 <HAL_TIM_PWM_Start+0x58>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c2aa:	b2db      	uxtb	r3, r3
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	bf14      	ite	ne
 800c2b0:	2301      	movne	r3, #1
 800c2b2:	2300      	moveq	r3, #0
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	e022      	b.n	800c2fe <HAL_TIM_PWM_Start+0x9e>
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	2b0c      	cmp	r3, #12
 800c2bc:	d109      	bne.n	800c2d2 <HAL_TIM_PWM_Start+0x72>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c2c4:	b2db      	uxtb	r3, r3
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	bf14      	ite	ne
 800c2ca:	2301      	movne	r3, #1
 800c2cc:	2300      	moveq	r3, #0
 800c2ce:	b2db      	uxtb	r3, r3
 800c2d0:	e015      	b.n	800c2fe <HAL_TIM_PWM_Start+0x9e>
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	2b10      	cmp	r3, #16
 800c2d6:	d109      	bne.n	800c2ec <HAL_TIM_PWM_Start+0x8c>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	2b01      	cmp	r3, #1
 800c2e2:	bf14      	ite	ne
 800c2e4:	2301      	movne	r3, #1
 800c2e6:	2300      	moveq	r3, #0
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	e008      	b.n	800c2fe <HAL_TIM_PWM_Start+0x9e>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	bf14      	ite	ne
 800c2f8:	2301      	movne	r3, #1
 800c2fa:	2300      	moveq	r3, #0
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d001      	beq.n	800c306 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c302:	2301      	movs	r3, #1
 800c304:	e0ab      	b.n	800c45e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d104      	bne.n	800c316 <HAL_TIM_PWM_Start+0xb6>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2202      	movs	r2, #2
 800c310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c314:	e023      	b.n	800c35e <HAL_TIM_PWM_Start+0xfe>
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	2b04      	cmp	r3, #4
 800c31a:	d104      	bne.n	800c326 <HAL_TIM_PWM_Start+0xc6>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2202      	movs	r2, #2
 800c320:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c324:	e01b      	b.n	800c35e <HAL_TIM_PWM_Start+0xfe>
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	2b08      	cmp	r3, #8
 800c32a:	d104      	bne.n	800c336 <HAL_TIM_PWM_Start+0xd6>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2202      	movs	r2, #2
 800c330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c334:	e013      	b.n	800c35e <HAL_TIM_PWM_Start+0xfe>
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	2b0c      	cmp	r3, #12
 800c33a:	d104      	bne.n	800c346 <HAL_TIM_PWM_Start+0xe6>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2202      	movs	r2, #2
 800c340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c344:	e00b      	b.n	800c35e <HAL_TIM_PWM_Start+0xfe>
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	2b10      	cmp	r3, #16
 800c34a:	d104      	bne.n	800c356 <HAL_TIM_PWM_Start+0xf6>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2202      	movs	r2, #2
 800c350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c354:	e003      	b.n	800c35e <HAL_TIM_PWM_Start+0xfe>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2202      	movs	r2, #2
 800c35a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	2201      	movs	r2, #1
 800c364:	6839      	ldr	r1, [r7, #0]
 800c366:	4618      	mov	r0, r3
 800c368:	f000 fd32 	bl	800cdd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a3d      	ldr	r2, [pc, #244]	@ (800c468 <HAL_TIM_PWM_Start+0x208>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d013      	beq.n	800c39e <HAL_TIM_PWM_Start+0x13e>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4a3c      	ldr	r2, [pc, #240]	@ (800c46c <HAL_TIM_PWM_Start+0x20c>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d00e      	beq.n	800c39e <HAL_TIM_PWM_Start+0x13e>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	4a3a      	ldr	r2, [pc, #232]	@ (800c470 <HAL_TIM_PWM_Start+0x210>)
 800c386:	4293      	cmp	r3, r2
 800c388:	d009      	beq.n	800c39e <HAL_TIM_PWM_Start+0x13e>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4a39      	ldr	r2, [pc, #228]	@ (800c474 <HAL_TIM_PWM_Start+0x214>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d004      	beq.n	800c39e <HAL_TIM_PWM_Start+0x13e>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a37      	ldr	r2, [pc, #220]	@ (800c478 <HAL_TIM_PWM_Start+0x218>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d101      	bne.n	800c3a2 <HAL_TIM_PWM_Start+0x142>
 800c39e:	2301      	movs	r3, #1
 800c3a0:	e000      	b.n	800c3a4 <HAL_TIM_PWM_Start+0x144>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d007      	beq.n	800c3b8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c3b6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a2a      	ldr	r2, [pc, #168]	@ (800c468 <HAL_TIM_PWM_Start+0x208>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d02c      	beq.n	800c41c <HAL_TIM_PWM_Start+0x1bc>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3ca:	d027      	beq.n	800c41c <HAL_TIM_PWM_Start+0x1bc>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a2a      	ldr	r2, [pc, #168]	@ (800c47c <HAL_TIM_PWM_Start+0x21c>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d022      	beq.n	800c41c <HAL_TIM_PWM_Start+0x1bc>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4a29      	ldr	r2, [pc, #164]	@ (800c480 <HAL_TIM_PWM_Start+0x220>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d01d      	beq.n	800c41c <HAL_TIM_PWM_Start+0x1bc>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a27      	ldr	r2, [pc, #156]	@ (800c484 <HAL_TIM_PWM_Start+0x224>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d018      	beq.n	800c41c <HAL_TIM_PWM_Start+0x1bc>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	4a1f      	ldr	r2, [pc, #124]	@ (800c46c <HAL_TIM_PWM_Start+0x20c>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d013      	beq.n	800c41c <HAL_TIM_PWM_Start+0x1bc>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4a23      	ldr	r2, [pc, #140]	@ (800c488 <HAL_TIM_PWM_Start+0x228>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d00e      	beq.n	800c41c <HAL_TIM_PWM_Start+0x1bc>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4a1b      	ldr	r2, [pc, #108]	@ (800c470 <HAL_TIM_PWM_Start+0x210>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d009      	beq.n	800c41c <HAL_TIM_PWM_Start+0x1bc>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4a1f      	ldr	r2, [pc, #124]	@ (800c48c <HAL_TIM_PWM_Start+0x22c>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d004      	beq.n	800c41c <HAL_TIM_PWM_Start+0x1bc>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4a1e      	ldr	r2, [pc, #120]	@ (800c490 <HAL_TIM_PWM_Start+0x230>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d115      	bne.n	800c448 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	689a      	ldr	r2, [r3, #8]
 800c422:	4b1c      	ldr	r3, [pc, #112]	@ (800c494 <HAL_TIM_PWM_Start+0x234>)
 800c424:	4013      	ands	r3, r2
 800c426:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2b06      	cmp	r3, #6
 800c42c:	d015      	beq.n	800c45a <HAL_TIM_PWM_Start+0x1fa>
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c434:	d011      	beq.n	800c45a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	681a      	ldr	r2, [r3, #0]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f042 0201 	orr.w	r2, r2, #1
 800c444:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c446:	e008      	b.n	800c45a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	681a      	ldr	r2, [r3, #0]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f042 0201 	orr.w	r2, r2, #1
 800c456:	601a      	str	r2, [r3, #0]
 800c458:	e000      	b.n	800c45c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c45a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c45c:	2300      	movs	r3, #0
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3710      	adds	r7, #16
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	40010000 	.word	0x40010000
 800c46c:	40010400 	.word	0x40010400
 800c470:	40014000 	.word	0x40014000
 800c474:	40014400 	.word	0x40014400
 800c478:	40014800 	.word	0x40014800
 800c47c:	40000400 	.word	0x40000400
 800c480:	40000800 	.word	0x40000800
 800c484:	40000c00 	.word	0x40000c00
 800c488:	40001800 	.word	0x40001800
 800c48c:	4000e000 	.word	0x4000e000
 800c490:	4000e400 	.word	0x4000e400
 800c494:	00010007 	.word	0x00010007

0800c498 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b086      	sub	sp, #24
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	d101      	bne.n	800c4b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c4b2:	2302      	movs	r3, #2
 800c4b4:	e0ff      	b.n	800c6b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2b14      	cmp	r3, #20
 800c4c2:	f200 80f0 	bhi.w	800c6a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c4c6:	a201      	add	r2, pc, #4	@ (adr r2, 800c4cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4cc:	0800c521 	.word	0x0800c521
 800c4d0:	0800c6a7 	.word	0x0800c6a7
 800c4d4:	0800c6a7 	.word	0x0800c6a7
 800c4d8:	0800c6a7 	.word	0x0800c6a7
 800c4dc:	0800c561 	.word	0x0800c561
 800c4e0:	0800c6a7 	.word	0x0800c6a7
 800c4e4:	0800c6a7 	.word	0x0800c6a7
 800c4e8:	0800c6a7 	.word	0x0800c6a7
 800c4ec:	0800c5a3 	.word	0x0800c5a3
 800c4f0:	0800c6a7 	.word	0x0800c6a7
 800c4f4:	0800c6a7 	.word	0x0800c6a7
 800c4f8:	0800c6a7 	.word	0x0800c6a7
 800c4fc:	0800c5e3 	.word	0x0800c5e3
 800c500:	0800c6a7 	.word	0x0800c6a7
 800c504:	0800c6a7 	.word	0x0800c6a7
 800c508:	0800c6a7 	.word	0x0800c6a7
 800c50c:	0800c625 	.word	0x0800c625
 800c510:	0800c6a7 	.word	0x0800c6a7
 800c514:	0800c6a7 	.word	0x0800c6a7
 800c518:	0800c6a7 	.word	0x0800c6a7
 800c51c:	0800c665 	.word	0x0800c665
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	68b9      	ldr	r1, [r7, #8]
 800c526:	4618      	mov	r0, r3
 800c528:	f000 f97c 	bl	800c824 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	699a      	ldr	r2, [r3, #24]
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f042 0208 	orr.w	r2, r2, #8
 800c53a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	699a      	ldr	r2, [r3, #24]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f022 0204 	bic.w	r2, r2, #4
 800c54a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6999      	ldr	r1, [r3, #24]
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	691a      	ldr	r2, [r3, #16]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	430a      	orrs	r2, r1
 800c55c:	619a      	str	r2, [r3, #24]
      break;
 800c55e:	e0a5      	b.n	800c6ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	68b9      	ldr	r1, [r7, #8]
 800c566:	4618      	mov	r0, r3
 800c568:	f000 f9ec 	bl	800c944 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	699a      	ldr	r2, [r3, #24]
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c57a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	699a      	ldr	r2, [r3, #24]
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c58a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	6999      	ldr	r1, [r3, #24]
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	691b      	ldr	r3, [r3, #16]
 800c596:	021a      	lsls	r2, r3, #8
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	430a      	orrs	r2, r1
 800c59e:	619a      	str	r2, [r3, #24]
      break;
 800c5a0:	e084      	b.n	800c6ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	68b9      	ldr	r1, [r7, #8]
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f000 fa55 	bl	800ca58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	69da      	ldr	r2, [r3, #28]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f042 0208 	orr.w	r2, r2, #8
 800c5bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	69da      	ldr	r2, [r3, #28]
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f022 0204 	bic.w	r2, r2, #4
 800c5cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	69d9      	ldr	r1, [r3, #28]
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	691a      	ldr	r2, [r3, #16]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	430a      	orrs	r2, r1
 800c5de:	61da      	str	r2, [r3, #28]
      break;
 800c5e0:	e064      	b.n	800c6ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	68b9      	ldr	r1, [r7, #8]
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f000 fabd 	bl	800cb68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	69da      	ldr	r2, [r3, #28]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c5fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	69da      	ldr	r2, [r3, #28]
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c60c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	69d9      	ldr	r1, [r3, #28]
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	691b      	ldr	r3, [r3, #16]
 800c618:	021a      	lsls	r2, r3, #8
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	430a      	orrs	r2, r1
 800c620:	61da      	str	r2, [r3, #28]
      break;
 800c622:	e043      	b.n	800c6ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	68b9      	ldr	r1, [r7, #8]
 800c62a:	4618      	mov	r0, r3
 800c62c:	f000 fb06 	bl	800cc3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f042 0208 	orr.w	r2, r2, #8
 800c63e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f022 0204 	bic.w	r2, r2, #4
 800c64e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	691a      	ldr	r2, [r3, #16]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	430a      	orrs	r2, r1
 800c660:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c662:	e023      	b.n	800c6ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	68b9      	ldr	r1, [r7, #8]
 800c66a:	4618      	mov	r0, r3
 800c66c:	f000 fb4a 	bl	800cd04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c67e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c68e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	691b      	ldr	r3, [r3, #16]
 800c69a:	021a      	lsls	r2, r3, #8
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	430a      	orrs	r2, r1
 800c6a2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c6a4:	e002      	b.n	800c6ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	75fb      	strb	r3, [r7, #23]
      break;
 800c6aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c6b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3718      	adds	r7, #24
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	bf00      	nop

0800c6c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b085      	sub	sp, #20
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	4a4a      	ldr	r2, [pc, #296]	@ (800c7fc <TIM_Base_SetConfig+0x13c>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d013      	beq.n	800c700 <TIM_Base_SetConfig+0x40>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6de:	d00f      	beq.n	800c700 <TIM_Base_SetConfig+0x40>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	4a47      	ldr	r2, [pc, #284]	@ (800c800 <TIM_Base_SetConfig+0x140>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d00b      	beq.n	800c700 <TIM_Base_SetConfig+0x40>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	4a46      	ldr	r2, [pc, #280]	@ (800c804 <TIM_Base_SetConfig+0x144>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d007      	beq.n	800c700 <TIM_Base_SetConfig+0x40>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	4a45      	ldr	r2, [pc, #276]	@ (800c808 <TIM_Base_SetConfig+0x148>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d003      	beq.n	800c700 <TIM_Base_SetConfig+0x40>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	4a44      	ldr	r2, [pc, #272]	@ (800c80c <TIM_Base_SetConfig+0x14c>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d108      	bne.n	800c712 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	4313      	orrs	r3, r2
 800c710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	4a39      	ldr	r2, [pc, #228]	@ (800c7fc <TIM_Base_SetConfig+0x13c>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d027      	beq.n	800c76a <TIM_Base_SetConfig+0xaa>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c720:	d023      	beq.n	800c76a <TIM_Base_SetConfig+0xaa>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	4a36      	ldr	r2, [pc, #216]	@ (800c800 <TIM_Base_SetConfig+0x140>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d01f      	beq.n	800c76a <TIM_Base_SetConfig+0xaa>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	4a35      	ldr	r2, [pc, #212]	@ (800c804 <TIM_Base_SetConfig+0x144>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d01b      	beq.n	800c76a <TIM_Base_SetConfig+0xaa>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	4a34      	ldr	r2, [pc, #208]	@ (800c808 <TIM_Base_SetConfig+0x148>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d017      	beq.n	800c76a <TIM_Base_SetConfig+0xaa>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	4a33      	ldr	r2, [pc, #204]	@ (800c80c <TIM_Base_SetConfig+0x14c>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d013      	beq.n	800c76a <TIM_Base_SetConfig+0xaa>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	4a32      	ldr	r2, [pc, #200]	@ (800c810 <TIM_Base_SetConfig+0x150>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d00f      	beq.n	800c76a <TIM_Base_SetConfig+0xaa>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	4a31      	ldr	r2, [pc, #196]	@ (800c814 <TIM_Base_SetConfig+0x154>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d00b      	beq.n	800c76a <TIM_Base_SetConfig+0xaa>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	4a30      	ldr	r2, [pc, #192]	@ (800c818 <TIM_Base_SetConfig+0x158>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d007      	beq.n	800c76a <TIM_Base_SetConfig+0xaa>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	4a2f      	ldr	r2, [pc, #188]	@ (800c81c <TIM_Base_SetConfig+0x15c>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d003      	beq.n	800c76a <TIM_Base_SetConfig+0xaa>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	4a2e      	ldr	r2, [pc, #184]	@ (800c820 <TIM_Base_SetConfig+0x160>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d108      	bne.n	800c77c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	68db      	ldr	r3, [r3, #12]
 800c776:	68fa      	ldr	r2, [r7, #12]
 800c778:	4313      	orrs	r3, r2
 800c77a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	695b      	ldr	r3, [r3, #20]
 800c786:	4313      	orrs	r3, r2
 800c788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	68fa      	ldr	r2, [r7, #12]
 800c78e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	689a      	ldr	r2, [r3, #8]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	681a      	ldr	r2, [r3, #0]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4a16      	ldr	r2, [pc, #88]	@ (800c7fc <TIM_Base_SetConfig+0x13c>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d00f      	beq.n	800c7c8 <TIM_Base_SetConfig+0x108>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	4a18      	ldr	r2, [pc, #96]	@ (800c80c <TIM_Base_SetConfig+0x14c>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d00b      	beq.n	800c7c8 <TIM_Base_SetConfig+0x108>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	4a17      	ldr	r2, [pc, #92]	@ (800c810 <TIM_Base_SetConfig+0x150>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d007      	beq.n	800c7c8 <TIM_Base_SetConfig+0x108>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4a16      	ldr	r2, [pc, #88]	@ (800c814 <TIM_Base_SetConfig+0x154>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d003      	beq.n	800c7c8 <TIM_Base_SetConfig+0x108>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4a15      	ldr	r2, [pc, #84]	@ (800c818 <TIM_Base_SetConfig+0x158>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d103      	bne.n	800c7d0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	691a      	ldr	r2, [r3, #16]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	691b      	ldr	r3, [r3, #16]
 800c7da:	f003 0301 	and.w	r3, r3, #1
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d105      	bne.n	800c7ee <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	691b      	ldr	r3, [r3, #16]
 800c7e6:	f023 0201 	bic.w	r2, r3, #1
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	611a      	str	r2, [r3, #16]
  }
}
 800c7ee:	bf00      	nop
 800c7f0:	3714      	adds	r7, #20
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr
 800c7fa:	bf00      	nop
 800c7fc:	40010000 	.word	0x40010000
 800c800:	40000400 	.word	0x40000400
 800c804:	40000800 	.word	0x40000800
 800c808:	40000c00 	.word	0x40000c00
 800c80c:	40010400 	.word	0x40010400
 800c810:	40014000 	.word	0x40014000
 800c814:	40014400 	.word	0x40014400
 800c818:	40014800 	.word	0x40014800
 800c81c:	4000e000 	.word	0x4000e000
 800c820:	4000e400 	.word	0x4000e400

0800c824 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c824:	b480      	push	{r7}
 800c826:	b087      	sub	sp, #28
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6a1b      	ldr	r3, [r3, #32]
 800c832:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6a1b      	ldr	r3, [r3, #32]
 800c838:	f023 0201 	bic.w	r2, r3, #1
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	699b      	ldr	r3, [r3, #24]
 800c84a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	4b37      	ldr	r3, [pc, #220]	@ (800c92c <TIM_OC1_SetConfig+0x108>)
 800c850:	4013      	ands	r3, r2
 800c852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f023 0303 	bic.w	r3, r3, #3
 800c85a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	68fa      	ldr	r2, [r7, #12]
 800c862:	4313      	orrs	r3, r2
 800c864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	f023 0302 	bic.w	r3, r3, #2
 800c86c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	689b      	ldr	r3, [r3, #8]
 800c872:	697a      	ldr	r2, [r7, #20]
 800c874:	4313      	orrs	r3, r2
 800c876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	4a2d      	ldr	r2, [pc, #180]	@ (800c930 <TIM_OC1_SetConfig+0x10c>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d00f      	beq.n	800c8a0 <TIM_OC1_SetConfig+0x7c>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	4a2c      	ldr	r2, [pc, #176]	@ (800c934 <TIM_OC1_SetConfig+0x110>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d00b      	beq.n	800c8a0 <TIM_OC1_SetConfig+0x7c>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	4a2b      	ldr	r2, [pc, #172]	@ (800c938 <TIM_OC1_SetConfig+0x114>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d007      	beq.n	800c8a0 <TIM_OC1_SetConfig+0x7c>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	4a2a      	ldr	r2, [pc, #168]	@ (800c93c <TIM_OC1_SetConfig+0x118>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d003      	beq.n	800c8a0 <TIM_OC1_SetConfig+0x7c>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	4a29      	ldr	r2, [pc, #164]	@ (800c940 <TIM_OC1_SetConfig+0x11c>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d10c      	bne.n	800c8ba <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	f023 0308 	bic.w	r3, r3, #8
 800c8a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	68db      	ldr	r3, [r3, #12]
 800c8ac:	697a      	ldr	r2, [r7, #20]
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	f023 0304 	bic.w	r3, r3, #4
 800c8b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	4a1c      	ldr	r2, [pc, #112]	@ (800c930 <TIM_OC1_SetConfig+0x10c>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d00f      	beq.n	800c8e2 <TIM_OC1_SetConfig+0xbe>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	4a1b      	ldr	r2, [pc, #108]	@ (800c934 <TIM_OC1_SetConfig+0x110>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d00b      	beq.n	800c8e2 <TIM_OC1_SetConfig+0xbe>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	4a1a      	ldr	r2, [pc, #104]	@ (800c938 <TIM_OC1_SetConfig+0x114>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d007      	beq.n	800c8e2 <TIM_OC1_SetConfig+0xbe>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	4a19      	ldr	r2, [pc, #100]	@ (800c93c <TIM_OC1_SetConfig+0x118>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d003      	beq.n	800c8e2 <TIM_OC1_SetConfig+0xbe>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	4a18      	ldr	r2, [pc, #96]	@ (800c940 <TIM_OC1_SetConfig+0x11c>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d111      	bne.n	800c906 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c8e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c8f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	695b      	ldr	r3, [r3, #20]
 800c8f6:	693a      	ldr	r2, [r7, #16]
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	699b      	ldr	r3, [r3, #24]
 800c900:	693a      	ldr	r2, [r7, #16]
 800c902:	4313      	orrs	r3, r2
 800c904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	693a      	ldr	r2, [r7, #16]
 800c90a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	68fa      	ldr	r2, [r7, #12]
 800c910:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	685a      	ldr	r2, [r3, #4]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	697a      	ldr	r2, [r7, #20]
 800c91e:	621a      	str	r2, [r3, #32]
}
 800c920:	bf00      	nop
 800c922:	371c      	adds	r7, #28
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr
 800c92c:	fffeff8f 	.word	0xfffeff8f
 800c930:	40010000 	.word	0x40010000
 800c934:	40010400 	.word	0x40010400
 800c938:	40014000 	.word	0x40014000
 800c93c:	40014400 	.word	0x40014400
 800c940:	40014800 	.word	0x40014800

0800c944 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c944:	b480      	push	{r7}
 800c946:	b087      	sub	sp, #28
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6a1b      	ldr	r3, [r3, #32]
 800c952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6a1b      	ldr	r3, [r3, #32]
 800c958:	f023 0210 	bic.w	r2, r3, #16
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	699b      	ldr	r3, [r3, #24]
 800c96a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c96c:	68fa      	ldr	r2, [r7, #12]
 800c96e:	4b34      	ldr	r3, [pc, #208]	@ (800ca40 <TIM_OC2_SetConfig+0xfc>)
 800c970:	4013      	ands	r3, r2
 800c972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c97a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	021b      	lsls	r3, r3, #8
 800c982:	68fa      	ldr	r2, [r7, #12]
 800c984:	4313      	orrs	r3, r2
 800c986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	f023 0320 	bic.w	r3, r3, #32
 800c98e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	011b      	lsls	r3, r3, #4
 800c996:	697a      	ldr	r2, [r7, #20]
 800c998:	4313      	orrs	r3, r2
 800c99a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	4a29      	ldr	r2, [pc, #164]	@ (800ca44 <TIM_OC2_SetConfig+0x100>)
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d003      	beq.n	800c9ac <TIM_OC2_SetConfig+0x68>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	4a28      	ldr	r2, [pc, #160]	@ (800ca48 <TIM_OC2_SetConfig+0x104>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d10d      	bne.n	800c9c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c9b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	011b      	lsls	r3, r3, #4
 800c9ba:	697a      	ldr	r2, [r7, #20]
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c9c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	4a1e      	ldr	r2, [pc, #120]	@ (800ca44 <TIM_OC2_SetConfig+0x100>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d00f      	beq.n	800c9f0 <TIM_OC2_SetConfig+0xac>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	4a1d      	ldr	r2, [pc, #116]	@ (800ca48 <TIM_OC2_SetConfig+0x104>)
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d00b      	beq.n	800c9f0 <TIM_OC2_SetConfig+0xac>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	4a1c      	ldr	r2, [pc, #112]	@ (800ca4c <TIM_OC2_SetConfig+0x108>)
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d007      	beq.n	800c9f0 <TIM_OC2_SetConfig+0xac>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	4a1b      	ldr	r2, [pc, #108]	@ (800ca50 <TIM_OC2_SetConfig+0x10c>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d003      	beq.n	800c9f0 <TIM_OC2_SetConfig+0xac>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	4a1a      	ldr	r2, [pc, #104]	@ (800ca54 <TIM_OC2_SetConfig+0x110>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d113      	bne.n	800ca18 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c9f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c9fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	695b      	ldr	r3, [r3, #20]
 800ca04:	009b      	lsls	r3, r3, #2
 800ca06:	693a      	ldr	r2, [r7, #16]
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	699b      	ldr	r3, [r3, #24]
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	693a      	ldr	r2, [r7, #16]
 800ca14:	4313      	orrs	r3, r2
 800ca16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	693a      	ldr	r2, [r7, #16]
 800ca1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	68fa      	ldr	r2, [r7, #12]
 800ca22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	685a      	ldr	r2, [r3, #4]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	697a      	ldr	r2, [r7, #20]
 800ca30:	621a      	str	r2, [r3, #32]
}
 800ca32:	bf00      	nop
 800ca34:	371c      	adds	r7, #28
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr
 800ca3e:	bf00      	nop
 800ca40:	feff8fff 	.word	0xfeff8fff
 800ca44:	40010000 	.word	0x40010000
 800ca48:	40010400 	.word	0x40010400
 800ca4c:	40014000 	.word	0x40014000
 800ca50:	40014400 	.word	0x40014400
 800ca54:	40014800 	.word	0x40014800

0800ca58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b087      	sub	sp, #28
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6a1b      	ldr	r3, [r3, #32]
 800ca66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6a1b      	ldr	r3, [r3, #32]
 800ca6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	69db      	ldr	r3, [r3, #28]
 800ca7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ca80:	68fa      	ldr	r2, [r7, #12]
 800ca82:	4b33      	ldr	r3, [pc, #204]	@ (800cb50 <TIM_OC3_SetConfig+0xf8>)
 800ca84:	4013      	ands	r3, r2
 800ca86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f023 0303 	bic.w	r3, r3, #3
 800ca8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	68fa      	ldr	r2, [r7, #12]
 800ca96:	4313      	orrs	r3, r2
 800ca98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800caa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	689b      	ldr	r3, [r3, #8]
 800caa6:	021b      	lsls	r3, r3, #8
 800caa8:	697a      	ldr	r2, [r7, #20]
 800caaa:	4313      	orrs	r3, r2
 800caac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	4a28      	ldr	r2, [pc, #160]	@ (800cb54 <TIM_OC3_SetConfig+0xfc>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d003      	beq.n	800cabe <TIM_OC3_SetConfig+0x66>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	4a27      	ldr	r2, [pc, #156]	@ (800cb58 <TIM_OC3_SetConfig+0x100>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d10d      	bne.n	800cada <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cac4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	68db      	ldr	r3, [r3, #12]
 800caca:	021b      	lsls	r3, r3, #8
 800cacc:	697a      	ldr	r2, [r7, #20]
 800cace:	4313      	orrs	r3, r2
 800cad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cad2:	697b      	ldr	r3, [r7, #20]
 800cad4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	4a1d      	ldr	r2, [pc, #116]	@ (800cb54 <TIM_OC3_SetConfig+0xfc>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d00f      	beq.n	800cb02 <TIM_OC3_SetConfig+0xaa>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	4a1c      	ldr	r2, [pc, #112]	@ (800cb58 <TIM_OC3_SetConfig+0x100>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d00b      	beq.n	800cb02 <TIM_OC3_SetConfig+0xaa>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	4a1b      	ldr	r2, [pc, #108]	@ (800cb5c <TIM_OC3_SetConfig+0x104>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d007      	beq.n	800cb02 <TIM_OC3_SetConfig+0xaa>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	4a1a      	ldr	r2, [pc, #104]	@ (800cb60 <TIM_OC3_SetConfig+0x108>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d003      	beq.n	800cb02 <TIM_OC3_SetConfig+0xaa>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	4a19      	ldr	r2, [pc, #100]	@ (800cb64 <TIM_OC3_SetConfig+0x10c>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d113      	bne.n	800cb2a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cb08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cb10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	695b      	ldr	r3, [r3, #20]
 800cb16:	011b      	lsls	r3, r3, #4
 800cb18:	693a      	ldr	r2, [r7, #16]
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	699b      	ldr	r3, [r3, #24]
 800cb22:	011b      	lsls	r3, r3, #4
 800cb24:	693a      	ldr	r2, [r7, #16]
 800cb26:	4313      	orrs	r3, r2
 800cb28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	693a      	ldr	r2, [r7, #16]
 800cb2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	68fa      	ldr	r2, [r7, #12]
 800cb34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	685a      	ldr	r2, [r3, #4]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	697a      	ldr	r2, [r7, #20]
 800cb42:	621a      	str	r2, [r3, #32]
}
 800cb44:	bf00      	nop
 800cb46:	371c      	adds	r7, #28
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr
 800cb50:	fffeff8f 	.word	0xfffeff8f
 800cb54:	40010000 	.word	0x40010000
 800cb58:	40010400 	.word	0x40010400
 800cb5c:	40014000 	.word	0x40014000
 800cb60:	40014400 	.word	0x40014400
 800cb64:	40014800 	.word	0x40014800

0800cb68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b087      	sub	sp, #28
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6a1b      	ldr	r3, [r3, #32]
 800cb76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6a1b      	ldr	r3, [r3, #32]
 800cb7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	69db      	ldr	r3, [r3, #28]
 800cb8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cb90:	68fa      	ldr	r2, [r7, #12]
 800cb92:	4b24      	ldr	r3, [pc, #144]	@ (800cc24 <TIM_OC4_SetConfig+0xbc>)
 800cb94:	4013      	ands	r3, r2
 800cb96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	021b      	lsls	r3, r3, #8
 800cba6:	68fa      	ldr	r2, [r7, #12]
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cbb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	689b      	ldr	r3, [r3, #8]
 800cbb8:	031b      	lsls	r3, r3, #12
 800cbba:	693a      	ldr	r2, [r7, #16]
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	4a19      	ldr	r2, [pc, #100]	@ (800cc28 <TIM_OC4_SetConfig+0xc0>)
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d00f      	beq.n	800cbe8 <TIM_OC4_SetConfig+0x80>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	4a18      	ldr	r2, [pc, #96]	@ (800cc2c <TIM_OC4_SetConfig+0xc4>)
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d00b      	beq.n	800cbe8 <TIM_OC4_SetConfig+0x80>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	4a17      	ldr	r2, [pc, #92]	@ (800cc30 <TIM_OC4_SetConfig+0xc8>)
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d007      	beq.n	800cbe8 <TIM_OC4_SetConfig+0x80>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	4a16      	ldr	r2, [pc, #88]	@ (800cc34 <TIM_OC4_SetConfig+0xcc>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d003      	beq.n	800cbe8 <TIM_OC4_SetConfig+0x80>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	4a15      	ldr	r2, [pc, #84]	@ (800cc38 <TIM_OC4_SetConfig+0xd0>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d109      	bne.n	800cbfc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cbee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	695b      	ldr	r3, [r3, #20]
 800cbf4:	019b      	lsls	r3, r3, #6
 800cbf6:	697a      	ldr	r2, [r7, #20]
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	697a      	ldr	r2, [r7, #20]
 800cc00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	68fa      	ldr	r2, [r7, #12]
 800cc06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	685a      	ldr	r2, [r3, #4]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	693a      	ldr	r2, [r7, #16]
 800cc14:	621a      	str	r2, [r3, #32]
}
 800cc16:	bf00      	nop
 800cc18:	371c      	adds	r7, #28
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr
 800cc22:	bf00      	nop
 800cc24:	feff8fff 	.word	0xfeff8fff
 800cc28:	40010000 	.word	0x40010000
 800cc2c:	40010400 	.word	0x40010400
 800cc30:	40014000 	.word	0x40014000
 800cc34:	40014400 	.word	0x40014400
 800cc38:	40014800 	.word	0x40014800

0800cc3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b087      	sub	sp, #28
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6a1b      	ldr	r3, [r3, #32]
 800cc4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6a1b      	ldr	r3, [r3, #32]
 800cc50:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	4b21      	ldr	r3, [pc, #132]	@ (800ccec <TIM_OC5_SetConfig+0xb0>)
 800cc68:	4013      	ands	r3, r2
 800cc6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	68fa      	ldr	r2, [r7, #12]
 800cc72:	4313      	orrs	r3, r2
 800cc74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cc7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	689b      	ldr	r3, [r3, #8]
 800cc82:	041b      	lsls	r3, r3, #16
 800cc84:	693a      	ldr	r2, [r7, #16]
 800cc86:	4313      	orrs	r3, r2
 800cc88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	4a18      	ldr	r2, [pc, #96]	@ (800ccf0 <TIM_OC5_SetConfig+0xb4>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d00f      	beq.n	800ccb2 <TIM_OC5_SetConfig+0x76>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	4a17      	ldr	r2, [pc, #92]	@ (800ccf4 <TIM_OC5_SetConfig+0xb8>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d00b      	beq.n	800ccb2 <TIM_OC5_SetConfig+0x76>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	4a16      	ldr	r2, [pc, #88]	@ (800ccf8 <TIM_OC5_SetConfig+0xbc>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d007      	beq.n	800ccb2 <TIM_OC5_SetConfig+0x76>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	4a15      	ldr	r2, [pc, #84]	@ (800ccfc <TIM_OC5_SetConfig+0xc0>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d003      	beq.n	800ccb2 <TIM_OC5_SetConfig+0x76>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	4a14      	ldr	r2, [pc, #80]	@ (800cd00 <TIM_OC5_SetConfig+0xc4>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d109      	bne.n	800ccc6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ccb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	695b      	ldr	r3, [r3, #20]
 800ccbe:	021b      	lsls	r3, r3, #8
 800ccc0:	697a      	ldr	r2, [r7, #20]
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	697a      	ldr	r2, [r7, #20]
 800ccca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	68fa      	ldr	r2, [r7, #12]
 800ccd0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	685a      	ldr	r2, [r3, #4]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	693a      	ldr	r2, [r7, #16]
 800ccde:	621a      	str	r2, [r3, #32]
}
 800cce0:	bf00      	nop
 800cce2:	371c      	adds	r7, #28
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr
 800ccec:	fffeff8f 	.word	0xfffeff8f
 800ccf0:	40010000 	.word	0x40010000
 800ccf4:	40010400 	.word	0x40010400
 800ccf8:	40014000 	.word	0x40014000
 800ccfc:	40014400 	.word	0x40014400
 800cd00:	40014800 	.word	0x40014800

0800cd04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b087      	sub	sp, #28
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6a1b      	ldr	r3, [r3, #32]
 800cd12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6a1b      	ldr	r3, [r3, #32]
 800cd18:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cd2c:	68fa      	ldr	r2, [r7, #12]
 800cd2e:	4b22      	ldr	r3, [pc, #136]	@ (800cdb8 <TIM_OC6_SetConfig+0xb4>)
 800cd30:	4013      	ands	r3, r2
 800cd32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	021b      	lsls	r3, r3, #8
 800cd3a:	68fa      	ldr	r2, [r7, #12]
 800cd3c:	4313      	orrs	r3, r2
 800cd3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cd46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	051b      	lsls	r3, r3, #20
 800cd4e:	693a      	ldr	r2, [r7, #16]
 800cd50:	4313      	orrs	r3, r2
 800cd52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	4a19      	ldr	r2, [pc, #100]	@ (800cdbc <TIM_OC6_SetConfig+0xb8>)
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d00f      	beq.n	800cd7c <TIM_OC6_SetConfig+0x78>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	4a18      	ldr	r2, [pc, #96]	@ (800cdc0 <TIM_OC6_SetConfig+0xbc>)
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d00b      	beq.n	800cd7c <TIM_OC6_SetConfig+0x78>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	4a17      	ldr	r2, [pc, #92]	@ (800cdc4 <TIM_OC6_SetConfig+0xc0>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d007      	beq.n	800cd7c <TIM_OC6_SetConfig+0x78>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	4a16      	ldr	r2, [pc, #88]	@ (800cdc8 <TIM_OC6_SetConfig+0xc4>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d003      	beq.n	800cd7c <TIM_OC6_SetConfig+0x78>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	4a15      	ldr	r2, [pc, #84]	@ (800cdcc <TIM_OC6_SetConfig+0xc8>)
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d109      	bne.n	800cd90 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cd82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	695b      	ldr	r3, [r3, #20]
 800cd88:	029b      	lsls	r3, r3, #10
 800cd8a:	697a      	ldr	r2, [r7, #20]
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	697a      	ldr	r2, [r7, #20]
 800cd94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	68fa      	ldr	r2, [r7, #12]
 800cd9a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	685a      	ldr	r2, [r3, #4]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	693a      	ldr	r2, [r7, #16]
 800cda8:	621a      	str	r2, [r3, #32]
}
 800cdaa:	bf00      	nop
 800cdac:	371c      	adds	r7, #28
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr
 800cdb6:	bf00      	nop
 800cdb8:	feff8fff 	.word	0xfeff8fff
 800cdbc:	40010000 	.word	0x40010000
 800cdc0:	40010400 	.word	0x40010400
 800cdc4:	40014000 	.word	0x40014000
 800cdc8:	40014400 	.word	0x40014400
 800cdcc:	40014800 	.word	0x40014800

0800cdd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b087      	sub	sp, #28
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	f003 031f 	and.w	r3, r3, #31
 800cde2:	2201      	movs	r2, #1
 800cde4:	fa02 f303 	lsl.w	r3, r2, r3
 800cde8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	6a1a      	ldr	r2, [r3, #32]
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	43db      	mvns	r3, r3
 800cdf2:	401a      	ands	r2, r3
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	6a1a      	ldr	r2, [r3, #32]
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	f003 031f 	and.w	r3, r3, #31
 800ce02:	6879      	ldr	r1, [r7, #4]
 800ce04:	fa01 f303 	lsl.w	r3, r1, r3
 800ce08:	431a      	orrs	r2, r3
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	621a      	str	r2, [r3, #32]
}
 800ce0e:	bf00      	nop
 800ce10:	371c      	adds	r7, #28
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr
	...

0800ce1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ce2c:	2b01      	cmp	r3, #1
 800ce2e:	d101      	bne.n	800ce34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ce30:	2302      	movs	r3, #2
 800ce32:	e077      	b.n	800cf24 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2201      	movs	r2, #1
 800ce38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2202      	movs	r2, #2
 800ce40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	685b      	ldr	r3, [r3, #4]
 800ce4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	689b      	ldr	r3, [r3, #8]
 800ce52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4a35      	ldr	r2, [pc, #212]	@ (800cf30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d004      	beq.n	800ce68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	4a34      	ldr	r2, [pc, #208]	@ (800cf34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d108      	bne.n	800ce7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ce6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	68fa      	ldr	r2, [r7, #12]
 800ce76:	4313      	orrs	r3, r2
 800ce78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	68fa      	ldr	r2, [r7, #12]
 800ce88:	4313      	orrs	r3, r2
 800ce8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	68fa      	ldr	r2, [r7, #12]
 800ce92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4a25      	ldr	r2, [pc, #148]	@ (800cf30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d02c      	beq.n	800cef8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cea6:	d027      	beq.n	800cef8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	4a22      	ldr	r2, [pc, #136]	@ (800cf38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d022      	beq.n	800cef8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4a21      	ldr	r2, [pc, #132]	@ (800cf3c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d01d      	beq.n	800cef8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a1f      	ldr	r2, [pc, #124]	@ (800cf40 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d018      	beq.n	800cef8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	4a1a      	ldr	r2, [pc, #104]	@ (800cf34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d013      	beq.n	800cef8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4a1b      	ldr	r2, [pc, #108]	@ (800cf44 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d00e      	beq.n	800cef8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	4a1a      	ldr	r2, [pc, #104]	@ (800cf48 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d009      	beq.n	800cef8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4a18      	ldr	r2, [pc, #96]	@ (800cf4c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d004      	beq.n	800cef8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	4a17      	ldr	r2, [pc, #92]	@ (800cf50 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d10c      	bne.n	800cf12 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cefe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	689b      	ldr	r3, [r3, #8]
 800cf04:	68ba      	ldr	r2, [r7, #8]
 800cf06:	4313      	orrs	r3, r2
 800cf08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	68ba      	ldr	r2, [r7, #8]
 800cf10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2201      	movs	r2, #1
 800cf16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cf22:	2300      	movs	r3, #0
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3714      	adds	r7, #20
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2e:	4770      	bx	lr
 800cf30:	40010000 	.word	0x40010000
 800cf34:	40010400 	.word	0x40010400
 800cf38:	40000400 	.word	0x40000400
 800cf3c:	40000800 	.word	0x40000800
 800cf40:	40000c00 	.word	0x40000c00
 800cf44:	40001800 	.word	0x40001800
 800cf48:	40014000 	.word	0x40014000
 800cf4c:	4000e000 	.word	0x4000e000
 800cf50:	4000e400 	.word	0x4000e400

0800cf54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d101      	bne.n	800cf66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cf62:	2301      	movs	r3, #1
 800cf64:	e042      	b.n	800cfec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d106      	bne.n	800cf7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f7f5 facd 	bl	8002518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2224      	movs	r2, #36	@ 0x24
 800cf82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f022 0201 	bic.w	r2, r2, #1
 800cf94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d002      	beq.n	800cfa4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f001 fa6c 	bl	800e47c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f000 fbfd 	bl	800d7a4 <UART_SetConfig>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	d101      	bne.n	800cfb4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	e01b      	b.n	800cfec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	685a      	ldr	r2, [r3, #4]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cfc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	689a      	ldr	r2, [r3, #8]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cfd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	681a      	ldr	r2, [r3, #0]
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f042 0201 	orr.w	r2, r2, #1
 800cfe2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f001 faeb 	bl	800e5c0 <UART_CheckIdleState>
 800cfea:	4603      	mov	r3, r0
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3708      	adds	r7, #8
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b0ba      	sub	sp, #232	@ 0xe8
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	69db      	ldr	r3, [r3, #28]
 800d002:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	689b      	ldr	r3, [r3, #8]
 800d016:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d01a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d01e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d022:	4013      	ands	r3, r2
 800d024:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d028:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d11b      	bne.n	800d068 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d034:	f003 0320 	and.w	r3, r3, #32
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d015      	beq.n	800d068 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d03c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d040:	f003 0320 	and.w	r3, r3, #32
 800d044:	2b00      	cmp	r3, #0
 800d046:	d105      	bne.n	800d054 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d04c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d050:	2b00      	cmp	r3, #0
 800d052:	d009      	beq.n	800d068 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d058:	2b00      	cmp	r3, #0
 800d05a:	f000 8377 	beq.w	800d74c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	4798      	blx	r3
      }
      return;
 800d066:	e371      	b.n	800d74c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d068:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	f000 8123 	beq.w	800d2b8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d072:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d076:	4b8d      	ldr	r3, [pc, #564]	@ (800d2ac <HAL_UART_IRQHandler+0x2b8>)
 800d078:	4013      	ands	r3, r2
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d106      	bne.n	800d08c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d07e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d082:	4b8b      	ldr	r3, [pc, #556]	@ (800d2b0 <HAL_UART_IRQHandler+0x2bc>)
 800d084:	4013      	ands	r3, r2
 800d086:	2b00      	cmp	r3, #0
 800d088:	f000 8116 	beq.w	800d2b8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d08c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d090:	f003 0301 	and.w	r3, r3, #1
 800d094:	2b00      	cmp	r3, #0
 800d096:	d011      	beq.n	800d0bc <HAL_UART_IRQHandler+0xc8>
 800d098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d09c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d00b      	beq.n	800d0bc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	2201      	movs	r2, #1
 800d0aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0b2:	f043 0201 	orr.w	r2, r3, #1
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0c0:	f003 0302 	and.w	r3, r3, #2
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d011      	beq.n	800d0ec <HAL_UART_IRQHandler+0xf8>
 800d0c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d0cc:	f003 0301 	and.w	r3, r3, #1
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d00b      	beq.n	800d0ec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	2202      	movs	r2, #2
 800d0da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0e2:	f043 0204 	orr.w	r2, r3, #4
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0f0:	f003 0304 	and.w	r3, r3, #4
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d011      	beq.n	800d11c <HAL_UART_IRQHandler+0x128>
 800d0f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d0fc:	f003 0301 	and.w	r3, r3, #1
 800d100:	2b00      	cmp	r3, #0
 800d102:	d00b      	beq.n	800d11c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	2204      	movs	r2, #4
 800d10a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d112:	f043 0202 	orr.w	r2, r3, #2
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d11c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d120:	f003 0308 	and.w	r3, r3, #8
 800d124:	2b00      	cmp	r3, #0
 800d126:	d017      	beq.n	800d158 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d12c:	f003 0320 	and.w	r3, r3, #32
 800d130:	2b00      	cmp	r3, #0
 800d132:	d105      	bne.n	800d140 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d134:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d138:	4b5c      	ldr	r3, [pc, #368]	@ (800d2ac <HAL_UART_IRQHandler+0x2b8>)
 800d13a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d00b      	beq.n	800d158 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	2208      	movs	r2, #8
 800d146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d14e:	f043 0208 	orr.w	r2, r3, #8
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d15c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d160:	2b00      	cmp	r3, #0
 800d162:	d012      	beq.n	800d18a <HAL_UART_IRQHandler+0x196>
 800d164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d168:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d00c      	beq.n	800d18a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d178:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d180:	f043 0220 	orr.w	r2, r3, #32
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d190:	2b00      	cmp	r3, #0
 800d192:	f000 82dd 	beq.w	800d750 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d19a:	f003 0320 	and.w	r3, r3, #32
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d013      	beq.n	800d1ca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d1a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1a6:	f003 0320 	and.w	r3, r3, #32
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d105      	bne.n	800d1ba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d1ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d1b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d007      	beq.n	800d1ca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d003      	beq.n	800d1ca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	689b      	ldr	r3, [r3, #8]
 800d1da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1de:	2b40      	cmp	r3, #64	@ 0x40
 800d1e0:	d005      	beq.n	800d1ee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d1e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d1e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d054      	beq.n	800d298 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f001 fc20 	bl	800ea34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	689b      	ldr	r3, [r3, #8]
 800d1fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1fe:	2b40      	cmp	r3, #64	@ 0x40
 800d200:	d146      	bne.n	800d290 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	3308      	adds	r3, #8
 800d208:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d20c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d210:	e853 3f00 	ldrex	r3, [r3]
 800d214:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d218:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d21c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d220:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	3308      	adds	r3, #8
 800d22a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d22e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d232:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d236:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d23a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d23e:	e841 2300 	strex	r3, r2, [r1]
 800d242:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d1d9      	bne.n	800d202 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d254:	2b00      	cmp	r3, #0
 800d256:	d017      	beq.n	800d288 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d25e:	4a15      	ldr	r2, [pc, #84]	@ (800d2b4 <HAL_UART_IRQHandler+0x2c0>)
 800d260:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d268:	4618      	mov	r0, r3
 800d26a:	f7f8 fe53 	bl	8005f14 <HAL_DMA_Abort_IT>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d019      	beq.n	800d2a8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d27a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d27c:	687a      	ldr	r2, [r7, #4]
 800d27e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d282:	4610      	mov	r0, r2
 800d284:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d286:	e00f      	b.n	800d2a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 fa81 	bl	800d790 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d28e:	e00b      	b.n	800d2a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f000 fa7d 	bl	800d790 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d296:	e007      	b.n	800d2a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f000 fa79 	bl	800d790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d2a6:	e253      	b.n	800d750 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2a8:	bf00      	nop
    return;
 800d2aa:	e251      	b.n	800d750 <HAL_UART_IRQHandler+0x75c>
 800d2ac:	10000001 	.word	0x10000001
 800d2b0:	04000120 	.word	0x04000120
 800d2b4:	0800eb01 	.word	0x0800eb01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	f040 81e7 	bne.w	800d690 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d2c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2c6:	f003 0310 	and.w	r3, r3, #16
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	f000 81e0 	beq.w	800d690 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d2d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d2d4:	f003 0310 	and.w	r3, r3, #16
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f000 81d9 	beq.w	800d690 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	2210      	movs	r2, #16
 800d2e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	689b      	ldr	r3, [r3, #8]
 800d2ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2f0:	2b40      	cmp	r3, #64	@ 0x40
 800d2f2:	f040 8151 	bne.w	800d598 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	4a96      	ldr	r2, [pc, #600]	@ (800d558 <HAL_UART_IRQHandler+0x564>)
 800d300:	4293      	cmp	r3, r2
 800d302:	d068      	beq.n	800d3d6 <HAL_UART_IRQHandler+0x3e2>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	4a93      	ldr	r2, [pc, #588]	@ (800d55c <HAL_UART_IRQHandler+0x568>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d061      	beq.n	800d3d6 <HAL_UART_IRQHandler+0x3e2>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	4a91      	ldr	r2, [pc, #580]	@ (800d560 <HAL_UART_IRQHandler+0x56c>)
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d05a      	beq.n	800d3d6 <HAL_UART_IRQHandler+0x3e2>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4a8e      	ldr	r2, [pc, #568]	@ (800d564 <HAL_UART_IRQHandler+0x570>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d053      	beq.n	800d3d6 <HAL_UART_IRQHandler+0x3e2>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	4a8c      	ldr	r2, [pc, #560]	@ (800d568 <HAL_UART_IRQHandler+0x574>)
 800d338:	4293      	cmp	r3, r2
 800d33a:	d04c      	beq.n	800d3d6 <HAL_UART_IRQHandler+0x3e2>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	4a89      	ldr	r2, [pc, #548]	@ (800d56c <HAL_UART_IRQHandler+0x578>)
 800d346:	4293      	cmp	r3, r2
 800d348:	d045      	beq.n	800d3d6 <HAL_UART_IRQHandler+0x3e2>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	4a87      	ldr	r2, [pc, #540]	@ (800d570 <HAL_UART_IRQHandler+0x57c>)
 800d354:	4293      	cmp	r3, r2
 800d356:	d03e      	beq.n	800d3d6 <HAL_UART_IRQHandler+0x3e2>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4a84      	ldr	r2, [pc, #528]	@ (800d574 <HAL_UART_IRQHandler+0x580>)
 800d362:	4293      	cmp	r3, r2
 800d364:	d037      	beq.n	800d3d6 <HAL_UART_IRQHandler+0x3e2>
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	4a82      	ldr	r2, [pc, #520]	@ (800d578 <HAL_UART_IRQHandler+0x584>)
 800d370:	4293      	cmp	r3, r2
 800d372:	d030      	beq.n	800d3d6 <HAL_UART_IRQHandler+0x3e2>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4a7f      	ldr	r2, [pc, #508]	@ (800d57c <HAL_UART_IRQHandler+0x588>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d029      	beq.n	800d3d6 <HAL_UART_IRQHandler+0x3e2>
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	4a7d      	ldr	r2, [pc, #500]	@ (800d580 <HAL_UART_IRQHandler+0x58c>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d022      	beq.n	800d3d6 <HAL_UART_IRQHandler+0x3e2>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4a7a      	ldr	r2, [pc, #488]	@ (800d584 <HAL_UART_IRQHandler+0x590>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d01b      	beq.n	800d3d6 <HAL_UART_IRQHandler+0x3e2>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	4a78      	ldr	r2, [pc, #480]	@ (800d588 <HAL_UART_IRQHandler+0x594>)
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	d014      	beq.n	800d3d6 <HAL_UART_IRQHandler+0x3e2>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	4a75      	ldr	r2, [pc, #468]	@ (800d58c <HAL_UART_IRQHandler+0x598>)
 800d3b6:	4293      	cmp	r3, r2
 800d3b8:	d00d      	beq.n	800d3d6 <HAL_UART_IRQHandler+0x3e2>
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	4a73      	ldr	r2, [pc, #460]	@ (800d590 <HAL_UART_IRQHandler+0x59c>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d006      	beq.n	800d3d6 <HAL_UART_IRQHandler+0x3e2>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	4a70      	ldr	r2, [pc, #448]	@ (800d594 <HAL_UART_IRQHandler+0x5a0>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d106      	bne.n	800d3e4 <HAL_UART_IRQHandler+0x3f0>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	685b      	ldr	r3, [r3, #4]
 800d3e0:	b29b      	uxth	r3, r3
 800d3e2:	e005      	b.n	800d3f0 <HAL_UART_IRQHandler+0x3fc>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d3f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	f000 81ab 	beq.w	800d754 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d404:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d408:	429a      	cmp	r2, r3
 800d40a:	f080 81a3 	bcs.w	800d754 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d414:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d41e:	69db      	ldr	r3, [r3, #28]
 800d420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d424:	f000 8087 	beq.w	800d536 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d430:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d434:	e853 3f00 	ldrex	r3, [r3]
 800d438:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d43c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d440:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d444:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	461a      	mov	r2, r3
 800d44e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d452:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d456:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d45a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d45e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d462:	e841 2300 	strex	r3, r2, [r1]
 800d466:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d46a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d1da      	bne.n	800d428 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	3308      	adds	r3, #8
 800d478:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d47a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d47c:	e853 3f00 	ldrex	r3, [r3]
 800d480:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d482:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d484:	f023 0301 	bic.w	r3, r3, #1
 800d488:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	3308      	adds	r3, #8
 800d492:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d496:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d49a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d49c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d49e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d4a2:	e841 2300 	strex	r3, r2, [r1]
 800d4a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d4a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d1e1      	bne.n	800d472 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	3308      	adds	r3, #8
 800d4b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d4b8:	e853 3f00 	ldrex	r3, [r3]
 800d4bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d4be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d4c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	3308      	adds	r3, #8
 800d4ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d4d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d4d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d4d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d4da:	e841 2300 	strex	r3, r2, [r1]
 800d4de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d4e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d1e3      	bne.n	800d4ae <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2220      	movs	r2, #32
 800d4ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4fc:	e853 3f00 	ldrex	r3, [r3]
 800d500:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d502:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d504:	f023 0310 	bic.w	r3, r3, #16
 800d508:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	461a      	mov	r2, r3
 800d512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d516:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d518:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d51a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d51c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d51e:	e841 2300 	strex	r3, r2, [r1]
 800d522:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d524:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d526:	2b00      	cmp	r3, #0
 800d528:	d1e4      	bne.n	800d4f4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d530:	4618      	mov	r0, r3
 800d532:	f7f8 f9d1 	bl	80058d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2202      	movs	r2, #2
 800d53a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d548:	b29b      	uxth	r3, r3
 800d54a:	1ad3      	subs	r3, r2, r3
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	4619      	mov	r1, r3
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f7f3 fe15 	bl	8001180 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d556:	e0fd      	b.n	800d754 <HAL_UART_IRQHandler+0x760>
 800d558:	40020010 	.word	0x40020010
 800d55c:	40020028 	.word	0x40020028
 800d560:	40020040 	.word	0x40020040
 800d564:	40020058 	.word	0x40020058
 800d568:	40020070 	.word	0x40020070
 800d56c:	40020088 	.word	0x40020088
 800d570:	400200a0 	.word	0x400200a0
 800d574:	400200b8 	.word	0x400200b8
 800d578:	40020410 	.word	0x40020410
 800d57c:	40020428 	.word	0x40020428
 800d580:	40020440 	.word	0x40020440
 800d584:	40020458 	.word	0x40020458
 800d588:	40020470 	.word	0x40020470
 800d58c:	40020488 	.word	0x40020488
 800d590:	400204a0 	.word	0x400204a0
 800d594:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	1ad3      	subs	r3, r2, r3
 800d5a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d5b2:	b29b      	uxth	r3, r3
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f000 80cf 	beq.w	800d758 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d5ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	f000 80ca 	beq.w	800d758 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5cc:	e853 3f00 	ldrex	r3, [r3]
 800d5d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d5d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d5d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d5e6:	647b      	str	r3, [r7, #68]	@ 0x44
 800d5e8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d5ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d5ee:	e841 2300 	strex	r3, r2, [r1]
 800d5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d5f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d1e4      	bne.n	800d5c4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	3308      	adds	r3, #8
 800d600:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d604:	e853 3f00 	ldrex	r3, [r3]
 800d608:	623b      	str	r3, [r7, #32]
   return(result);
 800d60a:	6a3a      	ldr	r2, [r7, #32]
 800d60c:	4b55      	ldr	r3, [pc, #340]	@ (800d764 <HAL_UART_IRQHandler+0x770>)
 800d60e:	4013      	ands	r3, r2
 800d610:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	3308      	adds	r3, #8
 800d61a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d61e:	633a      	str	r2, [r7, #48]	@ 0x30
 800d620:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d622:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d626:	e841 2300 	strex	r3, r2, [r1]
 800d62a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d1e3      	bne.n	800d5fa <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2220      	movs	r2, #32
 800d636:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2200      	movs	r2, #0
 800d63e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2200      	movs	r2, #0
 800d644:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	e853 3f00 	ldrex	r3, [r3]
 800d652:	60fb      	str	r3, [r7, #12]
   return(result);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f023 0310 	bic.w	r3, r3, #16
 800d65a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	461a      	mov	r2, r3
 800d664:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d668:	61fb      	str	r3, [r7, #28]
 800d66a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d66c:	69b9      	ldr	r1, [r7, #24]
 800d66e:	69fa      	ldr	r2, [r7, #28]
 800d670:	e841 2300 	strex	r3, r2, [r1]
 800d674:	617b      	str	r3, [r7, #20]
   return(result);
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d1e4      	bne.n	800d646 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2202      	movs	r2, #2
 800d680:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d682:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d686:	4619      	mov	r1, r3
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f7f3 fd79 	bl	8001180 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d68e:	e063      	b.n	800d758 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d694:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d00e      	beq.n	800d6ba <HAL_UART_IRQHandler+0x6c6>
 800d69c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d6a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d008      	beq.n	800d6ba <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d6b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f001 ff82 	bl	800f5bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d6b8:	e051      	b.n	800d75e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d6ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d014      	beq.n	800d6f0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d6c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d105      	bne.n	800d6de <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d6d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d6d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d008      	beq.n	800d6f0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d03a      	beq.n	800d75c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	4798      	blx	r3
    }
    return;
 800d6ee:	e035      	b.n	800d75c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d6f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d009      	beq.n	800d710 <HAL_UART_IRQHandler+0x71c>
 800d6fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d704:	2b00      	cmp	r3, #0
 800d706:	d003      	beq.n	800d710 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f001 fa0f 	bl	800eb2c <UART_EndTransmit_IT>
    return;
 800d70e:	e026      	b.n	800d75e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d714:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d009      	beq.n	800d730 <HAL_UART_IRQHandler+0x73c>
 800d71c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d720:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d724:	2b00      	cmp	r3, #0
 800d726:	d003      	beq.n	800d730 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f001 ff5b 	bl	800f5e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d72e:	e016      	b.n	800d75e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d734:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d010      	beq.n	800d75e <HAL_UART_IRQHandler+0x76a>
 800d73c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d740:	2b00      	cmp	r3, #0
 800d742:	da0c      	bge.n	800d75e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f001 ff43 	bl	800f5d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d74a:	e008      	b.n	800d75e <HAL_UART_IRQHandler+0x76a>
      return;
 800d74c:	bf00      	nop
 800d74e:	e006      	b.n	800d75e <HAL_UART_IRQHandler+0x76a>
    return;
 800d750:	bf00      	nop
 800d752:	e004      	b.n	800d75e <HAL_UART_IRQHandler+0x76a>
      return;
 800d754:	bf00      	nop
 800d756:	e002      	b.n	800d75e <HAL_UART_IRQHandler+0x76a>
      return;
 800d758:	bf00      	nop
 800d75a:	e000      	b.n	800d75e <HAL_UART_IRQHandler+0x76a>
    return;
 800d75c:	bf00      	nop
  }
}
 800d75e:	37e8      	adds	r7, #232	@ 0xe8
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	effffffe 	.word	0xeffffffe

0800d768 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d770:	bf00      	nop
 800d772:	370c      	adds	r7, #12
 800d774:	46bd      	mov	sp, r7
 800d776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77a:	4770      	bx	lr

0800d77c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b083      	sub	sp, #12
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d784:	bf00      	nop
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d798:	bf00      	nop
 800d79a:	370c      	adds	r7, #12
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr

0800d7a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d7a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d7a8:	b092      	sub	sp, #72	@ 0x48
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	689a      	ldr	r2, [r3, #8]
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	691b      	ldr	r3, [r3, #16]
 800d7bc:	431a      	orrs	r2, r3
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	695b      	ldr	r3, [r3, #20]
 800d7c2:	431a      	orrs	r2, r3
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	69db      	ldr	r3, [r3, #28]
 800d7c8:	4313      	orrs	r3, r2
 800d7ca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	681a      	ldr	r2, [r3, #0]
 800d7d2:	4bbe      	ldr	r3, [pc, #760]	@ (800dacc <UART_SetConfig+0x328>)
 800d7d4:	4013      	ands	r3, r2
 800d7d6:	697a      	ldr	r2, [r7, #20]
 800d7d8:	6812      	ldr	r2, [r2, #0]
 800d7da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d7dc:	430b      	orrs	r3, r1
 800d7de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	685b      	ldr	r3, [r3, #4]
 800d7e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	68da      	ldr	r2, [r3, #12]
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	430a      	orrs	r2, r1
 800d7f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	699b      	ldr	r3, [r3, #24]
 800d7fa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4ab3      	ldr	r2, [pc, #716]	@ (800dad0 <UART_SetConfig+0x32c>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d004      	beq.n	800d810 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	6a1b      	ldr	r3, [r3, #32]
 800d80a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d80c:	4313      	orrs	r3, r2
 800d80e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	689a      	ldr	r2, [r3, #8]
 800d816:	4baf      	ldr	r3, [pc, #700]	@ (800dad4 <UART_SetConfig+0x330>)
 800d818:	4013      	ands	r3, r2
 800d81a:	697a      	ldr	r2, [r7, #20]
 800d81c:	6812      	ldr	r2, [r2, #0]
 800d81e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d820:	430b      	orrs	r3, r1
 800d822:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d82a:	f023 010f 	bic.w	r1, r3, #15
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	430a      	orrs	r2, r1
 800d838:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	4aa6      	ldr	r2, [pc, #664]	@ (800dad8 <UART_SetConfig+0x334>)
 800d840:	4293      	cmp	r3, r2
 800d842:	d177      	bne.n	800d934 <UART_SetConfig+0x190>
 800d844:	4ba5      	ldr	r3, [pc, #660]	@ (800dadc <UART_SetConfig+0x338>)
 800d846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d848:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d84c:	2b28      	cmp	r3, #40	@ 0x28
 800d84e:	d86d      	bhi.n	800d92c <UART_SetConfig+0x188>
 800d850:	a201      	add	r2, pc, #4	@ (adr r2, 800d858 <UART_SetConfig+0xb4>)
 800d852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d856:	bf00      	nop
 800d858:	0800d8fd 	.word	0x0800d8fd
 800d85c:	0800d92d 	.word	0x0800d92d
 800d860:	0800d92d 	.word	0x0800d92d
 800d864:	0800d92d 	.word	0x0800d92d
 800d868:	0800d92d 	.word	0x0800d92d
 800d86c:	0800d92d 	.word	0x0800d92d
 800d870:	0800d92d 	.word	0x0800d92d
 800d874:	0800d92d 	.word	0x0800d92d
 800d878:	0800d905 	.word	0x0800d905
 800d87c:	0800d92d 	.word	0x0800d92d
 800d880:	0800d92d 	.word	0x0800d92d
 800d884:	0800d92d 	.word	0x0800d92d
 800d888:	0800d92d 	.word	0x0800d92d
 800d88c:	0800d92d 	.word	0x0800d92d
 800d890:	0800d92d 	.word	0x0800d92d
 800d894:	0800d92d 	.word	0x0800d92d
 800d898:	0800d90d 	.word	0x0800d90d
 800d89c:	0800d92d 	.word	0x0800d92d
 800d8a0:	0800d92d 	.word	0x0800d92d
 800d8a4:	0800d92d 	.word	0x0800d92d
 800d8a8:	0800d92d 	.word	0x0800d92d
 800d8ac:	0800d92d 	.word	0x0800d92d
 800d8b0:	0800d92d 	.word	0x0800d92d
 800d8b4:	0800d92d 	.word	0x0800d92d
 800d8b8:	0800d915 	.word	0x0800d915
 800d8bc:	0800d92d 	.word	0x0800d92d
 800d8c0:	0800d92d 	.word	0x0800d92d
 800d8c4:	0800d92d 	.word	0x0800d92d
 800d8c8:	0800d92d 	.word	0x0800d92d
 800d8cc:	0800d92d 	.word	0x0800d92d
 800d8d0:	0800d92d 	.word	0x0800d92d
 800d8d4:	0800d92d 	.word	0x0800d92d
 800d8d8:	0800d91d 	.word	0x0800d91d
 800d8dc:	0800d92d 	.word	0x0800d92d
 800d8e0:	0800d92d 	.word	0x0800d92d
 800d8e4:	0800d92d 	.word	0x0800d92d
 800d8e8:	0800d92d 	.word	0x0800d92d
 800d8ec:	0800d92d 	.word	0x0800d92d
 800d8f0:	0800d92d 	.word	0x0800d92d
 800d8f4:	0800d92d 	.word	0x0800d92d
 800d8f8:	0800d925 	.word	0x0800d925
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d902:	e326      	b.n	800df52 <UART_SetConfig+0x7ae>
 800d904:	2304      	movs	r3, #4
 800d906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d90a:	e322      	b.n	800df52 <UART_SetConfig+0x7ae>
 800d90c:	2308      	movs	r3, #8
 800d90e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d912:	e31e      	b.n	800df52 <UART_SetConfig+0x7ae>
 800d914:	2310      	movs	r3, #16
 800d916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d91a:	e31a      	b.n	800df52 <UART_SetConfig+0x7ae>
 800d91c:	2320      	movs	r3, #32
 800d91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d922:	e316      	b.n	800df52 <UART_SetConfig+0x7ae>
 800d924:	2340      	movs	r3, #64	@ 0x40
 800d926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d92a:	e312      	b.n	800df52 <UART_SetConfig+0x7ae>
 800d92c:	2380      	movs	r3, #128	@ 0x80
 800d92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d932:	e30e      	b.n	800df52 <UART_SetConfig+0x7ae>
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	4a69      	ldr	r2, [pc, #420]	@ (800dae0 <UART_SetConfig+0x33c>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d130      	bne.n	800d9a0 <UART_SetConfig+0x1fc>
 800d93e:	4b67      	ldr	r3, [pc, #412]	@ (800dadc <UART_SetConfig+0x338>)
 800d940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d942:	f003 0307 	and.w	r3, r3, #7
 800d946:	2b05      	cmp	r3, #5
 800d948:	d826      	bhi.n	800d998 <UART_SetConfig+0x1f4>
 800d94a:	a201      	add	r2, pc, #4	@ (adr r2, 800d950 <UART_SetConfig+0x1ac>)
 800d94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d950:	0800d969 	.word	0x0800d969
 800d954:	0800d971 	.word	0x0800d971
 800d958:	0800d979 	.word	0x0800d979
 800d95c:	0800d981 	.word	0x0800d981
 800d960:	0800d989 	.word	0x0800d989
 800d964:	0800d991 	.word	0x0800d991
 800d968:	2300      	movs	r3, #0
 800d96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d96e:	e2f0      	b.n	800df52 <UART_SetConfig+0x7ae>
 800d970:	2304      	movs	r3, #4
 800d972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d976:	e2ec      	b.n	800df52 <UART_SetConfig+0x7ae>
 800d978:	2308      	movs	r3, #8
 800d97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d97e:	e2e8      	b.n	800df52 <UART_SetConfig+0x7ae>
 800d980:	2310      	movs	r3, #16
 800d982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d986:	e2e4      	b.n	800df52 <UART_SetConfig+0x7ae>
 800d988:	2320      	movs	r3, #32
 800d98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d98e:	e2e0      	b.n	800df52 <UART_SetConfig+0x7ae>
 800d990:	2340      	movs	r3, #64	@ 0x40
 800d992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d996:	e2dc      	b.n	800df52 <UART_SetConfig+0x7ae>
 800d998:	2380      	movs	r3, #128	@ 0x80
 800d99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d99e:	e2d8      	b.n	800df52 <UART_SetConfig+0x7ae>
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4a4f      	ldr	r2, [pc, #316]	@ (800dae4 <UART_SetConfig+0x340>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d130      	bne.n	800da0c <UART_SetConfig+0x268>
 800d9aa:	4b4c      	ldr	r3, [pc, #304]	@ (800dadc <UART_SetConfig+0x338>)
 800d9ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9ae:	f003 0307 	and.w	r3, r3, #7
 800d9b2:	2b05      	cmp	r3, #5
 800d9b4:	d826      	bhi.n	800da04 <UART_SetConfig+0x260>
 800d9b6:	a201      	add	r2, pc, #4	@ (adr r2, 800d9bc <UART_SetConfig+0x218>)
 800d9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9bc:	0800d9d5 	.word	0x0800d9d5
 800d9c0:	0800d9dd 	.word	0x0800d9dd
 800d9c4:	0800d9e5 	.word	0x0800d9e5
 800d9c8:	0800d9ed 	.word	0x0800d9ed
 800d9cc:	0800d9f5 	.word	0x0800d9f5
 800d9d0:	0800d9fd 	.word	0x0800d9fd
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9da:	e2ba      	b.n	800df52 <UART_SetConfig+0x7ae>
 800d9dc:	2304      	movs	r3, #4
 800d9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9e2:	e2b6      	b.n	800df52 <UART_SetConfig+0x7ae>
 800d9e4:	2308      	movs	r3, #8
 800d9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ea:	e2b2      	b.n	800df52 <UART_SetConfig+0x7ae>
 800d9ec:	2310      	movs	r3, #16
 800d9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9f2:	e2ae      	b.n	800df52 <UART_SetConfig+0x7ae>
 800d9f4:	2320      	movs	r3, #32
 800d9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9fa:	e2aa      	b.n	800df52 <UART_SetConfig+0x7ae>
 800d9fc:	2340      	movs	r3, #64	@ 0x40
 800d9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da02:	e2a6      	b.n	800df52 <UART_SetConfig+0x7ae>
 800da04:	2380      	movs	r3, #128	@ 0x80
 800da06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da0a:	e2a2      	b.n	800df52 <UART_SetConfig+0x7ae>
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4a35      	ldr	r2, [pc, #212]	@ (800dae8 <UART_SetConfig+0x344>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d130      	bne.n	800da78 <UART_SetConfig+0x2d4>
 800da16:	4b31      	ldr	r3, [pc, #196]	@ (800dadc <UART_SetConfig+0x338>)
 800da18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da1a:	f003 0307 	and.w	r3, r3, #7
 800da1e:	2b05      	cmp	r3, #5
 800da20:	d826      	bhi.n	800da70 <UART_SetConfig+0x2cc>
 800da22:	a201      	add	r2, pc, #4	@ (adr r2, 800da28 <UART_SetConfig+0x284>)
 800da24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da28:	0800da41 	.word	0x0800da41
 800da2c:	0800da49 	.word	0x0800da49
 800da30:	0800da51 	.word	0x0800da51
 800da34:	0800da59 	.word	0x0800da59
 800da38:	0800da61 	.word	0x0800da61
 800da3c:	0800da69 	.word	0x0800da69
 800da40:	2300      	movs	r3, #0
 800da42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da46:	e284      	b.n	800df52 <UART_SetConfig+0x7ae>
 800da48:	2304      	movs	r3, #4
 800da4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da4e:	e280      	b.n	800df52 <UART_SetConfig+0x7ae>
 800da50:	2308      	movs	r3, #8
 800da52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da56:	e27c      	b.n	800df52 <UART_SetConfig+0x7ae>
 800da58:	2310      	movs	r3, #16
 800da5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da5e:	e278      	b.n	800df52 <UART_SetConfig+0x7ae>
 800da60:	2320      	movs	r3, #32
 800da62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da66:	e274      	b.n	800df52 <UART_SetConfig+0x7ae>
 800da68:	2340      	movs	r3, #64	@ 0x40
 800da6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da6e:	e270      	b.n	800df52 <UART_SetConfig+0x7ae>
 800da70:	2380      	movs	r3, #128	@ 0x80
 800da72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da76:	e26c      	b.n	800df52 <UART_SetConfig+0x7ae>
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4a1b      	ldr	r2, [pc, #108]	@ (800daec <UART_SetConfig+0x348>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d142      	bne.n	800db08 <UART_SetConfig+0x364>
 800da82:	4b16      	ldr	r3, [pc, #88]	@ (800dadc <UART_SetConfig+0x338>)
 800da84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da86:	f003 0307 	and.w	r3, r3, #7
 800da8a:	2b05      	cmp	r3, #5
 800da8c:	d838      	bhi.n	800db00 <UART_SetConfig+0x35c>
 800da8e:	a201      	add	r2, pc, #4	@ (adr r2, 800da94 <UART_SetConfig+0x2f0>)
 800da90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da94:	0800daad 	.word	0x0800daad
 800da98:	0800dab5 	.word	0x0800dab5
 800da9c:	0800dabd 	.word	0x0800dabd
 800daa0:	0800dac5 	.word	0x0800dac5
 800daa4:	0800daf1 	.word	0x0800daf1
 800daa8:	0800daf9 	.word	0x0800daf9
 800daac:	2300      	movs	r3, #0
 800daae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dab2:	e24e      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dab4:	2304      	movs	r3, #4
 800dab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daba:	e24a      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dabc:	2308      	movs	r3, #8
 800dabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dac2:	e246      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dac4:	2310      	movs	r3, #16
 800dac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daca:	e242      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dacc:	cfff69f3 	.word	0xcfff69f3
 800dad0:	58000c00 	.word	0x58000c00
 800dad4:	11fff4ff 	.word	0x11fff4ff
 800dad8:	40011000 	.word	0x40011000
 800dadc:	58024400 	.word	0x58024400
 800dae0:	40004400 	.word	0x40004400
 800dae4:	40004800 	.word	0x40004800
 800dae8:	40004c00 	.word	0x40004c00
 800daec:	40005000 	.word	0x40005000
 800daf0:	2320      	movs	r3, #32
 800daf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daf6:	e22c      	b.n	800df52 <UART_SetConfig+0x7ae>
 800daf8:	2340      	movs	r3, #64	@ 0x40
 800dafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dafe:	e228      	b.n	800df52 <UART_SetConfig+0x7ae>
 800db00:	2380      	movs	r3, #128	@ 0x80
 800db02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db06:	e224      	b.n	800df52 <UART_SetConfig+0x7ae>
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4ab1      	ldr	r2, [pc, #708]	@ (800ddd4 <UART_SetConfig+0x630>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d176      	bne.n	800dc00 <UART_SetConfig+0x45c>
 800db12:	4bb1      	ldr	r3, [pc, #708]	@ (800ddd8 <UART_SetConfig+0x634>)
 800db14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800db1a:	2b28      	cmp	r3, #40	@ 0x28
 800db1c:	d86c      	bhi.n	800dbf8 <UART_SetConfig+0x454>
 800db1e:	a201      	add	r2, pc, #4	@ (adr r2, 800db24 <UART_SetConfig+0x380>)
 800db20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db24:	0800dbc9 	.word	0x0800dbc9
 800db28:	0800dbf9 	.word	0x0800dbf9
 800db2c:	0800dbf9 	.word	0x0800dbf9
 800db30:	0800dbf9 	.word	0x0800dbf9
 800db34:	0800dbf9 	.word	0x0800dbf9
 800db38:	0800dbf9 	.word	0x0800dbf9
 800db3c:	0800dbf9 	.word	0x0800dbf9
 800db40:	0800dbf9 	.word	0x0800dbf9
 800db44:	0800dbd1 	.word	0x0800dbd1
 800db48:	0800dbf9 	.word	0x0800dbf9
 800db4c:	0800dbf9 	.word	0x0800dbf9
 800db50:	0800dbf9 	.word	0x0800dbf9
 800db54:	0800dbf9 	.word	0x0800dbf9
 800db58:	0800dbf9 	.word	0x0800dbf9
 800db5c:	0800dbf9 	.word	0x0800dbf9
 800db60:	0800dbf9 	.word	0x0800dbf9
 800db64:	0800dbd9 	.word	0x0800dbd9
 800db68:	0800dbf9 	.word	0x0800dbf9
 800db6c:	0800dbf9 	.word	0x0800dbf9
 800db70:	0800dbf9 	.word	0x0800dbf9
 800db74:	0800dbf9 	.word	0x0800dbf9
 800db78:	0800dbf9 	.word	0x0800dbf9
 800db7c:	0800dbf9 	.word	0x0800dbf9
 800db80:	0800dbf9 	.word	0x0800dbf9
 800db84:	0800dbe1 	.word	0x0800dbe1
 800db88:	0800dbf9 	.word	0x0800dbf9
 800db8c:	0800dbf9 	.word	0x0800dbf9
 800db90:	0800dbf9 	.word	0x0800dbf9
 800db94:	0800dbf9 	.word	0x0800dbf9
 800db98:	0800dbf9 	.word	0x0800dbf9
 800db9c:	0800dbf9 	.word	0x0800dbf9
 800dba0:	0800dbf9 	.word	0x0800dbf9
 800dba4:	0800dbe9 	.word	0x0800dbe9
 800dba8:	0800dbf9 	.word	0x0800dbf9
 800dbac:	0800dbf9 	.word	0x0800dbf9
 800dbb0:	0800dbf9 	.word	0x0800dbf9
 800dbb4:	0800dbf9 	.word	0x0800dbf9
 800dbb8:	0800dbf9 	.word	0x0800dbf9
 800dbbc:	0800dbf9 	.word	0x0800dbf9
 800dbc0:	0800dbf9 	.word	0x0800dbf9
 800dbc4:	0800dbf1 	.word	0x0800dbf1
 800dbc8:	2301      	movs	r3, #1
 800dbca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbce:	e1c0      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dbd0:	2304      	movs	r3, #4
 800dbd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbd6:	e1bc      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dbd8:	2308      	movs	r3, #8
 800dbda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbde:	e1b8      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dbe0:	2310      	movs	r3, #16
 800dbe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbe6:	e1b4      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dbe8:	2320      	movs	r3, #32
 800dbea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbee:	e1b0      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dbf0:	2340      	movs	r3, #64	@ 0x40
 800dbf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbf6:	e1ac      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dbf8:	2380      	movs	r3, #128	@ 0x80
 800dbfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbfe:	e1a8      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	4a75      	ldr	r2, [pc, #468]	@ (800dddc <UART_SetConfig+0x638>)
 800dc06:	4293      	cmp	r3, r2
 800dc08:	d130      	bne.n	800dc6c <UART_SetConfig+0x4c8>
 800dc0a:	4b73      	ldr	r3, [pc, #460]	@ (800ddd8 <UART_SetConfig+0x634>)
 800dc0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc0e:	f003 0307 	and.w	r3, r3, #7
 800dc12:	2b05      	cmp	r3, #5
 800dc14:	d826      	bhi.n	800dc64 <UART_SetConfig+0x4c0>
 800dc16:	a201      	add	r2, pc, #4	@ (adr r2, 800dc1c <UART_SetConfig+0x478>)
 800dc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc1c:	0800dc35 	.word	0x0800dc35
 800dc20:	0800dc3d 	.word	0x0800dc3d
 800dc24:	0800dc45 	.word	0x0800dc45
 800dc28:	0800dc4d 	.word	0x0800dc4d
 800dc2c:	0800dc55 	.word	0x0800dc55
 800dc30:	0800dc5d 	.word	0x0800dc5d
 800dc34:	2300      	movs	r3, #0
 800dc36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc3a:	e18a      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dc3c:	2304      	movs	r3, #4
 800dc3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc42:	e186      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dc44:	2308      	movs	r3, #8
 800dc46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc4a:	e182      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dc4c:	2310      	movs	r3, #16
 800dc4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc52:	e17e      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dc54:	2320      	movs	r3, #32
 800dc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc5a:	e17a      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dc5c:	2340      	movs	r3, #64	@ 0x40
 800dc5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc62:	e176      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dc64:	2380      	movs	r3, #128	@ 0x80
 800dc66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc6a:	e172      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a5b      	ldr	r2, [pc, #364]	@ (800dde0 <UART_SetConfig+0x63c>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d130      	bne.n	800dcd8 <UART_SetConfig+0x534>
 800dc76:	4b58      	ldr	r3, [pc, #352]	@ (800ddd8 <UART_SetConfig+0x634>)
 800dc78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc7a:	f003 0307 	and.w	r3, r3, #7
 800dc7e:	2b05      	cmp	r3, #5
 800dc80:	d826      	bhi.n	800dcd0 <UART_SetConfig+0x52c>
 800dc82:	a201      	add	r2, pc, #4	@ (adr r2, 800dc88 <UART_SetConfig+0x4e4>)
 800dc84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc88:	0800dca1 	.word	0x0800dca1
 800dc8c:	0800dca9 	.word	0x0800dca9
 800dc90:	0800dcb1 	.word	0x0800dcb1
 800dc94:	0800dcb9 	.word	0x0800dcb9
 800dc98:	0800dcc1 	.word	0x0800dcc1
 800dc9c:	0800dcc9 	.word	0x0800dcc9
 800dca0:	2300      	movs	r3, #0
 800dca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dca6:	e154      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dca8:	2304      	movs	r3, #4
 800dcaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcae:	e150      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dcb0:	2308      	movs	r3, #8
 800dcb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcb6:	e14c      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dcb8:	2310      	movs	r3, #16
 800dcba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcbe:	e148      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dcc0:	2320      	movs	r3, #32
 800dcc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcc6:	e144      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dcc8:	2340      	movs	r3, #64	@ 0x40
 800dcca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcce:	e140      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dcd0:	2380      	movs	r3, #128	@ 0x80
 800dcd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcd6:	e13c      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	4a41      	ldr	r2, [pc, #260]	@ (800dde4 <UART_SetConfig+0x640>)
 800dcde:	4293      	cmp	r3, r2
 800dce0:	f040 8082 	bne.w	800dde8 <UART_SetConfig+0x644>
 800dce4:	4b3c      	ldr	r3, [pc, #240]	@ (800ddd8 <UART_SetConfig+0x634>)
 800dce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dce8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dcec:	2b28      	cmp	r3, #40	@ 0x28
 800dcee:	d86d      	bhi.n	800ddcc <UART_SetConfig+0x628>
 800dcf0:	a201      	add	r2, pc, #4	@ (adr r2, 800dcf8 <UART_SetConfig+0x554>)
 800dcf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcf6:	bf00      	nop
 800dcf8:	0800dd9d 	.word	0x0800dd9d
 800dcfc:	0800ddcd 	.word	0x0800ddcd
 800dd00:	0800ddcd 	.word	0x0800ddcd
 800dd04:	0800ddcd 	.word	0x0800ddcd
 800dd08:	0800ddcd 	.word	0x0800ddcd
 800dd0c:	0800ddcd 	.word	0x0800ddcd
 800dd10:	0800ddcd 	.word	0x0800ddcd
 800dd14:	0800ddcd 	.word	0x0800ddcd
 800dd18:	0800dda5 	.word	0x0800dda5
 800dd1c:	0800ddcd 	.word	0x0800ddcd
 800dd20:	0800ddcd 	.word	0x0800ddcd
 800dd24:	0800ddcd 	.word	0x0800ddcd
 800dd28:	0800ddcd 	.word	0x0800ddcd
 800dd2c:	0800ddcd 	.word	0x0800ddcd
 800dd30:	0800ddcd 	.word	0x0800ddcd
 800dd34:	0800ddcd 	.word	0x0800ddcd
 800dd38:	0800ddad 	.word	0x0800ddad
 800dd3c:	0800ddcd 	.word	0x0800ddcd
 800dd40:	0800ddcd 	.word	0x0800ddcd
 800dd44:	0800ddcd 	.word	0x0800ddcd
 800dd48:	0800ddcd 	.word	0x0800ddcd
 800dd4c:	0800ddcd 	.word	0x0800ddcd
 800dd50:	0800ddcd 	.word	0x0800ddcd
 800dd54:	0800ddcd 	.word	0x0800ddcd
 800dd58:	0800ddb5 	.word	0x0800ddb5
 800dd5c:	0800ddcd 	.word	0x0800ddcd
 800dd60:	0800ddcd 	.word	0x0800ddcd
 800dd64:	0800ddcd 	.word	0x0800ddcd
 800dd68:	0800ddcd 	.word	0x0800ddcd
 800dd6c:	0800ddcd 	.word	0x0800ddcd
 800dd70:	0800ddcd 	.word	0x0800ddcd
 800dd74:	0800ddcd 	.word	0x0800ddcd
 800dd78:	0800ddbd 	.word	0x0800ddbd
 800dd7c:	0800ddcd 	.word	0x0800ddcd
 800dd80:	0800ddcd 	.word	0x0800ddcd
 800dd84:	0800ddcd 	.word	0x0800ddcd
 800dd88:	0800ddcd 	.word	0x0800ddcd
 800dd8c:	0800ddcd 	.word	0x0800ddcd
 800dd90:	0800ddcd 	.word	0x0800ddcd
 800dd94:	0800ddcd 	.word	0x0800ddcd
 800dd98:	0800ddc5 	.word	0x0800ddc5
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dda2:	e0d6      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dda4:	2304      	movs	r3, #4
 800dda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddaa:	e0d2      	b.n	800df52 <UART_SetConfig+0x7ae>
 800ddac:	2308      	movs	r3, #8
 800ddae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddb2:	e0ce      	b.n	800df52 <UART_SetConfig+0x7ae>
 800ddb4:	2310      	movs	r3, #16
 800ddb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddba:	e0ca      	b.n	800df52 <UART_SetConfig+0x7ae>
 800ddbc:	2320      	movs	r3, #32
 800ddbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddc2:	e0c6      	b.n	800df52 <UART_SetConfig+0x7ae>
 800ddc4:	2340      	movs	r3, #64	@ 0x40
 800ddc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddca:	e0c2      	b.n	800df52 <UART_SetConfig+0x7ae>
 800ddcc:	2380      	movs	r3, #128	@ 0x80
 800ddce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddd2:	e0be      	b.n	800df52 <UART_SetConfig+0x7ae>
 800ddd4:	40011400 	.word	0x40011400
 800ddd8:	58024400 	.word	0x58024400
 800dddc:	40007800 	.word	0x40007800
 800dde0:	40007c00 	.word	0x40007c00
 800dde4:	40011800 	.word	0x40011800
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	4aad      	ldr	r2, [pc, #692]	@ (800e0a4 <UART_SetConfig+0x900>)
 800ddee:	4293      	cmp	r3, r2
 800ddf0:	d176      	bne.n	800dee0 <UART_SetConfig+0x73c>
 800ddf2:	4bad      	ldr	r3, [pc, #692]	@ (800e0a8 <UART_SetConfig+0x904>)
 800ddf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddf6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ddfa:	2b28      	cmp	r3, #40	@ 0x28
 800ddfc:	d86c      	bhi.n	800ded8 <UART_SetConfig+0x734>
 800ddfe:	a201      	add	r2, pc, #4	@ (adr r2, 800de04 <UART_SetConfig+0x660>)
 800de00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de04:	0800dea9 	.word	0x0800dea9
 800de08:	0800ded9 	.word	0x0800ded9
 800de0c:	0800ded9 	.word	0x0800ded9
 800de10:	0800ded9 	.word	0x0800ded9
 800de14:	0800ded9 	.word	0x0800ded9
 800de18:	0800ded9 	.word	0x0800ded9
 800de1c:	0800ded9 	.word	0x0800ded9
 800de20:	0800ded9 	.word	0x0800ded9
 800de24:	0800deb1 	.word	0x0800deb1
 800de28:	0800ded9 	.word	0x0800ded9
 800de2c:	0800ded9 	.word	0x0800ded9
 800de30:	0800ded9 	.word	0x0800ded9
 800de34:	0800ded9 	.word	0x0800ded9
 800de38:	0800ded9 	.word	0x0800ded9
 800de3c:	0800ded9 	.word	0x0800ded9
 800de40:	0800ded9 	.word	0x0800ded9
 800de44:	0800deb9 	.word	0x0800deb9
 800de48:	0800ded9 	.word	0x0800ded9
 800de4c:	0800ded9 	.word	0x0800ded9
 800de50:	0800ded9 	.word	0x0800ded9
 800de54:	0800ded9 	.word	0x0800ded9
 800de58:	0800ded9 	.word	0x0800ded9
 800de5c:	0800ded9 	.word	0x0800ded9
 800de60:	0800ded9 	.word	0x0800ded9
 800de64:	0800dec1 	.word	0x0800dec1
 800de68:	0800ded9 	.word	0x0800ded9
 800de6c:	0800ded9 	.word	0x0800ded9
 800de70:	0800ded9 	.word	0x0800ded9
 800de74:	0800ded9 	.word	0x0800ded9
 800de78:	0800ded9 	.word	0x0800ded9
 800de7c:	0800ded9 	.word	0x0800ded9
 800de80:	0800ded9 	.word	0x0800ded9
 800de84:	0800dec9 	.word	0x0800dec9
 800de88:	0800ded9 	.word	0x0800ded9
 800de8c:	0800ded9 	.word	0x0800ded9
 800de90:	0800ded9 	.word	0x0800ded9
 800de94:	0800ded9 	.word	0x0800ded9
 800de98:	0800ded9 	.word	0x0800ded9
 800de9c:	0800ded9 	.word	0x0800ded9
 800dea0:	0800ded9 	.word	0x0800ded9
 800dea4:	0800ded1 	.word	0x0800ded1
 800dea8:	2301      	movs	r3, #1
 800deaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deae:	e050      	b.n	800df52 <UART_SetConfig+0x7ae>
 800deb0:	2304      	movs	r3, #4
 800deb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deb6:	e04c      	b.n	800df52 <UART_SetConfig+0x7ae>
 800deb8:	2308      	movs	r3, #8
 800deba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800debe:	e048      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dec0:	2310      	movs	r3, #16
 800dec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dec6:	e044      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dec8:	2320      	movs	r3, #32
 800deca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dece:	e040      	b.n	800df52 <UART_SetConfig+0x7ae>
 800ded0:	2340      	movs	r3, #64	@ 0x40
 800ded2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ded6:	e03c      	b.n	800df52 <UART_SetConfig+0x7ae>
 800ded8:	2380      	movs	r3, #128	@ 0x80
 800deda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dede:	e038      	b.n	800df52 <UART_SetConfig+0x7ae>
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4a71      	ldr	r2, [pc, #452]	@ (800e0ac <UART_SetConfig+0x908>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d130      	bne.n	800df4c <UART_SetConfig+0x7a8>
 800deea:	4b6f      	ldr	r3, [pc, #444]	@ (800e0a8 <UART_SetConfig+0x904>)
 800deec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800deee:	f003 0307 	and.w	r3, r3, #7
 800def2:	2b05      	cmp	r3, #5
 800def4:	d826      	bhi.n	800df44 <UART_SetConfig+0x7a0>
 800def6:	a201      	add	r2, pc, #4	@ (adr r2, 800defc <UART_SetConfig+0x758>)
 800def8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800defc:	0800df15 	.word	0x0800df15
 800df00:	0800df1d 	.word	0x0800df1d
 800df04:	0800df25 	.word	0x0800df25
 800df08:	0800df2d 	.word	0x0800df2d
 800df0c:	0800df35 	.word	0x0800df35
 800df10:	0800df3d 	.word	0x0800df3d
 800df14:	2302      	movs	r3, #2
 800df16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df1a:	e01a      	b.n	800df52 <UART_SetConfig+0x7ae>
 800df1c:	2304      	movs	r3, #4
 800df1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df22:	e016      	b.n	800df52 <UART_SetConfig+0x7ae>
 800df24:	2308      	movs	r3, #8
 800df26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df2a:	e012      	b.n	800df52 <UART_SetConfig+0x7ae>
 800df2c:	2310      	movs	r3, #16
 800df2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df32:	e00e      	b.n	800df52 <UART_SetConfig+0x7ae>
 800df34:	2320      	movs	r3, #32
 800df36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df3a:	e00a      	b.n	800df52 <UART_SetConfig+0x7ae>
 800df3c:	2340      	movs	r3, #64	@ 0x40
 800df3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df42:	e006      	b.n	800df52 <UART_SetConfig+0x7ae>
 800df44:	2380      	movs	r3, #128	@ 0x80
 800df46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df4a:	e002      	b.n	800df52 <UART_SetConfig+0x7ae>
 800df4c:	2380      	movs	r3, #128	@ 0x80
 800df4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	4a55      	ldr	r2, [pc, #340]	@ (800e0ac <UART_SetConfig+0x908>)
 800df58:	4293      	cmp	r3, r2
 800df5a:	f040 80f8 	bne.w	800e14e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800df5e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800df62:	2b20      	cmp	r3, #32
 800df64:	dc46      	bgt.n	800dff4 <UART_SetConfig+0x850>
 800df66:	2b02      	cmp	r3, #2
 800df68:	db75      	blt.n	800e056 <UART_SetConfig+0x8b2>
 800df6a:	3b02      	subs	r3, #2
 800df6c:	2b1e      	cmp	r3, #30
 800df6e:	d872      	bhi.n	800e056 <UART_SetConfig+0x8b2>
 800df70:	a201      	add	r2, pc, #4	@ (adr r2, 800df78 <UART_SetConfig+0x7d4>)
 800df72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df76:	bf00      	nop
 800df78:	0800dffb 	.word	0x0800dffb
 800df7c:	0800e057 	.word	0x0800e057
 800df80:	0800e003 	.word	0x0800e003
 800df84:	0800e057 	.word	0x0800e057
 800df88:	0800e057 	.word	0x0800e057
 800df8c:	0800e057 	.word	0x0800e057
 800df90:	0800e013 	.word	0x0800e013
 800df94:	0800e057 	.word	0x0800e057
 800df98:	0800e057 	.word	0x0800e057
 800df9c:	0800e057 	.word	0x0800e057
 800dfa0:	0800e057 	.word	0x0800e057
 800dfa4:	0800e057 	.word	0x0800e057
 800dfa8:	0800e057 	.word	0x0800e057
 800dfac:	0800e057 	.word	0x0800e057
 800dfb0:	0800e023 	.word	0x0800e023
 800dfb4:	0800e057 	.word	0x0800e057
 800dfb8:	0800e057 	.word	0x0800e057
 800dfbc:	0800e057 	.word	0x0800e057
 800dfc0:	0800e057 	.word	0x0800e057
 800dfc4:	0800e057 	.word	0x0800e057
 800dfc8:	0800e057 	.word	0x0800e057
 800dfcc:	0800e057 	.word	0x0800e057
 800dfd0:	0800e057 	.word	0x0800e057
 800dfd4:	0800e057 	.word	0x0800e057
 800dfd8:	0800e057 	.word	0x0800e057
 800dfdc:	0800e057 	.word	0x0800e057
 800dfe0:	0800e057 	.word	0x0800e057
 800dfe4:	0800e057 	.word	0x0800e057
 800dfe8:	0800e057 	.word	0x0800e057
 800dfec:	0800e057 	.word	0x0800e057
 800dff0:	0800e049 	.word	0x0800e049
 800dff4:	2b40      	cmp	r3, #64	@ 0x40
 800dff6:	d02a      	beq.n	800e04e <UART_SetConfig+0x8aa>
 800dff8:	e02d      	b.n	800e056 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dffa:	f7fc fceb 	bl	800a9d4 <HAL_RCCEx_GetD3PCLK1Freq>
 800dffe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e000:	e02f      	b.n	800e062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e002:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e006:	4618      	mov	r0, r3
 800e008:	f7fc fcfa 	bl	800aa00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e00c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e00e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e010:	e027      	b.n	800e062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e012:	f107 0318 	add.w	r3, r7, #24
 800e016:	4618      	mov	r0, r3
 800e018:	f7fc fe46 	bl	800aca8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e020:	e01f      	b.n	800e062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e022:	4b21      	ldr	r3, [pc, #132]	@ (800e0a8 <UART_SetConfig+0x904>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f003 0320 	and.w	r3, r3, #32
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d009      	beq.n	800e042 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e02e:	4b1e      	ldr	r3, [pc, #120]	@ (800e0a8 <UART_SetConfig+0x904>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	08db      	lsrs	r3, r3, #3
 800e034:	f003 0303 	and.w	r3, r3, #3
 800e038:	4a1d      	ldr	r2, [pc, #116]	@ (800e0b0 <UART_SetConfig+0x90c>)
 800e03a:	fa22 f303 	lsr.w	r3, r2, r3
 800e03e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e040:	e00f      	b.n	800e062 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e042:	4b1b      	ldr	r3, [pc, #108]	@ (800e0b0 <UART_SetConfig+0x90c>)
 800e044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e046:	e00c      	b.n	800e062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e048:	4b1a      	ldr	r3, [pc, #104]	@ (800e0b4 <UART_SetConfig+0x910>)
 800e04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e04c:	e009      	b.n	800e062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e04e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e054:	e005      	b.n	800e062 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e056:	2300      	movs	r3, #0
 800e058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e05a:	2301      	movs	r3, #1
 800e05c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e060:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e064:	2b00      	cmp	r3, #0
 800e066:	f000 81ee 	beq.w	800e446 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e06e:	4a12      	ldr	r2, [pc, #72]	@ (800e0b8 <UART_SetConfig+0x914>)
 800e070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e074:	461a      	mov	r2, r3
 800e076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e078:	fbb3 f3f2 	udiv	r3, r3, r2
 800e07c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	685a      	ldr	r2, [r3, #4]
 800e082:	4613      	mov	r3, r2
 800e084:	005b      	lsls	r3, r3, #1
 800e086:	4413      	add	r3, r2
 800e088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d305      	bcc.n	800e09a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e096:	429a      	cmp	r2, r3
 800e098:	d910      	bls.n	800e0bc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e09a:	2301      	movs	r3, #1
 800e09c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e0a0:	e1d1      	b.n	800e446 <UART_SetConfig+0xca2>
 800e0a2:	bf00      	nop
 800e0a4:	40011c00 	.word	0x40011c00
 800e0a8:	58024400 	.word	0x58024400
 800e0ac:	58000c00 	.word	0x58000c00
 800e0b0:	03d09000 	.word	0x03d09000
 800e0b4:	003d0900 	.word	0x003d0900
 800e0b8:	0800f9a0 	.word	0x0800f9a0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0be:	2200      	movs	r2, #0
 800e0c0:	60bb      	str	r3, [r7, #8]
 800e0c2:	60fa      	str	r2, [r7, #12]
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0c8:	4ac0      	ldr	r2, [pc, #768]	@ (800e3cc <UART_SetConfig+0xc28>)
 800e0ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	603b      	str	r3, [r7, #0]
 800e0d4:	607a      	str	r2, [r7, #4]
 800e0d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e0de:	f7f2 f915 	bl	800030c <__aeabi_uldivmod>
 800e0e2:	4602      	mov	r2, r0
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	4610      	mov	r0, r2
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	f04f 0200 	mov.w	r2, #0
 800e0ee:	f04f 0300 	mov.w	r3, #0
 800e0f2:	020b      	lsls	r3, r1, #8
 800e0f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e0f8:	0202      	lsls	r2, r0, #8
 800e0fa:	6979      	ldr	r1, [r7, #20]
 800e0fc:	6849      	ldr	r1, [r1, #4]
 800e0fe:	0849      	lsrs	r1, r1, #1
 800e100:	2000      	movs	r0, #0
 800e102:	460c      	mov	r4, r1
 800e104:	4605      	mov	r5, r0
 800e106:	eb12 0804 	adds.w	r8, r2, r4
 800e10a:	eb43 0905 	adc.w	r9, r3, r5
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	2200      	movs	r2, #0
 800e114:	469a      	mov	sl, r3
 800e116:	4693      	mov	fp, r2
 800e118:	4652      	mov	r2, sl
 800e11a:	465b      	mov	r3, fp
 800e11c:	4640      	mov	r0, r8
 800e11e:	4649      	mov	r1, r9
 800e120:	f7f2 f8f4 	bl	800030c <__aeabi_uldivmod>
 800e124:	4602      	mov	r2, r0
 800e126:	460b      	mov	r3, r1
 800e128:	4613      	mov	r3, r2
 800e12a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e12e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e132:	d308      	bcc.n	800e146 <UART_SetConfig+0x9a2>
 800e134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e136:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e13a:	d204      	bcs.n	800e146 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e142:	60da      	str	r2, [r3, #12]
 800e144:	e17f      	b.n	800e446 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e146:	2301      	movs	r3, #1
 800e148:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e14c:	e17b      	b.n	800e446 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	69db      	ldr	r3, [r3, #28]
 800e152:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e156:	f040 80bd 	bne.w	800e2d4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e15a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e15e:	2b20      	cmp	r3, #32
 800e160:	dc48      	bgt.n	800e1f4 <UART_SetConfig+0xa50>
 800e162:	2b00      	cmp	r3, #0
 800e164:	db7b      	blt.n	800e25e <UART_SetConfig+0xaba>
 800e166:	2b20      	cmp	r3, #32
 800e168:	d879      	bhi.n	800e25e <UART_SetConfig+0xaba>
 800e16a:	a201      	add	r2, pc, #4	@ (adr r2, 800e170 <UART_SetConfig+0x9cc>)
 800e16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e170:	0800e1fb 	.word	0x0800e1fb
 800e174:	0800e203 	.word	0x0800e203
 800e178:	0800e25f 	.word	0x0800e25f
 800e17c:	0800e25f 	.word	0x0800e25f
 800e180:	0800e20b 	.word	0x0800e20b
 800e184:	0800e25f 	.word	0x0800e25f
 800e188:	0800e25f 	.word	0x0800e25f
 800e18c:	0800e25f 	.word	0x0800e25f
 800e190:	0800e21b 	.word	0x0800e21b
 800e194:	0800e25f 	.word	0x0800e25f
 800e198:	0800e25f 	.word	0x0800e25f
 800e19c:	0800e25f 	.word	0x0800e25f
 800e1a0:	0800e25f 	.word	0x0800e25f
 800e1a4:	0800e25f 	.word	0x0800e25f
 800e1a8:	0800e25f 	.word	0x0800e25f
 800e1ac:	0800e25f 	.word	0x0800e25f
 800e1b0:	0800e22b 	.word	0x0800e22b
 800e1b4:	0800e25f 	.word	0x0800e25f
 800e1b8:	0800e25f 	.word	0x0800e25f
 800e1bc:	0800e25f 	.word	0x0800e25f
 800e1c0:	0800e25f 	.word	0x0800e25f
 800e1c4:	0800e25f 	.word	0x0800e25f
 800e1c8:	0800e25f 	.word	0x0800e25f
 800e1cc:	0800e25f 	.word	0x0800e25f
 800e1d0:	0800e25f 	.word	0x0800e25f
 800e1d4:	0800e25f 	.word	0x0800e25f
 800e1d8:	0800e25f 	.word	0x0800e25f
 800e1dc:	0800e25f 	.word	0x0800e25f
 800e1e0:	0800e25f 	.word	0x0800e25f
 800e1e4:	0800e25f 	.word	0x0800e25f
 800e1e8:	0800e25f 	.word	0x0800e25f
 800e1ec:	0800e25f 	.word	0x0800e25f
 800e1f0:	0800e251 	.word	0x0800e251
 800e1f4:	2b40      	cmp	r3, #64	@ 0x40
 800e1f6:	d02e      	beq.n	800e256 <UART_SetConfig+0xab2>
 800e1f8:	e031      	b.n	800e25e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e1fa:	f7fa fd4d 	bl	8008c98 <HAL_RCC_GetPCLK1Freq>
 800e1fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e200:	e033      	b.n	800e26a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e202:	f7fa fd5f 	bl	8008cc4 <HAL_RCC_GetPCLK2Freq>
 800e206:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e208:	e02f      	b.n	800e26a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e20a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e20e:	4618      	mov	r0, r3
 800e210:	f7fc fbf6 	bl	800aa00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e218:	e027      	b.n	800e26a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e21a:	f107 0318 	add.w	r3, r7, #24
 800e21e:	4618      	mov	r0, r3
 800e220:	f7fc fd42 	bl	800aca8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e224:	69fb      	ldr	r3, [r7, #28]
 800e226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e228:	e01f      	b.n	800e26a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e22a:	4b69      	ldr	r3, [pc, #420]	@ (800e3d0 <UART_SetConfig+0xc2c>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	f003 0320 	and.w	r3, r3, #32
 800e232:	2b00      	cmp	r3, #0
 800e234:	d009      	beq.n	800e24a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e236:	4b66      	ldr	r3, [pc, #408]	@ (800e3d0 <UART_SetConfig+0xc2c>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	08db      	lsrs	r3, r3, #3
 800e23c:	f003 0303 	and.w	r3, r3, #3
 800e240:	4a64      	ldr	r2, [pc, #400]	@ (800e3d4 <UART_SetConfig+0xc30>)
 800e242:	fa22 f303 	lsr.w	r3, r2, r3
 800e246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e248:	e00f      	b.n	800e26a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e24a:	4b62      	ldr	r3, [pc, #392]	@ (800e3d4 <UART_SetConfig+0xc30>)
 800e24c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e24e:	e00c      	b.n	800e26a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e250:	4b61      	ldr	r3, [pc, #388]	@ (800e3d8 <UART_SetConfig+0xc34>)
 800e252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e254:	e009      	b.n	800e26a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e256:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e25a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e25c:	e005      	b.n	800e26a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e25e:	2300      	movs	r3, #0
 800e260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e262:	2301      	movs	r3, #1
 800e264:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e268:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e26a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	f000 80ea 	beq.w	800e446 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e276:	4a55      	ldr	r2, [pc, #340]	@ (800e3cc <UART_SetConfig+0xc28>)
 800e278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e27c:	461a      	mov	r2, r3
 800e27e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e280:	fbb3 f3f2 	udiv	r3, r3, r2
 800e284:	005a      	lsls	r2, r3, #1
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	685b      	ldr	r3, [r3, #4]
 800e28a:	085b      	lsrs	r3, r3, #1
 800e28c:	441a      	add	r2, r3
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	685b      	ldr	r3, [r3, #4]
 800e292:	fbb2 f3f3 	udiv	r3, r2, r3
 800e296:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e29a:	2b0f      	cmp	r3, #15
 800e29c:	d916      	bls.n	800e2cc <UART_SetConfig+0xb28>
 800e29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e2a4:	d212      	bcs.n	800e2cc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e2a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2a8:	b29b      	uxth	r3, r3
 800e2aa:	f023 030f 	bic.w	r3, r3, #15
 800e2ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2b2:	085b      	lsrs	r3, r3, #1
 800e2b4:	b29b      	uxth	r3, r3
 800e2b6:	f003 0307 	and.w	r3, r3, #7
 800e2ba:	b29a      	uxth	r2, r3
 800e2bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e2be:	4313      	orrs	r3, r2
 800e2c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e2c8:	60da      	str	r2, [r3, #12]
 800e2ca:	e0bc      	b.n	800e446 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e2d2:	e0b8      	b.n	800e446 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e2d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e2d8:	2b20      	cmp	r3, #32
 800e2da:	dc4b      	bgt.n	800e374 <UART_SetConfig+0xbd0>
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	f2c0 8087 	blt.w	800e3f0 <UART_SetConfig+0xc4c>
 800e2e2:	2b20      	cmp	r3, #32
 800e2e4:	f200 8084 	bhi.w	800e3f0 <UART_SetConfig+0xc4c>
 800e2e8:	a201      	add	r2, pc, #4	@ (adr r2, 800e2f0 <UART_SetConfig+0xb4c>)
 800e2ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ee:	bf00      	nop
 800e2f0:	0800e37b 	.word	0x0800e37b
 800e2f4:	0800e383 	.word	0x0800e383
 800e2f8:	0800e3f1 	.word	0x0800e3f1
 800e2fc:	0800e3f1 	.word	0x0800e3f1
 800e300:	0800e38b 	.word	0x0800e38b
 800e304:	0800e3f1 	.word	0x0800e3f1
 800e308:	0800e3f1 	.word	0x0800e3f1
 800e30c:	0800e3f1 	.word	0x0800e3f1
 800e310:	0800e39b 	.word	0x0800e39b
 800e314:	0800e3f1 	.word	0x0800e3f1
 800e318:	0800e3f1 	.word	0x0800e3f1
 800e31c:	0800e3f1 	.word	0x0800e3f1
 800e320:	0800e3f1 	.word	0x0800e3f1
 800e324:	0800e3f1 	.word	0x0800e3f1
 800e328:	0800e3f1 	.word	0x0800e3f1
 800e32c:	0800e3f1 	.word	0x0800e3f1
 800e330:	0800e3ab 	.word	0x0800e3ab
 800e334:	0800e3f1 	.word	0x0800e3f1
 800e338:	0800e3f1 	.word	0x0800e3f1
 800e33c:	0800e3f1 	.word	0x0800e3f1
 800e340:	0800e3f1 	.word	0x0800e3f1
 800e344:	0800e3f1 	.word	0x0800e3f1
 800e348:	0800e3f1 	.word	0x0800e3f1
 800e34c:	0800e3f1 	.word	0x0800e3f1
 800e350:	0800e3f1 	.word	0x0800e3f1
 800e354:	0800e3f1 	.word	0x0800e3f1
 800e358:	0800e3f1 	.word	0x0800e3f1
 800e35c:	0800e3f1 	.word	0x0800e3f1
 800e360:	0800e3f1 	.word	0x0800e3f1
 800e364:	0800e3f1 	.word	0x0800e3f1
 800e368:	0800e3f1 	.word	0x0800e3f1
 800e36c:	0800e3f1 	.word	0x0800e3f1
 800e370:	0800e3e3 	.word	0x0800e3e3
 800e374:	2b40      	cmp	r3, #64	@ 0x40
 800e376:	d037      	beq.n	800e3e8 <UART_SetConfig+0xc44>
 800e378:	e03a      	b.n	800e3f0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e37a:	f7fa fc8d 	bl	8008c98 <HAL_RCC_GetPCLK1Freq>
 800e37e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e380:	e03c      	b.n	800e3fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e382:	f7fa fc9f 	bl	8008cc4 <HAL_RCC_GetPCLK2Freq>
 800e386:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e388:	e038      	b.n	800e3fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e38a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e38e:	4618      	mov	r0, r3
 800e390:	f7fc fb36 	bl	800aa00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e398:	e030      	b.n	800e3fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e39a:	f107 0318 	add.w	r3, r7, #24
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7fc fc82 	bl	800aca8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e3a4:	69fb      	ldr	r3, [r7, #28]
 800e3a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3a8:	e028      	b.n	800e3fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e3aa:	4b09      	ldr	r3, [pc, #36]	@ (800e3d0 <UART_SetConfig+0xc2c>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f003 0320 	and.w	r3, r3, #32
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d012      	beq.n	800e3dc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e3b6:	4b06      	ldr	r3, [pc, #24]	@ (800e3d0 <UART_SetConfig+0xc2c>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	08db      	lsrs	r3, r3, #3
 800e3bc:	f003 0303 	and.w	r3, r3, #3
 800e3c0:	4a04      	ldr	r2, [pc, #16]	@ (800e3d4 <UART_SetConfig+0xc30>)
 800e3c2:	fa22 f303 	lsr.w	r3, r2, r3
 800e3c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e3c8:	e018      	b.n	800e3fc <UART_SetConfig+0xc58>
 800e3ca:	bf00      	nop
 800e3cc:	0800f9a0 	.word	0x0800f9a0
 800e3d0:	58024400 	.word	0x58024400
 800e3d4:	03d09000 	.word	0x03d09000
 800e3d8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e3dc:	4b24      	ldr	r3, [pc, #144]	@ (800e470 <UART_SetConfig+0xccc>)
 800e3de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3e0:	e00c      	b.n	800e3fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e3e2:	4b24      	ldr	r3, [pc, #144]	@ (800e474 <UART_SetConfig+0xcd0>)
 800e3e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3e6:	e009      	b.n	800e3fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e3e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e3ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3ee:	e005      	b.n	800e3fc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e3fa:	bf00      	nop
    }

    if (pclk != 0U)
 800e3fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d021      	beq.n	800e446 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e406:	4a1c      	ldr	r2, [pc, #112]	@ (800e478 <UART_SetConfig+0xcd4>)
 800e408:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e40c:	461a      	mov	r2, r3
 800e40e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e410:	fbb3 f2f2 	udiv	r2, r3, r2
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	685b      	ldr	r3, [r3, #4]
 800e418:	085b      	lsrs	r3, r3, #1
 800e41a:	441a      	add	r2, r3
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	685b      	ldr	r3, [r3, #4]
 800e420:	fbb2 f3f3 	udiv	r3, r2, r3
 800e424:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e428:	2b0f      	cmp	r3, #15
 800e42a:	d909      	bls.n	800e440 <UART_SetConfig+0xc9c>
 800e42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e42e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e432:	d205      	bcs.n	800e440 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e436:	b29a      	uxth	r2, r3
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	60da      	str	r2, [r3, #12]
 800e43e:	e002      	b.n	800e446 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e440:	2301      	movs	r3, #1
 800e442:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	2201      	movs	r2, #1
 800e44a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e44e:	697b      	ldr	r3, [r7, #20]
 800e450:	2201      	movs	r2, #1
 800e452:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e456:	697b      	ldr	r3, [r7, #20]
 800e458:	2200      	movs	r2, #0
 800e45a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	2200      	movs	r2, #0
 800e460:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e462:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e466:	4618      	mov	r0, r3
 800e468:	3748      	adds	r7, #72	@ 0x48
 800e46a:	46bd      	mov	sp, r7
 800e46c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e470:	03d09000 	.word	0x03d09000
 800e474:	003d0900 	.word	0x003d0900
 800e478:	0800f9a0 	.word	0x0800f9a0

0800e47c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e47c:	b480      	push	{r7}
 800e47e:	b083      	sub	sp, #12
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e488:	f003 0308 	and.w	r3, r3, #8
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d00a      	beq.n	800e4a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	685b      	ldr	r3, [r3, #4]
 800e496:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	430a      	orrs	r2, r1
 800e4a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4aa:	f003 0301 	and.w	r3, r3, #1
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d00a      	beq.n	800e4c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	685b      	ldr	r3, [r3, #4]
 800e4b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	430a      	orrs	r2, r1
 800e4c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4cc:	f003 0302 	and.w	r3, r3, #2
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d00a      	beq.n	800e4ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	685b      	ldr	r3, [r3, #4]
 800e4da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	430a      	orrs	r2, r1
 800e4e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4ee:	f003 0304 	and.w	r3, r3, #4
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d00a      	beq.n	800e50c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	685b      	ldr	r3, [r3, #4]
 800e4fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	430a      	orrs	r2, r1
 800e50a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e510:	f003 0310 	and.w	r3, r3, #16
 800e514:	2b00      	cmp	r3, #0
 800e516:	d00a      	beq.n	800e52e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	689b      	ldr	r3, [r3, #8]
 800e51e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	430a      	orrs	r2, r1
 800e52c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e532:	f003 0320 	and.w	r3, r3, #32
 800e536:	2b00      	cmp	r3, #0
 800e538:	d00a      	beq.n	800e550 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	689b      	ldr	r3, [r3, #8]
 800e540:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	430a      	orrs	r2, r1
 800e54e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d01a      	beq.n	800e592 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	685b      	ldr	r3, [r3, #4]
 800e562:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	430a      	orrs	r2, r1
 800e570:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e576:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e57a:	d10a      	bne.n	800e592 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	685b      	ldr	r3, [r3, #4]
 800e582:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	430a      	orrs	r2, r1
 800e590:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d00a      	beq.n	800e5b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	685b      	ldr	r3, [r3, #4]
 800e5a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	430a      	orrs	r2, r1
 800e5b2:	605a      	str	r2, [r3, #4]
  }
}
 800e5b4:	bf00      	nop
 800e5b6:	370c      	adds	r7, #12
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr

0800e5c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b098      	sub	sp, #96	@ 0x60
 800e5c4:	af02      	add	r7, sp, #8
 800e5c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e5d0:	f7f4 f9c2 	bl	8002958 <HAL_GetTick>
 800e5d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f003 0308 	and.w	r3, r3, #8
 800e5e0:	2b08      	cmp	r3, #8
 800e5e2:	d12f      	bne.n	800e644 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e5e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e5e8:	9300      	str	r3, [sp, #0]
 800e5ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f000 f88e 	bl	800e714 <UART_WaitOnFlagUntilTimeout>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d022      	beq.n	800e644 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e606:	e853 3f00 	ldrex	r3, [r3]
 800e60a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e60c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e60e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e612:	653b      	str	r3, [r7, #80]	@ 0x50
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	461a      	mov	r2, r3
 800e61a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e61c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e61e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e620:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e622:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e624:	e841 2300 	strex	r3, r2, [r1]
 800e628:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e62a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d1e6      	bne.n	800e5fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2220      	movs	r2, #32
 800e634:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2200      	movs	r2, #0
 800e63c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e640:	2303      	movs	r3, #3
 800e642:	e063      	b.n	800e70c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f003 0304 	and.w	r3, r3, #4
 800e64e:	2b04      	cmp	r3, #4
 800e650:	d149      	bne.n	800e6e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e652:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e656:	9300      	str	r3, [sp, #0]
 800e658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e65a:	2200      	movs	r2, #0
 800e65c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f000 f857 	bl	800e714 <UART_WaitOnFlagUntilTimeout>
 800e666:	4603      	mov	r3, r0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d03c      	beq.n	800e6e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e674:	e853 3f00 	ldrex	r3, [r3]
 800e678:	623b      	str	r3, [r7, #32]
   return(result);
 800e67a:	6a3b      	ldr	r3, [r7, #32]
 800e67c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e680:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	461a      	mov	r2, r3
 800e688:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e68a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e68c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e68e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e690:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e692:	e841 2300 	strex	r3, r2, [r1]
 800e696:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d1e6      	bne.n	800e66c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	3308      	adds	r3, #8
 800e6a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	e853 3f00 	ldrex	r3, [r3]
 800e6ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	f023 0301 	bic.w	r3, r3, #1
 800e6b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	3308      	adds	r3, #8
 800e6bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e6be:	61fa      	str	r2, [r7, #28]
 800e6c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6c2:	69b9      	ldr	r1, [r7, #24]
 800e6c4:	69fa      	ldr	r2, [r7, #28]
 800e6c6:	e841 2300 	strex	r3, r2, [r1]
 800e6ca:	617b      	str	r3, [r7, #20]
   return(result);
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d1e5      	bne.n	800e69e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2220      	movs	r2, #32
 800e6d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e6e2:	2303      	movs	r3, #3
 800e6e4:	e012      	b.n	800e70c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2220      	movs	r2, #32
 800e6ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2220      	movs	r2, #32
 800e6f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2200      	movs	r2, #0
 800e700:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2200      	movs	r2, #0
 800e706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e70a:	2300      	movs	r3, #0
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3758      	adds	r7, #88	@ 0x58
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
 800e71a:	60f8      	str	r0, [r7, #12]
 800e71c:	60b9      	str	r1, [r7, #8]
 800e71e:	603b      	str	r3, [r7, #0]
 800e720:	4613      	mov	r3, r2
 800e722:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e724:	e04f      	b.n	800e7c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e726:	69bb      	ldr	r3, [r7, #24]
 800e728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e72c:	d04b      	beq.n	800e7c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e72e:	f7f4 f913 	bl	8002958 <HAL_GetTick>
 800e732:	4602      	mov	r2, r0
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	1ad3      	subs	r3, r2, r3
 800e738:	69ba      	ldr	r2, [r7, #24]
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d302      	bcc.n	800e744 <UART_WaitOnFlagUntilTimeout+0x30>
 800e73e:	69bb      	ldr	r3, [r7, #24]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d101      	bne.n	800e748 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e744:	2303      	movs	r3, #3
 800e746:	e04e      	b.n	800e7e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f003 0304 	and.w	r3, r3, #4
 800e752:	2b00      	cmp	r3, #0
 800e754:	d037      	beq.n	800e7c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	2b80      	cmp	r3, #128	@ 0x80
 800e75a:	d034      	beq.n	800e7c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	2b40      	cmp	r3, #64	@ 0x40
 800e760:	d031      	beq.n	800e7c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	69db      	ldr	r3, [r3, #28]
 800e768:	f003 0308 	and.w	r3, r3, #8
 800e76c:	2b08      	cmp	r3, #8
 800e76e:	d110      	bne.n	800e792 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	2208      	movs	r2, #8
 800e776:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e778:	68f8      	ldr	r0, [r7, #12]
 800e77a:	f000 f95b 	bl	800ea34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2208      	movs	r2, #8
 800e782:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	2200      	movs	r2, #0
 800e78a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e78e:	2301      	movs	r3, #1
 800e790:	e029      	b.n	800e7e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	69db      	ldr	r3, [r3, #28]
 800e798:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e79c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e7a0:	d111      	bne.n	800e7c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e7aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e7ac:	68f8      	ldr	r0, [r7, #12]
 800e7ae:	f000 f941 	bl	800ea34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	2220      	movs	r2, #32
 800e7b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e7c2:	2303      	movs	r3, #3
 800e7c4:	e00f      	b.n	800e7e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	69da      	ldr	r2, [r3, #28]
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	4013      	ands	r3, r2
 800e7d0:	68ba      	ldr	r2, [r7, #8]
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	bf0c      	ite	eq
 800e7d6:	2301      	moveq	r3, #1
 800e7d8:	2300      	movne	r3, #0
 800e7da:	b2db      	uxtb	r3, r3
 800e7dc:	461a      	mov	r2, r3
 800e7de:	79fb      	ldrb	r3, [r7, #7]
 800e7e0:	429a      	cmp	r2, r3
 800e7e2:	d0a0      	beq.n	800e726 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e7e4:	2300      	movs	r3, #0
}
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	3710      	adds	r7, #16
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}
	...

0800e7f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b0a3      	sub	sp, #140	@ 0x8c
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	60f8      	str	r0, [r7, #12]
 800e7f8:	60b9      	str	r1, [r7, #8]
 800e7fa:	4613      	mov	r3, r2
 800e7fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	68ba      	ldr	r2, [r7, #8]
 800e802:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	88fa      	ldrh	r2, [r7, #6]
 800e808:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	88fa      	ldrh	r2, [r7, #6]
 800e810:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2200      	movs	r2, #0
 800e818:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	689b      	ldr	r3, [r3, #8]
 800e81e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e822:	d10e      	bne.n	800e842 <UART_Start_Receive_IT+0x52>
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	691b      	ldr	r3, [r3, #16]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d105      	bne.n	800e838 <UART_Start_Receive_IT+0x48>
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e832:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e836:	e02d      	b.n	800e894 <UART_Start_Receive_IT+0xa4>
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	22ff      	movs	r2, #255	@ 0xff
 800e83c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e840:	e028      	b.n	800e894 <UART_Start_Receive_IT+0xa4>
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	689b      	ldr	r3, [r3, #8]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d10d      	bne.n	800e866 <UART_Start_Receive_IT+0x76>
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	691b      	ldr	r3, [r3, #16]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d104      	bne.n	800e85c <UART_Start_Receive_IT+0x6c>
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	22ff      	movs	r2, #255	@ 0xff
 800e856:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e85a:	e01b      	b.n	800e894 <UART_Start_Receive_IT+0xa4>
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	227f      	movs	r2, #127	@ 0x7f
 800e860:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e864:	e016      	b.n	800e894 <UART_Start_Receive_IT+0xa4>
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	689b      	ldr	r3, [r3, #8]
 800e86a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e86e:	d10d      	bne.n	800e88c <UART_Start_Receive_IT+0x9c>
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	691b      	ldr	r3, [r3, #16]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d104      	bne.n	800e882 <UART_Start_Receive_IT+0x92>
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	227f      	movs	r2, #127	@ 0x7f
 800e87c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e880:	e008      	b.n	800e894 <UART_Start_Receive_IT+0xa4>
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	223f      	movs	r2, #63	@ 0x3f
 800e886:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e88a:	e003      	b.n	800e894 <UART_Start_Receive_IT+0xa4>
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	2200      	movs	r2, #0
 800e890:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	2200      	movs	r2, #0
 800e898:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	2222      	movs	r2, #34	@ 0x22
 800e8a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	3308      	adds	r3, #8
 800e8aa:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e8ae:	e853 3f00 	ldrex	r3, [r3]
 800e8b2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e8b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e8b6:	f043 0301 	orr.w	r3, r3, #1
 800e8ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	3308      	adds	r3, #8
 800e8c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e8c8:	673a      	str	r2, [r7, #112]	@ 0x70
 800e8ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8cc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e8ce:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e8d0:	e841 2300 	strex	r3, r2, [r1]
 800e8d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800e8d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d1e3      	bne.n	800e8a4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e8e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e8e4:	d14f      	bne.n	800e986 <UART_Start_Receive_IT+0x196>
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e8ec:	88fa      	ldrh	r2, [r7, #6]
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d349      	bcc.n	800e986 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	689b      	ldr	r3, [r3, #8]
 800e8f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e8fa:	d107      	bne.n	800e90c <UART_Start_Receive_IT+0x11c>
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	691b      	ldr	r3, [r3, #16]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d103      	bne.n	800e90c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	4a47      	ldr	r2, [pc, #284]	@ (800ea24 <UART_Start_Receive_IT+0x234>)
 800e908:	675a      	str	r2, [r3, #116]	@ 0x74
 800e90a:	e002      	b.n	800e912 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	4a46      	ldr	r2, [pc, #280]	@ (800ea28 <UART_Start_Receive_IT+0x238>)
 800e910:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	691b      	ldr	r3, [r3, #16]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d01a      	beq.n	800e950 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e920:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e922:	e853 3f00 	ldrex	r3, [r3]
 800e926:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e928:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e92a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e92e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	461a      	mov	r2, r3
 800e938:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e93c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e93e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e940:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e942:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e944:	e841 2300 	strex	r3, r2, [r1]
 800e948:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800e94a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d1e4      	bne.n	800e91a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	3308      	adds	r3, #8
 800e956:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e95a:	e853 3f00 	ldrex	r3, [r3]
 800e95e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e962:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e966:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	3308      	adds	r3, #8
 800e96e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e970:	64ba      	str	r2, [r7, #72]	@ 0x48
 800e972:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e974:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e976:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e978:	e841 2300 	strex	r3, r2, [r1]
 800e97c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e97e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e980:	2b00      	cmp	r3, #0
 800e982:	d1e5      	bne.n	800e950 <UART_Start_Receive_IT+0x160>
 800e984:	e046      	b.n	800ea14 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	689b      	ldr	r3, [r3, #8]
 800e98a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e98e:	d107      	bne.n	800e9a0 <UART_Start_Receive_IT+0x1b0>
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	691b      	ldr	r3, [r3, #16]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d103      	bne.n	800e9a0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	4a24      	ldr	r2, [pc, #144]	@ (800ea2c <UART_Start_Receive_IT+0x23c>)
 800e99c:	675a      	str	r2, [r3, #116]	@ 0x74
 800e99e:	e002      	b.n	800e9a6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	4a23      	ldr	r2, [pc, #140]	@ (800ea30 <UART_Start_Receive_IT+0x240>)
 800e9a4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	691b      	ldr	r3, [r3, #16]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d019      	beq.n	800e9e2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9b6:	e853 3f00 	ldrex	r3, [r3]
 800e9ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9be:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800e9c2:	677b      	str	r3, [r7, #116]	@ 0x74
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e9cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800e9ce:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e9d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e9d4:	e841 2300 	strex	r3, r2, [r1]
 800e9d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e9da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d1e6      	bne.n	800e9ae <UART_Start_Receive_IT+0x1be>
 800e9e0:	e018      	b.n	800ea14 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	e853 3f00 	ldrex	r3, [r3]
 800e9ee:	613b      	str	r3, [r7, #16]
   return(result);
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	f043 0320 	orr.w	r3, r3, #32
 800e9f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	461a      	mov	r2, r3
 800e9fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ea00:	623b      	str	r3, [r7, #32]
 800ea02:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea04:	69f9      	ldr	r1, [r7, #28]
 800ea06:	6a3a      	ldr	r2, [r7, #32]
 800ea08:	e841 2300 	strex	r3, r2, [r1]
 800ea0c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ea0e:	69bb      	ldr	r3, [r7, #24]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d1e6      	bne.n	800e9e2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ea14:	2300      	movs	r3, #0
}
 800ea16:	4618      	mov	r0, r3
 800ea18:	378c      	adds	r7, #140	@ 0x8c
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea20:	4770      	bx	lr
 800ea22:	bf00      	nop
 800ea24:	0800f255 	.word	0x0800f255
 800ea28:	0800eef5 	.word	0x0800eef5
 800ea2c:	0800ed3d 	.word	0x0800ed3d
 800ea30:	0800eb85 	.word	0x0800eb85

0800ea34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b095      	sub	sp, #84	@ 0x54
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea44:	e853 3f00 	ldrex	r3, [r3]
 800ea48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ea4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ea50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	461a      	mov	r2, r3
 800ea58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea5a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ea5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ea60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ea62:	e841 2300 	strex	r3, r2, [r1]
 800ea66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ea68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d1e6      	bne.n	800ea3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	3308      	adds	r3, #8
 800ea74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea76:	6a3b      	ldr	r3, [r7, #32]
 800ea78:	e853 3f00 	ldrex	r3, [r3]
 800ea7c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea7e:	69fa      	ldr	r2, [r7, #28]
 800ea80:	4b1e      	ldr	r3, [pc, #120]	@ (800eafc <UART_EndRxTransfer+0xc8>)
 800ea82:	4013      	ands	r3, r2
 800ea84:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	3308      	adds	r3, #8
 800ea8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ea8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ea90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea96:	e841 2300 	strex	r3, r2, [r1]
 800ea9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ea9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d1e5      	bne.n	800ea6e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eaa6:	2b01      	cmp	r3, #1
 800eaa8:	d118      	bne.n	800eadc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	e853 3f00 	ldrex	r3, [r3]
 800eab6:	60bb      	str	r3, [r7, #8]
   return(result);
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	f023 0310 	bic.w	r3, r3, #16
 800eabe:	647b      	str	r3, [r7, #68]	@ 0x44
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	461a      	mov	r2, r3
 800eac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eac8:	61bb      	str	r3, [r7, #24]
 800eaca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eacc:	6979      	ldr	r1, [r7, #20]
 800eace:	69ba      	ldr	r2, [r7, #24]
 800ead0:	e841 2300 	strex	r3, r2, [r1]
 800ead4:	613b      	str	r3, [r7, #16]
   return(result);
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d1e6      	bne.n	800eaaa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2220      	movs	r2, #32
 800eae0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2200      	movs	r2, #0
 800eae8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2200      	movs	r2, #0
 800eaee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800eaf0:	bf00      	nop
 800eaf2:	3754      	adds	r7, #84	@ 0x54
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafa:	4770      	bx	lr
 800eafc:	effffffe 	.word	0xeffffffe

0800eb00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b084      	sub	sp, #16
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2200      	movs	r2, #0
 800eb12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb1e:	68f8      	ldr	r0, [r7, #12]
 800eb20:	f7fe fe36 	bl	800d790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb24:	bf00      	nop
 800eb26:	3710      	adds	r7, #16
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b088      	sub	sp, #32
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	e853 3f00 	ldrex	r3, [r3]
 800eb40:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb48:	61fb      	str	r3, [r7, #28]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	461a      	mov	r2, r3
 800eb50:	69fb      	ldr	r3, [r7, #28]
 800eb52:	61bb      	str	r3, [r7, #24]
 800eb54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb56:	6979      	ldr	r1, [r7, #20]
 800eb58:	69ba      	ldr	r2, [r7, #24]
 800eb5a:	e841 2300 	strex	r3, r2, [r1]
 800eb5e:	613b      	str	r3, [r7, #16]
   return(result);
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d1e6      	bne.n	800eb34 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2220      	movs	r2, #32
 800eb6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2200      	movs	r2, #0
 800eb72:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f7fe fdf7 	bl	800d768 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb7a:	bf00      	nop
 800eb7c:	3720      	adds	r7, #32
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
	...

0800eb84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b09c      	sub	sp, #112	@ 0x70
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eb92:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eb9c:	2b22      	cmp	r3, #34	@ 0x22
 800eb9e:	f040 80be 	bne.w	800ed1e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eba8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ebac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ebb0:	b2d9      	uxtb	r1, r3
 800ebb2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ebb6:	b2da      	uxtb	r2, r3
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ebbc:	400a      	ands	r2, r1
 800ebbe:	b2d2      	uxtb	r2, r2
 800ebc0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ebc6:	1c5a      	adds	r2, r3, #1
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ebd2:	b29b      	uxth	r3, r3
 800ebd4:	3b01      	subs	r3, #1
 800ebd6:	b29a      	uxth	r2, r3
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ebe4:	b29b      	uxth	r3, r3
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	f040 80a1 	bne.w	800ed2e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ebf4:	e853 3f00 	ldrex	r3, [r3]
 800ebf8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ebfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ebfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ec00:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	461a      	mov	r2, r3
 800ec08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ec0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ec0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ec10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ec12:	e841 2300 	strex	r3, r2, [r1]
 800ec16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ec18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d1e6      	bne.n	800ebec <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	3308      	adds	r3, #8
 800ec24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec28:	e853 3f00 	ldrex	r3, [r3]
 800ec2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ec2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec30:	f023 0301 	bic.w	r3, r3, #1
 800ec34:	667b      	str	r3, [r7, #100]	@ 0x64
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	3308      	adds	r3, #8
 800ec3c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ec3e:	647a      	str	r2, [r7, #68]	@ 0x44
 800ec40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ec44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ec46:	e841 2300 	strex	r3, r2, [r1]
 800ec4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ec4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d1e5      	bne.n	800ec1e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2220      	movs	r2, #32
 800ec56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2200      	movs	r2, #0
 800ec64:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	4a33      	ldr	r2, [pc, #204]	@ (800ed38 <UART_RxISR_8BIT+0x1b4>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d01f      	beq.n	800ecb0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d018      	beq.n	800ecb0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec86:	e853 3f00 	ldrex	r3, [r3]
 800ec8a:	623b      	str	r3, [r7, #32]
   return(result);
 800ec8c:	6a3b      	ldr	r3, [r7, #32]
 800ec8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ec92:	663b      	str	r3, [r7, #96]	@ 0x60
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	461a      	mov	r2, r3
 800ec9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ec9c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ec9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eca0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eca4:	e841 2300 	strex	r3, r2, [r1]
 800eca8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ecaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d1e6      	bne.n	800ec7e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d12e      	bne.n	800ed16 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	e853 3f00 	ldrex	r3, [r3]
 800ecca:	60fb      	str	r3, [r7, #12]
   return(result);
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f023 0310 	bic.w	r3, r3, #16
 800ecd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	461a      	mov	r2, r3
 800ecda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ecdc:	61fb      	str	r3, [r7, #28]
 800ecde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ece0:	69b9      	ldr	r1, [r7, #24]
 800ece2:	69fa      	ldr	r2, [r7, #28]
 800ece4:	e841 2300 	strex	r3, r2, [r1]
 800ece8:	617b      	str	r3, [r7, #20]
   return(result);
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d1e6      	bne.n	800ecbe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	69db      	ldr	r3, [r3, #28]
 800ecf6:	f003 0310 	and.w	r3, r3, #16
 800ecfa:	2b10      	cmp	r3, #16
 800ecfc:	d103      	bne.n	800ed06 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	2210      	movs	r2, #16
 800ed04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ed0c:	4619      	mov	r1, r3
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f7f2 fa36 	bl	8001180 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ed14:	e00b      	b.n	800ed2e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f7fe fd30 	bl	800d77c <HAL_UART_RxCpltCallback>
}
 800ed1c:	e007      	b.n	800ed2e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	699a      	ldr	r2, [r3, #24]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	f042 0208 	orr.w	r2, r2, #8
 800ed2c:	619a      	str	r2, [r3, #24]
}
 800ed2e:	bf00      	nop
 800ed30:	3770      	adds	r7, #112	@ 0x70
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	58000c00 	.word	0x58000c00

0800ed3c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b09c      	sub	sp, #112	@ 0x70
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ed4a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ed54:	2b22      	cmp	r3, #34	@ 0x22
 800ed56:	f040 80be 	bne.w	800eed6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed60:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed68:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ed6a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800ed6e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ed72:	4013      	ands	r3, r2
 800ed74:	b29a      	uxth	r2, r3
 800ed76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ed78:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed7e:	1c9a      	adds	r2, r3, #2
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ed8a:	b29b      	uxth	r3, r3
 800ed8c:	3b01      	subs	r3, #1
 800ed8e:	b29a      	uxth	r2, r3
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ed9c:	b29b      	uxth	r3, r3
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	f040 80a1 	bne.w	800eee6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800edac:	e853 3f00 	ldrex	r3, [r3]
 800edb0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800edb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800edb8:	667b      	str	r3, [r7, #100]	@ 0x64
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	461a      	mov	r2, r3
 800edc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800edc2:	657b      	str	r3, [r7, #84]	@ 0x54
 800edc4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edc6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800edc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800edca:	e841 2300 	strex	r3, r2, [r1]
 800edce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800edd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d1e6      	bne.n	800eda4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	3308      	adds	r3, #8
 800eddc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ede0:	e853 3f00 	ldrex	r3, [r3]
 800ede4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ede6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ede8:	f023 0301 	bic.w	r3, r3, #1
 800edec:	663b      	str	r3, [r7, #96]	@ 0x60
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	3308      	adds	r3, #8
 800edf4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800edf6:	643a      	str	r2, [r7, #64]	@ 0x40
 800edf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edfa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800edfc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800edfe:	e841 2300 	strex	r3, r2, [r1]
 800ee02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ee04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d1e5      	bne.n	800edd6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2220      	movs	r2, #32
 800ee0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2200      	movs	r2, #0
 800ee16:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	4a33      	ldr	r2, [pc, #204]	@ (800eef0 <UART_RxISR_16BIT+0x1b4>)
 800ee24:	4293      	cmp	r3, r2
 800ee26:	d01f      	beq.n	800ee68 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	685b      	ldr	r3, [r3, #4]
 800ee2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d018      	beq.n	800ee68 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee3c:	6a3b      	ldr	r3, [r7, #32]
 800ee3e:	e853 3f00 	ldrex	r3, [r3]
 800ee42:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee44:	69fb      	ldr	r3, [r7, #28]
 800ee46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ee4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	461a      	mov	r2, r3
 800ee52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ee54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ee56:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ee5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee5c:	e841 2300 	strex	r3, r2, [r1]
 800ee60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ee62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d1e6      	bne.n	800ee36 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d12e      	bne.n	800eece <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2200      	movs	r2, #0
 800ee74:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	e853 3f00 	ldrex	r3, [r3]
 800ee82:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	f023 0310 	bic.w	r3, r3, #16
 800ee8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	461a      	mov	r2, r3
 800ee92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ee94:	61bb      	str	r3, [r7, #24]
 800ee96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee98:	6979      	ldr	r1, [r7, #20]
 800ee9a:	69ba      	ldr	r2, [r7, #24]
 800ee9c:	e841 2300 	strex	r3, r2, [r1]
 800eea0:	613b      	str	r3, [r7, #16]
   return(result);
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d1e6      	bne.n	800ee76 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	69db      	ldr	r3, [r3, #28]
 800eeae:	f003 0310 	and.w	r3, r3, #16
 800eeb2:	2b10      	cmp	r3, #16
 800eeb4:	d103      	bne.n	800eebe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	2210      	movs	r2, #16
 800eebc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800eec4:	4619      	mov	r1, r3
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f7f2 f95a 	bl	8001180 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eecc:	e00b      	b.n	800eee6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f7fe fc54 	bl	800d77c <HAL_UART_RxCpltCallback>
}
 800eed4:	e007      	b.n	800eee6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	699a      	ldr	r2, [r3, #24]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	f042 0208 	orr.w	r2, r2, #8
 800eee4:	619a      	str	r2, [r3, #24]
}
 800eee6:	bf00      	nop
 800eee8:	3770      	adds	r7, #112	@ 0x70
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop
 800eef0:	58000c00 	.word	0x58000c00

0800eef4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b0ac      	sub	sp, #176	@ 0xb0
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ef02:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	69db      	ldr	r3, [r3, #28]
 800ef0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	689b      	ldr	r3, [r3, #8]
 800ef20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ef2a:	2b22      	cmp	r3, #34	@ 0x22
 800ef2c:	f040 8180 	bne.w	800f230 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ef36:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ef3a:	e123      	b.n	800f184 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef42:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ef46:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ef4a:	b2d9      	uxtb	r1, r3
 800ef4c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ef50:	b2da      	uxtb	r2, r3
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef56:	400a      	ands	r2, r1
 800ef58:	b2d2      	uxtb	r2, r2
 800ef5a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef60:	1c5a      	adds	r2, r3, #1
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ef6c:	b29b      	uxth	r3, r3
 800ef6e:	3b01      	subs	r3, #1
 800ef70:	b29a      	uxth	r2, r3
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	69db      	ldr	r3, [r3, #28]
 800ef7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ef82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef86:	f003 0307 	and.w	r3, r3, #7
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d053      	beq.n	800f036 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ef8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef92:	f003 0301 	and.w	r3, r3, #1
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d011      	beq.n	800efbe <UART_RxISR_8BIT_FIFOEN+0xca>
 800ef9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ef9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d00b      	beq.n	800efbe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	2201      	movs	r2, #1
 800efac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800efb4:	f043 0201 	orr.w	r2, r3, #1
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800efbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800efc2:	f003 0302 	and.w	r3, r3, #2
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d011      	beq.n	800efee <UART_RxISR_8BIT_FIFOEN+0xfa>
 800efca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800efce:	f003 0301 	and.w	r3, r3, #1
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d00b      	beq.n	800efee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	2202      	movs	r2, #2
 800efdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800efe4:	f043 0204 	orr.w	r2, r3, #4
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800efee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eff2:	f003 0304 	and.w	r3, r3, #4
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d011      	beq.n	800f01e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800effa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800effe:	f003 0301 	and.w	r3, r3, #1
 800f002:	2b00      	cmp	r3, #0
 800f004:	d00b      	beq.n	800f01e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	2204      	movs	r2, #4
 800f00c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f014:	f043 0202 	orr.w	r2, r3, #2
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f024:	2b00      	cmp	r3, #0
 800f026:	d006      	beq.n	800f036 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f7fe fbb1 	bl	800d790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2200      	movs	r2, #0
 800f032:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f03c:	b29b      	uxth	r3, r3
 800f03e:	2b00      	cmp	r3, #0
 800f040:	f040 80a0 	bne.w	800f184 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f04a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f04c:	e853 3f00 	ldrex	r3, [r3]
 800f050:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800f052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f054:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	461a      	mov	r2, r3
 800f062:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f066:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f068:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f06a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800f06c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f06e:	e841 2300 	strex	r3, r2, [r1]
 800f072:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800f074:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f076:	2b00      	cmp	r3, #0
 800f078:	d1e4      	bne.n	800f044 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	3308      	adds	r3, #8
 800f080:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f082:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f084:	e853 3f00 	ldrex	r3, [r3]
 800f088:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800f08a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f08c:	4b6e      	ldr	r3, [pc, #440]	@ (800f248 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800f08e:	4013      	ands	r3, r2
 800f090:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	3308      	adds	r3, #8
 800f09a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f09e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800f0a0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0a2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800f0a4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f0a6:	e841 2300 	strex	r3, r2, [r1]
 800f0aa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f0ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d1e3      	bne.n	800f07a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	2220      	movs	r2, #32
 800f0b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	4a60      	ldr	r2, [pc, #384]	@ (800f24c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d021      	beq.n	800f114 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	685b      	ldr	r3, [r3, #4]
 800f0d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d01a      	beq.n	800f114 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f0e6:	e853 3f00 	ldrex	r3, [r3]
 800f0ea:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f0ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f0ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f0f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	461a      	mov	r2, r3
 800f0fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f100:	657b      	str	r3, [r7, #84]	@ 0x54
 800f102:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f104:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f106:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f108:	e841 2300 	strex	r3, r2, [r1]
 800f10c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f10e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f110:	2b00      	cmp	r3, #0
 800f112:	d1e4      	bne.n	800f0de <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f118:	2b01      	cmp	r3, #1
 800f11a:	d130      	bne.n	800f17e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2200      	movs	r2, #0
 800f120:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f12a:	e853 3f00 	ldrex	r3, [r3]
 800f12e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f132:	f023 0310 	bic.w	r3, r3, #16
 800f136:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	461a      	mov	r2, r3
 800f140:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f144:	643b      	str	r3, [r7, #64]	@ 0x40
 800f146:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f148:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f14a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f14c:	e841 2300 	strex	r3, r2, [r1]
 800f150:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f154:	2b00      	cmp	r3, #0
 800f156:	d1e4      	bne.n	800f122 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	69db      	ldr	r3, [r3, #28]
 800f15e:	f003 0310 	and.w	r3, r3, #16
 800f162:	2b10      	cmp	r3, #16
 800f164:	d103      	bne.n	800f16e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	2210      	movs	r2, #16
 800f16c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f174:	4619      	mov	r1, r3
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f7f2 f802 	bl	8001180 <HAL_UARTEx_RxEventCallback>
 800f17c:	e002      	b.n	800f184 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f7fe fafc 	bl	800d77c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f184:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d006      	beq.n	800f19a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800f18c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f190:	f003 0320 	and.w	r3, r3, #32
 800f194:	2b00      	cmp	r3, #0
 800f196:	f47f aed1 	bne.w	800ef3c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f1a0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f1a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d049      	beq.n	800f240 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f1b2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d242      	bcs.n	800f240 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	3308      	adds	r3, #8
 800f1c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1c2:	6a3b      	ldr	r3, [r7, #32]
 800f1c4:	e853 3f00 	ldrex	r3, [r3]
 800f1c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800f1ca:	69fb      	ldr	r3, [r7, #28]
 800f1cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f1d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	3308      	adds	r3, #8
 800f1da:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f1de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f1e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f1e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f1e6:	e841 2300 	strex	r3, r2, [r1]
 800f1ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d1e3      	bne.n	800f1ba <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	4a16      	ldr	r2, [pc, #88]	@ (800f250 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800f1f6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	e853 3f00 	ldrex	r3, [r3]
 800f204:	60bb      	str	r3, [r7, #8]
   return(result);
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	f043 0320 	orr.w	r3, r3, #32
 800f20c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	461a      	mov	r2, r3
 800f216:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f21a:	61bb      	str	r3, [r7, #24]
 800f21c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f21e:	6979      	ldr	r1, [r7, #20]
 800f220:	69ba      	ldr	r2, [r7, #24]
 800f222:	e841 2300 	strex	r3, r2, [r1]
 800f226:	613b      	str	r3, [r7, #16]
   return(result);
 800f228:	693b      	ldr	r3, [r7, #16]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d1e4      	bne.n	800f1f8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f22e:	e007      	b.n	800f240 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	699a      	ldr	r2, [r3, #24]
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	f042 0208 	orr.w	r2, r2, #8
 800f23e:	619a      	str	r2, [r3, #24]
}
 800f240:	bf00      	nop
 800f242:	37b0      	adds	r7, #176	@ 0xb0
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}
 800f248:	effffffe 	.word	0xeffffffe
 800f24c:	58000c00 	.word	0x58000c00
 800f250:	0800eb85 	.word	0x0800eb85

0800f254 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b0ae      	sub	sp, #184	@ 0xb8
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f262:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	69db      	ldr	r3, [r3, #28]
 800f26c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	689b      	ldr	r3, [r3, #8]
 800f280:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f28a:	2b22      	cmp	r3, #34	@ 0x22
 800f28c:	f040 8184 	bne.w	800f598 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f296:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f29a:	e127      	b.n	800f4ec <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2a2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f2ae:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800f2b2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800f2b6:	4013      	ands	r3, r2
 800f2b8:	b29a      	uxth	r2, r3
 800f2ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f2be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2c4:	1c9a      	adds	r2, r3, #2
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f2d0:	b29b      	uxth	r3, r3
 800f2d2:	3b01      	subs	r3, #1
 800f2d4:	b29a      	uxth	r2, r3
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	69db      	ldr	r3, [r3, #28]
 800f2e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f2e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f2ea:	f003 0307 	and.w	r3, r3, #7
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d053      	beq.n	800f39a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f2f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f2f6:	f003 0301 	and.w	r3, r3, #1
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d011      	beq.n	800f322 <UART_RxISR_16BIT_FIFOEN+0xce>
 800f2fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f306:	2b00      	cmp	r3, #0
 800f308:	d00b      	beq.n	800f322 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	2201      	movs	r2, #1
 800f310:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f318:	f043 0201 	orr.w	r2, r3, #1
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f322:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f326:	f003 0302 	and.w	r3, r3, #2
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d011      	beq.n	800f352 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f32e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f332:	f003 0301 	and.w	r3, r3, #1
 800f336:	2b00      	cmp	r3, #0
 800f338:	d00b      	beq.n	800f352 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	2202      	movs	r2, #2
 800f340:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f348:	f043 0204 	orr.w	r2, r3, #4
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f352:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f356:	f003 0304 	and.w	r3, r3, #4
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d011      	beq.n	800f382 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f35e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f362:	f003 0301 	and.w	r3, r3, #1
 800f366:	2b00      	cmp	r3, #0
 800f368:	d00b      	beq.n	800f382 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	2204      	movs	r2, #4
 800f370:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f378:	f043 0202 	orr.w	r2, r3, #2
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d006      	beq.n	800f39a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f7fe f9ff 	bl	800d790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	2200      	movs	r2, #0
 800f396:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f3a0:	b29b      	uxth	r3, r3
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	f040 80a2 	bne.w	800f4ec <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f3b0:	e853 3f00 	ldrex	r3, [r3]
 800f3b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f3b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f3b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f3bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	461a      	mov	r2, r3
 800f3c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f3ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f3ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f3d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f3d6:	e841 2300 	strex	r3, r2, [r1]
 800f3da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f3dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d1e2      	bne.n	800f3a8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	3308      	adds	r3, #8
 800f3e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f3ec:	e853 3f00 	ldrex	r3, [r3]
 800f3f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f3f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f3f4:	4b6e      	ldr	r3, [pc, #440]	@ (800f5b0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800f3f6:	4013      	ands	r3, r2
 800f3f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	3308      	adds	r3, #8
 800f402:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f406:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f408:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f40a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f40c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f40e:	e841 2300 	strex	r3, r2, [r1]
 800f412:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f414:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f416:	2b00      	cmp	r3, #0
 800f418:	d1e3      	bne.n	800f3e2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2220      	movs	r2, #32
 800f41e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2200      	movs	r2, #0
 800f426:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2200      	movs	r2, #0
 800f42c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	4a60      	ldr	r2, [pc, #384]	@ (800f5b4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800f434:	4293      	cmp	r3, r2
 800f436:	d021      	beq.n	800f47c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	685b      	ldr	r3, [r3, #4]
 800f43e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f442:	2b00      	cmp	r3, #0
 800f444:	d01a      	beq.n	800f47c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f44c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f44e:	e853 3f00 	ldrex	r3, [r3]
 800f452:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f454:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f456:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f45a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	461a      	mov	r2, r3
 800f464:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f468:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f46a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f46c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f46e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f470:	e841 2300 	strex	r3, r2, [r1]
 800f474:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d1e4      	bne.n	800f446 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f480:	2b01      	cmp	r3, #1
 800f482:	d130      	bne.n	800f4e6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2200      	movs	r2, #0
 800f488:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f492:	e853 3f00 	ldrex	r3, [r3]
 800f496:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f49a:	f023 0310 	bic.w	r3, r3, #16
 800f49e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	461a      	mov	r2, r3
 800f4a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f4ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800f4ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f4b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f4b4:	e841 2300 	strex	r3, r2, [r1]
 800f4b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f4ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d1e4      	bne.n	800f48a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	69db      	ldr	r3, [r3, #28]
 800f4c6:	f003 0310 	and.w	r3, r3, #16
 800f4ca:	2b10      	cmp	r3, #16
 800f4cc:	d103      	bne.n	800f4d6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	2210      	movs	r2, #16
 800f4d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f4dc:	4619      	mov	r1, r3
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f7f1 fe4e 	bl	8001180 <HAL_UARTEx_RxEventCallback>
 800f4e4:	e002      	b.n	800f4ec <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f7fe f948 	bl	800d77c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f4ec:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d006      	beq.n	800f502 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800f4f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f4f8:	f003 0320 	and.w	r3, r3, #32
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	f47f aecd 	bne.w	800f29c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f508:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f50c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800f510:	2b00      	cmp	r3, #0
 800f512:	d049      	beq.n	800f5a8 <UART_RxISR_16BIT_FIFOEN+0x354>
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f51a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800f51e:	429a      	cmp	r2, r3
 800f520:	d242      	bcs.n	800f5a8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	3308      	adds	r3, #8
 800f528:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f52c:	e853 3f00 	ldrex	r3, [r3]
 800f530:	623b      	str	r3, [r7, #32]
   return(result);
 800f532:	6a3b      	ldr	r3, [r7, #32]
 800f534:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f538:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	3308      	adds	r3, #8
 800f542:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f546:	633a      	str	r2, [r7, #48]	@ 0x30
 800f548:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f54a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f54c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f54e:	e841 2300 	strex	r3, r2, [r1]
 800f552:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f556:	2b00      	cmp	r3, #0
 800f558:	d1e3      	bne.n	800f522 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	4a16      	ldr	r2, [pc, #88]	@ (800f5b8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f55e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	e853 3f00 	ldrex	r3, [r3]
 800f56c:	60fb      	str	r3, [r7, #12]
   return(result);
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	f043 0320 	orr.w	r3, r3, #32
 800f574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	461a      	mov	r2, r3
 800f57e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f582:	61fb      	str	r3, [r7, #28]
 800f584:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f586:	69b9      	ldr	r1, [r7, #24]
 800f588:	69fa      	ldr	r2, [r7, #28]
 800f58a:	e841 2300 	strex	r3, r2, [r1]
 800f58e:	617b      	str	r3, [r7, #20]
   return(result);
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d1e4      	bne.n	800f560 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f596:	e007      	b.n	800f5a8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	699a      	ldr	r2, [r3, #24]
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	f042 0208 	orr.w	r2, r2, #8
 800f5a6:	619a      	str	r2, [r3, #24]
}
 800f5a8:	bf00      	nop
 800f5aa:	37b8      	adds	r7, #184	@ 0xb8
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}
 800f5b0:	effffffe 	.word	0xeffffffe
 800f5b4:	58000c00 	.word	0x58000c00
 800f5b8:	0800ed3d 	.word	0x0800ed3d

0800f5bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f5bc:	b480      	push	{r7}
 800f5be:	b083      	sub	sp, #12
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f5c4:	bf00      	nop
 800f5c6:	370c      	adds	r7, #12
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr

0800f5d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b083      	sub	sp, #12
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f5d8:	bf00      	nop
 800f5da:	370c      	adds	r7, #12
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e2:	4770      	bx	lr

0800f5e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	b083      	sub	sp, #12
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f5ec:	bf00      	nop
 800f5ee:	370c      	adds	r7, #12
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f6:	4770      	bx	lr

0800f5f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b085      	sub	sp, #20
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f606:	2b01      	cmp	r3, #1
 800f608:	d101      	bne.n	800f60e <HAL_UARTEx_DisableFifoMode+0x16>
 800f60a:	2302      	movs	r3, #2
 800f60c:	e027      	b.n	800f65e <HAL_UARTEx_DisableFifoMode+0x66>
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2201      	movs	r2, #1
 800f612:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2224      	movs	r2, #36	@ 0x24
 800f61a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	681a      	ldr	r2, [r3, #0]
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	f022 0201 	bic.w	r2, r2, #1
 800f634:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f63c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2200      	movs	r2, #0
 800f642:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	68fa      	ldr	r2, [r7, #12]
 800f64a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2220      	movs	r2, #32
 800f650:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2200      	movs	r2, #0
 800f658:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f65c:	2300      	movs	r3, #0
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3714      	adds	r7, #20
 800f662:	46bd      	mov	sp, r7
 800f664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f668:	4770      	bx	lr

0800f66a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f66a:	b580      	push	{r7, lr}
 800f66c:	b084      	sub	sp, #16
 800f66e:	af00      	add	r7, sp, #0
 800f670:	6078      	str	r0, [r7, #4]
 800f672:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f67a:	2b01      	cmp	r3, #1
 800f67c:	d101      	bne.n	800f682 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f67e:	2302      	movs	r3, #2
 800f680:	e02d      	b.n	800f6de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2201      	movs	r2, #1
 800f686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2224      	movs	r2, #36	@ 0x24
 800f68e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	681a      	ldr	r2, [r3, #0]
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	f022 0201 	bic.w	r2, r2, #1
 800f6a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	689b      	ldr	r3, [r3, #8]
 800f6b0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	683a      	ldr	r2, [r7, #0]
 800f6ba:	430a      	orrs	r2, r1
 800f6bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f000 f8a0 	bl	800f804 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	68fa      	ldr	r2, [r7, #12]
 800f6ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2220      	movs	r2, #32
 800f6d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f6dc:	2300      	movs	r3, #0
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3710      	adds	r7, #16
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}

0800f6e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	b084      	sub	sp, #16
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]
 800f6ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f6f6:	2b01      	cmp	r3, #1
 800f6f8:	d101      	bne.n	800f6fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f6fa:	2302      	movs	r3, #2
 800f6fc:	e02d      	b.n	800f75a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2201      	movs	r2, #1
 800f702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2224      	movs	r2, #36	@ 0x24
 800f70a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	f022 0201 	bic.w	r2, r2, #1
 800f724:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	689b      	ldr	r3, [r3, #8]
 800f72c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	683a      	ldr	r2, [r7, #0]
 800f736:	430a      	orrs	r2, r1
 800f738:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f000 f862 	bl	800f804 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	68fa      	ldr	r2, [r7, #12]
 800f746:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2220      	movs	r2, #32
 800f74c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2200      	movs	r2, #0
 800f754:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f758:	2300      	movs	r3, #0
}
 800f75a:	4618      	mov	r0, r3
 800f75c:	3710      	adds	r7, #16
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}

0800f762 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f762:	b580      	push	{r7, lr}
 800f764:	b08c      	sub	sp, #48	@ 0x30
 800f766:	af00      	add	r7, sp, #0
 800f768:	60f8      	str	r0, [r7, #12]
 800f76a:	60b9      	str	r1, [r7, #8]
 800f76c:	4613      	mov	r3, r2
 800f76e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800f770:	2300      	movs	r3, #0
 800f772:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f77c:	2b20      	cmp	r3, #32
 800f77e:	d13b      	bne.n	800f7f8 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 800f780:	68bb      	ldr	r3, [r7, #8]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d002      	beq.n	800f78c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800f786:	88fb      	ldrh	r3, [r7, #6]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d101      	bne.n	800f790 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800f78c:	2301      	movs	r3, #1
 800f78e:	e034      	b.n	800f7fa <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	2201      	movs	r2, #1
 800f794:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	2200      	movs	r2, #0
 800f79a:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800f79c:	88fb      	ldrh	r3, [r7, #6]
 800f79e:	461a      	mov	r2, r3
 800f7a0:	68b9      	ldr	r1, [r7, #8]
 800f7a2:	68f8      	ldr	r0, [r7, #12]
 800f7a4:	f7ff f824 	bl	800e7f0 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f7ac:	2b01      	cmp	r3, #1
 800f7ae:	d11d      	bne.n	800f7ec <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	2210      	movs	r2, #16
 800f7b6:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7be:	69bb      	ldr	r3, [r7, #24]
 800f7c0:	e853 3f00 	ldrex	r3, [r3]
 800f7c4:	617b      	str	r3, [r7, #20]
   return(result);
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	f043 0310 	orr.w	r3, r3, #16
 800f7cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800f7d8:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7da:	6a39      	ldr	r1, [r7, #32]
 800f7dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f7de:	e841 2300 	strex	r3, r2, [r1]
 800f7e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800f7e4:	69fb      	ldr	r3, [r7, #28]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d1e6      	bne.n	800f7b8 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 800f7ea:	e002      	b.n	800f7f2 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800f7f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f7f6:	e000      	b.n	800f7fa <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 800f7f8:	2302      	movs	r3, #2
  }
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	3730      	adds	r7, #48	@ 0x30
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}
	...

0800f804 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f804:	b480      	push	{r7}
 800f806:	b085      	sub	sp, #20
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f810:	2b00      	cmp	r3, #0
 800f812:	d108      	bne.n	800f826 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2201      	movs	r2, #1
 800f818:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2201      	movs	r2, #1
 800f820:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f824:	e031      	b.n	800f88a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f826:	2310      	movs	r3, #16
 800f828:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f82a:	2310      	movs	r3, #16
 800f82c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	689b      	ldr	r3, [r3, #8]
 800f834:	0e5b      	lsrs	r3, r3, #25
 800f836:	b2db      	uxtb	r3, r3
 800f838:	f003 0307 	and.w	r3, r3, #7
 800f83c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	689b      	ldr	r3, [r3, #8]
 800f844:	0f5b      	lsrs	r3, r3, #29
 800f846:	b2db      	uxtb	r3, r3
 800f848:	f003 0307 	and.w	r3, r3, #7
 800f84c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f84e:	7bbb      	ldrb	r3, [r7, #14]
 800f850:	7b3a      	ldrb	r2, [r7, #12]
 800f852:	4911      	ldr	r1, [pc, #68]	@ (800f898 <UARTEx_SetNbDataToProcess+0x94>)
 800f854:	5c8a      	ldrb	r2, [r1, r2]
 800f856:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f85a:	7b3a      	ldrb	r2, [r7, #12]
 800f85c:	490f      	ldr	r1, [pc, #60]	@ (800f89c <UARTEx_SetNbDataToProcess+0x98>)
 800f85e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f860:	fb93 f3f2 	sdiv	r3, r3, r2
 800f864:	b29a      	uxth	r2, r3
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f86c:	7bfb      	ldrb	r3, [r7, #15]
 800f86e:	7b7a      	ldrb	r2, [r7, #13]
 800f870:	4909      	ldr	r1, [pc, #36]	@ (800f898 <UARTEx_SetNbDataToProcess+0x94>)
 800f872:	5c8a      	ldrb	r2, [r1, r2]
 800f874:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f878:	7b7a      	ldrb	r2, [r7, #13]
 800f87a:	4908      	ldr	r1, [pc, #32]	@ (800f89c <UARTEx_SetNbDataToProcess+0x98>)
 800f87c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f87e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f882:	b29a      	uxth	r2, r3
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f88a:	bf00      	nop
 800f88c:	3714      	adds	r7, #20
 800f88e:	46bd      	mov	sp, r7
 800f890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f894:	4770      	bx	lr
 800f896:	bf00      	nop
 800f898:	0800f9b8 	.word	0x0800f9b8
 800f89c:	0800f9c0 	.word	0x0800f9c0

0800f8a0 <memset>:
 800f8a0:	4402      	add	r2, r0
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	4293      	cmp	r3, r2
 800f8a6:	d100      	bne.n	800f8aa <memset+0xa>
 800f8a8:	4770      	bx	lr
 800f8aa:	f803 1b01 	strb.w	r1, [r3], #1
 800f8ae:	e7f9      	b.n	800f8a4 <memset+0x4>

0800f8b0 <__libc_init_array>:
 800f8b0:	b570      	push	{r4, r5, r6, lr}
 800f8b2:	4d0d      	ldr	r5, [pc, #52]	@ (800f8e8 <__libc_init_array+0x38>)
 800f8b4:	4c0d      	ldr	r4, [pc, #52]	@ (800f8ec <__libc_init_array+0x3c>)
 800f8b6:	1b64      	subs	r4, r4, r5
 800f8b8:	10a4      	asrs	r4, r4, #2
 800f8ba:	2600      	movs	r6, #0
 800f8bc:	42a6      	cmp	r6, r4
 800f8be:	d109      	bne.n	800f8d4 <__libc_init_array+0x24>
 800f8c0:	4d0b      	ldr	r5, [pc, #44]	@ (800f8f0 <__libc_init_array+0x40>)
 800f8c2:	4c0c      	ldr	r4, [pc, #48]	@ (800f8f4 <__libc_init_array+0x44>)
 800f8c4:	f000 f826 	bl	800f914 <_init>
 800f8c8:	1b64      	subs	r4, r4, r5
 800f8ca:	10a4      	asrs	r4, r4, #2
 800f8cc:	2600      	movs	r6, #0
 800f8ce:	42a6      	cmp	r6, r4
 800f8d0:	d105      	bne.n	800f8de <__libc_init_array+0x2e>
 800f8d2:	bd70      	pop	{r4, r5, r6, pc}
 800f8d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8d8:	4798      	blx	r3
 800f8da:	3601      	adds	r6, #1
 800f8dc:	e7ee      	b.n	800f8bc <__libc_init_array+0xc>
 800f8de:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8e2:	4798      	blx	r3
 800f8e4:	3601      	adds	r6, #1
 800f8e6:	e7f2      	b.n	800f8ce <__libc_init_array+0x1e>
 800f8e8:	0800f9d0 	.word	0x0800f9d0
 800f8ec:	0800f9d0 	.word	0x0800f9d0
 800f8f0:	0800f9d0 	.word	0x0800f9d0
 800f8f4:	0800f9d4 	.word	0x0800f9d4

0800f8f8 <memcpy>:
 800f8f8:	440a      	add	r2, r1
 800f8fa:	4291      	cmp	r1, r2
 800f8fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800f900:	d100      	bne.n	800f904 <memcpy+0xc>
 800f902:	4770      	bx	lr
 800f904:	b510      	push	{r4, lr}
 800f906:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f90a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f90e:	4291      	cmp	r1, r2
 800f910:	d1f9      	bne.n	800f906 <memcpy+0xe>
 800f912:	bd10      	pop	{r4, pc}

0800f914 <_init>:
 800f914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f916:	bf00      	nop
 800f918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f91a:	bc08      	pop	{r3}
 800f91c:	469e      	mov	lr, r3
 800f91e:	4770      	bx	lr

0800f920 <_fini>:
 800f920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f922:	bf00      	nop
 800f924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f926:	bc08      	pop	{r3}
 800f928:	469e      	mov	lr, r3
 800f92a:	4770      	bx	lr
