
GENZERO_AGV_VH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6a8  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  0800f978  0800f978  00010978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fc08  0800fc08  00010c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fc10  0800fc10  00010c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fc14  0800fc14  00010c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  24000000  0800fc18  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000528  24000064  0800fc7c  00011064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400058c  0800fc7c  0001158c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00011064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e930  00000000  00000000  00011092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000328e  00000000  00000000  0002f9c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001850  00000000  00000000  00032c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001307  00000000  00000000  000344a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035cb1  00000000  00000000  000357a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ffaf  00000000  00000000  0006b458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00166e86  00000000  00000000  0008b407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f228d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006a2c  00000000  00000000  001f22d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  001f8cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000064 	.word	0x24000064
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800f95c 	.word	0x0800f95c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000068 	.word	0x24000068
 8000308:	0800f95c 	.word	0x0800f95c

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80005fc:	b4b0      	push	{r4, r5, r7}
 80005fe:	b08f      	sub	sp, #60	@ 0x3c
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000604:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000608:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800060a:	2307      	movs	r3, #7
 800060c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000610:	2307      	movs	r3, #7
 8000612:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000616:	2301      	movs	r3, #1
 8000618:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 800061c:	23ff      	movs	r3, #255	@ 0xff
 800061e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000622:	2364      	movs	r3, #100	@ 0x64
 8000624:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000628:	2308      	movs	r3, #8
 800062a:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	461d      	mov	r5, r3
 8000630:	f107 040c 	add.w	r4, r7, #12
 8000634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800063a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800063c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000640:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	373c      	adds	r7, #60	@ 0x3c
 8000648:	46bd      	mov	sp, r7
 800064a:	bcb0      	pop	{r4, r5, r7}
 800064c:	4770      	bx	lr

0800064e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800064e:	b580      	push	{r7, lr}
 8000650:	b084      	sub	sp, #16
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000658:	2101      	movs	r1, #1
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f9fd 	bl	8000a5a <LoRa_read>
 8000660:	4603      	mov	r3, r0
 8000662:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000664:	7bbb      	ldrb	r3, [r7, #14]
 8000666:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d107      	bne.n	800067e <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	f023 0307 	bic.w	r3, r3, #7
 8000674:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
 800067c:	e03e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d10c      	bne.n	800069e <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000688:	f023 0307 	bic.w	r3, r3, #7
 800068c:	b25b      	sxtb	r3, r3
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	b25b      	sxtb	r3, r3
 8000694:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2201      	movs	r2, #1
 800069a:	61da      	str	r2, [r3, #28]
 800069c:	e02e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	d10c      	bne.n	80006be <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80006a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006a8:	f023 0307 	bic.w	r3, r3, #7
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	f043 0303 	orr.w	r3, r3, #3
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2203      	movs	r2, #3
 80006ba:	61da      	str	r2, [r3, #28]
 80006bc:	e01e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	d10c      	bne.n	80006de <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80006c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006c8:	f023 0307 	bic.w	r3, r3, #7
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	f043 0305 	orr.w	r3, r3, #5
 80006d2:	b25b      	sxtb	r3, r3
 80006d4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2205      	movs	r2, #5
 80006da:	61da      	str	r2, [r3, #28]
 80006dc:	e00e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	2b06      	cmp	r3, #6
 80006e2:	d10b      	bne.n	80006fc <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80006e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006e8:	f023 0307 	bic.w	r3, r3, #7
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	f043 0306 	orr.w	r3, r3, #6
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2206      	movs	r2, #6
 80006fa:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	461a      	mov	r2, r3
 8000700:	2101      	movs	r1, #1
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f000 f9c3 	bl	8000a8e <LoRa_write>
	//HAL_Delay(10);
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4613      	mov	r3, r2
 800071e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	889b      	ldrh	r3, [r3, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	4619      	mov	r1, r3
 800072c:	f007 fa88 	bl	8007c40 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	6998      	ldr	r0, [r3, #24]
 8000734:	88fa      	ldrh	r2, [r7, #6]
 8000736:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800073a:	68b9      	ldr	r1, [r7, #8]
 800073c:	f00a ff78 	bl	800b630 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000740:	bf00      	nop
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4618      	mov	r0, r3
 8000748:	f00b fbd2 	bl	800bef0 <HAL_SPI_GetState>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	d1f7      	bne.n	8000742 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6998      	ldr	r0, [r3, #24]
 8000756:	8b3a      	ldrh	r2, [r7, #24]
 8000758:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800075c:	6839      	ldr	r1, [r7, #0]
 800075e:	f00b f955 	bl	800ba0c <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000762:	bf00      	nop
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4618      	mov	r0, r3
 800076a:	f00b fbc1 	bl	800bef0 <HAL_SPI_GetState>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d1f7      	bne.n	8000764 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	889b      	ldrh	r3, [r3, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	4619      	mov	r1, r3
 8000780:	f007 fa5e 	bl	8007c40 <HAL_GPIO_WritePin>
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	4613      	mov	r3, r2
 800079a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	889b      	ldrh	r3, [r3, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	f007 fa4a 	bl	8007c40 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	6998      	ldr	r0, [r3, #24]
 80007b0:	88fa      	ldrh	r2, [r7, #6]
 80007b2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007b6:	68b9      	ldr	r1, [r7, #8]
 80007b8:	f00a ff3a 	bl	800b630 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007bc:	bf00      	nop
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00b fb94 	bl	800bef0 <HAL_SPI_GetState>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d1f7      	bne.n	80007be <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6998      	ldr	r0, [r3, #24]
 80007d2:	8b3a      	ldrh	r2, [r7, #24]
 80007d4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007d8:	6839      	ldr	r1, [r7, #0]
 80007da:	f00a ff29 	bl	800b630 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007de:	bf00      	nop
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f00b fb83 	bl	800bef0 <HAL_SPI_GetState>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d1f7      	bne.n	80007e0 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	889b      	ldrh	r3, [r3, #4]
 80007f8:	2201      	movs	r2, #1
 80007fa:	4619      	mov	r1, r3
 80007fc:	f007 fa20 	bl	8007c40 <HAL_GPIO_WritePin>
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000814:	2126      	movs	r1, #38	@ 0x26
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 f91f 	bl	8000a5a <LoRa_read>
 800081c:	4603      	mov	r3, r0
 800081e:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d004      	beq.n	8000830 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e003      	b.n	8000838 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000830:	7bbb      	ldrb	r3, [r7, #14]
 8000832:	f023 0308 	bic.w	r3, r3, #8
 8000836:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	461a      	mov	r2, r3
 800083c:	2126      	movs	r1, #38	@ 0x26
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f000 f925 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000844:	200a      	movs	r0, #10
 8000846:	f002 f829 	bl	800289c <HAL_Delay>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000854:	b580      	push	{r7, lr}
 8000856:	b096      	sub	sp, #88	@ 0x58
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 800085c:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <LoRa_setAutoLDO+0x64>)
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4611      	mov	r1, r2
 8000864:	2250      	movs	r2, #80	@ 0x50
 8000866:	4618      	mov	r0, r3
 8000868:	f00f f86a 	bl	800f940 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000872:	461a      	mov	r2, r3
 8000874:	2301      	movs	r3, #1
 8000876:	4093      	lsls	r3, r2
 8000878:	ee07 3a90 	vmov	s15, r3
 800087c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	3358      	adds	r3, #88	@ 0x58
 800088a:	443b      	add	r3, r7
 800088c:	3b50      	subs	r3, #80	@ 0x50
 800088e:	ed93 6b00 	vldr	d6, [r3]
 8000892:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000896:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800089a:	ee17 3a90 	vmov	r3, s15
 800089e:	2b10      	cmp	r3, #16
 80008a0:	bfcc      	ite	gt
 80008a2:	2301      	movgt	r3, #1
 80008a4:	2300      	movle	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	4619      	mov	r1, r3
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffac 	bl	8000808 <LoRa_setLowDaraRateOptimization>
}
 80008b0:	bf00      	nop
 80008b2:	3758      	adds	r7, #88	@ 0x58
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	0800f978 	.word	0x0800f978

080008bc <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	04db      	lsls	r3, r3, #19
 80008ca:	115b      	asrs	r3, r3, #5
 80008cc:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	0c1b      	lsrs	r3, r3, #16
 80008d2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80008d4:	7afb      	ldrb	r3, [r7, #11]
 80008d6:	461a      	mov	r2, r3
 80008d8:	2106      	movs	r1, #6
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 f8d7 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 80008e0:	2005      	movs	r0, #5
 80008e2:	f001 ffdb 	bl	800289c <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80008ec:	7afb      	ldrb	r3, [r7, #11]
 80008ee:	461a      	mov	r2, r3
 80008f0:	2107      	movs	r1, #7
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 f8cb 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 80008f8:	2005      	movs	r0, #5
 80008fa:	f001 ffcf 	bl	800289c <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000902:	7afb      	ldrb	r3, [r7, #11]
 8000904:	461a      	mov	r2, r3
 8000906:	2108      	movs	r1, #8
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f8c0 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 800090e:	2005      	movs	r0, #5
 8000910:	f001 ffc4 	bl	800289c <HAL_Delay>
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	2b0c      	cmp	r3, #12
 800092a:	dd01      	ble.n	8000930 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 800092c:	230c      	movs	r3, #12
 800092e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	2b06      	cmp	r3, #6
 8000934:	dc01      	bgt.n	800093a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000936:	2307      	movs	r3, #7
 8000938:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800093a:	211e      	movs	r1, #30
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 f88c 	bl	8000a5a <LoRa_read>
 8000942:	4603      	mov	r3, r0
 8000944:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000946:	200a      	movs	r0, #10
 8000948:	f001 ffa8 	bl	800289c <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	011b      	lsls	r3, r3, #4
 8000952:	b2da      	uxtb	r2, r3
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4413      	add	r3, r2
 800095e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000960:	7bbb      	ldrb	r3, [r7, #14]
 8000962:	461a      	mov	r2, r3
 8000964:	211e      	movs	r1, #30
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f891 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 800096c:	200a      	movs	r0, #10
 800096e:	f001 ff95 	bl	800289c <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ff6e 	bl	8000854 <LoRa_setAutoLDO>
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	461a      	mov	r2, r3
 8000990:	2109      	movs	r1, #9
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 f87b 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000998:	200a      	movs	r0, #10
 800099a:	f001 ff7f 	bl	800289c <HAL_Delay>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	2b2c      	cmp	r3, #44	@ 0x2c
 80009bc:	d801      	bhi.n	80009c2 <LoRa_setOCP+0x1a>
		current = 45;
 80009be:	232d      	movs	r3, #45	@ 0x2d
 80009c0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	2bf0      	cmp	r3, #240	@ 0xf0
 80009c6:	d901      	bls.n	80009cc <LoRa_setOCP+0x24>
		current = 240;
 80009c8:	23f0      	movs	r3, #240	@ 0xf0
 80009ca:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	2b78      	cmp	r3, #120	@ 0x78
 80009d0:	d809      	bhi.n	80009e6 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80009d2:	78fb      	ldrb	r3, [r7, #3]
 80009d4:	3b2d      	subs	r3, #45	@ 0x2d
 80009d6:	4a12      	ldr	r2, [pc, #72]	@ (8000a20 <LoRa_setOCP+0x78>)
 80009d8:	fb82 1203 	smull	r1, r2, r2, r3
 80009dc:	1052      	asrs	r2, r2, #1
 80009de:	17db      	asrs	r3, r3, #31
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	73fb      	strb	r3, [r7, #15]
 80009e4:	e00b      	b.n	80009fe <LoRa_setOCP+0x56>
	else if(current <= 240)
 80009e6:	78fb      	ldrb	r3, [r7, #3]
 80009e8:	2bf0      	cmp	r3, #240	@ 0xf0
 80009ea:	d808      	bhi.n	80009fe <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	331e      	adds	r3, #30
 80009f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a20 <LoRa_setOCP+0x78>)
 80009f2:	fb82 1203 	smull	r1, r2, r2, r3
 80009f6:	1092      	asrs	r2, r2, #2
 80009f8:	17db      	asrs	r3, r3, #31
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	3320      	adds	r3, #32
 8000a02:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	461a      	mov	r2, r3
 8000a08:	210b      	movs	r1, #11
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f83f 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000a10:	200a      	movs	r0, #10
 8000a12:	f001 ff43 	bl	800289c <HAL_Delay>
}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	66666667 	.word	0x66666667

08000a24 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000a2c:	211e      	movs	r1, #30
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f000 f813 	bl	8000a5a <LoRa_read>
 8000a34:	4603      	mov	r3, r0
 8000a36:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	f043 0307 	orr.w	r3, r3, #7
 8000a3e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000a40:	7bbb      	ldrb	r3, [r7, #14]
 8000a42:	461a      	mov	r2, r3
 8000a44:	211e      	movs	r1, #30
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 f821 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000a4c:	200a      	movs	r0, #10
 8000a4e:	f001 ff25 	bl	800289c <HAL_Delay>
}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af02      	add	r7, sp, #8
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	460b      	mov	r3, r1
 8000a64:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000a66:	78fb      	ldrb	r3, [r7, #3]
 8000a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000a70:	f107 030f 	add.w	r3, r7, #15
 8000a74:	f107 010e 	add.w	r1, r7, #14
 8000a78:	2201      	movs	r2, #1
 8000a7a:	9200      	str	r2, [sp, #0]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff fe46 	bl	8000710 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af02      	add	r7, sp, #8
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	460b      	mov	r3, r1
 8000a98:	70fb      	strb	r3, [r7, #3]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000a9e:	78fb      	ldrb	r3, [r7, #3]
 8000aa0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000aa8:	78bb      	ldrb	r3, [r7, #2]
 8000aaa:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000aac:	f107 030f 	add.w	r3, r7, #15
 8000ab0:	f107 010e 	add.w	r1, r7, #14
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	9200      	str	r2, [sp, #0]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fe66 	bl	800078c <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	72fb      	strb	r3, [r7, #11]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8000adc:	7afb      	ldrb	r3, [r7, #11]
 8000ade:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	6818      	ldr	r0, [r3, #0]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	889b      	ldrh	r3, [r3, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	4619      	mov	r1, r3
 8000af2:	f007 f8a5 	bl	8007c40 <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	6998      	ldr	r0, [r3, #24]
 8000afa:	f107 0117 	add.w	r1, r7, #23
 8000afe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b02:	2201      	movs	r2, #1
 8000b04:	f00a fd94 	bl	800b630 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000b08:	bf00      	nop
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f00b f9ee 	bl	800bef0 <HAL_SPI_GetState>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d1f7      	bne.n	8000b0a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	6998      	ldr	r0, [r3, #24]
 8000b1e:	7abb      	ldrb	r3, [r7, #10]
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	f00a fd82 	bl	800b630 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000b2c:	bf00      	nop
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f00b f9dc 	bl	800bef0 <HAL_SPI_GetState>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d1f7      	bne.n	8000b2e <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	6818      	ldr	r0, [r3, #0]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	889b      	ldrh	r3, [r3, #4]
 8000b46:	2201      	movs	r2, #1
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f007 f879 	bl	8007c40 <HAL_GPIO_WritePin>
}
 8000b4e:	bf00      	nop
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]

	return 1;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	4611      	mov	r1, r2
 8000b78:	461a      	mov	r2, r3
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	71fb      	strb	r3, [r7, #7]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000b88:	2101      	movs	r1, #1
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff fd5f 	bl	800064e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000b90:	210e      	movs	r1, #14
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f7ff ff61 	bl	8000a5a <LoRa_read>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000b9c:	7cfb      	ldrb	r3, [r7, #19]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	210d      	movs	r1, #13
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f7ff ff73 	bl	8000a8e <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	461a      	mov	r2, r3
 8000bac:	2122      	movs	r1, #34	@ 0x22
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f7ff ff6d 	bl	8000a8e <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	2100      	movs	r1, #0
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f7ff ff84 	bl	8000ac8 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000bc0:	2103      	movs	r1, #3
 8000bc2:	68f8      	ldr	r0, [r7, #12]
 8000bc4:	f7ff fd43 	bl	800064e <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000bc8:	2112      	movs	r1, #18
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	f7ff ff45 	bl	8000a5a <LoRa_read>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8000bd4:	7cfb      	ldrb	r3, [r7, #19]
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d00a      	beq.n	8000bf4 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000bde:	22ff      	movs	r2, #255	@ 0xff
 8000be0:	2112      	movs	r1, #18
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f7ff ff53 	bl	8000a8e <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000be8:	6979      	ldr	r1, [r7, #20]
 8000bea:	68f8      	ldr	r0, [r7, #12]
 8000bec:	f7ff fd2f 	bl	800064e <LoRa_gotoMode>
			return 1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e00f      	b.n	8000c14 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8000bf4:	88bb      	ldrh	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	80bb      	strh	r3, [r7, #4]
 8000bfa:	88bb      	ldrh	r3, [r7, #4]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d105      	bne.n	8000c0c <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8000c00:	6979      	ldr	r1, [r7, #20]
 8000c02:	68f8      	ldr	r0, [r7, #12]
 8000c04:	f7ff fd23 	bl	800064e <LoRa_gotoMode>
				return 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e003      	b.n	8000c14 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f001 fe45 	bl	800289c <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000c12:	e7d9      	b.n	8000bc8 <LoRa_transmit+0x5c>
	}
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000c24:	2105      	movs	r1, #5
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff fd11 	bl	800064e <LoRa_gotoMode>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b089      	sub	sp, #36	@ 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	e007      	b.n	8000c5c <LoRa_receive+0x28>
		data[i]=0;
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	4413      	add	r3, r2
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dbf3      	blt.n	8000c4c <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000c64:	2101      	movs	r1, #1
 8000c66:	68f8      	ldr	r0, [r7, #12]
 8000c68:	f7ff fcf1 	bl	800064e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000c6c:	2112      	movs	r1, #18
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f7ff fef3 	bl	8000a5a <LoRa_read>
 8000c74:	4603      	mov	r3, r0
 8000c76:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000c78:	7cfb      	ldrb	r3, [r7, #19]
 8000c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d02f      	beq.n	8000ce2 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000c82:	22ff      	movs	r2, #255	@ 0xff
 8000c84:	2112      	movs	r1, #18
 8000c86:	68f8      	ldr	r0, [r7, #12]
 8000c88:	f7ff ff01 	bl	8000a8e <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000c8c:	2113      	movs	r1, #19
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f7ff fee3 	bl	8000a5a <LoRa_read>
 8000c94:	4603      	mov	r3, r0
 8000c96:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000c98:	2110      	movs	r1, #16
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f7ff fedd 	bl	8000a5a <LoRa_read>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000ca4:	7cfb      	ldrb	r3, [r7, #19]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	210d      	movs	r1, #13
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f7ff feef 	bl	8000a8e <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000cb0:	7cba      	ldrb	r2, [r7, #18]
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	bf28      	it	cs
 8000cb8:	4613      	movcs	r3, r2
 8000cba:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	e00b      	b.n	8000cda <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	18d4      	adds	r4, r2, r3
 8000cc8:	2100      	movs	r1, #0
 8000cca:	68f8      	ldr	r0, [r7, #12]
 8000ccc:	f7ff fec5 	bl	8000a5a <LoRa_read>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	7ffb      	ldrb	r3, [r7, #31]
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	dbef      	blt.n	8000cc2 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000ce2:	2105      	movs	r1, #5
 8000ce4:	68f8      	ldr	r0, [r7, #12]
 8000ce6:	f7ff fcb2 	bl	800064e <LoRa_gotoMode>
    return min;
 8000cea:	7ffb      	ldrb	r3, [r7, #31]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3724      	adds	r7, #36	@ 0x24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd90      	pop	{r4, r7, pc}

08000cf4 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff2a 	bl	8000b56 <LoRa_isvalid>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 8096 	beq.w	8000e36 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff fc9e 	bl	800064e <LoRa_gotoMode>
			HAL_Delay(10);
 8000d12:	200a      	movs	r0, #10
 8000d14:	f001 fdc2 	bl	800289c <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000d18:	2101      	movs	r1, #1
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff fe9d 	bl	8000a5a <LoRa_read>
 8000d20:	4603      	mov	r3, r0
 8000d22:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000d24:	200a      	movs	r0, #10
 8000d26:	f001 fdb9 	bl	800289c <HAL_Delay>
			data = read | 0x80;
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d30:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000d32:	7bbb      	ldrb	r3, [r7, #14]
 8000d34:	461a      	mov	r2, r3
 8000d36:	2101      	movs	r1, #1
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff fea8 	bl	8000a8e <LoRa_write>
			HAL_Delay(100);
 8000d3e:	2064      	movs	r0, #100	@ 0x64
 8000d40:	f001 fdac 	bl	800289c <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a1b      	ldr	r3, [r3, #32]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff fdb6 	bl	80008bc <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000d56:	4619      	mov	r1, r3
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff fe11 	bl	8000980 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000d64:	4619      	mov	r1, r3
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff fe1e 	bl	80009a8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000d6c:	2223      	movs	r2, #35	@ 0x23
 8000d6e:	210c      	movs	r1, #12
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff fe8c 	bl	8000a8e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff fe54 	bl	8000a24 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d82:	4619      	mov	r1, r3
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff fdc9 	bl	800091c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000d8a:	22ff      	movs	r2, #255	@ 0xff
 8000d8c:	211f      	movs	r1, #31
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff fe7d 	bl	8000a8e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	4413      	add	r3, r2
 8000dae:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000db0:	7bbb      	ldrb	r3, [r7, #14]
 8000db2:	461a      	mov	r2, r3
 8000db4:	211d      	movs	r1, #29
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff fe69 	bl	8000a8e <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff fd49 	bl	8000854 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000dc6:	0a1b      	lsrs	r3, r3, #8
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	461a      	mov	r2, r3
 8000dce:	2120      	movs	r1, #32
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff fe5c 	bl	8000a8e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	461a      	mov	r2, r3
 8000dde:	2121      	movs	r1, #33	@ 0x21
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff fe54 	bl	8000a8e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000de6:	2140      	movs	r1, #64	@ 0x40
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff fe36 	bl	8000a5a <LoRa_read>
 8000dee:	4603      	mov	r3, r0
 8000df0:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8000df8:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	2140      	movs	r1, #64	@ 0x40
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff fe44 	bl	8000a8e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000e06:	2101      	movs	r1, #1
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff fc20 	bl	800064e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2201      	movs	r2, #1
 8000e12:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000e14:	200a      	movs	r0, #10
 8000e16:	f001 fd41 	bl	800289c <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000e1a:	2142      	movs	r1, #66	@ 0x42
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff fe1c 	bl	8000a5a <LoRa_read>
 8000e22:	4603      	mov	r3, r0
 8000e24:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	2b12      	cmp	r3, #18
 8000e2a:	d101      	bne.n	8000e30 <LoRa_init+0x13c>
				return LORA_OK;
 8000e2c:	23c8      	movs	r3, #200	@ 0xc8
 8000e2e:	e004      	b.n	8000e3a <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8000e30:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8000e34:	e001      	b.n	8000e3a <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8000e36:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <Line_Sensor_Calculation>:
							  volatile uint8_t  *sensor_middle_on_line_number,

							  volatile uint8_t  *sensor_total_on_line_number,
									   uint16_t  sensor_threshhold,
									   uint8_t   sensor_numbers,
							  volatile uint16_t *line_position){
 8000e44:	b480      	push	{r7}
 8000e46:	b08d      	sub	sp, #52	@ 0x34
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	603b      	str	r3, [r7, #0]
	uint8_t i, on_line = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	uint32_t avg = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t sum = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t value;
	uint8_t on_sensor_total_number = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	uint8_t middle_on_line = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22


	for(i = 0; i < sensor_numbers; i++){
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000e72:	e077      	b.n	8000f64 <Line_Sensor_Calculation+0x120>
		uint16_t calmin, calmax;
		uint16_t denominator;
		calmax = sensor_max_values[i];
 8000e74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	837b      	strh	r3, [r7, #26]
		calmin = sensor_min_values[i];
 8000e82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	833b      	strh	r3, [r7, #24]

		denominator = calmax - calmin;
 8000e90:	8b7a      	ldrh	r2, [r7, #26]
 8000e92:	8b3b      	ldrh	r3, [r7, #24]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	82fb      	strh	r3, [r7, #22]

		int x = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
		if(denominator != 0){
 8000e9c:	8afb      	ldrh	r3, [r7, #22]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d011      	beq.n	8000ec6 <Line_Sensor_Calculation+0x82>
			x = (((signed long)sensor_values[i]) - calmin) * 1000/denominator;
 8000ea2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	68fa      	ldr	r2, [r7, #12]
 8000eaa:	4413      	add	r3, r2
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	8b3b      	ldrh	r3, [r7, #24]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000eba:	fb03 f202 	mul.w	r2, r3, r2
 8000ebe:	8afb      	ldrh	r3, [r7, #22]
 8000ec0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ec4:	61fb      	str	r3, [r7, #28]
		}
		if(x <0){
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	da01      	bge.n	8000ed0 <Line_Sensor_Calculation+0x8c>
			x = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
		}
		if(x>1000){
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ed6:	dd02      	ble.n	8000ede <Line_Sensor_Calculation+0x9a>
			x = 1000;
 8000ed8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000edc:	61fb      	str	r3, [r7, #28]
		}
		value = (1000-x);
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8000ee6:	82bb      	strh	r3, [r7, #20]
		sensor_calibrated_values[i] = value;
 8000ee8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	8aba      	ldrh	r2, [r7, #20]
 8000ef4:	801a      	strh	r2, [r3, #0]

		// start read line number section
		if(value > 600){
 8000ef6:	8abb      	ldrh	r3, [r7, #20]
 8000ef8:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000efc:	d902      	bls.n	8000f04 <Line_Sensor_Calculation+0xc0>
			on_line = 1;
 8000efe:	2301      	movs	r3, #1
 8000f00:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		}
		if(value > 200){
 8000f04:	8abb      	ldrh	r3, [r7, #20]
 8000f06:	2bc8      	cmp	r3, #200	@ 0xc8
 8000f08:	d910      	bls.n	8000f2c <Line_Sensor_Calculation+0xe8>
			avg += (long)(value)*(i*1000);
 8000f0a:	8abb      	ldrh	r3, [r7, #20]
 8000f0c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000f10:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f14:	fb01 f202 	mul.w	r2, r1, r2
 8000f18:	fb02 f303 	mul.w	r3, r2, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f20:	4413      	add	r3, r2
 8000f22:	62bb      	str	r3, [r7, #40]	@ 0x28
			sum += value;
 8000f24:	8abb      	ldrh	r3, [r7, #20]
 8000f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f28:	4413      	add	r3, r2
 8000f2a:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		// end read line number section

		// start on line sensor calculation
		if(value > sensor_threshhold){
 8000f2c:	8aba      	ldrh	r2, [r7, #20]
 8000f2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d911      	bls.n	8000f5a <Line_Sensor_Calculation+0x116>
			on_sensor_total_number++;
 8000f36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			if(i >= 2 && i <= 7){
 8000f40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d908      	bls.n	8000f5a <Line_Sensor_Calculation+0x116>
 8000f48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f4c:	2b07      	cmp	r3, #7
 8000f4e:	d804      	bhi.n	8000f5a <Line_Sensor_Calculation+0x116>
				middle_on_line++;
 8000f50:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000f54:	3301      	adds	r3, #1
 8000f56:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	for(i = 0; i < sensor_numbers; i++){
 8000f5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f5e:	3301      	adds	r3, #1
 8000f60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000f64:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000f68:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d381      	bcc.n	8000e74 <Line_Sensor_Calculation+0x30>
		}
		// end on line sensor calculation
	}

	// start read line number section
	if(!on_line){
 8000f70:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d118      	bne.n	8000faa <Line_Sensor_Calculation+0x166>
		if(_line_read_value < (sensor_numbers - 1) * 1000/2){
 8000f78:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000f82:	fb03 f202 	mul.w	r2, r3, r2
 8000f86:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <Line_Sensor_Calculation+0x19c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	dd03      	ble.n	8000f96 <Line_Sensor_Calculation+0x152>
			_line_read_value = 0;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <Line_Sensor_Calculation+0x19c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	e010      	b.n	8000fb8 <Line_Sensor_Calculation+0x174>
		}
		else{
			_line_read_value = (sensor_numbers - 1)*1000;
 8000f96:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fa0:	fb02 f303 	mul.w	r3, r2, r3
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe0 <Line_Sensor_Calculation+0x19c>)
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	e006      	b.n	8000fb8 <Line_Sensor_Calculation+0x174>
		}
	}
	else{
		_line_read_value = avg/sum;
 8000faa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <Line_Sensor_Calculation+0x19c>)
 8000fb6:	601a      	str	r2, [r3, #0]
	}
	*line_position = _line_read_value;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <Line_Sensor_Calculation+0x19c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000fc0:	801a      	strh	r2, [r3, #0]
	// end read line number section

	// start on line sensor calculation

	*sensor_middle_on_line_number = middle_on_line;
 8000fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000fc4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8000fc8:	701a      	strb	r2, [r3, #0]

	*sensor_total_on_line_number = on_sensor_total_number;
 8000fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fcc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000fd0:	701a      	strb	r2, [r3, #0]
	// end on line sensor calculation
	// 0 - 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9

	// 2 - 7 --> mid

}
 8000fd2:	bf00      	nop
 8000fd4:	3734      	adds	r7, #52	@ 0x34
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	240003f4 	.word	0x240003f4

08000fe4 <HAL_GPIO_EXTI_Callback>:
//		Station_id[3] = uid[3];
//		Station_id[4] = uid[4];
//	}
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d102      	bne.n	8000ffa <HAL_GPIO_EXTI_Callback+0x16>
		Station = 0;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <HAL_GPIO_EXTI_Callback+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_1){
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d102      	bne.n	8001006 <HAL_GPIO_EXTI_Callback+0x22>
		Station = 1;
 8001000:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <HAL_GPIO_EXTI_Callback+0x74>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_2){
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	2b04      	cmp	r3, #4
 800100a:	d102      	bne.n	8001012 <HAL_GPIO_EXTI_Callback+0x2e>
		Station = 2;
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <HAL_GPIO_EXTI_Callback+0x74>)
 800100e:	2202      	movs	r2, #2
 8001010:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_3){
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	2b08      	cmp	r3, #8
 8001016:	d102      	bne.n	800101e <HAL_GPIO_EXTI_Callback+0x3a>
		Station = 3;
 8001018:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <HAL_GPIO_EXTI_Callback+0x74>)
 800101a:	2203      	movs	r2, #3
 800101c:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_4){
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	2b10      	cmp	r3, #16
 8001022:	d103      	bne.n	800102c <HAL_GPIO_EXTI_Callback+0x48>
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_7);
 8001024:	2180      	movs	r1, #128	@ 0x80
 8001026:	480d      	ldr	r0, [pc, #52]	@ (800105c <HAL_GPIO_EXTI_Callback+0x78>)
 8001028:	f006 fe23 	bl	8007c72 <HAL_GPIO_TogglePin>
	}

	if(GPIO_Pin == myLoRa.DIO0_pin){
 800102c:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <HAL_GPIO_EXTI_Callback+0x7c>)
 800102e:	8a9b      	ldrh	r3, [r3, #20]
 8001030:	88fa      	ldrh	r2, [r7, #6]
 8001032:	429a      	cmp	r2, r3
 8001034:	d10b      	bne.n	800104e <HAL_GPIO_EXTI_Callback+0x6a>
		LoRa_receive(&myLoRa, LoraRxBuffer, 128);
 8001036:	2280      	movs	r2, #128	@ 0x80
 8001038:	490a      	ldr	r1, [pc, #40]	@ (8001064 <HAL_GPIO_EXTI_Callback+0x80>)
 800103a:	4809      	ldr	r0, [pc, #36]	@ (8001060 <HAL_GPIO_EXTI_Callback+0x7c>)
 800103c:	f7ff fdfa 	bl	8000c34 <LoRa_receive>
		HAL_GPIO_TogglePin(LORA_RX_LED_GPIO_Port, LORA_RX_LED_Pin);
 8001040:	2140      	movs	r1, #64	@ 0x40
 8001042:	4809      	ldr	r0, [pc, #36]	@ (8001068 <HAL_GPIO_EXTI_Callback+0x84>)
 8001044:	f006 fe15 	bl	8007c72 <HAL_GPIO_TogglePin>
		lora_receive_toggle = 255;
 8001048:	4b08      	ldr	r3, [pc, #32]	@ (800106c <HAL_GPIO_EXTI_Callback+0x88>)
 800104a:	22ff      	movs	r2, #255	@ 0xff
 800104c:	701a      	strb	r2, [r3, #0]

	}
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	24000450 	.word	0x24000450
 800105c:	58021800 	.word	0x58021800
 8001060:	24000454 	.word	0x24000454
 8001064:	24000504 	.word	0x24000504
 8001068:	58020c00 	.word	0x58020c00
 800106c:	24000584 	.word	0x24000584

08001070 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
	Data[0] = RxData[3]<<8 | RxData[4];
 800107c:	4b20      	ldr	r3, [pc, #128]	@ (8001100 <HAL_UARTEx_RxEventCallback+0x90>)
 800107e:	78db      	ldrb	r3, [r3, #3]
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	b21a      	sxth	r2, r3
 8001084:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <HAL_UARTEx_RxEventCallback+0x90>)
 8001086:	791b      	ldrb	r3, [r3, #4]
 8001088:	b21b      	sxth	r3, r3
 800108a:	4313      	orrs	r3, r2
 800108c:	b21b      	sxth	r3, r3
 800108e:	b29a      	uxth	r2, r3
 8001090:	4b1c      	ldr	r3, [pc, #112]	@ (8001104 <HAL_UARTEx_RxEventCallback+0x94>)
 8001092:	801a      	strh	r2, [r3, #0]
	Data[1] = RxData[5]<<8 | RxData[6];
 8001094:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <HAL_UARTEx_RxEventCallback+0x90>)
 8001096:	795b      	ldrb	r3, [r3, #5]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <HAL_UARTEx_RxEventCallback+0x90>)
 800109e:	799b      	ldrb	r3, [r3, #6]
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <HAL_UARTEx_RxEventCallback+0x94>)
 80010aa:	805a      	strh	r2, [r3, #2]
	Data[2] = RxData[7]<<8 | RxData[8];
 80010ac:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <HAL_UARTEx_RxEventCallback+0x90>)
 80010ae:	79db      	ldrb	r3, [r3, #7]
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_UARTEx_RxEventCallback+0x90>)
 80010b6:	7a1b      	ldrb	r3, [r3, #8]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b21b      	sxth	r3, r3
 80010be:	b29a      	uxth	r2, r3
 80010c0:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <HAL_UARTEx_RxEventCallback+0x94>)
 80010c2:	809a      	strh	r2, [r3, #4]
	Data[3] = RxData[9]<<8 | RxData[10];
 80010c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <HAL_UARTEx_RxEventCallback+0x90>)
 80010c6:	7a5b      	ldrb	r3, [r3, #9]
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <HAL_UARTEx_RxEventCallback+0x90>)
 80010ce:	7a9b      	ldrb	r3, [r3, #10]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <HAL_UARTEx_RxEventCallback+0x94>)
 80010da:	80da      	strh	r2, [r3, #6]
	Data[4] = RxData[11]<<8 | RxData[12];
 80010dc:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <HAL_UARTEx_RxEventCallback+0x90>)
 80010de:	7adb      	ldrb	r3, [r3, #11]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HAL_UARTEx_RxEventCallback+0x90>)
 80010e6:	7b1b      	ldrb	r3, [r3, #12]
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <HAL_UARTEx_RxEventCallback+0x94>)
 80010f2:	811a      	strh	r2, [r3, #8]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	240003b8 	.word	0x240003b8
 8001104:	240003e0 	.word	0x240003e0

08001108 <sendData>:

void sendData (uint8_t *data)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001116:	480a      	ldr	r0, [pc, #40]	@ (8001140 <sendData+0x38>)
 8001118:	f006 fd92 	bl	8007c40 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, data, 8, 1000);
 800111c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001120:	2208      	movs	r2, #8
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	4807      	ldr	r0, [pc, #28]	@ (8001144 <sendData+0x3c>)
 8001126:	f00b fefb 	bl	800cf20 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(TX_EN_GPIO_Port,TX_EN_Pin , GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001130:	4803      	ldr	r0, [pc, #12]	@ (8001140 <sendData+0x38>)
 8001132:	f006 fd85 	bl	8007c40 <HAL_GPIO_WritePin>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	58020400 	.word	0x58020400
 8001144:	24000324 	.word	0x24000324

08001148 <motor_enable_velocity_mode>:

void motor_enable_velocity_mode(uint8_t id){
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
	  TxData[0] = id;  // slave address
 8001152:	4a2a      	ldr	r2, [pc, #168]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	7013      	strb	r3, [r2, #0]
	  TxData[1] = 0x06;  // Function code for Read Holding Registers
 8001158:	4b28      	ldr	r3, [pc, #160]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 800115a:	2206      	movs	r2, #6
 800115c:	705a      	strb	r2, [r3, #1]

	  TxData[2] = 0x20;
 800115e:	4b27      	ldr	r3, [pc, #156]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 8001160:	2220      	movs	r2, #32
 8001162:	709a      	strb	r2, [r3, #2]
	  TxData[3] = 0x32;
 8001164:	4b25      	ldr	r3, [pc, #148]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 8001166:	2232      	movs	r2, #50	@ 0x32
 8001168:	70da      	strb	r2, [r3, #3]
	  //The Register address will be 00000000 00000100 = 4 + 40001 = 40005

	  TxData[4] = 0x00;
 800116a:	4b24      	ldr	r3, [pc, #144]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 800116c:	2200      	movs	r2, #0
 800116e:	711a      	strb	r2, [r3, #4]
	  TxData[5] = 0x03;
 8001170:	4b22      	ldr	r3, [pc, #136]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 8001172:	2203      	movs	r2, #3
 8001174:	715a      	strb	r2, [r3, #5]
	  // no of registers to read will be 00000000 00000101 = 5 Registers = 10 Bytes

	  uint16_t crc = crc16(TxData, 6);
 8001176:	2106      	movs	r1, #6
 8001178:	4820      	ldr	r0, [pc, #128]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 800117a:	f000 fec5 	bl	8001f08 <crc16>
 800117e:	4603      	mov	r3, r0
 8001180:	81fb      	strh	r3, [r7, #14]
	  TxData[6] = crc&0xFF;   // CRC LOW
 8001182:	89fb      	ldrh	r3, [r7, #14]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4b1d      	ldr	r3, [pc, #116]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 8001188:	719a      	strb	r2, [r3, #6]
	  TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 800118a:	89fb      	ldrh	r3, [r7, #14]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	b29b      	uxth	r3, r3
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 8001194:	71da      	strb	r2, [r3, #7]
	  sendData(TxData);
 8001196:	4819      	ldr	r0, [pc, #100]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 8001198:	f7ff ffb6 	bl	8001108 <sendData>

	  HAL_Delay(10);
 800119c:	200a      	movs	r0, #10
 800119e:	f001 fb7d 	bl	800289c <HAL_Delay>

	  TxData[0] = id;  // slave address
 80011a2:	4a16      	ldr	r2, [pc, #88]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	7013      	strb	r3, [r2, #0]
	  TxData[1] = 0x06;  // Function code for Read Holding Registers
 80011a8:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 80011aa:	2206      	movs	r2, #6
 80011ac:	705a      	strb	r2, [r3, #1]

	  TxData[2] = 0x20;
 80011ae:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 80011b0:	2220      	movs	r2, #32
 80011b2:	709a      	strb	r2, [r3, #2]
	  TxData[3] = 0x31;
 80011b4:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 80011b6:	2231      	movs	r2, #49	@ 0x31
 80011b8:	70da      	strb	r2, [r3, #3]
	  //The Register address will be 00000000 00000100 = 4 + 40001 = 40005

	  TxData[4] = 0x00;
 80011ba:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	711a      	strb	r2, [r3, #4]
	  TxData[5] = 0x08;
 80011c0:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 80011c2:	2208      	movs	r2, #8
 80011c4:	715a      	strb	r2, [r3, #5]
	  // no of registers to read will be 00000000 00000101 = 5 Registers = 10 Bytes

	  crc = crc16(TxData, 6);
 80011c6:	2106      	movs	r1, #6
 80011c8:	480c      	ldr	r0, [pc, #48]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 80011ca:	f000 fe9d 	bl	8001f08 <crc16>
 80011ce:	4603      	mov	r3, r0
 80011d0:	81fb      	strh	r3, [r7, #14]
	  TxData[6] = crc&0xFF;   // CRC LOW
 80011d2:	89fb      	ldrh	r3, [r7, #14]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 80011d8:	719a      	strb	r2, [r3, #6]
	  TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 80011da:	89fb      	ldrh	r3, [r7, #14]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	b29b      	uxth	r3, r3
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 80011e4:	71da      	strb	r2, [r3, #7]

	  sendData(TxData);
 80011e6:	4805      	ldr	r0, [pc, #20]	@ (80011fc <motor_enable_velocity_mode+0xb4>)
 80011e8:	f7ff ff8e 	bl	8001108 <sendData>
	  HAL_Delay(10);
 80011ec:	200a      	movs	r0, #10
 80011ee:	f001 fb55 	bl	800289c <HAL_Delay>
}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	240003d8 	.word	0x240003d8

08001200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	b092      	sub	sp, #72	@ 0x48
 8001204:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001206:	f001 fab7 	bl	8002778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800120a:	f000 f93b 	bl	8001484 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800120e:	f000 f9ab 	bl	8001568 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001212:	f000 fd1b 	bl	8001c4c <MX_GPIO_Init>
  MX_DMA_Init();
 8001216:	f000 fcf1 	bl	8001bfc <MX_DMA_Init>
  MX_ADC1_Init();
 800121a:	f000 f9d9 	bl	80015d0 <MX_ADC1_Init>
  MX_ADC3_Init();
 800121e:	f000 fae5 	bl	80017ec <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8001222:	f000 fc9f 	bl	8001b64 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001226:	f000 fc39 	bl	8001a9c <MX_TIM2_Init>
  MX_SPI1_Init();
 800122a:	f000 fbe1 	bl	80019f0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */



  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 32);
 800122e:	2220      	movs	r2, #32
 8001230:	497a      	ldr	r1, [pc, #488]	@ (800141c <main+0x21c>)
 8001232:	487b      	ldr	r0, [pc, #492]	@ (8001420 <main+0x220>)
 8001234:	f00e fab9 	bl	800f7aa <HAL_UARTEx_ReceiveToIdle_IT>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) line_sensor_front_values_dma, line_sensor_front_channel_number);
 8001238:	230a      	movs	r3, #10
 800123a:	461a      	mov	r2, r3
 800123c:	4979      	ldr	r1, [pc, #484]	@ (8001424 <main+0x224>)
 800123e:	487a      	ldr	r0, [pc, #488]	@ (8001428 <main+0x228>)
 8001240:	f002 f85a 	bl	80032f8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*) line_sensor_back_values_dma, line_sensor_back_channel_number);
 8001244:	230a      	movs	r3, #10
 8001246:	461a      	mov	r2, r3
 8001248:	4978      	ldr	r1, [pc, #480]	@ (800142c <main+0x22c>)
 800124a:	4879      	ldr	r0, [pc, #484]	@ (8001430 <main+0x230>)
 800124c:	f002 f854 	bl	80032f8 <HAL_ADC_Start_DMA>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001250:	2100      	movs	r1, #0
 8001252:	4878      	ldr	r0, [pc, #480]	@ (8001434 <main+0x234>)
 8001254:	f00a ff9a 	bl	800c18c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001258:	2104      	movs	r1, #4
 800125a:	4876      	ldr	r0, [pc, #472]	@ (8001434 <main+0x234>)
 800125c:	f00a ff96 	bl	800c18c <HAL_TIM_PWM_Start>

  motor_enable_velocity_mode(0x01);
 8001260:	2001      	movs	r0, #1
 8001262:	f7ff ff71 	bl	8001148 <motor_enable_velocity_mode>
  HAL_Delay(10);
 8001266:	200a      	movs	r0, #10
 8001268:	f001 fb18 	bl	800289c <HAL_Delay>
  motor_enable_velocity_mode(0x02);
 800126c:	2002      	movs	r0, #2
 800126e:	f7ff ff6b 	bl	8001148 <motor_enable_velocity_mode>
  HAL_Delay(10);
 8001272:	200a      	movs	r0, #10
 8001274:	f001 fb12 	bl	800289c <HAL_Delay>


  Line_Sensor_Calculation(line_sensor_front_values_dma,
 8001278:	4b6f      	ldr	r3, [pc, #444]	@ (8001438 <main+0x238>)
 800127a:	9304      	str	r3, [sp, #16]
 800127c:	230a      	movs	r3, #10
 800127e:	9303      	str	r3, [sp, #12]
 8001280:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8001284:	9302      	str	r3, [sp, #8]
 8001286:	4b6d      	ldr	r3, [pc, #436]	@ (800143c <main+0x23c>)
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	4b6d      	ldr	r3, [pc, #436]	@ (8001440 <main+0x240>)
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	4b6d      	ldr	r3, [pc, #436]	@ (8001444 <main+0x244>)
 8001290:	4a6d      	ldr	r2, [pc, #436]	@ (8001448 <main+0x248>)
 8001292:	496e      	ldr	r1, [pc, #440]	@ (800144c <main+0x24c>)
 8001294:	4863      	ldr	r0, [pc, #396]	@ (8001424 <main+0x224>)
 8001296:	f7ff fdd5 	bl	8000e44 <Line_Sensor_Calculation>
						 &line_sensor_front_on_line_total_number,
						  line_sensor_front_trigger_threshhold,
						  line_sensor_front_total_channel,
						 &line_sensor_front_read_line_value);

  Line_Sensor_Calculation(line_sensor_back_values_dma,
 800129a:	4b6d      	ldr	r3, [pc, #436]	@ (8001450 <main+0x250>)
 800129c:	9304      	str	r3, [sp, #16]
 800129e:	230a      	movs	r3, #10
 80012a0:	9303      	str	r3, [sp, #12]
 80012a2:	f44f 7316 	mov.w	r3, #600	@ 0x258
 80012a6:	9302      	str	r3, [sp, #8]
 80012a8:	4b6a      	ldr	r3, [pc, #424]	@ (8001454 <main+0x254>)
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001458 <main+0x258>)
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	4b6a      	ldr	r3, [pc, #424]	@ (800145c <main+0x25c>)
 80012b2:	4a6b      	ldr	r2, [pc, #428]	@ (8001460 <main+0x260>)
 80012b4:	496b      	ldr	r1, [pc, #428]	@ (8001464 <main+0x264>)
 80012b6:	485d      	ldr	r0, [pc, #372]	@ (800142c <main+0x22c>)
 80012b8:	f7ff fdc4 	bl	8000e44 <Line_Sensor_Calculation>
						 &line_sensor_back_on_line_total_number,
						  line_sensor_back_trigger_threshhold,
						  line_sensor_back_total_channel,
						 &line_sensor_back_read_line_value);

  if((line_sensor_back_on_line_total_number >= 9) &&(line_sensor_front_on_line_total_number >= 1)){
 80012bc:	4b65      	ldr	r3, [pc, #404]	@ (8001454 <main+0x254>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d908      	bls.n	80012d8 <main+0xd8>
 80012c6:	4b5d      	ldr	r3, [pc, #372]	@ (800143c <main+0x23c>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <main+0xd8>
	  agv_orientation = 0xF00F;
 80012d0:	4b65      	ldr	r3, [pc, #404]	@ (8001468 <main+0x268>)
 80012d2:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 80012d6:	801a      	strh	r2, [r3, #0]
  }
  if((line_sensor_front_on_line_total_number >= 9) && (line_sensor_back_on_line_total_number >= 1)){
 80012d8:	4b58      	ldr	r3, [pc, #352]	@ (800143c <main+0x23c>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d908      	bls.n	80012f4 <main+0xf4>
 80012e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001454 <main+0x254>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <main+0xf4>
	  agv_orientation = 0xF11F;
 80012ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001468 <main+0x268>)
 80012ee:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 80012f2:	801a      	strh	r2, [r3, #0]
  }

  myLoRa = newLoRa();
 80012f4:	4c5d      	ldr	r4, [pc, #372]	@ (800146c <main+0x26c>)
 80012f6:	463b      	mov	r3, r7
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f97f 	bl	80005fc <newLoRa>
 80012fe:	4625      	mov	r5, r4
 8001300:	463c      	mov	r4, r7
 8001302:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001304:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800130a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800130e:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = LORA_NSS_GPIO_Port;
 8001312:	4b56      	ldr	r3, [pc, #344]	@ (800146c <main+0x26c>)
 8001314:	4a56      	ldr	r2, [pc, #344]	@ (8001470 <main+0x270>)
 8001316:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = LORA_NSS_Pin;
 8001318:	4b54      	ldr	r3, [pc, #336]	@ (800146c <main+0x26c>)
 800131a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800131e:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = LORA_RST_GPIO_Port;
 8001320:	4b52      	ldr	r3, [pc, #328]	@ (800146c <main+0x26c>)
 8001322:	4a53      	ldr	r2, [pc, #332]	@ (8001470 <main+0x270>)
 8001324:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = LORA_RST_Pin;
 8001326:	4b51      	ldr	r3, [pc, #324]	@ (800146c <main+0x26c>)
 8001328:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800132c:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = LORA_DIO0_GPIO_Port;
 800132e:	4b4f      	ldr	r3, [pc, #316]	@ (800146c <main+0x26c>)
 8001330:	4a4f      	ldr	r2, [pc, #316]	@ (8001470 <main+0x270>)
 8001332:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = LORA_DIO0_Pin;
 8001334:	4b4d      	ldr	r3, [pc, #308]	@ (800146c <main+0x26c>)
 8001336:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800133a:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 800133c:	4b4b      	ldr	r3, [pc, #300]	@ (800146c <main+0x26c>)
 800133e:	4a4d      	ldr	r2, [pc, #308]	@ (8001474 <main+0x274>)
 8001340:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 433;             // default = 433 MHz
 8001342:	4b4a      	ldr	r3, [pc, #296]	@ (800146c <main+0x26c>)
 8001344:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8001348:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 800134a:	4b48      	ldr	r3, [pc, #288]	@ (800146c <main+0x26c>)
 800134c:	2207      	movs	r2, #7
 800134e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  myLoRa.bandWidth             = BW_125KHz;       // default = BW_125KHz
 8001352:	4b46      	ldr	r3, [pc, #280]	@ (800146c <main+0x26c>)
 8001354:	2207      	movs	r2, #7
 8001356:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 800135a:	4b44      	ldr	r3, [pc, #272]	@ (800146c <main+0x26c>)
 800135c:	2201      	movs	r2, #1
 800135e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 8001362:	4b42      	ldr	r3, [pc, #264]	@ (800146c <main+0x26c>)
 8001364:	22ff      	movs	r2, #255	@ 0xff
 8001366:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  myLoRa.overCurrentProtection = 100;             // default = 100 mA
 800136a:	4b40      	ldr	r3, [pc, #256]	@ (800146c <main+0x26c>)
 800136c:	2264      	movs	r2, #100	@ 0x64
 800136e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  myLoRa.preamble              = 8;              // default = 8;
 8001372:	4b3e      	ldr	r3, [pc, #248]	@ (800146c <main+0x26c>)
 8001374:	2208      	movs	r2, #8
 8001376:	851a      	strh	r2, [r3, #40]	@ 0x28

  if(LoRa_init(&myLoRa) == LORA_OK){
 8001378:	483c      	ldr	r0, [pc, #240]	@ (800146c <main+0x26c>)
 800137a:	f7ff fcbb 	bl	8000cf4 <LoRa_init>
 800137e:	4603      	mov	r3, r0
 8001380:	2bc8      	cmp	r3, #200	@ 0xc8
 8001382:	d102      	bne.n	800138a <main+0x18a>
	  LoRa_stat = 1;
 8001384:	4b3c      	ldr	r3, [pc, #240]	@ (8001478 <main+0x278>)
 8001386:	2201      	movs	r2, #1
 8001388:	801a      	strh	r2, [r3, #0]
  }

  LoRa_startReceiving(&myLoRa);
 800138a:	4838      	ldr	r0, [pc, #224]	@ (800146c <main+0x26c>)
 800138c:	f7ff fc46 	bl	8000c1c <LoRa_startReceiving>

  LoraTxBuffer[0] = 0xAA;
 8001390:	4b3a      	ldr	r3, [pc, #232]	@ (800147c <main+0x27c>)
 8001392:	22aa      	movs	r2, #170	@ 0xaa
 8001394:	701a      	strb	r2, [r3, #0]
  LoraTxBuffer[1] = 0xBB;
 8001396:	4b39      	ldr	r3, [pc, #228]	@ (800147c <main+0x27c>)
 8001398:	22bb      	movs	r2, #187	@ 0xbb
 800139a:	705a      	strb	r2, [r3, #1]
  LoraTxBuffer[2] = 0xCC;
 800139c:	4b37      	ldr	r3, [pc, #220]	@ (800147c <main+0x27c>)
 800139e:	22cc      	movs	r2, #204	@ 0xcc
 80013a0:	709a      	strb	r2, [r3, #2]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  agv_orientation = 0xF00F;
 80013a2:	4b31      	ldr	r3, [pc, #196]	@ (8001468 <main+0x268>)
 80013a4:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 80013a8:	801a      	strh	r2, [r3, #0]

	  if(lora_receive_toggle == 255){
 80013aa:	4b35      	ldr	r3, [pc, #212]	@ (8001480 <main+0x280>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2bff      	cmp	r3, #255	@ 0xff
 80013b0:	d111      	bne.n	80013d6 <main+0x1d6>

		  if(LoRa_transmit(&myLoRa, LoraTxBuffer, 3, 500) == 1){
 80013b2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80013b6:	2203      	movs	r2, #3
 80013b8:	4930      	ldr	r1, [pc, #192]	@ (800147c <main+0x27c>)
 80013ba:	482c      	ldr	r0, [pc, #176]	@ (800146c <main+0x26c>)
 80013bc:	f7ff fbd6 	bl	8000b6c <LoRa_transmit>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d104      	bne.n	80013d0 <main+0x1d0>
			  //lora_receive_toggle = 0;
			  HAL_GPIO_TogglePin(LORA_TX_LED_GPIO_Port, LORA_TX_LED_Pin);
 80013c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013ca:	4829      	ldr	r0, [pc, #164]	@ (8001470 <main+0x270>)
 80013cc:	f006 fc51 	bl	8007c72 <HAL_GPIO_TogglePin>
		  }
		  lora_receive_toggle = 0;
 80013d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001480 <main+0x280>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
	  }



	  Line_Sensor_Calculation(line_sensor_front_values_dma,
 80013d6:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <main+0x238>)
 80013d8:	9304      	str	r3, [sp, #16]
 80013da:	230a      	movs	r3, #10
 80013dc:	9303      	str	r3, [sp, #12]
 80013de:	f44f 7316 	mov.w	r3, #600	@ 0x258
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	4b15      	ldr	r3, [pc, #84]	@ (800143c <main+0x23c>)
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <main+0x240>)
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <main+0x244>)
 80013ee:	4a16      	ldr	r2, [pc, #88]	@ (8001448 <main+0x248>)
 80013f0:	4916      	ldr	r1, [pc, #88]	@ (800144c <main+0x24c>)
 80013f2:	480c      	ldr	r0, [pc, #48]	@ (8001424 <main+0x224>)
 80013f4:	f7ff fd26 	bl	8000e44 <Line_Sensor_Calculation>
							 &line_sensor_front_on_line_total_number,
							  line_sensor_front_trigger_threshhold,
							  line_sensor_front_total_channel,
							 &line_sensor_front_read_line_value);

	  Line_Sensor_Calculation(line_sensor_back_values_dma,
 80013f8:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <main+0x250>)
 80013fa:	9304      	str	r3, [sp, #16]
 80013fc:	230a      	movs	r3, #10
 80013fe:	9303      	str	r3, [sp, #12]
 8001400:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8001404:	9302      	str	r3, [sp, #8]
 8001406:	4b13      	ldr	r3, [pc, #76]	@ (8001454 <main+0x254>)
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	4b13      	ldr	r3, [pc, #76]	@ (8001458 <main+0x258>)
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	4b13      	ldr	r3, [pc, #76]	@ (800145c <main+0x25c>)
 8001410:	4a13      	ldr	r2, [pc, #76]	@ (8001460 <main+0x260>)
 8001412:	4914      	ldr	r1, [pc, #80]	@ (8001464 <main+0x264>)
 8001414:	4805      	ldr	r0, [pc, #20]	@ (800142c <main+0x22c>)
 8001416:	f7ff fd15 	bl	8000e44 <Line_Sensor_Calculation>
	  agv_orientation = 0xF00F;
 800141a:	e7c2      	b.n	80013a2 <main+0x1a2>
 800141c:	240003b8 	.word	0x240003b8
 8001420:	24000324 	.word	0x24000324
 8001424:	240003f8 	.word	0x240003f8
 8001428:	24000080 	.word	0x24000080
 800142c:	2400040c 	.word	0x2400040c
 8001430:	240000f0 	.word	0x240000f0
 8001434:	240002d8 	.word	0x240002d8
 8001438:	2400044c 	.word	0x2400044c
 800143c:	24000449 	.word	0x24000449
 8001440:	24000448 	.word	0x24000448
 8001444:	24000014 	.word	0x24000014
 8001448:	24000000 	.word	0x24000000
 800144c:	24000420 	.word	0x24000420
 8001450:	2400044e 	.word	0x2400044e
 8001454:	2400044b 	.word	0x2400044b
 8001458:	2400044a 	.word	0x2400044a
 800145c:	2400003c 	.word	0x2400003c
 8001460:	24000028 	.word	0x24000028
 8001464:	24000434 	.word	0x24000434
 8001468:	24000050 	.word	0x24000050
 800146c:	24000454 	.word	0x24000454
 8001470:	58021800 	.word	0x58021800
 8001474:	24000250 	.word	0x24000250
 8001478:	24000480 	.word	0x24000480
 800147c:	24000484 	.word	0x24000484
 8001480:	24000584 	.word	0x24000584

08001484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b09c      	sub	sp, #112	@ 0x70
 8001488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800148e:	224c      	movs	r2, #76	@ 0x4c
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f00e fa28 	bl	800f8e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	2220      	movs	r2, #32
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f00e fa22 	bl	800f8e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014a4:	2002      	movs	r0, #2
 80014a6:	f006 fc19 	bl	8007cdc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80014aa:	2300      	movs	r3, #0
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001564 <SystemClock_Config+0xe0>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	4a2c      	ldr	r2, [pc, #176]	@ (8001564 <SystemClock_Config+0xe0>)
 80014b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014b8:	6193      	str	r3, [r2, #24]
 80014ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001564 <SystemClock_Config+0xe0>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014c6:	bf00      	nop
 80014c8:	4b26      	ldr	r3, [pc, #152]	@ (8001564 <SystemClock_Config+0xe0>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014d4:	d1f8      	bne.n	80014c8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80014d6:	2303      	movs	r3, #3
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80014e0:	2301      	movs	r3, #1
 80014e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80014e4:	2340      	movs	r3, #64	@ 0x40
 80014e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e8:	2302      	movs	r3, #2
 80014ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ec:	2302      	movs	r3, #2
 80014ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80014f0:	2302      	movs	r3, #2
 80014f2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80014f4:	232c      	movs	r3, #44	@ 0x2c
 80014f6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80014f8:	2301      	movs	r3, #1
 80014fa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80014fc:	2303      	movs	r3, #3
 80014fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001500:	2302      	movs	r3, #2
 8001502:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001504:	230c      	movs	r3, #12
 8001506:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001508:	2300      	movs	r3, #0
 800150a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001510:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001514:	4618      	mov	r0, r3
 8001516:	f006 fc1b 	bl	8007d50 <HAL_RCC_OscConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001520:	f000 fcec 	bl	8001efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001524:	233f      	movs	r3, #63	@ 0x3f
 8001526:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001528:	2303      	movs	r3, #3
 800152a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001530:	2308      	movs	r3, #8
 8001532:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001534:	2340      	movs	r3, #64	@ 0x40
 8001536:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001538:	2340      	movs	r3, #64	@ 0x40
 800153a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800153c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001540:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001542:	2340      	movs	r3, #64	@ 0x40
 8001544:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2103      	movs	r1, #3
 800154a:	4618      	mov	r0, r3
 800154c:	f006 ffda 	bl	8008504 <HAL_RCC_ClockConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001556:	f000 fcd1 	bl	8001efc <Error_Handler>
  }
}
 800155a:	bf00      	nop
 800155c:	3770      	adds	r7, #112	@ 0x70
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	58024800 	.word	0x58024800

08001568 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b0ae      	sub	sp, #184	@ 0xb8
 800156c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800156e:	463b      	mov	r3, r7
 8001570:	22b8      	movs	r2, #184	@ 0xb8
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f00e f9b7 	bl	800f8e8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CKPER;
 800157a:	4a14      	ldr	r2, [pc, #80]	@ (80015cc <PeriphCommonClock_Config+0x64>)
 800157c:	f04f 0300 	mov.w	r3, #0
 8001580:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001584:	2302      	movs	r3, #2
 8001586:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 8001588:	230f      	movs	r3, #15
 800158a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800158c:	2302      	movs	r3, #2
 800158e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001590:	2302      	movs	r3, #2
 8001592:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001594:	2302      	movs	r3, #2
 8001596:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001598:	23c0      	movs	r3, #192	@ 0xc0
 800159a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800159c:	2300      	movs	r3, #0
 800159e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 80015a0:	f640 3386 	movw	r3, #2950	@ 0xb86
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80015a6:	2300      	movs	r3, #0
 80015a8:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b0:	463b      	mov	r3, r7
 80015b2:	4618      	mov	r0, r3
 80015b4:	f007 fb32 	bl	8008c1c <HAL_RCCEx_PeriphCLKConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80015be:	f000 fc9d 	bl	8001efc <Error_Handler>
  }
}
 80015c2:	bf00      	nop
 80015c4:	37b8      	adds	r7, #184	@ 0xb8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	80080000 	.word	0x80080000

080015d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	@ 0x30
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80015d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015e2:	463b      	mov	r3, r7
 80015e4:	2224      	movs	r2, #36	@ 0x24
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f00e f97d 	bl	800f8e8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015ee:	4b73      	ldr	r3, [pc, #460]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 80015f0:	4a73      	ldr	r2, [pc, #460]	@ (80017c0 <MX_ADC1_Init+0x1f0>)
 80015f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015f4:	4b71      	ldr	r3, [pc, #452]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015fa:	4b70      	ldr	r3, [pc, #448]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 80015fc:	2208      	movs	r2, #8
 80015fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001600:	4b6e      	ldr	r3, [pc, #440]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 8001602:	2201      	movs	r2, #1
 8001604:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001606:	4b6d      	ldr	r3, [pc, #436]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 8001608:	2204      	movs	r2, #4
 800160a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800160c:	4b6b      	ldr	r3, [pc, #428]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 800160e:	2200      	movs	r2, #0
 8001610:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001612:	4b6a      	ldr	r3, [pc, #424]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 8001614:	2201      	movs	r2, #1
 8001616:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 8001618:	4b68      	ldr	r3, [pc, #416]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 800161a:	220a      	movs	r2, #10
 800161c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800161e:	4b67      	ldr	r3, [pc, #412]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001626:	4b65      	ldr	r3, [pc, #404]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 8001628:	2200      	movs	r2, #0
 800162a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800162c:	4b63      	ldr	r3, [pc, #396]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 800162e:	2200      	movs	r2, #0
 8001630:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001632:	4b62      	ldr	r3, [pc, #392]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 8001634:	2203      	movs	r2, #3
 8001636:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001638:	4b60      	ldr	r3, [pc, #384]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 800163a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800163e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001640:	4b5e      	ldr	r3, [pc, #376]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 8001642:	2200      	movs	r2, #0
 8001644:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001646:	4b5d      	ldr	r3, [pc, #372]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800164e:	485b      	ldr	r0, [pc, #364]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 8001650:	f001 fc4a 	bl	8002ee8 <HAL_ADC_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800165a:	f000 fc4f 	bl	8001efc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001662:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001666:	4619      	mov	r1, r3
 8001668:	4854      	ldr	r0, [pc, #336]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 800166a:	f003 f917 	bl	800489c <HAL_ADCEx_MultiModeConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001674:	f000 fc42 	bl	8001efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001678:	4b52      	ldr	r3, [pc, #328]	@ (80017c4 <MX_ADC1_Init+0x1f4>)
 800167a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800167c:	2306      	movs	r3, #6
 800167e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8001680:	2305      	movs	r3, #5
 8001682:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001684:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001688:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800168a:	2304      	movs	r3, #4
 800168c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001698:	463b      	mov	r3, r7
 800169a:	4619      	mov	r1, r3
 800169c:	4847      	ldr	r0, [pc, #284]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 800169e:	f002 f969 	bl	8003974 <HAL_ADC_ConfigChannel>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80016a8:	f000 fc28 	bl	8001efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80016ac:	4b46      	ldr	r3, [pc, #280]	@ (80017c8 <MX_ADC1_Init+0x1f8>)
 80016ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80016b0:	230c      	movs	r3, #12
 80016b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b4:	463b      	mov	r3, r7
 80016b6:	4619      	mov	r1, r3
 80016b8:	4840      	ldr	r0, [pc, #256]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 80016ba:	f002 f95b 	bl	8003974 <HAL_ADC_ConfigChannel>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80016c4:	f000 fc1a 	bl	8001efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80016c8:	4b40      	ldr	r3, [pc, #256]	@ (80017cc <MX_ADC1_Init+0x1fc>)
 80016ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80016cc:	2312      	movs	r3, #18
 80016ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d0:	463b      	mov	r3, r7
 80016d2:	4619      	mov	r1, r3
 80016d4:	4839      	ldr	r0, [pc, #228]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 80016d6:	f002 f94d 	bl	8003974 <HAL_ADC_ConfigChannel>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80016e0:	f000 fc0c 	bl	8001efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80016e4:	4b3a      	ldr	r3, [pc, #232]	@ (80017d0 <MX_ADC1_Init+0x200>)
 80016e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80016e8:	2318      	movs	r3, #24
 80016ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ec:	463b      	mov	r3, r7
 80016ee:	4619      	mov	r1, r3
 80016f0:	4832      	ldr	r0, [pc, #200]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 80016f2:	f002 f93f 	bl	8003974 <HAL_ADC_ConfigChannel>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_ADC1_Init+0x130>
  {
    Error_Handler();
 80016fc:	f000 fbfe 	bl	8001efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001700:	4b34      	ldr	r3, [pc, #208]	@ (80017d4 <MX_ADC1_Init+0x204>)
 8001702:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001704:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001708:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800170a:	463b      	mov	r3, r7
 800170c:	4619      	mov	r1, r3
 800170e:	482b      	ldr	r0, [pc, #172]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 8001710:	f002 f930 	bl	8003974 <HAL_ADC_ConfigChannel>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 800171a:	f000 fbef 	bl	8001efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800171e:	4b2e      	ldr	r3, [pc, #184]	@ (80017d8 <MX_ADC1_Init+0x208>)
 8001720:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001722:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8001726:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001728:	463b      	mov	r3, r7
 800172a:	4619      	mov	r1, r3
 800172c:	4823      	ldr	r0, [pc, #140]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 800172e:	f002 f921 	bl	8003974 <HAL_ADC_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_ADC1_Init+0x16c>
  {
    Error_Handler();
 8001738:	f000 fbe0 	bl	8001efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800173c:	4b27      	ldr	r3, [pc, #156]	@ (80017dc <MX_ADC1_Init+0x20c>)
 800173e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001740:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8001744:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001746:	463b      	mov	r3, r7
 8001748:	4619      	mov	r1, r3
 800174a:	481c      	ldr	r0, [pc, #112]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 800174c:	f002 f912 	bl	8003974 <HAL_ADC_ConfigChannel>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 8001756:	f000 fbd1 	bl	8001efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800175a:	4b21      	ldr	r3, [pc, #132]	@ (80017e0 <MX_ADC1_Init+0x210>)
 800175c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800175e:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8001762:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001764:	463b      	mov	r3, r7
 8001766:	4619      	mov	r1, r3
 8001768:	4814      	ldr	r0, [pc, #80]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 800176a:	f002 f903 	bl	8003974 <HAL_ADC_ConfigChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001774:	f000 fbc2 	bl	8001efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001778:	4b1a      	ldr	r3, [pc, #104]	@ (80017e4 <MX_ADC1_Init+0x214>)
 800177a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800177c:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001780:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001782:	463b      	mov	r3, r7
 8001784:	4619      	mov	r1, r3
 8001786:	480d      	ldr	r0, [pc, #52]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 8001788:	f002 f8f4 	bl	8003974 <HAL_ADC_ConfigChannel>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
 8001792:	f000 fbb3 	bl	8001efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001796:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <MX_ADC1_Init+0x218>)
 8001798:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800179a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800179e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017a0:	463b      	mov	r3, r7
 80017a2:	4619      	mov	r1, r3
 80017a4:	4805      	ldr	r0, [pc, #20]	@ (80017bc <MX_ADC1_Init+0x1ec>)
 80017a6:	f002 f8e5 	bl	8003974 <HAL_ADC_ConfigChannel>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_ADC1_Init+0x1e4>
  {
    Error_Handler();
 80017b0:	f000 fba4 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	3730      	adds	r7, #48	@ 0x30
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	24000080 	.word	0x24000080
 80017c0:	40022000 	.word	0x40022000
 80017c4:	08600004 	.word	0x08600004
 80017c8:	0c900008 	.word	0x0c900008
 80017cc:	10c00010 	.word	0x10c00010
 80017d0:	14f00020 	.word	0x14f00020
 80017d4:	19200040 	.word	0x19200040
 80017d8:	1d500080 	.word	0x1d500080
 80017dc:	21800100 	.word	0x21800100
 80017e0:	25b00200 	.word	0x25b00200
 80017e4:	2a000400 	.word	0x2a000400
 80017e8:	2e300800 	.word	0x2e300800

080017ec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	@ 0x28
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2224      	movs	r2, #36	@ 0x24
 80017f6:	2100      	movs	r1, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f00e f875 	bl	800f8e8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80017fe:	4b71      	ldr	r3, [pc, #452]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 8001800:	4a71      	ldr	r2, [pc, #452]	@ (80019c8 <MX_ADC3_Init+0x1dc>)
 8001802:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001804:	4b6f      	ldr	r3, [pc, #444]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 8001806:	2200      	movs	r2, #0
 8001808:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800180a:	4b6e      	ldr	r3, [pc, #440]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 800180c:	2208      	movs	r2, #8
 800180e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001810:	4b6c      	ldr	r3, [pc, #432]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001816:	4b6b      	ldr	r3, [pc, #428]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 8001818:	2201      	movs	r2, #1
 800181a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800181c:	4b69      	ldr	r3, [pc, #420]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 800181e:	2204      	movs	r2, #4
 8001820:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001822:	4b68      	ldr	r3, [pc, #416]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 8001824:	2200      	movs	r2, #0
 8001826:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001828:	4b66      	ldr	r3, [pc, #408]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 800182a:	2201      	movs	r2, #1
 800182c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 10;
 800182e:	4b65      	ldr	r3, [pc, #404]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 8001830:	220a      	movs	r2, #10
 8001832:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001834:	4b63      	ldr	r3, [pc, #396]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800183c:	4b61      	ldr	r3, [pc, #388]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 800183e:	2200      	movs	r2, #0
 8001840:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001842:	4b60      	ldr	r3, [pc, #384]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 8001844:	2200      	movs	r2, #0
 8001846:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001848:	4b5e      	ldr	r3, [pc, #376]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001850:	4b5c      	ldr	r3, [pc, #368]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 8001852:	2200      	movs	r2, #0
 8001854:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001856:	4b5b      	ldr	r3, [pc, #364]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 8001858:	2203      	movs	r2, #3
 800185a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800185c:	4b59      	ldr	r3, [pc, #356]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 800185e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001862:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001864:	4b57      	ldr	r3, [pc, #348]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 8001866:	2200      	movs	r2, #0
 8001868:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 800186a:	4b56      	ldr	r3, [pc, #344]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001872:	4854      	ldr	r0, [pc, #336]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 8001874:	f001 fb38 	bl	8002ee8 <HAL_ADC_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800187e:	f000 fb3d 	bl	8001efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001882:	2301      	movs	r3, #1
 8001884:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001886:	2306      	movs	r3, #6
 8001888:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_92CYCLES_5;
 800188a:	2305      	movs	r3, #5
 800188c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800188e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001892:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001894:	2304      	movs	r3, #4
 8001896:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	4619      	mov	r1, r3
 80018a4:	4847      	ldr	r0, [pc, #284]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 80018a6:	f002 f865 	bl	8003974 <HAL_ADC_ConfigChannel>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 80018b0:	f000 fb24 	bl	8001efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018b4:	4b45      	ldr	r3, [pc, #276]	@ (80019cc <MX_ADC3_Init+0x1e0>)
 80018b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80018b8:	230c      	movs	r3, #12
 80018ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	4619      	mov	r1, r3
 80018c0:	4840      	ldr	r0, [pc, #256]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 80018c2:	f002 f857 	bl	8003974 <HAL_ADC_ConfigChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 80018cc:	f000 fb16 	bl	8001efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80018d0:	4b3f      	ldr	r3, [pc, #252]	@ (80019d0 <MX_ADC3_Init+0x1e4>)
 80018d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80018d4:	2312      	movs	r3, #18
 80018d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	4619      	mov	r1, r3
 80018dc:	4839      	ldr	r0, [pc, #228]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 80018de:	f002 f849 	bl	8003974 <HAL_ADC_ConfigChannel>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 80018e8:	f000 fb08 	bl	8001efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80018ec:	4b39      	ldr	r3, [pc, #228]	@ (80019d4 <MX_ADC3_Init+0x1e8>)
 80018ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80018f0:	2318      	movs	r3, #24
 80018f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	4619      	mov	r1, r3
 80018f8:	4832      	ldr	r0, [pc, #200]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 80018fa:	f002 f83b 	bl	8003974 <HAL_ADC_ConfigChannel>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 8001904:	f000 fafa 	bl	8001efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001908:	4b33      	ldr	r3, [pc, #204]	@ (80019d8 <MX_ADC3_Init+0x1ec>)
 800190a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800190c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001910:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	4619      	mov	r1, r3
 8001916:	482b      	ldr	r0, [pc, #172]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 8001918:	f002 f82c 	bl	8003974 <HAL_ADC_ConfigChannel>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_ADC3_Init+0x13a>
  {
    Error_Handler();
 8001922:	f000 faeb 	bl	8001efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001926:	4b2d      	ldr	r3, [pc, #180]	@ (80019dc <MX_ADC3_Init+0x1f0>)
 8001928:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800192a:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800192e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	4619      	mov	r1, r3
 8001934:	4823      	ldr	r0, [pc, #140]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 8001936:	f002 f81d 	bl	8003974 <HAL_ADC_ConfigChannel>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_ADC3_Init+0x158>
  {
    Error_Handler();
 8001940:	f000 fadc 	bl	8001efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001944:	4b26      	ldr	r3, [pc, #152]	@ (80019e0 <MX_ADC3_Init+0x1f4>)
 8001946:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001948:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 800194c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	4619      	mov	r1, r3
 8001952:	481c      	ldr	r0, [pc, #112]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 8001954:	f002 f80e 	bl	8003974 <HAL_ADC_ConfigChannel>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_ADC3_Init+0x176>
  {
    Error_Handler();
 800195e:	f000 facd 	bl	8001efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001962:	4b20      	ldr	r3, [pc, #128]	@ (80019e4 <MX_ADC3_Init+0x1f8>)
 8001964:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001966:	f44f 7389 	mov.w	r3, #274	@ 0x112
 800196a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	4619      	mov	r1, r3
 8001970:	4814      	ldr	r0, [pc, #80]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 8001972:	f001 ffff 	bl	8003974 <HAL_ADC_ConfigChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_ADC3_Init+0x194>
  {
    Error_Handler();
 800197c:	f000 fabe 	bl	8001efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001980:	4b19      	ldr	r3, [pc, #100]	@ (80019e8 <MX_ADC3_Init+0x1fc>)
 8001982:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001984:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001988:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	4619      	mov	r1, r3
 800198e:	480d      	ldr	r0, [pc, #52]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 8001990:	f001 fff0 	bl	8003974 <HAL_ADC_ConfigChannel>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_ADC3_Init+0x1b2>
  {
    Error_Handler();
 800199a:	f000 faaf 	bl	8001efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800199e:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <MX_ADC3_Init+0x200>)
 80019a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80019a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	4619      	mov	r1, r3
 80019ac:	4805      	ldr	r0, [pc, #20]	@ (80019c4 <MX_ADC3_Init+0x1d8>)
 80019ae:	f001 ffe1 	bl	8003974 <HAL_ADC_ConfigChannel>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_ADC3_Init+0x1d0>
  {
    Error_Handler();
 80019b8:	f000 faa0 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	3728      	adds	r7, #40	@ 0x28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	240000f0 	.word	0x240000f0
 80019c8:	58026000 	.word	0x58026000
 80019cc:	04300002 	.word	0x04300002
 80019d0:	08600004 	.word	0x08600004
 80019d4:	0c900008 	.word	0x0c900008
 80019d8:	10c00010 	.word	0x10c00010
 80019dc:	14f00020 	.word	0x14f00020
 80019e0:	19200040 	.word	0x19200040
 80019e4:	1d500080 	.word	0x1d500080
 80019e8:	21800100 	.word	0x21800100
 80019ec:	25b00200 	.word	0x25b00200

080019f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019f4:	4b27      	ldr	r3, [pc, #156]	@ (8001a94 <MX_SPI1_Init+0xa4>)
 80019f6:	4a28      	ldr	r2, [pc, #160]	@ (8001a98 <MX_SPI1_Init+0xa8>)
 80019f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019fa:	4b26      	ldr	r3, [pc, #152]	@ (8001a94 <MX_SPI1_Init+0xa4>)
 80019fc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001a00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a02:	4b24      	ldr	r3, [pc, #144]	@ (8001a94 <MX_SPI1_Init+0xa4>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a08:	4b22      	ldr	r3, [pc, #136]	@ (8001a94 <MX_SPI1_Init+0xa4>)
 8001a0a:	2207      	movs	r2, #7
 8001a0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a0e:	4b21      	ldr	r3, [pc, #132]	@ (8001a94 <MX_SPI1_Init+0xa4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a14:	4b1f      	ldr	r3, [pc, #124]	@ (8001a94 <MX_SPI1_Init+0xa4>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a94 <MX_SPI1_Init+0xa4>)
 8001a1c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a22:	4b1c      	ldr	r3, [pc, #112]	@ (8001a94 <MX_SPI1_Init+0xa4>)
 8001a24:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001a28:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <MX_SPI1_Init+0xa4>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a30:	4b18      	ldr	r3, [pc, #96]	@ (8001a94 <MX_SPI1_Init+0xa4>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a36:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <MX_SPI1_Init+0xa4>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001a3c:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <MX_SPI1_Init+0xa4>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a42:	4b14      	ldr	r3, [pc, #80]	@ (8001a94 <MX_SPI1_Init+0xa4>)
 8001a44:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a48:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a4a:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <MX_SPI1_Init+0xa4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a50:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <MX_SPI1_Init+0xa4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a56:	4b0f      	ldr	r3, [pc, #60]	@ (8001a94 <MX_SPI1_Init+0xa4>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <MX_SPI1_Init+0xa4>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a62:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <MX_SPI1_Init+0xa4>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001a68:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <MX_SPI1_Init+0xa4>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <MX_SPI1_Init+0xa4>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001a74:	4b07      	ldr	r3, [pc, #28]	@ (8001a94 <MX_SPI1_Init+0xa4>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001a7a:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <MX_SPI1_Init+0xa4>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a80:	4804      	ldr	r0, [pc, #16]	@ (8001a94 <MX_SPI1_Init+0xa4>)
 8001a82:	f009 fcb1 	bl	800b3e8 <HAL_SPI_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001a8c:	f000 fa36 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	24000250 	.word	0x24000250
 8001a98:	40013000 	.word	0x40013000

08001a9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	@ 0x28
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aae:	463b      	mov	r3, r7
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
 8001abc:	615a      	str	r2, [r3, #20]
 8001abe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ac0:	4b27      	ldr	r3, [pc, #156]	@ (8001b60 <MX_TIM2_Init+0xc4>)
 8001ac2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ac6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8001ac8:	4b25      	ldr	r3, [pc, #148]	@ (8001b60 <MX_TIM2_Init+0xc4>)
 8001aca:	2240      	movs	r2, #64	@ 0x40
 8001acc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ace:	4b24      	ldr	r3, [pc, #144]	@ (8001b60 <MX_TIM2_Init+0xc4>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001ad4:	4b22      	ldr	r3, [pc, #136]	@ (8001b60 <MX_TIM2_Init+0xc4>)
 8001ad6:	22ff      	movs	r2, #255	@ 0xff
 8001ad8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ada:	4b21      	ldr	r3, [pc, #132]	@ (8001b60 <MX_TIM2_Init+0xc4>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b60 <MX_TIM2_Init+0xc4>)
 8001ae2:	2280      	movs	r2, #128	@ 0x80
 8001ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ae6:	481e      	ldr	r0, [pc, #120]	@ (8001b60 <MX_TIM2_Init+0xc4>)
 8001ae8:	f00a faf9 	bl	800c0de <HAL_TIM_PWM_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001af2:	f000 fa03 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001afe:	f107 031c 	add.w	r3, r7, #28
 8001b02:	4619      	mov	r1, r3
 8001b04:	4816      	ldr	r0, [pc, #88]	@ (8001b60 <MX_TIM2_Init+0xc4>)
 8001b06:	f00b f91f 	bl	800cd48 <HAL_TIMEx_MasterConfigSynchronization>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001b10:	f000 f9f4 	bl	8001efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b14:	2360      	movs	r3, #96	@ 0x60
 8001b16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001b20:	2304      	movs	r3, #4
 8001b22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b24:	463b      	mov	r3, r7
 8001b26:	2200      	movs	r2, #0
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480d      	ldr	r0, [pc, #52]	@ (8001b60 <MX_TIM2_Init+0xc4>)
 8001b2c:	f00a fc4a 	bl	800c3c4 <HAL_TIM_PWM_ConfigChannel>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001b36:	f000 f9e1 	bl	8001efc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4807      	ldr	r0, [pc, #28]	@ (8001b60 <MX_TIM2_Init+0xc4>)
 8001b42:	f00a fc3f 	bl	800c3c4 <HAL_TIM_PWM_ConfigChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b4c:	f000 f9d6 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b50:	4803      	ldr	r0, [pc, #12]	@ (8001b60 <MX_TIM2_Init+0xc4>)
 8001b52:	f000 fc3f 	bl	80023d4 <HAL_TIM_MspPostInit>

}
 8001b56:	bf00      	nop
 8001b58:	3728      	adds	r7, #40	@ 0x28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	240002d8 	.word	0x240002d8

08001b64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b68:	4b22      	ldr	r3, [pc, #136]	@ (8001bf4 <MX_USART1_UART_Init+0x90>)
 8001b6a:	4a23      	ldr	r2, [pc, #140]	@ (8001bf8 <MX_USART1_UART_Init+0x94>)
 8001b6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b6e:	4b21      	ldr	r3, [pc, #132]	@ (8001bf4 <MX_USART1_UART_Init+0x90>)
 8001b70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b76:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf4 <MX_USART1_UART_Init+0x90>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf4 <MX_USART1_UART_Init+0x90>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b82:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf4 <MX_USART1_UART_Init+0x90>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b88:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <MX_USART1_UART_Init+0x90>)
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b8e:	4b19      	ldr	r3, [pc, #100]	@ (8001bf4 <MX_USART1_UART_Init+0x90>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b94:	4b17      	ldr	r3, [pc, #92]	@ (8001bf4 <MX_USART1_UART_Init+0x90>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b9a:	4b16      	ldr	r3, [pc, #88]	@ (8001bf4 <MX_USART1_UART_Init+0x90>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ba0:	4b14      	ldr	r3, [pc, #80]	@ (8001bf4 <MX_USART1_UART_Init+0x90>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ba6:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <MX_USART1_UART_Init+0x90>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bac:	4811      	ldr	r0, [pc, #68]	@ (8001bf4 <MX_USART1_UART_Init+0x90>)
 8001bae:	f00b f967 	bl	800ce80 <HAL_UART_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001bb8:	f000 f9a0 	bl	8001efc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	480d      	ldr	r0, [pc, #52]	@ (8001bf4 <MX_USART1_UART_Init+0x90>)
 8001bc0:	f00d fd77 	bl	800f6b2 <HAL_UARTEx_SetTxFifoThreshold>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bca:	f000 f997 	bl	8001efc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4808      	ldr	r0, [pc, #32]	@ (8001bf4 <MX_USART1_UART_Init+0x90>)
 8001bd2:	f00d fdac 	bl	800f72e <HAL_UARTEx_SetRxFifoThreshold>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001bdc:	f000 f98e 	bl	8001efc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001be0:	4804      	ldr	r0, [pc, #16]	@ (8001bf4 <MX_USART1_UART_Init+0x90>)
 8001be2:	f00d fd2d 	bl	800f640 <HAL_UARTEx_DisableFifoMode>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001bec:	f000 f986 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	24000324 	.word	0x24000324
 8001bf8:	40011000 	.word	0x40011000

08001bfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c02:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <MX_DMA_Init+0x4c>)
 8001c04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001c08:	4a0f      	ldr	r2, [pc, #60]	@ (8001c48 <MX_DMA_Init+0x4c>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001c12:	4b0d      	ldr	r3, [pc, #52]	@ (8001c48 <MX_DMA_Init+0x4c>)
 8001c14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2100      	movs	r1, #0
 8001c24:	200b      	movs	r0, #11
 8001c26:	f002 fff6 	bl	8004c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c2a:	200b      	movs	r0, #11
 8001c2c:	f003 f80d 	bl	8004c4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2100      	movs	r1, #0
 8001c34:	200c      	movs	r0, #12
 8001c36:	f002 ffee 	bl	8004c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c3a:	200c      	movs	r0, #12
 8001c3c:	f003 f805 	bl	8004c4a <HAL_NVIC_EnableIRQ>

}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	58024400 	.word	0x58024400

08001c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08e      	sub	sp, #56	@ 0x38
 8001c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
 8001c60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c62:	4b9f      	ldr	r3, [pc, #636]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c68:	4a9d      	ldr	r2, [pc, #628]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001c6a:	f043 0310 	orr.w	r3, r3, #16
 8001c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c72:	4b9b      	ldr	r3, [pc, #620]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	623b      	str	r3, [r7, #32]
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c80:	4b97      	ldr	r3, [pc, #604]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c86:	4a96      	ldr	r2, [pc, #600]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001c88:	f043 0304 	orr.w	r3, r3, #4
 8001c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c90:	4b93      	ldr	r3, [pc, #588]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	61fb      	str	r3, [r7, #28]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c9e:	4b90      	ldr	r3, [pc, #576]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ca4:	4a8e      	ldr	r2, [pc, #568]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001ca6:	f043 0320 	orr.w	r3, r3, #32
 8001caa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cae:	4b8c      	ldr	r3, [pc, #560]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cb4:	f003 0320 	and.w	r3, r3, #32
 8001cb8:	61bb      	str	r3, [r7, #24]
 8001cba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cbc:	4b88      	ldr	r3, [pc, #544]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cc2:	4a87      	ldr	r2, [pc, #540]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001cc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ccc:	4b84      	ldr	r3, [pc, #528]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	4b81      	ldr	r3, [pc, #516]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ce0:	4a7f      	ldr	r2, [pc, #508]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cea:	4b7d      	ldr	r3, [pc, #500]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf8:	4b79      	ldr	r3, [pc, #484]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cfe:	4a78      	ldr	r2, [pc, #480]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d08:	4b75      	ldr	r3, [pc, #468]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d16:	4b72      	ldr	r3, [pc, #456]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d1c:	4a70      	ldr	r2, [pc, #448]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001d1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d26:	4b6e      	ldr	r3, [pc, #440]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d34:	4b6a      	ldr	r3, [pc, #424]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d3a:	4a69      	ldr	r2, [pc, #420]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d44:	4b66      	ldr	r3, [pc, #408]	@ (8001ee0 <MX_GPIO_Init+0x294>)
 8001d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d52:	2200      	movs	r2, #0
 8001d54:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d58:	4862      	ldr	r0, [pc, #392]	@ (8001ee4 <MX_GPIO_Init+0x298>)
 8001d5a:	f005 ff71 	bl	8007c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN3_Pin|IN4_Pin|IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	213c      	movs	r1, #60	@ 0x3c
 8001d62:	4861      	ldr	r0, [pc, #388]	@ (8001ee8 <MX_GPIO_Init+0x29c>)
 8001d64:	f005 ff6c 	bl	8007c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d6e:	485f      	ldr	r0, [pc, #380]	@ (8001eec <MX_GPIO_Init+0x2a0>)
 8001d70:	f005 ff66 	bl	8007c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 8001d74:	2200      	movs	r2, #0
 8001d76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d7a:	485d      	ldr	r0, [pc, #372]	@ (8001ef0 <MX_GPIO_Init+0x2a4>)
 8001d7c:	f005 ff60 	bl	8007c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|LORA_TX_LED_Pin, GPIO_PIN_RESET);
 8001d80:	2200      	movs	r2, #0
 8001d82:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001d86:	485b      	ldr	r0, [pc, #364]	@ (8001ef4 <MX_GPIO_Init+0x2a8>)
 8001d88:	f005 ff5a 	bl	8007c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RX_LED_GPIO_Port, LORA_RX_LED_Pin, GPIO_PIN_SET);
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	2140      	movs	r1, #64	@ 0x40
 8001d90:	4859      	ldr	r0, [pc, #356]	@ (8001ef8 <MX_GPIO_Init+0x2ac>)
 8001d92:	f005 ff55 	bl	8007c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LORA_NSS_Pin|LORA_RST_Pin, GPIO_PIN_SET);
 8001d96:	2201      	movs	r2, #1
 8001d98:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8001d9c:	4855      	ldr	r0, [pc, #340]	@ (8001ef4 <MX_GPIO_Init+0x2a8>)
 8001d9e:	f005 ff4f 	bl	8007c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_0
 8001da2:	231f      	movs	r3, #31
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001da6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001daa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001db0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001db4:	4619      	mov	r1, r3
 8001db6:	484d      	ldr	r0, [pc, #308]	@ (8001eec <MX_GPIO_Init+0x2a0>)
 8001db8:	f005 fd9a 	bl	80078f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001dbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4843      	ldr	r0, [pc, #268]	@ (8001ee4 <MX_GPIO_Init+0x298>)
 8001dd6:	f005 fd8b 	bl	80078f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN3_Pin IN4_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin|IN2_Pin|IN1_Pin;
 8001dda:	233c      	movs	r3, #60	@ 0x3c
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dde:	2301      	movs	r3, #1
 8001de0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dee:	4619      	mov	r1, r3
 8001df0:	483d      	ldr	r0, [pc, #244]	@ (8001ee8 <MX_GPIO_Init+0x29c>)
 8001df2:	f005 fd7d 	bl	80078f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001df6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e00:	2302      	movs	r3, #2
 8001e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e04:	2302      	movs	r3, #2
 8001e06:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001e08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4837      	ldr	r0, [pc, #220]	@ (8001eec <MX_GPIO_Init+0x2a0>)
 8001e10:	f005 fd6e 	bl	80078f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 8001e14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e22:	2300      	movs	r3, #0
 8001e24:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 8001e26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4830      	ldr	r0, [pc, #192]	@ (8001ef0 <MX_GPIO_Init+0x2a4>)
 8001e2e:	f005 fd5f 	bl	80078f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 LORA_NSS_Pin LORA_RST_Pin LORA_TX_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|LORA_NSS_Pin|LORA_RST_Pin|LORA_TX_LED_Pin;
 8001e32:	f44f 43a9 	mov.w	r3, #21632	@ 0x5480
 8001e36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2300      	movs	r3, #0
 8001e42:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e48:	4619      	mov	r1, r3
 8001e4a:	482a      	ldr	r0, [pc, #168]	@ (8001ef4 <MX_GPIO_Init+0x2a8>)
 8001e4c:	f005 fd50 	bl	80078f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RX_LED_Pin */
  GPIO_InitStruct.Pin = LORA_RX_LED_Pin;
 8001e50:	2340      	movs	r3, #64	@ 0x40
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e54:	2301      	movs	r3, #1
 8001e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LORA_RX_LED_GPIO_Port, &GPIO_InitStruct);
 8001e60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e64:	4619      	mov	r1, r3
 8001e66:	4824      	ldr	r0, [pc, #144]	@ (8001ef8 <MX_GPIO_Init+0x2ac>)
 8001e68:	f005 fd42 	bl	80078f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO0_Pin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 8001e6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e72:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 8001e7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e80:	4619      	mov	r1, r3
 8001e82:	481c      	ldr	r0, [pc, #112]	@ (8001ef4 <MX_GPIO_Init+0x2a8>)
 8001e84:	f005 fd34 	bl	80078f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	2006      	movs	r0, #6
 8001e8e:	f002 fec2 	bl	8004c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e92:	2006      	movs	r0, #6
 8001e94:	f002 fed9 	bl	8004c4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	2007      	movs	r0, #7
 8001e9e:	f002 feba 	bl	8004c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001ea2:	2007      	movs	r0, #7
 8001ea4:	f002 fed1 	bl	8004c4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2100      	movs	r1, #0
 8001eac:	2008      	movs	r0, #8
 8001eae:	f002 feb2 	bl	8004c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001eb2:	2008      	movs	r0, #8
 8001eb4:	f002 fec9 	bl	8004c4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2009      	movs	r0, #9
 8001ebe:	f002 feaa 	bl	8004c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001ec2:	2009      	movs	r0, #9
 8001ec4:	f002 fec1 	bl	8004c4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2100      	movs	r1, #0
 8001ecc:	2028      	movs	r0, #40	@ 0x28
 8001ece:	f002 fea2 	bl	8004c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ed2:	2028      	movs	r0, #40	@ 0x28
 8001ed4:	f002 feb9 	bl	8004c4a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ed8:	bf00      	nop
 8001eda:	3738      	adds	r7, #56	@ 0x38
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	58024400 	.word	0x58024400
 8001ee4:	58020800 	.word	0x58020800
 8001ee8:	58020000 	.word	0x58020000
 8001eec:	58021000 	.word	0x58021000
 8001ef0:	58020400 	.word	0x58020400
 8001ef4:	58021800 	.word	0x58021800
 8001ef8:	58020c00 	.word	0x58020c00

08001efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f00:	b672      	cpsid	i
}
 8001f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <Error_Handler+0x8>

08001f08 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8001f14:	23ff      	movs	r3, #255	@ 0xff
 8001f16:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8001f18:	23ff      	movs	r3, #255	@ 0xff
 8001f1a:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8001f1c:	e013      	b.n	8001f46 <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	781a      	ldrb	r2, [r3, #0]
 8001f26:	7bbb      	ldrb	r3, [r7, #14]
 8001f28:	4053      	eors	r3, r2
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8001f2e:	4a0f      	ldr	r2, [pc, #60]	@ (8001f6c <crc16+0x64>)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4413      	add	r3, r2
 8001f34:	781a      	ldrb	r2, [r3, #0]
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
 8001f38:	4053      	eors	r3, r2
 8001f3a:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8001f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f70 <crc16+0x68>)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	4413      	add	r3, r2
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8001f46:	887b      	ldrh	r3, [r7, #2]
 8001f48:	1e5a      	subs	r2, r3, #1
 8001f4a:	807a      	strh	r2, [r7, #2]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1e6      	bne.n	8001f1e <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	021b      	lsls	r3, r3, #8
 8001f54:	b21a      	sxth	r2, r3
 8001f56:	7bbb      	ldrb	r3, [r7, #14]
 8001f58:	b21b      	sxth	r3, r3
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	b21b      	sxth	r3, r3
 8001f5e:	b29b      	uxth	r3, r3
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	0800f9c8 	.word	0x0800f9c8
 8001f70:	0800fac8 	.word	0x0800fac8

08001f74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa4 <HAL_MspInit+0x30>)
 8001f7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f80:	4a08      	ldr	r2, [pc, #32]	@ (8001fa4 <HAL_MspInit+0x30>)
 8001f82:	f043 0302 	orr.w	r3, r3, #2
 8001f86:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f8a:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <HAL_MspInit+0x30>)
 8001f8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	58024400 	.word	0x58024400

08001fa8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b090      	sub	sp, #64	@ 0x40
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4aa0      	ldr	r2, [pc, #640]	@ (8002248 <HAL_ADC_MspInit+0x2a0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	f040 80b6 	bne.w	8002138 <HAL_ADC_MspInit+0x190>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001fcc:	4b9f      	ldr	r3, [pc, #636]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 8001fce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fd2:	4a9e      	ldr	r2, [pc, #632]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 8001fd4:	f043 0320 	orr.w	r3, r3, #32
 8001fd8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001fdc:	4b9b      	ldr	r3, [pc, #620]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 8001fde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fe2:	f003 0320 	and.w	r3, r3, #32
 8001fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fea:	4b98      	ldr	r3, [pc, #608]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 8001fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ff0:	4a96      	ldr	r2, [pc, #600]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ffa:	4b94      	ldr	r3, [pc, #592]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 8001ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	627b      	str	r3, [r7, #36]	@ 0x24
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002008:	4b90      	ldr	r3, [pc, #576]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 800200a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800200e:	4a8f      	ldr	r2, [pc, #572]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002018:	4b8c      	ldr	r3, [pc, #560]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 800201a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	623b      	str	r3, [r7, #32]
 8002024:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	4b89      	ldr	r3, [pc, #548]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 8002028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800202c:	4a87      	ldr	r2, [pc, #540]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 800202e:	f043 0302 	orr.w	r3, r3, #2
 8002032:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002036:	4b85      	ldr	r3, [pc, #532]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 8002038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002044:	4b81      	ldr	r3, [pc, #516]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 8002046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800204a:	4a80      	ldr	r2, [pc, #512]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 800204c:	f043 0320 	orr.w	r3, r3, #32
 8002050:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002054:	4b7d      	ldr	r3, [pc, #500]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 8002056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	61bb      	str	r3, [r7, #24]
 8002060:	69bb      	ldr	r3, [r7, #24]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002062:	2333      	movs	r3, #51	@ 0x33
 8002064:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002066:	2303      	movs	r3, #3
 8002068:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002072:	4619      	mov	r1, r3
 8002074:	4876      	ldr	r0, [pc, #472]	@ (8002250 <HAL_ADC_MspInit+0x2a8>)
 8002076:	f005 fc3b 	bl	80078f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800207a:	23c0      	movs	r3, #192	@ 0xc0
 800207c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800207e:	2303      	movs	r3, #3
 8002080:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002086:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800208a:	4619      	mov	r1, r3
 800208c:	4871      	ldr	r0, [pc, #452]	@ (8002254 <HAL_ADC_MspInit+0x2ac>)
 800208e:	f005 fc2f 	bl	80078f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002092:	2303      	movs	r3, #3
 8002094:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002096:	2303      	movs	r3, #3
 8002098:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020a2:	4619      	mov	r1, r3
 80020a4:	486c      	ldr	r0, [pc, #432]	@ (8002258 <HAL_ADC_MspInit+0x2b0>)
 80020a6:	f005 fc23 	bl	80078f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020aa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80020ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020b0:	2303      	movs	r3, #3
 80020b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020bc:	4619      	mov	r1, r3
 80020be:	4867      	ldr	r0, [pc, #412]	@ (800225c <HAL_ADC_MspInit+0x2b4>)
 80020c0:	f005 fc16 	bl	80078f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80020c4:	4b66      	ldr	r3, [pc, #408]	@ (8002260 <HAL_ADC_MspInit+0x2b8>)
 80020c6:	4a67      	ldr	r2, [pc, #412]	@ (8002264 <HAL_ADC_MspInit+0x2bc>)
 80020c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80020ca:	4b65      	ldr	r3, [pc, #404]	@ (8002260 <HAL_ADC_MspInit+0x2b8>)
 80020cc:	2209      	movs	r2, #9
 80020ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020d0:	4b63      	ldr	r3, [pc, #396]	@ (8002260 <HAL_ADC_MspInit+0x2b8>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020d6:	4b62      	ldr	r3, [pc, #392]	@ (8002260 <HAL_ADC_MspInit+0x2b8>)
 80020d8:	2200      	movs	r2, #0
 80020da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020dc:	4b60      	ldr	r3, [pc, #384]	@ (8002260 <HAL_ADC_MspInit+0x2b8>)
 80020de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002260 <HAL_ADC_MspInit+0x2b8>)
 80020e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020ec:	4b5c      	ldr	r3, [pc, #368]	@ (8002260 <HAL_ADC_MspInit+0x2b8>)
 80020ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020f2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020f4:	4b5a      	ldr	r3, [pc, #360]	@ (8002260 <HAL_ADC_MspInit+0x2b8>)
 80020f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020fa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80020fc:	4b58      	ldr	r3, [pc, #352]	@ (8002260 <HAL_ADC_MspInit+0x2b8>)
 80020fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002102:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002104:	4b56      	ldr	r3, [pc, #344]	@ (8002260 <HAL_ADC_MspInit+0x2b8>)
 8002106:	2200      	movs	r2, #0
 8002108:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800210a:	4855      	ldr	r0, [pc, #340]	@ (8002260 <HAL_ADC_MspInit+0x2b8>)
 800210c:	f002 fdb8 	bl	8004c80 <HAL_DMA_Init>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_ADC_MspInit+0x172>
    {
      Error_Handler();
 8002116:	f7ff fef1 	bl	8001efc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a50      	ldr	r2, [pc, #320]	@ (8002260 <HAL_ADC_MspInit+0x2b8>)
 800211e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002120:	4a4f      	ldr	r2, [pc, #316]	@ (8002260 <HAL_ADC_MspInit+0x2b8>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	2012      	movs	r0, #18
 800212c:	f002 fd73 	bl	8004c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002130:	2012      	movs	r0, #18
 8002132:	f002 fd8a 	bl	8004c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002136:	e083      	b.n	8002240 <HAL_ADC_MspInit+0x298>
  else if(hadc->Instance==ADC3)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a4a      	ldr	r2, [pc, #296]	@ (8002268 <HAL_ADC_MspInit+0x2c0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d17e      	bne.n	8002240 <HAL_ADC_MspInit+0x298>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002142:	4b42      	ldr	r3, [pc, #264]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 8002144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002148:	4a40      	ldr	r2, [pc, #256]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 800214a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800214e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002152:	4b3e      	ldr	r3, [pc, #248]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 8002154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002158:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002160:	4b3a      	ldr	r3, [pc, #232]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 8002162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002166:	4a39      	ldr	r2, [pc, #228]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 8002168:	f043 0320 	orr.w	r3, r3, #32
 800216c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002170:	4b36      	ldr	r3, [pc, #216]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 8002172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002176:	f003 0320 	and.w	r3, r3, #32
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800217e:	4b33      	ldr	r3, [pc, #204]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 8002180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002184:	4a31      	ldr	r2, [pc, #196]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 8002186:	f043 0304 	orr.w	r3, r3, #4
 800218a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800218e:	4b2f      	ldr	r3, [pc, #188]	@ (800224c <HAL_ADC_MspInit+0x2a4>)
 8002190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800219c:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 80021a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021a2:	2303      	movs	r3, #3
 80021a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021ae:	4619      	mov	r1, r3
 80021b0:	482a      	ldr	r0, [pc, #168]	@ (800225c <HAL_ADC_MspInit+0x2b4>)
 80021b2:	f005 fb9d 	bl	80078f0 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80021b6:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80021ba:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80021be:	f000 fb91 	bl	80028e4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80021c2:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 80021c6:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80021ca:	f000 fb8b 	bl	80028e4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 80021ce:	4b27      	ldr	r3, [pc, #156]	@ (800226c <HAL_ADC_MspInit+0x2c4>)
 80021d0:	4a27      	ldr	r2, [pc, #156]	@ (8002270 <HAL_ADC_MspInit+0x2c8>)
 80021d2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80021d4:	4b25      	ldr	r3, [pc, #148]	@ (800226c <HAL_ADC_MspInit+0x2c4>)
 80021d6:	2273      	movs	r2, #115	@ 0x73
 80021d8:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021da:	4b24      	ldr	r3, [pc, #144]	@ (800226c <HAL_ADC_MspInit+0x2c4>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e0:	4b22      	ldr	r3, [pc, #136]	@ (800226c <HAL_ADC_MspInit+0x2c4>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80021e6:	4b21      	ldr	r3, [pc, #132]	@ (800226c <HAL_ADC_MspInit+0x2c4>)
 80021e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021ec:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021ee:	4b1f      	ldr	r3, [pc, #124]	@ (800226c <HAL_ADC_MspInit+0x2c4>)
 80021f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021f4:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021f6:	4b1d      	ldr	r3, [pc, #116]	@ (800226c <HAL_ADC_MspInit+0x2c4>)
 80021f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021fc:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80021fe:	4b1b      	ldr	r3, [pc, #108]	@ (800226c <HAL_ADC_MspInit+0x2c4>)
 8002200:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002204:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8002206:	4b19      	ldr	r3, [pc, #100]	@ (800226c <HAL_ADC_MspInit+0x2c4>)
 8002208:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800220c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800220e:	4b17      	ldr	r3, [pc, #92]	@ (800226c <HAL_ADC_MspInit+0x2c4>)
 8002210:	2200      	movs	r2, #0
 8002212:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002214:	4815      	ldr	r0, [pc, #84]	@ (800226c <HAL_ADC_MspInit+0x2c4>)
 8002216:	f002 fd33 	bl	8004c80 <HAL_DMA_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <HAL_ADC_MspInit+0x27c>
      Error_Handler();
 8002220:	f7ff fe6c 	bl	8001efc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a11      	ldr	r2, [pc, #68]	@ (800226c <HAL_ADC_MspInit+0x2c4>)
 8002228:	659a      	str	r2, [r3, #88]	@ 0x58
 800222a:	4a10      	ldr	r2, [pc, #64]	@ (800226c <HAL_ADC_MspInit+0x2c4>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8002230:	2200      	movs	r2, #0
 8002232:	2100      	movs	r1, #0
 8002234:	207f      	movs	r0, #127	@ 0x7f
 8002236:	f002 fcee 	bl	8004c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800223a:	207f      	movs	r0, #127	@ 0x7f
 800223c:	f002 fd05 	bl	8004c4a <HAL_NVIC_EnableIRQ>
}
 8002240:	bf00      	nop
 8002242:	3740      	adds	r7, #64	@ 0x40
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40022000 	.word	0x40022000
 800224c:	58024400 	.word	0x58024400
 8002250:	58020800 	.word	0x58020800
 8002254:	58020000 	.word	0x58020000
 8002258:	58020400 	.word	0x58020400
 800225c:	58021400 	.word	0x58021400
 8002260:	24000160 	.word	0x24000160
 8002264:	40020010 	.word	0x40020010
 8002268:	58026000 	.word	0x58026000
 800226c:	240001d8 	.word	0x240001d8
 8002270:	40020028 	.word	0x40020028

08002274 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b0ba      	sub	sp, #232	@ 0xe8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800228c:	f107 0318 	add.w	r3, r7, #24
 8002290:	22b8      	movs	r2, #184	@ 0xb8
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f00d fb27 	bl	800f8e8 <memset>
  if(hspi->Instance==SPI1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a39      	ldr	r2, [pc, #228]	@ (8002384 <HAL_SPI_MspInit+0x110>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d16a      	bne.n	800237a <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80022a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022a8:	f04f 0300 	mov.w	r3, #0
 80022ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80022b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022b4:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022b6:	f107 0318 	add.w	r3, r7, #24
 80022ba:	4618      	mov	r0, r3
 80022bc:	f006 fcae 	bl	8008c1c <HAL_RCCEx_PeriphCLKConfig>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80022c6:	f7ff fe19 	bl	8001efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002388 <HAL_SPI_MspInit+0x114>)
 80022cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002388 <HAL_SPI_MspInit+0x114>)
 80022d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022da:	4b2b      	ldr	r3, [pc, #172]	@ (8002388 <HAL_SPI_MspInit+0x114>)
 80022dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022e8:	4b27      	ldr	r3, [pc, #156]	@ (8002388 <HAL_SPI_MspInit+0x114>)
 80022ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ee:	4a26      	ldr	r2, [pc, #152]	@ (8002388 <HAL_SPI_MspInit+0x114>)
 80022f0:	f043 0308 	orr.w	r3, r3, #8
 80022f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022f8:	4b23      	ldr	r3, [pc, #140]	@ (8002388 <HAL_SPI_MspInit+0x114>)
 80022fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002306:	4b20      	ldr	r3, [pc, #128]	@ (8002388 <HAL_SPI_MspInit+0x114>)
 8002308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800230c:	4a1e      	ldr	r2, [pc, #120]	@ (8002388 <HAL_SPI_MspInit+0x114>)
 800230e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002312:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002316:	4b1c      	ldr	r3, [pc, #112]	@ (8002388 <HAL_SPI_MspInit+0x114>)
 8002318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800231c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002324:	2380      	movs	r3, #128	@ 0x80
 8002326:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002336:	2300      	movs	r3, #0
 8002338:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800233c:	2305      	movs	r3, #5
 800233e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002342:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002346:	4619      	mov	r1, r3
 8002348:	4810      	ldr	r0, [pc, #64]	@ (800238c <HAL_SPI_MspInit+0x118>)
 800234a:	f005 fad1 	bl	80078f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800234e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002352:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002362:	2300      	movs	r3, #0
 8002364:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002368:	2305      	movs	r3, #5
 800236a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800236e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002372:	4619      	mov	r1, r3
 8002374:	4806      	ldr	r0, [pc, #24]	@ (8002390 <HAL_SPI_MspInit+0x11c>)
 8002376:	f005 fabb 	bl	80078f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800237a:	bf00      	nop
 800237c:	37e8      	adds	r7, #232	@ 0xe8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40013000 	.word	0x40013000
 8002388:	58024400 	.word	0x58024400
 800238c:	58020c00 	.word	0x58020c00
 8002390:	58021800 	.word	0x58021800

08002394 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023a4:	d10e      	bne.n	80023c4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023a6:	4b0a      	ldr	r3, [pc, #40]	@ (80023d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80023a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023ac:	4a08      	ldr	r2, [pc, #32]	@ (80023d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023b6:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80023b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	58024400 	.word	0x58024400

080023d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023f4:	d11e      	bne.n	8002434 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f6:	4b11      	ldr	r3, [pc, #68]	@ (800243c <HAL_TIM_MspPostInit+0x68>)
 80023f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023fc:	4a0f      	ldr	r2, [pc, #60]	@ (800243c <HAL_TIM_MspPostInit+0x68>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002406:	4b0d      	ldr	r3, [pc, #52]	@ (800243c <HAL_TIM_MspPostInit+0x68>)
 8002408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002414:	2303      	movs	r3, #3
 8002416:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002418:	2302      	movs	r3, #2
 800241a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002420:	2300      	movs	r3, #0
 8002422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002424:	2301      	movs	r3, #1
 8002426:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002428:	f107 030c 	add.w	r3, r7, #12
 800242c:	4619      	mov	r1, r3
 800242e:	4804      	ldr	r0, [pc, #16]	@ (8002440 <HAL_TIM_MspPostInit+0x6c>)
 8002430:	f005 fa5e 	bl	80078f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002434:	bf00      	nop
 8002436:	3720      	adds	r7, #32
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	58024400 	.word	0x58024400
 8002440:	58020000 	.word	0x58020000

08002444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b0b8      	sub	sp, #224	@ 0xe0
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800245c:	f107 0310 	add.w	r3, r7, #16
 8002460:	22b8      	movs	r2, #184	@ 0xb8
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f00d fa3f 	bl	800f8e8 <memset>
  if(huart->Instance==USART1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a2b      	ldr	r2, [pc, #172]	@ (800251c <HAL_UART_MspInit+0xd8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d14e      	bne.n	8002512 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002474:	f04f 0201 	mov.w	r2, #1
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002480:	2300      	movs	r3, #0
 8002482:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002486:	f107 0310 	add.w	r3, r7, #16
 800248a:	4618      	mov	r0, r3
 800248c:	f006 fbc6 	bl	8008c1c <HAL_RCCEx_PeriphCLKConfig>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002496:	f7ff fd31 	bl	8001efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800249a:	4b21      	ldr	r3, [pc, #132]	@ (8002520 <HAL_UART_MspInit+0xdc>)
 800249c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002520 <HAL_UART_MspInit+0xdc>)
 80024a2:	f043 0310 	orr.w	r3, r3, #16
 80024a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002520 <HAL_UART_MspInit+0xdc>)
 80024ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b8:	4b19      	ldr	r3, [pc, #100]	@ (8002520 <HAL_UART_MspInit+0xdc>)
 80024ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024be:	4a18      	ldr	r2, [pc, #96]	@ (8002520 <HAL_UART_MspInit+0xdc>)
 80024c0:	f043 0302 	orr.w	r3, r3, #2
 80024c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024c8:	4b15      	ldr	r3, [pc, #84]	@ (8002520 <HAL_UART_MspInit+0xdc>)
 80024ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80024d6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80024da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80024f0:	2304      	movs	r3, #4
 80024f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80024fa:	4619      	mov	r1, r3
 80024fc:	4809      	ldr	r0, [pc, #36]	@ (8002524 <HAL_UART_MspInit+0xe0>)
 80024fe:	f005 f9f7 	bl	80078f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002502:	2200      	movs	r2, #0
 8002504:	2100      	movs	r1, #0
 8002506:	2025      	movs	r0, #37	@ 0x25
 8002508:	f002 fb85 	bl	8004c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800250c:	2025      	movs	r0, #37	@ 0x25
 800250e:	f002 fb9c 	bl	8004c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002512:	bf00      	nop
 8002514:	37e0      	adds	r7, #224	@ 0xe0
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40011000 	.word	0x40011000
 8002520:	58024400 	.word	0x58024400
 8002524:	58020400 	.word	0x58020400

08002528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <NMI_Handler+0x4>

08002530 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <HardFault_Handler+0x4>

08002538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <MemManage_Handler+0x4>

08002540 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <BusFault_Handler+0x4>

08002548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <UsageFault_Handler+0x4>

08002550 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800257e:	f000 f96d 	bl	800285c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}

08002586 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800258a:	2001      	movs	r0, #1
 800258c:	f005 fb8b 	bl	8007ca6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}

08002594 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002598:	2002      	movs	r0, #2
 800259a:	f005 fb84 	bl	8007ca6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80025a6:	2004      	movs	r0, #4
 80025a8:	f005 fb7d 	bl	8007ca6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80025b4:	2008      	movs	r0, #8
 80025b6:	f005 fb76 	bl	8007ca6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025c4:	4802      	ldr	r0, [pc, #8]	@ (80025d0 <DMA1_Stream0_IRQHandler+0x10>)
 80025c6:	f003 fe81 	bl	80062cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	24000160 	.word	0x24000160

080025d4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80025d8:	4802      	ldr	r0, [pc, #8]	@ (80025e4 <DMA1_Stream1_IRQHandler+0x10>)
 80025da:	f003 fe77 	bl	80062cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	240001d8 	.word	0x240001d8

080025e8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80025ec:	4802      	ldr	r0, [pc, #8]	@ (80025f8 <ADC_IRQHandler+0x10>)
 80025ee:	f000 ff5f 	bl	80034b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	24000080 	.word	0x24000080

080025fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002600:	4802      	ldr	r0, [pc, #8]	@ (800260c <USART1_IRQHandler+0x10>)
 8002602:	f00a fd1b 	bl	800d03c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	24000324 	.word	0x24000324

08002610 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_DIO0_Pin);
 8002614:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002618:	f005 fb45 	bl	8007ca6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}

08002620 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002624:	4802      	ldr	r0, [pc, #8]	@ (8002630 <ADC3_IRQHandler+0x10>)
 8002626:	f000 ff43 	bl	80034b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	240000f0 	.word	0x240000f0

08002634 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002638:	4b32      	ldr	r3, [pc, #200]	@ (8002704 <SystemInit+0xd0>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263e:	4a31      	ldr	r2, [pc, #196]	@ (8002704 <SystemInit+0xd0>)
 8002640:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002644:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002648:	4b2f      	ldr	r3, [pc, #188]	@ (8002708 <SystemInit+0xd4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	2b06      	cmp	r3, #6
 8002652:	d807      	bhi.n	8002664 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002654:	4b2c      	ldr	r3, [pc, #176]	@ (8002708 <SystemInit+0xd4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f023 030f 	bic.w	r3, r3, #15
 800265c:	4a2a      	ldr	r2, [pc, #168]	@ (8002708 <SystemInit+0xd4>)
 800265e:	f043 0307 	orr.w	r3, r3, #7
 8002662:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002664:	4b29      	ldr	r3, [pc, #164]	@ (800270c <SystemInit+0xd8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a28      	ldr	r2, [pc, #160]	@ (800270c <SystemInit+0xd8>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002670:	4b26      	ldr	r3, [pc, #152]	@ (800270c <SystemInit+0xd8>)
 8002672:	2200      	movs	r2, #0
 8002674:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002676:	4b25      	ldr	r3, [pc, #148]	@ (800270c <SystemInit+0xd8>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4924      	ldr	r1, [pc, #144]	@ (800270c <SystemInit+0xd8>)
 800267c:	4b24      	ldr	r3, [pc, #144]	@ (8002710 <SystemInit+0xdc>)
 800267e:	4013      	ands	r3, r2
 8002680:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002682:	4b21      	ldr	r3, [pc, #132]	@ (8002708 <SystemInit+0xd4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d007      	beq.n	800269e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800268e:	4b1e      	ldr	r3, [pc, #120]	@ (8002708 <SystemInit+0xd4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 030f 	bic.w	r3, r3, #15
 8002696:	4a1c      	ldr	r2, [pc, #112]	@ (8002708 <SystemInit+0xd4>)
 8002698:	f043 0307 	orr.w	r3, r3, #7
 800269c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800269e:	4b1b      	ldr	r3, [pc, #108]	@ (800270c <SystemInit+0xd8>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80026a4:	4b19      	ldr	r3, [pc, #100]	@ (800270c <SystemInit+0xd8>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80026aa:	4b18      	ldr	r3, [pc, #96]	@ (800270c <SystemInit+0xd8>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80026b0:	4b16      	ldr	r3, [pc, #88]	@ (800270c <SystemInit+0xd8>)
 80026b2:	4a18      	ldr	r2, [pc, #96]	@ (8002714 <SystemInit+0xe0>)
 80026b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80026b6:	4b15      	ldr	r3, [pc, #84]	@ (800270c <SystemInit+0xd8>)
 80026b8:	4a17      	ldr	r2, [pc, #92]	@ (8002718 <SystemInit+0xe4>)
 80026ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80026bc:	4b13      	ldr	r3, [pc, #76]	@ (800270c <SystemInit+0xd8>)
 80026be:	4a17      	ldr	r2, [pc, #92]	@ (800271c <SystemInit+0xe8>)
 80026c0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80026c2:	4b12      	ldr	r3, [pc, #72]	@ (800270c <SystemInit+0xd8>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80026c8:	4b10      	ldr	r3, [pc, #64]	@ (800270c <SystemInit+0xd8>)
 80026ca:	4a14      	ldr	r2, [pc, #80]	@ (800271c <SystemInit+0xe8>)
 80026cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80026ce:	4b0f      	ldr	r3, [pc, #60]	@ (800270c <SystemInit+0xd8>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80026d4:	4b0d      	ldr	r3, [pc, #52]	@ (800270c <SystemInit+0xd8>)
 80026d6:	4a11      	ldr	r2, [pc, #68]	@ (800271c <SystemInit+0xe8>)
 80026d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80026da:	4b0c      	ldr	r3, [pc, #48]	@ (800270c <SystemInit+0xd8>)
 80026dc:	2200      	movs	r2, #0
 80026de:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026e0:	4b0a      	ldr	r3, [pc, #40]	@ (800270c <SystemInit+0xd8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a09      	ldr	r2, [pc, #36]	@ (800270c <SystemInit+0xd8>)
 80026e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80026ec:	4b07      	ldr	r3, [pc, #28]	@ (800270c <SystemInit+0xd8>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80026f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002720 <SystemInit+0xec>)
 80026f4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80026f8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80026fa:	bf00      	nop
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000ed00 	.word	0xe000ed00
 8002708:	52002000 	.word	0x52002000
 800270c:	58024400 	.word	0x58024400
 8002710:	eaf6ed7f 	.word	0xeaf6ed7f
 8002714:	02020200 	.word	0x02020200
 8002718:	01ff0000 	.word	0x01ff0000
 800271c:	01010280 	.word	0x01010280
 8002720:	52004000 	.word	0x52004000

08002724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002724:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800275c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002728:	f7ff ff84 	bl	8002634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800272c:	480c      	ldr	r0, [pc, #48]	@ (8002760 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800272e:	490d      	ldr	r1, [pc, #52]	@ (8002764 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002730:	4a0d      	ldr	r2, [pc, #52]	@ (8002768 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002734:	e002      	b.n	800273c <LoopCopyDataInit>

08002736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800273a:	3304      	adds	r3, #4

0800273c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800273c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002740:	d3f9      	bcc.n	8002736 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002742:	4a0a      	ldr	r2, [pc, #40]	@ (800276c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002744:	4c0a      	ldr	r4, [pc, #40]	@ (8002770 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002748:	e001      	b.n	800274e <LoopFillZerobss>

0800274a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800274a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800274c:	3204      	adds	r2, #4

0800274e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002750:	d3fb      	bcc.n	800274a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002752:	f00d f8d1 	bl	800f8f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002756:	f7fe fd53 	bl	8001200 <main>
  bx  lr
 800275a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800275c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002760:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002764:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8002768:	0800fc18 	.word	0x0800fc18
  ldr r2, =_sbss
 800276c:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8002770:	2400058c 	.word	0x2400058c

08002774 <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002774:	e7fe      	b.n	8002774 <BDMA_Channel0_IRQHandler>
	...

08002778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800277e:	2003      	movs	r0, #3
 8002780:	f002 fa3e 	bl	8004c00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002784:	f006 f874 	bl	8008870 <HAL_RCC_GetSysClockFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b15      	ldr	r3, [pc, #84]	@ (80027e0 <HAL_Init+0x68>)
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	0a1b      	lsrs	r3, r3, #8
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	4913      	ldr	r1, [pc, #76]	@ (80027e4 <HAL_Init+0x6c>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
 80027a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027a2:	4b0f      	ldr	r3, [pc, #60]	@ (80027e0 <HAL_Init+0x68>)
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	4a0e      	ldr	r2, [pc, #56]	@ (80027e4 <HAL_Init+0x6c>)
 80027ac:	5cd3      	ldrb	r3, [r2, r3]
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
 80027b8:	4a0b      	ldr	r2, [pc, #44]	@ (80027e8 <HAL_Init+0x70>)
 80027ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027bc:	4a0b      	ldr	r2, [pc, #44]	@ (80027ec <HAL_Init+0x74>)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027c2:	200f      	movs	r0, #15
 80027c4:	f000 f814 	bl	80027f0 <HAL_InitTick>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e002      	b.n	80027d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80027d2:	f7ff fbcf 	bl	8001f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	58024400 	.word	0x58024400
 80027e4:	0800fbc8 	.word	0x0800fbc8
 80027e8:	24000058 	.word	0x24000058
 80027ec:	24000054 	.word	0x24000054

080027f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80027f8:	4b15      	ldr	r3, [pc, #84]	@ (8002850 <HAL_InitTick+0x60>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e021      	b.n	8002848 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002804:	4b13      	ldr	r3, [pc, #76]	@ (8002854 <HAL_InitTick+0x64>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b11      	ldr	r3, [pc, #68]	@ (8002850 <HAL_InitTick+0x60>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	4619      	mov	r1, r3
 800280e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002812:	fbb3 f3f1 	udiv	r3, r3, r1
 8002816:	fbb2 f3f3 	udiv	r3, r2, r3
 800281a:	4618      	mov	r0, r3
 800281c:	f002 fa23 	bl	8004c66 <HAL_SYSTICK_Config>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e00e      	b.n	8002848 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b0f      	cmp	r3, #15
 800282e:	d80a      	bhi.n	8002846 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002830:	2200      	movs	r2, #0
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	f04f 30ff 	mov.w	r0, #4294967295
 8002838:	f002 f9ed 	bl	8004c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800283c:	4a06      	ldr	r2, [pc, #24]	@ (8002858 <HAL_InitTick+0x68>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	e000      	b.n	8002848 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	24000060 	.word	0x24000060
 8002854:	24000054 	.word	0x24000054
 8002858:	2400005c 	.word	0x2400005c

0800285c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002860:	4b06      	ldr	r3, [pc, #24]	@ (800287c <HAL_IncTick+0x20>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <HAL_IncTick+0x24>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4413      	add	r3, r2
 800286c:	4a04      	ldr	r2, [pc, #16]	@ (8002880 <HAL_IncTick+0x24>)
 800286e:	6013      	str	r3, [r2, #0]
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	24000060 	.word	0x24000060
 8002880:	24000588 	.word	0x24000588

08002884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return uwTick;
 8002888:	4b03      	ldr	r3, [pc, #12]	@ (8002898 <HAL_GetTick+0x14>)
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	24000588 	.word	0x24000588

0800289c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028a4:	f7ff ffee 	bl	8002884 <HAL_GetTick>
 80028a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d005      	beq.n	80028c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028b6:	4b0a      	ldr	r3, [pc, #40]	@ (80028e0 <HAL_Delay+0x44>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4413      	add	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028c2:	bf00      	nop
 80028c4:	f7ff ffde 	bl	8002884 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d8f7      	bhi.n	80028c4 <HAL_Delay+0x28>
  {
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	24000060 	.word	0x24000060

080028e4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80028ee:	4b07      	ldr	r3, [pc, #28]	@ (800290c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	401a      	ands	r2, r3
 80028f8:	4904      	ldr	r1, [pc, #16]	@ (800290c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	58000400 	.word	0x58000400

08002910 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	609a      	str	r2, [r3, #8]
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	609a      	str	r2, [r3, #8]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	3360      	adds	r3, #96	@ 0x60
 800298a:	461a      	mov	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4a10      	ldr	r2, [pc, #64]	@ (80029d8 <LL_ADC_SetOffset+0x60>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d10b      	bne.n	80029b4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80029b2:	e00b      	b.n	80029cc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	431a      	orrs	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	601a      	str	r2, [r3, #0]
}
 80029cc:	bf00      	nop
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	58026000 	.word	0x58026000

080029dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3360      	adds	r3, #96	@ 0x60
 80029ea:	461a      	mov	r2, r3
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	fa01 f303 	lsl.w	r3, r1, r3
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	611a      	str	r2, [r3, #16]
}
 8002a2e:	bf00      	nop
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
	...

08002a3c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8002a7c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00e      	beq.n	8002a6e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	3360      	adds	r3, #96	@ 0x60
 8002a54:	461a      	mov	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	601a      	str	r2, [r3, #0]
  }
}
 8002a6e:	bf00      	nop
 8002a70:	371c      	adds	r7, #28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	58026000 	.word	0x58026000

08002a80 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ac0 <LL_ADC_SetOffsetSaturation+0x40>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d10e      	bne.n	8002ab2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	3360      	adds	r3, #96	@ 0x60
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	431a      	orrs	r2, r3
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	58026000 	.word	0x58026000

08002ac4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4a0c      	ldr	r2, [pc, #48]	@ (8002b04 <LL_ADC_SetOffsetSign+0x40>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d10e      	bne.n	8002af6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3360      	adds	r3, #96	@ 0x60
 8002adc:	461a      	mov	r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	431a      	orrs	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002af6:	bf00      	nop
 8002af8:	371c      	adds	r7, #28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	58026000 	.word	0x58026000

08002b08 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	3360      	adds	r3, #96	@ 0x60
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4a0c      	ldr	r2, [pc, #48]	@ (8002b58 <LL_ADC_SetOffsetState+0x50>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d108      	bne.n	8002b3c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	431a      	orrs	r2, r3
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002b3a:	e007      	b.n	8002b4c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	601a      	str	r2, [r3, #0]
}
 8002b4c:	bf00      	nop
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	58026000 	.word	0x58026000

08002b5c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b087      	sub	sp, #28
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	3330      	adds	r3, #48	@ 0x30
 8002b92:	461a      	mov	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	0a1b      	lsrs	r3, r3, #8
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	4413      	add	r3, r2
 8002ba0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f003 031f 	and.w	r3, r3, #31
 8002bac:	211f      	movs	r1, #31
 8002bae:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	401a      	ands	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	0e9b      	lsrs	r3, r3, #26
 8002bba:	f003 011f 	and.w	r1, r3, #31
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bce:	bf00      	nop
 8002bd0:	371c      	adds	r7, #28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f023 0203 	bic.w	r2, r3, #3
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	60da      	str	r2, [r3, #12]
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f043 0201 	orr.w	r2, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	60da      	str	r2, [r3, #12]
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a08      	ldr	r2, [pc, #32]	@ (8002c50 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d107      	bne.n	8002c42 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f023 0203 	bic.w	r2, r3, #3
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	60da      	str	r2, [r3, #12]
  }
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	58026000 	.word	0x58026000

08002c54 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c60:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b087      	sub	sp, #28
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	3314      	adds	r3, #20
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	0e5b      	lsrs	r3, r3, #25
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	4413      	add	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	0d1b      	lsrs	r3, r3, #20
 8002ca2:	f003 031f 	and.w	r3, r3, #31
 8002ca6:	2107      	movs	r1, #7
 8002ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	401a      	ands	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	0d1b      	lsrs	r3, r3, #20
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cc4:	bf00      	nop
 8002cc6:	371c      	adds	r7, #28
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4a1a      	ldr	r2, [pc, #104]	@ (8002d48 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d115      	bne.n	8002d10 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f003 0318 	and.w	r3, r3, #24
 8002cfa:	4914      	ldr	r1, [pc, #80]	@ (8002d4c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002cfc:	40d9      	lsrs	r1, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	400b      	ands	r3, r1
 8002d02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d06:	431a      	orrs	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002d0e:	e014      	b.n	8002d3a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	401a      	ands	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f003 0318 	and.w	r3, r3, #24
 8002d26:	4909      	ldr	r1, [pc, #36]	@ (8002d4c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002d28:	40d9      	lsrs	r1, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	400b      	ands	r3, r1
 8002d2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d32:	431a      	orrs	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002d3a:	bf00      	nop
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	58026000 	.word	0x58026000
 8002d4c:	000fffff 	.word	0x000fffff

08002d50 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 031f 	and.w	r3, r3, #31
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	4b04      	ldr	r3, [pc, #16]	@ (8002da8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6093      	str	r3, [r2, #8]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	5fffffc0 	.word	0x5fffffc0

08002dac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dc0:	d101      	bne.n	8002dc6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <LL_ADC_EnableInternalRegulator+0x24>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	6fffffc0 	.word	0x6fffffc0

08002dfc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e10:	d101      	bne.n	8002e16 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	4b05      	ldr	r3, [pc, #20]	@ (8002e48 <LL_ADC_Enable+0x24>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	f043 0201 	orr.w	r2, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	7fffffc0 	.word	0x7fffffc0

08002e4c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <LL_ADC_IsEnabled+0x18>
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <LL_ADC_IsEnabled+0x1a>
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
	...

08002e74 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <LL_ADC_REG_StartConversion+0x24>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	f043 0204 	orr.w	r2, r3, #4
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	7fffffc0 	.word	0x7fffffc0

08002e9c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d101      	bne.n	8002eb4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d101      	bne.n	8002eda <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ee8:	b590      	push	{r4, r7, lr}
 8002eea:	b089      	sub	sp, #36	@ 0x24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e1ee      	b.n	80032e0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d109      	bne.n	8002f24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff f849 	bl	8001fa8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff3f 	bl	8002dac <LL_ADC_IsDeepPowerDownEnabled>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d004      	beq.n	8002f3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff ff25 	bl	8002d88 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff ff5a 	bl	8002dfc <LL_ADC_IsInternalRegulatorEnabled>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d114      	bne.n	8002f78 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff ff3e 	bl	8002dd4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f58:	4b8e      	ldr	r3, [pc, #568]	@ (8003194 <HAL_ADC_Init+0x2ac>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	099b      	lsrs	r3, r3, #6
 8002f5e:	4a8e      	ldr	r2, [pc, #568]	@ (8003198 <HAL_ADC_Init+0x2b0>)
 8002f60:	fba2 2303 	umull	r2, r3, r2, r3
 8002f64:	099b      	lsrs	r3, r3, #6
 8002f66:	3301      	adds	r3, #1
 8002f68:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f6a:	e002      	b.n	8002f72 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f9      	bne.n	8002f6c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff ff3d 	bl	8002dfc <LL_ADC_IsInternalRegulatorEnabled>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10d      	bne.n	8002fa4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f8c:	f043 0210 	orr.w	r2, r3, #16
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f98:	f043 0201 	orr.w	r2, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff77 	bl	8002e9c <LL_ADC_REG_IsConversionOngoing>
 8002fae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f040 8188 	bne.w	80032ce <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f040 8184 	bne.w	80032ce <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fca:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002fce:	f043 0202 	orr.w	r2, r3, #2
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff ff36 	bl	8002e4c <LL_ADC_IsEnabled>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d136      	bne.n	8003054 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a6c      	ldr	r2, [pc, #432]	@ (800319c <HAL_ADC_Init+0x2b4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d004      	beq.n	8002ffa <HAL_ADC_Init+0x112>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a6a      	ldr	r2, [pc, #424]	@ (80031a0 <HAL_ADC_Init+0x2b8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d10e      	bne.n	8003018 <HAL_ADC_Init+0x130>
 8002ffa:	4868      	ldr	r0, [pc, #416]	@ (800319c <HAL_ADC_Init+0x2b4>)
 8002ffc:	f7ff ff26 	bl	8002e4c <LL_ADC_IsEnabled>
 8003000:	4604      	mov	r4, r0
 8003002:	4867      	ldr	r0, [pc, #412]	@ (80031a0 <HAL_ADC_Init+0x2b8>)
 8003004:	f7ff ff22 	bl	8002e4c <LL_ADC_IsEnabled>
 8003008:	4603      	mov	r3, r0
 800300a:	4323      	orrs	r3, r4
 800300c:	2b00      	cmp	r3, #0
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	e008      	b.n	800302a <HAL_ADC_Init+0x142>
 8003018:	4862      	ldr	r0, [pc, #392]	@ (80031a4 <HAL_ADC_Init+0x2bc>)
 800301a:	f7ff ff17 	bl	8002e4c <LL_ADC_IsEnabled>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d012      	beq.n	8003054 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a5a      	ldr	r2, [pc, #360]	@ (800319c <HAL_ADC_Init+0x2b4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d004      	beq.n	8003042 <HAL_ADC_Init+0x15a>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a58      	ldr	r2, [pc, #352]	@ (80031a0 <HAL_ADC_Init+0x2b8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d101      	bne.n	8003046 <HAL_ADC_Init+0x15e>
 8003042:	4a59      	ldr	r2, [pc, #356]	@ (80031a8 <HAL_ADC_Init+0x2c0>)
 8003044:	e000      	b.n	8003048 <HAL_ADC_Init+0x160>
 8003046:	4a59      	ldr	r2, [pc, #356]	@ (80031ac <HAL_ADC_Init+0x2c4>)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4619      	mov	r1, r3
 800304e:	4610      	mov	r0, r2
 8003050:	f7ff fc5e 	bl	8002910 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a52      	ldr	r2, [pc, #328]	@ (80031a4 <HAL_ADC_Init+0x2bc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d129      	bne.n	80030b2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7e5b      	ldrb	r3, [r3, #25]
 8003062:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003068:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800306e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b08      	cmp	r3, #8
 8003076:	d013      	beq.n	80030a0 <HAL_ADC_Init+0x1b8>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b0c      	cmp	r3, #12
 800307e:	d00d      	beq.n	800309c <HAL_ADC_Init+0x1b4>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b1c      	cmp	r3, #28
 8003086:	d007      	beq.n	8003098 <HAL_ADC_Init+0x1b0>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b18      	cmp	r3, #24
 800308e:	d101      	bne.n	8003094 <HAL_ADC_Init+0x1ac>
 8003090:	2318      	movs	r3, #24
 8003092:	e006      	b.n	80030a2 <HAL_ADC_Init+0x1ba>
 8003094:	2300      	movs	r3, #0
 8003096:	e004      	b.n	80030a2 <HAL_ADC_Init+0x1ba>
 8003098:	2310      	movs	r3, #16
 800309a:	e002      	b.n	80030a2 <HAL_ADC_Init+0x1ba>
 800309c:	2308      	movs	r3, #8
 800309e:	e000      	b.n	80030a2 <HAL_ADC_Init+0x1ba>
 80030a0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80030a2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030aa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80030ac:	4313      	orrs	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
 80030b0:	e00e      	b.n	80030d0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	7e5b      	ldrb	r3, [r3, #25]
 80030b6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030bc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030c2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ca:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d106      	bne.n	80030e8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030de:	3b01      	subs	r3, #1
 80030e0:	045b      	lsls	r3, r3, #17
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d009      	beq.n	8003104 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4313      	orrs	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a26      	ldr	r2, [pc, #152]	@ (80031a4 <HAL_ADC_Init+0x2bc>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d115      	bne.n	800313a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	4b26      	ldr	r3, [pc, #152]	@ (80031b0 <HAL_ADC_Init+0x2c8>)
 8003116:	4013      	ands	r3, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	69b9      	ldr	r1, [r7, #24]
 800311e:	430b      	orrs	r3, r1
 8003120:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	611a      	str	r2, [r3, #16]
 8003138:	e009      	b.n	800314e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	4b1c      	ldr	r3, [pc, #112]	@ (80031b4 <HAL_ADC_Init+0x2cc>)
 8003142:	4013      	ands	r3, r2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	69b9      	ldr	r1, [r7, #24]
 800314a:	430b      	orrs	r3, r1
 800314c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fea2 	bl	8002e9c <LL_ADC_REG_IsConversionOngoing>
 8003158:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff feaf 	bl	8002ec2 <LL_ADC_INJ_IsConversionOngoing>
 8003164:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	2b00      	cmp	r3, #0
 800316a:	f040 808e 	bne.w	800328a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	f040 808a 	bne.w	800328a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a0a      	ldr	r2, [pc, #40]	@ (80031a4 <HAL_ADC_Init+0x2bc>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d11b      	bne.n	80031b8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	7e1b      	ldrb	r3, [r3, #24]
 8003184:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800318c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
 8003192:	e018      	b.n	80031c6 <HAL_ADC_Init+0x2de>
 8003194:	24000054 	.word	0x24000054
 8003198:	053e2d63 	.word	0x053e2d63
 800319c:	40022000 	.word	0x40022000
 80031a0:	40022100 	.word	0x40022100
 80031a4:	58026000 	.word	0x58026000
 80031a8:	40022300 	.word	0x40022300
 80031ac:	58026300 	.word	0x58026300
 80031b0:	fff04007 	.word	0xfff04007
 80031b4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	7e1b      	ldrb	r3, [r3, #24]
 80031bc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	4b46      	ldr	r3, [pc, #280]	@ (80032e8 <HAL_ADC_Init+0x400>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	69b9      	ldr	r1, [r7, #24]
 80031d6:	430b      	orrs	r3, r1
 80031d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d137      	bne.n	8003254 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a3f      	ldr	r2, [pc, #252]	@ (80032ec <HAL_ADC_Init+0x404>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d116      	bne.n	8003222 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	4b3d      	ldr	r3, [pc, #244]	@ (80032f0 <HAL_ADC_Init+0x408>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003206:	4311      	orrs	r1, r2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800320c:	4311      	orrs	r1, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003212:	430a      	orrs	r2, r1
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	611a      	str	r2, [r3, #16]
 8003220:	e020      	b.n	8003264 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	4b32      	ldr	r3, [pc, #200]	@ (80032f4 <HAL_ADC_Init+0x40c>)
 800322a:	4013      	ands	r3, r2
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003230:	3a01      	subs	r2, #1
 8003232:	0411      	lsls	r1, r2, #16
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003238:	4311      	orrs	r1, r2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800323e:	4311      	orrs	r1, r2
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003244:	430a      	orrs	r2, r1
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0201 	orr.w	r2, r2, #1
 8003250:	611a      	str	r2, [r3, #16]
 8003252:	e007      	b.n	8003264 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0201 	bic.w	r2, r2, #1
 8003262:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1b      	ldr	r2, [pc, #108]	@ (80032ec <HAL_ADC_Init+0x404>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d002      	beq.n	800328a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f001 f9c3 	bl	8004610 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d10c      	bne.n	80032ac <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003298:	f023 010f 	bic.w	r1, r3, #15
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	1e5a      	subs	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80032aa:	e007      	b.n	80032bc <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 020f 	bic.w	r2, r2, #15
 80032ba:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c0:	f023 0303 	bic.w	r3, r3, #3
 80032c4:	f043 0201 	orr.w	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	661a      	str	r2, [r3, #96]	@ 0x60
 80032cc:	e007      	b.n	80032de <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d2:	f043 0210 	orr.w	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032de:	7ffb      	ldrb	r3, [r7, #31]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3724      	adds	r7, #36	@ 0x24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd90      	pop	{r4, r7, pc}
 80032e8:	ffffbffc 	.word	0xffffbffc
 80032ec:	58026000 	.word	0x58026000
 80032f0:	fc00f81f 	.word	0xfc00f81f
 80032f4:	fc00f81e 	.word	0xfc00f81e

080032f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a60      	ldr	r2, [pc, #384]	@ (800348c <HAL_ADC_Start_DMA+0x194>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d004      	beq.n	8003318 <HAL_ADC_Start_DMA+0x20>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a5f      	ldr	r2, [pc, #380]	@ (8003490 <HAL_ADC_Start_DMA+0x198>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d101      	bne.n	800331c <HAL_ADC_Start_DMA+0x24>
 8003318:	4b5e      	ldr	r3, [pc, #376]	@ (8003494 <HAL_ADC_Start_DMA+0x19c>)
 800331a:	e000      	b.n	800331e <HAL_ADC_Start_DMA+0x26>
 800331c:	4b5e      	ldr	r3, [pc, #376]	@ (8003498 <HAL_ADC_Start_DMA+0x1a0>)
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fd16 	bl	8002d50 <LL_ADC_GetMultimode>
 8003324:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff fdb6 	bl	8002e9c <LL_ADC_REG_IsConversionOngoing>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	f040 80a2 	bne.w	800347c <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_ADC_Start_DMA+0x4e>
 8003342:	2302      	movs	r3, #2
 8003344:	e09d      	b.n	8003482 <HAL_ADC_Start_DMA+0x18a>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d006      	beq.n	8003362 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	2b05      	cmp	r3, #5
 8003358:	d003      	beq.n	8003362 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	2b09      	cmp	r3, #9
 800335e:	f040 8086 	bne.w	800346e <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f001 f836 	bl	80043d4 <ADC_Enable>
 8003368:	4603      	mov	r3, r0
 800336a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d178      	bne.n	8003464 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003376:	4b49      	ldr	r3, [pc, #292]	@ (800349c <HAL_ADC_Start_DMA+0x1a4>)
 8003378:	4013      	ands	r3, r2
 800337a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a42      	ldr	r2, [pc, #264]	@ (8003490 <HAL_ADC_Start_DMA+0x198>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d002      	beq.n	8003392 <HAL_ADC_Start_DMA+0x9a>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	e000      	b.n	8003394 <HAL_ADC_Start_DMA+0x9c>
 8003392:	4b3e      	ldr	r3, [pc, #248]	@ (800348c <HAL_ADC_Start_DMA+0x194>)
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	4293      	cmp	r3, r2
 800339a:	d002      	beq.n	80033a2 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d105      	bne.n	80033ae <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d006      	beq.n	80033c8 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033be:	f023 0206 	bic.w	r2, r3, #6
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	665a      	str	r2, [r3, #100]	@ 0x64
 80033c6:	e002      	b.n	80033ce <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d2:	4a33      	ldr	r2, [pc, #204]	@ (80034a0 <HAL_ADC_Start_DMA+0x1a8>)
 80033d4:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033da:	4a32      	ldr	r2, [pc, #200]	@ (80034a4 <HAL_ADC_Start_DMA+0x1ac>)
 80033dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e2:	4a31      	ldr	r2, [pc, #196]	@ (80034a8 <HAL_ADC_Start_DMA+0x1b0>)
 80033e4:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	221c      	movs	r2, #28
 80033ec:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0210 	orr.w	r2, r2, #16
 8003404:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a28      	ldr	r2, [pc, #160]	@ (80034ac <HAL_ADC_Start_DMA+0x1b4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d10f      	bne.n	8003430 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f7ff fbfe 	bl	8002c20 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff fbe9 	bl	8002c00 <LL_ADC_EnableDMAReq>
 800342e:	e007      	b.n	8003440 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003438:	4619      	mov	r1, r3
 800343a:	4610      	mov	r0, r2
 800343c:	f7ff fbcd 	bl	8002bda <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3340      	adds	r3, #64	@ 0x40
 800344a:	4619      	mov	r1, r3
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f001 ff6e 	bl	8005330 <HAL_DMA_Start_IT>
 8003454:	4603      	mov	r3, r0
 8003456:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff fd09 	bl	8002e74 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003462:	e00d      	b.n	8003480 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 800346c:	e008      	b.n	8003480 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800347a:	e001      	b.n	8003480 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800347c:	2302      	movs	r3, #2
 800347e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003480:	7dfb      	ldrb	r3, [r7, #23]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40022000 	.word	0x40022000
 8003490:	40022100 	.word	0x40022100
 8003494:	40022300 	.word	0x40022300
 8003498:	58026300 	.word	0x58026300
 800349c:	fffff0fe 	.word	0xfffff0fe
 80034a0:	080044e9 	.word	0x080044e9
 80034a4:	080045c1 	.word	0x080045c1
 80034a8:	080045dd 	.word	0x080045dd
 80034ac:	58026000 	.word	0x58026000

080034b0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08a      	sub	sp, #40	@ 0x28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80034b8:	2300      	movs	r3, #0
 80034ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a87      	ldr	r2, [pc, #540]	@ (80036f0 <HAL_ADC_IRQHandler+0x240>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d004      	beq.n	80034e0 <HAL_ADC_IRQHandler+0x30>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a86      	ldr	r2, [pc, #536]	@ (80036f4 <HAL_ADC_IRQHandler+0x244>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d101      	bne.n	80034e4 <HAL_ADC_IRQHandler+0x34>
 80034e0:	4b85      	ldr	r3, [pc, #532]	@ (80036f8 <HAL_ADC_IRQHandler+0x248>)
 80034e2:	e000      	b.n	80034e6 <HAL_ADC_IRQHandler+0x36>
 80034e4:	4b85      	ldr	r3, [pc, #532]	@ (80036fc <HAL_ADC_IRQHandler+0x24c>)
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff fc32 	bl	8002d50 <LL_ADC_GetMultimode>
 80034ec:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d017      	beq.n	8003528 <HAL_ADC_IRQHandler+0x78>
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d012      	beq.n	8003528 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	2b00      	cmp	r3, #0
 800350c:	d105      	bne.n	800351a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003512:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f001 f9b4 	bl	8004888 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2202      	movs	r2, #2
 8003526:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	2b00      	cmp	r3, #0
 8003530:	d004      	beq.n	800353c <HAL_ADC_IRQHandler+0x8c>
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10a      	bne.n	8003552 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8083 	beq.w	800364e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d07d      	beq.n	800364e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	2b00      	cmp	r3, #0
 800355c:	d105      	bne.n	800356a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003562:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff faf4 	bl	8002b5c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d062      	beq.n	8003640 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a5d      	ldr	r2, [pc, #372]	@ (80036f4 <HAL_ADC_IRQHandler+0x244>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d002      	beq.n	800358a <HAL_ADC_IRQHandler+0xda>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	e000      	b.n	800358c <HAL_ADC_IRQHandler+0xdc>
 800358a:	4b59      	ldr	r3, [pc, #356]	@ (80036f0 <HAL_ADC_IRQHandler+0x240>)
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	4293      	cmp	r3, r2
 8003592:	d008      	beq.n	80035a6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d005      	beq.n	80035a6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b05      	cmp	r3, #5
 800359e:	d002      	beq.n	80035a6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2b09      	cmp	r3, #9
 80035a4:	d104      	bne.n	80035b0 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	623b      	str	r3, [r7, #32]
 80035ae:	e00c      	b.n	80035ca <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a4f      	ldr	r2, [pc, #316]	@ (80036f4 <HAL_ADC_IRQHandler+0x244>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d002      	beq.n	80035c0 <HAL_ADC_IRQHandler+0x110>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	e000      	b.n	80035c2 <HAL_ADC_IRQHandler+0x112>
 80035c0:	4b4b      	ldr	r3, [pc, #300]	@ (80036f0 <HAL_ADC_IRQHandler+0x240>)
 80035c2:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d135      	bne.n	8003640 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d12e      	bne.n	8003640 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fc58 	bl	8002e9c <LL_ADC_REG_IsConversionOngoing>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d11a      	bne.n	8003628 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 020c 	bic.w	r2, r2, #12
 8003600:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003606:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003612:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d112      	bne.n	8003640 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800361e:	f043 0201 	orr.w	r2, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	661a      	str	r2, [r3, #96]	@ 0x60
 8003626:	e00b      	b.n	8003640 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800362c:	f043 0210 	orr.w	r2, r3, #16
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003638:	f043 0201 	orr.w	r2, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f96f 	bl	8003924 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	220c      	movs	r2, #12
 800364c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d004      	beq.n	8003662 <HAL_ADC_IRQHandler+0x1b2>
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	f003 0320 	and.w	r3, r3, #32
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10b      	bne.n	800367a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 80a0 	beq.w	80037ae <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 809a 	beq.w	80037ae <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	2b00      	cmp	r3, #0
 8003684:	d105      	bne.n	8003692 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800368a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff fadc 	bl	8002c54 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800369c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff fa5a 	bl	8002b5c <LL_ADC_REG_IsTriggerSourceSWStart>
 80036a8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a11      	ldr	r2, [pc, #68]	@ (80036f4 <HAL_ADC_IRQHandler+0x244>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d002      	beq.n	80036ba <HAL_ADC_IRQHandler+0x20a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	e000      	b.n	80036bc <HAL_ADC_IRQHandler+0x20c>
 80036ba:	4b0d      	ldr	r3, [pc, #52]	@ (80036f0 <HAL_ADC_IRQHandler+0x240>)
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d008      	beq.n	80036d6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2b06      	cmp	r3, #6
 80036ce:	d002      	beq.n	80036d6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2b07      	cmp	r3, #7
 80036d4:	d104      	bne.n	80036e0 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	623b      	str	r3, [r7, #32]
 80036de:	e014      	b.n	800370a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a03      	ldr	r2, [pc, #12]	@ (80036f4 <HAL_ADC_IRQHandler+0x244>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00a      	beq.n	8003700 <HAL_ADC_IRQHandler+0x250>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	e008      	b.n	8003702 <HAL_ADC_IRQHandler+0x252>
 80036f0:	40022000 	.word	0x40022000
 80036f4:	40022100 	.word	0x40022100
 80036f8:	40022300 	.word	0x40022300
 80036fc:	58026300 	.word	0x58026300
 8003700:	4b84      	ldr	r3, [pc, #528]	@ (8003914 <HAL_ADC_IRQHandler+0x464>)
 8003702:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d047      	beq.n	80037a0 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d007      	beq.n	800372a <HAL_ADC_IRQHandler+0x27a>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d03f      	beq.n	80037a0 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003726:	2b00      	cmp	r3, #0
 8003728:	d13a      	bne.n	80037a0 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003734:	2b40      	cmp	r3, #64	@ 0x40
 8003736:	d133      	bne.n	80037a0 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d12e      	bne.n	80037a0 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff fbbb 	bl	8002ec2 <LL_ADC_INJ_IsConversionOngoing>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d11a      	bne.n	8003788 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003760:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003766:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d112      	bne.n	80037a0 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800377e:	f043 0201 	orr.w	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	661a      	str	r2, [r3, #96]	@ 0x60
 8003786:	e00b      	b.n	80037a0 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378c:	f043 0210 	orr.w	r2, r3, #16
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003798:	f043 0201 	orr.w	r2, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f001 f849 	bl	8004838 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2260      	movs	r2, #96	@ 0x60
 80037ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d011      	beq.n	80037dc <HAL_ADC_IRQHandler+0x32c>
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00c      	beq.n	80037dc <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f8bc 	bl	800394c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2280      	movs	r2, #128	@ 0x80
 80037da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d012      	beq.n	800380c <HAL_ADC_IRQHandler+0x35c>
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00d      	beq.n	800380c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f001 f82f 	bl	8004860 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800380a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003812:	2b00      	cmp	r3, #0
 8003814:	d012      	beq.n	800383c <HAL_ADC_IRQHandler+0x38c>
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00d      	beq.n	800383c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003824:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f001 f821 	bl	8004874 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800383a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	2b00      	cmp	r3, #0
 8003844:	d043      	beq.n	80038ce <HAL_ADC_IRQHandler+0x41e>
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f003 0310 	and.w	r3, r3, #16
 800384c:	2b00      	cmp	r3, #0
 800384e:	d03e      	beq.n	80038ce <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003854:	2b00      	cmp	r3, #0
 8003856:	d102      	bne.n	800385e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003858:	2301      	movs	r3, #1
 800385a:	627b      	str	r3, [r7, #36]	@ 0x24
 800385c:	e021      	b.n	80038a2 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d015      	beq.n	8003890 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a2a      	ldr	r2, [pc, #168]	@ (8003914 <HAL_ADC_IRQHandler+0x464>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d004      	beq.n	8003878 <HAL_ADC_IRQHandler+0x3c8>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a29      	ldr	r2, [pc, #164]	@ (8003918 <HAL_ADC_IRQHandler+0x468>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d101      	bne.n	800387c <HAL_ADC_IRQHandler+0x3cc>
 8003878:	4b28      	ldr	r3, [pc, #160]	@ (800391c <HAL_ADC_IRQHandler+0x46c>)
 800387a:	e000      	b.n	800387e <HAL_ADC_IRQHandler+0x3ce>
 800387c:	4b28      	ldr	r3, [pc, #160]	@ (8003920 <HAL_ADC_IRQHandler+0x470>)
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff fa74 	bl	8002d6c <LL_ADC_GetMultiDMATransfer>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00b      	beq.n	80038a2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800388a:	2301      	movs	r3, #1
 800388c:	627b      	str	r3, [r7, #36]	@ 0x24
 800388e:	e008      	b.n	80038a2 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800389e:	2301      	movs	r3, #1
 80038a0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d10e      	bne.n	80038c6 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ac:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038b8:	f043 0202 	orr.w	r2, r3, #2
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f84d 	bl	8003960 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2210      	movs	r2, #16
 80038cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d018      	beq.n	800390a <HAL_ADC_IRQHandler+0x45a>
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d013      	beq.n	800390a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038f2:	f043 0208 	orr.w	r2, r3, #8
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003902:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 ffa1 	bl	800484c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800390a:	bf00      	nop
 800390c:	3728      	adds	r7, #40	@ 0x28
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40022000 	.word	0x40022000
 8003918:	40022100 	.word	0x40022100
 800391c:	40022300 	.word	0x40022300
 8003920:	58026300 	.word	0x58026300

08003924 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003974:	b590      	push	{r4, r7, lr}
 8003976:	b0b9      	sub	sp, #228	@ 0xe4
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800398e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	4aab      	ldr	r2, [pc, #684]	@ (8003c44 <HAL_ADC_ConfigChannel+0x2d0>)
 8003996:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d102      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x34>
 80039a2:	2302      	movs	r3, #2
 80039a4:	f000 bcfe 	b.w	80043a4 <HAL_ADC_ConfigChannel+0xa30>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff fa71 	bl	8002e9c <LL_ADC_REG_IsConversionOngoing>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f040 84e2 	bne.w	8004386 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	db38      	blt.n	8003a3c <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a9e      	ldr	r2, [pc, #632]	@ (8003c48 <HAL_ADC_ConfigChannel+0x2d4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d033      	beq.n	8003a3c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d108      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x7e>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	0e9b      	lsrs	r3, r3, #26
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	2201      	movs	r2, #1
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	e01d      	b.n	8003a2e <HAL_ADC_ConfigChannel+0xba>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039fe:	fa93 f3a3 	rbit	r3, r3
 8003a02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003a16:	2320      	movs	r3, #32
 8003a18:	e004      	b.n	8003a24 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003a1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a1e:	fab3 f383 	clz	r3, r3
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	f003 031f 	and.w	r3, r3, #31
 8003a28:	2201      	movs	r2, #1
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6812      	ldr	r2, [r2, #0]
 8003a32:	69d1      	ldr	r1, [r2, #28]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f7ff f89a 	bl	8002b82 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff fa22 	bl	8002e9c <LL_ADC_REG_IsConversionOngoing>
 8003a58:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff fa2e 	bl	8002ec2 <LL_ADC_INJ_IsConversionOngoing>
 8003a66:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f040 8270 	bne.w	8003f54 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f040 826b 	bne.w	8003f54 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	6819      	ldr	r1, [r3, #0]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f7ff f8f5 	bl	8002c7a <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a6c      	ldr	r2, [pc, #432]	@ (8003c48 <HAL_ADC_ConfigChannel+0x2d4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d10d      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	695a      	ldr	r2, [r3, #20]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	08db      	lsrs	r3, r3, #3
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ab4:	e032      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ab6:	4b65      	ldr	r3, [pc, #404]	@ (8003c4c <HAL_ADC_ConfigChannel+0x2d8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003abe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ac2:	d10b      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x168>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	695a      	ldr	r2, [r3, #20]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	089b      	lsrs	r3, r3, #2
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	e01d      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x1a4>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f003 0310 	and.w	r3, r3, #16
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10b      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x18e>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	089b      	lsrs	r3, r3, #2
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	e00a      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x1a4>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	695a      	ldr	r2, [r3, #20]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	089b      	lsrs	r3, r3, #2
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d048      	beq.n	8003bb6 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6818      	ldr	r0, [r3, #0]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	6919      	ldr	r1, [r3, #16]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b34:	f7fe ff20 	bl	8002978 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a42      	ldr	r2, [pc, #264]	@ (8003c48 <HAL_ADC_ConfigChannel+0x2d4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d119      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	6919      	ldr	r1, [r3, #16]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f7fe ffb8 	bl	8002ac4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	6919      	ldr	r1, [r3, #16]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d102      	bne.n	8003b6c <HAL_ADC_ConfigChannel+0x1f8>
 8003b66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b6a:	e000      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x1fa>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f7fe ff86 	bl	8002a80 <LL_ADC_SetOffsetSaturation>
 8003b74:	e1ee      	b.n	8003f54 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	6919      	ldr	r1, [r3, #16]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d102      	bne.n	8003b8e <HAL_ADC_ConfigChannel+0x21a>
 8003b88:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003b8c:	e000      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x21c>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	461a      	mov	r2, r3
 8003b92:	f7fe ff53 	bl	8002a3c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6919      	ldr	r1, [r3, #16]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	7e1b      	ldrb	r3, [r3, #24]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d102      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x238>
 8003ba6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003baa:	e000      	b.n	8003bae <HAL_ADC_ConfigChannel+0x23a>
 8003bac:	2300      	movs	r3, #0
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f7fe ff2a 	bl	8002a08 <LL_ADC_SetDataRightShift>
 8003bb4:	e1ce      	b.n	8003f54 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a23      	ldr	r2, [pc, #140]	@ (8003c48 <HAL_ADC_ConfigChannel+0x2d4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	f040 8181 	bne.w	8003ec4 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fe ff07 	bl	80029dc <LL_ADC_GetOffsetChannel>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10a      	bne.n	8003bee <HAL_ADC_ConfigChannel+0x27a>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fe fefc 	bl	80029dc <LL_ADC_GetOffsetChannel>
 8003be4:	4603      	mov	r3, r0
 8003be6:	0e9b      	lsrs	r3, r3, #26
 8003be8:	f003 021f 	and.w	r2, r3, #31
 8003bec:	e01e      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x2b8>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fe fef1 	bl	80029dc <LL_ADC_GetOffsetChannel>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c04:	fa93 f3a3 	rbit	r3, r3
 8003c08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003c0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003c14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003c1c:	2320      	movs	r3, #32
 8003c1e:	e004      	b.n	8003c2a <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003c20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003c24:	fab3 f383 	clz	r3, r3
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10b      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x2dc>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	0e9b      	lsrs	r3, r3, #26
 8003c3e:	f003 031f 	and.w	r3, r3, #31
 8003c42:	e01e      	b.n	8003c82 <HAL_ADC_ConfigChannel+0x30e>
 8003c44:	47ff0000 	.word	0x47ff0000
 8003c48:	58026000 	.word	0x58026000
 8003c4c:	5c001000 	.word	0x5c001000
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c5c:	fa93 f3a3 	rbit	r3, r3
 8003c60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003c64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003c6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003c74:	2320      	movs	r3, #32
 8003c76:	e004      	b.n	8003c82 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003c78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003c7c:	fab3 f383 	clz	r3, r3
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d106      	bne.n	8003c94 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe ff3a 	bl	8002b08 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2101      	movs	r1, #1
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe fe9e 	bl	80029dc <LL_ADC_GetOffsetChannel>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10a      	bne.n	8003cc0 <HAL_ADC_ConfigChannel+0x34c>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2101      	movs	r1, #1
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fe fe93 	bl	80029dc <LL_ADC_GetOffsetChannel>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	0e9b      	lsrs	r3, r3, #26
 8003cba:	f003 021f 	and.w	r2, r3, #31
 8003cbe:	e01e      	b.n	8003cfe <HAL_ADC_ConfigChannel+0x38a>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe fe88 	bl	80029dc <LL_ADC_GetOffsetChannel>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cd6:	fa93 f3a3 	rbit	r3, r3
 8003cda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003cde:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003ce6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003cee:	2320      	movs	r3, #32
 8003cf0:	e004      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003cf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003cf6:	fab3 f383 	clz	r3, r3
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d105      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x3a2>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	0e9b      	lsrs	r3, r3, #26
 8003d10:	f003 031f 	and.w	r3, r3, #31
 8003d14:	e018      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x3d4>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d22:	fa93 f3a3 	rbit	r3, r3
 8003d26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003d2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d2e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003d32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003d3a:	2320      	movs	r3, #32
 8003d3c:	e004      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8003d3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d42:	fab3 f383 	clz	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d106      	bne.n	8003d5a <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2200      	movs	r2, #0
 8003d52:	2101      	movs	r1, #1
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fe fed7 	bl	8002b08 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2102      	movs	r1, #2
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fe fe3b 	bl	80029dc <LL_ADC_GetOffsetChannel>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10a      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x412>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2102      	movs	r1, #2
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fe fe30 	bl	80029dc <LL_ADC_GetOffsetChannel>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	0e9b      	lsrs	r3, r3, #26
 8003d80:	f003 021f 	and.w	r2, r3, #31
 8003d84:	e01e      	b.n	8003dc4 <HAL_ADC_ConfigChannel+0x450>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2102      	movs	r1, #2
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fe fe25 	bl	80029dc <LL_ADC_GetOffsetChannel>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d9c:	fa93 f3a3 	rbit	r3, r3
 8003da0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003da4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003da8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003db4:	2320      	movs	r3, #32
 8003db6:	e004      	b.n	8003dc2 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dbc:	fab3 f383 	clz	r3, r3
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d105      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x468>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	0e9b      	lsrs	r3, r3, #26
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	e014      	b.n	8003e06 <HAL_ADC_ConfigChannel+0x492>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003de4:	fa93 f3a3 	rbit	r3, r3
 8003de8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003dea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003df0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003df8:	2320      	movs	r3, #32
 8003dfa:	e004      	b.n	8003e06 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003dfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e00:	fab3 f383 	clz	r3, r3
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d106      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2102      	movs	r1, #2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe fe78 	bl	8002b08 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2103      	movs	r1, #3
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fe fddc 	bl	80029dc <LL_ADC_GetOffsetChannel>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x4d0>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2103      	movs	r1, #3
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fe fdd1 	bl	80029dc <LL_ADC_GetOffsetChannel>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	0e9b      	lsrs	r3, r3, #26
 8003e3e:	f003 021f 	and.w	r2, r3, #31
 8003e42:	e017      	b.n	8003e74 <HAL_ADC_ConfigChannel+0x500>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2103      	movs	r1, #3
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe fdc6 	bl	80029dc <LL_ADC_GetOffsetChannel>
 8003e50:	4603      	mov	r3, r0
 8003e52:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e56:	fa93 f3a3 	rbit	r3, r3
 8003e5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003e5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e5e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003e60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003e66:	2320      	movs	r3, #32
 8003e68:	e003      	b.n	8003e72 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8003e6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e6c:	fab3 f383 	clz	r3, r3
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d105      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x518>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	0e9b      	lsrs	r3, r3, #26
 8003e86:	f003 031f 	and.w	r3, r3, #31
 8003e8a:	e011      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x53c>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e94:	fa93 f3a3 	rbit	r3, r3
 8003e98:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003e9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e9c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003e9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003ea4:	2320      	movs	r3, #32
 8003ea6:	e003      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003ea8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003eaa:	fab3 f383 	clz	r3, r3
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d14f      	bne.n	8003f54 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2103      	movs	r1, #3
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fe fe23 	bl	8002b08 <LL_ADC_SetOffsetState>
 8003ec2:	e047      	b.n	8003f54 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	069b      	lsls	r3, r3, #26
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d107      	bne.n	8003ee8 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ee6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003eee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	069b      	lsls	r3, r3, #26
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d107      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f0a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	069b      	lsls	r3, r3, #26
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d107      	bne.n	8003f30 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f2e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	069b      	lsls	r3, r3, #26
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d107      	bne.n	8003f54 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f52:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fe ff77 	bl	8002e4c <LL_ADC_IsEnabled>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f040 8219 	bne.w	8004398 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6818      	ldr	r0, [r3, #0]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	6819      	ldr	r1, [r3, #0]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	461a      	mov	r2, r3
 8003f74:	f7fe feac 	bl	8002cd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4aa1      	ldr	r2, [pc, #644]	@ (8004204 <HAL_ADC_ConfigChannel+0x890>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	f040 812e 	bne.w	80041e0 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10b      	bne.n	8003fac <HAL_ADC_ConfigChannel+0x638>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	0e9b      	lsrs	r3, r3, #26
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	2b09      	cmp	r3, #9
 8003fa2:	bf94      	ite	ls
 8003fa4:	2301      	movls	r3, #1
 8003fa6:	2300      	movhi	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	e019      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0x66c>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fb4:	fa93 f3a3 	rbit	r3, r3
 8003fb8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003fbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003fc4:	2320      	movs	r3, #32
 8003fc6:	e003      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003fc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fca:	fab3 f383 	clz	r3, r3
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	f003 031f 	and.w	r3, r3, #31
 8003fd6:	2b09      	cmp	r3, #9
 8003fd8:	bf94      	ite	ls
 8003fda:	2301      	movls	r3, #1
 8003fdc:	2300      	movhi	r3, #0
 8003fde:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d079      	beq.n	80040d8 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d107      	bne.n	8004000 <HAL_ADC_ConfigChannel+0x68c>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	0e9b      	lsrs	r3, r3, #26
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	069b      	lsls	r3, r3, #26
 8003ffa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ffe:	e015      	b.n	800402c <HAL_ADC_ConfigChannel+0x6b8>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004008:	fa93 f3a3 	rbit	r3, r3
 800400c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800400e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004010:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004012:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8004018:	2320      	movs	r3, #32
 800401a:	e003      	b.n	8004024 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 800401c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800401e:	fab3 f383 	clz	r3, r3
 8004022:	b2db      	uxtb	r3, r3
 8004024:	3301      	adds	r3, #1
 8004026:	069b      	lsls	r3, r3, #26
 8004028:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004034:	2b00      	cmp	r3, #0
 8004036:	d109      	bne.n	800404c <HAL_ADC_ConfigChannel+0x6d8>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	0e9b      	lsrs	r3, r3, #26
 800403e:	3301      	adds	r3, #1
 8004040:	f003 031f 	and.w	r3, r3, #31
 8004044:	2101      	movs	r1, #1
 8004046:	fa01 f303 	lsl.w	r3, r1, r3
 800404a:	e017      	b.n	800407c <HAL_ADC_ConfigChannel+0x708>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004052:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004054:	fa93 f3a3 	rbit	r3, r3
 8004058:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800405a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800405c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800405e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004064:	2320      	movs	r3, #32
 8004066:	e003      	b.n	8004070 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8004068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800406a:	fab3 f383 	clz	r3, r3
 800406e:	b2db      	uxtb	r3, r3
 8004070:	3301      	adds	r3, #1
 8004072:	f003 031f 	and.w	r3, r3, #31
 8004076:	2101      	movs	r1, #1
 8004078:	fa01 f303 	lsl.w	r3, r1, r3
 800407c:	ea42 0103 	orr.w	r1, r2, r3
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10a      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x72e>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	0e9b      	lsrs	r3, r3, #26
 8004092:	3301      	adds	r3, #1
 8004094:	f003 021f 	and.w	r2, r3, #31
 8004098:	4613      	mov	r3, r2
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	4413      	add	r3, r2
 800409e:	051b      	lsls	r3, r3, #20
 80040a0:	e018      	b.n	80040d4 <HAL_ADC_ConfigChannel+0x760>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040aa:	fa93 f3a3 	rbit	r3, r3
 80040ae:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80040b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80040b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 80040ba:	2320      	movs	r3, #32
 80040bc:	e003      	b.n	80040c6 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 80040be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c0:	fab3 f383 	clz	r3, r3
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	3301      	adds	r3, #1
 80040c8:	f003 021f 	and.w	r2, r3, #31
 80040cc:	4613      	mov	r3, r2
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	4413      	add	r3, r2
 80040d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040d4:	430b      	orrs	r3, r1
 80040d6:	e07e      	b.n	80041d6 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d107      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x780>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	0e9b      	lsrs	r3, r3, #26
 80040ea:	3301      	adds	r3, #1
 80040ec:	069b      	lsls	r3, r3, #26
 80040ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040f2:	e015      	b.n	8004120 <HAL_ADC_ConfigChannel+0x7ac>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040fc:	fa93 f3a3 	rbit	r3, r3
 8004100:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004104:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 800410c:	2320      	movs	r3, #32
 800410e:	e003      	b.n	8004118 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8004110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004112:	fab3 f383 	clz	r3, r3
 8004116:	b2db      	uxtb	r3, r3
 8004118:	3301      	adds	r3, #1
 800411a:	069b      	lsls	r3, r3, #26
 800411c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004128:	2b00      	cmp	r3, #0
 800412a:	d109      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x7cc>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	0e9b      	lsrs	r3, r3, #26
 8004132:	3301      	adds	r3, #1
 8004134:	f003 031f 	and.w	r3, r3, #31
 8004138:	2101      	movs	r1, #1
 800413a:	fa01 f303 	lsl.w	r3, r1, r3
 800413e:	e017      	b.n	8004170 <HAL_ADC_ConfigChannel+0x7fc>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	fa93 f3a3 	rbit	r3, r3
 800414c:	61bb      	str	r3, [r7, #24]
  return result;
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8004158:	2320      	movs	r3, #32
 800415a:	e003      	b.n	8004164 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	fab3 f383 	clz	r3, r3
 8004162:	b2db      	uxtb	r3, r3
 8004164:	3301      	adds	r3, #1
 8004166:	f003 031f 	and.w	r3, r3, #31
 800416a:	2101      	movs	r1, #1
 800416c:	fa01 f303 	lsl.w	r3, r1, r3
 8004170:	ea42 0103 	orr.w	r1, r2, r3
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10d      	bne.n	800419c <HAL_ADC_ConfigChannel+0x828>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	0e9b      	lsrs	r3, r3, #26
 8004186:	3301      	adds	r3, #1
 8004188:	f003 021f 	and.w	r2, r3, #31
 800418c:	4613      	mov	r3, r2
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	4413      	add	r3, r2
 8004192:	3b1e      	subs	r3, #30
 8004194:	051b      	lsls	r3, r3, #20
 8004196:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800419a:	e01b      	b.n	80041d4 <HAL_ADC_ConfigChannel+0x860>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	fa93 f3a3 	rbit	r3, r3
 80041a8:	60fb      	str	r3, [r7, #12]
  return result;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80041b4:	2320      	movs	r3, #32
 80041b6:	e003      	b.n	80041c0 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	fab3 f383 	clz	r3, r3
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	3301      	adds	r3, #1
 80041c2:	f003 021f 	and.w	r2, r3, #31
 80041c6:	4613      	mov	r3, r2
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	4413      	add	r3, r2
 80041cc:	3b1e      	subs	r3, #30
 80041ce:	051b      	lsls	r3, r3, #20
 80041d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041d4:	430b      	orrs	r3, r1
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	6892      	ldr	r2, [r2, #8]
 80041da:	4619      	mov	r1, r3
 80041dc:	f7fe fd4d 	bl	8002c7a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f280 80d7 	bge.w	8004398 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a06      	ldr	r2, [pc, #24]	@ (8004208 <HAL_ADC_ConfigChannel+0x894>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d004      	beq.n	80041fe <HAL_ADC_ConfigChannel+0x88a>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a04      	ldr	r2, [pc, #16]	@ (800420c <HAL_ADC_ConfigChannel+0x898>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d10a      	bne.n	8004214 <HAL_ADC_ConfigChannel+0x8a0>
 80041fe:	4b04      	ldr	r3, [pc, #16]	@ (8004210 <HAL_ADC_ConfigChannel+0x89c>)
 8004200:	e009      	b.n	8004216 <HAL_ADC_ConfigChannel+0x8a2>
 8004202:	bf00      	nop
 8004204:	47ff0000 	.word	0x47ff0000
 8004208:	40022000 	.word	0x40022000
 800420c:	40022100 	.word	0x40022100
 8004210:	40022300 	.word	0x40022300
 8004214:	4b65      	ldr	r3, [pc, #404]	@ (80043ac <HAL_ADC_ConfigChannel+0xa38>)
 8004216:	4618      	mov	r0, r3
 8004218:	f7fe fba0 	bl	800295c <LL_ADC_GetCommonPathInternalCh>
 800421c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a62      	ldr	r2, [pc, #392]	@ (80043b0 <HAL_ADC_ConfigChannel+0xa3c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d004      	beq.n	8004234 <HAL_ADC_ConfigChannel+0x8c0>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a61      	ldr	r2, [pc, #388]	@ (80043b4 <HAL_ADC_ConfigChannel+0xa40>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d10e      	bne.n	8004252 <HAL_ADC_ConfigChannel+0x8de>
 8004234:	485e      	ldr	r0, [pc, #376]	@ (80043b0 <HAL_ADC_ConfigChannel+0xa3c>)
 8004236:	f7fe fe09 	bl	8002e4c <LL_ADC_IsEnabled>
 800423a:	4604      	mov	r4, r0
 800423c:	485d      	ldr	r0, [pc, #372]	@ (80043b4 <HAL_ADC_ConfigChannel+0xa40>)
 800423e:	f7fe fe05 	bl	8002e4c <LL_ADC_IsEnabled>
 8004242:	4603      	mov	r3, r0
 8004244:	4323      	orrs	r3, r4
 8004246:	2b00      	cmp	r3, #0
 8004248:	bf0c      	ite	eq
 800424a:	2301      	moveq	r3, #1
 800424c:	2300      	movne	r3, #0
 800424e:	b2db      	uxtb	r3, r3
 8004250:	e008      	b.n	8004264 <HAL_ADC_ConfigChannel+0x8f0>
 8004252:	4859      	ldr	r0, [pc, #356]	@ (80043b8 <HAL_ADC_ConfigChannel+0xa44>)
 8004254:	f7fe fdfa 	bl	8002e4c <LL_ADC_IsEnabled>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	bf0c      	ite	eq
 800425e:	2301      	moveq	r3, #1
 8004260:	2300      	movne	r3, #0
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 8084 	beq.w	8004372 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a53      	ldr	r2, [pc, #332]	@ (80043bc <HAL_ADC_ConfigChannel+0xa48>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d132      	bne.n	80042da <HAL_ADC_ConfigChannel+0x966>
 8004274:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004278:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d12c      	bne.n	80042da <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a4c      	ldr	r2, [pc, #304]	@ (80043b8 <HAL_ADC_ConfigChannel+0xa44>)
 8004286:	4293      	cmp	r3, r2
 8004288:	f040 8086 	bne.w	8004398 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a47      	ldr	r2, [pc, #284]	@ (80043b0 <HAL_ADC_ConfigChannel+0xa3c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d004      	beq.n	80042a0 <HAL_ADC_ConfigChannel+0x92c>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a46      	ldr	r2, [pc, #280]	@ (80043b4 <HAL_ADC_ConfigChannel+0xa40>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d101      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x930>
 80042a0:	4a47      	ldr	r2, [pc, #284]	@ (80043c0 <HAL_ADC_ConfigChannel+0xa4c>)
 80042a2:	e000      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x932>
 80042a4:	4a41      	ldr	r2, [pc, #260]	@ (80043ac <HAL_ADC_ConfigChannel+0xa38>)
 80042a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042ae:	4619      	mov	r1, r3
 80042b0:	4610      	mov	r0, r2
 80042b2:	f7fe fb40 	bl	8002936 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042b6:	4b43      	ldr	r3, [pc, #268]	@ (80043c4 <HAL_ADC_ConfigChannel+0xa50>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	099b      	lsrs	r3, r3, #6
 80042bc:	4a42      	ldr	r2, [pc, #264]	@ (80043c8 <HAL_ADC_ConfigChannel+0xa54>)
 80042be:	fba2 2303 	umull	r2, r3, r2, r3
 80042c2:	099b      	lsrs	r3, r3, #6
 80042c4:	3301      	adds	r3, #1
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80042ca:	e002      	b.n	80042d2 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1f9      	bne.n	80042cc <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042d8:	e05e      	b.n	8004398 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a3b      	ldr	r2, [pc, #236]	@ (80043cc <HAL_ADC_ConfigChannel+0xa58>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d120      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x9b2>
 80042e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d11a      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a30      	ldr	r2, [pc, #192]	@ (80043b8 <HAL_ADC_ConfigChannel+0xa44>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d14e      	bne.n	8004398 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a2c      	ldr	r2, [pc, #176]	@ (80043b0 <HAL_ADC_ConfigChannel+0xa3c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d004      	beq.n	800430e <HAL_ADC_ConfigChannel+0x99a>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a2a      	ldr	r2, [pc, #168]	@ (80043b4 <HAL_ADC_ConfigChannel+0xa40>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d101      	bne.n	8004312 <HAL_ADC_ConfigChannel+0x99e>
 800430e:	4a2c      	ldr	r2, [pc, #176]	@ (80043c0 <HAL_ADC_ConfigChannel+0xa4c>)
 8004310:	e000      	b.n	8004314 <HAL_ADC_ConfigChannel+0x9a0>
 8004312:	4a26      	ldr	r2, [pc, #152]	@ (80043ac <HAL_ADC_ConfigChannel+0xa38>)
 8004314:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004318:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800431c:	4619      	mov	r1, r3
 800431e:	4610      	mov	r0, r2
 8004320:	f7fe fb09 	bl	8002936 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004324:	e038      	b.n	8004398 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a29      	ldr	r2, [pc, #164]	@ (80043d0 <HAL_ADC_ConfigChannel+0xa5c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d133      	bne.n	8004398 <HAL_ADC_ConfigChannel+0xa24>
 8004330:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004334:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d12d      	bne.n	8004398 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a1d      	ldr	r2, [pc, #116]	@ (80043b8 <HAL_ADC_ConfigChannel+0xa44>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d128      	bne.n	8004398 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a19      	ldr	r2, [pc, #100]	@ (80043b0 <HAL_ADC_ConfigChannel+0xa3c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d004      	beq.n	800435a <HAL_ADC_ConfigChannel+0x9e6>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a17      	ldr	r2, [pc, #92]	@ (80043b4 <HAL_ADC_ConfigChannel+0xa40>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d101      	bne.n	800435e <HAL_ADC_ConfigChannel+0x9ea>
 800435a:	4a19      	ldr	r2, [pc, #100]	@ (80043c0 <HAL_ADC_ConfigChannel+0xa4c>)
 800435c:	e000      	b.n	8004360 <HAL_ADC_ConfigChannel+0x9ec>
 800435e:	4a13      	ldr	r2, [pc, #76]	@ (80043ac <HAL_ADC_ConfigChannel+0xa38>)
 8004360:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004364:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004368:	4619      	mov	r1, r3
 800436a:	4610      	mov	r0, r2
 800436c:	f7fe fae3 	bl	8002936 <LL_ADC_SetCommonPathInternalCh>
 8004370:	e012      	b.n	8004398 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004376:	f043 0220 	orr.w	r2, r3, #32
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004384:	e008      	b.n	8004398 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800438a:	f043 0220 	orr.w	r2, r3, #32
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80043a0:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	37e4      	adds	r7, #228	@ 0xe4
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd90      	pop	{r4, r7, pc}
 80043ac:	58026300 	.word	0x58026300
 80043b0:	40022000 	.word	0x40022000
 80043b4:	40022100 	.word	0x40022100
 80043b8:	58026000 	.word	0x58026000
 80043bc:	c7520000 	.word	0xc7520000
 80043c0:	40022300 	.word	0x40022300
 80043c4:	24000054 	.word	0x24000054
 80043c8:	053e2d63 	.word	0x053e2d63
 80043cc:	c3210000 	.word	0xc3210000
 80043d0:	cb840000 	.word	0xcb840000

080043d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fe fd33 	bl	8002e4c <LL_ADC_IsEnabled>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d16e      	bne.n	80044ca <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	4b38      	ldr	r3, [pc, #224]	@ (80044d4 <ADC_Enable+0x100>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00d      	beq.n	8004416 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043fe:	f043 0210 	orr.w	r2, r3, #16
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800440a:	f043 0201 	orr.w	r2, r3, #1
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e05a      	b.n	80044cc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f7fe fd02 	bl	8002e24 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004420:	f7fe fa30 	bl	8002884 <HAL_GetTick>
 8004424:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a2b      	ldr	r2, [pc, #172]	@ (80044d8 <ADC_Enable+0x104>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d004      	beq.n	800443a <ADC_Enable+0x66>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a29      	ldr	r2, [pc, #164]	@ (80044dc <ADC_Enable+0x108>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d101      	bne.n	800443e <ADC_Enable+0x6a>
 800443a:	4b29      	ldr	r3, [pc, #164]	@ (80044e0 <ADC_Enable+0x10c>)
 800443c:	e000      	b.n	8004440 <ADC_Enable+0x6c>
 800443e:	4b29      	ldr	r3, [pc, #164]	@ (80044e4 <ADC_Enable+0x110>)
 8004440:	4618      	mov	r0, r3
 8004442:	f7fe fc85 	bl	8002d50 <LL_ADC_GetMultimode>
 8004446:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a23      	ldr	r2, [pc, #140]	@ (80044dc <ADC_Enable+0x108>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d002      	beq.n	8004458 <ADC_Enable+0x84>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	e000      	b.n	800445a <ADC_Enable+0x86>
 8004458:	4b1f      	ldr	r3, [pc, #124]	@ (80044d8 <ADC_Enable+0x104>)
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	4293      	cmp	r3, r2
 8004460:	d02c      	beq.n	80044bc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d130      	bne.n	80044ca <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004468:	e028      	b.n	80044bc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f7fe fcec 	bl	8002e4c <LL_ADC_IsEnabled>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d104      	bne.n	8004484 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7fe fcd0 	bl	8002e24 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004484:	f7fe f9fe 	bl	8002884 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d914      	bls.n	80044bc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b01      	cmp	r3, #1
 800449e:	d00d      	beq.n	80044bc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a4:	f043 0210 	orr.w	r2, r3, #16
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044b0:	f043 0201 	orr.w	r2, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e007      	b.n	80044cc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d1cf      	bne.n	800446a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	8000003f 	.word	0x8000003f
 80044d8:	40022000 	.word	0x40022000
 80044dc:	40022100 	.word	0x40022100
 80044e0:	40022300 	.word	0x40022300
 80044e4:	58026300 	.word	0x58026300

080044e8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044fa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d14b      	bne.n	800459a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004506:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b00      	cmp	r3, #0
 800451a:	d021      	beq.n	8004560 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	f7fe fb1b 	bl	8002b5c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d032      	beq.n	8004592 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d12b      	bne.n	8004592 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800453e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800454a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d11f      	bne.n	8004592 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004556:	f043 0201 	orr.w	r2, r3, #1
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	661a      	str	r2, [r3, #96]	@ 0x60
 800455e:	e018      	b.n	8004592 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d111      	bne.n	8004592 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004572:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800457e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d105      	bne.n	8004592 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800458a:	f043 0201 	orr.w	r2, r3, #1
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f7ff f9c6 	bl	8003924 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004598:	e00e      	b.n	80045b8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f7ff f9da 	bl	8003960 <HAL_ADC_ErrorCallback>
}
 80045ac:	e004      	b.n	80045b8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	4798      	blx	r3
}
 80045b8:	bf00      	nop
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045cc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f7ff f9b2 	bl	8003938 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045d4:	bf00      	nop
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045fa:	f043 0204 	orr.w	r2, r3, #4
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f7ff f9ac 	bl	8003960 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004608:	bf00      	nop
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a6c      	ldr	r2, [pc, #432]	@ (80047d0 <ADC_ConfigureBoostMode+0x1c0>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d004      	beq.n	800462c <ADC_ConfigureBoostMode+0x1c>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a6b      	ldr	r2, [pc, #428]	@ (80047d4 <ADC_ConfigureBoostMode+0x1c4>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d109      	bne.n	8004640 <ADC_ConfigureBoostMode+0x30>
 800462c:	4b6a      	ldr	r3, [pc, #424]	@ (80047d8 <ADC_ConfigureBoostMode+0x1c8>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004634:	2b00      	cmp	r3, #0
 8004636:	bf14      	ite	ne
 8004638:	2301      	movne	r3, #1
 800463a:	2300      	moveq	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e008      	b.n	8004652 <ADC_ConfigureBoostMode+0x42>
 8004640:	4b66      	ldr	r3, [pc, #408]	@ (80047dc <ADC_ConfigureBoostMode+0x1cc>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004648:	2b00      	cmp	r3, #0
 800464a:	bf14      	ite	ne
 800464c:	2301      	movne	r3, #1
 800464e:	2300      	moveq	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d01c      	beq.n	8004690 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004656:	f004 fa85 	bl	8008b64 <HAL_RCC_GetHCLKFreq>
 800465a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004664:	d010      	beq.n	8004688 <ADC_ConfigureBoostMode+0x78>
 8004666:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800466a:	d873      	bhi.n	8004754 <ADC_ConfigureBoostMode+0x144>
 800466c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004670:	d002      	beq.n	8004678 <ADC_ConfigureBoostMode+0x68>
 8004672:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004676:	d16d      	bne.n	8004754 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	0c1b      	lsrs	r3, r3, #16
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	fbb2 f3f3 	udiv	r3, r2, r3
 8004684:	60fb      	str	r3, [r7, #12]
        break;
 8004686:	e068      	b.n	800475a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	089b      	lsrs	r3, r3, #2
 800468c:	60fb      	str	r3, [r7, #12]
        break;
 800468e:	e064      	b.n	800475a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004690:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004694:	f04f 0100 	mov.w	r1, #0
 8004698:	f005 fc60 	bl	8009f5c <HAL_RCCEx_GetPeriphCLKFreq>
 800469c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80046a6:	d051      	beq.n	800474c <ADC_ConfigureBoostMode+0x13c>
 80046a8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80046ac:	d854      	bhi.n	8004758 <ADC_ConfigureBoostMode+0x148>
 80046ae:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80046b2:	d047      	beq.n	8004744 <ADC_ConfigureBoostMode+0x134>
 80046b4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80046b8:	d84e      	bhi.n	8004758 <ADC_ConfigureBoostMode+0x148>
 80046ba:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80046be:	d03d      	beq.n	800473c <ADC_ConfigureBoostMode+0x12c>
 80046c0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80046c4:	d848      	bhi.n	8004758 <ADC_ConfigureBoostMode+0x148>
 80046c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046ca:	d033      	beq.n	8004734 <ADC_ConfigureBoostMode+0x124>
 80046cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046d0:	d842      	bhi.n	8004758 <ADC_ConfigureBoostMode+0x148>
 80046d2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80046d6:	d029      	beq.n	800472c <ADC_ConfigureBoostMode+0x11c>
 80046d8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80046dc:	d83c      	bhi.n	8004758 <ADC_ConfigureBoostMode+0x148>
 80046de:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80046e2:	d01a      	beq.n	800471a <ADC_ConfigureBoostMode+0x10a>
 80046e4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80046e8:	d836      	bhi.n	8004758 <ADC_ConfigureBoostMode+0x148>
 80046ea:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80046ee:	d014      	beq.n	800471a <ADC_ConfigureBoostMode+0x10a>
 80046f0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80046f4:	d830      	bhi.n	8004758 <ADC_ConfigureBoostMode+0x148>
 80046f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046fa:	d00e      	beq.n	800471a <ADC_ConfigureBoostMode+0x10a>
 80046fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004700:	d82a      	bhi.n	8004758 <ADC_ConfigureBoostMode+0x148>
 8004702:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004706:	d008      	beq.n	800471a <ADC_ConfigureBoostMode+0x10a>
 8004708:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800470c:	d824      	bhi.n	8004758 <ADC_ConfigureBoostMode+0x148>
 800470e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004712:	d002      	beq.n	800471a <ADC_ConfigureBoostMode+0x10a>
 8004714:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004718:	d11e      	bne.n	8004758 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	0c9b      	lsrs	r3, r3, #18
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	fbb2 f3f3 	udiv	r3, r2, r3
 8004728:	60fb      	str	r3, [r7, #12]
        break;
 800472a:	e016      	b.n	800475a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	091b      	lsrs	r3, r3, #4
 8004730:	60fb      	str	r3, [r7, #12]
        break;
 8004732:	e012      	b.n	800475a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	60fb      	str	r3, [r7, #12]
        break;
 800473a:	e00e      	b.n	800475a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	099b      	lsrs	r3, r3, #6
 8004740:	60fb      	str	r3, [r7, #12]
        break;
 8004742:	e00a      	b.n	800475a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	09db      	lsrs	r3, r3, #7
 8004748:	60fb      	str	r3, [r7, #12]
        break;
 800474a:	e006      	b.n	800475a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	0a1b      	lsrs	r3, r3, #8
 8004750:	60fb      	str	r3, [r7, #12]
        break;
 8004752:	e002      	b.n	800475a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004754:	bf00      	nop
 8004756:	e000      	b.n	800475a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004758:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	085b      	lsrs	r3, r3, #1
 800475e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4a1f      	ldr	r2, [pc, #124]	@ (80047e0 <ADC_ConfigureBoostMode+0x1d0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d808      	bhi.n	800477a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689a      	ldr	r2, [r3, #8]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004776:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004778:	e025      	b.n	80047c6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4a19      	ldr	r2, [pc, #100]	@ (80047e4 <ADC_ConfigureBoostMode+0x1d4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d80a      	bhi.n	8004798 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004794:	609a      	str	r2, [r3, #8]
}
 8004796:	e016      	b.n	80047c6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4a13      	ldr	r2, [pc, #76]	@ (80047e8 <ADC_ConfigureBoostMode+0x1d8>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d80a      	bhi.n	80047b6 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047b2:	609a      	str	r2, [r3, #8]
}
 80047b4:	e007      	b.n	80047c6 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80047c4:	609a      	str	r2, [r3, #8]
}
 80047c6:	bf00      	nop
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40022000 	.word	0x40022000
 80047d4:	40022100 	.word	0x40022100
 80047d8:	40022300 	.word	0x40022300
 80047dc:	58026300 	.word	0x58026300
 80047e0:	005f5e10 	.word	0x005f5e10
 80047e4:	00bebc20 	.word	0x00bebc20
 80047e8:	017d7840 	.word	0x017d7840

080047ec <LL_ADC_IsEnabled>:
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <LL_ADC_IsEnabled+0x18>
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <LL_ADC_IsEnabled+0x1a>
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <LL_ADC_REG_IsConversionOngoing>:
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b04      	cmp	r3, #4
 8004824:	d101      	bne.n	800482a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800489c:	b590      	push	{r4, r7, lr}
 800489e:	b0a3      	sub	sp, #140	@ 0x8c
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d101      	bne.n	80048ba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80048b6:	2302      	movs	r3, #2
 80048b8:	e0c1      	b.n	8004a3e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80048c2:	2300      	movs	r3, #0
 80048c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80048c6:	2300      	movs	r3, #0
 80048c8:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a5e      	ldr	r2, [pc, #376]	@ (8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d102      	bne.n	80048da <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80048d4:	4b5d      	ldr	r3, [pc, #372]	@ (8004a4c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	e001      	b.n	80048de <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10b      	bne.n	80048fc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e8:	f043 0220 	orr.w	r2, r3, #32
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e0a0      	b.n	8004a3e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7ff ff87 	bl	8004812 <LL_ADC_REG_IsConversionOngoing>
 8004904:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f7ff ff80 	bl	8004812 <LL_ADC_REG_IsConversionOngoing>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	f040 8081 	bne.w	8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800491a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800491e:	2b00      	cmp	r3, #0
 8004920:	d17c      	bne.n	8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a48      	ldr	r2, [pc, #288]	@ (8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d004      	beq.n	8004936 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a46      	ldr	r2, [pc, #280]	@ (8004a4c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d101      	bne.n	800493a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004936:	4b46      	ldr	r3, [pc, #280]	@ (8004a50 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004938:	e000      	b.n	800493c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800493a:	4b46      	ldr	r3, [pc, #280]	@ (8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800493c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d039      	beq.n	80049ba <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004946:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	431a      	orrs	r2, r3
 8004954:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004956:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a3a      	ldr	r2, [pc, #232]	@ (8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d004      	beq.n	800496c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a39      	ldr	r2, [pc, #228]	@ (8004a4c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d10e      	bne.n	800498a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800496c:	4836      	ldr	r0, [pc, #216]	@ (8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800496e:	f7ff ff3d 	bl	80047ec <LL_ADC_IsEnabled>
 8004972:	4604      	mov	r4, r0
 8004974:	4835      	ldr	r0, [pc, #212]	@ (8004a4c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004976:	f7ff ff39 	bl	80047ec <LL_ADC_IsEnabled>
 800497a:	4603      	mov	r3, r0
 800497c:	4323      	orrs	r3, r4
 800497e:	2b00      	cmp	r3, #0
 8004980:	bf0c      	ite	eq
 8004982:	2301      	moveq	r3, #1
 8004984:	2300      	movne	r3, #0
 8004986:	b2db      	uxtb	r3, r3
 8004988:	e008      	b.n	800499c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800498a:	4833      	ldr	r0, [pc, #204]	@ (8004a58 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800498c:	f7ff ff2e 	bl	80047ec <LL_ADC_IsEnabled>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	bf0c      	ite	eq
 8004996:	2301      	moveq	r3, #1
 8004998:	2300      	movne	r3, #0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d047      	beq.n	8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80049a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	4b2d      	ldr	r3, [pc, #180]	@ (8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80049a6:	4013      	ands	r3, r2
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	6811      	ldr	r1, [r2, #0]
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	6892      	ldr	r2, [r2, #8]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	431a      	orrs	r2, r3
 80049b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049b6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049b8:	e03a      	b.n	8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80049ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049c4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a1f      	ldr	r2, [pc, #124]	@ (8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d004      	beq.n	80049da <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a1d      	ldr	r2, [pc, #116]	@ (8004a4c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d10e      	bne.n	80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80049da:	481b      	ldr	r0, [pc, #108]	@ (8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049dc:	f7ff ff06 	bl	80047ec <LL_ADC_IsEnabled>
 80049e0:	4604      	mov	r4, r0
 80049e2:	481a      	ldr	r0, [pc, #104]	@ (8004a4c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049e4:	f7ff ff02 	bl	80047ec <LL_ADC_IsEnabled>
 80049e8:	4603      	mov	r3, r0
 80049ea:	4323      	orrs	r3, r4
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	bf0c      	ite	eq
 80049f0:	2301      	moveq	r3, #1
 80049f2:	2300      	movne	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	e008      	b.n	8004a0a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80049f8:	4817      	ldr	r0, [pc, #92]	@ (8004a58 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80049fa:	f7ff fef7 	bl	80047ec <LL_ADC_IsEnabled>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	bf0c      	ite	eq
 8004a04:	2301      	moveq	r3, #1
 8004a06:	2300      	movne	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d010      	beq.n	8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004a0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	4b12      	ldr	r3, [pc, #72]	@ (8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004a18:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a1a:	e009      	b.n	8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a20:	f043 0220 	orr.w	r2, r3, #32
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004a2e:	e000      	b.n	8004a32 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a30:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004a3a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	378c      	adds	r7, #140	@ 0x8c
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd90      	pop	{r4, r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40022000 	.word	0x40022000
 8004a4c:	40022100 	.word	0x40022100
 8004a50:	40022300 	.word	0x40022300
 8004a54:	58026300 	.word	0x58026300
 8004a58:	58026000 	.word	0x58026000
 8004a5c:	fffff0e0 	.word	0xfffff0e0

08004a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a70:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa0 <__NVIC_SetPriorityGrouping+0x40>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004a88:	4b06      	ldr	r3, [pc, #24]	@ (8004aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a8e:	4a04      	ldr	r2, [pc, #16]	@ (8004aa0 <__NVIC_SetPriorityGrouping+0x40>)
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	60d3      	str	r3, [r2, #12]
}
 8004a94:	bf00      	nop
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	e000ed00 	.word	0xe000ed00
 8004aa4:	05fa0000 	.word	0x05fa0000

08004aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004aac:	4b04      	ldr	r3, [pc, #16]	@ (8004ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	0a1b      	lsrs	r3, r3, #8
 8004ab2:	f003 0307 	and.w	r3, r3, #7
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	e000ed00 	.word	0xe000ed00

08004ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	db0b      	blt.n	8004aee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ad6:	88fb      	ldrh	r3, [r7, #6]
 8004ad8:	f003 021f 	and.w	r2, r3, #31
 8004adc:	4907      	ldr	r1, [pc, #28]	@ (8004afc <__NVIC_EnableIRQ+0x38>)
 8004ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ae2:	095b      	lsrs	r3, r3, #5
 8004ae4:	2001      	movs	r0, #1
 8004ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8004aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	e000e100 	.word	0xe000e100

08004b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4603      	mov	r3, r0
 8004b08:	6039      	str	r1, [r7, #0]
 8004b0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	db0a      	blt.n	8004b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	490c      	ldr	r1, [pc, #48]	@ (8004b4c <__NVIC_SetPriority+0x4c>)
 8004b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b1e:	0112      	lsls	r2, r2, #4
 8004b20:	b2d2      	uxtb	r2, r2
 8004b22:	440b      	add	r3, r1
 8004b24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b28:	e00a      	b.n	8004b40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	4908      	ldr	r1, [pc, #32]	@ (8004b50 <__NVIC_SetPriority+0x50>)
 8004b30:	88fb      	ldrh	r3, [r7, #6]
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	3b04      	subs	r3, #4
 8004b38:	0112      	lsls	r2, r2, #4
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	761a      	strb	r2, [r3, #24]
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	e000e100 	.word	0xe000e100
 8004b50:	e000ed00 	.word	0xe000ed00

08004b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b089      	sub	sp, #36	@ 0x24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	f1c3 0307 	rsb	r3, r3, #7
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	bf28      	it	cs
 8004b72:	2304      	movcs	r3, #4
 8004b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	2b06      	cmp	r3, #6
 8004b7c:	d902      	bls.n	8004b84 <NVIC_EncodePriority+0x30>
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	3b03      	subs	r3, #3
 8004b82:	e000      	b.n	8004b86 <NVIC_EncodePriority+0x32>
 8004b84:	2300      	movs	r3, #0
 8004b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b88:	f04f 32ff 	mov.w	r2, #4294967295
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	43da      	mvns	r2, r3
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	401a      	ands	r2, r3
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba6:	43d9      	mvns	r1, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bac:	4313      	orrs	r3, r2
         );
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3724      	adds	r7, #36	@ 0x24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
	...

08004bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bcc:	d301      	bcc.n	8004bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e00f      	b.n	8004bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8004bfc <SysTick_Config+0x40>)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bda:	210f      	movs	r1, #15
 8004bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004be0:	f7ff ff8e 	bl	8004b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004be4:	4b05      	ldr	r3, [pc, #20]	@ (8004bfc <SysTick_Config+0x40>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bea:	4b04      	ldr	r3, [pc, #16]	@ (8004bfc <SysTick_Config+0x40>)
 8004bec:	2207      	movs	r2, #7
 8004bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	e000e010 	.word	0xe000e010

08004c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff ff29 	bl	8004a60 <__NVIC_SetPriorityGrouping>
}
 8004c0e:	bf00      	nop
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b086      	sub	sp, #24
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	607a      	str	r2, [r7, #4]
 8004c22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c24:	f7ff ff40 	bl	8004aa8 <__NVIC_GetPriorityGrouping>
 8004c28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	6978      	ldr	r0, [r7, #20]
 8004c30:	f7ff ff90 	bl	8004b54 <NVIC_EncodePriority>
 8004c34:	4602      	mov	r2, r0
 8004c36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff ff5f 	bl	8004b00 <__NVIC_SetPriority>
}
 8004c42:	bf00      	nop
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b082      	sub	sp, #8
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	4603      	mov	r3, r0
 8004c52:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff ff33 	bl	8004ac4 <__NVIC_EnableIRQ>
}
 8004c5e:	bf00      	nop
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b082      	sub	sp, #8
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff ffa4 	bl	8004bbc <SysTick_Config>
 8004c74:	4603      	mov	r3, r0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004c88:	f7fd fdfc 	bl	8002884 <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e312      	b.n	80052be <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a66      	ldr	r2, [pc, #408]	@ (8004e38 <HAL_DMA_Init+0x1b8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d04a      	beq.n	8004d38 <HAL_DMA_Init+0xb8>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a65      	ldr	r2, [pc, #404]	@ (8004e3c <HAL_DMA_Init+0x1bc>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d045      	beq.n	8004d38 <HAL_DMA_Init+0xb8>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a63      	ldr	r2, [pc, #396]	@ (8004e40 <HAL_DMA_Init+0x1c0>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d040      	beq.n	8004d38 <HAL_DMA_Init+0xb8>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a62      	ldr	r2, [pc, #392]	@ (8004e44 <HAL_DMA_Init+0x1c4>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d03b      	beq.n	8004d38 <HAL_DMA_Init+0xb8>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a60      	ldr	r2, [pc, #384]	@ (8004e48 <HAL_DMA_Init+0x1c8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d036      	beq.n	8004d38 <HAL_DMA_Init+0xb8>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a5f      	ldr	r2, [pc, #380]	@ (8004e4c <HAL_DMA_Init+0x1cc>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d031      	beq.n	8004d38 <HAL_DMA_Init+0xb8>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a5d      	ldr	r2, [pc, #372]	@ (8004e50 <HAL_DMA_Init+0x1d0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d02c      	beq.n	8004d38 <HAL_DMA_Init+0xb8>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a5c      	ldr	r2, [pc, #368]	@ (8004e54 <HAL_DMA_Init+0x1d4>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d027      	beq.n	8004d38 <HAL_DMA_Init+0xb8>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a5a      	ldr	r2, [pc, #360]	@ (8004e58 <HAL_DMA_Init+0x1d8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d022      	beq.n	8004d38 <HAL_DMA_Init+0xb8>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a59      	ldr	r2, [pc, #356]	@ (8004e5c <HAL_DMA_Init+0x1dc>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d01d      	beq.n	8004d38 <HAL_DMA_Init+0xb8>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a57      	ldr	r2, [pc, #348]	@ (8004e60 <HAL_DMA_Init+0x1e0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d018      	beq.n	8004d38 <HAL_DMA_Init+0xb8>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a56      	ldr	r2, [pc, #344]	@ (8004e64 <HAL_DMA_Init+0x1e4>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d013      	beq.n	8004d38 <HAL_DMA_Init+0xb8>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a54      	ldr	r2, [pc, #336]	@ (8004e68 <HAL_DMA_Init+0x1e8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d00e      	beq.n	8004d38 <HAL_DMA_Init+0xb8>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a53      	ldr	r2, [pc, #332]	@ (8004e6c <HAL_DMA_Init+0x1ec>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d009      	beq.n	8004d38 <HAL_DMA_Init+0xb8>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a51      	ldr	r2, [pc, #324]	@ (8004e70 <HAL_DMA_Init+0x1f0>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d004      	beq.n	8004d38 <HAL_DMA_Init+0xb8>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a50      	ldr	r2, [pc, #320]	@ (8004e74 <HAL_DMA_Init+0x1f4>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d101      	bne.n	8004d3c <HAL_DMA_Init+0xbc>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <HAL_DMA_Init+0xbe>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 813c 	beq.w	8004fbc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a37      	ldr	r2, [pc, #220]	@ (8004e38 <HAL_DMA_Init+0x1b8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d04a      	beq.n	8004df4 <HAL_DMA_Init+0x174>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a36      	ldr	r2, [pc, #216]	@ (8004e3c <HAL_DMA_Init+0x1bc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d045      	beq.n	8004df4 <HAL_DMA_Init+0x174>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a34      	ldr	r2, [pc, #208]	@ (8004e40 <HAL_DMA_Init+0x1c0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d040      	beq.n	8004df4 <HAL_DMA_Init+0x174>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a33      	ldr	r2, [pc, #204]	@ (8004e44 <HAL_DMA_Init+0x1c4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d03b      	beq.n	8004df4 <HAL_DMA_Init+0x174>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a31      	ldr	r2, [pc, #196]	@ (8004e48 <HAL_DMA_Init+0x1c8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d036      	beq.n	8004df4 <HAL_DMA_Init+0x174>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a30      	ldr	r2, [pc, #192]	@ (8004e4c <HAL_DMA_Init+0x1cc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d031      	beq.n	8004df4 <HAL_DMA_Init+0x174>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a2e      	ldr	r2, [pc, #184]	@ (8004e50 <HAL_DMA_Init+0x1d0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d02c      	beq.n	8004df4 <HAL_DMA_Init+0x174>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a2d      	ldr	r2, [pc, #180]	@ (8004e54 <HAL_DMA_Init+0x1d4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d027      	beq.n	8004df4 <HAL_DMA_Init+0x174>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a2b      	ldr	r2, [pc, #172]	@ (8004e58 <HAL_DMA_Init+0x1d8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d022      	beq.n	8004df4 <HAL_DMA_Init+0x174>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a2a      	ldr	r2, [pc, #168]	@ (8004e5c <HAL_DMA_Init+0x1dc>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d01d      	beq.n	8004df4 <HAL_DMA_Init+0x174>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a28      	ldr	r2, [pc, #160]	@ (8004e60 <HAL_DMA_Init+0x1e0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d018      	beq.n	8004df4 <HAL_DMA_Init+0x174>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a27      	ldr	r2, [pc, #156]	@ (8004e64 <HAL_DMA_Init+0x1e4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d013      	beq.n	8004df4 <HAL_DMA_Init+0x174>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a25      	ldr	r2, [pc, #148]	@ (8004e68 <HAL_DMA_Init+0x1e8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00e      	beq.n	8004df4 <HAL_DMA_Init+0x174>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a24      	ldr	r2, [pc, #144]	@ (8004e6c <HAL_DMA_Init+0x1ec>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d009      	beq.n	8004df4 <HAL_DMA_Init+0x174>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a22      	ldr	r2, [pc, #136]	@ (8004e70 <HAL_DMA_Init+0x1f0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d004      	beq.n	8004df4 <HAL_DMA_Init+0x174>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a21      	ldr	r2, [pc, #132]	@ (8004e74 <HAL_DMA_Init+0x1f4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d108      	bne.n	8004e06 <HAL_DMA_Init+0x186>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0201 	bic.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	e007      	b.n	8004e16 <HAL_DMA_Init+0x196>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0201 	bic.w	r2, r2, #1
 8004e14:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e16:	e02f      	b.n	8004e78 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e18:	f7fd fd34 	bl	8002884 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b05      	cmp	r3, #5
 8004e24:	d928      	bls.n	8004e78 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2203      	movs	r2, #3
 8004e30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e242      	b.n	80052be <HAL_DMA_Init+0x63e>
 8004e38:	40020010 	.word	0x40020010
 8004e3c:	40020028 	.word	0x40020028
 8004e40:	40020040 	.word	0x40020040
 8004e44:	40020058 	.word	0x40020058
 8004e48:	40020070 	.word	0x40020070
 8004e4c:	40020088 	.word	0x40020088
 8004e50:	400200a0 	.word	0x400200a0
 8004e54:	400200b8 	.word	0x400200b8
 8004e58:	40020410 	.word	0x40020410
 8004e5c:	40020428 	.word	0x40020428
 8004e60:	40020440 	.word	0x40020440
 8004e64:	40020458 	.word	0x40020458
 8004e68:	40020470 	.word	0x40020470
 8004e6c:	40020488 	.word	0x40020488
 8004e70:	400204a0 	.word	0x400204a0
 8004e74:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1c8      	bne.n	8004e18 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	4b83      	ldr	r3, [pc, #524]	@ (80050a0 <HAL_DMA_Init+0x420>)
 8004e92:	4013      	ands	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004e9e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eaa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eb6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	d107      	bne.n	8004edc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b28      	cmp	r3, #40	@ 0x28
 8004ee2:	d903      	bls.n	8004eec <HAL_DMA_Init+0x26c>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	2b2e      	cmp	r3, #46	@ 0x2e
 8004eea:	d91f      	bls.n	8004f2c <HAL_DMA_Init+0x2ac>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ef2:	d903      	bls.n	8004efc <HAL_DMA_Init+0x27c>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2b42      	cmp	r3, #66	@ 0x42
 8004efa:	d917      	bls.n	8004f2c <HAL_DMA_Init+0x2ac>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2b46      	cmp	r3, #70	@ 0x46
 8004f02:	d903      	bls.n	8004f0c <HAL_DMA_Init+0x28c>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	2b48      	cmp	r3, #72	@ 0x48
 8004f0a:	d90f      	bls.n	8004f2c <HAL_DMA_Init+0x2ac>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	2b4e      	cmp	r3, #78	@ 0x4e
 8004f12:	d903      	bls.n	8004f1c <HAL_DMA_Init+0x29c>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	2b52      	cmp	r3, #82	@ 0x52
 8004f1a:	d907      	bls.n	8004f2c <HAL_DMA_Init+0x2ac>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b73      	cmp	r3, #115	@ 0x73
 8004f22:	d905      	bls.n	8004f30 <HAL_DMA_Init+0x2b0>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2b77      	cmp	r3, #119	@ 0x77
 8004f2a:	d801      	bhi.n	8004f30 <HAL_DMA_Init+0x2b0>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e000      	b.n	8004f32 <HAL_DMA_Init+0x2b2>
 8004f30:	2300      	movs	r3, #0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f3c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f023 0307 	bic.w	r3, r3, #7
 8004f54:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d117      	bne.n	8004f98 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00e      	beq.n	8004f98 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f002 fb2e 	bl	80075dc <DMA_CheckFifoParam>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d008      	beq.n	8004f98 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2240      	movs	r2, #64	@ 0x40
 8004f8a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e192      	b.n	80052be <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f002 fa69 	bl	8007478 <DMA_CalcBaseAndBitshift>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fae:	f003 031f 	and.w	r3, r3, #31
 8004fb2:	223f      	movs	r2, #63	@ 0x3f
 8004fb4:	409a      	lsls	r2, r3
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	609a      	str	r2, [r3, #8]
 8004fba:	e0c8      	b.n	800514e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a38      	ldr	r2, [pc, #224]	@ (80050a4 <HAL_DMA_Init+0x424>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d022      	beq.n	800500c <HAL_DMA_Init+0x38c>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a37      	ldr	r2, [pc, #220]	@ (80050a8 <HAL_DMA_Init+0x428>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d01d      	beq.n	800500c <HAL_DMA_Init+0x38c>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a35      	ldr	r2, [pc, #212]	@ (80050ac <HAL_DMA_Init+0x42c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d018      	beq.n	800500c <HAL_DMA_Init+0x38c>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a34      	ldr	r2, [pc, #208]	@ (80050b0 <HAL_DMA_Init+0x430>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d013      	beq.n	800500c <HAL_DMA_Init+0x38c>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a32      	ldr	r2, [pc, #200]	@ (80050b4 <HAL_DMA_Init+0x434>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00e      	beq.n	800500c <HAL_DMA_Init+0x38c>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a31      	ldr	r2, [pc, #196]	@ (80050b8 <HAL_DMA_Init+0x438>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d009      	beq.n	800500c <HAL_DMA_Init+0x38c>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a2f      	ldr	r2, [pc, #188]	@ (80050bc <HAL_DMA_Init+0x43c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d004      	beq.n	800500c <HAL_DMA_Init+0x38c>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a2e      	ldr	r2, [pc, #184]	@ (80050c0 <HAL_DMA_Init+0x440>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d101      	bne.n	8005010 <HAL_DMA_Init+0x390>
 800500c:	2301      	movs	r3, #1
 800500e:	e000      	b.n	8005012 <HAL_DMA_Init+0x392>
 8005010:	2300      	movs	r3, #0
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 8092 	beq.w	800513c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a21      	ldr	r2, [pc, #132]	@ (80050a4 <HAL_DMA_Init+0x424>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d021      	beq.n	8005066 <HAL_DMA_Init+0x3e6>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a20      	ldr	r2, [pc, #128]	@ (80050a8 <HAL_DMA_Init+0x428>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d01c      	beq.n	8005066 <HAL_DMA_Init+0x3e6>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a1e      	ldr	r2, [pc, #120]	@ (80050ac <HAL_DMA_Init+0x42c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d017      	beq.n	8005066 <HAL_DMA_Init+0x3e6>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a1d      	ldr	r2, [pc, #116]	@ (80050b0 <HAL_DMA_Init+0x430>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d012      	beq.n	8005066 <HAL_DMA_Init+0x3e6>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1b      	ldr	r2, [pc, #108]	@ (80050b4 <HAL_DMA_Init+0x434>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00d      	beq.n	8005066 <HAL_DMA_Init+0x3e6>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1a      	ldr	r2, [pc, #104]	@ (80050b8 <HAL_DMA_Init+0x438>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d008      	beq.n	8005066 <HAL_DMA_Init+0x3e6>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a18      	ldr	r2, [pc, #96]	@ (80050bc <HAL_DMA_Init+0x43c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d003      	beq.n	8005066 <HAL_DMA_Init+0x3e6>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a17      	ldr	r2, [pc, #92]	@ (80050c0 <HAL_DMA_Init+0x440>)
 8005064:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2202      	movs	r2, #2
 800506a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4b10      	ldr	r3, [pc, #64]	@ (80050c4 <HAL_DMA_Init+0x444>)
 8005082:	4013      	ands	r3, r2
 8005084:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	2b40      	cmp	r3, #64	@ 0x40
 800508c:	d01c      	beq.n	80050c8 <HAL_DMA_Init+0x448>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	2b80      	cmp	r3, #128	@ 0x80
 8005094:	d102      	bne.n	800509c <HAL_DMA_Init+0x41c>
 8005096:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800509a:	e016      	b.n	80050ca <HAL_DMA_Init+0x44a>
 800509c:	2300      	movs	r3, #0
 800509e:	e014      	b.n	80050ca <HAL_DMA_Init+0x44a>
 80050a0:	fe10803f 	.word	0xfe10803f
 80050a4:	58025408 	.word	0x58025408
 80050a8:	5802541c 	.word	0x5802541c
 80050ac:	58025430 	.word	0x58025430
 80050b0:	58025444 	.word	0x58025444
 80050b4:	58025458 	.word	0x58025458
 80050b8:	5802546c 	.word	0x5802546c
 80050bc:	58025480 	.word	0x58025480
 80050c0:	58025494 	.word	0x58025494
 80050c4:	fffe000f 	.word	0xfffe000f
 80050c8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	68d2      	ldr	r2, [r2, #12]
 80050ce:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80050d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80050e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80050e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80050f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80050f8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	461a      	mov	r2, r3
 800510e:	4b6e      	ldr	r3, [pc, #440]	@ (80052c8 <HAL_DMA_Init+0x648>)
 8005110:	4413      	add	r3, r2
 8005112:	4a6e      	ldr	r2, [pc, #440]	@ (80052cc <HAL_DMA_Init+0x64c>)
 8005114:	fba2 2303 	umull	r2, r3, r2, r3
 8005118:	091b      	lsrs	r3, r3, #4
 800511a:	009a      	lsls	r2, r3, #2
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f002 f9a9 	bl	8007478 <DMA_CalcBaseAndBitshift>
 8005126:	4603      	mov	r3, r0
 8005128:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800512e:	f003 031f 	and.w	r3, r3, #31
 8005132:	2201      	movs	r2, #1
 8005134:	409a      	lsls	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	605a      	str	r2, [r3, #4]
 800513a:	e008      	b.n	800514e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2240      	movs	r2, #64	@ 0x40
 8005140:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2203      	movs	r2, #3
 8005146:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e0b7      	b.n	80052be <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a5f      	ldr	r2, [pc, #380]	@ (80052d0 <HAL_DMA_Init+0x650>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d072      	beq.n	800523e <HAL_DMA_Init+0x5be>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a5d      	ldr	r2, [pc, #372]	@ (80052d4 <HAL_DMA_Init+0x654>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d06d      	beq.n	800523e <HAL_DMA_Init+0x5be>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a5c      	ldr	r2, [pc, #368]	@ (80052d8 <HAL_DMA_Init+0x658>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d068      	beq.n	800523e <HAL_DMA_Init+0x5be>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a5a      	ldr	r2, [pc, #360]	@ (80052dc <HAL_DMA_Init+0x65c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d063      	beq.n	800523e <HAL_DMA_Init+0x5be>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a59      	ldr	r2, [pc, #356]	@ (80052e0 <HAL_DMA_Init+0x660>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d05e      	beq.n	800523e <HAL_DMA_Init+0x5be>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a57      	ldr	r2, [pc, #348]	@ (80052e4 <HAL_DMA_Init+0x664>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d059      	beq.n	800523e <HAL_DMA_Init+0x5be>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a56      	ldr	r2, [pc, #344]	@ (80052e8 <HAL_DMA_Init+0x668>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d054      	beq.n	800523e <HAL_DMA_Init+0x5be>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a54      	ldr	r2, [pc, #336]	@ (80052ec <HAL_DMA_Init+0x66c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d04f      	beq.n	800523e <HAL_DMA_Init+0x5be>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a53      	ldr	r2, [pc, #332]	@ (80052f0 <HAL_DMA_Init+0x670>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d04a      	beq.n	800523e <HAL_DMA_Init+0x5be>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a51      	ldr	r2, [pc, #324]	@ (80052f4 <HAL_DMA_Init+0x674>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d045      	beq.n	800523e <HAL_DMA_Init+0x5be>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a50      	ldr	r2, [pc, #320]	@ (80052f8 <HAL_DMA_Init+0x678>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d040      	beq.n	800523e <HAL_DMA_Init+0x5be>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a4e      	ldr	r2, [pc, #312]	@ (80052fc <HAL_DMA_Init+0x67c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d03b      	beq.n	800523e <HAL_DMA_Init+0x5be>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a4d      	ldr	r2, [pc, #308]	@ (8005300 <HAL_DMA_Init+0x680>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d036      	beq.n	800523e <HAL_DMA_Init+0x5be>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a4b      	ldr	r2, [pc, #300]	@ (8005304 <HAL_DMA_Init+0x684>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d031      	beq.n	800523e <HAL_DMA_Init+0x5be>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a4a      	ldr	r2, [pc, #296]	@ (8005308 <HAL_DMA_Init+0x688>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d02c      	beq.n	800523e <HAL_DMA_Init+0x5be>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a48      	ldr	r2, [pc, #288]	@ (800530c <HAL_DMA_Init+0x68c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d027      	beq.n	800523e <HAL_DMA_Init+0x5be>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a47      	ldr	r2, [pc, #284]	@ (8005310 <HAL_DMA_Init+0x690>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d022      	beq.n	800523e <HAL_DMA_Init+0x5be>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a45      	ldr	r2, [pc, #276]	@ (8005314 <HAL_DMA_Init+0x694>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d01d      	beq.n	800523e <HAL_DMA_Init+0x5be>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a44      	ldr	r2, [pc, #272]	@ (8005318 <HAL_DMA_Init+0x698>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d018      	beq.n	800523e <HAL_DMA_Init+0x5be>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a42      	ldr	r2, [pc, #264]	@ (800531c <HAL_DMA_Init+0x69c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d013      	beq.n	800523e <HAL_DMA_Init+0x5be>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a41      	ldr	r2, [pc, #260]	@ (8005320 <HAL_DMA_Init+0x6a0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d00e      	beq.n	800523e <HAL_DMA_Init+0x5be>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a3f      	ldr	r2, [pc, #252]	@ (8005324 <HAL_DMA_Init+0x6a4>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d009      	beq.n	800523e <HAL_DMA_Init+0x5be>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a3e      	ldr	r2, [pc, #248]	@ (8005328 <HAL_DMA_Init+0x6a8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d004      	beq.n	800523e <HAL_DMA_Init+0x5be>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a3c      	ldr	r2, [pc, #240]	@ (800532c <HAL_DMA_Init+0x6ac>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d101      	bne.n	8005242 <HAL_DMA_Init+0x5c2>
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <HAL_DMA_Init+0x5c4>
 8005242:	2300      	movs	r3, #0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d032      	beq.n	80052ae <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f002 fa43 	bl	80076d4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	2b80      	cmp	r3, #128	@ 0x80
 8005254:	d102      	bne.n	800525c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005270:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d010      	beq.n	800529c <HAL_DMA_Init+0x61c>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b08      	cmp	r3, #8
 8005280:	d80c      	bhi.n	800529c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f002 fac0 	bl	8007808 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005298:	605a      	str	r2, [r3, #4]
 800529a:	e008      	b.n	80052ae <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	a7fdabf8 	.word	0xa7fdabf8
 80052cc:	cccccccd 	.word	0xcccccccd
 80052d0:	40020010 	.word	0x40020010
 80052d4:	40020028 	.word	0x40020028
 80052d8:	40020040 	.word	0x40020040
 80052dc:	40020058 	.word	0x40020058
 80052e0:	40020070 	.word	0x40020070
 80052e4:	40020088 	.word	0x40020088
 80052e8:	400200a0 	.word	0x400200a0
 80052ec:	400200b8 	.word	0x400200b8
 80052f0:	40020410 	.word	0x40020410
 80052f4:	40020428 	.word	0x40020428
 80052f8:	40020440 	.word	0x40020440
 80052fc:	40020458 	.word	0x40020458
 8005300:	40020470 	.word	0x40020470
 8005304:	40020488 	.word	0x40020488
 8005308:	400204a0 	.word	0x400204a0
 800530c:	400204b8 	.word	0x400204b8
 8005310:	58025408 	.word	0x58025408
 8005314:	5802541c 	.word	0x5802541c
 8005318:	58025430 	.word	0x58025430
 800531c:	58025444 	.word	0x58025444
 8005320:	58025458 	.word	0x58025458
 8005324:	5802546c 	.word	0x5802546c
 8005328:	58025480 	.word	0x58025480
 800532c:	58025494 	.word	0x58025494

08005330 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
 800533c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e226      	b.n	800579a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005352:	2b01      	cmp	r3, #1
 8005354:	d101      	bne.n	800535a <HAL_DMA_Start_IT+0x2a>
 8005356:	2302      	movs	r3, #2
 8005358:	e21f      	b.n	800579a <HAL_DMA_Start_IT+0x46a>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b01      	cmp	r3, #1
 800536c:	f040 820a 	bne.w	8005784 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a68      	ldr	r2, [pc, #416]	@ (8005524 <HAL_DMA_Start_IT+0x1f4>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d04a      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a66      	ldr	r2, [pc, #408]	@ (8005528 <HAL_DMA_Start_IT+0x1f8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d045      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a65      	ldr	r2, [pc, #404]	@ (800552c <HAL_DMA_Start_IT+0x1fc>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d040      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a63      	ldr	r2, [pc, #396]	@ (8005530 <HAL_DMA_Start_IT+0x200>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d03b      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a62      	ldr	r2, [pc, #392]	@ (8005534 <HAL_DMA_Start_IT+0x204>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d036      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a60      	ldr	r2, [pc, #384]	@ (8005538 <HAL_DMA_Start_IT+0x208>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d031      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a5f      	ldr	r2, [pc, #380]	@ (800553c <HAL_DMA_Start_IT+0x20c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d02c      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a5d      	ldr	r2, [pc, #372]	@ (8005540 <HAL_DMA_Start_IT+0x210>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d027      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a5c      	ldr	r2, [pc, #368]	@ (8005544 <HAL_DMA_Start_IT+0x214>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d022      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a5a      	ldr	r2, [pc, #360]	@ (8005548 <HAL_DMA_Start_IT+0x218>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d01d      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a59      	ldr	r2, [pc, #356]	@ (800554c <HAL_DMA_Start_IT+0x21c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d018      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a57      	ldr	r2, [pc, #348]	@ (8005550 <HAL_DMA_Start_IT+0x220>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d013      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a56      	ldr	r2, [pc, #344]	@ (8005554 <HAL_DMA_Start_IT+0x224>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d00e      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a54      	ldr	r2, [pc, #336]	@ (8005558 <HAL_DMA_Start_IT+0x228>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d009      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a53      	ldr	r2, [pc, #332]	@ (800555c <HAL_DMA_Start_IT+0x22c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d004      	beq.n	800541e <HAL_DMA_Start_IT+0xee>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a51      	ldr	r2, [pc, #324]	@ (8005560 <HAL_DMA_Start_IT+0x230>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d108      	bne.n	8005430 <HAL_DMA_Start_IT+0x100>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0201 	bic.w	r2, r2, #1
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	e007      	b.n	8005440 <HAL_DMA_Start_IT+0x110>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0201 	bic.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	68b9      	ldr	r1, [r7, #8]
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f001 fe6a 	bl	8007120 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a34      	ldr	r2, [pc, #208]	@ (8005524 <HAL_DMA_Start_IT+0x1f4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d04a      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a33      	ldr	r2, [pc, #204]	@ (8005528 <HAL_DMA_Start_IT+0x1f8>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d045      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a31      	ldr	r2, [pc, #196]	@ (800552c <HAL_DMA_Start_IT+0x1fc>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d040      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a30      	ldr	r2, [pc, #192]	@ (8005530 <HAL_DMA_Start_IT+0x200>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d03b      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a2e      	ldr	r2, [pc, #184]	@ (8005534 <HAL_DMA_Start_IT+0x204>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d036      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a2d      	ldr	r2, [pc, #180]	@ (8005538 <HAL_DMA_Start_IT+0x208>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d031      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a2b      	ldr	r2, [pc, #172]	@ (800553c <HAL_DMA_Start_IT+0x20c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d02c      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a2a      	ldr	r2, [pc, #168]	@ (8005540 <HAL_DMA_Start_IT+0x210>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d027      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a28      	ldr	r2, [pc, #160]	@ (8005544 <HAL_DMA_Start_IT+0x214>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d022      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a27      	ldr	r2, [pc, #156]	@ (8005548 <HAL_DMA_Start_IT+0x218>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d01d      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a25      	ldr	r2, [pc, #148]	@ (800554c <HAL_DMA_Start_IT+0x21c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d018      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a24      	ldr	r2, [pc, #144]	@ (8005550 <HAL_DMA_Start_IT+0x220>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d013      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a22      	ldr	r2, [pc, #136]	@ (8005554 <HAL_DMA_Start_IT+0x224>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00e      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a21      	ldr	r2, [pc, #132]	@ (8005558 <HAL_DMA_Start_IT+0x228>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d009      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1f      	ldr	r2, [pc, #124]	@ (800555c <HAL_DMA_Start_IT+0x22c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d004      	beq.n	80054ec <HAL_DMA_Start_IT+0x1bc>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005560 <HAL_DMA_Start_IT+0x230>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d101      	bne.n	80054f0 <HAL_DMA_Start_IT+0x1c0>
 80054ec:	2301      	movs	r3, #1
 80054ee:	e000      	b.n	80054f2 <HAL_DMA_Start_IT+0x1c2>
 80054f0:	2300      	movs	r3, #0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d036      	beq.n	8005564 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f023 021e 	bic.w	r2, r3, #30
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 0216 	orr.w	r2, r2, #22
 8005508:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	d03e      	beq.n	8005590 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f042 0208 	orr.w	r2, r2, #8
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	e035      	b.n	8005590 <HAL_DMA_Start_IT+0x260>
 8005524:	40020010 	.word	0x40020010
 8005528:	40020028 	.word	0x40020028
 800552c:	40020040 	.word	0x40020040
 8005530:	40020058 	.word	0x40020058
 8005534:	40020070 	.word	0x40020070
 8005538:	40020088 	.word	0x40020088
 800553c:	400200a0 	.word	0x400200a0
 8005540:	400200b8 	.word	0x400200b8
 8005544:	40020410 	.word	0x40020410
 8005548:	40020428 	.word	0x40020428
 800554c:	40020440 	.word	0x40020440
 8005550:	40020458 	.word	0x40020458
 8005554:	40020470 	.word	0x40020470
 8005558:	40020488 	.word	0x40020488
 800555c:	400204a0 	.word	0x400204a0
 8005560:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f023 020e 	bic.w	r2, r3, #14
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 020a 	orr.w	r2, r2, #10
 8005576:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557c:	2b00      	cmp	r3, #0
 800557e:	d007      	beq.n	8005590 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0204 	orr.w	r2, r2, #4
 800558e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a83      	ldr	r2, [pc, #524]	@ (80057a4 <HAL_DMA_Start_IT+0x474>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d072      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a82      	ldr	r2, [pc, #520]	@ (80057a8 <HAL_DMA_Start_IT+0x478>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d06d      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a80      	ldr	r2, [pc, #512]	@ (80057ac <HAL_DMA_Start_IT+0x47c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d068      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a7f      	ldr	r2, [pc, #508]	@ (80057b0 <HAL_DMA_Start_IT+0x480>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d063      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a7d      	ldr	r2, [pc, #500]	@ (80057b4 <HAL_DMA_Start_IT+0x484>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d05e      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a7c      	ldr	r2, [pc, #496]	@ (80057b8 <HAL_DMA_Start_IT+0x488>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d059      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a7a      	ldr	r2, [pc, #488]	@ (80057bc <HAL_DMA_Start_IT+0x48c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d054      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a79      	ldr	r2, [pc, #484]	@ (80057c0 <HAL_DMA_Start_IT+0x490>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d04f      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a77      	ldr	r2, [pc, #476]	@ (80057c4 <HAL_DMA_Start_IT+0x494>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d04a      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a76      	ldr	r2, [pc, #472]	@ (80057c8 <HAL_DMA_Start_IT+0x498>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d045      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a74      	ldr	r2, [pc, #464]	@ (80057cc <HAL_DMA_Start_IT+0x49c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d040      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a73      	ldr	r2, [pc, #460]	@ (80057d0 <HAL_DMA_Start_IT+0x4a0>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d03b      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a71      	ldr	r2, [pc, #452]	@ (80057d4 <HAL_DMA_Start_IT+0x4a4>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d036      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a70      	ldr	r2, [pc, #448]	@ (80057d8 <HAL_DMA_Start_IT+0x4a8>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d031      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a6e      	ldr	r2, [pc, #440]	@ (80057dc <HAL_DMA_Start_IT+0x4ac>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d02c      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a6d      	ldr	r2, [pc, #436]	@ (80057e0 <HAL_DMA_Start_IT+0x4b0>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d027      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a6b      	ldr	r2, [pc, #428]	@ (80057e4 <HAL_DMA_Start_IT+0x4b4>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d022      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a6a      	ldr	r2, [pc, #424]	@ (80057e8 <HAL_DMA_Start_IT+0x4b8>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d01d      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a68      	ldr	r2, [pc, #416]	@ (80057ec <HAL_DMA_Start_IT+0x4bc>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d018      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a67      	ldr	r2, [pc, #412]	@ (80057f0 <HAL_DMA_Start_IT+0x4c0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d013      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a65      	ldr	r2, [pc, #404]	@ (80057f4 <HAL_DMA_Start_IT+0x4c4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00e      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a64      	ldr	r2, [pc, #400]	@ (80057f8 <HAL_DMA_Start_IT+0x4c8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d009      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a62      	ldr	r2, [pc, #392]	@ (80057fc <HAL_DMA_Start_IT+0x4cc>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d004      	beq.n	8005680 <HAL_DMA_Start_IT+0x350>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a61      	ldr	r2, [pc, #388]	@ (8005800 <HAL_DMA_Start_IT+0x4d0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d101      	bne.n	8005684 <HAL_DMA_Start_IT+0x354>
 8005680:	2301      	movs	r3, #1
 8005682:	e000      	b.n	8005686 <HAL_DMA_Start_IT+0x356>
 8005684:	2300      	movs	r3, #0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d01a      	beq.n	80056c0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d007      	beq.n	80056a8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056a6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d007      	beq.n	80056c0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056be:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a37      	ldr	r2, [pc, #220]	@ (80057a4 <HAL_DMA_Start_IT+0x474>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d04a      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a36      	ldr	r2, [pc, #216]	@ (80057a8 <HAL_DMA_Start_IT+0x478>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d045      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a34      	ldr	r2, [pc, #208]	@ (80057ac <HAL_DMA_Start_IT+0x47c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d040      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a33      	ldr	r2, [pc, #204]	@ (80057b0 <HAL_DMA_Start_IT+0x480>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d03b      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a31      	ldr	r2, [pc, #196]	@ (80057b4 <HAL_DMA_Start_IT+0x484>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d036      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a30      	ldr	r2, [pc, #192]	@ (80057b8 <HAL_DMA_Start_IT+0x488>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d031      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a2e      	ldr	r2, [pc, #184]	@ (80057bc <HAL_DMA_Start_IT+0x48c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d02c      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a2d      	ldr	r2, [pc, #180]	@ (80057c0 <HAL_DMA_Start_IT+0x490>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d027      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a2b      	ldr	r2, [pc, #172]	@ (80057c4 <HAL_DMA_Start_IT+0x494>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d022      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a2a      	ldr	r2, [pc, #168]	@ (80057c8 <HAL_DMA_Start_IT+0x498>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d01d      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a28      	ldr	r2, [pc, #160]	@ (80057cc <HAL_DMA_Start_IT+0x49c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d018      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a27      	ldr	r2, [pc, #156]	@ (80057d0 <HAL_DMA_Start_IT+0x4a0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d013      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a25      	ldr	r2, [pc, #148]	@ (80057d4 <HAL_DMA_Start_IT+0x4a4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00e      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a24      	ldr	r2, [pc, #144]	@ (80057d8 <HAL_DMA_Start_IT+0x4a8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d009      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a22      	ldr	r2, [pc, #136]	@ (80057dc <HAL_DMA_Start_IT+0x4ac>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d004      	beq.n	8005760 <HAL_DMA_Start_IT+0x430>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a21      	ldr	r2, [pc, #132]	@ (80057e0 <HAL_DMA_Start_IT+0x4b0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d108      	bne.n	8005772 <HAL_DMA_Start_IT+0x442>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0201 	orr.w	r2, r2, #1
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	e012      	b.n	8005798 <HAL_DMA_Start_IT+0x468>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f042 0201 	orr.w	r2, r2, #1
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	e009      	b.n	8005798 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800578a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005798:	7dfb      	ldrb	r3, [r7, #23]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	40020010 	.word	0x40020010
 80057a8:	40020028 	.word	0x40020028
 80057ac:	40020040 	.word	0x40020040
 80057b0:	40020058 	.word	0x40020058
 80057b4:	40020070 	.word	0x40020070
 80057b8:	40020088 	.word	0x40020088
 80057bc:	400200a0 	.word	0x400200a0
 80057c0:	400200b8 	.word	0x400200b8
 80057c4:	40020410 	.word	0x40020410
 80057c8:	40020428 	.word	0x40020428
 80057cc:	40020440 	.word	0x40020440
 80057d0:	40020458 	.word	0x40020458
 80057d4:	40020470 	.word	0x40020470
 80057d8:	40020488 	.word	0x40020488
 80057dc:	400204a0 	.word	0x400204a0
 80057e0:	400204b8 	.word	0x400204b8
 80057e4:	58025408 	.word	0x58025408
 80057e8:	5802541c 	.word	0x5802541c
 80057ec:	58025430 	.word	0x58025430
 80057f0:	58025444 	.word	0x58025444
 80057f4:	58025458 	.word	0x58025458
 80057f8:	5802546c 	.word	0x5802546c
 80057fc:	58025480 	.word	0x58025480
 8005800:	58025494 	.word	0x58025494

08005804 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800580c:	f7fd f83a 	bl	8002884 <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e2dc      	b.n	8005dd6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d008      	beq.n	800583a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2280      	movs	r2, #128	@ 0x80
 800582c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e2cd      	b.n	8005dd6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a76      	ldr	r2, [pc, #472]	@ (8005a18 <HAL_DMA_Abort+0x214>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d04a      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a74      	ldr	r2, [pc, #464]	@ (8005a1c <HAL_DMA_Abort+0x218>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d045      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a73      	ldr	r2, [pc, #460]	@ (8005a20 <HAL_DMA_Abort+0x21c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d040      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a71      	ldr	r2, [pc, #452]	@ (8005a24 <HAL_DMA_Abort+0x220>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d03b      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a70      	ldr	r2, [pc, #448]	@ (8005a28 <HAL_DMA_Abort+0x224>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d036      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a6e      	ldr	r2, [pc, #440]	@ (8005a2c <HAL_DMA_Abort+0x228>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d031      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a6d      	ldr	r2, [pc, #436]	@ (8005a30 <HAL_DMA_Abort+0x22c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d02c      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a6b      	ldr	r2, [pc, #428]	@ (8005a34 <HAL_DMA_Abort+0x230>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d027      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a6a      	ldr	r2, [pc, #424]	@ (8005a38 <HAL_DMA_Abort+0x234>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d022      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a68      	ldr	r2, [pc, #416]	@ (8005a3c <HAL_DMA_Abort+0x238>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d01d      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a67      	ldr	r2, [pc, #412]	@ (8005a40 <HAL_DMA_Abort+0x23c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d018      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a65      	ldr	r2, [pc, #404]	@ (8005a44 <HAL_DMA_Abort+0x240>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d013      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a64      	ldr	r2, [pc, #400]	@ (8005a48 <HAL_DMA_Abort+0x244>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00e      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a62      	ldr	r2, [pc, #392]	@ (8005a4c <HAL_DMA_Abort+0x248>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d009      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a61      	ldr	r2, [pc, #388]	@ (8005a50 <HAL_DMA_Abort+0x24c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d004      	beq.n	80058da <HAL_DMA_Abort+0xd6>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a5f      	ldr	r2, [pc, #380]	@ (8005a54 <HAL_DMA_Abort+0x250>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d101      	bne.n	80058de <HAL_DMA_Abort+0xda>
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <HAL_DMA_Abort+0xdc>
 80058de:	2300      	movs	r3, #0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d013      	beq.n	800590c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 021e 	bic.w	r2, r2, #30
 80058f2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695a      	ldr	r2, [r3, #20]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005902:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	617b      	str	r3, [r7, #20]
 800590a:	e00a      	b.n	8005922 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 020e 	bic.w	r2, r2, #14
 800591a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a3c      	ldr	r2, [pc, #240]	@ (8005a18 <HAL_DMA_Abort+0x214>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d072      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a3a      	ldr	r2, [pc, #232]	@ (8005a1c <HAL_DMA_Abort+0x218>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d06d      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a39      	ldr	r2, [pc, #228]	@ (8005a20 <HAL_DMA_Abort+0x21c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d068      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a37      	ldr	r2, [pc, #220]	@ (8005a24 <HAL_DMA_Abort+0x220>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d063      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a36      	ldr	r2, [pc, #216]	@ (8005a28 <HAL_DMA_Abort+0x224>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d05e      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a34      	ldr	r2, [pc, #208]	@ (8005a2c <HAL_DMA_Abort+0x228>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d059      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a33      	ldr	r2, [pc, #204]	@ (8005a30 <HAL_DMA_Abort+0x22c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d054      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a31      	ldr	r2, [pc, #196]	@ (8005a34 <HAL_DMA_Abort+0x230>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d04f      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a30      	ldr	r2, [pc, #192]	@ (8005a38 <HAL_DMA_Abort+0x234>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d04a      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a2e      	ldr	r2, [pc, #184]	@ (8005a3c <HAL_DMA_Abort+0x238>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d045      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a2d      	ldr	r2, [pc, #180]	@ (8005a40 <HAL_DMA_Abort+0x23c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d040      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a2b      	ldr	r2, [pc, #172]	@ (8005a44 <HAL_DMA_Abort+0x240>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d03b      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a2a      	ldr	r2, [pc, #168]	@ (8005a48 <HAL_DMA_Abort+0x244>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d036      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a28      	ldr	r2, [pc, #160]	@ (8005a4c <HAL_DMA_Abort+0x248>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d031      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a27      	ldr	r2, [pc, #156]	@ (8005a50 <HAL_DMA_Abort+0x24c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d02c      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a25      	ldr	r2, [pc, #148]	@ (8005a54 <HAL_DMA_Abort+0x250>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d027      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a24      	ldr	r2, [pc, #144]	@ (8005a58 <HAL_DMA_Abort+0x254>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d022      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a22      	ldr	r2, [pc, #136]	@ (8005a5c <HAL_DMA_Abort+0x258>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d01d      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a21      	ldr	r2, [pc, #132]	@ (8005a60 <HAL_DMA_Abort+0x25c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d018      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005a64 <HAL_DMA_Abort+0x260>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d013      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005a68 <HAL_DMA_Abort+0x264>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00e      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1c      	ldr	r2, [pc, #112]	@ (8005a6c <HAL_DMA_Abort+0x268>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d009      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1b      	ldr	r2, [pc, #108]	@ (8005a70 <HAL_DMA_Abort+0x26c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d004      	beq.n	8005a12 <HAL_DMA_Abort+0x20e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a19      	ldr	r2, [pc, #100]	@ (8005a74 <HAL_DMA_Abort+0x270>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d132      	bne.n	8005a78 <HAL_DMA_Abort+0x274>
 8005a12:	2301      	movs	r3, #1
 8005a14:	e031      	b.n	8005a7a <HAL_DMA_Abort+0x276>
 8005a16:	bf00      	nop
 8005a18:	40020010 	.word	0x40020010
 8005a1c:	40020028 	.word	0x40020028
 8005a20:	40020040 	.word	0x40020040
 8005a24:	40020058 	.word	0x40020058
 8005a28:	40020070 	.word	0x40020070
 8005a2c:	40020088 	.word	0x40020088
 8005a30:	400200a0 	.word	0x400200a0
 8005a34:	400200b8 	.word	0x400200b8
 8005a38:	40020410 	.word	0x40020410
 8005a3c:	40020428 	.word	0x40020428
 8005a40:	40020440 	.word	0x40020440
 8005a44:	40020458 	.word	0x40020458
 8005a48:	40020470 	.word	0x40020470
 8005a4c:	40020488 	.word	0x40020488
 8005a50:	400204a0 	.word	0x400204a0
 8005a54:	400204b8 	.word	0x400204b8
 8005a58:	58025408 	.word	0x58025408
 8005a5c:	5802541c 	.word	0x5802541c
 8005a60:	58025430 	.word	0x58025430
 8005a64:	58025444 	.word	0x58025444
 8005a68:	58025458 	.word	0x58025458
 8005a6c:	5802546c 	.word	0x5802546c
 8005a70:	58025480 	.word	0x58025480
 8005a74:	58025494 	.word	0x58025494
 8005a78:	2300      	movs	r3, #0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d007      	beq.n	8005a8e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a6d      	ldr	r2, [pc, #436]	@ (8005c48 <HAL_DMA_Abort+0x444>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d04a      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a6b      	ldr	r2, [pc, #428]	@ (8005c4c <HAL_DMA_Abort+0x448>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d045      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a6a      	ldr	r2, [pc, #424]	@ (8005c50 <HAL_DMA_Abort+0x44c>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d040      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a68      	ldr	r2, [pc, #416]	@ (8005c54 <HAL_DMA_Abort+0x450>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d03b      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a67      	ldr	r2, [pc, #412]	@ (8005c58 <HAL_DMA_Abort+0x454>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d036      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a65      	ldr	r2, [pc, #404]	@ (8005c5c <HAL_DMA_Abort+0x458>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d031      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a64      	ldr	r2, [pc, #400]	@ (8005c60 <HAL_DMA_Abort+0x45c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d02c      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a62      	ldr	r2, [pc, #392]	@ (8005c64 <HAL_DMA_Abort+0x460>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d027      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a61      	ldr	r2, [pc, #388]	@ (8005c68 <HAL_DMA_Abort+0x464>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d022      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a5f      	ldr	r2, [pc, #380]	@ (8005c6c <HAL_DMA_Abort+0x468>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d01d      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a5e      	ldr	r2, [pc, #376]	@ (8005c70 <HAL_DMA_Abort+0x46c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d018      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a5c      	ldr	r2, [pc, #368]	@ (8005c74 <HAL_DMA_Abort+0x470>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d013      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a5b      	ldr	r2, [pc, #364]	@ (8005c78 <HAL_DMA_Abort+0x474>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d00e      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a59      	ldr	r2, [pc, #356]	@ (8005c7c <HAL_DMA_Abort+0x478>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d009      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a58      	ldr	r2, [pc, #352]	@ (8005c80 <HAL_DMA_Abort+0x47c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d004      	beq.n	8005b2e <HAL_DMA_Abort+0x32a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a56      	ldr	r2, [pc, #344]	@ (8005c84 <HAL_DMA_Abort+0x480>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d108      	bne.n	8005b40 <HAL_DMA_Abort+0x33c>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0201 	bic.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	e007      	b.n	8005b50 <HAL_DMA_Abort+0x34c>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0201 	bic.w	r2, r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005b50:	e013      	b.n	8005b7a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b52:	f7fc fe97 	bl	8002884 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	2b05      	cmp	r3, #5
 8005b5e:	d90c      	bls.n	8005b7a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2220      	movs	r2, #32
 8005b64:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2203      	movs	r2, #3
 8005b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e12d      	b.n	8005dd6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e5      	bne.n	8005b52 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a2f      	ldr	r2, [pc, #188]	@ (8005c48 <HAL_DMA_Abort+0x444>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d04a      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a2d      	ldr	r2, [pc, #180]	@ (8005c4c <HAL_DMA_Abort+0x448>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d045      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a2c      	ldr	r2, [pc, #176]	@ (8005c50 <HAL_DMA_Abort+0x44c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d040      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a2a      	ldr	r2, [pc, #168]	@ (8005c54 <HAL_DMA_Abort+0x450>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d03b      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a29      	ldr	r2, [pc, #164]	@ (8005c58 <HAL_DMA_Abort+0x454>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d036      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a27      	ldr	r2, [pc, #156]	@ (8005c5c <HAL_DMA_Abort+0x458>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d031      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a26      	ldr	r2, [pc, #152]	@ (8005c60 <HAL_DMA_Abort+0x45c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d02c      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a24      	ldr	r2, [pc, #144]	@ (8005c64 <HAL_DMA_Abort+0x460>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d027      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a23      	ldr	r2, [pc, #140]	@ (8005c68 <HAL_DMA_Abort+0x464>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d022      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a21      	ldr	r2, [pc, #132]	@ (8005c6c <HAL_DMA_Abort+0x468>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d01d      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a20      	ldr	r2, [pc, #128]	@ (8005c70 <HAL_DMA_Abort+0x46c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d018      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a1e      	ldr	r2, [pc, #120]	@ (8005c74 <HAL_DMA_Abort+0x470>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d013      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a1d      	ldr	r2, [pc, #116]	@ (8005c78 <HAL_DMA_Abort+0x474>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d00e      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005c7c <HAL_DMA_Abort+0x478>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d009      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a1a      	ldr	r2, [pc, #104]	@ (8005c80 <HAL_DMA_Abort+0x47c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d004      	beq.n	8005c26 <HAL_DMA_Abort+0x422>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a18      	ldr	r2, [pc, #96]	@ (8005c84 <HAL_DMA_Abort+0x480>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d101      	bne.n	8005c2a <HAL_DMA_Abort+0x426>
 8005c26:	2301      	movs	r3, #1
 8005c28:	e000      	b.n	8005c2c <HAL_DMA_Abort+0x428>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d02b      	beq.n	8005c88 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c34:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c3a:	f003 031f 	and.w	r3, r3, #31
 8005c3e:	223f      	movs	r2, #63	@ 0x3f
 8005c40:	409a      	lsls	r2, r3
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	609a      	str	r2, [r3, #8]
 8005c46:	e02a      	b.n	8005c9e <HAL_DMA_Abort+0x49a>
 8005c48:	40020010 	.word	0x40020010
 8005c4c:	40020028 	.word	0x40020028
 8005c50:	40020040 	.word	0x40020040
 8005c54:	40020058 	.word	0x40020058
 8005c58:	40020070 	.word	0x40020070
 8005c5c:	40020088 	.word	0x40020088
 8005c60:	400200a0 	.word	0x400200a0
 8005c64:	400200b8 	.word	0x400200b8
 8005c68:	40020410 	.word	0x40020410
 8005c6c:	40020428 	.word	0x40020428
 8005c70:	40020440 	.word	0x40020440
 8005c74:	40020458 	.word	0x40020458
 8005c78:	40020470 	.word	0x40020470
 8005c7c:	40020488 	.word	0x40020488
 8005c80:	400204a0 	.word	0x400204a0
 8005c84:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c8c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c92:	f003 031f 	and.w	r3, r3, #31
 8005c96:	2201      	movs	r2, #1
 8005c98:	409a      	lsls	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a4f      	ldr	r2, [pc, #316]	@ (8005de0 <HAL_DMA_Abort+0x5dc>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d072      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a4d      	ldr	r2, [pc, #308]	@ (8005de4 <HAL_DMA_Abort+0x5e0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d06d      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a4c      	ldr	r2, [pc, #304]	@ (8005de8 <HAL_DMA_Abort+0x5e4>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d068      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a4a      	ldr	r2, [pc, #296]	@ (8005dec <HAL_DMA_Abort+0x5e8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d063      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a49      	ldr	r2, [pc, #292]	@ (8005df0 <HAL_DMA_Abort+0x5ec>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d05e      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a47      	ldr	r2, [pc, #284]	@ (8005df4 <HAL_DMA_Abort+0x5f0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d059      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a46      	ldr	r2, [pc, #280]	@ (8005df8 <HAL_DMA_Abort+0x5f4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d054      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a44      	ldr	r2, [pc, #272]	@ (8005dfc <HAL_DMA_Abort+0x5f8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d04f      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a43      	ldr	r2, [pc, #268]	@ (8005e00 <HAL_DMA_Abort+0x5fc>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d04a      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a41      	ldr	r2, [pc, #260]	@ (8005e04 <HAL_DMA_Abort+0x600>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d045      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a40      	ldr	r2, [pc, #256]	@ (8005e08 <HAL_DMA_Abort+0x604>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d040      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a3e      	ldr	r2, [pc, #248]	@ (8005e0c <HAL_DMA_Abort+0x608>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d03b      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a3d      	ldr	r2, [pc, #244]	@ (8005e10 <HAL_DMA_Abort+0x60c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d036      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a3b      	ldr	r2, [pc, #236]	@ (8005e14 <HAL_DMA_Abort+0x610>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d031      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a3a      	ldr	r2, [pc, #232]	@ (8005e18 <HAL_DMA_Abort+0x614>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d02c      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a38      	ldr	r2, [pc, #224]	@ (8005e1c <HAL_DMA_Abort+0x618>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d027      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a37      	ldr	r2, [pc, #220]	@ (8005e20 <HAL_DMA_Abort+0x61c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d022      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a35      	ldr	r2, [pc, #212]	@ (8005e24 <HAL_DMA_Abort+0x620>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d01d      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a34      	ldr	r2, [pc, #208]	@ (8005e28 <HAL_DMA_Abort+0x624>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d018      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a32      	ldr	r2, [pc, #200]	@ (8005e2c <HAL_DMA_Abort+0x628>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d013      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a31      	ldr	r2, [pc, #196]	@ (8005e30 <HAL_DMA_Abort+0x62c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00e      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a2f      	ldr	r2, [pc, #188]	@ (8005e34 <HAL_DMA_Abort+0x630>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d009      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a2e      	ldr	r2, [pc, #184]	@ (8005e38 <HAL_DMA_Abort+0x634>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d004      	beq.n	8005d8e <HAL_DMA_Abort+0x58a>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a2c      	ldr	r2, [pc, #176]	@ (8005e3c <HAL_DMA_Abort+0x638>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d101      	bne.n	8005d92 <HAL_DMA_Abort+0x58e>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e000      	b.n	8005d94 <HAL_DMA_Abort+0x590>
 8005d92:	2300      	movs	r3, #0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d015      	beq.n	8005dc4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005da0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00c      	beq.n	8005dc4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005db4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005db8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005dc2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	40020010 	.word	0x40020010
 8005de4:	40020028 	.word	0x40020028
 8005de8:	40020040 	.word	0x40020040
 8005dec:	40020058 	.word	0x40020058
 8005df0:	40020070 	.word	0x40020070
 8005df4:	40020088 	.word	0x40020088
 8005df8:	400200a0 	.word	0x400200a0
 8005dfc:	400200b8 	.word	0x400200b8
 8005e00:	40020410 	.word	0x40020410
 8005e04:	40020428 	.word	0x40020428
 8005e08:	40020440 	.word	0x40020440
 8005e0c:	40020458 	.word	0x40020458
 8005e10:	40020470 	.word	0x40020470
 8005e14:	40020488 	.word	0x40020488
 8005e18:	400204a0 	.word	0x400204a0
 8005e1c:	400204b8 	.word	0x400204b8
 8005e20:	58025408 	.word	0x58025408
 8005e24:	5802541c 	.word	0x5802541c
 8005e28:	58025430 	.word	0x58025430
 8005e2c:	58025444 	.word	0x58025444
 8005e30:	58025458 	.word	0x58025458
 8005e34:	5802546c 	.word	0x5802546c
 8005e38:	58025480 	.word	0x58025480
 8005e3c:	58025494 	.word	0x58025494

08005e40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e237      	b.n	80062c2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d004      	beq.n	8005e68 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2280      	movs	r2, #128	@ 0x80
 8005e62:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e22c      	b.n	80062c2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a5c      	ldr	r2, [pc, #368]	@ (8005fe0 <HAL_DMA_Abort_IT+0x1a0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d04a      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a5b      	ldr	r2, [pc, #364]	@ (8005fe4 <HAL_DMA_Abort_IT+0x1a4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d045      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a59      	ldr	r2, [pc, #356]	@ (8005fe8 <HAL_DMA_Abort_IT+0x1a8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d040      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a58      	ldr	r2, [pc, #352]	@ (8005fec <HAL_DMA_Abort_IT+0x1ac>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d03b      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a56      	ldr	r2, [pc, #344]	@ (8005ff0 <HAL_DMA_Abort_IT+0x1b0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d036      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a55      	ldr	r2, [pc, #340]	@ (8005ff4 <HAL_DMA_Abort_IT+0x1b4>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d031      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a53      	ldr	r2, [pc, #332]	@ (8005ff8 <HAL_DMA_Abort_IT+0x1b8>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d02c      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a52      	ldr	r2, [pc, #328]	@ (8005ffc <HAL_DMA_Abort_IT+0x1bc>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d027      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a50      	ldr	r2, [pc, #320]	@ (8006000 <HAL_DMA_Abort_IT+0x1c0>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d022      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a4f      	ldr	r2, [pc, #316]	@ (8006004 <HAL_DMA_Abort_IT+0x1c4>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d01d      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a4d      	ldr	r2, [pc, #308]	@ (8006008 <HAL_DMA_Abort_IT+0x1c8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d018      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a4c      	ldr	r2, [pc, #304]	@ (800600c <HAL_DMA_Abort_IT+0x1cc>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d013      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a4a      	ldr	r2, [pc, #296]	@ (8006010 <HAL_DMA_Abort_IT+0x1d0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d00e      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a49      	ldr	r2, [pc, #292]	@ (8006014 <HAL_DMA_Abort_IT+0x1d4>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d009      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a47      	ldr	r2, [pc, #284]	@ (8006018 <HAL_DMA_Abort_IT+0x1d8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d004      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xc8>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a46      	ldr	r2, [pc, #280]	@ (800601c <HAL_DMA_Abort_IT+0x1dc>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d101      	bne.n	8005f0c <HAL_DMA_Abort_IT+0xcc>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e000      	b.n	8005f0e <HAL_DMA_Abort_IT+0xce>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 8086 	beq.w	8006020 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2204      	movs	r2, #4
 8005f18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a2f      	ldr	r2, [pc, #188]	@ (8005fe0 <HAL_DMA_Abort_IT+0x1a0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d04a      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a2e      	ldr	r2, [pc, #184]	@ (8005fe4 <HAL_DMA_Abort_IT+0x1a4>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d045      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a2c      	ldr	r2, [pc, #176]	@ (8005fe8 <HAL_DMA_Abort_IT+0x1a8>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d040      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a2b      	ldr	r2, [pc, #172]	@ (8005fec <HAL_DMA_Abort_IT+0x1ac>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d03b      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a29      	ldr	r2, [pc, #164]	@ (8005ff0 <HAL_DMA_Abort_IT+0x1b0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d036      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a28      	ldr	r2, [pc, #160]	@ (8005ff4 <HAL_DMA_Abort_IT+0x1b4>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d031      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a26      	ldr	r2, [pc, #152]	@ (8005ff8 <HAL_DMA_Abort_IT+0x1b8>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d02c      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a25      	ldr	r2, [pc, #148]	@ (8005ffc <HAL_DMA_Abort_IT+0x1bc>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d027      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a23      	ldr	r2, [pc, #140]	@ (8006000 <HAL_DMA_Abort_IT+0x1c0>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d022      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a22      	ldr	r2, [pc, #136]	@ (8006004 <HAL_DMA_Abort_IT+0x1c4>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d01d      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a20      	ldr	r2, [pc, #128]	@ (8006008 <HAL_DMA_Abort_IT+0x1c8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d018      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800600c <HAL_DMA_Abort_IT+0x1cc>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d013      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a1d      	ldr	r2, [pc, #116]	@ (8006010 <HAL_DMA_Abort_IT+0x1d0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d00e      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8006014 <HAL_DMA_Abort_IT+0x1d4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d009      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1a      	ldr	r2, [pc, #104]	@ (8006018 <HAL_DMA_Abort_IT+0x1d8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d004      	beq.n	8005fbc <HAL_DMA_Abort_IT+0x17c>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a19      	ldr	r2, [pc, #100]	@ (800601c <HAL_DMA_Abort_IT+0x1dc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d108      	bne.n	8005fce <HAL_DMA_Abort_IT+0x18e>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0201 	bic.w	r2, r2, #1
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	e178      	b.n	80062c0 <HAL_DMA_Abort_IT+0x480>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 0201 	bic.w	r2, r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	e16f      	b.n	80062c0 <HAL_DMA_Abort_IT+0x480>
 8005fe0:	40020010 	.word	0x40020010
 8005fe4:	40020028 	.word	0x40020028
 8005fe8:	40020040 	.word	0x40020040
 8005fec:	40020058 	.word	0x40020058
 8005ff0:	40020070 	.word	0x40020070
 8005ff4:	40020088 	.word	0x40020088
 8005ff8:	400200a0 	.word	0x400200a0
 8005ffc:	400200b8 	.word	0x400200b8
 8006000:	40020410 	.word	0x40020410
 8006004:	40020428 	.word	0x40020428
 8006008:	40020440 	.word	0x40020440
 800600c:	40020458 	.word	0x40020458
 8006010:	40020470 	.word	0x40020470
 8006014:	40020488 	.word	0x40020488
 8006018:	400204a0 	.word	0x400204a0
 800601c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 020e 	bic.w	r2, r2, #14
 800602e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a6c      	ldr	r2, [pc, #432]	@ (80061e8 <HAL_DMA_Abort_IT+0x3a8>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d04a      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a6b      	ldr	r2, [pc, #428]	@ (80061ec <HAL_DMA_Abort_IT+0x3ac>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d045      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a69      	ldr	r2, [pc, #420]	@ (80061f0 <HAL_DMA_Abort_IT+0x3b0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d040      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a68      	ldr	r2, [pc, #416]	@ (80061f4 <HAL_DMA_Abort_IT+0x3b4>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d03b      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a66      	ldr	r2, [pc, #408]	@ (80061f8 <HAL_DMA_Abort_IT+0x3b8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d036      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a65      	ldr	r2, [pc, #404]	@ (80061fc <HAL_DMA_Abort_IT+0x3bc>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d031      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a63      	ldr	r2, [pc, #396]	@ (8006200 <HAL_DMA_Abort_IT+0x3c0>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d02c      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a62      	ldr	r2, [pc, #392]	@ (8006204 <HAL_DMA_Abort_IT+0x3c4>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d027      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a60      	ldr	r2, [pc, #384]	@ (8006208 <HAL_DMA_Abort_IT+0x3c8>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d022      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a5f      	ldr	r2, [pc, #380]	@ (800620c <HAL_DMA_Abort_IT+0x3cc>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d01d      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a5d      	ldr	r2, [pc, #372]	@ (8006210 <HAL_DMA_Abort_IT+0x3d0>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d018      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a5c      	ldr	r2, [pc, #368]	@ (8006214 <HAL_DMA_Abort_IT+0x3d4>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d013      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a5a      	ldr	r2, [pc, #360]	@ (8006218 <HAL_DMA_Abort_IT+0x3d8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d00e      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a59      	ldr	r2, [pc, #356]	@ (800621c <HAL_DMA_Abort_IT+0x3dc>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d009      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a57      	ldr	r2, [pc, #348]	@ (8006220 <HAL_DMA_Abort_IT+0x3e0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d004      	beq.n	80060d0 <HAL_DMA_Abort_IT+0x290>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a56      	ldr	r2, [pc, #344]	@ (8006224 <HAL_DMA_Abort_IT+0x3e4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d108      	bne.n	80060e2 <HAL_DMA_Abort_IT+0x2a2>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0201 	bic.w	r2, r2, #1
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	e007      	b.n	80060f2 <HAL_DMA_Abort_IT+0x2b2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0201 	bic.w	r2, r2, #1
 80060f0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a3c      	ldr	r2, [pc, #240]	@ (80061e8 <HAL_DMA_Abort_IT+0x3a8>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d072      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a3a      	ldr	r2, [pc, #232]	@ (80061ec <HAL_DMA_Abort_IT+0x3ac>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d06d      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a39      	ldr	r2, [pc, #228]	@ (80061f0 <HAL_DMA_Abort_IT+0x3b0>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d068      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a37      	ldr	r2, [pc, #220]	@ (80061f4 <HAL_DMA_Abort_IT+0x3b4>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d063      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a36      	ldr	r2, [pc, #216]	@ (80061f8 <HAL_DMA_Abort_IT+0x3b8>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d05e      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a34      	ldr	r2, [pc, #208]	@ (80061fc <HAL_DMA_Abort_IT+0x3bc>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d059      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a33      	ldr	r2, [pc, #204]	@ (8006200 <HAL_DMA_Abort_IT+0x3c0>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d054      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a31      	ldr	r2, [pc, #196]	@ (8006204 <HAL_DMA_Abort_IT+0x3c4>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d04f      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a30      	ldr	r2, [pc, #192]	@ (8006208 <HAL_DMA_Abort_IT+0x3c8>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d04a      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a2e      	ldr	r2, [pc, #184]	@ (800620c <HAL_DMA_Abort_IT+0x3cc>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d045      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a2d      	ldr	r2, [pc, #180]	@ (8006210 <HAL_DMA_Abort_IT+0x3d0>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d040      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a2b      	ldr	r2, [pc, #172]	@ (8006214 <HAL_DMA_Abort_IT+0x3d4>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d03b      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a2a      	ldr	r2, [pc, #168]	@ (8006218 <HAL_DMA_Abort_IT+0x3d8>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d036      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a28      	ldr	r2, [pc, #160]	@ (800621c <HAL_DMA_Abort_IT+0x3dc>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d031      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a27      	ldr	r2, [pc, #156]	@ (8006220 <HAL_DMA_Abort_IT+0x3e0>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d02c      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a25      	ldr	r2, [pc, #148]	@ (8006224 <HAL_DMA_Abort_IT+0x3e4>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d027      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a24      	ldr	r2, [pc, #144]	@ (8006228 <HAL_DMA_Abort_IT+0x3e8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d022      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a22      	ldr	r2, [pc, #136]	@ (800622c <HAL_DMA_Abort_IT+0x3ec>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d01d      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a21      	ldr	r2, [pc, #132]	@ (8006230 <HAL_DMA_Abort_IT+0x3f0>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d018      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a1f      	ldr	r2, [pc, #124]	@ (8006234 <HAL_DMA_Abort_IT+0x3f4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d013      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a1e      	ldr	r2, [pc, #120]	@ (8006238 <HAL_DMA_Abort_IT+0x3f8>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d00e      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a1c      	ldr	r2, [pc, #112]	@ (800623c <HAL_DMA_Abort_IT+0x3fc>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d009      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a1b      	ldr	r2, [pc, #108]	@ (8006240 <HAL_DMA_Abort_IT+0x400>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d004      	beq.n	80061e2 <HAL_DMA_Abort_IT+0x3a2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a19      	ldr	r2, [pc, #100]	@ (8006244 <HAL_DMA_Abort_IT+0x404>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d132      	bne.n	8006248 <HAL_DMA_Abort_IT+0x408>
 80061e2:	2301      	movs	r3, #1
 80061e4:	e031      	b.n	800624a <HAL_DMA_Abort_IT+0x40a>
 80061e6:	bf00      	nop
 80061e8:	40020010 	.word	0x40020010
 80061ec:	40020028 	.word	0x40020028
 80061f0:	40020040 	.word	0x40020040
 80061f4:	40020058 	.word	0x40020058
 80061f8:	40020070 	.word	0x40020070
 80061fc:	40020088 	.word	0x40020088
 8006200:	400200a0 	.word	0x400200a0
 8006204:	400200b8 	.word	0x400200b8
 8006208:	40020410 	.word	0x40020410
 800620c:	40020428 	.word	0x40020428
 8006210:	40020440 	.word	0x40020440
 8006214:	40020458 	.word	0x40020458
 8006218:	40020470 	.word	0x40020470
 800621c:	40020488 	.word	0x40020488
 8006220:	400204a0 	.word	0x400204a0
 8006224:	400204b8 	.word	0x400204b8
 8006228:	58025408 	.word	0x58025408
 800622c:	5802541c 	.word	0x5802541c
 8006230:	58025430 	.word	0x58025430
 8006234:	58025444 	.word	0x58025444
 8006238:	58025458 	.word	0x58025458
 800623c:	5802546c 	.word	0x5802546c
 8006240:	58025480 	.word	0x58025480
 8006244:	58025494 	.word	0x58025494
 8006248:	2300      	movs	r3, #0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d028      	beq.n	80062a0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006258:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800625c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006262:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006268:	f003 031f 	and.w	r3, r3, #31
 800626c:	2201      	movs	r2, #1
 800626e:	409a      	lsls	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800627c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00c      	beq.n	80062a0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006290:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006294:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800629e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop

080062cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b08a      	sub	sp, #40	@ 0x28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80062d8:	4b67      	ldr	r3, [pc, #412]	@ (8006478 <HAL_DMA_IRQHandler+0x1ac>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a67      	ldr	r2, [pc, #412]	@ (800647c <HAL_DMA_IRQHandler+0x1b0>)
 80062de:	fba2 2303 	umull	r2, r3, r2, r3
 80062e2:	0a9b      	lsrs	r3, r3, #10
 80062e4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062f0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a5f      	ldr	r2, [pc, #380]	@ (8006480 <HAL_DMA_IRQHandler+0x1b4>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d04a      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a5d      	ldr	r2, [pc, #372]	@ (8006484 <HAL_DMA_IRQHandler+0x1b8>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d045      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a5c      	ldr	r2, [pc, #368]	@ (8006488 <HAL_DMA_IRQHandler+0x1bc>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d040      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a5a      	ldr	r2, [pc, #360]	@ (800648c <HAL_DMA_IRQHandler+0x1c0>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d03b      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a59      	ldr	r2, [pc, #356]	@ (8006490 <HAL_DMA_IRQHandler+0x1c4>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d036      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a57      	ldr	r2, [pc, #348]	@ (8006494 <HAL_DMA_IRQHandler+0x1c8>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d031      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a56      	ldr	r2, [pc, #344]	@ (8006498 <HAL_DMA_IRQHandler+0x1cc>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d02c      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a54      	ldr	r2, [pc, #336]	@ (800649c <HAL_DMA_IRQHandler+0x1d0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d027      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a53      	ldr	r2, [pc, #332]	@ (80064a0 <HAL_DMA_IRQHandler+0x1d4>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d022      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a51      	ldr	r2, [pc, #324]	@ (80064a4 <HAL_DMA_IRQHandler+0x1d8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d01d      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a50      	ldr	r2, [pc, #320]	@ (80064a8 <HAL_DMA_IRQHandler+0x1dc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d018      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a4e      	ldr	r2, [pc, #312]	@ (80064ac <HAL_DMA_IRQHandler+0x1e0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d013      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a4d      	ldr	r2, [pc, #308]	@ (80064b0 <HAL_DMA_IRQHandler+0x1e4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d00e      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a4b      	ldr	r2, [pc, #300]	@ (80064b4 <HAL_DMA_IRQHandler+0x1e8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d009      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a4a      	ldr	r2, [pc, #296]	@ (80064b8 <HAL_DMA_IRQHandler+0x1ec>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d004      	beq.n	800639e <HAL_DMA_IRQHandler+0xd2>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a48      	ldr	r2, [pc, #288]	@ (80064bc <HAL_DMA_IRQHandler+0x1f0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d101      	bne.n	80063a2 <HAL_DMA_IRQHandler+0xd6>
 800639e:	2301      	movs	r3, #1
 80063a0:	e000      	b.n	80063a4 <HAL_DMA_IRQHandler+0xd8>
 80063a2:	2300      	movs	r3, #0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 842b 	beq.w	8006c00 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	2208      	movs	r2, #8
 80063b4:	409a      	lsls	r2, r3
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	4013      	ands	r3, r2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 80a2 	beq.w	8006504 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a2e      	ldr	r2, [pc, #184]	@ (8006480 <HAL_DMA_IRQHandler+0x1b4>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d04a      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a2d      	ldr	r2, [pc, #180]	@ (8006484 <HAL_DMA_IRQHandler+0x1b8>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d045      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a2b      	ldr	r2, [pc, #172]	@ (8006488 <HAL_DMA_IRQHandler+0x1bc>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d040      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a2a      	ldr	r2, [pc, #168]	@ (800648c <HAL_DMA_IRQHandler+0x1c0>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d03b      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a28      	ldr	r2, [pc, #160]	@ (8006490 <HAL_DMA_IRQHandler+0x1c4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d036      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a27      	ldr	r2, [pc, #156]	@ (8006494 <HAL_DMA_IRQHandler+0x1c8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d031      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a25      	ldr	r2, [pc, #148]	@ (8006498 <HAL_DMA_IRQHandler+0x1cc>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d02c      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a24      	ldr	r2, [pc, #144]	@ (800649c <HAL_DMA_IRQHandler+0x1d0>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d027      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a22      	ldr	r2, [pc, #136]	@ (80064a0 <HAL_DMA_IRQHandler+0x1d4>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d022      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a21      	ldr	r2, [pc, #132]	@ (80064a4 <HAL_DMA_IRQHandler+0x1d8>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d01d      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a1f      	ldr	r2, [pc, #124]	@ (80064a8 <HAL_DMA_IRQHandler+0x1dc>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d018      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a1e      	ldr	r2, [pc, #120]	@ (80064ac <HAL_DMA_IRQHandler+0x1e0>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d013      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1c      	ldr	r2, [pc, #112]	@ (80064b0 <HAL_DMA_IRQHandler+0x1e4>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00e      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a1b      	ldr	r2, [pc, #108]	@ (80064b4 <HAL_DMA_IRQHandler+0x1e8>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d009      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a19      	ldr	r2, [pc, #100]	@ (80064b8 <HAL_DMA_IRQHandler+0x1ec>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d004      	beq.n	8006460 <HAL_DMA_IRQHandler+0x194>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a18      	ldr	r2, [pc, #96]	@ (80064bc <HAL_DMA_IRQHandler+0x1f0>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d12f      	bne.n	80064c0 <HAL_DMA_IRQHandler+0x1f4>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0304 	and.w	r3, r3, #4
 800646a:	2b00      	cmp	r3, #0
 800646c:	bf14      	ite	ne
 800646e:	2301      	movne	r3, #1
 8006470:	2300      	moveq	r3, #0
 8006472:	b2db      	uxtb	r3, r3
 8006474:	e02e      	b.n	80064d4 <HAL_DMA_IRQHandler+0x208>
 8006476:	bf00      	nop
 8006478:	24000054 	.word	0x24000054
 800647c:	1b4e81b5 	.word	0x1b4e81b5
 8006480:	40020010 	.word	0x40020010
 8006484:	40020028 	.word	0x40020028
 8006488:	40020040 	.word	0x40020040
 800648c:	40020058 	.word	0x40020058
 8006490:	40020070 	.word	0x40020070
 8006494:	40020088 	.word	0x40020088
 8006498:	400200a0 	.word	0x400200a0
 800649c:	400200b8 	.word	0x400200b8
 80064a0:	40020410 	.word	0x40020410
 80064a4:	40020428 	.word	0x40020428
 80064a8:	40020440 	.word	0x40020440
 80064ac:	40020458 	.word	0x40020458
 80064b0:	40020470 	.word	0x40020470
 80064b4:	40020488 	.word	0x40020488
 80064b8:	400204a0 	.word	0x400204a0
 80064bc:	400204b8 	.word	0x400204b8
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0308 	and.w	r3, r3, #8
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	bf14      	ite	ne
 80064ce:	2301      	movne	r3, #1
 80064d0:	2300      	moveq	r3, #0
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d015      	beq.n	8006504 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0204 	bic.w	r2, r2, #4
 80064e6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064ec:	f003 031f 	and.w	r3, r3, #31
 80064f0:	2208      	movs	r2, #8
 80064f2:	409a      	lsls	r2, r3
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064fc:	f043 0201 	orr.w	r2, r3, #1
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006508:	f003 031f 	and.w	r3, r3, #31
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	fa22 f303 	lsr.w	r3, r2, r3
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d06e      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a69      	ldr	r2, [pc, #420]	@ (80066c4 <HAL_DMA_IRQHandler+0x3f8>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d04a      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a67      	ldr	r2, [pc, #412]	@ (80066c8 <HAL_DMA_IRQHandler+0x3fc>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d045      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a66      	ldr	r2, [pc, #408]	@ (80066cc <HAL_DMA_IRQHandler+0x400>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d040      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a64      	ldr	r2, [pc, #400]	@ (80066d0 <HAL_DMA_IRQHandler+0x404>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d03b      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a63      	ldr	r2, [pc, #396]	@ (80066d4 <HAL_DMA_IRQHandler+0x408>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d036      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a61      	ldr	r2, [pc, #388]	@ (80066d8 <HAL_DMA_IRQHandler+0x40c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d031      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a60      	ldr	r2, [pc, #384]	@ (80066dc <HAL_DMA_IRQHandler+0x410>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d02c      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a5e      	ldr	r2, [pc, #376]	@ (80066e0 <HAL_DMA_IRQHandler+0x414>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d027      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a5d      	ldr	r2, [pc, #372]	@ (80066e4 <HAL_DMA_IRQHandler+0x418>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d022      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a5b      	ldr	r2, [pc, #364]	@ (80066e8 <HAL_DMA_IRQHandler+0x41c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d01d      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a5a      	ldr	r2, [pc, #360]	@ (80066ec <HAL_DMA_IRQHandler+0x420>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d018      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a58      	ldr	r2, [pc, #352]	@ (80066f0 <HAL_DMA_IRQHandler+0x424>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d013      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a57      	ldr	r2, [pc, #348]	@ (80066f4 <HAL_DMA_IRQHandler+0x428>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00e      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a55      	ldr	r2, [pc, #340]	@ (80066f8 <HAL_DMA_IRQHandler+0x42c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d009      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a54      	ldr	r2, [pc, #336]	@ (80066fc <HAL_DMA_IRQHandler+0x430>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d004      	beq.n	80065ba <HAL_DMA_IRQHandler+0x2ee>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a52      	ldr	r2, [pc, #328]	@ (8006700 <HAL_DMA_IRQHandler+0x434>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d10a      	bne.n	80065d0 <HAL_DMA_IRQHandler+0x304>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	bf14      	ite	ne
 80065c8:	2301      	movne	r3, #1
 80065ca:	2300      	moveq	r3, #0
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	e003      	b.n	80065d8 <HAL_DMA_IRQHandler+0x30c>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2300      	movs	r3, #0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00d      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065e0:	f003 031f 	and.w	r3, r3, #31
 80065e4:	2201      	movs	r2, #1
 80065e6:	409a      	lsls	r2, r3
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065f0:	f043 0202 	orr.w	r2, r3, #2
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065fc:	f003 031f 	and.w	r3, r3, #31
 8006600:	2204      	movs	r2, #4
 8006602:	409a      	lsls	r2, r3
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	4013      	ands	r3, r2
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 808f 	beq.w	800672c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a2c      	ldr	r2, [pc, #176]	@ (80066c4 <HAL_DMA_IRQHandler+0x3f8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d04a      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a2a      	ldr	r2, [pc, #168]	@ (80066c8 <HAL_DMA_IRQHandler+0x3fc>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d045      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a29      	ldr	r2, [pc, #164]	@ (80066cc <HAL_DMA_IRQHandler+0x400>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d040      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a27      	ldr	r2, [pc, #156]	@ (80066d0 <HAL_DMA_IRQHandler+0x404>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d03b      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a26      	ldr	r2, [pc, #152]	@ (80066d4 <HAL_DMA_IRQHandler+0x408>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d036      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a24      	ldr	r2, [pc, #144]	@ (80066d8 <HAL_DMA_IRQHandler+0x40c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d031      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a23      	ldr	r2, [pc, #140]	@ (80066dc <HAL_DMA_IRQHandler+0x410>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d02c      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a21      	ldr	r2, [pc, #132]	@ (80066e0 <HAL_DMA_IRQHandler+0x414>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d027      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a20      	ldr	r2, [pc, #128]	@ (80066e4 <HAL_DMA_IRQHandler+0x418>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d022      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a1e      	ldr	r2, [pc, #120]	@ (80066e8 <HAL_DMA_IRQHandler+0x41c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d01d      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a1d      	ldr	r2, [pc, #116]	@ (80066ec <HAL_DMA_IRQHandler+0x420>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d018      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a1b      	ldr	r2, [pc, #108]	@ (80066f0 <HAL_DMA_IRQHandler+0x424>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d013      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a1a      	ldr	r2, [pc, #104]	@ (80066f4 <HAL_DMA_IRQHandler+0x428>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d00e      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a18      	ldr	r2, [pc, #96]	@ (80066f8 <HAL_DMA_IRQHandler+0x42c>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d009      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a17      	ldr	r2, [pc, #92]	@ (80066fc <HAL_DMA_IRQHandler+0x430>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d004      	beq.n	80066ae <HAL_DMA_IRQHandler+0x3e2>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a15      	ldr	r2, [pc, #84]	@ (8006700 <HAL_DMA_IRQHandler+0x434>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d12a      	bne.n	8006704 <HAL_DMA_IRQHandler+0x438>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	bf14      	ite	ne
 80066bc:	2301      	movne	r3, #1
 80066be:	2300      	moveq	r3, #0
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	e023      	b.n	800670c <HAL_DMA_IRQHandler+0x440>
 80066c4:	40020010 	.word	0x40020010
 80066c8:	40020028 	.word	0x40020028
 80066cc:	40020040 	.word	0x40020040
 80066d0:	40020058 	.word	0x40020058
 80066d4:	40020070 	.word	0x40020070
 80066d8:	40020088 	.word	0x40020088
 80066dc:	400200a0 	.word	0x400200a0
 80066e0:	400200b8 	.word	0x400200b8
 80066e4:	40020410 	.word	0x40020410
 80066e8:	40020428 	.word	0x40020428
 80066ec:	40020440 	.word	0x40020440
 80066f0:	40020458 	.word	0x40020458
 80066f4:	40020470 	.word	0x40020470
 80066f8:	40020488 	.word	0x40020488
 80066fc:	400204a0 	.word	0x400204a0
 8006700:	400204b8 	.word	0x400204b8
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2300      	movs	r3, #0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00d      	beq.n	800672c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006714:	f003 031f 	and.w	r3, r3, #31
 8006718:	2204      	movs	r2, #4
 800671a:	409a      	lsls	r2, r3
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006724:	f043 0204 	orr.w	r2, r3, #4
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006730:	f003 031f 	and.w	r3, r3, #31
 8006734:	2210      	movs	r2, #16
 8006736:	409a      	lsls	r2, r3
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	4013      	ands	r3, r2
 800673c:	2b00      	cmp	r3, #0
 800673e:	f000 80a6 	beq.w	800688e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a85      	ldr	r2, [pc, #532]	@ (800695c <HAL_DMA_IRQHandler+0x690>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d04a      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a83      	ldr	r2, [pc, #524]	@ (8006960 <HAL_DMA_IRQHandler+0x694>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d045      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a82      	ldr	r2, [pc, #520]	@ (8006964 <HAL_DMA_IRQHandler+0x698>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d040      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a80      	ldr	r2, [pc, #512]	@ (8006968 <HAL_DMA_IRQHandler+0x69c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d03b      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a7f      	ldr	r2, [pc, #508]	@ (800696c <HAL_DMA_IRQHandler+0x6a0>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d036      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a7d      	ldr	r2, [pc, #500]	@ (8006970 <HAL_DMA_IRQHandler+0x6a4>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d031      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a7c      	ldr	r2, [pc, #496]	@ (8006974 <HAL_DMA_IRQHandler+0x6a8>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d02c      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a7a      	ldr	r2, [pc, #488]	@ (8006978 <HAL_DMA_IRQHandler+0x6ac>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d027      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a79      	ldr	r2, [pc, #484]	@ (800697c <HAL_DMA_IRQHandler+0x6b0>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d022      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a77      	ldr	r2, [pc, #476]	@ (8006980 <HAL_DMA_IRQHandler+0x6b4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d01d      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a76      	ldr	r2, [pc, #472]	@ (8006984 <HAL_DMA_IRQHandler+0x6b8>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d018      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a74      	ldr	r2, [pc, #464]	@ (8006988 <HAL_DMA_IRQHandler+0x6bc>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d013      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a73      	ldr	r2, [pc, #460]	@ (800698c <HAL_DMA_IRQHandler+0x6c0>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00e      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a71      	ldr	r2, [pc, #452]	@ (8006990 <HAL_DMA_IRQHandler+0x6c4>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d009      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a70      	ldr	r2, [pc, #448]	@ (8006994 <HAL_DMA_IRQHandler+0x6c8>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d004      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x516>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a6e      	ldr	r2, [pc, #440]	@ (8006998 <HAL_DMA_IRQHandler+0x6cc>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d10a      	bne.n	80067f8 <HAL_DMA_IRQHandler+0x52c>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0308 	and.w	r3, r3, #8
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	bf14      	ite	ne
 80067f0:	2301      	movne	r3, #1
 80067f2:	2300      	moveq	r3, #0
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	e009      	b.n	800680c <HAL_DMA_IRQHandler+0x540>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0304 	and.w	r3, r3, #4
 8006802:	2b00      	cmp	r3, #0
 8006804:	bf14      	ite	ne
 8006806:	2301      	movne	r3, #1
 8006808:	2300      	moveq	r3, #0
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b00      	cmp	r3, #0
 800680e:	d03e      	beq.n	800688e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006814:	f003 031f 	and.w	r3, r3, #31
 8006818:	2210      	movs	r2, #16
 800681a:	409a      	lsls	r2, r3
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d018      	beq.n	8006860 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d108      	bne.n	800684e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006840:	2b00      	cmp	r3, #0
 8006842:	d024      	beq.n	800688e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	4798      	blx	r3
 800684c:	e01f      	b.n	800688e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006852:	2b00      	cmp	r3, #0
 8006854:	d01b      	beq.n	800688e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	4798      	blx	r3
 800685e:	e016      	b.n	800688e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800686a:	2b00      	cmp	r3, #0
 800686c:	d107      	bne.n	800687e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0208 	bic.w	r2, r2, #8
 800687c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006892:	f003 031f 	and.w	r3, r3, #31
 8006896:	2220      	movs	r2, #32
 8006898:	409a      	lsls	r2, r3
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	4013      	ands	r3, r2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 8110 	beq.w	8006ac4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a2c      	ldr	r2, [pc, #176]	@ (800695c <HAL_DMA_IRQHandler+0x690>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d04a      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006960 <HAL_DMA_IRQHandler+0x694>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d045      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a29      	ldr	r2, [pc, #164]	@ (8006964 <HAL_DMA_IRQHandler+0x698>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d040      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a28      	ldr	r2, [pc, #160]	@ (8006968 <HAL_DMA_IRQHandler+0x69c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d03b      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a26      	ldr	r2, [pc, #152]	@ (800696c <HAL_DMA_IRQHandler+0x6a0>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d036      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a25      	ldr	r2, [pc, #148]	@ (8006970 <HAL_DMA_IRQHandler+0x6a4>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d031      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a23      	ldr	r2, [pc, #140]	@ (8006974 <HAL_DMA_IRQHandler+0x6a8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d02c      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a22      	ldr	r2, [pc, #136]	@ (8006978 <HAL_DMA_IRQHandler+0x6ac>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d027      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a20      	ldr	r2, [pc, #128]	@ (800697c <HAL_DMA_IRQHandler+0x6b0>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d022      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a1f      	ldr	r2, [pc, #124]	@ (8006980 <HAL_DMA_IRQHandler+0x6b4>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d01d      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a1d      	ldr	r2, [pc, #116]	@ (8006984 <HAL_DMA_IRQHandler+0x6b8>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d018      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a1c      	ldr	r2, [pc, #112]	@ (8006988 <HAL_DMA_IRQHandler+0x6bc>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d013      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a1a      	ldr	r2, [pc, #104]	@ (800698c <HAL_DMA_IRQHandler+0x6c0>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00e      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a19      	ldr	r2, [pc, #100]	@ (8006990 <HAL_DMA_IRQHandler+0x6c4>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d009      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a17      	ldr	r2, [pc, #92]	@ (8006994 <HAL_DMA_IRQHandler+0x6c8>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d004      	beq.n	8006944 <HAL_DMA_IRQHandler+0x678>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a16      	ldr	r2, [pc, #88]	@ (8006998 <HAL_DMA_IRQHandler+0x6cc>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d12b      	bne.n	800699c <HAL_DMA_IRQHandler+0x6d0>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0310 	and.w	r3, r3, #16
 800694e:	2b00      	cmp	r3, #0
 8006950:	bf14      	ite	ne
 8006952:	2301      	movne	r3, #1
 8006954:	2300      	moveq	r3, #0
 8006956:	b2db      	uxtb	r3, r3
 8006958:	e02a      	b.n	80069b0 <HAL_DMA_IRQHandler+0x6e4>
 800695a:	bf00      	nop
 800695c:	40020010 	.word	0x40020010
 8006960:	40020028 	.word	0x40020028
 8006964:	40020040 	.word	0x40020040
 8006968:	40020058 	.word	0x40020058
 800696c:	40020070 	.word	0x40020070
 8006970:	40020088 	.word	0x40020088
 8006974:	400200a0 	.word	0x400200a0
 8006978:	400200b8 	.word	0x400200b8
 800697c:	40020410 	.word	0x40020410
 8006980:	40020428 	.word	0x40020428
 8006984:	40020440 	.word	0x40020440
 8006988:	40020458 	.word	0x40020458
 800698c:	40020470 	.word	0x40020470
 8006990:	40020488 	.word	0x40020488
 8006994:	400204a0 	.word	0x400204a0
 8006998:	400204b8 	.word	0x400204b8
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	bf14      	ite	ne
 80069aa:	2301      	movne	r3, #1
 80069ac:	2300      	moveq	r3, #0
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 8087 	beq.w	8006ac4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ba:	f003 031f 	and.w	r3, r3, #31
 80069be:	2220      	movs	r2, #32
 80069c0:	409a      	lsls	r2, r3
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b04      	cmp	r3, #4
 80069d0:	d139      	bne.n	8006a46 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 0216 	bic.w	r2, r2, #22
 80069e0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	695a      	ldr	r2, [r3, #20]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069f0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d103      	bne.n	8006a02 <HAL_DMA_IRQHandler+0x736>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d007      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0208 	bic.w	r2, r2, #8
 8006a10:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a16:	f003 031f 	and.w	r3, r3, #31
 8006a1a:	223f      	movs	r2, #63	@ 0x3f
 8006a1c:	409a      	lsls	r2, r3
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 834a 	beq.w	80070d0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	4798      	blx	r3
          }
          return;
 8006a44:	e344      	b.n	80070d0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d018      	beq.n	8006a86 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d108      	bne.n	8006a74 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d02c      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	4798      	blx	r3
 8006a72:	e027      	b.n	8006ac4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d023      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	4798      	blx	r3
 8006a84:	e01e      	b.n	8006ac4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10f      	bne.n	8006ab4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0210 	bic.w	r2, r2, #16
 8006aa2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 8306 	beq.w	80070da <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 8088 	beq.w	8006bec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2204      	movs	r2, #4
 8006ae0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a7a      	ldr	r2, [pc, #488]	@ (8006cd4 <HAL_DMA_IRQHandler+0xa08>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d04a      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a79      	ldr	r2, [pc, #484]	@ (8006cd8 <HAL_DMA_IRQHandler+0xa0c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d045      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a77      	ldr	r2, [pc, #476]	@ (8006cdc <HAL_DMA_IRQHandler+0xa10>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d040      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a76      	ldr	r2, [pc, #472]	@ (8006ce0 <HAL_DMA_IRQHandler+0xa14>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d03b      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a74      	ldr	r2, [pc, #464]	@ (8006ce4 <HAL_DMA_IRQHandler+0xa18>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d036      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a73      	ldr	r2, [pc, #460]	@ (8006ce8 <HAL_DMA_IRQHandler+0xa1c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d031      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a71      	ldr	r2, [pc, #452]	@ (8006cec <HAL_DMA_IRQHandler+0xa20>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d02c      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a70      	ldr	r2, [pc, #448]	@ (8006cf0 <HAL_DMA_IRQHandler+0xa24>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d027      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a6e      	ldr	r2, [pc, #440]	@ (8006cf4 <HAL_DMA_IRQHandler+0xa28>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d022      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a6d      	ldr	r2, [pc, #436]	@ (8006cf8 <HAL_DMA_IRQHandler+0xa2c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d01d      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a6b      	ldr	r2, [pc, #428]	@ (8006cfc <HAL_DMA_IRQHandler+0xa30>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d018      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a6a      	ldr	r2, [pc, #424]	@ (8006d00 <HAL_DMA_IRQHandler+0xa34>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d013      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a68      	ldr	r2, [pc, #416]	@ (8006d04 <HAL_DMA_IRQHandler+0xa38>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d00e      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a67      	ldr	r2, [pc, #412]	@ (8006d08 <HAL_DMA_IRQHandler+0xa3c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d009      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a65      	ldr	r2, [pc, #404]	@ (8006d0c <HAL_DMA_IRQHandler+0xa40>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d004      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x8b8>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a64      	ldr	r2, [pc, #400]	@ (8006d10 <HAL_DMA_IRQHandler+0xa44>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d108      	bne.n	8006b96 <HAL_DMA_IRQHandler+0x8ca>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0201 	bic.w	r2, r2, #1
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	e007      	b.n	8006ba6 <HAL_DMA_IRQHandler+0x8da>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 0201 	bic.w	r2, r2, #1
 8006ba4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d307      	bcc.n	8006bc2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1f2      	bne.n	8006ba6 <HAL_DMA_IRQHandler+0x8da>
 8006bc0:	e000      	b.n	8006bc4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006bc2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d004      	beq.n	8006bdc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2203      	movs	r2, #3
 8006bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006bda:	e003      	b.n	8006be4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 8272 	beq.w	80070da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	4798      	blx	r3
 8006bfe:	e26c      	b.n	80070da <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a43      	ldr	r2, [pc, #268]	@ (8006d14 <HAL_DMA_IRQHandler+0xa48>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d022      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x984>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a42      	ldr	r2, [pc, #264]	@ (8006d18 <HAL_DMA_IRQHandler+0xa4c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d01d      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x984>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a40      	ldr	r2, [pc, #256]	@ (8006d1c <HAL_DMA_IRQHandler+0xa50>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d018      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x984>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a3f      	ldr	r2, [pc, #252]	@ (8006d20 <HAL_DMA_IRQHandler+0xa54>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d013      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x984>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a3d      	ldr	r2, [pc, #244]	@ (8006d24 <HAL_DMA_IRQHandler+0xa58>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d00e      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x984>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a3c      	ldr	r2, [pc, #240]	@ (8006d28 <HAL_DMA_IRQHandler+0xa5c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d009      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x984>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a3a      	ldr	r2, [pc, #232]	@ (8006d2c <HAL_DMA_IRQHandler+0xa60>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d004      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x984>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a39      	ldr	r2, [pc, #228]	@ (8006d30 <HAL_DMA_IRQHandler+0xa64>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d101      	bne.n	8006c54 <HAL_DMA_IRQHandler+0x988>
 8006c50:	2301      	movs	r3, #1
 8006c52:	e000      	b.n	8006c56 <HAL_DMA_IRQHandler+0x98a>
 8006c54:	2300      	movs	r3, #0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 823f 	beq.w	80070da <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c68:	f003 031f 	and.w	r3, r3, #31
 8006c6c:	2204      	movs	r2, #4
 8006c6e:	409a      	lsls	r2, r3
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	4013      	ands	r3, r2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 80cd 	beq.w	8006e14 <HAL_DMA_IRQHandler+0xb48>
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	f003 0304 	and.w	r3, r3, #4
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 80c7 	beq.w	8006e14 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c8a:	f003 031f 	and.w	r3, r3, #31
 8006c8e:	2204      	movs	r2, #4
 8006c90:	409a      	lsls	r2, r3
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d049      	beq.n	8006d34 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d109      	bne.n	8006cbe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 8210 	beq.w	80070d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cbc:	e20a      	b.n	80070d4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 8206 	beq.w	80070d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cd0:	e200      	b.n	80070d4 <HAL_DMA_IRQHandler+0xe08>
 8006cd2:	bf00      	nop
 8006cd4:	40020010 	.word	0x40020010
 8006cd8:	40020028 	.word	0x40020028
 8006cdc:	40020040 	.word	0x40020040
 8006ce0:	40020058 	.word	0x40020058
 8006ce4:	40020070 	.word	0x40020070
 8006ce8:	40020088 	.word	0x40020088
 8006cec:	400200a0 	.word	0x400200a0
 8006cf0:	400200b8 	.word	0x400200b8
 8006cf4:	40020410 	.word	0x40020410
 8006cf8:	40020428 	.word	0x40020428
 8006cfc:	40020440 	.word	0x40020440
 8006d00:	40020458 	.word	0x40020458
 8006d04:	40020470 	.word	0x40020470
 8006d08:	40020488 	.word	0x40020488
 8006d0c:	400204a0 	.word	0x400204a0
 8006d10:	400204b8 	.word	0x400204b8
 8006d14:	58025408 	.word	0x58025408
 8006d18:	5802541c 	.word	0x5802541c
 8006d1c:	58025430 	.word	0x58025430
 8006d20:	58025444 	.word	0x58025444
 8006d24:	58025458 	.word	0x58025458
 8006d28:	5802546c 	.word	0x5802546c
 8006d2c:	58025480 	.word	0x58025480
 8006d30:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f003 0320 	and.w	r3, r3, #32
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d160      	bne.n	8006e00 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a7f      	ldr	r2, [pc, #508]	@ (8006f40 <HAL_DMA_IRQHandler+0xc74>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d04a      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a7d      	ldr	r2, [pc, #500]	@ (8006f44 <HAL_DMA_IRQHandler+0xc78>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d045      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a7c      	ldr	r2, [pc, #496]	@ (8006f48 <HAL_DMA_IRQHandler+0xc7c>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d040      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a7a      	ldr	r2, [pc, #488]	@ (8006f4c <HAL_DMA_IRQHandler+0xc80>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d03b      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a79      	ldr	r2, [pc, #484]	@ (8006f50 <HAL_DMA_IRQHandler+0xc84>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d036      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a77      	ldr	r2, [pc, #476]	@ (8006f54 <HAL_DMA_IRQHandler+0xc88>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d031      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a76      	ldr	r2, [pc, #472]	@ (8006f58 <HAL_DMA_IRQHandler+0xc8c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d02c      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a74      	ldr	r2, [pc, #464]	@ (8006f5c <HAL_DMA_IRQHandler+0xc90>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d027      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a73      	ldr	r2, [pc, #460]	@ (8006f60 <HAL_DMA_IRQHandler+0xc94>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d022      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a71      	ldr	r2, [pc, #452]	@ (8006f64 <HAL_DMA_IRQHandler+0xc98>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d01d      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a70      	ldr	r2, [pc, #448]	@ (8006f68 <HAL_DMA_IRQHandler+0xc9c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d018      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a6e      	ldr	r2, [pc, #440]	@ (8006f6c <HAL_DMA_IRQHandler+0xca0>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d013      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a6d      	ldr	r2, [pc, #436]	@ (8006f70 <HAL_DMA_IRQHandler+0xca4>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00e      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a6b      	ldr	r2, [pc, #428]	@ (8006f74 <HAL_DMA_IRQHandler+0xca8>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d009      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a6a      	ldr	r2, [pc, #424]	@ (8006f78 <HAL_DMA_IRQHandler+0xcac>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d004      	beq.n	8006dde <HAL_DMA_IRQHandler+0xb12>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a68      	ldr	r2, [pc, #416]	@ (8006f7c <HAL_DMA_IRQHandler+0xcb0>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d108      	bne.n	8006df0 <HAL_DMA_IRQHandler+0xb24>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 0208 	bic.w	r2, r2, #8
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	e007      	b.n	8006e00 <HAL_DMA_IRQHandler+0xb34>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0204 	bic.w	r2, r2, #4
 8006dfe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 8165 	beq.w	80070d4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e12:	e15f      	b.n	80070d4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e18:	f003 031f 	and.w	r3, r3, #31
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	409a      	lsls	r2, r3
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	4013      	ands	r3, r2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 80c5 	beq.w	8006fb4 <HAL_DMA_IRQHandler+0xce8>
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 80bf 	beq.w	8006fb4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e3a:	f003 031f 	and.w	r3, r3, #31
 8006e3e:	2202      	movs	r2, #2
 8006e40:	409a      	lsls	r2, r3
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d018      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d109      	bne.n	8006e6e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f000 813a 	beq.w	80070d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e6c:	e134      	b.n	80070d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 8130 	beq.w	80070d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e80:	e12a      	b.n	80070d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f003 0320 	and.w	r3, r3, #32
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f040 8089 	bne.w	8006fa0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a2b      	ldr	r2, [pc, #172]	@ (8006f40 <HAL_DMA_IRQHandler+0xc74>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d04a      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a29      	ldr	r2, [pc, #164]	@ (8006f44 <HAL_DMA_IRQHandler+0xc78>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d045      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a28      	ldr	r2, [pc, #160]	@ (8006f48 <HAL_DMA_IRQHandler+0xc7c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d040      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a26      	ldr	r2, [pc, #152]	@ (8006f4c <HAL_DMA_IRQHandler+0xc80>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d03b      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a25      	ldr	r2, [pc, #148]	@ (8006f50 <HAL_DMA_IRQHandler+0xc84>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d036      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a23      	ldr	r2, [pc, #140]	@ (8006f54 <HAL_DMA_IRQHandler+0xc88>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d031      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a22      	ldr	r2, [pc, #136]	@ (8006f58 <HAL_DMA_IRQHandler+0xc8c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d02c      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a20      	ldr	r2, [pc, #128]	@ (8006f5c <HAL_DMA_IRQHandler+0xc90>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d027      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8006f60 <HAL_DMA_IRQHandler+0xc94>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d022      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a1d      	ldr	r2, [pc, #116]	@ (8006f64 <HAL_DMA_IRQHandler+0xc98>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d01d      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a1c      	ldr	r2, [pc, #112]	@ (8006f68 <HAL_DMA_IRQHandler+0xc9c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d018      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a1a      	ldr	r2, [pc, #104]	@ (8006f6c <HAL_DMA_IRQHandler+0xca0>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d013      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a19      	ldr	r2, [pc, #100]	@ (8006f70 <HAL_DMA_IRQHandler+0xca4>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d00e      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a17      	ldr	r2, [pc, #92]	@ (8006f74 <HAL_DMA_IRQHandler+0xca8>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d009      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a16      	ldr	r2, [pc, #88]	@ (8006f78 <HAL_DMA_IRQHandler+0xcac>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d004      	beq.n	8006f2e <HAL_DMA_IRQHandler+0xc62>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a14      	ldr	r2, [pc, #80]	@ (8006f7c <HAL_DMA_IRQHandler+0xcb0>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d128      	bne.n	8006f80 <HAL_DMA_IRQHandler+0xcb4>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 0214 	bic.w	r2, r2, #20
 8006f3c:	601a      	str	r2, [r3, #0]
 8006f3e:	e027      	b.n	8006f90 <HAL_DMA_IRQHandler+0xcc4>
 8006f40:	40020010 	.word	0x40020010
 8006f44:	40020028 	.word	0x40020028
 8006f48:	40020040 	.word	0x40020040
 8006f4c:	40020058 	.word	0x40020058
 8006f50:	40020070 	.word	0x40020070
 8006f54:	40020088 	.word	0x40020088
 8006f58:	400200a0 	.word	0x400200a0
 8006f5c:	400200b8 	.word	0x400200b8
 8006f60:	40020410 	.word	0x40020410
 8006f64:	40020428 	.word	0x40020428
 8006f68:	40020440 	.word	0x40020440
 8006f6c:	40020458 	.word	0x40020458
 8006f70:	40020470 	.word	0x40020470
 8006f74:	40020488 	.word	0x40020488
 8006f78:	400204a0 	.word	0x400204a0
 8006f7c:	400204b8 	.word	0x400204b8
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 020a 	bic.w	r2, r2, #10
 8006f8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8097 	beq.w	80070d8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fb2:	e091      	b.n	80070d8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fb8:	f003 031f 	and.w	r3, r3, #31
 8006fbc:	2208      	movs	r2, #8
 8006fbe:	409a      	lsls	r2, r3
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 8088 	beq.w	80070da <HAL_DMA_IRQHandler+0xe0e>
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	f003 0308 	and.w	r3, r3, #8
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 8082 	beq.w	80070da <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a41      	ldr	r2, [pc, #260]	@ (80070e0 <HAL_DMA_IRQHandler+0xe14>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d04a      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a3f      	ldr	r2, [pc, #252]	@ (80070e4 <HAL_DMA_IRQHandler+0xe18>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d045      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a3e      	ldr	r2, [pc, #248]	@ (80070e8 <HAL_DMA_IRQHandler+0xe1c>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d040      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a3c      	ldr	r2, [pc, #240]	@ (80070ec <HAL_DMA_IRQHandler+0xe20>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d03b      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a3b      	ldr	r2, [pc, #236]	@ (80070f0 <HAL_DMA_IRQHandler+0xe24>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d036      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a39      	ldr	r2, [pc, #228]	@ (80070f4 <HAL_DMA_IRQHandler+0xe28>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d031      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a38      	ldr	r2, [pc, #224]	@ (80070f8 <HAL_DMA_IRQHandler+0xe2c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d02c      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a36      	ldr	r2, [pc, #216]	@ (80070fc <HAL_DMA_IRQHandler+0xe30>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d027      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a35      	ldr	r2, [pc, #212]	@ (8007100 <HAL_DMA_IRQHandler+0xe34>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d022      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a33      	ldr	r2, [pc, #204]	@ (8007104 <HAL_DMA_IRQHandler+0xe38>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d01d      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a32      	ldr	r2, [pc, #200]	@ (8007108 <HAL_DMA_IRQHandler+0xe3c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d018      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a30      	ldr	r2, [pc, #192]	@ (800710c <HAL_DMA_IRQHandler+0xe40>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d013      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a2f      	ldr	r2, [pc, #188]	@ (8007110 <HAL_DMA_IRQHandler+0xe44>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00e      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a2d      	ldr	r2, [pc, #180]	@ (8007114 <HAL_DMA_IRQHandler+0xe48>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d009      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a2c      	ldr	r2, [pc, #176]	@ (8007118 <HAL_DMA_IRQHandler+0xe4c>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d004      	beq.n	8007076 <HAL_DMA_IRQHandler+0xdaa>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a2a      	ldr	r2, [pc, #168]	@ (800711c <HAL_DMA_IRQHandler+0xe50>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d108      	bne.n	8007088 <HAL_DMA_IRQHandler+0xdbc>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 021c 	bic.w	r2, r2, #28
 8007084:	601a      	str	r2, [r3, #0]
 8007086:	e007      	b.n	8007098 <HAL_DMA_IRQHandler+0xdcc>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f022 020e 	bic.w	r2, r2, #14
 8007096:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800709c:	f003 031f 	and.w	r3, r3, #31
 80070a0:	2201      	movs	r2, #1
 80070a2:	409a      	lsls	r2, r3
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d009      	beq.n	80070da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	4798      	blx	r3
 80070ce:	e004      	b.n	80070da <HAL_DMA_IRQHandler+0xe0e>
          return;
 80070d0:	bf00      	nop
 80070d2:	e002      	b.n	80070da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070d4:	bf00      	nop
 80070d6:	e000      	b.n	80070da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070d8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80070da:	3728      	adds	r7, #40	@ 0x28
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	40020010 	.word	0x40020010
 80070e4:	40020028 	.word	0x40020028
 80070e8:	40020040 	.word	0x40020040
 80070ec:	40020058 	.word	0x40020058
 80070f0:	40020070 	.word	0x40020070
 80070f4:	40020088 	.word	0x40020088
 80070f8:	400200a0 	.word	0x400200a0
 80070fc:	400200b8 	.word	0x400200b8
 8007100:	40020410 	.word	0x40020410
 8007104:	40020428 	.word	0x40020428
 8007108:	40020440 	.word	0x40020440
 800710c:	40020458 	.word	0x40020458
 8007110:	40020470 	.word	0x40020470
 8007114:	40020488 	.word	0x40020488
 8007118:	400204a0 	.word	0x400204a0
 800711c:	400204b8 	.word	0x400204b8

08007120 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007132:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007138:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a7f      	ldr	r2, [pc, #508]	@ (800733c <DMA_SetConfig+0x21c>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d072      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a7d      	ldr	r2, [pc, #500]	@ (8007340 <DMA_SetConfig+0x220>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d06d      	beq.n	800722a <DMA_SetConfig+0x10a>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a7c      	ldr	r2, [pc, #496]	@ (8007344 <DMA_SetConfig+0x224>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d068      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a7a      	ldr	r2, [pc, #488]	@ (8007348 <DMA_SetConfig+0x228>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d063      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a79      	ldr	r2, [pc, #484]	@ (800734c <DMA_SetConfig+0x22c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d05e      	beq.n	800722a <DMA_SetConfig+0x10a>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a77      	ldr	r2, [pc, #476]	@ (8007350 <DMA_SetConfig+0x230>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d059      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a76      	ldr	r2, [pc, #472]	@ (8007354 <DMA_SetConfig+0x234>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d054      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a74      	ldr	r2, [pc, #464]	@ (8007358 <DMA_SetConfig+0x238>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d04f      	beq.n	800722a <DMA_SetConfig+0x10a>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a73      	ldr	r2, [pc, #460]	@ (800735c <DMA_SetConfig+0x23c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d04a      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a71      	ldr	r2, [pc, #452]	@ (8007360 <DMA_SetConfig+0x240>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d045      	beq.n	800722a <DMA_SetConfig+0x10a>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a70      	ldr	r2, [pc, #448]	@ (8007364 <DMA_SetConfig+0x244>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d040      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a6e      	ldr	r2, [pc, #440]	@ (8007368 <DMA_SetConfig+0x248>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d03b      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a6d      	ldr	r2, [pc, #436]	@ (800736c <DMA_SetConfig+0x24c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d036      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a6b      	ldr	r2, [pc, #428]	@ (8007370 <DMA_SetConfig+0x250>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d031      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a6a      	ldr	r2, [pc, #424]	@ (8007374 <DMA_SetConfig+0x254>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d02c      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a68      	ldr	r2, [pc, #416]	@ (8007378 <DMA_SetConfig+0x258>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d027      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a67      	ldr	r2, [pc, #412]	@ (800737c <DMA_SetConfig+0x25c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d022      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a65      	ldr	r2, [pc, #404]	@ (8007380 <DMA_SetConfig+0x260>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d01d      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a64      	ldr	r2, [pc, #400]	@ (8007384 <DMA_SetConfig+0x264>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d018      	beq.n	800722a <DMA_SetConfig+0x10a>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a62      	ldr	r2, [pc, #392]	@ (8007388 <DMA_SetConfig+0x268>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d013      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a61      	ldr	r2, [pc, #388]	@ (800738c <DMA_SetConfig+0x26c>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d00e      	beq.n	800722a <DMA_SetConfig+0x10a>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a5f      	ldr	r2, [pc, #380]	@ (8007390 <DMA_SetConfig+0x270>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d009      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a5e      	ldr	r2, [pc, #376]	@ (8007394 <DMA_SetConfig+0x274>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d004      	beq.n	800722a <DMA_SetConfig+0x10a>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a5c      	ldr	r2, [pc, #368]	@ (8007398 <DMA_SetConfig+0x278>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d101      	bne.n	800722e <DMA_SetConfig+0x10e>
 800722a:	2301      	movs	r3, #1
 800722c:	e000      	b.n	8007230 <DMA_SetConfig+0x110>
 800722e:	2300      	movs	r3, #0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00d      	beq.n	8007250 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800723c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007242:	2b00      	cmp	r3, #0
 8007244:	d004      	beq.n	8007250 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800724e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a39      	ldr	r2, [pc, #228]	@ (800733c <DMA_SetConfig+0x21c>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d04a      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a38      	ldr	r2, [pc, #224]	@ (8007340 <DMA_SetConfig+0x220>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d045      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a36      	ldr	r2, [pc, #216]	@ (8007344 <DMA_SetConfig+0x224>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d040      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a35      	ldr	r2, [pc, #212]	@ (8007348 <DMA_SetConfig+0x228>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d03b      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a33      	ldr	r2, [pc, #204]	@ (800734c <DMA_SetConfig+0x22c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d036      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a32      	ldr	r2, [pc, #200]	@ (8007350 <DMA_SetConfig+0x230>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d031      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a30      	ldr	r2, [pc, #192]	@ (8007354 <DMA_SetConfig+0x234>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d02c      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a2f      	ldr	r2, [pc, #188]	@ (8007358 <DMA_SetConfig+0x238>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d027      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a2d      	ldr	r2, [pc, #180]	@ (800735c <DMA_SetConfig+0x23c>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d022      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a2c      	ldr	r2, [pc, #176]	@ (8007360 <DMA_SetConfig+0x240>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d01d      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a2a      	ldr	r2, [pc, #168]	@ (8007364 <DMA_SetConfig+0x244>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d018      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a29      	ldr	r2, [pc, #164]	@ (8007368 <DMA_SetConfig+0x248>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d013      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a27      	ldr	r2, [pc, #156]	@ (800736c <DMA_SetConfig+0x24c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d00e      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a26      	ldr	r2, [pc, #152]	@ (8007370 <DMA_SetConfig+0x250>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d009      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a24      	ldr	r2, [pc, #144]	@ (8007374 <DMA_SetConfig+0x254>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d004      	beq.n	80072f0 <DMA_SetConfig+0x1d0>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a23      	ldr	r2, [pc, #140]	@ (8007378 <DMA_SetConfig+0x258>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d101      	bne.n	80072f4 <DMA_SetConfig+0x1d4>
 80072f0:	2301      	movs	r3, #1
 80072f2:	e000      	b.n	80072f6 <DMA_SetConfig+0x1d6>
 80072f4:	2300      	movs	r3, #0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d059      	beq.n	80073ae <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072fe:	f003 031f 	and.w	r3, r3, #31
 8007302:	223f      	movs	r2, #63	@ 0x3f
 8007304:	409a      	lsls	r2, r3
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007318:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	2b40      	cmp	r3, #64	@ 0x40
 8007328:	d138      	bne.n	800739c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800733a:	e086      	b.n	800744a <DMA_SetConfig+0x32a>
 800733c:	40020010 	.word	0x40020010
 8007340:	40020028 	.word	0x40020028
 8007344:	40020040 	.word	0x40020040
 8007348:	40020058 	.word	0x40020058
 800734c:	40020070 	.word	0x40020070
 8007350:	40020088 	.word	0x40020088
 8007354:	400200a0 	.word	0x400200a0
 8007358:	400200b8 	.word	0x400200b8
 800735c:	40020410 	.word	0x40020410
 8007360:	40020428 	.word	0x40020428
 8007364:	40020440 	.word	0x40020440
 8007368:	40020458 	.word	0x40020458
 800736c:	40020470 	.word	0x40020470
 8007370:	40020488 	.word	0x40020488
 8007374:	400204a0 	.word	0x400204a0
 8007378:	400204b8 	.word	0x400204b8
 800737c:	58025408 	.word	0x58025408
 8007380:	5802541c 	.word	0x5802541c
 8007384:	58025430 	.word	0x58025430
 8007388:	58025444 	.word	0x58025444
 800738c:	58025458 	.word	0x58025458
 8007390:	5802546c 	.word	0x5802546c
 8007394:	58025480 	.word	0x58025480
 8007398:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	60da      	str	r2, [r3, #12]
}
 80073ac:	e04d      	b.n	800744a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a29      	ldr	r2, [pc, #164]	@ (8007458 <DMA_SetConfig+0x338>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d022      	beq.n	80073fe <DMA_SetConfig+0x2de>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a27      	ldr	r2, [pc, #156]	@ (800745c <DMA_SetConfig+0x33c>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d01d      	beq.n	80073fe <DMA_SetConfig+0x2de>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a26      	ldr	r2, [pc, #152]	@ (8007460 <DMA_SetConfig+0x340>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d018      	beq.n	80073fe <DMA_SetConfig+0x2de>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a24      	ldr	r2, [pc, #144]	@ (8007464 <DMA_SetConfig+0x344>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d013      	beq.n	80073fe <DMA_SetConfig+0x2de>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a23      	ldr	r2, [pc, #140]	@ (8007468 <DMA_SetConfig+0x348>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d00e      	beq.n	80073fe <DMA_SetConfig+0x2de>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a21      	ldr	r2, [pc, #132]	@ (800746c <DMA_SetConfig+0x34c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d009      	beq.n	80073fe <DMA_SetConfig+0x2de>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a20      	ldr	r2, [pc, #128]	@ (8007470 <DMA_SetConfig+0x350>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d004      	beq.n	80073fe <DMA_SetConfig+0x2de>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a1e      	ldr	r2, [pc, #120]	@ (8007474 <DMA_SetConfig+0x354>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d101      	bne.n	8007402 <DMA_SetConfig+0x2e2>
 80073fe:	2301      	movs	r3, #1
 8007400:	e000      	b.n	8007404 <DMA_SetConfig+0x2e4>
 8007402:	2300      	movs	r3, #0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d020      	beq.n	800744a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800740c:	f003 031f 	and.w	r3, r3, #31
 8007410:	2201      	movs	r2, #1
 8007412:	409a      	lsls	r2, r3
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	683a      	ldr	r2, [r7, #0]
 800741e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	2b40      	cmp	r3, #64	@ 0x40
 8007426:	d108      	bne.n	800743a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	60da      	str	r2, [r3, #12]
}
 8007438:	e007      	b.n	800744a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	60da      	str	r2, [r3, #12]
}
 800744a:	bf00      	nop
 800744c:	371c      	adds	r7, #28
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	58025408 	.word	0x58025408
 800745c:	5802541c 	.word	0x5802541c
 8007460:	58025430 	.word	0x58025430
 8007464:	58025444 	.word	0x58025444
 8007468:	58025458 	.word	0x58025458
 800746c:	5802546c 	.word	0x5802546c
 8007470:	58025480 	.word	0x58025480
 8007474:	58025494 	.word	0x58025494

08007478 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a42      	ldr	r2, [pc, #264]	@ (8007590 <DMA_CalcBaseAndBitshift+0x118>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d04a      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a41      	ldr	r2, [pc, #260]	@ (8007594 <DMA_CalcBaseAndBitshift+0x11c>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d045      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a3f      	ldr	r2, [pc, #252]	@ (8007598 <DMA_CalcBaseAndBitshift+0x120>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d040      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a3e      	ldr	r2, [pc, #248]	@ (800759c <DMA_CalcBaseAndBitshift+0x124>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d03b      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a3c      	ldr	r2, [pc, #240]	@ (80075a0 <DMA_CalcBaseAndBitshift+0x128>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d036      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a3b      	ldr	r2, [pc, #236]	@ (80075a4 <DMA_CalcBaseAndBitshift+0x12c>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d031      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a39      	ldr	r2, [pc, #228]	@ (80075a8 <DMA_CalcBaseAndBitshift+0x130>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d02c      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a38      	ldr	r2, [pc, #224]	@ (80075ac <DMA_CalcBaseAndBitshift+0x134>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d027      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a36      	ldr	r2, [pc, #216]	@ (80075b0 <DMA_CalcBaseAndBitshift+0x138>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d022      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a35      	ldr	r2, [pc, #212]	@ (80075b4 <DMA_CalcBaseAndBitshift+0x13c>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d01d      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a33      	ldr	r2, [pc, #204]	@ (80075b8 <DMA_CalcBaseAndBitshift+0x140>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d018      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a32      	ldr	r2, [pc, #200]	@ (80075bc <DMA_CalcBaseAndBitshift+0x144>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d013      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a30      	ldr	r2, [pc, #192]	@ (80075c0 <DMA_CalcBaseAndBitshift+0x148>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d00e      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a2f      	ldr	r2, [pc, #188]	@ (80075c4 <DMA_CalcBaseAndBitshift+0x14c>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d009      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a2d      	ldr	r2, [pc, #180]	@ (80075c8 <DMA_CalcBaseAndBitshift+0x150>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d004      	beq.n	8007520 <DMA_CalcBaseAndBitshift+0xa8>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a2c      	ldr	r2, [pc, #176]	@ (80075cc <DMA_CalcBaseAndBitshift+0x154>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d101      	bne.n	8007524 <DMA_CalcBaseAndBitshift+0xac>
 8007520:	2301      	movs	r3, #1
 8007522:	e000      	b.n	8007526 <DMA_CalcBaseAndBitshift+0xae>
 8007524:	2300      	movs	r3, #0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d024      	beq.n	8007574 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	b2db      	uxtb	r3, r3
 8007530:	3b10      	subs	r3, #16
 8007532:	4a27      	ldr	r2, [pc, #156]	@ (80075d0 <DMA_CalcBaseAndBitshift+0x158>)
 8007534:	fba2 2303 	umull	r2, r3, r2, r3
 8007538:	091b      	lsrs	r3, r3, #4
 800753a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f003 0307 	and.w	r3, r3, #7
 8007542:	4a24      	ldr	r2, [pc, #144]	@ (80075d4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007544:	5cd3      	ldrb	r3, [r2, r3]
 8007546:	461a      	mov	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2b03      	cmp	r3, #3
 8007550:	d908      	bls.n	8007564 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	4b1f      	ldr	r3, [pc, #124]	@ (80075d8 <DMA_CalcBaseAndBitshift+0x160>)
 800755a:	4013      	ands	r3, r2
 800755c:	1d1a      	adds	r2, r3, #4
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	659a      	str	r2, [r3, #88]	@ 0x58
 8007562:	e00d      	b.n	8007580 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	4b1b      	ldr	r3, [pc, #108]	@ (80075d8 <DMA_CalcBaseAndBitshift+0x160>)
 800756c:	4013      	ands	r3, r2
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	6593      	str	r3, [r2, #88]	@ 0x58
 8007572:	e005      	b.n	8007580 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007584:	4618      	mov	r0, r3
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	40020010 	.word	0x40020010
 8007594:	40020028 	.word	0x40020028
 8007598:	40020040 	.word	0x40020040
 800759c:	40020058 	.word	0x40020058
 80075a0:	40020070 	.word	0x40020070
 80075a4:	40020088 	.word	0x40020088
 80075a8:	400200a0 	.word	0x400200a0
 80075ac:	400200b8 	.word	0x400200b8
 80075b0:	40020410 	.word	0x40020410
 80075b4:	40020428 	.word	0x40020428
 80075b8:	40020440 	.word	0x40020440
 80075bc:	40020458 	.word	0x40020458
 80075c0:	40020470 	.word	0x40020470
 80075c4:	40020488 	.word	0x40020488
 80075c8:	400204a0 	.word	0x400204a0
 80075cc:	400204b8 	.word	0x400204b8
 80075d0:	aaaaaaab 	.word	0xaaaaaaab
 80075d4:	0800fbd8 	.word	0x0800fbd8
 80075d8:	fffffc00 	.word	0xfffffc00

080075dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d120      	bne.n	8007632 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f4:	2b03      	cmp	r3, #3
 80075f6:	d858      	bhi.n	80076aa <DMA_CheckFifoParam+0xce>
 80075f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007600 <DMA_CheckFifoParam+0x24>)
 80075fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fe:	bf00      	nop
 8007600:	08007611 	.word	0x08007611
 8007604:	08007623 	.word	0x08007623
 8007608:	08007611 	.word	0x08007611
 800760c:	080076ab 	.word	0x080076ab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007614:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d048      	beq.n	80076ae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007620:	e045      	b.n	80076ae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007626:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800762a:	d142      	bne.n	80076b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007630:	e03f      	b.n	80076b2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800763a:	d123      	bne.n	8007684 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007640:	2b03      	cmp	r3, #3
 8007642:	d838      	bhi.n	80076b6 <DMA_CheckFifoParam+0xda>
 8007644:	a201      	add	r2, pc, #4	@ (adr r2, 800764c <DMA_CheckFifoParam+0x70>)
 8007646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764a:	bf00      	nop
 800764c:	0800765d 	.word	0x0800765d
 8007650:	08007663 	.word	0x08007663
 8007654:	0800765d 	.word	0x0800765d
 8007658:	08007675 	.word	0x08007675
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	73fb      	strb	r3, [r7, #15]
        break;
 8007660:	e030      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007666:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d025      	beq.n	80076ba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007672:	e022      	b.n	80076ba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007678:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800767c:	d11f      	bne.n	80076be <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007682:	e01c      	b.n	80076be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007688:	2b02      	cmp	r3, #2
 800768a:	d902      	bls.n	8007692 <DMA_CheckFifoParam+0xb6>
 800768c:	2b03      	cmp	r3, #3
 800768e:	d003      	beq.n	8007698 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007690:	e018      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	73fb      	strb	r3, [r7, #15]
        break;
 8007696:	e015      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800769c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00e      	beq.n	80076c2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	73fb      	strb	r3, [r7, #15]
    break;
 80076a8:	e00b      	b.n	80076c2 <DMA_CheckFifoParam+0xe6>
        break;
 80076aa:	bf00      	nop
 80076ac:	e00a      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
        break;
 80076ae:	bf00      	nop
 80076b0:	e008      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
        break;
 80076b2:	bf00      	nop
 80076b4:	e006      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
        break;
 80076b6:	bf00      	nop
 80076b8:	e004      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
        break;
 80076ba:	bf00      	nop
 80076bc:	e002      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
        break;
 80076be:	bf00      	nop
 80076c0:	e000      	b.n	80076c4 <DMA_CheckFifoParam+0xe8>
    break;
 80076c2:	bf00      	nop
    }
  }

  return status;
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3714      	adds	r7, #20
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop

080076d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a38      	ldr	r2, [pc, #224]	@ (80077c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d022      	beq.n	8007732 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a36      	ldr	r2, [pc, #216]	@ (80077cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d01d      	beq.n	8007732 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a35      	ldr	r2, [pc, #212]	@ (80077d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d018      	beq.n	8007732 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a33      	ldr	r2, [pc, #204]	@ (80077d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d013      	beq.n	8007732 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a32      	ldr	r2, [pc, #200]	@ (80077d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d00e      	beq.n	8007732 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a30      	ldr	r2, [pc, #192]	@ (80077dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d009      	beq.n	8007732 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a2f      	ldr	r2, [pc, #188]	@ (80077e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d004      	beq.n	8007732 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a2d      	ldr	r2, [pc, #180]	@ (80077e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d101      	bne.n	8007736 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007732:	2301      	movs	r3, #1
 8007734:	e000      	b.n	8007738 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007736:	2300      	movs	r3, #0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d01a      	beq.n	8007772 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	b2db      	uxtb	r3, r3
 8007742:	3b08      	subs	r3, #8
 8007744:	4a28      	ldr	r2, [pc, #160]	@ (80077e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007746:	fba2 2303 	umull	r2, r3, r2, r3
 800774a:	091b      	lsrs	r3, r3, #4
 800774c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	4b26      	ldr	r3, [pc, #152]	@ (80077ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007752:	4413      	add	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	461a      	mov	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a24      	ldr	r2, [pc, #144]	@ (80077f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007760:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f003 031f 	and.w	r3, r3, #31
 8007768:	2201      	movs	r2, #1
 800776a:	409a      	lsls	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007770:	e024      	b.n	80077bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	b2db      	uxtb	r3, r3
 8007778:	3b10      	subs	r3, #16
 800777a:	4a1e      	ldr	r2, [pc, #120]	@ (80077f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800777c:	fba2 2303 	umull	r2, r3, r2, r3
 8007780:	091b      	lsrs	r3, r3, #4
 8007782:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	4a1c      	ldr	r2, [pc, #112]	@ (80077f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d806      	bhi.n	800779a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4a1b      	ldr	r2, [pc, #108]	@ (80077fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d902      	bls.n	800779a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	3308      	adds	r3, #8
 8007798:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	4b18      	ldr	r3, [pc, #96]	@ (8007800 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800779e:	4413      	add	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	461a      	mov	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a16      	ldr	r2, [pc, #88]	@ (8007804 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80077ac:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f003 031f 	and.w	r3, r3, #31
 80077b4:	2201      	movs	r2, #1
 80077b6:	409a      	lsls	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80077bc:	bf00      	nop
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	58025408 	.word	0x58025408
 80077cc:	5802541c 	.word	0x5802541c
 80077d0:	58025430 	.word	0x58025430
 80077d4:	58025444 	.word	0x58025444
 80077d8:	58025458 	.word	0x58025458
 80077dc:	5802546c 	.word	0x5802546c
 80077e0:	58025480 	.word	0x58025480
 80077e4:	58025494 	.word	0x58025494
 80077e8:	cccccccd 	.word	0xcccccccd
 80077ec:	16009600 	.word	0x16009600
 80077f0:	58025880 	.word	0x58025880
 80077f4:	aaaaaaab 	.word	0xaaaaaaab
 80077f8:	400204b8 	.word	0x400204b8
 80077fc:	4002040f 	.word	0x4002040f
 8007800:	10008200 	.word	0x10008200
 8007804:	40020880 	.word	0x40020880

08007808 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	b2db      	uxtb	r3, r3
 8007816:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d04a      	beq.n	80078b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2b08      	cmp	r3, #8
 8007822:	d847      	bhi.n	80078b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a25      	ldr	r2, [pc, #148]	@ (80078c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d022      	beq.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a24      	ldr	r2, [pc, #144]	@ (80078c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d01d      	beq.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a22      	ldr	r2, [pc, #136]	@ (80078c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d018      	beq.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a21      	ldr	r2, [pc, #132]	@ (80078cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d013      	beq.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a1f      	ldr	r2, [pc, #124]	@ (80078d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d00e      	beq.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a1e      	ldr	r2, [pc, #120]	@ (80078d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d009      	beq.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a1c      	ldr	r2, [pc, #112]	@ (80078d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d004      	beq.n	8007874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a1b      	ldr	r2, [pc, #108]	@ (80078dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d101      	bne.n	8007878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007874:	2301      	movs	r3, #1
 8007876:	e000      	b.n	800787a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007878:	2300      	movs	r3, #0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00a      	beq.n	8007894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	4b17      	ldr	r3, [pc, #92]	@ (80078e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007882:	4413      	add	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	461a      	mov	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a15      	ldr	r2, [pc, #84]	@ (80078e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007890:	671a      	str	r2, [r3, #112]	@ 0x70
 8007892:	e009      	b.n	80078a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	4b14      	ldr	r3, [pc, #80]	@ (80078e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007898:	4413      	add	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	461a      	mov	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a11      	ldr	r2, [pc, #68]	@ (80078ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80078a6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	3b01      	subs	r3, #1
 80078ac:	2201      	movs	r2, #1
 80078ae:	409a      	lsls	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80078b4:	bf00      	nop
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	58025408 	.word	0x58025408
 80078c4:	5802541c 	.word	0x5802541c
 80078c8:	58025430 	.word	0x58025430
 80078cc:	58025444 	.word	0x58025444
 80078d0:	58025458 	.word	0x58025458
 80078d4:	5802546c 	.word	0x5802546c
 80078d8:	58025480 	.word	0x58025480
 80078dc:	58025494 	.word	0x58025494
 80078e0:	1600963f 	.word	0x1600963f
 80078e4:	58025940 	.word	0x58025940
 80078e8:	1000823f 	.word	0x1000823f
 80078ec:	40020940 	.word	0x40020940

080078f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b089      	sub	sp, #36	@ 0x24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80078fa:	2300      	movs	r3, #0
 80078fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80078fe:	4b86      	ldr	r3, [pc, #536]	@ (8007b18 <HAL_GPIO_Init+0x228>)
 8007900:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007902:	e18c      	b.n	8007c1e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	2101      	movs	r1, #1
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	fa01 f303 	lsl.w	r3, r1, r3
 8007910:	4013      	ands	r3, r2
 8007912:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	2b00      	cmp	r3, #0
 8007918:	f000 817e 	beq.w	8007c18 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f003 0303 	and.w	r3, r3, #3
 8007924:	2b01      	cmp	r3, #1
 8007926:	d005      	beq.n	8007934 <HAL_GPIO_Init+0x44>
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f003 0303 	and.w	r3, r3, #3
 8007930:	2b02      	cmp	r3, #2
 8007932:	d130      	bne.n	8007996 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	2203      	movs	r2, #3
 8007940:	fa02 f303 	lsl.w	r3, r2, r3
 8007944:	43db      	mvns	r3, r3
 8007946:	69ba      	ldr	r2, [r7, #24]
 8007948:	4013      	ands	r3, r2
 800794a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	68da      	ldr	r2, [r3, #12]
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	005b      	lsls	r3, r3, #1
 8007954:	fa02 f303 	lsl.w	r3, r2, r3
 8007958:	69ba      	ldr	r2, [r7, #24]
 800795a:	4313      	orrs	r3, r2
 800795c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800796a:	2201      	movs	r2, #1
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	fa02 f303 	lsl.w	r3, r2, r3
 8007972:	43db      	mvns	r3, r3
 8007974:	69ba      	ldr	r2, [r7, #24]
 8007976:	4013      	ands	r3, r2
 8007978:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	091b      	lsrs	r3, r3, #4
 8007980:	f003 0201 	and.w	r2, r3, #1
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	fa02 f303 	lsl.w	r3, r2, r3
 800798a:	69ba      	ldr	r2, [r7, #24]
 800798c:	4313      	orrs	r3, r2
 800798e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	69ba      	ldr	r2, [r7, #24]
 8007994:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f003 0303 	and.w	r3, r3, #3
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d017      	beq.n	80079d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	2203      	movs	r2, #3
 80079ae:	fa02 f303 	lsl.w	r3, r2, r3
 80079b2:	43db      	mvns	r3, r3
 80079b4:	69ba      	ldr	r2, [r7, #24]
 80079b6:	4013      	ands	r3, r2
 80079b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	689a      	ldr	r2, [r3, #8]
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	005b      	lsls	r3, r3, #1
 80079c2:	fa02 f303 	lsl.w	r3, r2, r3
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	69ba      	ldr	r2, [r7, #24]
 80079d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f003 0303 	and.w	r3, r3, #3
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d123      	bne.n	8007a26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	08da      	lsrs	r2, r3, #3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	3208      	adds	r2, #8
 80079e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	f003 0307 	and.w	r3, r3, #7
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	220f      	movs	r2, #15
 80079f6:	fa02 f303 	lsl.w	r3, r2, r3
 80079fa:	43db      	mvns	r3, r3
 80079fc:	69ba      	ldr	r2, [r7, #24]
 80079fe:	4013      	ands	r3, r2
 8007a00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	691a      	ldr	r2, [r3, #16]
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	f003 0307 	and.w	r3, r3, #7
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a12:	69ba      	ldr	r2, [r7, #24]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	08da      	lsrs	r2, r3, #3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	3208      	adds	r2, #8
 8007a20:	69b9      	ldr	r1, [r7, #24]
 8007a22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	005b      	lsls	r3, r3, #1
 8007a30:	2203      	movs	r2, #3
 8007a32:	fa02 f303 	lsl.w	r3, r2, r3
 8007a36:	43db      	mvns	r3, r3
 8007a38:	69ba      	ldr	r2, [r7, #24]
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f003 0203 	and.w	r2, r3, #3
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	005b      	lsls	r3, r3, #1
 8007a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4e:	69ba      	ldr	r2, [r7, #24]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 80d8 	beq.w	8007c18 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a68:	4b2c      	ldr	r3, [pc, #176]	@ (8007b1c <HAL_GPIO_Init+0x22c>)
 8007a6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a6e:	4a2b      	ldr	r2, [pc, #172]	@ (8007b1c <HAL_GPIO_Init+0x22c>)
 8007a70:	f043 0302 	orr.w	r3, r3, #2
 8007a74:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007a78:	4b28      	ldr	r3, [pc, #160]	@ (8007b1c <HAL_GPIO_Init+0x22c>)
 8007a7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007a86:	4a26      	ldr	r2, [pc, #152]	@ (8007b20 <HAL_GPIO_Init+0x230>)
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	089b      	lsrs	r3, r3, #2
 8007a8c:	3302      	adds	r3, #2
 8007a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	f003 0303 	and.w	r3, r3, #3
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	220f      	movs	r2, #15
 8007a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa2:	43db      	mvns	r3, r3
 8007aa4:	69ba      	ldr	r2, [r7, #24]
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a1d      	ldr	r2, [pc, #116]	@ (8007b24 <HAL_GPIO_Init+0x234>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d04a      	beq.n	8007b48 <HAL_GPIO_Init+0x258>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a1c      	ldr	r2, [pc, #112]	@ (8007b28 <HAL_GPIO_Init+0x238>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d02b      	beq.n	8007b12 <HAL_GPIO_Init+0x222>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a1b      	ldr	r2, [pc, #108]	@ (8007b2c <HAL_GPIO_Init+0x23c>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d025      	beq.n	8007b0e <HAL_GPIO_Init+0x21e>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a1a      	ldr	r2, [pc, #104]	@ (8007b30 <HAL_GPIO_Init+0x240>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d01f      	beq.n	8007b0a <HAL_GPIO_Init+0x21a>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a19      	ldr	r2, [pc, #100]	@ (8007b34 <HAL_GPIO_Init+0x244>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d019      	beq.n	8007b06 <HAL_GPIO_Init+0x216>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a18      	ldr	r2, [pc, #96]	@ (8007b38 <HAL_GPIO_Init+0x248>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d013      	beq.n	8007b02 <HAL_GPIO_Init+0x212>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a17      	ldr	r2, [pc, #92]	@ (8007b3c <HAL_GPIO_Init+0x24c>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d00d      	beq.n	8007afe <HAL_GPIO_Init+0x20e>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a16      	ldr	r2, [pc, #88]	@ (8007b40 <HAL_GPIO_Init+0x250>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d007      	beq.n	8007afa <HAL_GPIO_Init+0x20a>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a15      	ldr	r2, [pc, #84]	@ (8007b44 <HAL_GPIO_Init+0x254>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d101      	bne.n	8007af6 <HAL_GPIO_Init+0x206>
 8007af2:	2309      	movs	r3, #9
 8007af4:	e029      	b.n	8007b4a <HAL_GPIO_Init+0x25a>
 8007af6:	230a      	movs	r3, #10
 8007af8:	e027      	b.n	8007b4a <HAL_GPIO_Init+0x25a>
 8007afa:	2307      	movs	r3, #7
 8007afc:	e025      	b.n	8007b4a <HAL_GPIO_Init+0x25a>
 8007afe:	2306      	movs	r3, #6
 8007b00:	e023      	b.n	8007b4a <HAL_GPIO_Init+0x25a>
 8007b02:	2305      	movs	r3, #5
 8007b04:	e021      	b.n	8007b4a <HAL_GPIO_Init+0x25a>
 8007b06:	2304      	movs	r3, #4
 8007b08:	e01f      	b.n	8007b4a <HAL_GPIO_Init+0x25a>
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e01d      	b.n	8007b4a <HAL_GPIO_Init+0x25a>
 8007b0e:	2302      	movs	r3, #2
 8007b10:	e01b      	b.n	8007b4a <HAL_GPIO_Init+0x25a>
 8007b12:	2301      	movs	r3, #1
 8007b14:	e019      	b.n	8007b4a <HAL_GPIO_Init+0x25a>
 8007b16:	bf00      	nop
 8007b18:	58000080 	.word	0x58000080
 8007b1c:	58024400 	.word	0x58024400
 8007b20:	58000400 	.word	0x58000400
 8007b24:	58020000 	.word	0x58020000
 8007b28:	58020400 	.word	0x58020400
 8007b2c:	58020800 	.word	0x58020800
 8007b30:	58020c00 	.word	0x58020c00
 8007b34:	58021000 	.word	0x58021000
 8007b38:	58021400 	.word	0x58021400
 8007b3c:	58021800 	.word	0x58021800
 8007b40:	58021c00 	.word	0x58021c00
 8007b44:	58022400 	.word	0x58022400
 8007b48:	2300      	movs	r3, #0
 8007b4a:	69fa      	ldr	r2, [r7, #28]
 8007b4c:	f002 0203 	and.w	r2, r2, #3
 8007b50:	0092      	lsls	r2, r2, #2
 8007b52:	4093      	lsls	r3, r2
 8007b54:	69ba      	ldr	r2, [r7, #24]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b5a:	4938      	ldr	r1, [pc, #224]	@ (8007c3c <HAL_GPIO_Init+0x34c>)
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	089b      	lsrs	r3, r3, #2
 8007b60:	3302      	adds	r3, #2
 8007b62:	69ba      	ldr	r2, [r7, #24]
 8007b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007b68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	43db      	mvns	r3, r3
 8007b74:	69ba      	ldr	r2, [r7, #24]
 8007b76:	4013      	ands	r3, r2
 8007b78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007b86:	69ba      	ldr	r2, [r7, #24]
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007b8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007b96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	43db      	mvns	r3, r3
 8007ba2:	69ba      	ldr	r2, [r7, #24]
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d003      	beq.n	8007bbc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007bbc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	43db      	mvns	r3, r3
 8007bce:	69ba      	ldr	r2, [r7, #24]
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d003      	beq.n	8007be8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007be0:	69ba      	ldr	r2, [r7, #24]
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	43db      	mvns	r3, r3
 8007bf8:	69ba      	ldr	r2, [r7, #24]
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d003      	beq.n	8007c12 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007c0a:	69ba      	ldr	r2, [r7, #24]
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	69ba      	ldr	r2, [r7, #24]
 8007c16:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	fa22 f303 	lsr.w	r3, r2, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f47f ae6b 	bne.w	8007904 <HAL_GPIO_Init+0x14>
  }
}
 8007c2e:	bf00      	nop
 8007c30:	bf00      	nop
 8007c32:	3724      	adds	r7, #36	@ 0x24
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	58000400 	.word	0x58000400

08007c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	807b      	strh	r3, [r7, #2]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c50:	787b      	ldrb	r3, [r7, #1]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c56:	887a      	ldrh	r2, [r7, #2]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007c5c:	e003      	b.n	8007c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007c5e:	887b      	ldrh	r3, [r7, #2]
 8007c60:	041a      	lsls	r2, r3, #16
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	619a      	str	r2, [r3, #24]
}
 8007c66:	bf00      	nop
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b085      	sub	sp, #20
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007c84:	887a      	ldrh	r2, [r7, #2]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	4013      	ands	r3, r2
 8007c8a:	041a      	lsls	r2, r3, #16
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	43d9      	mvns	r1, r3
 8007c90:	887b      	ldrh	r3, [r7, #2]
 8007c92:	400b      	ands	r3, r1
 8007c94:	431a      	orrs	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	619a      	str	r2, [r3, #24]
}
 8007c9a:	bf00      	nop
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b082      	sub	sp, #8
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	4603      	mov	r3, r0
 8007cae:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007cb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cb4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007cb8:	88fb      	ldrh	r3, [r7, #6]
 8007cba:	4013      	ands	r3, r2
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d008      	beq.n	8007cd2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007cc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007cc4:	88fb      	ldrh	r3, [r7, #6]
 8007cc6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007cca:	88fb      	ldrh	r3, [r7, #6]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7f9 f989 	bl	8000fe4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007cd2:	bf00      	nop
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
	...

08007cdc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007ce4:	4b19      	ldr	r3, [pc, #100]	@ (8007d4c <HAL_PWREx_ConfigSupply+0x70>)
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	f003 0304 	and.w	r3, r3, #4
 8007cec:	2b04      	cmp	r3, #4
 8007cee:	d00a      	beq.n	8007d06 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007cf0:	4b16      	ldr	r3, [pc, #88]	@ (8007d4c <HAL_PWREx_ConfigSupply+0x70>)
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	f003 0307 	and.w	r3, r3, #7
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d001      	beq.n	8007d02 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e01f      	b.n	8007d42 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	e01d      	b.n	8007d42 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007d06:	4b11      	ldr	r3, [pc, #68]	@ (8007d4c <HAL_PWREx_ConfigSupply+0x70>)
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	f023 0207 	bic.w	r2, r3, #7
 8007d0e:	490f      	ldr	r1, [pc, #60]	@ (8007d4c <HAL_PWREx_ConfigSupply+0x70>)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007d16:	f7fa fdb5 	bl	8002884 <HAL_GetTick>
 8007d1a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d1c:	e009      	b.n	8007d32 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007d1e:	f7fa fdb1 	bl	8002884 <HAL_GetTick>
 8007d22:	4602      	mov	r2, r0
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d2c:	d901      	bls.n	8007d32 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e007      	b.n	8007d42 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d32:	4b06      	ldr	r3, [pc, #24]	@ (8007d4c <HAL_PWREx_ConfigSupply+0x70>)
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d3e:	d1ee      	bne.n	8007d1e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	58024800 	.word	0x58024800

08007d50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08c      	sub	sp, #48	@ 0x30
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d101      	bne.n	8007d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e3c8      	b.n	80084f4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f000 8087 	beq.w	8007e7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d70:	4b88      	ldr	r3, [pc, #544]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d7a:	4b86      	ldr	r3, [pc, #536]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d82:	2b10      	cmp	r3, #16
 8007d84:	d007      	beq.n	8007d96 <HAL_RCC_OscConfig+0x46>
 8007d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d88:	2b18      	cmp	r3, #24
 8007d8a:	d110      	bne.n	8007dae <HAL_RCC_OscConfig+0x5e>
 8007d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d8e:	f003 0303 	and.w	r3, r3, #3
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d10b      	bne.n	8007dae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d96:	4b7f      	ldr	r3, [pc, #508]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d06c      	beq.n	8007e7c <HAL_RCC_OscConfig+0x12c>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d168      	bne.n	8007e7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e3a2      	b.n	80084f4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007db6:	d106      	bne.n	8007dc6 <HAL_RCC_OscConfig+0x76>
 8007db8:	4b76      	ldr	r3, [pc, #472]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a75      	ldr	r2, [pc, #468]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007dbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007dc2:	6013      	str	r3, [r2, #0]
 8007dc4:	e02e      	b.n	8007e24 <HAL_RCC_OscConfig+0xd4>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10c      	bne.n	8007de8 <HAL_RCC_OscConfig+0x98>
 8007dce:	4b71      	ldr	r3, [pc, #452]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a70      	ldr	r2, [pc, #448]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007dd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007dd8:	6013      	str	r3, [r2, #0]
 8007dda:	4b6e      	ldr	r3, [pc, #440]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a6d      	ldr	r2, [pc, #436]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007de0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007de4:	6013      	str	r3, [r2, #0]
 8007de6:	e01d      	b.n	8007e24 <HAL_RCC_OscConfig+0xd4>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007df0:	d10c      	bne.n	8007e0c <HAL_RCC_OscConfig+0xbc>
 8007df2:	4b68      	ldr	r3, [pc, #416]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a67      	ldr	r2, [pc, #412]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007df8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007dfc:	6013      	str	r3, [r2, #0]
 8007dfe:	4b65      	ldr	r3, [pc, #404]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a64      	ldr	r2, [pc, #400]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e08:	6013      	str	r3, [r2, #0]
 8007e0a:	e00b      	b.n	8007e24 <HAL_RCC_OscConfig+0xd4>
 8007e0c:	4b61      	ldr	r3, [pc, #388]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a60      	ldr	r2, [pc, #384]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e16:	6013      	str	r3, [r2, #0]
 8007e18:	4b5e      	ldr	r3, [pc, #376]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a5d      	ldr	r2, [pc, #372]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007e1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d013      	beq.n	8007e54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e2c:	f7fa fd2a 	bl	8002884 <HAL_GetTick>
 8007e30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e32:	e008      	b.n	8007e46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e34:	f7fa fd26 	bl	8002884 <HAL_GetTick>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	2b64      	cmp	r3, #100	@ 0x64
 8007e40:	d901      	bls.n	8007e46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007e42:	2303      	movs	r3, #3
 8007e44:	e356      	b.n	80084f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e46:	4b53      	ldr	r3, [pc, #332]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d0f0      	beq.n	8007e34 <HAL_RCC_OscConfig+0xe4>
 8007e52:	e014      	b.n	8007e7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e54:	f7fa fd16 	bl	8002884 <HAL_GetTick>
 8007e58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007e5a:	e008      	b.n	8007e6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e5c:	f7fa fd12 	bl	8002884 <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	2b64      	cmp	r3, #100	@ 0x64
 8007e68:	d901      	bls.n	8007e6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e342      	b.n	80084f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007e6e:	4b49      	ldr	r3, [pc, #292]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1f0      	bne.n	8007e5c <HAL_RCC_OscConfig+0x10c>
 8007e7a:	e000      	b.n	8007e7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0302 	and.w	r3, r3, #2
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 808c 	beq.w	8007fa4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e8c:	4b41      	ldr	r3, [pc, #260]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e94:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e96:	4b3f      	ldr	r3, [pc, #252]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e9a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007e9c:	6a3b      	ldr	r3, [r7, #32]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d007      	beq.n	8007eb2 <HAL_RCC_OscConfig+0x162>
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	2b18      	cmp	r3, #24
 8007ea6:	d137      	bne.n	8007f18 <HAL_RCC_OscConfig+0x1c8>
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	f003 0303 	and.w	r3, r3, #3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d132      	bne.n	8007f18 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007eb2:	4b38      	ldr	r3, [pc, #224]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0304 	and.w	r3, r3, #4
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d005      	beq.n	8007eca <HAL_RCC_OscConfig+0x17a>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d101      	bne.n	8007eca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e314      	b.n	80084f4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007eca:	4b32      	ldr	r3, [pc, #200]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f023 0219 	bic.w	r2, r3, #25
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	492f      	ldr	r1, [pc, #188]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007edc:	f7fa fcd2 	bl	8002884 <HAL_GetTick>
 8007ee0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ee2:	e008      	b.n	8007ef6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ee4:	f7fa fcce 	bl	8002884 <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d901      	bls.n	8007ef6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e2fe      	b.n	80084f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ef6:	4b27      	ldr	r3, [pc, #156]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0304 	and.w	r3, r3, #4
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d0f0      	beq.n	8007ee4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f02:	4b24      	ldr	r3, [pc, #144]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	061b      	lsls	r3, r3, #24
 8007f10:	4920      	ldr	r1, [pc, #128]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007f12:	4313      	orrs	r3, r2
 8007f14:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f16:	e045      	b.n	8007fa4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d026      	beq.n	8007f6e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f20:	4b1c      	ldr	r3, [pc, #112]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f023 0219 	bic.w	r2, r3, #25
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	4919      	ldr	r1, [pc, #100]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f32:	f7fa fca7 	bl	8002884 <HAL_GetTick>
 8007f36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f38:	e008      	b.n	8007f4c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f3a:	f7fa fca3 	bl	8002884 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d901      	bls.n	8007f4c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e2d3      	b.n	80084f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f4c:	4b11      	ldr	r3, [pc, #68]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0304 	and.w	r3, r3, #4
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d0f0      	beq.n	8007f3a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f58:	4b0e      	ldr	r3, [pc, #56]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	061b      	lsls	r3, r3, #24
 8007f66:	490b      	ldr	r1, [pc, #44]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	604b      	str	r3, [r1, #4]
 8007f6c:	e01a      	b.n	8007fa4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f6e:	4b09      	ldr	r3, [pc, #36]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a08      	ldr	r2, [pc, #32]	@ (8007f94 <HAL_RCC_OscConfig+0x244>)
 8007f74:	f023 0301 	bic.w	r3, r3, #1
 8007f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f7a:	f7fa fc83 	bl	8002884 <HAL_GetTick>
 8007f7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f80:	e00a      	b.n	8007f98 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f82:	f7fa fc7f 	bl	8002884 <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d903      	bls.n	8007f98 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e2af      	b.n	80084f4 <HAL_RCC_OscConfig+0x7a4>
 8007f94:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f98:	4b96      	ldr	r3, [pc, #600]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 0304 	and.w	r3, r3, #4
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1ee      	bne.n	8007f82 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0310 	and.w	r3, r3, #16
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d06a      	beq.n	8008086 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fb0:	4b90      	ldr	r3, [pc, #576]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007fb8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007fba:	4b8e      	ldr	r3, [pc, #568]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fbe:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	2b08      	cmp	r3, #8
 8007fc4:	d007      	beq.n	8007fd6 <HAL_RCC_OscConfig+0x286>
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	2b18      	cmp	r3, #24
 8007fca:	d11b      	bne.n	8008004 <HAL_RCC_OscConfig+0x2b4>
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	f003 0303 	and.w	r3, r3, #3
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d116      	bne.n	8008004 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fd6:	4b87      	ldr	r3, [pc, #540]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d005      	beq.n	8007fee <HAL_RCC_OscConfig+0x29e>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	69db      	ldr	r3, [r3, #28]
 8007fe6:	2b80      	cmp	r3, #128	@ 0x80
 8007fe8:	d001      	beq.n	8007fee <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e282      	b.n	80084f4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fee:	4b81      	ldr	r3, [pc, #516]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	061b      	lsls	r3, r3, #24
 8007ffc:	497d      	ldr	r1, [pc, #500]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008002:	e040      	b.n	8008086 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	69db      	ldr	r3, [r3, #28]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d023      	beq.n	8008054 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800800c:	4b79      	ldr	r3, [pc, #484]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a78      	ldr	r2, [pc, #480]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 8008012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008018:	f7fa fc34 	bl	8002884 <HAL_GetTick>
 800801c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800801e:	e008      	b.n	8008032 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008020:	f7fa fc30 	bl	8002884 <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	2b02      	cmp	r3, #2
 800802c:	d901      	bls.n	8008032 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800802e:	2303      	movs	r3, #3
 8008030:	e260      	b.n	80084f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008032:	4b70      	ldr	r3, [pc, #448]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800803a:	2b00      	cmp	r3, #0
 800803c:	d0f0      	beq.n	8008020 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800803e:	4b6d      	ldr	r3, [pc, #436]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a1b      	ldr	r3, [r3, #32]
 800804a:	061b      	lsls	r3, r3, #24
 800804c:	4969      	ldr	r1, [pc, #420]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 800804e:	4313      	orrs	r3, r2
 8008050:	60cb      	str	r3, [r1, #12]
 8008052:	e018      	b.n	8008086 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008054:	4b67      	ldr	r3, [pc, #412]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a66      	ldr	r2, [pc, #408]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 800805a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800805e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008060:	f7fa fc10 	bl	8002884 <HAL_GetTick>
 8008064:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008066:	e008      	b.n	800807a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008068:	f7fa fc0c 	bl	8002884 <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	2b02      	cmp	r3, #2
 8008074:	d901      	bls.n	800807a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e23c      	b.n	80084f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800807a:	4b5e      	ldr	r3, [pc, #376]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1f0      	bne.n	8008068 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 0308 	and.w	r3, r3, #8
 800808e:	2b00      	cmp	r3, #0
 8008090:	d036      	beq.n	8008100 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d019      	beq.n	80080ce <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800809a:	4b56      	ldr	r3, [pc, #344]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 800809c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800809e:	4a55      	ldr	r2, [pc, #340]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 80080a0:	f043 0301 	orr.w	r3, r3, #1
 80080a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080a6:	f7fa fbed 	bl	8002884 <HAL_GetTick>
 80080aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080ac:	e008      	b.n	80080c0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080ae:	f7fa fbe9 	bl	8002884 <HAL_GetTick>
 80080b2:	4602      	mov	r2, r0
 80080b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d901      	bls.n	80080c0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e219      	b.n	80084f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080c0:	4b4c      	ldr	r3, [pc, #304]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 80080c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080c4:	f003 0302 	and.w	r3, r3, #2
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d0f0      	beq.n	80080ae <HAL_RCC_OscConfig+0x35e>
 80080cc:	e018      	b.n	8008100 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080ce:	4b49      	ldr	r3, [pc, #292]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 80080d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080d2:	4a48      	ldr	r2, [pc, #288]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 80080d4:	f023 0301 	bic.w	r3, r3, #1
 80080d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080da:	f7fa fbd3 	bl	8002884 <HAL_GetTick>
 80080de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080e0:	e008      	b.n	80080f4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080e2:	f7fa fbcf 	bl	8002884 <HAL_GetTick>
 80080e6:	4602      	mov	r2, r0
 80080e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d901      	bls.n	80080f4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e1ff      	b.n	80084f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80080f4:	4b3f      	ldr	r3, [pc, #252]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 80080f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080f8:	f003 0302 	and.w	r3, r3, #2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1f0      	bne.n	80080e2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 0320 	and.w	r3, r3, #32
 8008108:	2b00      	cmp	r3, #0
 800810a:	d036      	beq.n	800817a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d019      	beq.n	8008148 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008114:	4b37      	ldr	r3, [pc, #220]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a36      	ldr	r2, [pc, #216]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 800811a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800811e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008120:	f7fa fbb0 	bl	8002884 <HAL_GetTick>
 8008124:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008126:	e008      	b.n	800813a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008128:	f7fa fbac 	bl	8002884 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	2b02      	cmp	r3, #2
 8008134:	d901      	bls.n	800813a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e1dc      	b.n	80084f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800813a:	4b2e      	ldr	r3, [pc, #184]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d0f0      	beq.n	8008128 <HAL_RCC_OscConfig+0x3d8>
 8008146:	e018      	b.n	800817a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008148:	4b2a      	ldr	r3, [pc, #168]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a29      	ldr	r2, [pc, #164]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 800814e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008152:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008154:	f7fa fb96 	bl	8002884 <HAL_GetTick>
 8008158:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800815a:	e008      	b.n	800816e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800815c:	f7fa fb92 	bl	8002884 <HAL_GetTick>
 8008160:	4602      	mov	r2, r0
 8008162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	2b02      	cmp	r3, #2
 8008168:	d901      	bls.n	800816e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e1c2      	b.n	80084f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800816e:	4b21      	ldr	r3, [pc, #132]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1f0      	bne.n	800815c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0304 	and.w	r3, r3, #4
 8008182:	2b00      	cmp	r3, #0
 8008184:	f000 8086 	beq.w	8008294 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008188:	4b1b      	ldr	r3, [pc, #108]	@ (80081f8 <HAL_RCC_OscConfig+0x4a8>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a1a      	ldr	r2, [pc, #104]	@ (80081f8 <HAL_RCC_OscConfig+0x4a8>)
 800818e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008192:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008194:	f7fa fb76 	bl	8002884 <HAL_GetTick>
 8008198:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800819a:	e008      	b.n	80081ae <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800819c:	f7fa fb72 	bl	8002884 <HAL_GetTick>
 80081a0:	4602      	mov	r2, r0
 80081a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	2b64      	cmp	r3, #100	@ 0x64
 80081a8:	d901      	bls.n	80081ae <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80081aa:	2303      	movs	r3, #3
 80081ac:	e1a2      	b.n	80084f4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081ae:	4b12      	ldr	r3, [pc, #72]	@ (80081f8 <HAL_RCC_OscConfig+0x4a8>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d0f0      	beq.n	800819c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d106      	bne.n	80081d0 <HAL_RCC_OscConfig+0x480>
 80081c2:	4b0c      	ldr	r3, [pc, #48]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 80081c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081c6:	4a0b      	ldr	r2, [pc, #44]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 80081c8:	f043 0301 	orr.w	r3, r3, #1
 80081cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80081ce:	e032      	b.n	8008236 <HAL_RCC_OscConfig+0x4e6>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d111      	bne.n	80081fc <HAL_RCC_OscConfig+0x4ac>
 80081d8:	4b06      	ldr	r3, [pc, #24]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 80081da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081dc:	4a05      	ldr	r2, [pc, #20]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 80081de:	f023 0301 	bic.w	r3, r3, #1
 80081e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80081e4:	4b03      	ldr	r3, [pc, #12]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 80081e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081e8:	4a02      	ldr	r2, [pc, #8]	@ (80081f4 <HAL_RCC_OscConfig+0x4a4>)
 80081ea:	f023 0304 	bic.w	r3, r3, #4
 80081ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80081f0:	e021      	b.n	8008236 <HAL_RCC_OscConfig+0x4e6>
 80081f2:	bf00      	nop
 80081f4:	58024400 	.word	0x58024400
 80081f8:	58024800 	.word	0x58024800
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	2b05      	cmp	r3, #5
 8008202:	d10c      	bne.n	800821e <HAL_RCC_OscConfig+0x4ce>
 8008204:	4b83      	ldr	r3, [pc, #524]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 8008206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008208:	4a82      	ldr	r2, [pc, #520]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 800820a:	f043 0304 	orr.w	r3, r3, #4
 800820e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008210:	4b80      	ldr	r3, [pc, #512]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 8008212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008214:	4a7f      	ldr	r2, [pc, #508]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 8008216:	f043 0301 	orr.w	r3, r3, #1
 800821a:	6713      	str	r3, [r2, #112]	@ 0x70
 800821c:	e00b      	b.n	8008236 <HAL_RCC_OscConfig+0x4e6>
 800821e:	4b7d      	ldr	r3, [pc, #500]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 8008220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008222:	4a7c      	ldr	r2, [pc, #496]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 8008224:	f023 0301 	bic.w	r3, r3, #1
 8008228:	6713      	str	r3, [r2, #112]	@ 0x70
 800822a:	4b7a      	ldr	r3, [pc, #488]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 800822c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800822e:	4a79      	ldr	r2, [pc, #484]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 8008230:	f023 0304 	bic.w	r3, r3, #4
 8008234:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d015      	beq.n	800826a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800823e:	f7fa fb21 	bl	8002884 <HAL_GetTick>
 8008242:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008244:	e00a      	b.n	800825c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008246:	f7fa fb1d 	bl	8002884 <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008254:	4293      	cmp	r3, r2
 8008256:	d901      	bls.n	800825c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008258:	2303      	movs	r3, #3
 800825a:	e14b      	b.n	80084f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800825c:	4b6d      	ldr	r3, [pc, #436]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 800825e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008260:	f003 0302 	and.w	r3, r3, #2
 8008264:	2b00      	cmp	r3, #0
 8008266:	d0ee      	beq.n	8008246 <HAL_RCC_OscConfig+0x4f6>
 8008268:	e014      	b.n	8008294 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800826a:	f7fa fb0b 	bl	8002884 <HAL_GetTick>
 800826e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008270:	e00a      	b.n	8008288 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008272:	f7fa fb07 	bl	8002884 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008280:	4293      	cmp	r3, r2
 8008282:	d901      	bls.n	8008288 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e135      	b.n	80084f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008288:	4b62      	ldr	r3, [pc, #392]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 800828a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800828c:	f003 0302 	and.w	r3, r3, #2
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1ee      	bne.n	8008272 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 812a 	beq.w	80084f2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800829e:	4b5d      	ldr	r3, [pc, #372]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082a6:	2b18      	cmp	r3, #24
 80082a8:	f000 80ba 	beq.w	8008420 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	f040 8095 	bne.w	80083e0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082b6:	4b57      	ldr	r3, [pc, #348]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a56      	ldr	r2, [pc, #344]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 80082bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082c2:	f7fa fadf 	bl	8002884 <HAL_GetTick>
 80082c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082c8:	e008      	b.n	80082dc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082ca:	f7fa fadb 	bl	8002884 <HAL_GetTick>
 80082ce:	4602      	mov	r2, r0
 80082d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d901      	bls.n	80082dc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	e10b      	b.n	80084f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082dc:	4b4d      	ldr	r3, [pc, #308]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1f0      	bne.n	80082ca <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082e8:	4b4a      	ldr	r3, [pc, #296]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 80082ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80082ec:	4b4a      	ldr	r3, [pc, #296]	@ (8008418 <HAL_RCC_OscConfig+0x6c8>)
 80082ee:	4013      	ands	r3, r2
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80082f8:	0112      	lsls	r2, r2, #4
 80082fa:	430a      	orrs	r2, r1
 80082fc:	4945      	ldr	r1, [pc, #276]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	628b      	str	r3, [r1, #40]	@ 0x28
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008306:	3b01      	subs	r3, #1
 8008308:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008310:	3b01      	subs	r3, #1
 8008312:	025b      	lsls	r3, r3, #9
 8008314:	b29b      	uxth	r3, r3
 8008316:	431a      	orrs	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800831c:	3b01      	subs	r3, #1
 800831e:	041b      	lsls	r3, r3, #16
 8008320:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008324:	431a      	orrs	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800832a:	3b01      	subs	r3, #1
 800832c:	061b      	lsls	r3, r3, #24
 800832e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008332:	4938      	ldr	r1, [pc, #224]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 8008334:	4313      	orrs	r3, r2
 8008336:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008338:	4b36      	ldr	r3, [pc, #216]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 800833a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833c:	4a35      	ldr	r2, [pc, #212]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 800833e:	f023 0301 	bic.w	r3, r3, #1
 8008342:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008344:	4b33      	ldr	r3, [pc, #204]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 8008346:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008348:	4b34      	ldr	r3, [pc, #208]	@ (800841c <HAL_RCC_OscConfig+0x6cc>)
 800834a:	4013      	ands	r3, r2
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008350:	00d2      	lsls	r2, r2, #3
 8008352:	4930      	ldr	r1, [pc, #192]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 8008354:	4313      	orrs	r3, r2
 8008356:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008358:	4b2e      	ldr	r3, [pc, #184]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 800835a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800835c:	f023 020c 	bic.w	r2, r3, #12
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008364:	492b      	ldr	r1, [pc, #172]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 8008366:	4313      	orrs	r3, r2
 8008368:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800836a:	4b2a      	ldr	r3, [pc, #168]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 800836c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800836e:	f023 0202 	bic.w	r2, r3, #2
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008376:	4927      	ldr	r1, [pc, #156]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 8008378:	4313      	orrs	r3, r2
 800837a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800837c:	4b25      	ldr	r3, [pc, #148]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 800837e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008380:	4a24      	ldr	r2, [pc, #144]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 8008382:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008386:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008388:	4b22      	ldr	r3, [pc, #136]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 800838a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838c:	4a21      	ldr	r2, [pc, #132]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 800838e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008392:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008394:	4b1f      	ldr	r3, [pc, #124]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 8008396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008398:	4a1e      	ldr	r2, [pc, #120]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 800839a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800839e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80083a0:	4b1c      	ldr	r3, [pc, #112]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 80083a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a4:	4a1b      	ldr	r2, [pc, #108]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 80083a6:	f043 0301 	orr.w	r3, r3, #1
 80083aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083ac:	4b19      	ldr	r3, [pc, #100]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a18      	ldr	r2, [pc, #96]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 80083b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083b8:	f7fa fa64 	bl	8002884 <HAL_GetTick>
 80083bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083be:	e008      	b.n	80083d2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083c0:	f7fa fa60 	bl	8002884 <HAL_GetTick>
 80083c4:	4602      	mov	r2, r0
 80083c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d901      	bls.n	80083d2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e090      	b.n	80084f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083d2:	4b10      	ldr	r3, [pc, #64]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d0f0      	beq.n	80083c0 <HAL_RCC_OscConfig+0x670>
 80083de:	e088      	b.n	80084f2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a0b      	ldr	r2, [pc, #44]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 80083e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083ec:	f7fa fa4a 	bl	8002884 <HAL_GetTick>
 80083f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083f2:	e008      	b.n	8008406 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083f4:	f7fa fa46 	bl	8002884 <HAL_GetTick>
 80083f8:	4602      	mov	r2, r0
 80083fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d901      	bls.n	8008406 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008402:	2303      	movs	r3, #3
 8008404:	e076      	b.n	80084f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008406:	4b03      	ldr	r3, [pc, #12]	@ (8008414 <HAL_RCC_OscConfig+0x6c4>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1f0      	bne.n	80083f4 <HAL_RCC_OscConfig+0x6a4>
 8008412:	e06e      	b.n	80084f2 <HAL_RCC_OscConfig+0x7a2>
 8008414:	58024400 	.word	0x58024400
 8008418:	fffffc0c 	.word	0xfffffc0c
 800841c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008420:	4b36      	ldr	r3, [pc, #216]	@ (80084fc <HAL_RCC_OscConfig+0x7ac>)
 8008422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008424:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008426:	4b35      	ldr	r3, [pc, #212]	@ (80084fc <HAL_RCC_OscConfig+0x7ac>)
 8008428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800842a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008430:	2b01      	cmp	r3, #1
 8008432:	d031      	beq.n	8008498 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	f003 0203 	and.w	r2, r3, #3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800843e:	429a      	cmp	r2, r3
 8008440:	d12a      	bne.n	8008498 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	091b      	lsrs	r3, r3, #4
 8008446:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800844e:	429a      	cmp	r2, r3
 8008450:	d122      	bne.n	8008498 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800845c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800845e:	429a      	cmp	r2, r3
 8008460:	d11a      	bne.n	8008498 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	0a5b      	lsrs	r3, r3, #9
 8008466:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800846e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008470:	429a      	cmp	r2, r3
 8008472:	d111      	bne.n	8008498 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	0c1b      	lsrs	r3, r3, #16
 8008478:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008480:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008482:	429a      	cmp	r2, r3
 8008484:	d108      	bne.n	8008498 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	0e1b      	lsrs	r3, r3, #24
 800848a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008492:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008494:	429a      	cmp	r2, r3
 8008496:	d001      	beq.n	800849c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	e02b      	b.n	80084f4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800849c:	4b17      	ldr	r3, [pc, #92]	@ (80084fc <HAL_RCC_OscConfig+0x7ac>)
 800849e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084a0:	08db      	lsrs	r3, r3, #3
 80084a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084a6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d01f      	beq.n	80084f2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80084b2:	4b12      	ldr	r3, [pc, #72]	@ (80084fc <HAL_RCC_OscConfig+0x7ac>)
 80084b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b6:	4a11      	ldr	r2, [pc, #68]	@ (80084fc <HAL_RCC_OscConfig+0x7ac>)
 80084b8:	f023 0301 	bic.w	r3, r3, #1
 80084bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80084be:	f7fa f9e1 	bl	8002884 <HAL_GetTick>
 80084c2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80084c4:	bf00      	nop
 80084c6:	f7fa f9dd 	bl	8002884 <HAL_GetTick>
 80084ca:	4602      	mov	r2, r0
 80084cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d0f9      	beq.n	80084c6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80084d2:	4b0a      	ldr	r3, [pc, #40]	@ (80084fc <HAL_RCC_OscConfig+0x7ac>)
 80084d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008500 <HAL_RCC_OscConfig+0x7b0>)
 80084d8:	4013      	ands	r3, r2
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80084de:	00d2      	lsls	r2, r2, #3
 80084e0:	4906      	ldr	r1, [pc, #24]	@ (80084fc <HAL_RCC_OscConfig+0x7ac>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80084e6:	4b05      	ldr	r3, [pc, #20]	@ (80084fc <HAL_RCC_OscConfig+0x7ac>)
 80084e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ea:	4a04      	ldr	r2, [pc, #16]	@ (80084fc <HAL_RCC_OscConfig+0x7ac>)
 80084ec:	f043 0301 	orr.w	r3, r3, #1
 80084f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3730      	adds	r7, #48	@ 0x30
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	58024400 	.word	0x58024400
 8008500:	ffff0007 	.word	0xffff0007

08008504 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e19c      	b.n	8008852 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008518:	4b8a      	ldr	r3, [pc, #552]	@ (8008744 <HAL_RCC_ClockConfig+0x240>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 030f 	and.w	r3, r3, #15
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	429a      	cmp	r2, r3
 8008524:	d910      	bls.n	8008548 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008526:	4b87      	ldr	r3, [pc, #540]	@ (8008744 <HAL_RCC_ClockConfig+0x240>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f023 020f 	bic.w	r2, r3, #15
 800852e:	4985      	ldr	r1, [pc, #532]	@ (8008744 <HAL_RCC_ClockConfig+0x240>)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	4313      	orrs	r3, r2
 8008534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008536:	4b83      	ldr	r3, [pc, #524]	@ (8008744 <HAL_RCC_ClockConfig+0x240>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 030f 	and.w	r3, r3, #15
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	429a      	cmp	r2, r3
 8008542:	d001      	beq.n	8008548 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e184      	b.n	8008852 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0304 	and.w	r3, r3, #4
 8008550:	2b00      	cmp	r3, #0
 8008552:	d010      	beq.n	8008576 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	691a      	ldr	r2, [r3, #16]
 8008558:	4b7b      	ldr	r3, [pc, #492]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008560:	429a      	cmp	r2, r3
 8008562:	d908      	bls.n	8008576 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008564:	4b78      	ldr	r3, [pc, #480]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	4975      	ldr	r1, [pc, #468]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 8008572:	4313      	orrs	r3, r2
 8008574:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0308 	and.w	r3, r3, #8
 800857e:	2b00      	cmp	r3, #0
 8008580:	d010      	beq.n	80085a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	695a      	ldr	r2, [r3, #20]
 8008586:	4b70      	ldr	r3, [pc, #448]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 8008588:	69db      	ldr	r3, [r3, #28]
 800858a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800858e:	429a      	cmp	r2, r3
 8008590:	d908      	bls.n	80085a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008592:	4b6d      	ldr	r3, [pc, #436]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 8008594:	69db      	ldr	r3, [r3, #28]
 8008596:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	496a      	ldr	r1, [pc, #424]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0310 	and.w	r3, r3, #16
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d010      	beq.n	80085d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	699a      	ldr	r2, [r3, #24]
 80085b4:	4b64      	ldr	r3, [pc, #400]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 80085b6:	69db      	ldr	r3, [r3, #28]
 80085b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80085bc:	429a      	cmp	r2, r3
 80085be:	d908      	bls.n	80085d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80085c0:	4b61      	ldr	r3, [pc, #388]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	495e      	ldr	r1, [pc, #376]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0320 	and.w	r3, r3, #32
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d010      	beq.n	8008600 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	69da      	ldr	r2, [r3, #28]
 80085e2:	4b59      	ldr	r3, [pc, #356]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d908      	bls.n	8008600 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80085ee:	4b56      	ldr	r3, [pc, #344]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	69db      	ldr	r3, [r3, #28]
 80085fa:	4953      	ldr	r1, [pc, #332]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 80085fc:	4313      	orrs	r3, r2
 80085fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0302 	and.w	r3, r3, #2
 8008608:	2b00      	cmp	r3, #0
 800860a:	d010      	beq.n	800862e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	68da      	ldr	r2, [r3, #12]
 8008610:	4b4d      	ldr	r3, [pc, #308]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	f003 030f 	and.w	r3, r3, #15
 8008618:	429a      	cmp	r2, r3
 800861a:	d908      	bls.n	800862e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800861c:	4b4a      	ldr	r3, [pc, #296]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	f023 020f 	bic.w	r2, r3, #15
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	4947      	ldr	r1, [pc, #284]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 800862a:	4313      	orrs	r3, r2
 800862c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	2b00      	cmp	r3, #0
 8008638:	d055      	beq.n	80086e6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800863a:	4b43      	ldr	r3, [pc, #268]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	4940      	ldr	r1, [pc, #256]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 8008648:	4313      	orrs	r3, r2
 800864a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	2b02      	cmp	r3, #2
 8008652:	d107      	bne.n	8008664 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008654:	4b3c      	ldr	r3, [pc, #240]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800865c:	2b00      	cmp	r3, #0
 800865e:	d121      	bne.n	80086a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	e0f6      	b.n	8008852 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	2b03      	cmp	r3, #3
 800866a:	d107      	bne.n	800867c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800866c:	4b36      	ldr	r3, [pc, #216]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d115      	bne.n	80086a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	e0ea      	b.n	8008852 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d107      	bne.n	8008694 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008684:	4b30      	ldr	r3, [pc, #192]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800868c:	2b00      	cmp	r3, #0
 800868e:	d109      	bne.n	80086a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e0de      	b.n	8008852 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008694:	4b2c      	ldr	r3, [pc, #176]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0304 	and.w	r3, r3, #4
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e0d6      	b.n	8008852 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80086a4:	4b28      	ldr	r3, [pc, #160]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	f023 0207 	bic.w	r2, r3, #7
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	4925      	ldr	r1, [pc, #148]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 80086b2:	4313      	orrs	r3, r2
 80086b4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086b6:	f7fa f8e5 	bl	8002884 <HAL_GetTick>
 80086ba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086bc:	e00a      	b.n	80086d4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086be:	f7fa f8e1 	bl	8002884 <HAL_GetTick>
 80086c2:	4602      	mov	r2, r0
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d901      	bls.n	80086d4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e0be      	b.n	8008852 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086d4:	4b1c      	ldr	r3, [pc, #112]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	00db      	lsls	r3, r3, #3
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d1eb      	bne.n	80086be <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 0302 	and.w	r3, r3, #2
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d010      	beq.n	8008714 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	68da      	ldr	r2, [r3, #12]
 80086f6:	4b14      	ldr	r3, [pc, #80]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 80086f8:	699b      	ldr	r3, [r3, #24]
 80086fa:	f003 030f 	and.w	r3, r3, #15
 80086fe:	429a      	cmp	r2, r3
 8008700:	d208      	bcs.n	8008714 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008702:	4b11      	ldr	r3, [pc, #68]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	f023 020f 	bic.w	r2, r3, #15
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	490e      	ldr	r1, [pc, #56]	@ (8008748 <HAL_RCC_ClockConfig+0x244>)
 8008710:	4313      	orrs	r3, r2
 8008712:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008714:	4b0b      	ldr	r3, [pc, #44]	@ (8008744 <HAL_RCC_ClockConfig+0x240>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 030f 	and.w	r3, r3, #15
 800871c:	683a      	ldr	r2, [r7, #0]
 800871e:	429a      	cmp	r2, r3
 8008720:	d214      	bcs.n	800874c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008722:	4b08      	ldr	r3, [pc, #32]	@ (8008744 <HAL_RCC_ClockConfig+0x240>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f023 020f 	bic.w	r2, r3, #15
 800872a:	4906      	ldr	r1, [pc, #24]	@ (8008744 <HAL_RCC_ClockConfig+0x240>)
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	4313      	orrs	r3, r2
 8008730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008732:	4b04      	ldr	r3, [pc, #16]	@ (8008744 <HAL_RCC_ClockConfig+0x240>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 030f 	and.w	r3, r3, #15
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	429a      	cmp	r2, r3
 800873e:	d005      	beq.n	800874c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	e086      	b.n	8008852 <HAL_RCC_ClockConfig+0x34e>
 8008744:	52002000 	.word	0x52002000
 8008748:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0304 	and.w	r3, r3, #4
 8008754:	2b00      	cmp	r3, #0
 8008756:	d010      	beq.n	800877a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	691a      	ldr	r2, [r3, #16]
 800875c:	4b3f      	ldr	r3, [pc, #252]	@ (800885c <HAL_RCC_ClockConfig+0x358>)
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008764:	429a      	cmp	r2, r3
 8008766:	d208      	bcs.n	800877a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008768:	4b3c      	ldr	r3, [pc, #240]	@ (800885c <HAL_RCC_ClockConfig+0x358>)
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	4939      	ldr	r1, [pc, #228]	@ (800885c <HAL_RCC_ClockConfig+0x358>)
 8008776:	4313      	orrs	r3, r2
 8008778:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 0308 	and.w	r3, r3, #8
 8008782:	2b00      	cmp	r3, #0
 8008784:	d010      	beq.n	80087a8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	695a      	ldr	r2, [r3, #20]
 800878a:	4b34      	ldr	r3, [pc, #208]	@ (800885c <HAL_RCC_ClockConfig+0x358>)
 800878c:	69db      	ldr	r3, [r3, #28]
 800878e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008792:	429a      	cmp	r2, r3
 8008794:	d208      	bcs.n	80087a8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008796:	4b31      	ldr	r3, [pc, #196]	@ (800885c <HAL_RCC_ClockConfig+0x358>)
 8008798:	69db      	ldr	r3, [r3, #28]
 800879a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	492e      	ldr	r1, [pc, #184]	@ (800885c <HAL_RCC_ClockConfig+0x358>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0310 	and.w	r3, r3, #16
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d010      	beq.n	80087d6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	699a      	ldr	r2, [r3, #24]
 80087b8:	4b28      	ldr	r3, [pc, #160]	@ (800885c <HAL_RCC_ClockConfig+0x358>)
 80087ba:	69db      	ldr	r3, [r3, #28]
 80087bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d208      	bcs.n	80087d6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80087c4:	4b25      	ldr	r3, [pc, #148]	@ (800885c <HAL_RCC_ClockConfig+0x358>)
 80087c6:	69db      	ldr	r3, [r3, #28]
 80087c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	4922      	ldr	r1, [pc, #136]	@ (800885c <HAL_RCC_ClockConfig+0x358>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 0320 	and.w	r3, r3, #32
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d010      	beq.n	8008804 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	69da      	ldr	r2, [r3, #28]
 80087e6:	4b1d      	ldr	r3, [pc, #116]	@ (800885c <HAL_RCC_ClockConfig+0x358>)
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d208      	bcs.n	8008804 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80087f2:	4b1a      	ldr	r3, [pc, #104]	@ (800885c <HAL_RCC_ClockConfig+0x358>)
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	69db      	ldr	r3, [r3, #28]
 80087fe:	4917      	ldr	r1, [pc, #92]	@ (800885c <HAL_RCC_ClockConfig+0x358>)
 8008800:	4313      	orrs	r3, r2
 8008802:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008804:	f000 f834 	bl	8008870 <HAL_RCC_GetSysClockFreq>
 8008808:	4602      	mov	r2, r0
 800880a:	4b14      	ldr	r3, [pc, #80]	@ (800885c <HAL_RCC_ClockConfig+0x358>)
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	0a1b      	lsrs	r3, r3, #8
 8008810:	f003 030f 	and.w	r3, r3, #15
 8008814:	4912      	ldr	r1, [pc, #72]	@ (8008860 <HAL_RCC_ClockConfig+0x35c>)
 8008816:	5ccb      	ldrb	r3, [r1, r3]
 8008818:	f003 031f 	and.w	r3, r3, #31
 800881c:	fa22 f303 	lsr.w	r3, r2, r3
 8008820:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008822:	4b0e      	ldr	r3, [pc, #56]	@ (800885c <HAL_RCC_ClockConfig+0x358>)
 8008824:	699b      	ldr	r3, [r3, #24]
 8008826:	f003 030f 	and.w	r3, r3, #15
 800882a:	4a0d      	ldr	r2, [pc, #52]	@ (8008860 <HAL_RCC_ClockConfig+0x35c>)
 800882c:	5cd3      	ldrb	r3, [r2, r3]
 800882e:	f003 031f 	and.w	r3, r3, #31
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	fa22 f303 	lsr.w	r3, r2, r3
 8008838:	4a0a      	ldr	r2, [pc, #40]	@ (8008864 <HAL_RCC_ClockConfig+0x360>)
 800883a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800883c:	4a0a      	ldr	r2, [pc, #40]	@ (8008868 <HAL_RCC_ClockConfig+0x364>)
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008842:	4b0a      	ldr	r3, [pc, #40]	@ (800886c <HAL_RCC_ClockConfig+0x368>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4618      	mov	r0, r3
 8008848:	f7f9 ffd2 	bl	80027f0 <HAL_InitTick>
 800884c:	4603      	mov	r3, r0
 800884e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008850:	7bfb      	ldrb	r3, [r7, #15]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3718      	adds	r7, #24
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	58024400 	.word	0x58024400
 8008860:	0800fbc8 	.word	0x0800fbc8
 8008864:	24000058 	.word	0x24000058
 8008868:	24000054 	.word	0x24000054
 800886c:	2400005c 	.word	0x2400005c

08008870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008870:	b480      	push	{r7}
 8008872:	b089      	sub	sp, #36	@ 0x24
 8008874:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008876:	4bb3      	ldr	r3, [pc, #716]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800887e:	2b18      	cmp	r3, #24
 8008880:	f200 8155 	bhi.w	8008b2e <HAL_RCC_GetSysClockFreq+0x2be>
 8008884:	a201      	add	r2, pc, #4	@ (adr r2, 800888c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888a:	bf00      	nop
 800888c:	080088f1 	.word	0x080088f1
 8008890:	08008b2f 	.word	0x08008b2f
 8008894:	08008b2f 	.word	0x08008b2f
 8008898:	08008b2f 	.word	0x08008b2f
 800889c:	08008b2f 	.word	0x08008b2f
 80088a0:	08008b2f 	.word	0x08008b2f
 80088a4:	08008b2f 	.word	0x08008b2f
 80088a8:	08008b2f 	.word	0x08008b2f
 80088ac:	08008917 	.word	0x08008917
 80088b0:	08008b2f 	.word	0x08008b2f
 80088b4:	08008b2f 	.word	0x08008b2f
 80088b8:	08008b2f 	.word	0x08008b2f
 80088bc:	08008b2f 	.word	0x08008b2f
 80088c0:	08008b2f 	.word	0x08008b2f
 80088c4:	08008b2f 	.word	0x08008b2f
 80088c8:	08008b2f 	.word	0x08008b2f
 80088cc:	0800891d 	.word	0x0800891d
 80088d0:	08008b2f 	.word	0x08008b2f
 80088d4:	08008b2f 	.word	0x08008b2f
 80088d8:	08008b2f 	.word	0x08008b2f
 80088dc:	08008b2f 	.word	0x08008b2f
 80088e0:	08008b2f 	.word	0x08008b2f
 80088e4:	08008b2f 	.word	0x08008b2f
 80088e8:	08008b2f 	.word	0x08008b2f
 80088ec:	08008923 	.word	0x08008923
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088f0:	4b94      	ldr	r3, [pc, #592]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 0320 	and.w	r3, r3, #32
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d009      	beq.n	8008910 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088fc:	4b91      	ldr	r3, [pc, #580]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	08db      	lsrs	r3, r3, #3
 8008902:	f003 0303 	and.w	r3, r3, #3
 8008906:	4a90      	ldr	r2, [pc, #576]	@ (8008b48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008908:	fa22 f303 	lsr.w	r3, r2, r3
 800890c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800890e:	e111      	b.n	8008b34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008910:	4b8d      	ldr	r3, [pc, #564]	@ (8008b48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008912:	61bb      	str	r3, [r7, #24]
      break;
 8008914:	e10e      	b.n	8008b34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008916:	4b8d      	ldr	r3, [pc, #564]	@ (8008b4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008918:	61bb      	str	r3, [r7, #24]
      break;
 800891a:	e10b      	b.n	8008b34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800891c:	4b8c      	ldr	r3, [pc, #560]	@ (8008b50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800891e:	61bb      	str	r3, [r7, #24]
      break;
 8008920:	e108      	b.n	8008b34 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008922:	4b88      	ldr	r3, [pc, #544]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008926:	f003 0303 	and.w	r3, r3, #3
 800892a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800892c:	4b85      	ldr	r3, [pc, #532]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800892e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008930:	091b      	lsrs	r3, r3, #4
 8008932:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008936:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008938:	4b82      	ldr	r3, [pc, #520]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800893a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800893c:	f003 0301 	and.w	r3, r3, #1
 8008940:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008942:	4b80      	ldr	r3, [pc, #512]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008946:	08db      	lsrs	r3, r3, #3
 8008948:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	fb02 f303 	mul.w	r3, r2, r3
 8008952:	ee07 3a90 	vmov	s15, r3
 8008956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800895a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	2b00      	cmp	r3, #0
 8008962:	f000 80e1 	beq.w	8008b28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	2b02      	cmp	r3, #2
 800896a:	f000 8083 	beq.w	8008a74 <HAL_RCC_GetSysClockFreq+0x204>
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2b02      	cmp	r3, #2
 8008972:	f200 80a1 	bhi.w	8008ab8 <HAL_RCC_GetSysClockFreq+0x248>
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d003      	beq.n	8008984 <HAL_RCC_GetSysClockFreq+0x114>
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d056      	beq.n	8008a30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008982:	e099      	b.n	8008ab8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008984:	4b6f      	ldr	r3, [pc, #444]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0320 	and.w	r3, r3, #32
 800898c:	2b00      	cmp	r3, #0
 800898e:	d02d      	beq.n	80089ec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008990:	4b6c      	ldr	r3, [pc, #432]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	08db      	lsrs	r3, r3, #3
 8008996:	f003 0303 	and.w	r3, r3, #3
 800899a:	4a6b      	ldr	r2, [pc, #428]	@ (8008b48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800899c:	fa22 f303 	lsr.w	r3, r2, r3
 80089a0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	ee07 3a90 	vmov	s15, r3
 80089a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	ee07 3a90 	vmov	s15, r3
 80089b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ba:	4b62      	ldr	r3, [pc, #392]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c2:	ee07 3a90 	vmov	s15, r3
 80089c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80089ce:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 80089d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089e6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80089ea:	e087      	b.n	8008afc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	ee07 3a90 	vmov	s15, r3
 80089f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008b58 <HAL_RCC_GetSysClockFreq+0x2e8>
 80089fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089fe:	4b51      	ldr	r3, [pc, #324]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a12:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a2e:	e065      	b.n	8008afc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	ee07 3a90 	vmov	s15, r3
 8008a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008b5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a42:	4b40      	ldr	r3, [pc, #256]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a52:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a56:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008a72:	e043      	b.n	8008afc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	ee07 3a90 	vmov	s15, r3
 8008a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a7e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008b60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a86:	4b2f      	ldr	r3, [pc, #188]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a96:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a9a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008ab6:	e021      	b.n	8008afc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	ee07 3a90 	vmov	s15, r3
 8008abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008b5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aca:	4b1e      	ldr	r3, [pc, #120]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad2:	ee07 3a90 	vmov	s15, r3
 8008ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ada:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ade:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008b54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008afa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008afc:	4b11      	ldr	r3, [pc, #68]	@ (8008b44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b00:	0a5b      	lsrs	r3, r3, #9
 8008b02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b06:	3301      	adds	r3, #1
 8008b08:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	ee07 3a90 	vmov	s15, r3
 8008b10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b14:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b20:	ee17 3a90 	vmov	r3, s15
 8008b24:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008b26:	e005      	b.n	8008b34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	61bb      	str	r3, [r7, #24]
      break;
 8008b2c:	e002      	b.n	8008b34 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008b2e:	4b07      	ldr	r3, [pc, #28]	@ (8008b4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008b30:	61bb      	str	r3, [r7, #24]
      break;
 8008b32:	bf00      	nop
  }

  return sysclockfreq;
 8008b34:	69bb      	ldr	r3, [r7, #24]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3724      	adds	r7, #36	@ 0x24
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	58024400 	.word	0x58024400
 8008b48:	03d09000 	.word	0x03d09000
 8008b4c:	003d0900 	.word	0x003d0900
 8008b50:	017d7840 	.word	0x017d7840
 8008b54:	46000000 	.word	0x46000000
 8008b58:	4c742400 	.word	0x4c742400
 8008b5c:	4a742400 	.word	0x4a742400
 8008b60:	4bbebc20 	.word	0x4bbebc20

08008b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008b6a:	f7ff fe81 	bl	8008870 <HAL_RCC_GetSysClockFreq>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	4b10      	ldr	r3, [pc, #64]	@ (8008bb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008b72:	699b      	ldr	r3, [r3, #24]
 8008b74:	0a1b      	lsrs	r3, r3, #8
 8008b76:	f003 030f 	and.w	r3, r3, #15
 8008b7a:	490f      	ldr	r1, [pc, #60]	@ (8008bb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008b7c:	5ccb      	ldrb	r3, [r1, r3]
 8008b7e:	f003 031f 	and.w	r3, r3, #31
 8008b82:	fa22 f303 	lsr.w	r3, r2, r3
 8008b86:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b88:	4b0a      	ldr	r3, [pc, #40]	@ (8008bb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	f003 030f 	and.w	r3, r3, #15
 8008b90:	4a09      	ldr	r2, [pc, #36]	@ (8008bb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008b92:	5cd3      	ldrb	r3, [r2, r3]
 8008b94:	f003 031f 	and.w	r3, r3, #31
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b9e:	4a07      	ldr	r2, [pc, #28]	@ (8008bbc <HAL_RCC_GetHCLKFreq+0x58>)
 8008ba0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008ba2:	4a07      	ldr	r2, [pc, #28]	@ (8008bc0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008ba8:	4b04      	ldr	r3, [pc, #16]	@ (8008bbc <HAL_RCC_GetHCLKFreq+0x58>)
 8008baa:	681b      	ldr	r3, [r3, #0]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	58024400 	.word	0x58024400
 8008bb8:	0800fbc8 	.word	0x0800fbc8
 8008bbc:	24000058 	.word	0x24000058
 8008bc0:	24000054 	.word	0x24000054

08008bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008bc8:	f7ff ffcc 	bl	8008b64 <HAL_RCC_GetHCLKFreq>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	4b06      	ldr	r3, [pc, #24]	@ (8008be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	091b      	lsrs	r3, r3, #4
 8008bd4:	f003 0307 	and.w	r3, r3, #7
 8008bd8:	4904      	ldr	r1, [pc, #16]	@ (8008bec <HAL_RCC_GetPCLK1Freq+0x28>)
 8008bda:	5ccb      	ldrb	r3, [r1, r3]
 8008bdc:	f003 031f 	and.w	r3, r3, #31
 8008be0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	58024400 	.word	0x58024400
 8008bec:	0800fbc8 	.word	0x0800fbc8

08008bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008bf4:	f7ff ffb6 	bl	8008b64 <HAL_RCC_GetHCLKFreq>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	4b06      	ldr	r3, [pc, #24]	@ (8008c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bfc:	69db      	ldr	r3, [r3, #28]
 8008bfe:	0a1b      	lsrs	r3, r3, #8
 8008c00:	f003 0307 	and.w	r3, r3, #7
 8008c04:	4904      	ldr	r1, [pc, #16]	@ (8008c18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c06:	5ccb      	ldrb	r3, [r1, r3]
 8008c08:	f003 031f 	and.w	r3, r3, #31
 8008c0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	58024400 	.word	0x58024400
 8008c18:	0800fbc8 	.word	0x0800fbc8

08008c1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c20:	b0c6      	sub	sp, #280	@ 0x118
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008c28:	2300      	movs	r3, #0
 8008c2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c2e:	2300      	movs	r3, #0
 8008c30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008c40:	2500      	movs	r5, #0
 8008c42:	ea54 0305 	orrs.w	r3, r4, r5
 8008c46:	d049      	beq.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c52:	d02f      	beq.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008c54:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c58:	d828      	bhi.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008c5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c5e:	d01a      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008c60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c64:	d822      	bhi.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d003      	beq.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008c6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c6e:	d007      	beq.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008c70:	e01c      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c72:	4bab      	ldr	r3, [pc, #684]	@ (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c76:	4aaa      	ldr	r2, [pc, #680]	@ (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008c7e:	e01a      	b.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c84:	3308      	adds	r3, #8
 8008c86:	2102      	movs	r1, #2
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f002 fa49 	bl	800b120 <RCCEx_PLL2_Config>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008c94:	e00f      	b.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c9a:	3328      	adds	r3, #40	@ 0x28
 8008c9c:	2102      	movs	r1, #2
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f002 faf0 	bl	800b284 <RCCEx_PLL3_Config>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008caa:	e004      	b.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008cb2:	e000      	b.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008cb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10a      	bne.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008cbe:	4b98      	ldr	r3, [pc, #608]	@ (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008cc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cc2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ccc:	4a94      	ldr	r2, [pc, #592]	@ (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008cce:	430b      	orrs	r3, r1
 8008cd0:	6513      	str	r3, [r2, #80]	@ 0x50
 8008cd2:	e003      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008ce8:	f04f 0900 	mov.w	r9, #0
 8008cec:	ea58 0309 	orrs.w	r3, r8, r9
 8008cf0:	d047      	beq.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cf8:	2b04      	cmp	r3, #4
 8008cfa:	d82a      	bhi.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8008d04 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d02:	bf00      	nop
 8008d04:	08008d19 	.word	0x08008d19
 8008d08:	08008d27 	.word	0x08008d27
 8008d0c:	08008d3d 	.word	0x08008d3d
 8008d10:	08008d5b 	.word	0x08008d5b
 8008d14:	08008d5b 	.word	0x08008d5b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d18:	4b81      	ldr	r3, [pc, #516]	@ (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d1c:	4a80      	ldr	r2, [pc, #512]	@ (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d24:	e01a      	b.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d2a:	3308      	adds	r3, #8
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f002 f9f6 	bl	800b120 <RCCEx_PLL2_Config>
 8008d34:	4603      	mov	r3, r0
 8008d36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d3a:	e00f      	b.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d40:	3328      	adds	r3, #40	@ 0x28
 8008d42:	2100      	movs	r1, #0
 8008d44:	4618      	mov	r0, r3
 8008d46:	f002 fa9d 	bl	800b284 <RCCEx_PLL3_Config>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d50:	e004      	b.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008d58:	e000      	b.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008d5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10a      	bne.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008d64:	4b6e      	ldr	r3, [pc, #440]	@ (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d68:	f023 0107 	bic.w	r1, r3, #7
 8008d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d72:	4a6b      	ldr	r2, [pc, #428]	@ (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d74:	430b      	orrs	r3, r1
 8008d76:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d78:	e003      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8008d8e:	f04f 0b00 	mov.w	fp, #0
 8008d92:	ea5a 030b 	orrs.w	r3, sl, fp
 8008d96:	d05b      	beq.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008da0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008da4:	d03b      	beq.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008da6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008daa:	d834      	bhi.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008dac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008db0:	d037      	beq.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008db2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008db6:	d82e      	bhi.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008db8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008dbc:	d033      	beq.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008dbe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008dc2:	d828      	bhi.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008dc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008dc8:	d01a      	beq.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008dca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008dce:	d822      	bhi.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d003      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008dd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008dd8:	d007      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008dda:	e01c      	b.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ddc:	4b50      	ldr	r3, [pc, #320]	@ (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de0:	4a4f      	ldr	r2, [pc, #316]	@ (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008de2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008de6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008de8:	e01e      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dee:	3308      	adds	r3, #8
 8008df0:	2100      	movs	r1, #0
 8008df2:	4618      	mov	r0, r3
 8008df4:	f002 f994 	bl	800b120 <RCCEx_PLL2_Config>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008dfe:	e013      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e04:	3328      	adds	r3, #40	@ 0x28
 8008e06:	2100      	movs	r1, #0
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f002 fa3b 	bl	800b284 <RCCEx_PLL3_Config>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e14:	e008      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008e1c:	e004      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008e1e:	bf00      	nop
 8008e20:	e002      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008e22:	bf00      	nop
 8008e24:	e000      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10b      	bne.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008e30:	4b3b      	ldr	r3, [pc, #236]	@ (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e34:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e40:	4a37      	ldr	r2, [pc, #220]	@ (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e42:	430b      	orrs	r3, r1
 8008e44:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e46:	e003      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e58:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008e5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008e60:	2300      	movs	r3, #0
 8008e62:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008e66:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	d05d      	beq.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008e78:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008e7c:	d03b      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008e7e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008e82:	d834      	bhi.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008e84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e88:	d037      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008e8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e8e:	d82e      	bhi.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008e90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008e94:	d033      	beq.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008e96:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008e9a:	d828      	bhi.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008e9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ea0:	d01a      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008ea2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ea6:	d822      	bhi.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d003      	beq.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008eac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008eb0:	d007      	beq.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008eb2:	e01c      	b.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb8:	4a19      	ldr	r2, [pc, #100]	@ (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008eba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ebe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ec0:	e01e      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ec6:	3308      	adds	r3, #8
 8008ec8:	2100      	movs	r1, #0
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f002 f928 	bl	800b120 <RCCEx_PLL2_Config>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008ed6:	e013      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008edc:	3328      	adds	r3, #40	@ 0x28
 8008ede:	2100      	movs	r1, #0
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f002 f9cf 	bl	800b284 <RCCEx_PLL3_Config>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008eec:	e008      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ef4:	e004      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008ef6:	bf00      	nop
 8008ef8:	e002      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008efa:	bf00      	nop
 8008efc:	e000      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008efe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10d      	bne.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008f08:	4b05      	ldr	r3, [pc, #20]	@ (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f0c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008f18:	4a01      	ldr	r2, [pc, #4]	@ (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f1a:	430b      	orrs	r3, r1
 8008f1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f1e:	e005      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008f20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f34:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008f38:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008f42:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008f46:	460b      	mov	r3, r1
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	d03a      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f52:	2b30      	cmp	r3, #48	@ 0x30
 8008f54:	d01f      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008f56:	2b30      	cmp	r3, #48	@ 0x30
 8008f58:	d819      	bhi.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008f5a:	2b20      	cmp	r3, #32
 8008f5c:	d00c      	beq.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008f5e:	2b20      	cmp	r3, #32
 8008f60:	d815      	bhi.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d019      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008f66:	2b10      	cmp	r3, #16
 8008f68:	d111      	bne.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f6a:	4baa      	ldr	r3, [pc, #680]	@ (8009214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f6e:	4aa9      	ldr	r2, [pc, #676]	@ (8009214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008f76:	e011      	b.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f7c:	3308      	adds	r3, #8
 8008f7e:	2102      	movs	r1, #2
 8008f80:	4618      	mov	r0, r3
 8008f82:	f002 f8cd 	bl	800b120 <RCCEx_PLL2_Config>
 8008f86:	4603      	mov	r3, r0
 8008f88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008f8c:	e006      	b.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008f94:	e002      	b.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008f96:	bf00      	nop
 8008f98:	e000      	b.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008f9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d10a      	bne.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008fa4:	4b9b      	ldr	r3, [pc, #620]	@ (8009214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fa8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fb2:	4a98      	ldr	r2, [pc, #608]	@ (8009214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008fb4:	430b      	orrs	r3, r1
 8008fb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008fb8:	e003      	b.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fbe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008fce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008fd8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008fdc:	460b      	mov	r3, r1
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	d051      	beq.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fe8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008fec:	d035      	beq.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8008fee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ff2:	d82e      	bhi.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008ff4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008ff8:	d031      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8008ffa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008ffe:	d828      	bhi.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009000:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009004:	d01a      	beq.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009006:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800900a:	d822      	bhi.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800900c:	2b00      	cmp	r3, #0
 800900e:	d003      	beq.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009010:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009014:	d007      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009016:	e01c      	b.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009018:	4b7e      	ldr	r3, [pc, #504]	@ (8009214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800901a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800901c:	4a7d      	ldr	r2, [pc, #500]	@ (8009214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800901e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009022:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009024:	e01c      	b.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800902a:	3308      	adds	r3, #8
 800902c:	2100      	movs	r1, #0
 800902e:	4618      	mov	r0, r3
 8009030:	f002 f876 	bl	800b120 <RCCEx_PLL2_Config>
 8009034:	4603      	mov	r3, r0
 8009036:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800903a:	e011      	b.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800903c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009040:	3328      	adds	r3, #40	@ 0x28
 8009042:	2100      	movs	r1, #0
 8009044:	4618      	mov	r0, r3
 8009046:	f002 f91d 	bl	800b284 <RCCEx_PLL3_Config>
 800904a:	4603      	mov	r3, r0
 800904c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009050:	e006      	b.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009058:	e002      	b.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800905a:	bf00      	nop
 800905c:	e000      	b.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800905e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009060:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009064:	2b00      	cmp	r3, #0
 8009066:	d10a      	bne.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009068:	4b6a      	ldr	r3, [pc, #424]	@ (8009214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800906a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800906c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009076:	4a67      	ldr	r2, [pc, #412]	@ (8009214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009078:	430b      	orrs	r3, r1
 800907a:	6513      	str	r3, [r2, #80]	@ 0x50
 800907c:	e003      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800907e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009082:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800908a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009092:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009096:	2300      	movs	r3, #0
 8009098:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800909c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80090a0:	460b      	mov	r3, r1
 80090a2:	4313      	orrs	r3, r2
 80090a4:	d053      	beq.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80090a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80090b0:	d033      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80090b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80090b6:	d82c      	bhi.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80090b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80090bc:	d02f      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x502>
 80090be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80090c2:	d826      	bhi.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80090c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80090c8:	d02b      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80090ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80090ce:	d820      	bhi.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80090d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090d4:	d012      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80090d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090da:	d81a      	bhi.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d022      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80090e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090e4:	d115      	bne.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80090e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ea:	3308      	adds	r3, #8
 80090ec:	2101      	movs	r1, #1
 80090ee:	4618      	mov	r0, r3
 80090f0:	f002 f816 	bl	800b120 <RCCEx_PLL2_Config>
 80090f4:	4603      	mov	r3, r0
 80090f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80090fa:	e015      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009100:	3328      	adds	r3, #40	@ 0x28
 8009102:	2101      	movs	r1, #1
 8009104:	4618      	mov	r0, r3
 8009106:	f002 f8bd 	bl	800b284 <RCCEx_PLL3_Config>
 800910a:	4603      	mov	r3, r0
 800910c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009110:	e00a      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009118:	e006      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800911a:	bf00      	nop
 800911c:	e004      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800911e:	bf00      	nop
 8009120:	e002      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009122:	bf00      	nop
 8009124:	e000      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009128:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800912c:	2b00      	cmp	r3, #0
 800912e:	d10a      	bne.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009130:	4b38      	ldr	r3, [pc, #224]	@ (8009214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009134:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800913c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800913e:	4a35      	ldr	r2, [pc, #212]	@ (8009214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009140:	430b      	orrs	r3, r1
 8009142:	6513      	str	r3, [r2, #80]	@ 0x50
 8009144:	e003      	b.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009146:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800914a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800914e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009156:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800915a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800915e:	2300      	movs	r3, #0
 8009160:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009164:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009168:	460b      	mov	r3, r1
 800916a:	4313      	orrs	r3, r2
 800916c:	d058      	beq.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800916e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009172:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009176:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800917a:	d033      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800917c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009180:	d82c      	bhi.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009186:	d02f      	beq.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800918c:	d826      	bhi.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800918e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009192:	d02b      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009194:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009198:	d820      	bhi.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800919a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800919e:	d012      	beq.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80091a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091a4:	d81a      	bhi.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d022      	beq.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80091aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091ae:	d115      	bne.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091b4:	3308      	adds	r3, #8
 80091b6:	2101      	movs	r1, #1
 80091b8:	4618      	mov	r0, r3
 80091ba:	f001 ffb1 	bl	800b120 <RCCEx_PLL2_Config>
 80091be:	4603      	mov	r3, r0
 80091c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80091c4:	e015      	b.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091ca:	3328      	adds	r3, #40	@ 0x28
 80091cc:	2101      	movs	r1, #1
 80091ce:	4618      	mov	r0, r3
 80091d0:	f002 f858 	bl	800b284 <RCCEx_PLL3_Config>
 80091d4:	4603      	mov	r3, r0
 80091d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80091da:	e00a      	b.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80091e2:	e006      	b.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80091e4:	bf00      	nop
 80091e6:	e004      	b.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80091e8:	bf00      	nop
 80091ea:	e002      	b.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80091ec:	bf00      	nop
 80091ee:	e000      	b.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80091f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d10e      	bne.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80091fa:	4b06      	ldr	r3, [pc, #24]	@ (8009214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009206:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800920a:	4a02      	ldr	r2, [pc, #8]	@ (8009214 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800920c:	430b      	orrs	r3, r1
 800920e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009210:	e006      	b.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009212:	bf00      	nop
 8009214:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009218:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800921c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009228:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800922c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009230:	2300      	movs	r3, #0
 8009232:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009236:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800923a:	460b      	mov	r3, r1
 800923c:	4313      	orrs	r3, r2
 800923e:	d037      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009244:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009246:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800924a:	d00e      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800924c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009250:	d816      	bhi.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009252:	2b00      	cmp	r3, #0
 8009254:	d018      	beq.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009256:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800925a:	d111      	bne.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800925c:	4bc4      	ldr	r3, [pc, #784]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800925e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009260:	4ac3      	ldr	r2, [pc, #780]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009262:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009266:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009268:	e00f      	b.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800926a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800926e:	3308      	adds	r3, #8
 8009270:	2101      	movs	r1, #1
 8009272:	4618      	mov	r0, r3
 8009274:	f001 ff54 	bl	800b120 <RCCEx_PLL2_Config>
 8009278:	4603      	mov	r3, r0
 800927a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800927e:	e004      	b.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009286:	e000      	b.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800928a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800928e:	2b00      	cmp	r3, #0
 8009290:	d10a      	bne.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009292:	4bb7      	ldr	r3, [pc, #732]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009296:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800929a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800929e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092a0:	4ab3      	ldr	r2, [pc, #716]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092a2:	430b      	orrs	r3, r1
 80092a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80092a6:	e003      	b.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80092b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80092bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80092c0:	2300      	movs	r3, #0
 80092c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80092c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80092ca:	460b      	mov	r3, r1
 80092cc:	4313      	orrs	r3, r2
 80092ce:	d039      	beq.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80092d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092d6:	2b03      	cmp	r3, #3
 80092d8:	d81c      	bhi.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80092da:	a201      	add	r2, pc, #4	@ (adr r2, 80092e0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80092dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e0:	0800931d 	.word	0x0800931d
 80092e4:	080092f1 	.word	0x080092f1
 80092e8:	080092ff 	.word	0x080092ff
 80092ec:	0800931d 	.word	0x0800931d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092f0:	4b9f      	ldr	r3, [pc, #636]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f4:	4a9e      	ldr	r2, [pc, #632]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80092fc:	e00f      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80092fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009302:	3308      	adds	r3, #8
 8009304:	2102      	movs	r1, #2
 8009306:	4618      	mov	r0, r3
 8009308:	f001 ff0a 	bl	800b120 <RCCEx_PLL2_Config>
 800930c:	4603      	mov	r3, r0
 800930e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009312:	e004      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800931a:	e000      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800931c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800931e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009322:	2b00      	cmp	r3, #0
 8009324:	d10a      	bne.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009326:	4b92      	ldr	r3, [pc, #584]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800932a:	f023 0103 	bic.w	r1, r3, #3
 800932e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009332:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009334:	4a8e      	ldr	r2, [pc, #568]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009336:	430b      	orrs	r3, r1
 8009338:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800933a:	e003      	b.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800933c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009340:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009350:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009354:	2300      	movs	r3, #0
 8009356:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800935a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800935e:	460b      	mov	r3, r1
 8009360:	4313      	orrs	r3, r2
 8009362:	f000 8099 	beq.w	8009498 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009366:	4b83      	ldr	r3, [pc, #524]	@ (8009574 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a82      	ldr	r2, [pc, #520]	@ (8009574 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800936c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009370:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009372:	f7f9 fa87 	bl	8002884 <HAL_GetTick>
 8009376:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800937a:	e00b      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800937c:	f7f9 fa82 	bl	8002884 <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	2b64      	cmp	r3, #100	@ 0x64
 800938a:	d903      	bls.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800938c:	2303      	movs	r3, #3
 800938e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009392:	e005      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009394:	4b77      	ldr	r3, [pc, #476]	@ (8009574 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800939c:	2b00      	cmp	r3, #0
 800939e:	d0ed      	beq.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80093a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d173      	bne.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80093a8:	4b71      	ldr	r3, [pc, #452]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80093ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80093b4:	4053      	eors	r3, r2
 80093b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d015      	beq.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80093be:	4b6c      	ldr	r3, [pc, #432]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093c6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80093ca:	4b69      	ldr	r3, [pc, #420]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093ce:	4a68      	ldr	r2, [pc, #416]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093d4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80093d6:	4b66      	ldr	r3, [pc, #408]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093da:	4a65      	ldr	r2, [pc, #404]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093e0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80093e2:	4a63      	ldr	r2, [pc, #396]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093e8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80093ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80093f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093f6:	d118      	bne.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093f8:	f7f9 fa44 	bl	8002884 <HAL_GetTick>
 80093fc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009400:	e00d      	b.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009402:	f7f9 fa3f 	bl	8002884 <HAL_GetTick>
 8009406:	4602      	mov	r2, r0
 8009408:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800940c:	1ad2      	subs	r2, r2, r3
 800940e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009412:	429a      	cmp	r2, r3
 8009414:	d903      	bls.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800941c:	e005      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800941e:	4b54      	ldr	r3, [pc, #336]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009422:	f003 0302 	and.w	r3, r3, #2
 8009426:	2b00      	cmp	r3, #0
 8009428:	d0eb      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800942a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800942e:	2b00      	cmp	r3, #0
 8009430:	d129      	bne.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009436:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800943a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800943e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009442:	d10e      	bne.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009444:	4b4a      	ldr	r3, [pc, #296]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009446:	691b      	ldr	r3, [r3, #16]
 8009448:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800944c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009450:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009454:	091a      	lsrs	r2, r3, #4
 8009456:	4b48      	ldr	r3, [pc, #288]	@ (8009578 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009458:	4013      	ands	r3, r2
 800945a:	4a45      	ldr	r2, [pc, #276]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800945c:	430b      	orrs	r3, r1
 800945e:	6113      	str	r3, [r2, #16]
 8009460:	e005      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009462:	4b43      	ldr	r3, [pc, #268]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	4a42      	ldr	r2, [pc, #264]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009468:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800946c:	6113      	str	r3, [r2, #16]
 800946e:	4b40      	ldr	r3, [pc, #256]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009470:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009476:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800947a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800947e:	4a3c      	ldr	r2, [pc, #240]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009480:	430b      	orrs	r3, r1
 8009482:	6713      	str	r3, [r2, #112]	@ 0x70
 8009484:	e008      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009486:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800948a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800948e:	e003      	b.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009490:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009494:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800949c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a0:	f002 0301 	and.w	r3, r2, #1
 80094a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80094a8:	2300      	movs	r3, #0
 80094aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80094ae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80094b2:	460b      	mov	r3, r1
 80094b4:	4313      	orrs	r3, r2
 80094b6:	f000 808f 	beq.w	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80094ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80094c0:	2b28      	cmp	r3, #40	@ 0x28
 80094c2:	d871      	bhi.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80094c4:	a201      	add	r2, pc, #4	@ (adr r2, 80094cc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80094c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ca:	bf00      	nop
 80094cc:	080095b1 	.word	0x080095b1
 80094d0:	080095a9 	.word	0x080095a9
 80094d4:	080095a9 	.word	0x080095a9
 80094d8:	080095a9 	.word	0x080095a9
 80094dc:	080095a9 	.word	0x080095a9
 80094e0:	080095a9 	.word	0x080095a9
 80094e4:	080095a9 	.word	0x080095a9
 80094e8:	080095a9 	.word	0x080095a9
 80094ec:	0800957d 	.word	0x0800957d
 80094f0:	080095a9 	.word	0x080095a9
 80094f4:	080095a9 	.word	0x080095a9
 80094f8:	080095a9 	.word	0x080095a9
 80094fc:	080095a9 	.word	0x080095a9
 8009500:	080095a9 	.word	0x080095a9
 8009504:	080095a9 	.word	0x080095a9
 8009508:	080095a9 	.word	0x080095a9
 800950c:	08009593 	.word	0x08009593
 8009510:	080095a9 	.word	0x080095a9
 8009514:	080095a9 	.word	0x080095a9
 8009518:	080095a9 	.word	0x080095a9
 800951c:	080095a9 	.word	0x080095a9
 8009520:	080095a9 	.word	0x080095a9
 8009524:	080095a9 	.word	0x080095a9
 8009528:	080095a9 	.word	0x080095a9
 800952c:	080095b1 	.word	0x080095b1
 8009530:	080095a9 	.word	0x080095a9
 8009534:	080095a9 	.word	0x080095a9
 8009538:	080095a9 	.word	0x080095a9
 800953c:	080095a9 	.word	0x080095a9
 8009540:	080095a9 	.word	0x080095a9
 8009544:	080095a9 	.word	0x080095a9
 8009548:	080095a9 	.word	0x080095a9
 800954c:	080095b1 	.word	0x080095b1
 8009550:	080095a9 	.word	0x080095a9
 8009554:	080095a9 	.word	0x080095a9
 8009558:	080095a9 	.word	0x080095a9
 800955c:	080095a9 	.word	0x080095a9
 8009560:	080095a9 	.word	0x080095a9
 8009564:	080095a9 	.word	0x080095a9
 8009568:	080095a9 	.word	0x080095a9
 800956c:	080095b1 	.word	0x080095b1
 8009570:	58024400 	.word	0x58024400
 8009574:	58024800 	.word	0x58024800
 8009578:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800957c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009580:	3308      	adds	r3, #8
 8009582:	2101      	movs	r1, #1
 8009584:	4618      	mov	r0, r3
 8009586:	f001 fdcb 	bl	800b120 <RCCEx_PLL2_Config>
 800958a:	4603      	mov	r3, r0
 800958c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009590:	e00f      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009596:	3328      	adds	r3, #40	@ 0x28
 8009598:	2101      	movs	r1, #1
 800959a:	4618      	mov	r0, r3
 800959c:	f001 fe72 	bl	800b284 <RCCEx_PLL3_Config>
 80095a0:	4603      	mov	r3, r0
 80095a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80095a6:	e004      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80095ae:	e000      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80095b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10a      	bne.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80095ba:	4bbf      	ldr	r3, [pc, #764]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80095bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095be:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80095c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095c8:	4abb      	ldr	r2, [pc, #748]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80095ca:	430b      	orrs	r3, r1
 80095cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80095ce:	e003      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80095d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e0:	f002 0302 	and.w	r3, r2, #2
 80095e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80095e8:	2300      	movs	r3, #0
 80095ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80095ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80095f2:	460b      	mov	r3, r1
 80095f4:	4313      	orrs	r3, r2
 80095f6:	d041      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80095f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095fe:	2b05      	cmp	r3, #5
 8009600:	d824      	bhi.n	800964c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009602:	a201      	add	r2, pc, #4	@ (adr r2, 8009608 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009608:	08009655 	.word	0x08009655
 800960c:	08009621 	.word	0x08009621
 8009610:	08009637 	.word	0x08009637
 8009614:	08009655 	.word	0x08009655
 8009618:	08009655 	.word	0x08009655
 800961c:	08009655 	.word	0x08009655
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009624:	3308      	adds	r3, #8
 8009626:	2101      	movs	r1, #1
 8009628:	4618      	mov	r0, r3
 800962a:	f001 fd79 	bl	800b120 <RCCEx_PLL2_Config>
 800962e:	4603      	mov	r3, r0
 8009630:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009634:	e00f      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800963a:	3328      	adds	r3, #40	@ 0x28
 800963c:	2101      	movs	r1, #1
 800963e:	4618      	mov	r0, r3
 8009640:	f001 fe20 	bl	800b284 <RCCEx_PLL3_Config>
 8009644:	4603      	mov	r3, r0
 8009646:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800964a:	e004      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009652:	e000      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009656:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10a      	bne.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800965e:	4b96      	ldr	r3, [pc, #600]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009662:	f023 0107 	bic.w	r1, r3, #7
 8009666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800966a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800966c:	4a92      	ldr	r2, [pc, #584]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800966e:	430b      	orrs	r3, r1
 8009670:	6553      	str	r3, [r2, #84]	@ 0x54
 8009672:	e003      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009674:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009678:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800967c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009684:	f002 0304 	and.w	r3, r2, #4
 8009688:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800968c:	2300      	movs	r3, #0
 800968e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009692:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009696:	460b      	mov	r3, r1
 8009698:	4313      	orrs	r3, r2
 800969a:	d044      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800969c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096a4:	2b05      	cmp	r3, #5
 80096a6:	d825      	bhi.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80096a8:	a201      	add	r2, pc, #4	@ (adr r2, 80096b0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80096aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ae:	bf00      	nop
 80096b0:	080096fd 	.word	0x080096fd
 80096b4:	080096c9 	.word	0x080096c9
 80096b8:	080096df 	.word	0x080096df
 80096bc:	080096fd 	.word	0x080096fd
 80096c0:	080096fd 	.word	0x080096fd
 80096c4:	080096fd 	.word	0x080096fd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096cc:	3308      	adds	r3, #8
 80096ce:	2101      	movs	r1, #1
 80096d0:	4618      	mov	r0, r3
 80096d2:	f001 fd25 	bl	800b120 <RCCEx_PLL2_Config>
 80096d6:	4603      	mov	r3, r0
 80096d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80096dc:	e00f      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096e2:	3328      	adds	r3, #40	@ 0x28
 80096e4:	2101      	movs	r1, #1
 80096e6:	4618      	mov	r0, r3
 80096e8:	f001 fdcc 	bl	800b284 <RCCEx_PLL3_Config>
 80096ec:	4603      	mov	r3, r0
 80096ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80096f2:	e004      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80096fa:	e000      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80096fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10b      	bne.n	800971e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009706:	4b6c      	ldr	r3, [pc, #432]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800970a:	f023 0107 	bic.w	r1, r3, #7
 800970e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009716:	4a68      	ldr	r2, [pc, #416]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009718:	430b      	orrs	r3, r1
 800971a:	6593      	str	r3, [r2, #88]	@ 0x58
 800971c:	e003      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800971e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009722:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800972a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972e:	f002 0320 	and.w	r3, r2, #32
 8009732:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009736:	2300      	movs	r3, #0
 8009738:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800973c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009740:	460b      	mov	r3, r1
 8009742:	4313      	orrs	r3, r2
 8009744:	d055      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800974a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800974e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009752:	d033      	beq.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009754:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009758:	d82c      	bhi.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800975a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800975e:	d02f      	beq.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009760:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009764:	d826      	bhi.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009766:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800976a:	d02b      	beq.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800976c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009770:	d820      	bhi.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009772:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009776:	d012      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009778:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800977c:	d81a      	bhi.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800977e:	2b00      	cmp	r3, #0
 8009780:	d022      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009782:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009786:	d115      	bne.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800978c:	3308      	adds	r3, #8
 800978e:	2100      	movs	r1, #0
 8009790:	4618      	mov	r0, r3
 8009792:	f001 fcc5 	bl	800b120 <RCCEx_PLL2_Config>
 8009796:	4603      	mov	r3, r0
 8009798:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800979c:	e015      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800979e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097a2:	3328      	adds	r3, #40	@ 0x28
 80097a4:	2102      	movs	r1, #2
 80097a6:	4618      	mov	r0, r3
 80097a8:	f001 fd6c 	bl	800b284 <RCCEx_PLL3_Config>
 80097ac:	4603      	mov	r3, r0
 80097ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80097b2:	e00a      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80097ba:	e006      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80097bc:	bf00      	nop
 80097be:	e004      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80097c0:	bf00      	nop
 80097c2:	e002      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80097c4:	bf00      	nop
 80097c6:	e000      	b.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80097c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10b      	bne.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80097d2:	4b39      	ldr	r3, [pc, #228]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80097d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097d6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80097da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097e2:	4a35      	ldr	r2, [pc, #212]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80097e4:	430b      	orrs	r3, r1
 80097e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80097e8:	e003      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80097f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80097fe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009802:	2300      	movs	r3, #0
 8009804:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009808:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800980c:	460b      	mov	r3, r1
 800980e:	4313      	orrs	r3, r2
 8009810:	d058      	beq.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009816:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800981a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800981e:	d033      	beq.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8009820:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009824:	d82c      	bhi.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800982a:	d02f      	beq.n	800988c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800982c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009830:	d826      	bhi.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009832:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009836:	d02b      	beq.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009838:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800983c:	d820      	bhi.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800983e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009842:	d012      	beq.n	800986a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009844:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009848:	d81a      	bhi.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800984a:	2b00      	cmp	r3, #0
 800984c:	d022      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800984e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009852:	d115      	bne.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009858:	3308      	adds	r3, #8
 800985a:	2100      	movs	r1, #0
 800985c:	4618      	mov	r0, r3
 800985e:	f001 fc5f 	bl	800b120 <RCCEx_PLL2_Config>
 8009862:	4603      	mov	r3, r0
 8009864:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009868:	e015      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800986a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800986e:	3328      	adds	r3, #40	@ 0x28
 8009870:	2102      	movs	r1, #2
 8009872:	4618      	mov	r0, r3
 8009874:	f001 fd06 	bl	800b284 <RCCEx_PLL3_Config>
 8009878:	4603      	mov	r3, r0
 800987a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800987e:	e00a      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009886:	e006      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009888:	bf00      	nop
 800988a:	e004      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800988c:	bf00      	nop
 800988e:	e002      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009890:	bf00      	nop
 8009892:	e000      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009896:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800989a:	2b00      	cmp	r3, #0
 800989c:	d10e      	bne.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800989e:	4b06      	ldr	r3, [pc, #24]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80098a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098a2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80098a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80098ae:	4a02      	ldr	r2, [pc, #8]	@ (80098b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80098b0:	430b      	orrs	r3, r1
 80098b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80098b4:	e006      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80098b6:	bf00      	nop
 80098b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80098c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098cc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80098d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80098d4:	2300      	movs	r3, #0
 80098d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80098da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80098de:	460b      	mov	r3, r1
 80098e0:	4313      	orrs	r3, r2
 80098e2:	d055      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80098e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80098ec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80098f0:	d033      	beq.n	800995a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80098f2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80098f6:	d82c      	bhi.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80098f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098fc:	d02f      	beq.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80098fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009902:	d826      	bhi.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009904:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009908:	d02b      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800990a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800990e:	d820      	bhi.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009910:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009914:	d012      	beq.n	800993c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8009916:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800991a:	d81a      	bhi.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800991c:	2b00      	cmp	r3, #0
 800991e:	d022      	beq.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009920:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009924:	d115      	bne.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800992a:	3308      	adds	r3, #8
 800992c:	2100      	movs	r1, #0
 800992e:	4618      	mov	r0, r3
 8009930:	f001 fbf6 	bl	800b120 <RCCEx_PLL2_Config>
 8009934:	4603      	mov	r3, r0
 8009936:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800993a:	e015      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800993c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009940:	3328      	adds	r3, #40	@ 0x28
 8009942:	2102      	movs	r1, #2
 8009944:	4618      	mov	r0, r3
 8009946:	f001 fc9d 	bl	800b284 <RCCEx_PLL3_Config>
 800994a:	4603      	mov	r3, r0
 800994c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009950:	e00a      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009958:	e006      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800995a:	bf00      	nop
 800995c:	e004      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800995e:	bf00      	nop
 8009960:	e002      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009962:	bf00      	nop
 8009964:	e000      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009968:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10b      	bne.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009970:	4ba0      	ldr	r3, [pc, #640]	@ (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009974:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800997c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009980:	4a9c      	ldr	r2, [pc, #624]	@ (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009982:	430b      	orrs	r3, r1
 8009984:	6593      	str	r3, [r2, #88]	@ 0x58
 8009986:	e003      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009988:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800998c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009998:	f002 0308 	and.w	r3, r2, #8
 800999c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80099a0:	2300      	movs	r3, #0
 80099a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80099a6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80099aa:	460b      	mov	r3, r1
 80099ac:	4313      	orrs	r3, r2
 80099ae:	d01e      	beq.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80099b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099bc:	d10c      	bne.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80099be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099c2:	3328      	adds	r3, #40	@ 0x28
 80099c4:	2102      	movs	r1, #2
 80099c6:	4618      	mov	r0, r3
 80099c8:	f001 fc5c 	bl	800b284 <RCCEx_PLL3_Config>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d002      	beq.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80099d8:	4b86      	ldr	r3, [pc, #536]	@ (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80099da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099dc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80099e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099e8:	4a82      	ldr	r2, [pc, #520]	@ (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80099ea:	430b      	orrs	r3, r1
 80099ec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80099ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f6:	f002 0310 	and.w	r3, r2, #16
 80099fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80099fe:	2300      	movs	r3, #0
 8009a00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009a04:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009a08:	460b      	mov	r3, r1
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	d01e      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a1a:	d10c      	bne.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a20:	3328      	adds	r3, #40	@ 0x28
 8009a22:	2102      	movs	r1, #2
 8009a24:	4618      	mov	r0, r3
 8009a26:	f001 fc2d 	bl	800b284 <RCCEx_PLL3_Config>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d002      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009a36:	4b6f      	ldr	r3, [pc, #444]	@ (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a46:	4a6b      	ldr	r2, [pc, #428]	@ (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a48:	430b      	orrs	r3, r1
 8009a4a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a54:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009a58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009a5e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009a62:	460b      	mov	r3, r1
 8009a64:	4313      	orrs	r3, r2
 8009a66:	d03e      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009a70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a74:	d022      	beq.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009a76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a7a:	d81b      	bhi.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d003      	beq.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a84:	d00b      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009a86:	e015      	b.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a8c:	3308      	adds	r3, #8
 8009a8e:	2100      	movs	r1, #0
 8009a90:	4618      	mov	r0, r3
 8009a92:	f001 fb45 	bl	800b120 <RCCEx_PLL2_Config>
 8009a96:	4603      	mov	r3, r0
 8009a98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009a9c:	e00f      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aa2:	3328      	adds	r3, #40	@ 0x28
 8009aa4:	2102      	movs	r1, #2
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f001 fbec 	bl	800b284 <RCCEx_PLL3_Config>
 8009aac:	4603      	mov	r3, r0
 8009aae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009ab2:	e004      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009aba:	e000      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009abe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d10b      	bne.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009ac6:	4b4b      	ldr	r3, [pc, #300]	@ (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ad2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009ad6:	4a47      	ldr	r2, [pc, #284]	@ (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ad8:	430b      	orrs	r3, r1
 8009ada:	6593      	str	r3, [r2, #88]	@ 0x58
 8009adc:	e003      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ade:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ae2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009af2:	673b      	str	r3, [r7, #112]	@ 0x70
 8009af4:	2300      	movs	r3, #0
 8009af6:	677b      	str	r3, [r7, #116]	@ 0x74
 8009af8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009afc:	460b      	mov	r3, r1
 8009afe:	4313      	orrs	r3, r2
 8009b00:	d03b      	beq.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b0e:	d01f      	beq.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009b10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b14:	d818      	bhi.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009b16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b1a:	d003      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009b1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009b20:	d007      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009b22:	e011      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b24:	4b33      	ldr	r3, [pc, #204]	@ (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b28:	4a32      	ldr	r2, [pc, #200]	@ (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009b30:	e00f      	b.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b36:	3328      	adds	r3, #40	@ 0x28
 8009b38:	2101      	movs	r1, #1
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f001 fba2 	bl	800b284 <RCCEx_PLL3_Config>
 8009b40:	4603      	mov	r3, r0
 8009b42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009b46:	e004      	b.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b4e:	e000      	b.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d10b      	bne.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009b5a:	4b26      	ldr	r3, [pc, #152]	@ (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b5e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b6a:	4a22      	ldr	r2, [pc, #136]	@ (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b6c:	430b      	orrs	r3, r1
 8009b6e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b70:	e003      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b82:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009b86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b88:	2300      	movs	r3, #0
 8009b8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009b8c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009b90:	460b      	mov	r3, r1
 8009b92:	4313      	orrs	r3, r2
 8009b94:	d034      	beq.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d003      	beq.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ba4:	d007      	beq.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009ba6:	e011      	b.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ba8:	4b12      	ldr	r3, [pc, #72]	@ (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bac:	4a11      	ldr	r2, [pc, #68]	@ (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009bb4:	e00e      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bba:	3308      	adds	r3, #8
 8009bbc:	2102      	movs	r1, #2
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f001 faae 	bl	800b120 <RCCEx_PLL2_Config>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009bca:	e003      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d10d      	bne.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009bdc:	4b05      	ldr	r3, [pc, #20]	@ (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009be0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bea:	4a02      	ldr	r2, [pc, #8]	@ (8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bec:	430b      	orrs	r3, r1
 8009bee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009bf0:	e006      	b.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009bf2:	bf00      	nop
 8009bf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009bfc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c08:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009c0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c0e:	2300      	movs	r3, #0
 8009c10:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c12:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009c16:	460b      	mov	r3, r1
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	d00c      	beq.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c20:	3328      	adds	r3, #40	@ 0x28
 8009c22:	2102      	movs	r1, #2
 8009c24:	4618      	mov	r0, r3
 8009c26:	f001 fb2d 	bl	800b284 <RCCEx_PLL3_Config>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d002      	beq.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009c42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c44:	2300      	movs	r3, #0
 8009c46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c48:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	d036      	beq.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c5c:	d018      	beq.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009c5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c62:	d811      	bhi.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009c64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c68:	d014      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009c6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c6e:	d80b      	bhi.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d011      	beq.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009c74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c78:	d106      	bne.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c7a:	4bb7      	ldr	r3, [pc, #732]	@ (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c7e:	4ab6      	ldr	r2, [pc, #728]	@ (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009c86:	e008      	b.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c8e:	e004      	b.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009c90:	bf00      	nop
 8009c92:	e002      	b.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009c94:	bf00      	nop
 8009c96:	e000      	b.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10a      	bne.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009ca2:	4bad      	ldr	r3, [pc, #692]	@ (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ca6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009cb0:	4aa9      	ldr	r2, [pc, #676]	@ (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009cb2:	430b      	orrs	r3, r1
 8009cb4:	6553      	str	r3, [r2, #84]	@ 0x54
 8009cb6:	e003      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009cbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009ccc:	653b      	str	r3, [r7, #80]	@ 0x50
 8009cce:	2300      	movs	r3, #0
 8009cd0:	657b      	str	r3, [r7, #84]	@ 0x54
 8009cd2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	d009      	beq.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009cdc:	4b9e      	ldr	r3, [pc, #632]	@ (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009cde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ce0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cea:	4a9b      	ldr	r2, [pc, #620]	@ (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009cec:	430b      	orrs	r3, r1
 8009cee:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cfe:	2300      	movs	r3, #0
 8009d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d02:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009d06:	460b      	mov	r3, r1
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	d009      	beq.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009d0c:	4b92      	ldr	r3, [pc, #584]	@ (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d10:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d1a:	4a8f      	ldr	r2, [pc, #572]	@ (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d1c:	430b      	orrs	r3, r1
 8009d1e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d28:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009d2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d2e:	2300      	movs	r3, #0
 8009d30:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d32:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009d36:	460b      	mov	r3, r1
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	d00e      	beq.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009d3c:	4b86      	ldr	r3, [pc, #536]	@ (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d3e:	691b      	ldr	r3, [r3, #16]
 8009d40:	4a85      	ldr	r2, [pc, #532]	@ (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d42:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009d46:	6113      	str	r3, [r2, #16]
 8009d48:	4b83      	ldr	r3, [pc, #524]	@ (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d4a:	6919      	ldr	r1, [r3, #16]
 8009d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009d54:	4a80      	ldr	r2, [pc, #512]	@ (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d56:	430b      	orrs	r3, r1
 8009d58:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d62:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009d66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d68:	2300      	movs	r3, #0
 8009d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d6c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009d70:	460b      	mov	r3, r1
 8009d72:	4313      	orrs	r3, r2
 8009d74:	d009      	beq.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009d76:	4b78      	ldr	r3, [pc, #480]	@ (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d7a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d84:	4a74      	ldr	r2, [pc, #464]	@ (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d86:	430b      	orrs	r3, r1
 8009d88:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d92:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009d96:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d98:	2300      	movs	r3, #0
 8009d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d9c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009da0:	460b      	mov	r3, r1
 8009da2:	4313      	orrs	r3, r2
 8009da4:	d00a      	beq.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009da6:	4b6c      	ldr	r3, [pc, #432]	@ (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009daa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009db6:	4a68      	ldr	r2, [pc, #416]	@ (8009f58 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009db8:	430b      	orrs	r3, r1
 8009dba:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009dc8:	f003 0301 	and.w	r3, r3, #1
 8009dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009dce:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	d011      	beq.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ddc:	3308      	adds	r3, #8
 8009dde:	2100      	movs	r1, #0
 8009de0:	4618      	mov	r0, r3
 8009de2:	f001 f99d 	bl	800b120 <RCCEx_PLL2_Config>
 8009de6:	4603      	mov	r3, r0
 8009de8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009dec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d003      	beq.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009df4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009df8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e04:	2100      	movs	r1, #0
 8009e06:	6239      	str	r1, [r7, #32]
 8009e08:	f003 0302 	and.w	r3, r3, #2
 8009e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e0e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009e12:	460b      	mov	r3, r1
 8009e14:	4313      	orrs	r3, r2
 8009e16:	d011      	beq.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e1c:	3308      	adds	r3, #8
 8009e1e:	2101      	movs	r1, #1
 8009e20:	4618      	mov	r0, r3
 8009e22:	f001 f97d 	bl	800b120 <RCCEx_PLL2_Config>
 8009e26:	4603      	mov	r3, r0
 8009e28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009e2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d003      	beq.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e44:	2100      	movs	r1, #0
 8009e46:	61b9      	str	r1, [r7, #24]
 8009e48:	f003 0304 	and.w	r3, r3, #4
 8009e4c:	61fb      	str	r3, [r7, #28]
 8009e4e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009e52:	460b      	mov	r3, r1
 8009e54:	4313      	orrs	r3, r2
 8009e56:	d011      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e5c:	3308      	adds	r3, #8
 8009e5e:	2102      	movs	r1, #2
 8009e60:	4618      	mov	r0, r3
 8009e62:	f001 f95d 	bl	800b120 <RCCEx_PLL2_Config>
 8009e66:	4603      	mov	r3, r0
 8009e68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009e6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d003      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e84:	2100      	movs	r1, #0
 8009e86:	6139      	str	r1, [r7, #16]
 8009e88:	f003 0308 	and.w	r3, r3, #8
 8009e8c:	617b      	str	r3, [r7, #20]
 8009e8e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009e92:	460b      	mov	r3, r1
 8009e94:	4313      	orrs	r3, r2
 8009e96:	d011      	beq.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e9c:	3328      	adds	r3, #40	@ 0x28
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f001 f9ef 	bl	800b284 <RCCEx_PLL3_Config>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8009eac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d003      	beq.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009eb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	60b9      	str	r1, [r7, #8]
 8009ec8:	f003 0310 	and.w	r3, r3, #16
 8009ecc:	60fb      	str	r3, [r7, #12]
 8009ece:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	d011      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009edc:	3328      	adds	r3, #40	@ 0x28
 8009ede:	2101      	movs	r1, #1
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f001 f9cf 	bl	800b284 <RCCEx_PLL3_Config>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009eec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d003      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ef4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ef8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f04:	2100      	movs	r1, #0
 8009f06:	6039      	str	r1, [r7, #0]
 8009f08:	f003 0320 	and.w	r3, r3, #32
 8009f0c:	607b      	str	r3, [r7, #4]
 8009f0e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009f12:	460b      	mov	r3, r1
 8009f14:	4313      	orrs	r3, r2
 8009f16:	d011      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f1c:	3328      	adds	r3, #40	@ 0x28
 8009f1e:	2102      	movs	r1, #2
 8009f20:	4618      	mov	r0, r3
 8009f22:	f001 f9af 	bl	800b284 <RCCEx_PLL3_Config>
 8009f26:	4603      	mov	r3, r0
 8009f28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009f2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d003      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8009f3c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d101      	bne.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	e000      	b.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8009f50:	46bd      	mov	sp, r7
 8009f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f56:	bf00      	nop
 8009f58:	58024400 	.word	0x58024400

08009f5c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b090      	sub	sp, #64	@ 0x40
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009f66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f6a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009f6e:	430b      	orrs	r3, r1
 8009f70:	f040 8094 	bne.w	800a09c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009f74:	4b9b      	ldr	r3, [pc, #620]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f78:	f003 0307 	and.w	r3, r3, #7
 8009f7c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f80:	2b04      	cmp	r3, #4
 8009f82:	f200 8087 	bhi.w	800a094 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009f86:	a201      	add	r2, pc, #4	@ (adr r2, 8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8c:	08009fa1 	.word	0x08009fa1
 8009f90:	08009fc9 	.word	0x08009fc9
 8009f94:	08009ff1 	.word	0x08009ff1
 8009f98:	0800a08d 	.word	0x0800a08d
 8009f9c:	0800a019 	.word	0x0800a019
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009fa0:	4b90      	ldr	r3, [pc, #576]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fa8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fac:	d108      	bne.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009fae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f000 ff62 	bl	800ae7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fbc:	f000 bc93 	b.w	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fc4:	f000 bc8f 	b.w	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009fc8:	4b86      	ldr	r3, [pc, #536]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009fd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009fd4:	d108      	bne.n	8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fd6:	f107 0318 	add.w	r3, r7, #24
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 fca6 	bl	800a92c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fe4:	f000 bc7f 	b.w	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fec:	f000 bc7b 	b.w	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ff0:	4b7c      	ldr	r3, [pc, #496]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ff8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ffc:	d108      	bne.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ffe:	f107 030c 	add.w	r3, r7, #12
 800a002:	4618      	mov	r0, r3
 800a004:	f000 fde6 	bl	800abd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a00c:	f000 bc6b 	b.w	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a010:	2300      	movs	r3, #0
 800a012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a014:	f000 bc67 	b.w	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a018:	4b72      	ldr	r3, [pc, #456]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a01a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a01c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a020:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a022:	4b70      	ldr	r3, [pc, #448]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f003 0304 	and.w	r3, r3, #4
 800a02a:	2b04      	cmp	r3, #4
 800a02c:	d10c      	bne.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a02e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a030:	2b00      	cmp	r3, #0
 800a032:	d109      	bne.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a034:	4b6b      	ldr	r3, [pc, #428]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	08db      	lsrs	r3, r3, #3
 800a03a:	f003 0303 	and.w	r3, r3, #3
 800a03e:	4a6a      	ldr	r2, [pc, #424]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a040:	fa22 f303 	lsr.w	r3, r2, r3
 800a044:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a046:	e01f      	b.n	800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a048:	4b66      	ldr	r3, [pc, #408]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a050:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a054:	d106      	bne.n	800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a058:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a05c:	d102      	bne.n	800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a05e:	4b63      	ldr	r3, [pc, #396]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a060:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a062:	e011      	b.n	800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a064:	4b5f      	ldr	r3, [pc, #380]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a06c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a070:	d106      	bne.n	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a074:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a078:	d102      	bne.n	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a07a:	4b5d      	ldr	r3, [pc, #372]	@ (800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a07c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a07e:	e003      	b.n	800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a080:	2300      	movs	r3, #0
 800a082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a084:	f000 bc2f 	b.w	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a088:	f000 bc2d 	b.w	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a08c:	4b59      	ldr	r3, [pc, #356]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a08e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a090:	f000 bc29 	b.w	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a094:	2300      	movs	r3, #0
 800a096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a098:	f000 bc25 	b.w	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a09c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0a0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a0a4:	430b      	orrs	r3, r1
 800a0a6:	f040 80a7 	bne.w	800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a0aa:	4b4e      	ldr	r3, [pc, #312]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0ae:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a0b2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a0ba:	d054      	beq.n	800a166 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a0c2:	f200 808b 	bhi.w	800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a0cc:	f000 8083 	beq.w	800a1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a0d6:	f200 8081 	bhi.w	800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a0e0:	d02f      	beq.n	800a142 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a0e8:	d878      	bhi.n	800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d004      	beq.n	800a0fa <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a0f6:	d012      	beq.n	800a11e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a0f8:	e070      	b.n	800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a0fa:	4b3a      	ldr	r3, [pc, #232]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a102:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a106:	d107      	bne.n	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a108:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a10c:	4618      	mov	r0, r3
 800a10e:	f000 feb5 	bl	800ae7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a116:	e3e6      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a118:	2300      	movs	r3, #0
 800a11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a11c:	e3e3      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a11e:	4b31      	ldr	r3, [pc, #196]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a126:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a12a:	d107      	bne.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a12c:	f107 0318 	add.w	r3, r7, #24
 800a130:	4618      	mov	r0, r3
 800a132:	f000 fbfb 	bl	800a92c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a13a:	e3d4      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a13c:	2300      	movs	r3, #0
 800a13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a140:	e3d1      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a142:	4b28      	ldr	r3, [pc, #160]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a14a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a14e:	d107      	bne.n	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a150:	f107 030c 	add.w	r3, r7, #12
 800a154:	4618      	mov	r0, r3
 800a156:	f000 fd3d 	bl	800abd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a15e:	e3c2      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a160:	2300      	movs	r3, #0
 800a162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a164:	e3bf      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a166:	4b1f      	ldr	r3, [pc, #124]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a16a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a16e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a170:	4b1c      	ldr	r3, [pc, #112]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f003 0304 	and.w	r3, r3, #4
 800a178:	2b04      	cmp	r3, #4
 800a17a:	d10c      	bne.n	800a196 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a17c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d109      	bne.n	800a196 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a182:	4b18      	ldr	r3, [pc, #96]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	08db      	lsrs	r3, r3, #3
 800a188:	f003 0303 	and.w	r3, r3, #3
 800a18c:	4a16      	ldr	r2, [pc, #88]	@ (800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a18e:	fa22 f303 	lsr.w	r3, r2, r3
 800a192:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a194:	e01e      	b.n	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a196:	4b13      	ldr	r3, [pc, #76]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a19e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1a2:	d106      	bne.n	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a1a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1aa:	d102      	bne.n	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a1ac:	4b0f      	ldr	r3, [pc, #60]	@ (800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1b0:	e010      	b.n	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a1b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1be:	d106      	bne.n	800a1ce <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a1c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1c6:	d102      	bne.n	800a1ce <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a1c8:	4b09      	ldr	r3, [pc, #36]	@ (800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1cc:	e002      	b.n	800a1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a1d2:	e388      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a1d4:	e387      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a1d6:	4b07      	ldr	r3, [pc, #28]	@ (800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1da:	e384      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1e0:	e381      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a1e2:	bf00      	nop
 800a1e4:	58024400 	.word	0x58024400
 800a1e8:	03d09000 	.word	0x03d09000
 800a1ec:	003d0900 	.word	0x003d0900
 800a1f0:	017d7840 	.word	0x017d7840
 800a1f4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a1f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1fc:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a200:	430b      	orrs	r3, r1
 800a202:	f040 809c 	bne.w	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a206:	4b9e      	ldr	r3, [pc, #632]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a20a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a20e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a212:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a216:	d054      	beq.n	800a2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a21a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a21e:	f200 808b 	bhi.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a224:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a228:	f000 8083 	beq.w	800a332 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a22e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a232:	f200 8081 	bhi.w	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a238:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a23c:	d02f      	beq.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a240:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a244:	d878      	bhi.n	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d004      	beq.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a24e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a252:	d012      	beq.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a254:	e070      	b.n	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a256:	4b8a      	ldr	r3, [pc, #552]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a25e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a262:	d107      	bne.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a264:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a268:	4618      	mov	r0, r3
 800a26a:	f000 fe07 	bl	800ae7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a26e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a272:	e338      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a274:	2300      	movs	r3, #0
 800a276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a278:	e335      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a27a:	4b81      	ldr	r3, [pc, #516]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a282:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a286:	d107      	bne.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a288:	f107 0318 	add.w	r3, r7, #24
 800a28c:	4618      	mov	r0, r3
 800a28e:	f000 fb4d 	bl	800a92c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a296:	e326      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a298:	2300      	movs	r3, #0
 800a29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a29c:	e323      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a29e:	4b78      	ldr	r3, [pc, #480]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2aa:	d107      	bne.n	800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2ac:	f107 030c 	add.w	r3, r7, #12
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f000 fc8f 	bl	800abd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2ba:	e314      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2c0:	e311      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a2c2:	4b6f      	ldr	r3, [pc, #444]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a2c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a2ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a2cc:	4b6c      	ldr	r3, [pc, #432]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 0304 	and.w	r3, r3, #4
 800a2d4:	2b04      	cmp	r3, #4
 800a2d6:	d10c      	bne.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a2d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d109      	bne.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2de:	4b68      	ldr	r3, [pc, #416]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	08db      	lsrs	r3, r3, #3
 800a2e4:	f003 0303 	and.w	r3, r3, #3
 800a2e8:	4a66      	ldr	r2, [pc, #408]	@ (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a2ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2f0:	e01e      	b.n	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a2f2:	4b63      	ldr	r3, [pc, #396]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2fe:	d106      	bne.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a302:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a306:	d102      	bne.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a308:	4b5f      	ldr	r3, [pc, #380]	@ (800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a30c:	e010      	b.n	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a30e:	4b5c      	ldr	r3, [pc, #368]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a316:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a31a:	d106      	bne.n	800a32a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a31c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a31e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a322:	d102      	bne.n	800a32a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a324:	4b59      	ldr	r3, [pc, #356]	@ (800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a328:	e002      	b.n	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a32a:	2300      	movs	r3, #0
 800a32c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a32e:	e2da      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a330:	e2d9      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a332:	4b57      	ldr	r3, [pc, #348]	@ (800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a336:	e2d6      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a338:	2300      	movs	r3, #0
 800a33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a33c:	e2d3      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a33e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a342:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a346:	430b      	orrs	r3, r1
 800a348:	f040 80a7 	bne.w	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a34c:	4b4c      	ldr	r3, [pc, #304]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a34e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a350:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a354:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a358:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a35c:	d055      	beq.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a360:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a364:	f200 8096 	bhi.w	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a36a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a36e:	f000 8084 	beq.w	800a47a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a374:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a378:	f200 808c 	bhi.w	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a37e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a382:	d030      	beq.n	800a3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a38a:	f200 8083 	bhi.w	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a390:	2b00      	cmp	r3, #0
 800a392:	d004      	beq.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800a394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a396:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a39a:	d012      	beq.n	800a3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a39c:	e07a      	b.n	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a39e:	4b38      	ldr	r3, [pc, #224]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a3aa:	d107      	bne.n	800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f000 fd63 	bl	800ae7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3ba:	e294      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3c0:	e291      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3c2:	4b2f      	ldr	r3, [pc, #188]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3ce:	d107      	bne.n	800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3d0:	f107 0318 	add.w	r3, r7, #24
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f000 faa9 	bl	800a92c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3de:	e282      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3e4:	e27f      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a3e6:	4b26      	ldr	r3, [pc, #152]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a3ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3f2:	d107      	bne.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3f4:	f107 030c 	add.w	r3, r7, #12
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f000 fbeb 	bl	800abd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a402:	e270      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a404:	2300      	movs	r3, #0
 800a406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a408:	e26d      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a40a:	4b1d      	ldr	r3, [pc, #116]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a40c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a40e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a412:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a414:	4b1a      	ldr	r3, [pc, #104]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f003 0304 	and.w	r3, r3, #4
 800a41c:	2b04      	cmp	r3, #4
 800a41e:	d10c      	bne.n	800a43a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800a420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a422:	2b00      	cmp	r3, #0
 800a424:	d109      	bne.n	800a43a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a426:	4b16      	ldr	r3, [pc, #88]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	08db      	lsrs	r3, r3, #3
 800a42c:	f003 0303 	and.w	r3, r3, #3
 800a430:	4a14      	ldr	r2, [pc, #80]	@ (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a432:	fa22 f303 	lsr.w	r3, r2, r3
 800a436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a438:	e01e      	b.n	800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a43a:	4b11      	ldr	r3, [pc, #68]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a446:	d106      	bne.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a44a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a44e:	d102      	bne.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a450:	4b0d      	ldr	r3, [pc, #52]	@ (800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a454:	e010      	b.n	800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a456:	4b0a      	ldr	r3, [pc, #40]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a45e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a462:	d106      	bne.n	800a472 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800a464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a466:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a46a:	d102      	bne.n	800a472 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a46c:	4b07      	ldr	r3, [pc, #28]	@ (800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a470:	e002      	b.n	800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a472:	2300      	movs	r3, #0
 800a474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a476:	e236      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a478:	e235      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a47a:	4b05      	ldr	r3, [pc, #20]	@ (800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a47c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a47e:	e232      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a480:	58024400 	.word	0x58024400
 800a484:	03d09000 	.word	0x03d09000
 800a488:	003d0900 	.word	0x003d0900
 800a48c:	017d7840 	.word	0x017d7840
 800a490:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a494:	2300      	movs	r3, #0
 800a496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a498:	e225      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a49a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a49e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a4a2:	430b      	orrs	r3, r1
 800a4a4:	f040 8085 	bne.w	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a4a8:	4b9c      	ldr	r3, [pc, #624]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a4aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4ac:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a4b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a4b8:	d06b      	beq.n	800a592 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a4c0:	d874      	bhi.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a4c8:	d056      	beq.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a4ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a4d0:	d86c      	bhi.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a4d8:	d03b      	beq.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a4da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a4e0:	d864      	bhi.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4e8:	d021      	beq.n	800a52e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4f0:	d85c      	bhi.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a4f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d004      	beq.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4fe:	d004      	beq.n	800a50a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a500:	e054      	b.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a502:	f7fe fb5f 	bl	8008bc4 <HAL_RCC_GetPCLK1Freq>
 800a506:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a508:	e1ed      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a50a:	4b84      	ldr	r3, [pc, #528]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a512:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a516:	d107      	bne.n	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a518:	f107 0318 	add.w	r3, r7, #24
 800a51c:	4618      	mov	r0, r3
 800a51e:	f000 fa05 	bl	800a92c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a526:	e1de      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a528:	2300      	movs	r3, #0
 800a52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a52c:	e1db      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a52e:	4b7b      	ldr	r3, [pc, #492]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a536:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a53a:	d107      	bne.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a53c:	f107 030c 	add.w	r3, r7, #12
 800a540:	4618      	mov	r0, r3
 800a542:	f000 fb47 	bl	800abd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a54a:	e1cc      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a54c:	2300      	movs	r3, #0
 800a54e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a550:	e1c9      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a552:	4b72      	ldr	r3, [pc, #456]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f003 0304 	and.w	r3, r3, #4
 800a55a:	2b04      	cmp	r3, #4
 800a55c:	d109      	bne.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a55e:	4b6f      	ldr	r3, [pc, #444]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	08db      	lsrs	r3, r3, #3
 800a564:	f003 0303 	and.w	r3, r3, #3
 800a568:	4a6d      	ldr	r2, [pc, #436]	@ (800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a56a:	fa22 f303 	lsr.w	r3, r2, r3
 800a56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a570:	e1b9      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a572:	2300      	movs	r3, #0
 800a574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a576:	e1b6      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a578:	4b68      	ldr	r3, [pc, #416]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a584:	d102      	bne.n	800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a586:	4b67      	ldr	r3, [pc, #412]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a58a:	e1ac      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a58c:	2300      	movs	r3, #0
 800a58e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a590:	e1a9      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a592:	4b62      	ldr	r3, [pc, #392]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a59a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a59e:	d102      	bne.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a5a0:	4b61      	ldr	r3, [pc, #388]	@ (800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a5a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5a4:	e19f      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5aa:	e19c      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5b0:	e199      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a5b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5b6:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a5ba:	430b      	orrs	r3, r1
 800a5bc:	d173      	bne.n	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a5be:	4b57      	ldr	r3, [pc, #348]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a5c6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5ce:	d02f      	beq.n	800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5d6:	d863      	bhi.n	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d004      	beq.n	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a5de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5e4:	d012      	beq.n	800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a5e6:	e05b      	b.n	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5e8:	4b4c      	ldr	r3, [pc, #304]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5f4:	d107      	bne.n	800a606 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5f6:	f107 0318 	add.w	r3, r7, #24
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f000 f996 	bl	800a92c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a604:	e16f      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a606:	2300      	movs	r3, #0
 800a608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a60a:	e16c      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a60c:	4b43      	ldr	r3, [pc, #268]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a614:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a618:	d107      	bne.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a61a:	f107 030c 	add.w	r3, r7, #12
 800a61e:	4618      	mov	r0, r3
 800a620:	f000 fad8 	bl	800abd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a628:	e15d      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a62a:	2300      	movs	r3, #0
 800a62c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a62e:	e15a      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a630:	4b3a      	ldr	r3, [pc, #232]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a634:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a638:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a63a:	4b38      	ldr	r3, [pc, #224]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f003 0304 	and.w	r3, r3, #4
 800a642:	2b04      	cmp	r3, #4
 800a644:	d10c      	bne.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d109      	bne.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a64c:	4b33      	ldr	r3, [pc, #204]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	08db      	lsrs	r3, r3, #3
 800a652:	f003 0303 	and.w	r3, r3, #3
 800a656:	4a32      	ldr	r2, [pc, #200]	@ (800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a658:	fa22 f303 	lsr.w	r3, r2, r3
 800a65c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a65e:	e01e      	b.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a660:	4b2e      	ldr	r3, [pc, #184]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a668:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a66c:	d106      	bne.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a66e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a670:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a674:	d102      	bne.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a676:	4b2b      	ldr	r3, [pc, #172]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a678:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a67a:	e010      	b.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a67c:	4b27      	ldr	r3, [pc, #156]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a684:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a688:	d106      	bne.n	800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a68a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a68c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a690:	d102      	bne.n	800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a692:	4b25      	ldr	r3, [pc, #148]	@ (800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a694:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a696:	e002      	b.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a698:	2300      	movs	r3, #0
 800a69a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a69c:	e123      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a69e:	e122      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6a4:	e11f      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a6a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6aa:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a6ae:	430b      	orrs	r3, r1
 800a6b0:	d13c      	bne.n	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a6b2:	4b1a      	ldr	r3, [pc, #104]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a6ba:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a6bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d004      	beq.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6c8:	d012      	beq.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a6ca:	e023      	b.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6cc:	4b13      	ldr	r3, [pc, #76]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6d8:	d107      	bne.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f000 fbcc 	bl	800ae7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6e8:	e0fd      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6ee:	e0fa      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6fc:	d107      	bne.n	800a70e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6fe:	f107 0318 	add.w	r3, r7, #24
 800a702:	4618      	mov	r0, r3
 800a704:	f000 f912 	bl	800a92c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a708:	6a3b      	ldr	r3, [r7, #32]
 800a70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a70c:	e0eb      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a70e:	2300      	movs	r3, #0
 800a710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a712:	e0e8      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a714:	2300      	movs	r3, #0
 800a716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a718:	e0e5      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a71a:	bf00      	nop
 800a71c:	58024400 	.word	0x58024400
 800a720:	03d09000 	.word	0x03d09000
 800a724:	003d0900 	.word	0x003d0900
 800a728:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a72c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a730:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a734:	430b      	orrs	r3, r1
 800a736:	f040 8085 	bne.w	800a844 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a73a:	4b6d      	ldr	r3, [pc, #436]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a73c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a73e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a742:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a746:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a74a:	d06b      	beq.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a74e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a752:	d874      	bhi.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a75a:	d056      	beq.n	800a80a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a75e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a762:	d86c      	bhi.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a766:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a76a:	d03b      	beq.n	800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a76e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a772:	d864      	bhi.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a77a:	d021      	beq.n	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a77c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a77e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a782:	d85c      	bhi.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a786:	2b00      	cmp	r3, #0
 800a788:	d004      	beq.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800a78a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a78c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a790:	d004      	beq.n	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a792:	e054      	b.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a794:	f000 f8b4 	bl	800a900 <HAL_RCCEx_GetD3PCLK1Freq>
 800a798:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a79a:	e0a4      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a79c:	4b54      	ldr	r3, [pc, #336]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7a8:	d107      	bne.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7aa:	f107 0318 	add.w	r3, r7, #24
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f000 f8bc 	bl	800a92c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7b8:	e095      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7be:	e092      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7c0:	4b4b      	ldr	r3, [pc, #300]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7cc:	d107      	bne.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7ce:	f107 030c 	add.w	r3, r7, #12
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f000 f9fe 	bl	800abd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7dc:	e083      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7e2:	e080      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a7e4:	4b42      	ldr	r3, [pc, #264]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f003 0304 	and.w	r3, r3, #4
 800a7ec:	2b04      	cmp	r3, #4
 800a7ee:	d109      	bne.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7f0:	4b3f      	ldr	r3, [pc, #252]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	08db      	lsrs	r3, r3, #3
 800a7f6:	f003 0303 	and.w	r3, r3, #3
 800a7fa:	4a3e      	ldr	r2, [pc, #248]	@ (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a7fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a802:	e070      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a804:	2300      	movs	r3, #0
 800a806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a808:	e06d      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a80a:	4b39      	ldr	r3, [pc, #228]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a812:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a816:	d102      	bne.n	800a81e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a818:	4b37      	ldr	r3, [pc, #220]	@ (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a81a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a81c:	e063      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a81e:	2300      	movs	r3, #0
 800a820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a822:	e060      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a824:	4b32      	ldr	r3, [pc, #200]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a82c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a830:	d102      	bne.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800a832:	4b32      	ldr	r3, [pc, #200]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a836:	e056      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a838:	2300      	movs	r3, #0
 800a83a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a83c:	e053      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a83e:	2300      	movs	r3, #0
 800a840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a842:	e050      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a844:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a848:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a84c:	430b      	orrs	r3, r1
 800a84e:	d148      	bne.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a850:	4b27      	ldr	r3, [pc, #156]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a854:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a858:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a85c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a860:	d02a      	beq.n	800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a864:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a868:	d838      	bhi.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a86a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d004      	beq.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a872:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a876:	d00d      	beq.n	800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a878:	e030      	b.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a87a:	4b1d      	ldr	r3, [pc, #116]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a882:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a886:	d102      	bne.n	800a88e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800a888:	4b1c      	ldr	r3, [pc, #112]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a88a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a88c:	e02b      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a88e:	2300      	movs	r3, #0
 800a890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a892:	e028      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a894:	4b16      	ldr	r3, [pc, #88]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a89c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8a0:	d107      	bne.n	800a8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f000 fae8 	bl	800ae7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8b0:	e019      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8b6:	e016      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8b8:	4b0d      	ldr	r3, [pc, #52]	@ (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8c4:	d107      	bne.n	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8c6:	f107 0318 	add.w	r3, r7, #24
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f000 f82e 	bl	800a92c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8d4:	e007      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8da:	e004      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8e0:	e001      	b.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a8e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3740      	adds	r7, #64	@ 0x40
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	58024400 	.word	0x58024400
 800a8f4:	03d09000 	.word	0x03d09000
 800a8f8:	003d0900 	.word	0x003d0900
 800a8fc:	017d7840 	.word	0x017d7840

0800a900 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a904:	f7fe f92e 	bl	8008b64 <HAL_RCC_GetHCLKFreq>
 800a908:	4602      	mov	r2, r0
 800a90a:	4b06      	ldr	r3, [pc, #24]	@ (800a924 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a90c:	6a1b      	ldr	r3, [r3, #32]
 800a90e:	091b      	lsrs	r3, r3, #4
 800a910:	f003 0307 	and.w	r3, r3, #7
 800a914:	4904      	ldr	r1, [pc, #16]	@ (800a928 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a916:	5ccb      	ldrb	r3, [r1, r3]
 800a918:	f003 031f 	and.w	r3, r3, #31
 800a91c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a920:	4618      	mov	r0, r3
 800a922:	bd80      	pop	{r7, pc}
 800a924:	58024400 	.word	0x58024400
 800a928:	0800fbc8 	.word	0x0800fbc8

0800a92c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b089      	sub	sp, #36	@ 0x24
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a934:	4ba1      	ldr	r3, [pc, #644]	@ (800abbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a938:	f003 0303 	and.w	r3, r3, #3
 800a93c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a93e:	4b9f      	ldr	r3, [pc, #636]	@ (800abbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a942:	0b1b      	lsrs	r3, r3, #12
 800a944:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a948:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a94a:	4b9c      	ldr	r3, [pc, #624]	@ (800abbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a94c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a94e:	091b      	lsrs	r3, r3, #4
 800a950:	f003 0301 	and.w	r3, r3, #1
 800a954:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a956:	4b99      	ldr	r3, [pc, #612]	@ (800abbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a95a:	08db      	lsrs	r3, r3, #3
 800a95c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a960:	693a      	ldr	r2, [r7, #16]
 800a962:	fb02 f303 	mul.w	r3, r2, r3
 800a966:	ee07 3a90 	vmov	s15, r3
 800a96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a96e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	2b00      	cmp	r3, #0
 800a976:	f000 8111 	beq.w	800ab9c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	f000 8083 	beq.w	800aa88 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	2b02      	cmp	r3, #2
 800a986:	f200 80a1 	bhi.w	800aacc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d003      	beq.n	800a998 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	2b01      	cmp	r3, #1
 800a994:	d056      	beq.n	800aa44 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a996:	e099      	b.n	800aacc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a998:	4b88      	ldr	r3, [pc, #544]	@ (800abbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f003 0320 	and.w	r3, r3, #32
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d02d      	beq.n	800aa00 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9a4:	4b85      	ldr	r3, [pc, #532]	@ (800abbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	08db      	lsrs	r3, r3, #3
 800a9aa:	f003 0303 	and.w	r3, r3, #3
 800a9ae:	4a84      	ldr	r2, [pc, #528]	@ (800abc0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a9b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	ee07 3a90 	vmov	s15, r3
 800a9bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	ee07 3a90 	vmov	s15, r3
 800a9c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ce:	4b7b      	ldr	r3, [pc, #492]	@ (800abbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9d6:	ee07 3a90 	vmov	s15, r3
 800a9da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9de:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800abc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a9fe:	e087      	b.n	800ab10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	ee07 3a90 	vmov	s15, r3
 800aa06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa0a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800abc8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aa0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa12:	4b6a      	ldr	r3, [pc, #424]	@ (800abbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa1a:	ee07 3a90 	vmov	s15, r3
 800aa1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa22:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa26:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800abc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa42:	e065      	b.n	800ab10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	ee07 3a90 	vmov	s15, r3
 800aa4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa4e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800abcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa56:	4b59      	ldr	r3, [pc, #356]	@ (800abbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa5e:	ee07 3a90 	vmov	s15, r3
 800aa62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa66:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa6a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800abc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa86:	e043      	b.n	800ab10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	ee07 3a90 	vmov	s15, r3
 800aa8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa92:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800abd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aa96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa9a:	4b48      	ldr	r3, [pc, #288]	@ (800abbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaa2:	ee07 3a90 	vmov	s15, r3
 800aaa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800abc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aabe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaca:	e021      	b.n	800ab10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	ee07 3a90 	vmov	s15, r3
 800aad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aad6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800abcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aade:	4b37      	ldr	r3, [pc, #220]	@ (800abbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aae6:	ee07 3a90 	vmov	s15, r3
 800aaea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaee:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaf2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800abc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aaf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aafa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aafe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ab10:	4b2a      	ldr	r3, [pc, #168]	@ (800abbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab14:	0a5b      	lsrs	r3, r3, #9
 800ab16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab1a:	ee07 3a90 	vmov	s15, r3
 800ab1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab26:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab2a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab36:	ee17 2a90 	vmov	r2, s15
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ab3e:	4b1f      	ldr	r3, [pc, #124]	@ (800abbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab42:	0c1b      	lsrs	r3, r3, #16
 800ab44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab48:	ee07 3a90 	vmov	s15, r3
 800ab4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab54:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab58:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab64:	ee17 2a90 	vmov	r2, s15
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ab6c:	4b13      	ldr	r3, [pc, #76]	@ (800abbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab70:	0e1b      	lsrs	r3, r3, #24
 800ab72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab76:	ee07 3a90 	vmov	s15, r3
 800ab7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab82:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab86:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab92:	ee17 2a90 	vmov	r2, s15
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ab9a:	e008      	b.n	800abae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2200      	movs	r2, #0
 800aba6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	609a      	str	r2, [r3, #8]
}
 800abae:	bf00      	nop
 800abb0:	3724      	adds	r7, #36	@ 0x24
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	58024400 	.word	0x58024400
 800abc0:	03d09000 	.word	0x03d09000
 800abc4:	46000000 	.word	0x46000000
 800abc8:	4c742400 	.word	0x4c742400
 800abcc:	4a742400 	.word	0x4a742400
 800abd0:	4bbebc20 	.word	0x4bbebc20

0800abd4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b089      	sub	sp, #36	@ 0x24
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abdc:	4ba1      	ldr	r3, [pc, #644]	@ (800ae64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abe0:	f003 0303 	and.w	r3, r3, #3
 800abe4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800abe6:	4b9f      	ldr	r3, [pc, #636]	@ (800ae64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abea:	0d1b      	lsrs	r3, r3, #20
 800abec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800abf0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800abf2:	4b9c      	ldr	r3, [pc, #624]	@ (800ae64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abf6:	0a1b      	lsrs	r3, r3, #8
 800abf8:	f003 0301 	and.w	r3, r3, #1
 800abfc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800abfe:	4b99      	ldr	r3, [pc, #612]	@ (800ae64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac02:	08db      	lsrs	r3, r3, #3
 800ac04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac08:	693a      	ldr	r2, [r7, #16]
 800ac0a:	fb02 f303 	mul.w	r3, r2, r3
 800ac0e:	ee07 3a90 	vmov	s15, r3
 800ac12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f000 8111 	beq.w	800ae44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	f000 8083 	beq.w	800ad30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	f200 80a1 	bhi.w	800ad74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d003      	beq.n	800ac40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d056      	beq.n	800acec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ac3e:	e099      	b.n	800ad74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac40:	4b88      	ldr	r3, [pc, #544]	@ (800ae64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f003 0320 	and.w	r3, r3, #32
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d02d      	beq.n	800aca8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac4c:	4b85      	ldr	r3, [pc, #532]	@ (800ae64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	08db      	lsrs	r3, r3, #3
 800ac52:	f003 0303 	and.w	r3, r3, #3
 800ac56:	4a84      	ldr	r2, [pc, #528]	@ (800ae68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ac58:	fa22 f303 	lsr.w	r3, r2, r3
 800ac5c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	ee07 3a90 	vmov	s15, r3
 800ac64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	ee07 3a90 	vmov	s15, r3
 800ac6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac76:	4b7b      	ldr	r3, [pc, #492]	@ (800ae64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac7e:	ee07 3a90 	vmov	s15, r3
 800ac82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac86:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac8a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ae6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aca2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aca6:	e087      	b.n	800adb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	ee07 3a90 	vmov	s15, r3
 800acae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acb2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ae70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800acb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acba:	4b6a      	ldr	r3, [pc, #424]	@ (800ae64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acc2:	ee07 3a90 	vmov	s15, r3
 800acc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acca:	ed97 6a03 	vldr	s12, [r7, #12]
 800acce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ae6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ace2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ace6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acea:	e065      	b.n	800adb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	ee07 3a90 	vmov	s15, r3
 800acf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ae74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800acfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acfe:	4b59      	ldr	r3, [pc, #356]	@ (800ae64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad06:	ee07 3a90 	vmov	s15, r3
 800ad0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad12:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ae6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad2e:	e043      	b.n	800adb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	ee07 3a90 	vmov	s15, r3
 800ad36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad3a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ae78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ad3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad42:	4b48      	ldr	r3, [pc, #288]	@ (800ae64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad4a:	ee07 3a90 	vmov	s15, r3
 800ad4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad56:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ae6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad72:	e021      	b.n	800adb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	ee07 3a90 	vmov	s15, r3
 800ad7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad7e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ae74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad86:	4b37      	ldr	r3, [pc, #220]	@ (800ae64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad8e:	ee07 3a90 	vmov	s15, r3
 800ad92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad9a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ae6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ada2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ada6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adb6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800adb8:	4b2a      	ldr	r3, [pc, #168]	@ (800ae64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adbc:	0a5b      	lsrs	r3, r3, #9
 800adbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adc2:	ee07 3a90 	vmov	s15, r3
 800adc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800adce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800add2:	edd7 6a07 	vldr	s13, [r7, #28]
 800add6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adde:	ee17 2a90 	vmov	r2, s15
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ade6:	4b1f      	ldr	r3, [pc, #124]	@ (800ae64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ade8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adea:	0c1b      	lsrs	r3, r3, #16
 800adec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adf0:	ee07 3a90 	vmov	s15, r3
 800adf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adf8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800adfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae00:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae0c:	ee17 2a90 	vmov	r2, s15
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ae14:	4b13      	ldr	r3, [pc, #76]	@ (800ae64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae18:	0e1b      	lsrs	r3, r3, #24
 800ae1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae1e:	ee07 3a90 	vmov	s15, r3
 800ae22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae3a:	ee17 2a90 	vmov	r2, s15
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ae42:	e008      	b.n	800ae56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	609a      	str	r2, [r3, #8]
}
 800ae56:	bf00      	nop
 800ae58:	3724      	adds	r7, #36	@ 0x24
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	58024400 	.word	0x58024400
 800ae68:	03d09000 	.word	0x03d09000
 800ae6c:	46000000 	.word	0x46000000
 800ae70:	4c742400 	.word	0x4c742400
 800ae74:	4a742400 	.word	0x4a742400
 800ae78:	4bbebc20 	.word	0x4bbebc20

0800ae7c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b089      	sub	sp, #36	@ 0x24
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae84:	4ba0      	ldr	r3, [pc, #640]	@ (800b108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae88:	f003 0303 	and.w	r3, r3, #3
 800ae8c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ae8e:	4b9e      	ldr	r3, [pc, #632]	@ (800b108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae92:	091b      	lsrs	r3, r3, #4
 800ae94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae98:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ae9a:	4b9b      	ldr	r3, [pc, #620]	@ (800b108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae9e:	f003 0301 	and.w	r3, r3, #1
 800aea2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aea4:	4b98      	ldr	r3, [pc, #608]	@ (800b108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aea8:	08db      	lsrs	r3, r3, #3
 800aeaa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aeae:	693a      	ldr	r2, [r7, #16]
 800aeb0:	fb02 f303 	mul.w	r3, r2, r3
 800aeb4:	ee07 3a90 	vmov	s15, r3
 800aeb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aebc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f000 8111 	beq.w	800b0ea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	2b02      	cmp	r3, #2
 800aecc:	f000 8083 	beq.w	800afd6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800aed0:	69bb      	ldr	r3, [r7, #24]
 800aed2:	2b02      	cmp	r3, #2
 800aed4:	f200 80a1 	bhi.w	800b01a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d003      	beq.n	800aee6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d056      	beq.n	800af92 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800aee4:	e099      	b.n	800b01a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aee6:	4b88      	ldr	r3, [pc, #544]	@ (800b108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f003 0320 	and.w	r3, r3, #32
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d02d      	beq.n	800af4e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aef2:	4b85      	ldr	r3, [pc, #532]	@ (800b108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	08db      	lsrs	r3, r3, #3
 800aef8:	f003 0303 	and.w	r3, r3, #3
 800aefc:	4a83      	ldr	r2, [pc, #524]	@ (800b10c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800aefe:	fa22 f303 	lsr.w	r3, r2, r3
 800af02:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	ee07 3a90 	vmov	s15, r3
 800af0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	ee07 3a90 	vmov	s15, r3
 800af14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af1c:	4b7a      	ldr	r3, [pc, #488]	@ (800b108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af24:	ee07 3a90 	vmov	s15, r3
 800af28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800af30:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b110 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af48:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800af4c:	e087      	b.n	800b05e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	ee07 3a90 	vmov	s15, r3
 800af54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af58:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b114 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800af5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af60:	4b69      	ldr	r3, [pc, #420]	@ (800b108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af68:	ee07 3a90 	vmov	s15, r3
 800af6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af70:	ed97 6a03 	vldr	s12, [r7, #12]
 800af74:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b110 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af90:	e065      	b.n	800b05e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	ee07 3a90 	vmov	s15, r3
 800af98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af9c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b118 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800afa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afa4:	4b58      	ldr	r3, [pc, #352]	@ (800b108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afac:	ee07 3a90 	vmov	s15, r3
 800afb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afb4:	ed97 6a03 	vldr	s12, [r7, #12]
 800afb8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b110 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800afbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afd4:	e043      	b.n	800b05e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	ee07 3a90 	vmov	s15, r3
 800afdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b11c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800afe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afe8:	4b47      	ldr	r3, [pc, #284]	@ (800b108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff0:	ee07 3a90 	vmov	s15, r3
 800aff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aff8:	ed97 6a03 	vldr	s12, [r7, #12]
 800affc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b110 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b000:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b008:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b00c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b010:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b014:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b018:	e021      	b.n	800b05e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	ee07 3a90 	vmov	s15, r3
 800b020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b024:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b114 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b028:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b02c:	4b36      	ldr	r3, [pc, #216]	@ (800b108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b02e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b034:	ee07 3a90 	vmov	s15, r3
 800b038:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b03c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b040:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b110 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b044:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b048:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b04c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b050:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b054:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b058:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b05c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b05e:	4b2a      	ldr	r3, [pc, #168]	@ (800b108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b062:	0a5b      	lsrs	r3, r3, #9
 800b064:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b068:	ee07 3a90 	vmov	s15, r3
 800b06c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b070:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b074:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b078:	edd7 6a07 	vldr	s13, [r7, #28]
 800b07c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b084:	ee17 2a90 	vmov	r2, s15
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b08c:	4b1e      	ldr	r3, [pc, #120]	@ (800b108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b08e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b090:	0c1b      	lsrs	r3, r3, #16
 800b092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b096:	ee07 3a90 	vmov	s15, r3
 800b09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b09e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0b2:	ee17 2a90 	vmov	r2, s15
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b0ba:	4b13      	ldr	r3, [pc, #76]	@ (800b108 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0be:	0e1b      	lsrs	r3, r3, #24
 800b0c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0c4:	ee07 3a90 	vmov	s15, r3
 800b0c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0e0:	ee17 2a90 	vmov	r2, s15
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b0e8:	e008      	b.n	800b0fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	609a      	str	r2, [r3, #8]
}
 800b0fc:	bf00      	nop
 800b0fe:	3724      	adds	r7, #36	@ 0x24
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr
 800b108:	58024400 	.word	0x58024400
 800b10c:	03d09000 	.word	0x03d09000
 800b110:	46000000 	.word	0x46000000
 800b114:	4c742400 	.word	0x4c742400
 800b118:	4a742400 	.word	0x4a742400
 800b11c:	4bbebc20 	.word	0x4bbebc20

0800b120 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b12a:	2300      	movs	r3, #0
 800b12c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b12e:	4b53      	ldr	r3, [pc, #332]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b132:	f003 0303 	and.w	r3, r3, #3
 800b136:	2b03      	cmp	r3, #3
 800b138:	d101      	bne.n	800b13e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b13a:	2301      	movs	r3, #1
 800b13c:	e099      	b.n	800b272 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b13e:	4b4f      	ldr	r3, [pc, #316]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4a4e      	ldr	r2, [pc, #312]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b144:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b148:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b14a:	f7f7 fb9b 	bl	8002884 <HAL_GetTick>
 800b14e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b150:	e008      	b.n	800b164 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b152:	f7f7 fb97 	bl	8002884 <HAL_GetTick>
 800b156:	4602      	mov	r2, r0
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	1ad3      	subs	r3, r2, r3
 800b15c:	2b02      	cmp	r3, #2
 800b15e:	d901      	bls.n	800b164 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b160:	2303      	movs	r3, #3
 800b162:	e086      	b.n	800b272 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b164:	4b45      	ldr	r3, [pc, #276]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d1f0      	bne.n	800b152 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b170:	4b42      	ldr	r3, [pc, #264]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b174:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	031b      	lsls	r3, r3, #12
 800b17e:	493f      	ldr	r1, [pc, #252]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b180:	4313      	orrs	r3, r2
 800b182:	628b      	str	r3, [r1, #40]	@ 0x28
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	3b01      	subs	r3, #1
 800b18a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	689b      	ldr	r3, [r3, #8]
 800b192:	3b01      	subs	r3, #1
 800b194:	025b      	lsls	r3, r3, #9
 800b196:	b29b      	uxth	r3, r3
 800b198:	431a      	orrs	r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	3b01      	subs	r3, #1
 800b1a0:	041b      	lsls	r3, r3, #16
 800b1a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b1a6:	431a      	orrs	r2, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	691b      	ldr	r3, [r3, #16]
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	061b      	lsls	r3, r3, #24
 800b1b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b1b4:	4931      	ldr	r1, [pc, #196]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b1ba:	4b30      	ldr	r3, [pc, #192]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b1bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	695b      	ldr	r3, [r3, #20]
 800b1c6:	492d      	ldr	r1, [pc, #180]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b1cc:	4b2b      	ldr	r3, [pc, #172]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b1ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1d0:	f023 0220 	bic.w	r2, r3, #32
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	699b      	ldr	r3, [r3, #24]
 800b1d8:	4928      	ldr	r1, [pc, #160]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b1de:	4b27      	ldr	r3, [pc, #156]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b1e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1e2:	4a26      	ldr	r2, [pc, #152]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b1e4:	f023 0310 	bic.w	r3, r3, #16
 800b1e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b1ea:	4b24      	ldr	r3, [pc, #144]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b1ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b1ee:	4b24      	ldr	r3, [pc, #144]	@ (800b280 <RCCEx_PLL2_Config+0x160>)
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	69d2      	ldr	r2, [r2, #28]
 800b1f6:	00d2      	lsls	r2, r2, #3
 800b1f8:	4920      	ldr	r1, [pc, #128]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b1fe:	4b1f      	ldr	r3, [pc, #124]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b202:	4a1e      	ldr	r2, [pc, #120]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b204:	f043 0310 	orr.w	r3, r3, #16
 800b208:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d106      	bne.n	800b21e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b210:	4b1a      	ldr	r3, [pc, #104]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b214:	4a19      	ldr	r2, [pc, #100]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b216:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b21a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b21c:	e00f      	b.n	800b23e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	2b01      	cmp	r3, #1
 800b222:	d106      	bne.n	800b232 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b224:	4b15      	ldr	r3, [pc, #84]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b228:	4a14      	ldr	r2, [pc, #80]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b22a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b22e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b230:	e005      	b.n	800b23e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b232:	4b12      	ldr	r3, [pc, #72]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b236:	4a11      	ldr	r2, [pc, #68]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b238:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b23c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b23e:	4b0f      	ldr	r3, [pc, #60]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a0e      	ldr	r2, [pc, #56]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b244:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b24a:	f7f7 fb1b 	bl	8002884 <HAL_GetTick>
 800b24e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b250:	e008      	b.n	800b264 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b252:	f7f7 fb17 	bl	8002884 <HAL_GetTick>
 800b256:	4602      	mov	r2, r0
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	1ad3      	subs	r3, r2, r3
 800b25c:	2b02      	cmp	r3, #2
 800b25e:	d901      	bls.n	800b264 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b260:	2303      	movs	r3, #3
 800b262:	e006      	b.n	800b272 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b264:	4b05      	ldr	r3, [pc, #20]	@ (800b27c <RCCEx_PLL2_Config+0x15c>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d0f0      	beq.n	800b252 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b270:	7bfb      	ldrb	r3, [r7, #15]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	58024400 	.word	0x58024400
 800b280:	ffff0007 	.word	0xffff0007

0800b284 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b28e:	2300      	movs	r3, #0
 800b290:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b292:	4b53      	ldr	r3, [pc, #332]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b296:	f003 0303 	and.w	r3, r3, #3
 800b29a:	2b03      	cmp	r3, #3
 800b29c:	d101      	bne.n	800b2a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e099      	b.n	800b3d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b2a2:	4b4f      	ldr	r3, [pc, #316]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4a4e      	ldr	r2, [pc, #312]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b2a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b2ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2ae:	f7f7 fae9 	bl	8002884 <HAL_GetTick>
 800b2b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b2b4:	e008      	b.n	800b2c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b2b6:	f7f7 fae5 	bl	8002884 <HAL_GetTick>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	1ad3      	subs	r3, r2, r3
 800b2c0:	2b02      	cmp	r3, #2
 800b2c2:	d901      	bls.n	800b2c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b2c4:	2303      	movs	r3, #3
 800b2c6:	e086      	b.n	800b3d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b2c8:	4b45      	ldr	r3, [pc, #276]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d1f0      	bne.n	800b2b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b2d4:	4b42      	ldr	r3, [pc, #264]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b2d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2d8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	051b      	lsls	r3, r3, #20
 800b2e2:	493f      	ldr	r1, [pc, #252]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	628b      	str	r3, [r1, #40]	@ 0x28
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	025b      	lsls	r3, r3, #9
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	431a      	orrs	r2, r3
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	68db      	ldr	r3, [r3, #12]
 800b302:	3b01      	subs	r3, #1
 800b304:	041b      	lsls	r3, r3, #16
 800b306:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b30a:	431a      	orrs	r2, r3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	691b      	ldr	r3, [r3, #16]
 800b310:	3b01      	subs	r3, #1
 800b312:	061b      	lsls	r3, r3, #24
 800b314:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b318:	4931      	ldr	r1, [pc, #196]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b31a:	4313      	orrs	r3, r2
 800b31c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b31e:	4b30      	ldr	r3, [pc, #192]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b322:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	695b      	ldr	r3, [r3, #20]
 800b32a:	492d      	ldr	r1, [pc, #180]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b32c:	4313      	orrs	r3, r2
 800b32e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b330:	4b2b      	ldr	r3, [pc, #172]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b334:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	699b      	ldr	r3, [r3, #24]
 800b33c:	4928      	ldr	r1, [pc, #160]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b33e:	4313      	orrs	r3, r2
 800b340:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b342:	4b27      	ldr	r3, [pc, #156]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b346:	4a26      	ldr	r2, [pc, #152]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b348:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b34c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b34e:	4b24      	ldr	r3, [pc, #144]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b350:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b352:	4b24      	ldr	r3, [pc, #144]	@ (800b3e4 <RCCEx_PLL3_Config+0x160>)
 800b354:	4013      	ands	r3, r2
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	69d2      	ldr	r2, [r2, #28]
 800b35a:	00d2      	lsls	r2, r2, #3
 800b35c:	4920      	ldr	r1, [pc, #128]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b35e:	4313      	orrs	r3, r2
 800b360:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b362:	4b1f      	ldr	r3, [pc, #124]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b366:	4a1e      	ldr	r2, [pc, #120]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b36c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d106      	bne.n	800b382 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b374:	4b1a      	ldr	r3, [pc, #104]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b378:	4a19      	ldr	r2, [pc, #100]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b37a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b37e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b380:	e00f      	b.n	800b3a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	2b01      	cmp	r3, #1
 800b386:	d106      	bne.n	800b396 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b388:	4b15      	ldr	r3, [pc, #84]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b38a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b38c:	4a14      	ldr	r2, [pc, #80]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b38e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b392:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b394:	e005      	b.n	800b3a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b396:	4b12      	ldr	r3, [pc, #72]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b39a:	4a11      	ldr	r2, [pc, #68]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b39c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b3a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b3a2:	4b0f      	ldr	r3, [pc, #60]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4a0e      	ldr	r2, [pc, #56]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b3a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b3ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3ae:	f7f7 fa69 	bl	8002884 <HAL_GetTick>
 800b3b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b3b4:	e008      	b.n	800b3c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b3b6:	f7f7 fa65 	bl	8002884 <HAL_GetTick>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	1ad3      	subs	r3, r2, r3
 800b3c0:	2b02      	cmp	r3, #2
 800b3c2:	d901      	bls.n	800b3c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b3c4:	2303      	movs	r3, #3
 800b3c6:	e006      	b.n	800b3d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b3c8:	4b05      	ldr	r3, [pc, #20]	@ (800b3e0 <RCCEx_PLL3_Config+0x15c>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d0f0      	beq.n	800b3b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3710      	adds	r7, #16
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	58024400 	.word	0x58024400
 800b3e4:	ffff0007 	.word	0xffff0007

0800b3e8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b084      	sub	sp, #16
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d101      	bne.n	800b3fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	e10f      	b.n	800b61a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a87      	ldr	r2, [pc, #540]	@ (800b624 <HAL_SPI_Init+0x23c>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d00f      	beq.n	800b42a <HAL_SPI_Init+0x42>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a86      	ldr	r2, [pc, #536]	@ (800b628 <HAL_SPI_Init+0x240>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d00a      	beq.n	800b42a <HAL_SPI_Init+0x42>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a84      	ldr	r2, [pc, #528]	@ (800b62c <HAL_SPI_Init+0x244>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d005      	beq.n	800b42a <HAL_SPI_Init+0x42>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	2b0f      	cmp	r3, #15
 800b424:	d901      	bls.n	800b42a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	e0f7      	b.n	800b61a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 fe3c 	bl	800c0a8 <SPI_GetPacketSize>
 800b430:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a7b      	ldr	r2, [pc, #492]	@ (800b624 <HAL_SPI_Init+0x23c>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d00c      	beq.n	800b456 <HAL_SPI_Init+0x6e>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a79      	ldr	r2, [pc, #484]	@ (800b628 <HAL_SPI_Init+0x240>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d007      	beq.n	800b456 <HAL_SPI_Init+0x6e>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a78      	ldr	r2, [pc, #480]	@ (800b62c <HAL_SPI_Init+0x244>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d002      	beq.n	800b456 <HAL_SPI_Init+0x6e>
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2b08      	cmp	r3, #8
 800b454:	d811      	bhi.n	800b47a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b45a:	4a72      	ldr	r2, [pc, #456]	@ (800b624 <HAL_SPI_Init+0x23c>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d009      	beq.n	800b474 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4a70      	ldr	r2, [pc, #448]	@ (800b628 <HAL_SPI_Init+0x240>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d004      	beq.n	800b474 <HAL_SPI_Init+0x8c>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4a6f      	ldr	r2, [pc, #444]	@ (800b62c <HAL_SPI_Init+0x244>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d104      	bne.n	800b47e <HAL_SPI_Init+0x96>
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2b10      	cmp	r3, #16
 800b478:	d901      	bls.n	800b47e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b47a:	2301      	movs	r3, #1
 800b47c:	e0cd      	b.n	800b61a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b484:	b2db      	uxtb	r3, r3
 800b486:	2b00      	cmp	r3, #0
 800b488:	d106      	bne.n	800b498 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f7f6 feee 	bl	8002274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2202      	movs	r2, #2
 800b49c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f022 0201 	bic.w	r2, r2, #1
 800b4ae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b4ba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	699b      	ldr	r3, [r3, #24]
 800b4c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b4c4:	d119      	bne.n	800b4fa <HAL_SPI_Init+0x112>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b4ce:	d103      	bne.n	800b4d8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d008      	beq.n	800b4ea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d10c      	bne.n	800b4fa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b4e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4e8:	d107      	bne.n	800b4fa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b4f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b502:	2b00      	cmp	r3, #0
 800b504:	d00f      	beq.n	800b526 <HAL_SPI_Init+0x13e>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	2b06      	cmp	r3, #6
 800b50c:	d90b      	bls.n	800b526 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	430a      	orrs	r2, r1
 800b522:	601a      	str	r2, [r3, #0]
 800b524:	e007      	b.n	800b536 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b534:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	69da      	ldr	r2, [r3, #28]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b53e:	431a      	orrs	r2, r3
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	431a      	orrs	r2, r3
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b548:	ea42 0103 	orr.w	r1, r2, r3
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	68da      	ldr	r2, [r3, #12]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	430a      	orrs	r2, r1
 800b556:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b560:	431a      	orrs	r2, r3
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b566:	431a      	orrs	r2, r3
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	699b      	ldr	r3, [r3, #24]
 800b56c:	431a      	orrs	r2, r3
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	691b      	ldr	r3, [r3, #16]
 800b572:	431a      	orrs	r2, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	695b      	ldr	r3, [r3, #20]
 800b578:	431a      	orrs	r2, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a1b      	ldr	r3, [r3, #32]
 800b57e:	431a      	orrs	r2, r3
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	431a      	orrs	r2, r3
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b58a:	431a      	orrs	r2, r3
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	431a      	orrs	r2, r3
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b596:	ea42 0103 	orr.w	r1, r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	430a      	orrs	r2, r1
 800b5a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d113      	bne.n	800b5d6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b5c0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b5d4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f022 0201 	bic.w	r2, r2, #1
 800b5e4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d00a      	beq.n	800b608 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	430a      	orrs	r2, r1
 800b606:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2201      	movs	r2, #1
 800b614:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	40013000 	.word	0x40013000
 800b628:	40003800 	.word	0x40003800
 800b62c:	40003c00 	.word	0x40003c00

0800b630 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b088      	sub	sp, #32
 800b634:	af02      	add	r7, sp, #8
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	603b      	str	r3, [r7, #0]
 800b63c:	4613      	mov	r3, r2
 800b63e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	3320      	adds	r3, #32
 800b646:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b648:	f7f7 f91c 	bl	8002884 <HAL_GetTick>
 800b64c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b654:	b2db      	uxtb	r3, r3
 800b656:	2b01      	cmp	r3, #1
 800b658:	d001      	beq.n	800b65e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800b65a:	2302      	movs	r3, #2
 800b65c:	e1d1      	b.n	800ba02 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d002      	beq.n	800b66a <HAL_SPI_Transmit+0x3a>
 800b664:	88fb      	ldrh	r3, [r7, #6]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d101      	bne.n	800b66e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800b66a:	2301      	movs	r3, #1
 800b66c:	e1c9      	b.n	800ba02 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b674:	2b01      	cmp	r3, #1
 800b676:	d101      	bne.n	800b67c <HAL_SPI_Transmit+0x4c>
 800b678:	2302      	movs	r3, #2
 800b67a:	e1c2      	b.n	800ba02 <HAL_SPI_Transmit+0x3d2>
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2201      	movs	r2, #1
 800b680:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2203      	movs	r2, #3
 800b688:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2200      	movs	r2, #0
 800b690:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	68ba      	ldr	r2, [r7, #8]
 800b698:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	88fa      	ldrh	r2, [r7, #6]
 800b69e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	88fa      	ldrh	r2, [r7, #6]
 800b6a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b6d4:	d108      	bne.n	800b6e8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b6e4:	601a      	str	r2, [r3, #0]
 800b6e6:	e009      	b.n	800b6fc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	68db      	ldr	r3, [r3, #12]
 800b6ee:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b6fa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	685a      	ldr	r2, [r3, #4]
 800b702:	4b96      	ldr	r3, [pc, #600]	@ (800b95c <HAL_SPI_Transmit+0x32c>)
 800b704:	4013      	ands	r3, r2
 800b706:	88f9      	ldrh	r1, [r7, #6]
 800b708:	68fa      	ldr	r2, [r7, #12]
 800b70a:	6812      	ldr	r2, [r2, #0]
 800b70c:	430b      	orrs	r3, r1
 800b70e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f042 0201 	orr.w	r2, r2, #1
 800b71e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b728:	d107      	bne.n	800b73a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b738:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	2b0f      	cmp	r3, #15
 800b740:	d947      	bls.n	800b7d2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b742:	e03f      	b.n	800b7c4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	695b      	ldr	r3, [r3, #20]
 800b74a:	f003 0302 	and.w	r3, r3, #2
 800b74e:	2b02      	cmp	r3, #2
 800b750:	d114      	bne.n	800b77c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	6812      	ldr	r2, [r2, #0]
 800b75c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b762:	1d1a      	adds	r2, r3, #4
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b76e:	b29b      	uxth	r3, r3
 800b770:	3b01      	subs	r3, #1
 800b772:	b29a      	uxth	r2, r3
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b77a:	e023      	b.n	800b7c4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b77c:	f7f7 f882 	bl	8002884 <HAL_GetTick>
 800b780:	4602      	mov	r2, r0
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	1ad3      	subs	r3, r2, r3
 800b786:	683a      	ldr	r2, [r7, #0]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d803      	bhi.n	800b794 <HAL_SPI_Transmit+0x164>
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b792:	d102      	bne.n	800b79a <HAL_SPI_Transmit+0x16a>
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d114      	bne.n	800b7c4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f000 fbb6 	bl	800bf0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b7a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b7c0:	2303      	movs	r3, #3
 800b7c2:	e11e      	b.n	800ba02 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1b9      	bne.n	800b744 <HAL_SPI_Transmit+0x114>
 800b7d0:	e0f1      	b.n	800b9b6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	2b07      	cmp	r3, #7
 800b7d8:	f240 80e6 	bls.w	800b9a8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b7dc:	e05d      	b.n	800b89a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	695b      	ldr	r3, [r3, #20]
 800b7e4:	f003 0302 	and.w	r3, r3, #2
 800b7e8:	2b02      	cmp	r3, #2
 800b7ea:	d132      	bne.n	800b852 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d918      	bls.n	800b82a <HAL_SPI_Transmit+0x1fa>
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d014      	beq.n	800b82a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	6812      	ldr	r2, [r2, #0]
 800b80a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b810:	1d1a      	adds	r2, r3, #4
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	3b02      	subs	r3, #2
 800b820:	b29a      	uxth	r2, r3
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b828:	e037      	b.n	800b89a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b82e:	881a      	ldrh	r2, [r3, #0]
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b838:	1c9a      	adds	r2, r3, #2
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b844:	b29b      	uxth	r3, r3
 800b846:	3b01      	subs	r3, #1
 800b848:	b29a      	uxth	r2, r3
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b850:	e023      	b.n	800b89a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b852:	f7f7 f817 	bl	8002884 <HAL_GetTick>
 800b856:	4602      	mov	r2, r0
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	1ad3      	subs	r3, r2, r3
 800b85c:	683a      	ldr	r2, [r7, #0]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d803      	bhi.n	800b86a <HAL_SPI_Transmit+0x23a>
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b868:	d102      	bne.n	800b870 <HAL_SPI_Transmit+0x240>
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d114      	bne.n	800b89a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	f000 fb4b 	bl	800bf0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b87c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2201      	movs	r2, #1
 800b88a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2200      	movs	r2, #0
 800b892:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b896:	2303      	movs	r3, #3
 800b898:	e0b3      	b.n	800ba02 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d19b      	bne.n	800b7de <HAL_SPI_Transmit+0x1ae>
 800b8a6:	e086      	b.n	800b9b6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	695b      	ldr	r3, [r3, #20]
 800b8ae:	f003 0302 	and.w	r3, r3, #2
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	d154      	bne.n	800b960 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	2b03      	cmp	r3, #3
 800b8c0:	d918      	bls.n	800b8f4 <HAL_SPI_Transmit+0x2c4>
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8c6:	2b40      	cmp	r3, #64	@ 0x40
 800b8c8:	d914      	bls.n	800b8f4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	6812      	ldr	r2, [r2, #0]
 800b8d4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8da:	1d1a      	adds	r2, r3, #4
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	3b04      	subs	r3, #4
 800b8ea:	b29a      	uxth	r2, r3
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b8f2:	e059      	b.n	800b9a8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d917      	bls.n	800b930 <HAL_SPI_Transmit+0x300>
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b904:	2b00      	cmp	r3, #0
 800b906:	d013      	beq.n	800b930 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b90c:	881a      	ldrh	r2, [r3, #0]
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b916:	1c9a      	adds	r2, r3, #2
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b922:	b29b      	uxth	r3, r3
 800b924:	3b02      	subs	r3, #2
 800b926:	b29a      	uxth	r2, r3
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b92e:	e03b      	b.n	800b9a8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	3320      	adds	r3, #32
 800b93a:	7812      	ldrb	r2, [r2, #0]
 800b93c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b942:	1c5a      	adds	r2, r3, #1
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b94e:	b29b      	uxth	r3, r3
 800b950:	3b01      	subs	r3, #1
 800b952:	b29a      	uxth	r2, r3
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b95a:	e025      	b.n	800b9a8 <HAL_SPI_Transmit+0x378>
 800b95c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b960:	f7f6 ff90 	bl	8002884 <HAL_GetTick>
 800b964:	4602      	mov	r2, r0
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	1ad3      	subs	r3, r2, r3
 800b96a:	683a      	ldr	r2, [r7, #0]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d803      	bhi.n	800b978 <HAL_SPI_Transmit+0x348>
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b976:	d102      	bne.n	800b97e <HAL_SPI_Transmit+0x34e>
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d114      	bne.n	800b9a8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f000 fac4 	bl	800bf0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b98a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2201      	movs	r2, #1
 800b998:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b9a4:	2303      	movs	r3, #3
 800b9a6:	e02c      	b.n	800ba02 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f47f af79 	bne.w	800b8a8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	9300      	str	r3, [sp, #0]
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	2108      	movs	r1, #8
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	f000 fb43 	bl	800c04c <SPI_WaitOnFlagUntilTimeout>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d007      	beq.n	800b9dc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9d2:	f043 0220 	orr.w	r2, r3, #32
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b9dc:	68f8      	ldr	r0, [r7, #12]
 800b9de:	f000 fa95 	bl	800bf0c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d001      	beq.n	800ba00 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	e000      	b.n	800ba02 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800ba00:	2300      	movs	r3, #0
  }
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3718      	adds	r7, #24
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop

0800ba0c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b088      	sub	sp, #32
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	603b      	str	r3, [r7, #0]
 800ba18:	4613      	mov	r3, r2
 800ba1a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba20:	095b      	lsrs	r3, r3, #5
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	3301      	adds	r3, #1
 800ba26:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	3330      	adds	r3, #48	@ 0x30
 800ba2e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ba30:	f7f6 ff28 	bl	8002884 <HAL_GetTick>
 800ba34:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d001      	beq.n	800ba46 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800ba42:	2302      	movs	r3, #2
 800ba44:	e250      	b.n	800bee8 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d002      	beq.n	800ba52 <HAL_SPI_Receive+0x46>
 800ba4c:	88fb      	ldrh	r3, [r7, #6]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d101      	bne.n	800ba56 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800ba52:	2301      	movs	r3, #1
 800ba54:	e248      	b.n	800bee8 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d101      	bne.n	800ba64 <HAL_SPI_Receive+0x58>
 800ba60:	2302      	movs	r3, #2
 800ba62:	e241      	b.n	800bee8 <HAL_SPI_Receive+0x4dc>
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2201      	movs	r2, #1
 800ba68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2204      	movs	r2, #4
 800ba70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2200      	movs	r2, #0
 800ba78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	68ba      	ldr	r2, [r7, #8]
 800ba80:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	88fa      	ldrh	r2, [r7, #6]
 800ba86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	88fa      	ldrh	r2, [r7, #6]
 800ba8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2200      	movs	r2, #0
 800ba96:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2200      	movs	r2, #0
 800bab2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	689b      	ldr	r3, [r3, #8]
 800bab8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800babc:	d108      	bne.n	800bad0 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bacc:	601a      	str	r2, [r3, #0]
 800bace:	e009      	b.n	800bae4 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800bae2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	685a      	ldr	r2, [r3, #4]
 800baea:	4b95      	ldr	r3, [pc, #596]	@ (800bd40 <HAL_SPI_Receive+0x334>)
 800baec:	4013      	ands	r3, r2
 800baee:	88f9      	ldrh	r1, [r7, #6]
 800baf0:	68fa      	ldr	r2, [r7, #12]
 800baf2:	6812      	ldr	r2, [r2, #0]
 800baf4:	430b      	orrs	r3, r1
 800baf6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	681a      	ldr	r2, [r3, #0]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f042 0201 	orr.w	r2, r2, #1
 800bb06:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bb10:	d107      	bne.n	800bb22 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bb20:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	2b0f      	cmp	r3, #15
 800bb28:	d96c      	bls.n	800bc04 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bb2a:	e064      	b.n	800bbf6 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	695b      	ldr	r3, [r3, #20]
 800bb32:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	695b      	ldr	r3, [r3, #20]
 800bb3a:	f003 0301 	and.w	r3, r3, #1
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d114      	bne.n	800bb6c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb4a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bb4c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb52:	1d1a      	adds	r2, r3, #4
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	3b01      	subs	r3, #1
 800bb62:	b29a      	uxth	r2, r3
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bb6a:	e044      	b.n	800bbf6 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	8bfa      	ldrh	r2, [r7, #30]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d919      	bls.n	800bbae <HAL_SPI_Receive+0x1a2>
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d014      	beq.n	800bbae <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681a      	ldr	r2, [r3, #0]
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb8c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bb8e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb94:	1d1a      	adds	r2, r3, #4
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	3b01      	subs	r3, #1
 800bba4:	b29a      	uxth	r2, r3
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bbac:	e023      	b.n	800bbf6 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbae:	f7f6 fe69 	bl	8002884 <HAL_GetTick>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	1ad3      	subs	r3, r2, r3
 800bbb8:	683a      	ldr	r2, [r7, #0]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d803      	bhi.n	800bbc6 <HAL_SPI_Receive+0x1ba>
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbc4:	d102      	bne.n	800bbcc <HAL_SPI_Receive+0x1c0>
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d114      	bne.n	800bbf6 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bbcc:	68f8      	ldr	r0, [r7, #12]
 800bbce:	f000 f99d 	bl	800bf0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bbd8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2200      	movs	r2, #0
 800bbee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bbf2:	2303      	movs	r3, #3
 800bbf4:	e178      	b.n	800bee8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d194      	bne.n	800bb2c <HAL_SPI_Receive+0x120>
 800bc02:	e15e      	b.n	800bec2 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	2b07      	cmp	r3, #7
 800bc0a:	f240 8153 	bls.w	800beb4 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bc0e:	e08f      	b.n	800bd30 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	695b      	ldr	r3, [r3, #20]
 800bc16:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	695b      	ldr	r3, [r3, #20]
 800bc1e:	f003 0301 	and.w	r3, r3, #1
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d114      	bne.n	800bc50 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc2a:	69ba      	ldr	r2, [r7, #24]
 800bc2c:	8812      	ldrh	r2, [r2, #0]
 800bc2e:	b292      	uxth	r2, r2
 800bc30:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc36:	1c9a      	adds	r2, r3, #2
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	3b01      	subs	r3, #1
 800bc46:	b29a      	uxth	r2, r3
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bc4e:	e06f      	b.n	800bd30 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	8bfa      	ldrh	r2, [r7, #30]
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d924      	bls.n	800bca8 <HAL_SPI_Receive+0x29c>
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d01f      	beq.n	800bca8 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc6c:	69ba      	ldr	r2, [r7, #24]
 800bc6e:	8812      	ldrh	r2, [r2, #0]
 800bc70:	b292      	uxth	r2, r2
 800bc72:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc78:	1c9a      	adds	r2, r3, #2
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc82:	69ba      	ldr	r2, [r7, #24]
 800bc84:	8812      	ldrh	r2, [r2, #0]
 800bc86:	b292      	uxth	r2, r2
 800bc88:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc8e:	1c9a      	adds	r2, r3, #2
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	3b02      	subs	r3, #2
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bca6:	e043      	b.n	800bd30 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d119      	bne.n	800bce8 <HAL_SPI_Receive+0x2dc>
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d014      	beq.n	800bce8 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcc2:	69ba      	ldr	r2, [r7, #24]
 800bcc4:	8812      	ldrh	r2, [r2, #0]
 800bcc6:	b292      	uxth	r2, r2
 800bcc8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcce:	1c9a      	adds	r2, r3, #2
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	b29a      	uxth	r2, r3
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bce6:	e023      	b.n	800bd30 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bce8:	f7f6 fdcc 	bl	8002884 <HAL_GetTick>
 800bcec:	4602      	mov	r2, r0
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	1ad3      	subs	r3, r2, r3
 800bcf2:	683a      	ldr	r2, [r7, #0]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d803      	bhi.n	800bd00 <HAL_SPI_Receive+0x2f4>
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcfe:	d102      	bne.n	800bd06 <HAL_SPI_Receive+0x2fa>
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d114      	bne.n	800bd30 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bd06:	68f8      	ldr	r0, [r7, #12]
 800bd08:	f000 f900 	bl	800bf0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2200      	movs	r2, #0
 800bd28:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bd2c:	2303      	movs	r3, #3
 800bd2e:	e0db      	b.n	800bee8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	f47f af69 	bne.w	800bc10 <HAL_SPI_Receive+0x204>
 800bd3e:	e0c0      	b.n	800bec2 <HAL_SPI_Receive+0x4b6>
 800bd40:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	695b      	ldr	r3, [r3, #20]
 800bd4a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	695b      	ldr	r3, [r3, #20]
 800bd52:	f003 0301 	and.w	r3, r3, #1
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d117      	bne.n	800bd8a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd66:	7812      	ldrb	r2, [r2, #0]
 800bd68:	b2d2      	uxtb	r2, r2
 800bd6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd70:	1c5a      	adds	r2, r3, #1
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	3b01      	subs	r3, #1
 800bd80:	b29a      	uxth	r2, r3
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bd88:	e094      	b.n	800beb4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	8bfa      	ldrh	r2, [r7, #30]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d946      	bls.n	800be26 <HAL_SPI_Receive+0x41a>
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d041      	beq.n	800be26 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdae:	7812      	ldrb	r2, [r2, #0]
 800bdb0:	b2d2      	uxtb	r2, r2
 800bdb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdb8:	1c5a      	adds	r2, r3, #1
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdca:	7812      	ldrb	r2, [r2, #0]
 800bdcc:	b2d2      	uxtb	r2, r2
 800bdce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdd4:	1c5a      	adds	r2, r3, #1
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bde6:	7812      	ldrb	r2, [r2, #0]
 800bde8:	b2d2      	uxtb	r2, r2
 800bdea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdf0:	1c5a      	adds	r2, r3, #1
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be02:	7812      	ldrb	r2, [r2, #0]
 800be04:	b2d2      	uxtb	r2, r2
 800be06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be0c:	1c5a      	adds	r2, r3, #1
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be18:	b29b      	uxth	r3, r3
 800be1a:	3b04      	subs	r3, #4
 800be1c:	b29a      	uxth	r2, r3
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800be24:	e046      	b.n	800beb4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	2b03      	cmp	r3, #3
 800be30:	d81c      	bhi.n	800be6c <HAL_SPI_Receive+0x460>
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d017      	beq.n	800be6c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be48:	7812      	ldrb	r2, [r2, #0]
 800be4a:	b2d2      	uxtb	r2, r2
 800be4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be52:	1c5a      	adds	r2, r3, #1
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be5e:	b29b      	uxth	r3, r3
 800be60:	3b01      	subs	r3, #1
 800be62:	b29a      	uxth	r2, r3
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800be6a:	e023      	b.n	800beb4 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be6c:	f7f6 fd0a 	bl	8002884 <HAL_GetTick>
 800be70:	4602      	mov	r2, r0
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	1ad3      	subs	r3, r2, r3
 800be76:	683a      	ldr	r2, [r7, #0]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d803      	bhi.n	800be84 <HAL_SPI_Receive+0x478>
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be82:	d102      	bne.n	800be8a <HAL_SPI_Receive+0x47e>
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d114      	bne.n	800beb4 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	f000 f83e 	bl	800bf0c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2201      	movs	r2, #1
 800bea4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	2200      	movs	r2, #0
 800beac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800beb0:	2303      	movs	r3, #3
 800beb2:	e019      	b.n	800bee8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800beba:	b29b      	uxth	r3, r3
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	f47f af41 	bne.w	800bd44 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bec2:	68f8      	ldr	r0, [r7, #12]
 800bec4:	f000 f822 	bl	800bf0c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2201      	movs	r2, #1
 800becc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2200      	movs	r2, #0
 800bed4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d001      	beq.n	800bee6 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800bee2:	2301      	movs	r3, #1
 800bee4:	e000      	b.n	800bee8 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800bee6:	2300      	movs	r3, #0
  }
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3720      	adds	r7, #32
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b083      	sub	sp, #12
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800befe:	b2db      	uxtb	r3, r3
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	370c      	adds	r7, #12
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr

0800bf0c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b085      	sub	sp, #20
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	695b      	ldr	r3, [r3, #20]
 800bf1a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	699a      	ldr	r2, [r3, #24]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f042 0208 	orr.w	r2, r2, #8
 800bf2a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	699a      	ldr	r2, [r3, #24]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f042 0210 	orr.w	r2, r2, #16
 800bf3a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f022 0201 	bic.w	r2, r2, #1
 800bf4a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	6919      	ldr	r1, [r3, #16]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	4b3c      	ldr	r3, [pc, #240]	@ (800c048 <SPI_CloseTransfer+0x13c>)
 800bf58:	400b      	ands	r3, r1
 800bf5a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	689a      	ldr	r2, [r3, #8]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bf6a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	2b04      	cmp	r3, #4
 800bf76:	d014      	beq.n	800bfa2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f003 0320 	and.w	r3, r3, #32
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d00f      	beq.n	800bfa2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf88:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	699a      	ldr	r2, [r3, #24]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f042 0220 	orr.w	r2, r2, #32
 800bfa0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	2b03      	cmp	r3, #3
 800bfac:	d014      	beq.n	800bfd8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d00f      	beq.n	800bfd8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfbe:	f043 0204 	orr.w	r2, r3, #4
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	699a      	ldr	r2, [r3, #24]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bfd6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d00f      	beq.n	800c002 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfe8:	f043 0201 	orr.w	r2, r3, #1
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	699a      	ldr	r2, [r3, #24]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c000:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00f      	beq.n	800c02c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c012:	f043 0208 	orr.w	r2, r3, #8
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	699a      	ldr	r2, [r3, #24]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c02a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2200      	movs	r2, #0
 800c030:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c03c:	bf00      	nop
 800c03e:	3714      	adds	r7, #20
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr
 800c048:	fffffc90 	.word	0xfffffc90

0800c04c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	603b      	str	r3, [r7, #0]
 800c058:	4613      	mov	r3, r2
 800c05a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c05c:	e010      	b.n	800c080 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c05e:	f7f6 fc11 	bl	8002884 <HAL_GetTick>
 800c062:	4602      	mov	r2, r0
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	1ad3      	subs	r3, r2, r3
 800c068:	683a      	ldr	r2, [r7, #0]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d803      	bhi.n	800c076 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c074:	d102      	bne.n	800c07c <SPI_WaitOnFlagUntilTimeout+0x30>
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d101      	bne.n	800c080 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c07c:	2303      	movs	r3, #3
 800c07e:	e00f      	b.n	800c0a0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	695a      	ldr	r2, [r3, #20]
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	4013      	ands	r3, r2
 800c08a:	68ba      	ldr	r2, [r7, #8]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	bf0c      	ite	eq
 800c090:	2301      	moveq	r3, #1
 800c092:	2300      	movne	r3, #0
 800c094:	b2db      	uxtb	r3, r3
 800c096:	461a      	mov	r2, r3
 800c098:	79fb      	ldrb	r3, [r7, #7]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d0df      	beq.n	800c05e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c09e:	2300      	movs	r3, #0
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0b4:	095b      	lsrs	r3, r3, #5
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	68db      	ldr	r3, [r3, #12]
 800c0be:	3301      	adds	r3, #1
 800c0c0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	3307      	adds	r3, #7
 800c0c6:	08db      	lsrs	r3, r3, #3
 800c0c8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	68fa      	ldr	r2, [r7, #12]
 800c0ce:	fb02 f303 	mul.w	r3, r2, r3
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3714      	adds	r7, #20
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr

0800c0de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b082      	sub	sp, #8
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d101      	bne.n	800c0f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	e049      	b.n	800c184 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d106      	bne.n	800c10a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f7f6 f945 	bl	8002394 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2202      	movs	r2, #2
 800c10e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681a      	ldr	r2, [r3, #0]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	3304      	adds	r3, #4
 800c11a:	4619      	mov	r1, r3
 800c11c:	4610      	mov	r0, r2
 800c11e:	f000 fa65 	bl	800c5ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2201      	movs	r2, #1
 800c126:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2201      	movs	r2, #1
 800c12e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2201      	movs	r2, #1
 800c136:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2201      	movs	r2, #1
 800c13e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2201      	movs	r2, #1
 800c146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2201      	movs	r2, #1
 800c14e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2201      	movs	r2, #1
 800c156:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2201      	movs	r2, #1
 800c15e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2201      	movs	r2, #1
 800c166:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2201      	movs	r2, #1
 800c16e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2201      	movs	r2, #1
 800c176:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2201      	movs	r2, #1
 800c17e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c182:	2300      	movs	r3, #0
}
 800c184:	4618      	mov	r0, r3
 800c186:	3708      	adds	r7, #8
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d109      	bne.n	800c1b0 <HAL_TIM_PWM_Start+0x24>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	bf14      	ite	ne
 800c1a8:	2301      	movne	r3, #1
 800c1aa:	2300      	moveq	r3, #0
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	e03c      	b.n	800c22a <HAL_TIM_PWM_Start+0x9e>
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	2b04      	cmp	r3, #4
 800c1b4:	d109      	bne.n	800c1ca <HAL_TIM_PWM_Start+0x3e>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	bf14      	ite	ne
 800c1c2:	2301      	movne	r3, #1
 800c1c4:	2300      	moveq	r3, #0
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	e02f      	b.n	800c22a <HAL_TIM_PWM_Start+0x9e>
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	2b08      	cmp	r3, #8
 800c1ce:	d109      	bne.n	800c1e4 <HAL_TIM_PWM_Start+0x58>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	bf14      	ite	ne
 800c1dc:	2301      	movne	r3, #1
 800c1de:	2300      	moveq	r3, #0
 800c1e0:	b2db      	uxtb	r3, r3
 800c1e2:	e022      	b.n	800c22a <HAL_TIM_PWM_Start+0x9e>
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	2b0c      	cmp	r3, #12
 800c1e8:	d109      	bne.n	800c1fe <HAL_TIM_PWM_Start+0x72>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	2b01      	cmp	r3, #1
 800c1f4:	bf14      	ite	ne
 800c1f6:	2301      	movne	r3, #1
 800c1f8:	2300      	moveq	r3, #0
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	e015      	b.n	800c22a <HAL_TIM_PWM_Start+0x9e>
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	2b10      	cmp	r3, #16
 800c202:	d109      	bne.n	800c218 <HAL_TIM_PWM_Start+0x8c>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c20a:	b2db      	uxtb	r3, r3
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	bf14      	ite	ne
 800c210:	2301      	movne	r3, #1
 800c212:	2300      	moveq	r3, #0
 800c214:	b2db      	uxtb	r3, r3
 800c216:	e008      	b.n	800c22a <HAL_TIM_PWM_Start+0x9e>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	2b01      	cmp	r3, #1
 800c222:	bf14      	ite	ne
 800c224:	2301      	movne	r3, #1
 800c226:	2300      	moveq	r3, #0
 800c228:	b2db      	uxtb	r3, r3
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d001      	beq.n	800c232 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c22e:	2301      	movs	r3, #1
 800c230:	e0ab      	b.n	800c38a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d104      	bne.n	800c242 <HAL_TIM_PWM_Start+0xb6>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2202      	movs	r2, #2
 800c23c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c240:	e023      	b.n	800c28a <HAL_TIM_PWM_Start+0xfe>
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	2b04      	cmp	r3, #4
 800c246:	d104      	bne.n	800c252 <HAL_TIM_PWM_Start+0xc6>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2202      	movs	r2, #2
 800c24c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c250:	e01b      	b.n	800c28a <HAL_TIM_PWM_Start+0xfe>
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	2b08      	cmp	r3, #8
 800c256:	d104      	bne.n	800c262 <HAL_TIM_PWM_Start+0xd6>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2202      	movs	r2, #2
 800c25c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c260:	e013      	b.n	800c28a <HAL_TIM_PWM_Start+0xfe>
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	2b0c      	cmp	r3, #12
 800c266:	d104      	bne.n	800c272 <HAL_TIM_PWM_Start+0xe6>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2202      	movs	r2, #2
 800c26c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c270:	e00b      	b.n	800c28a <HAL_TIM_PWM_Start+0xfe>
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	2b10      	cmp	r3, #16
 800c276:	d104      	bne.n	800c282 <HAL_TIM_PWM_Start+0xf6>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2202      	movs	r2, #2
 800c27c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c280:	e003      	b.n	800c28a <HAL_TIM_PWM_Start+0xfe>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2202      	movs	r2, #2
 800c286:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	2201      	movs	r2, #1
 800c290:	6839      	ldr	r1, [r7, #0]
 800c292:	4618      	mov	r0, r3
 800c294:	f000 fd32 	bl	800ccfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4a3d      	ldr	r2, [pc, #244]	@ (800c394 <HAL_TIM_PWM_Start+0x208>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d013      	beq.n	800c2ca <HAL_TIM_PWM_Start+0x13e>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4a3c      	ldr	r2, [pc, #240]	@ (800c398 <HAL_TIM_PWM_Start+0x20c>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d00e      	beq.n	800c2ca <HAL_TIM_PWM_Start+0x13e>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a3a      	ldr	r2, [pc, #232]	@ (800c39c <HAL_TIM_PWM_Start+0x210>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d009      	beq.n	800c2ca <HAL_TIM_PWM_Start+0x13e>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a39      	ldr	r2, [pc, #228]	@ (800c3a0 <HAL_TIM_PWM_Start+0x214>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d004      	beq.n	800c2ca <HAL_TIM_PWM_Start+0x13e>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4a37      	ldr	r2, [pc, #220]	@ (800c3a4 <HAL_TIM_PWM_Start+0x218>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d101      	bne.n	800c2ce <HAL_TIM_PWM_Start+0x142>
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	e000      	b.n	800c2d0 <HAL_TIM_PWM_Start+0x144>
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d007      	beq.n	800c2e4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c2e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a2a      	ldr	r2, [pc, #168]	@ (800c394 <HAL_TIM_PWM_Start+0x208>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d02c      	beq.n	800c348 <HAL_TIM_PWM_Start+0x1bc>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2f6:	d027      	beq.n	800c348 <HAL_TIM_PWM_Start+0x1bc>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4a2a      	ldr	r2, [pc, #168]	@ (800c3a8 <HAL_TIM_PWM_Start+0x21c>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d022      	beq.n	800c348 <HAL_TIM_PWM_Start+0x1bc>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a29      	ldr	r2, [pc, #164]	@ (800c3ac <HAL_TIM_PWM_Start+0x220>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d01d      	beq.n	800c348 <HAL_TIM_PWM_Start+0x1bc>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4a27      	ldr	r2, [pc, #156]	@ (800c3b0 <HAL_TIM_PWM_Start+0x224>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d018      	beq.n	800c348 <HAL_TIM_PWM_Start+0x1bc>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4a1f      	ldr	r2, [pc, #124]	@ (800c398 <HAL_TIM_PWM_Start+0x20c>)
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d013      	beq.n	800c348 <HAL_TIM_PWM_Start+0x1bc>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4a23      	ldr	r2, [pc, #140]	@ (800c3b4 <HAL_TIM_PWM_Start+0x228>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d00e      	beq.n	800c348 <HAL_TIM_PWM_Start+0x1bc>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4a1b      	ldr	r2, [pc, #108]	@ (800c39c <HAL_TIM_PWM_Start+0x210>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d009      	beq.n	800c348 <HAL_TIM_PWM_Start+0x1bc>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4a1f      	ldr	r2, [pc, #124]	@ (800c3b8 <HAL_TIM_PWM_Start+0x22c>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d004      	beq.n	800c348 <HAL_TIM_PWM_Start+0x1bc>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	4a1e      	ldr	r2, [pc, #120]	@ (800c3bc <HAL_TIM_PWM_Start+0x230>)
 800c344:	4293      	cmp	r3, r2
 800c346:	d115      	bne.n	800c374 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	689a      	ldr	r2, [r3, #8]
 800c34e:	4b1c      	ldr	r3, [pc, #112]	@ (800c3c0 <HAL_TIM_PWM_Start+0x234>)
 800c350:	4013      	ands	r3, r2
 800c352:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2b06      	cmp	r3, #6
 800c358:	d015      	beq.n	800c386 <HAL_TIM_PWM_Start+0x1fa>
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c360:	d011      	beq.n	800c386 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f042 0201 	orr.w	r2, r2, #1
 800c370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c372:	e008      	b.n	800c386 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f042 0201 	orr.w	r2, r2, #1
 800c382:	601a      	str	r2, [r3, #0]
 800c384:	e000      	b.n	800c388 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c386:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c388:	2300      	movs	r3, #0
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3710      	adds	r7, #16
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
 800c392:	bf00      	nop
 800c394:	40010000 	.word	0x40010000
 800c398:	40010400 	.word	0x40010400
 800c39c:	40014000 	.word	0x40014000
 800c3a0:	40014400 	.word	0x40014400
 800c3a4:	40014800 	.word	0x40014800
 800c3a8:	40000400 	.word	0x40000400
 800c3ac:	40000800 	.word	0x40000800
 800c3b0:	40000c00 	.word	0x40000c00
 800c3b4:	40001800 	.word	0x40001800
 800c3b8:	4000e000 	.word	0x4000e000
 800c3bc:	4000e400 	.word	0x4000e400
 800c3c0:	00010007 	.word	0x00010007

0800c3c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b086      	sub	sp, #24
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d101      	bne.n	800c3e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c3de:	2302      	movs	r3, #2
 800c3e0:	e0ff      	b.n	800c5e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2b14      	cmp	r3, #20
 800c3ee:	f200 80f0 	bhi.w	800c5d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c3f2:	a201      	add	r2, pc, #4	@ (adr r2, 800c3f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f8:	0800c44d 	.word	0x0800c44d
 800c3fc:	0800c5d3 	.word	0x0800c5d3
 800c400:	0800c5d3 	.word	0x0800c5d3
 800c404:	0800c5d3 	.word	0x0800c5d3
 800c408:	0800c48d 	.word	0x0800c48d
 800c40c:	0800c5d3 	.word	0x0800c5d3
 800c410:	0800c5d3 	.word	0x0800c5d3
 800c414:	0800c5d3 	.word	0x0800c5d3
 800c418:	0800c4cf 	.word	0x0800c4cf
 800c41c:	0800c5d3 	.word	0x0800c5d3
 800c420:	0800c5d3 	.word	0x0800c5d3
 800c424:	0800c5d3 	.word	0x0800c5d3
 800c428:	0800c50f 	.word	0x0800c50f
 800c42c:	0800c5d3 	.word	0x0800c5d3
 800c430:	0800c5d3 	.word	0x0800c5d3
 800c434:	0800c5d3 	.word	0x0800c5d3
 800c438:	0800c551 	.word	0x0800c551
 800c43c:	0800c5d3 	.word	0x0800c5d3
 800c440:	0800c5d3 	.word	0x0800c5d3
 800c444:	0800c5d3 	.word	0x0800c5d3
 800c448:	0800c591 	.word	0x0800c591
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	68b9      	ldr	r1, [r7, #8]
 800c452:	4618      	mov	r0, r3
 800c454:	f000 f97c 	bl	800c750 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	699a      	ldr	r2, [r3, #24]
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f042 0208 	orr.w	r2, r2, #8
 800c466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	699a      	ldr	r2, [r3, #24]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f022 0204 	bic.w	r2, r2, #4
 800c476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	6999      	ldr	r1, [r3, #24]
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	691a      	ldr	r2, [r3, #16]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	430a      	orrs	r2, r1
 800c488:	619a      	str	r2, [r3, #24]
      break;
 800c48a:	e0a5      	b.n	800c5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	68b9      	ldr	r1, [r7, #8]
 800c492:	4618      	mov	r0, r3
 800c494:	f000 f9ec 	bl	800c870 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	699a      	ldr	r2, [r3, #24]
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c4a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	699a      	ldr	r2, [r3, #24]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c4b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	6999      	ldr	r1, [r3, #24]
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	691b      	ldr	r3, [r3, #16]
 800c4c2:	021a      	lsls	r2, r3, #8
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	430a      	orrs	r2, r1
 800c4ca:	619a      	str	r2, [r3, #24]
      break;
 800c4cc:	e084      	b.n	800c5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	68b9      	ldr	r1, [r7, #8]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f000 fa55 	bl	800c984 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	69da      	ldr	r2, [r3, #28]
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f042 0208 	orr.w	r2, r2, #8
 800c4e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	69da      	ldr	r2, [r3, #28]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f022 0204 	bic.w	r2, r2, #4
 800c4f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	69d9      	ldr	r1, [r3, #28]
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	691a      	ldr	r2, [r3, #16]
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	430a      	orrs	r2, r1
 800c50a:	61da      	str	r2, [r3, #28]
      break;
 800c50c:	e064      	b.n	800c5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	68b9      	ldr	r1, [r7, #8]
 800c514:	4618      	mov	r0, r3
 800c516:	f000 fabd 	bl	800ca94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	69da      	ldr	r2, [r3, #28]
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	69da      	ldr	r2, [r3, #28]
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	69d9      	ldr	r1, [r3, #28]
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	691b      	ldr	r3, [r3, #16]
 800c544:	021a      	lsls	r2, r3, #8
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	430a      	orrs	r2, r1
 800c54c:	61da      	str	r2, [r3, #28]
      break;
 800c54e:	e043      	b.n	800c5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	68b9      	ldr	r1, [r7, #8]
 800c556:	4618      	mov	r0, r3
 800c558:	f000 fb06 	bl	800cb68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f042 0208 	orr.w	r2, r2, #8
 800c56a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f022 0204 	bic.w	r2, r2, #4
 800c57a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	691a      	ldr	r2, [r3, #16]
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	430a      	orrs	r2, r1
 800c58c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c58e:	e023      	b.n	800c5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	68b9      	ldr	r1, [r7, #8]
 800c596:	4618      	mov	r0, r3
 800c598:	f000 fb4a 	bl	800cc30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c5aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c5ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	691b      	ldr	r3, [r3, #16]
 800c5c6:	021a      	lsls	r2, r3, #8
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	430a      	orrs	r2, r1
 800c5ce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c5d0:	e002      	b.n	800c5d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	75fb      	strb	r3, [r7, #23]
      break;
 800c5d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c5e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3718      	adds	r7, #24
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop

0800c5ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b085      	sub	sp, #20
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	4a4a      	ldr	r2, [pc, #296]	@ (800c728 <TIM_Base_SetConfig+0x13c>)
 800c600:	4293      	cmp	r3, r2
 800c602:	d013      	beq.n	800c62c <TIM_Base_SetConfig+0x40>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c60a:	d00f      	beq.n	800c62c <TIM_Base_SetConfig+0x40>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	4a47      	ldr	r2, [pc, #284]	@ (800c72c <TIM_Base_SetConfig+0x140>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d00b      	beq.n	800c62c <TIM_Base_SetConfig+0x40>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	4a46      	ldr	r2, [pc, #280]	@ (800c730 <TIM_Base_SetConfig+0x144>)
 800c618:	4293      	cmp	r3, r2
 800c61a:	d007      	beq.n	800c62c <TIM_Base_SetConfig+0x40>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	4a45      	ldr	r2, [pc, #276]	@ (800c734 <TIM_Base_SetConfig+0x148>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d003      	beq.n	800c62c <TIM_Base_SetConfig+0x40>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	4a44      	ldr	r2, [pc, #272]	@ (800c738 <TIM_Base_SetConfig+0x14c>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d108      	bne.n	800c63e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	4313      	orrs	r3, r2
 800c63c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	4a39      	ldr	r2, [pc, #228]	@ (800c728 <TIM_Base_SetConfig+0x13c>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d027      	beq.n	800c696 <TIM_Base_SetConfig+0xaa>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c64c:	d023      	beq.n	800c696 <TIM_Base_SetConfig+0xaa>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4a36      	ldr	r2, [pc, #216]	@ (800c72c <TIM_Base_SetConfig+0x140>)
 800c652:	4293      	cmp	r3, r2
 800c654:	d01f      	beq.n	800c696 <TIM_Base_SetConfig+0xaa>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	4a35      	ldr	r2, [pc, #212]	@ (800c730 <TIM_Base_SetConfig+0x144>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d01b      	beq.n	800c696 <TIM_Base_SetConfig+0xaa>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	4a34      	ldr	r2, [pc, #208]	@ (800c734 <TIM_Base_SetConfig+0x148>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d017      	beq.n	800c696 <TIM_Base_SetConfig+0xaa>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	4a33      	ldr	r2, [pc, #204]	@ (800c738 <TIM_Base_SetConfig+0x14c>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d013      	beq.n	800c696 <TIM_Base_SetConfig+0xaa>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4a32      	ldr	r2, [pc, #200]	@ (800c73c <TIM_Base_SetConfig+0x150>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d00f      	beq.n	800c696 <TIM_Base_SetConfig+0xaa>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	4a31      	ldr	r2, [pc, #196]	@ (800c740 <TIM_Base_SetConfig+0x154>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d00b      	beq.n	800c696 <TIM_Base_SetConfig+0xaa>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	4a30      	ldr	r2, [pc, #192]	@ (800c744 <TIM_Base_SetConfig+0x158>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d007      	beq.n	800c696 <TIM_Base_SetConfig+0xaa>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	4a2f      	ldr	r2, [pc, #188]	@ (800c748 <TIM_Base_SetConfig+0x15c>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d003      	beq.n	800c696 <TIM_Base_SetConfig+0xaa>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4a2e      	ldr	r2, [pc, #184]	@ (800c74c <TIM_Base_SetConfig+0x160>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d108      	bne.n	800c6a8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c69c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	68db      	ldr	r3, [r3, #12]
 800c6a2:	68fa      	ldr	r2, [r7, #12]
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	695b      	ldr	r3, [r3, #20]
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	68fa      	ldr	r2, [r7, #12]
 800c6ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	689a      	ldr	r2, [r3, #8]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	681a      	ldr	r2, [r3, #0]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	4a16      	ldr	r2, [pc, #88]	@ (800c728 <TIM_Base_SetConfig+0x13c>)
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d00f      	beq.n	800c6f4 <TIM_Base_SetConfig+0x108>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	4a18      	ldr	r2, [pc, #96]	@ (800c738 <TIM_Base_SetConfig+0x14c>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d00b      	beq.n	800c6f4 <TIM_Base_SetConfig+0x108>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	4a17      	ldr	r2, [pc, #92]	@ (800c73c <TIM_Base_SetConfig+0x150>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d007      	beq.n	800c6f4 <TIM_Base_SetConfig+0x108>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	4a16      	ldr	r2, [pc, #88]	@ (800c740 <TIM_Base_SetConfig+0x154>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d003      	beq.n	800c6f4 <TIM_Base_SetConfig+0x108>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4a15      	ldr	r2, [pc, #84]	@ (800c744 <TIM_Base_SetConfig+0x158>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d103      	bne.n	800c6fc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	691a      	ldr	r2, [r3, #16]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2201      	movs	r2, #1
 800c700:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	691b      	ldr	r3, [r3, #16]
 800c706:	f003 0301 	and.w	r3, r3, #1
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	d105      	bne.n	800c71a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	691b      	ldr	r3, [r3, #16]
 800c712:	f023 0201 	bic.w	r2, r3, #1
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	611a      	str	r2, [r3, #16]
  }
}
 800c71a:	bf00      	nop
 800c71c:	3714      	adds	r7, #20
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr
 800c726:	bf00      	nop
 800c728:	40010000 	.word	0x40010000
 800c72c:	40000400 	.word	0x40000400
 800c730:	40000800 	.word	0x40000800
 800c734:	40000c00 	.word	0x40000c00
 800c738:	40010400 	.word	0x40010400
 800c73c:	40014000 	.word	0x40014000
 800c740:	40014400 	.word	0x40014400
 800c744:	40014800 	.word	0x40014800
 800c748:	4000e000 	.word	0x4000e000
 800c74c:	4000e400 	.word	0x4000e400

0800c750 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c750:	b480      	push	{r7}
 800c752:	b087      	sub	sp, #28
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6a1b      	ldr	r3, [r3, #32]
 800c75e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6a1b      	ldr	r3, [r3, #32]
 800c764:	f023 0201 	bic.w	r2, r3, #1
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	699b      	ldr	r3, [r3, #24]
 800c776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c778:	68fa      	ldr	r2, [r7, #12]
 800c77a:	4b37      	ldr	r3, [pc, #220]	@ (800c858 <TIM_OC1_SetConfig+0x108>)
 800c77c:	4013      	ands	r3, r2
 800c77e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f023 0303 	bic.w	r3, r3, #3
 800c786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	68fa      	ldr	r2, [r7, #12]
 800c78e:	4313      	orrs	r3, r2
 800c790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	f023 0302 	bic.w	r3, r3, #2
 800c798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	689b      	ldr	r3, [r3, #8]
 800c79e:	697a      	ldr	r2, [r7, #20]
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	4a2d      	ldr	r2, [pc, #180]	@ (800c85c <TIM_OC1_SetConfig+0x10c>)
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d00f      	beq.n	800c7cc <TIM_OC1_SetConfig+0x7c>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	4a2c      	ldr	r2, [pc, #176]	@ (800c860 <TIM_OC1_SetConfig+0x110>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d00b      	beq.n	800c7cc <TIM_OC1_SetConfig+0x7c>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	4a2b      	ldr	r2, [pc, #172]	@ (800c864 <TIM_OC1_SetConfig+0x114>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d007      	beq.n	800c7cc <TIM_OC1_SetConfig+0x7c>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	4a2a      	ldr	r2, [pc, #168]	@ (800c868 <TIM_OC1_SetConfig+0x118>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d003      	beq.n	800c7cc <TIM_OC1_SetConfig+0x7c>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	4a29      	ldr	r2, [pc, #164]	@ (800c86c <TIM_OC1_SetConfig+0x11c>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d10c      	bne.n	800c7e6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	f023 0308 	bic.w	r3, r3, #8
 800c7d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	68db      	ldr	r3, [r3, #12]
 800c7d8:	697a      	ldr	r2, [r7, #20]
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	f023 0304 	bic.w	r3, r3, #4
 800c7e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	4a1c      	ldr	r2, [pc, #112]	@ (800c85c <TIM_OC1_SetConfig+0x10c>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d00f      	beq.n	800c80e <TIM_OC1_SetConfig+0xbe>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4a1b      	ldr	r2, [pc, #108]	@ (800c860 <TIM_OC1_SetConfig+0x110>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d00b      	beq.n	800c80e <TIM_OC1_SetConfig+0xbe>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4a1a      	ldr	r2, [pc, #104]	@ (800c864 <TIM_OC1_SetConfig+0x114>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d007      	beq.n	800c80e <TIM_OC1_SetConfig+0xbe>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	4a19      	ldr	r2, [pc, #100]	@ (800c868 <TIM_OC1_SetConfig+0x118>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d003      	beq.n	800c80e <TIM_OC1_SetConfig+0xbe>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4a18      	ldr	r2, [pc, #96]	@ (800c86c <TIM_OC1_SetConfig+0x11c>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d111      	bne.n	800c832 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c81c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	695b      	ldr	r3, [r3, #20]
 800c822:	693a      	ldr	r2, [r7, #16]
 800c824:	4313      	orrs	r3, r2
 800c826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	699b      	ldr	r3, [r3, #24]
 800c82c:	693a      	ldr	r2, [r7, #16]
 800c82e:	4313      	orrs	r3, r2
 800c830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	693a      	ldr	r2, [r7, #16]
 800c836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	68fa      	ldr	r2, [r7, #12]
 800c83c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	685a      	ldr	r2, [r3, #4]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	697a      	ldr	r2, [r7, #20]
 800c84a:	621a      	str	r2, [r3, #32]
}
 800c84c:	bf00      	nop
 800c84e:	371c      	adds	r7, #28
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr
 800c858:	fffeff8f 	.word	0xfffeff8f
 800c85c:	40010000 	.word	0x40010000
 800c860:	40010400 	.word	0x40010400
 800c864:	40014000 	.word	0x40014000
 800c868:	40014400 	.word	0x40014400
 800c86c:	40014800 	.word	0x40014800

0800c870 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c870:	b480      	push	{r7}
 800c872:	b087      	sub	sp, #28
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6a1b      	ldr	r3, [r3, #32]
 800c87e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6a1b      	ldr	r3, [r3, #32]
 800c884:	f023 0210 	bic.w	r2, r3, #16
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	699b      	ldr	r3, [r3, #24]
 800c896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c898:	68fa      	ldr	r2, [r7, #12]
 800c89a:	4b34      	ldr	r3, [pc, #208]	@ (800c96c <TIM_OC2_SetConfig+0xfc>)
 800c89c:	4013      	ands	r3, r2
 800c89e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c8a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	021b      	lsls	r3, r3, #8
 800c8ae:	68fa      	ldr	r2, [r7, #12]
 800c8b0:	4313      	orrs	r3, r2
 800c8b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	f023 0320 	bic.w	r3, r3, #32
 800c8ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	689b      	ldr	r3, [r3, #8]
 800c8c0:	011b      	lsls	r3, r3, #4
 800c8c2:	697a      	ldr	r2, [r7, #20]
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	4a29      	ldr	r2, [pc, #164]	@ (800c970 <TIM_OC2_SetConfig+0x100>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d003      	beq.n	800c8d8 <TIM_OC2_SetConfig+0x68>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4a28      	ldr	r2, [pc, #160]	@ (800c974 <TIM_OC2_SetConfig+0x104>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d10d      	bne.n	800c8f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c8de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	68db      	ldr	r3, [r3, #12]
 800c8e4:	011b      	lsls	r3, r3, #4
 800c8e6:	697a      	ldr	r2, [r7, #20]
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	4a1e      	ldr	r2, [pc, #120]	@ (800c970 <TIM_OC2_SetConfig+0x100>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d00f      	beq.n	800c91c <TIM_OC2_SetConfig+0xac>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	4a1d      	ldr	r2, [pc, #116]	@ (800c974 <TIM_OC2_SetConfig+0x104>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d00b      	beq.n	800c91c <TIM_OC2_SetConfig+0xac>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	4a1c      	ldr	r2, [pc, #112]	@ (800c978 <TIM_OC2_SetConfig+0x108>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d007      	beq.n	800c91c <TIM_OC2_SetConfig+0xac>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	4a1b      	ldr	r2, [pc, #108]	@ (800c97c <TIM_OC2_SetConfig+0x10c>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d003      	beq.n	800c91c <TIM_OC2_SetConfig+0xac>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	4a1a      	ldr	r2, [pc, #104]	@ (800c980 <TIM_OC2_SetConfig+0x110>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d113      	bne.n	800c944 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c922:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c92a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	695b      	ldr	r3, [r3, #20]
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	693a      	ldr	r2, [r7, #16]
 800c934:	4313      	orrs	r3, r2
 800c936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	699b      	ldr	r3, [r3, #24]
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	693a      	ldr	r2, [r7, #16]
 800c940:	4313      	orrs	r3, r2
 800c942:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	693a      	ldr	r2, [r7, #16]
 800c948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	68fa      	ldr	r2, [r7, #12]
 800c94e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	685a      	ldr	r2, [r3, #4]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	697a      	ldr	r2, [r7, #20]
 800c95c:	621a      	str	r2, [r3, #32]
}
 800c95e:	bf00      	nop
 800c960:	371c      	adds	r7, #28
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	feff8fff 	.word	0xfeff8fff
 800c970:	40010000 	.word	0x40010000
 800c974:	40010400 	.word	0x40010400
 800c978:	40014000 	.word	0x40014000
 800c97c:	40014400 	.word	0x40014400
 800c980:	40014800 	.word	0x40014800

0800c984 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c984:	b480      	push	{r7}
 800c986:	b087      	sub	sp, #28
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6a1b      	ldr	r3, [r3, #32]
 800c992:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6a1b      	ldr	r3, [r3, #32]
 800c998:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	69db      	ldr	r3, [r3, #28]
 800c9aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c9ac:	68fa      	ldr	r2, [r7, #12]
 800c9ae:	4b33      	ldr	r3, [pc, #204]	@ (800ca7c <TIM_OC3_SetConfig+0xf8>)
 800c9b0:	4013      	ands	r3, r2
 800c9b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f023 0303 	bic.w	r3, r3, #3
 800c9ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	68fa      	ldr	r2, [r7, #12]
 800c9c2:	4313      	orrs	r3, r2
 800c9c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c9cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	689b      	ldr	r3, [r3, #8]
 800c9d2:	021b      	lsls	r3, r3, #8
 800c9d4:	697a      	ldr	r2, [r7, #20]
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4a28      	ldr	r2, [pc, #160]	@ (800ca80 <TIM_OC3_SetConfig+0xfc>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d003      	beq.n	800c9ea <TIM_OC3_SetConfig+0x66>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	4a27      	ldr	r2, [pc, #156]	@ (800ca84 <TIM_OC3_SetConfig+0x100>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d10d      	bne.n	800ca06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c9f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	68db      	ldr	r3, [r3, #12]
 800c9f6:	021b      	lsls	r3, r3, #8
 800c9f8:	697a      	ldr	r2, [r7, #20]
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ca04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	4a1d      	ldr	r2, [pc, #116]	@ (800ca80 <TIM_OC3_SetConfig+0xfc>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d00f      	beq.n	800ca2e <TIM_OC3_SetConfig+0xaa>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	4a1c      	ldr	r2, [pc, #112]	@ (800ca84 <TIM_OC3_SetConfig+0x100>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d00b      	beq.n	800ca2e <TIM_OC3_SetConfig+0xaa>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4a1b      	ldr	r2, [pc, #108]	@ (800ca88 <TIM_OC3_SetConfig+0x104>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d007      	beq.n	800ca2e <TIM_OC3_SetConfig+0xaa>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	4a1a      	ldr	r2, [pc, #104]	@ (800ca8c <TIM_OC3_SetConfig+0x108>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d003      	beq.n	800ca2e <TIM_OC3_SetConfig+0xaa>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	4a19      	ldr	r2, [pc, #100]	@ (800ca90 <TIM_OC3_SetConfig+0x10c>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d113      	bne.n	800ca56 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ca3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	695b      	ldr	r3, [r3, #20]
 800ca42:	011b      	lsls	r3, r3, #4
 800ca44:	693a      	ldr	r2, [r7, #16]
 800ca46:	4313      	orrs	r3, r2
 800ca48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	699b      	ldr	r3, [r3, #24]
 800ca4e:	011b      	lsls	r3, r3, #4
 800ca50:	693a      	ldr	r2, [r7, #16]
 800ca52:	4313      	orrs	r3, r2
 800ca54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	693a      	ldr	r2, [r7, #16]
 800ca5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	68fa      	ldr	r2, [r7, #12]
 800ca60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	685a      	ldr	r2, [r3, #4]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	697a      	ldr	r2, [r7, #20]
 800ca6e:	621a      	str	r2, [r3, #32]
}
 800ca70:	bf00      	nop
 800ca72:	371c      	adds	r7, #28
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr
 800ca7c:	fffeff8f 	.word	0xfffeff8f
 800ca80:	40010000 	.word	0x40010000
 800ca84:	40010400 	.word	0x40010400
 800ca88:	40014000 	.word	0x40014000
 800ca8c:	40014400 	.word	0x40014400
 800ca90:	40014800 	.word	0x40014800

0800ca94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b087      	sub	sp, #28
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6a1b      	ldr	r3, [r3, #32]
 800caa2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6a1b      	ldr	r3, [r3, #32]
 800caa8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	69db      	ldr	r3, [r3, #28]
 800caba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cabc:	68fa      	ldr	r2, [r7, #12]
 800cabe:	4b24      	ldr	r3, [pc, #144]	@ (800cb50 <TIM_OC4_SetConfig+0xbc>)
 800cac0:	4013      	ands	r3, r2
 800cac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800caca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	021b      	lsls	r3, r3, #8
 800cad2:	68fa      	ldr	r2, [r7, #12]
 800cad4:	4313      	orrs	r3, r2
 800cad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cade:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	689b      	ldr	r3, [r3, #8]
 800cae4:	031b      	lsls	r3, r3, #12
 800cae6:	693a      	ldr	r2, [r7, #16]
 800cae8:	4313      	orrs	r3, r2
 800caea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	4a19      	ldr	r2, [pc, #100]	@ (800cb54 <TIM_OC4_SetConfig+0xc0>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d00f      	beq.n	800cb14 <TIM_OC4_SetConfig+0x80>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	4a18      	ldr	r2, [pc, #96]	@ (800cb58 <TIM_OC4_SetConfig+0xc4>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d00b      	beq.n	800cb14 <TIM_OC4_SetConfig+0x80>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	4a17      	ldr	r2, [pc, #92]	@ (800cb5c <TIM_OC4_SetConfig+0xc8>)
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d007      	beq.n	800cb14 <TIM_OC4_SetConfig+0x80>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	4a16      	ldr	r2, [pc, #88]	@ (800cb60 <TIM_OC4_SetConfig+0xcc>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d003      	beq.n	800cb14 <TIM_OC4_SetConfig+0x80>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	4a15      	ldr	r2, [pc, #84]	@ (800cb64 <TIM_OC4_SetConfig+0xd0>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d109      	bne.n	800cb28 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cb1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	695b      	ldr	r3, [r3, #20]
 800cb20:	019b      	lsls	r3, r3, #6
 800cb22:	697a      	ldr	r2, [r7, #20]
 800cb24:	4313      	orrs	r3, r2
 800cb26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	697a      	ldr	r2, [r7, #20]
 800cb2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	685a      	ldr	r2, [r3, #4]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	693a      	ldr	r2, [r7, #16]
 800cb40:	621a      	str	r2, [r3, #32]
}
 800cb42:	bf00      	nop
 800cb44:	371c      	adds	r7, #28
 800cb46:	46bd      	mov	sp, r7
 800cb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4c:	4770      	bx	lr
 800cb4e:	bf00      	nop
 800cb50:	feff8fff 	.word	0xfeff8fff
 800cb54:	40010000 	.word	0x40010000
 800cb58:	40010400 	.word	0x40010400
 800cb5c:	40014000 	.word	0x40014000
 800cb60:	40014400 	.word	0x40014400
 800cb64:	40014800 	.word	0x40014800

0800cb68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b087      	sub	sp, #28
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6a1b      	ldr	r3, [r3, #32]
 800cb76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6a1b      	ldr	r3, [r3, #32]
 800cb7c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cb90:	68fa      	ldr	r2, [r7, #12]
 800cb92:	4b21      	ldr	r3, [pc, #132]	@ (800cc18 <TIM_OC5_SetConfig+0xb0>)
 800cb94:	4013      	ands	r3, r2
 800cb96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	68fa      	ldr	r2, [r7, #12]
 800cb9e:	4313      	orrs	r3, r2
 800cba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cba8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	689b      	ldr	r3, [r3, #8]
 800cbae:	041b      	lsls	r3, r3, #16
 800cbb0:	693a      	ldr	r2, [r7, #16]
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	4a18      	ldr	r2, [pc, #96]	@ (800cc1c <TIM_OC5_SetConfig+0xb4>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d00f      	beq.n	800cbde <TIM_OC5_SetConfig+0x76>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	4a17      	ldr	r2, [pc, #92]	@ (800cc20 <TIM_OC5_SetConfig+0xb8>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d00b      	beq.n	800cbde <TIM_OC5_SetConfig+0x76>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	4a16      	ldr	r2, [pc, #88]	@ (800cc24 <TIM_OC5_SetConfig+0xbc>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d007      	beq.n	800cbde <TIM_OC5_SetConfig+0x76>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	4a15      	ldr	r2, [pc, #84]	@ (800cc28 <TIM_OC5_SetConfig+0xc0>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d003      	beq.n	800cbde <TIM_OC5_SetConfig+0x76>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	4a14      	ldr	r2, [pc, #80]	@ (800cc2c <TIM_OC5_SetConfig+0xc4>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d109      	bne.n	800cbf2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cbe4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	695b      	ldr	r3, [r3, #20]
 800cbea:	021b      	lsls	r3, r3, #8
 800cbec:	697a      	ldr	r2, [r7, #20]
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	697a      	ldr	r2, [r7, #20]
 800cbf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	68fa      	ldr	r2, [r7, #12]
 800cbfc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	685a      	ldr	r2, [r3, #4]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	693a      	ldr	r2, [r7, #16]
 800cc0a:	621a      	str	r2, [r3, #32]
}
 800cc0c:	bf00      	nop
 800cc0e:	371c      	adds	r7, #28
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr
 800cc18:	fffeff8f 	.word	0xfffeff8f
 800cc1c:	40010000 	.word	0x40010000
 800cc20:	40010400 	.word	0x40010400
 800cc24:	40014000 	.word	0x40014000
 800cc28:	40014400 	.word	0x40014400
 800cc2c:	40014800 	.word	0x40014800

0800cc30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b087      	sub	sp, #28
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6a1b      	ldr	r3, [r3, #32]
 800cc3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6a1b      	ldr	r3, [r3, #32]
 800cc44:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cc58:	68fa      	ldr	r2, [r7, #12]
 800cc5a:	4b22      	ldr	r3, [pc, #136]	@ (800cce4 <TIM_OC6_SetConfig+0xb4>)
 800cc5c:	4013      	ands	r3, r2
 800cc5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	021b      	lsls	r3, r3, #8
 800cc66:	68fa      	ldr	r2, [r7, #12]
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cc72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	051b      	lsls	r3, r3, #20
 800cc7a:	693a      	ldr	r2, [r7, #16]
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	4a19      	ldr	r2, [pc, #100]	@ (800cce8 <TIM_OC6_SetConfig+0xb8>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d00f      	beq.n	800cca8 <TIM_OC6_SetConfig+0x78>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	4a18      	ldr	r2, [pc, #96]	@ (800ccec <TIM_OC6_SetConfig+0xbc>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d00b      	beq.n	800cca8 <TIM_OC6_SetConfig+0x78>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	4a17      	ldr	r2, [pc, #92]	@ (800ccf0 <TIM_OC6_SetConfig+0xc0>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d007      	beq.n	800cca8 <TIM_OC6_SetConfig+0x78>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	4a16      	ldr	r2, [pc, #88]	@ (800ccf4 <TIM_OC6_SetConfig+0xc4>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d003      	beq.n	800cca8 <TIM_OC6_SetConfig+0x78>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	4a15      	ldr	r2, [pc, #84]	@ (800ccf8 <TIM_OC6_SetConfig+0xc8>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d109      	bne.n	800ccbc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ccae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	695b      	ldr	r3, [r3, #20]
 800ccb4:	029b      	lsls	r3, r3, #10
 800ccb6:	697a      	ldr	r2, [r7, #20]
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	697a      	ldr	r2, [r7, #20]
 800ccc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	68fa      	ldr	r2, [r7, #12]
 800ccc6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	685a      	ldr	r2, [r3, #4]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	693a      	ldr	r2, [r7, #16]
 800ccd4:	621a      	str	r2, [r3, #32]
}
 800ccd6:	bf00      	nop
 800ccd8:	371c      	adds	r7, #28
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr
 800cce2:	bf00      	nop
 800cce4:	feff8fff 	.word	0xfeff8fff
 800cce8:	40010000 	.word	0x40010000
 800ccec:	40010400 	.word	0x40010400
 800ccf0:	40014000 	.word	0x40014000
 800ccf4:	40014400 	.word	0x40014400
 800ccf8:	40014800 	.word	0x40014800

0800ccfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b087      	sub	sp, #28
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	f003 031f 	and.w	r3, r3, #31
 800cd0e:	2201      	movs	r2, #1
 800cd10:	fa02 f303 	lsl.w	r3, r2, r3
 800cd14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	6a1a      	ldr	r2, [r3, #32]
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	43db      	mvns	r3, r3
 800cd1e:	401a      	ands	r2, r3
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	6a1a      	ldr	r2, [r3, #32]
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	f003 031f 	and.w	r3, r3, #31
 800cd2e:	6879      	ldr	r1, [r7, #4]
 800cd30:	fa01 f303 	lsl.w	r3, r1, r3
 800cd34:	431a      	orrs	r2, r3
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	621a      	str	r2, [r3, #32]
}
 800cd3a:	bf00      	nop
 800cd3c:	371c      	adds	r7, #28
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd44:	4770      	bx	lr
	...

0800cd48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b085      	sub	sp, #20
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d101      	bne.n	800cd60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd5c:	2302      	movs	r3, #2
 800cd5e:	e077      	b.n	800ce50 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2201      	movs	r2, #1
 800cd64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2202      	movs	r2, #2
 800cd6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	689b      	ldr	r3, [r3, #8]
 800cd7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a35      	ldr	r2, [pc, #212]	@ (800ce5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d004      	beq.n	800cd94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4a34      	ldr	r2, [pc, #208]	@ (800ce60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d108      	bne.n	800cda6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cd9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	68fa      	ldr	r2, [r7, #12]
 800cda2:	4313      	orrs	r3, r2
 800cda4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	68fa      	ldr	r2, [r7, #12]
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	68fa      	ldr	r2, [r7, #12]
 800cdbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a25      	ldr	r2, [pc, #148]	@ (800ce5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d02c      	beq.n	800ce24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdd2:	d027      	beq.n	800ce24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a22      	ldr	r2, [pc, #136]	@ (800ce64 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d022      	beq.n	800ce24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	4a21      	ldr	r2, [pc, #132]	@ (800ce68 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d01d      	beq.n	800ce24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a1f      	ldr	r2, [pc, #124]	@ (800ce6c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d018      	beq.n	800ce24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	4a1a      	ldr	r2, [pc, #104]	@ (800ce60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d013      	beq.n	800ce24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a1b      	ldr	r2, [pc, #108]	@ (800ce70 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d00e      	beq.n	800ce24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4a1a      	ldr	r2, [pc, #104]	@ (800ce74 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d009      	beq.n	800ce24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a18      	ldr	r2, [pc, #96]	@ (800ce78 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d004      	beq.n	800ce24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	4a17      	ldr	r2, [pc, #92]	@ (800ce7c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d10c      	bne.n	800ce3e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ce2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	689b      	ldr	r3, [r3, #8]
 800ce30:	68ba      	ldr	r2, [r7, #8]
 800ce32:	4313      	orrs	r3, r2
 800ce34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	68ba      	ldr	r2, [r7, #8]
 800ce3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2201      	movs	r2, #1
 800ce42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ce4e:	2300      	movs	r3, #0
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3714      	adds	r7, #20
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr
 800ce5c:	40010000 	.word	0x40010000
 800ce60:	40010400 	.word	0x40010400
 800ce64:	40000400 	.word	0x40000400
 800ce68:	40000800 	.word	0x40000800
 800ce6c:	40000c00 	.word	0x40000c00
 800ce70:	40001800 	.word	0x40001800
 800ce74:	40014000 	.word	0x40014000
 800ce78:	4000e000 	.word	0x4000e000
 800ce7c:	4000e400 	.word	0x4000e400

0800ce80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d101      	bne.n	800ce92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce8e:	2301      	movs	r3, #1
 800ce90:	e042      	b.n	800cf18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d106      	bne.n	800ceaa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f7f5 facd 	bl	8002444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2224      	movs	r2, #36	@ 0x24
 800ceae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f022 0201 	bic.w	r2, r2, #1
 800cec0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d002      	beq.n	800ced0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f001 fafa 	bl	800e4c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f000 fc8b 	bl	800d7ec <UART_SetConfig>
 800ced6:	4603      	mov	r3, r0
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	d101      	bne.n	800cee0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cedc:	2301      	movs	r3, #1
 800cede:	e01b      	b.n	800cf18 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	685a      	ldr	r2, [r3, #4]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ceee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	689a      	ldr	r2, [r3, #8]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cefe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	681a      	ldr	r2, [r3, #0]
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f042 0201 	orr.w	r2, r2, #1
 800cf0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f001 fb79 	bl	800e608 <UART_CheckIdleState>
 800cf16:	4603      	mov	r3, r0
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3708      	adds	r7, #8
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b08a      	sub	sp, #40	@ 0x28
 800cf24:	af02      	add	r7, sp, #8
 800cf26:	60f8      	str	r0, [r7, #12]
 800cf28:	60b9      	str	r1, [r7, #8]
 800cf2a:	603b      	str	r3, [r7, #0]
 800cf2c:	4613      	mov	r3, r2
 800cf2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf36:	2b20      	cmp	r3, #32
 800cf38:	d17b      	bne.n	800d032 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d002      	beq.n	800cf46 <HAL_UART_Transmit+0x26>
 800cf40:	88fb      	ldrh	r3, [r7, #6]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d101      	bne.n	800cf4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cf46:	2301      	movs	r3, #1
 800cf48:	e074      	b.n	800d034 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2221      	movs	r2, #33	@ 0x21
 800cf56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cf5a:	f7f5 fc93 	bl	8002884 <HAL_GetTick>
 800cf5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	88fa      	ldrh	r2, [r7, #6]
 800cf64:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	88fa      	ldrh	r2, [r7, #6]
 800cf6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	689b      	ldr	r3, [r3, #8]
 800cf74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf78:	d108      	bne.n	800cf8c <HAL_UART_Transmit+0x6c>
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	691b      	ldr	r3, [r3, #16]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d104      	bne.n	800cf8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cf82:	2300      	movs	r3, #0
 800cf84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	61bb      	str	r3, [r7, #24]
 800cf8a:	e003      	b.n	800cf94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cf90:	2300      	movs	r3, #0
 800cf92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cf94:	e030      	b.n	800cff8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	9300      	str	r3, [sp, #0]
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	2180      	movs	r1, #128	@ 0x80
 800cfa0:	68f8      	ldr	r0, [r7, #12]
 800cfa2:	f001 fbdb 	bl	800e75c <UART_WaitOnFlagUntilTimeout>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d005      	beq.n	800cfb8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2220      	movs	r2, #32
 800cfb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cfb4:	2303      	movs	r3, #3
 800cfb6:	e03d      	b.n	800d034 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cfb8:	69fb      	ldr	r3, [r7, #28]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d10b      	bne.n	800cfd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	881b      	ldrh	r3, [r3, #0]
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cfcc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cfce:	69bb      	ldr	r3, [r7, #24]
 800cfd0:	3302      	adds	r3, #2
 800cfd2:	61bb      	str	r3, [r7, #24]
 800cfd4:	e007      	b.n	800cfe6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	781a      	ldrb	r2, [r3, #0]
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cfe0:	69fb      	ldr	r3, [r7, #28]
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	3b01      	subs	r3, #1
 800cff0:	b29a      	uxth	r2, r3
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cffe:	b29b      	uxth	r3, r3
 800d000:	2b00      	cmp	r3, #0
 800d002:	d1c8      	bne.n	800cf96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	9300      	str	r3, [sp, #0]
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	2200      	movs	r2, #0
 800d00c:	2140      	movs	r1, #64	@ 0x40
 800d00e:	68f8      	ldr	r0, [r7, #12]
 800d010:	f001 fba4 	bl	800e75c <UART_WaitOnFlagUntilTimeout>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d005      	beq.n	800d026 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2220      	movs	r2, #32
 800d01e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d022:	2303      	movs	r3, #3
 800d024:	e006      	b.n	800d034 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	2220      	movs	r2, #32
 800d02a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d02e:	2300      	movs	r3, #0
 800d030:	e000      	b.n	800d034 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d032:	2302      	movs	r3, #2
  }
}
 800d034:	4618      	mov	r0, r3
 800d036:	3720      	adds	r7, #32
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b0ba      	sub	sp, #232	@ 0xe8
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	69db      	ldr	r3, [r3, #28]
 800d04a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	689b      	ldr	r3, [r3, #8]
 800d05e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d062:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d066:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d06a:	4013      	ands	r3, r2
 800d06c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d070:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d074:	2b00      	cmp	r3, #0
 800d076:	d11b      	bne.n	800d0b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d07c:	f003 0320 	and.w	r3, r3, #32
 800d080:	2b00      	cmp	r3, #0
 800d082:	d015      	beq.n	800d0b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d088:	f003 0320 	and.w	r3, r3, #32
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d105      	bne.n	800d09c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d009      	beq.n	800d0b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f000 8377 	beq.w	800d794 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	4798      	blx	r3
      }
      return;
 800d0ae:	e371      	b.n	800d794 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d0b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	f000 8123 	beq.w	800d300 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d0ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d0be:	4b8d      	ldr	r3, [pc, #564]	@ (800d2f4 <HAL_UART_IRQHandler+0x2b8>)
 800d0c0:	4013      	ands	r3, r2
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d106      	bne.n	800d0d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d0c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d0ca:	4b8b      	ldr	r3, [pc, #556]	@ (800d2f8 <HAL_UART_IRQHandler+0x2bc>)
 800d0cc:	4013      	ands	r3, r2
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	f000 8116 	beq.w	800d300 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d0d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0d8:	f003 0301 	and.w	r3, r3, #1
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d011      	beq.n	800d104 <HAL_UART_IRQHandler+0xc8>
 800d0e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d0e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d00b      	beq.n	800d104 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0fa:	f043 0201 	orr.w	r2, r3, #1
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d108:	f003 0302 	and.w	r3, r3, #2
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d011      	beq.n	800d134 <HAL_UART_IRQHandler+0xf8>
 800d110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d114:	f003 0301 	and.w	r3, r3, #1
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d00b      	beq.n	800d134 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	2202      	movs	r2, #2
 800d122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d12a:	f043 0204 	orr.w	r2, r3, #4
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d138:	f003 0304 	and.w	r3, r3, #4
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d011      	beq.n	800d164 <HAL_UART_IRQHandler+0x128>
 800d140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d144:	f003 0301 	and.w	r3, r3, #1
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d00b      	beq.n	800d164 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	2204      	movs	r2, #4
 800d152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d15a:	f043 0202 	orr.w	r2, r3, #2
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d168:	f003 0308 	and.w	r3, r3, #8
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d017      	beq.n	800d1a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d174:	f003 0320 	and.w	r3, r3, #32
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d105      	bne.n	800d188 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d17c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d180:	4b5c      	ldr	r3, [pc, #368]	@ (800d2f4 <HAL_UART_IRQHandler+0x2b8>)
 800d182:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d184:	2b00      	cmp	r3, #0
 800d186:	d00b      	beq.n	800d1a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	2208      	movs	r2, #8
 800d18e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d196:	f043 0208 	orr.w	r2, r3, #8
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d1a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d012      	beq.n	800d1d2 <HAL_UART_IRQHandler+0x196>
 800d1ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d00c      	beq.n	800d1d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d1c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1c8:	f043 0220 	orr.w	r2, r3, #32
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	f000 82dd 	beq.w	800d798 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d1de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1e2:	f003 0320 	and.w	r3, r3, #32
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d013      	beq.n	800d212 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d1ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1ee:	f003 0320 	and.w	r3, r3, #32
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d105      	bne.n	800d202 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d1f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d1fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d007      	beq.n	800d212 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d206:	2b00      	cmp	r3, #0
 800d208:	d003      	beq.n	800d212 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d218:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	689b      	ldr	r3, [r3, #8]
 800d222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d226:	2b40      	cmp	r3, #64	@ 0x40
 800d228:	d005      	beq.n	800d236 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d22a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d22e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d232:	2b00      	cmp	r3, #0
 800d234:	d054      	beq.n	800d2e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f001 fc20 	bl	800ea7c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	689b      	ldr	r3, [r3, #8]
 800d242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d246:	2b40      	cmp	r3, #64	@ 0x40
 800d248:	d146      	bne.n	800d2d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	3308      	adds	r3, #8
 800d250:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d254:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d258:	e853 3f00 	ldrex	r3, [r3]
 800d25c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d260:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d264:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d268:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	3308      	adds	r3, #8
 800d272:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d276:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d27a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d27e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d282:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d286:	e841 2300 	strex	r3, r2, [r1]
 800d28a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d28e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d1d9      	bne.n	800d24a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d017      	beq.n	800d2d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2a6:	4a15      	ldr	r2, [pc, #84]	@ (800d2fc <HAL_UART_IRQHandler+0x2c0>)
 800d2a8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f7f8 fdc5 	bl	8005e40 <HAL_DMA_Abort_IT>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d019      	beq.n	800d2f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d2ca:	4610      	mov	r0, r2
 800d2cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2ce:	e00f      	b.n	800d2f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f000 fa81 	bl	800d7d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2d6:	e00b      	b.n	800d2f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f000 fa7d 	bl	800d7d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2de:	e007      	b.n	800d2f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f000 fa79 	bl	800d7d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d2ee:	e253      	b.n	800d798 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2f0:	bf00      	nop
    return;
 800d2f2:	e251      	b.n	800d798 <HAL_UART_IRQHandler+0x75c>
 800d2f4:	10000001 	.word	0x10000001
 800d2f8:	04000120 	.word	0x04000120
 800d2fc:	0800eb49 	.word	0x0800eb49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d304:	2b01      	cmp	r3, #1
 800d306:	f040 81e7 	bne.w	800d6d8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d30a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d30e:	f003 0310 	and.w	r3, r3, #16
 800d312:	2b00      	cmp	r3, #0
 800d314:	f000 81e0 	beq.w	800d6d8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d31c:	f003 0310 	and.w	r3, r3, #16
 800d320:	2b00      	cmp	r3, #0
 800d322:	f000 81d9 	beq.w	800d6d8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	2210      	movs	r2, #16
 800d32c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d338:	2b40      	cmp	r3, #64	@ 0x40
 800d33a:	f040 8151 	bne.w	800d5e0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	4a96      	ldr	r2, [pc, #600]	@ (800d5a0 <HAL_UART_IRQHandler+0x564>)
 800d348:	4293      	cmp	r3, r2
 800d34a:	d068      	beq.n	800d41e <HAL_UART_IRQHandler+0x3e2>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	4a93      	ldr	r2, [pc, #588]	@ (800d5a4 <HAL_UART_IRQHandler+0x568>)
 800d356:	4293      	cmp	r3, r2
 800d358:	d061      	beq.n	800d41e <HAL_UART_IRQHandler+0x3e2>
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	4a91      	ldr	r2, [pc, #580]	@ (800d5a8 <HAL_UART_IRQHandler+0x56c>)
 800d364:	4293      	cmp	r3, r2
 800d366:	d05a      	beq.n	800d41e <HAL_UART_IRQHandler+0x3e2>
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4a8e      	ldr	r2, [pc, #568]	@ (800d5ac <HAL_UART_IRQHandler+0x570>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d053      	beq.n	800d41e <HAL_UART_IRQHandler+0x3e2>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4a8c      	ldr	r2, [pc, #560]	@ (800d5b0 <HAL_UART_IRQHandler+0x574>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d04c      	beq.n	800d41e <HAL_UART_IRQHandler+0x3e2>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	4a89      	ldr	r2, [pc, #548]	@ (800d5b4 <HAL_UART_IRQHandler+0x578>)
 800d38e:	4293      	cmp	r3, r2
 800d390:	d045      	beq.n	800d41e <HAL_UART_IRQHandler+0x3e2>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	4a87      	ldr	r2, [pc, #540]	@ (800d5b8 <HAL_UART_IRQHandler+0x57c>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d03e      	beq.n	800d41e <HAL_UART_IRQHandler+0x3e2>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4a84      	ldr	r2, [pc, #528]	@ (800d5bc <HAL_UART_IRQHandler+0x580>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d037      	beq.n	800d41e <HAL_UART_IRQHandler+0x3e2>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	4a82      	ldr	r2, [pc, #520]	@ (800d5c0 <HAL_UART_IRQHandler+0x584>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d030      	beq.n	800d41e <HAL_UART_IRQHandler+0x3e2>
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a7f      	ldr	r2, [pc, #508]	@ (800d5c4 <HAL_UART_IRQHandler+0x588>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d029      	beq.n	800d41e <HAL_UART_IRQHandler+0x3e2>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	4a7d      	ldr	r2, [pc, #500]	@ (800d5c8 <HAL_UART_IRQHandler+0x58c>)
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	d022      	beq.n	800d41e <HAL_UART_IRQHandler+0x3e2>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	4a7a      	ldr	r2, [pc, #488]	@ (800d5cc <HAL_UART_IRQHandler+0x590>)
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	d01b      	beq.n	800d41e <HAL_UART_IRQHandler+0x3e2>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	4a78      	ldr	r2, [pc, #480]	@ (800d5d0 <HAL_UART_IRQHandler+0x594>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d014      	beq.n	800d41e <HAL_UART_IRQHandler+0x3e2>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4a75      	ldr	r2, [pc, #468]	@ (800d5d4 <HAL_UART_IRQHandler+0x598>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d00d      	beq.n	800d41e <HAL_UART_IRQHandler+0x3e2>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4a73      	ldr	r2, [pc, #460]	@ (800d5d8 <HAL_UART_IRQHandler+0x59c>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d006      	beq.n	800d41e <HAL_UART_IRQHandler+0x3e2>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4a70      	ldr	r2, [pc, #448]	@ (800d5dc <HAL_UART_IRQHandler+0x5a0>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d106      	bne.n	800d42c <HAL_UART_IRQHandler+0x3f0>
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	b29b      	uxth	r3, r3
 800d42a:	e005      	b.n	800d438 <HAL_UART_IRQHandler+0x3fc>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	685b      	ldr	r3, [r3, #4]
 800d436:	b29b      	uxth	r3, r3
 800d438:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d43c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d440:	2b00      	cmp	r3, #0
 800d442:	f000 81ab 	beq.w	800d79c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d44c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d450:	429a      	cmp	r2, r3
 800d452:	f080 81a3 	bcs.w	800d79c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d45c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d466:	69db      	ldr	r3, [r3, #28]
 800d468:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d46c:	f000 8087 	beq.w	800d57e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d478:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d47c:	e853 3f00 	ldrex	r3, [r3]
 800d480:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d484:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d488:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d48c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	461a      	mov	r2, r3
 800d496:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d49a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d49e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d4a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d4aa:	e841 2300 	strex	r3, r2, [r1]
 800d4ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d4b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d1da      	bne.n	800d470 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	3308      	adds	r3, #8
 800d4c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d4c4:	e853 3f00 	ldrex	r3, [r3]
 800d4c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d4ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d4cc:	f023 0301 	bic.w	r3, r3, #1
 800d4d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	3308      	adds	r3, #8
 800d4da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d4de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d4e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d4e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d4ea:	e841 2300 	strex	r3, r2, [r1]
 800d4ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d4f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d1e1      	bne.n	800d4ba <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	3308      	adds	r3, #8
 800d4fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d500:	e853 3f00 	ldrex	r3, [r3]
 800d504:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d506:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d508:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d50c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	3308      	adds	r3, #8
 800d516:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d51a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d51c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d51e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d520:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d522:	e841 2300 	strex	r3, r2, [r1]
 800d526:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d528:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d1e3      	bne.n	800d4f6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2220      	movs	r2, #32
 800d532:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2200      	movs	r2, #0
 800d53a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d542:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d544:	e853 3f00 	ldrex	r3, [r3]
 800d548:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d54a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d54c:	f023 0310 	bic.w	r3, r3, #16
 800d550:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	461a      	mov	r2, r3
 800d55a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d55e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d560:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d562:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d564:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d566:	e841 2300 	strex	r3, r2, [r1]
 800d56a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d56c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d1e4      	bne.n	800d53c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d578:	4618      	mov	r0, r3
 800d57a:	f7f8 f943 	bl	8005804 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2202      	movs	r2, #2
 800d582:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d590:	b29b      	uxth	r3, r3
 800d592:	1ad3      	subs	r3, r2, r3
 800d594:	b29b      	uxth	r3, r3
 800d596:	4619      	mov	r1, r3
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f7f3 fd69 	bl	8001070 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d59e:	e0fd      	b.n	800d79c <HAL_UART_IRQHandler+0x760>
 800d5a0:	40020010 	.word	0x40020010
 800d5a4:	40020028 	.word	0x40020028
 800d5a8:	40020040 	.word	0x40020040
 800d5ac:	40020058 	.word	0x40020058
 800d5b0:	40020070 	.word	0x40020070
 800d5b4:	40020088 	.word	0x40020088
 800d5b8:	400200a0 	.word	0x400200a0
 800d5bc:	400200b8 	.word	0x400200b8
 800d5c0:	40020410 	.word	0x40020410
 800d5c4:	40020428 	.word	0x40020428
 800d5c8:	40020440 	.word	0x40020440
 800d5cc:	40020458 	.word	0x40020458
 800d5d0:	40020470 	.word	0x40020470
 800d5d4:	40020488 	.word	0x40020488
 800d5d8:	400204a0 	.word	0x400204a0
 800d5dc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d5ec:	b29b      	uxth	r3, r3
 800d5ee:	1ad3      	subs	r3, r2, r3
 800d5f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d5fa:	b29b      	uxth	r3, r3
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	f000 80cf 	beq.w	800d7a0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d602:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d606:	2b00      	cmp	r3, #0
 800d608:	f000 80ca 	beq.w	800d7a0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d614:	e853 3f00 	ldrex	r3, [r3]
 800d618:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d61a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d61c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d620:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	461a      	mov	r2, r3
 800d62a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d62e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d630:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d632:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d634:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d636:	e841 2300 	strex	r3, r2, [r1]
 800d63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d63c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d1e4      	bne.n	800d60c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	3308      	adds	r3, #8
 800d648:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d64c:	e853 3f00 	ldrex	r3, [r3]
 800d650:	623b      	str	r3, [r7, #32]
   return(result);
 800d652:	6a3a      	ldr	r2, [r7, #32]
 800d654:	4b55      	ldr	r3, [pc, #340]	@ (800d7ac <HAL_UART_IRQHandler+0x770>)
 800d656:	4013      	ands	r3, r2
 800d658:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	3308      	adds	r3, #8
 800d662:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d666:	633a      	str	r2, [r7, #48]	@ 0x30
 800d668:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d66a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d66c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d66e:	e841 2300 	strex	r3, r2, [r1]
 800d672:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d676:	2b00      	cmp	r3, #0
 800d678:	d1e3      	bne.n	800d642 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2220      	movs	r2, #32
 800d67e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2200      	movs	r2, #0
 800d68c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	e853 3f00 	ldrex	r3, [r3]
 800d69a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f023 0310 	bic.w	r3, r3, #16
 800d6a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	461a      	mov	r2, r3
 800d6ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d6b0:	61fb      	str	r3, [r7, #28]
 800d6b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6b4:	69b9      	ldr	r1, [r7, #24]
 800d6b6:	69fa      	ldr	r2, [r7, #28]
 800d6b8:	e841 2300 	strex	r3, r2, [r1]
 800d6bc:	617b      	str	r3, [r7, #20]
   return(result);
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d1e4      	bne.n	800d68e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2202      	movs	r2, #2
 800d6c8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d6ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f7f3 fccd 	bl	8001070 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d6d6:	e063      	b.n	800d7a0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d6d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d00e      	beq.n	800d702 <HAL_UART_IRQHandler+0x6c6>
 800d6e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d6e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d008      	beq.n	800d702 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d6f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f001 ff82 	bl	800f604 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d700:	e051      	b.n	800d7a6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d014      	beq.n	800d738 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d70e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d716:	2b00      	cmp	r3, #0
 800d718:	d105      	bne.n	800d726 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d71a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d71e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d722:	2b00      	cmp	r3, #0
 800d724:	d008      	beq.n	800d738 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d03a      	beq.n	800d7a4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	4798      	blx	r3
    }
    return;
 800d736:	e035      	b.n	800d7a4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d73c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d740:	2b00      	cmp	r3, #0
 800d742:	d009      	beq.n	800d758 <HAL_UART_IRQHandler+0x71c>
 800d744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d003      	beq.n	800d758 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f001 fa0f 	bl	800eb74 <UART_EndTransmit_IT>
    return;
 800d756:	e026      	b.n	800d7a6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d75c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d760:	2b00      	cmp	r3, #0
 800d762:	d009      	beq.n	800d778 <HAL_UART_IRQHandler+0x73c>
 800d764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d768:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d003      	beq.n	800d778 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f001 ff5b 	bl	800f62c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d776:	e016      	b.n	800d7a6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d77c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d780:	2b00      	cmp	r3, #0
 800d782:	d010      	beq.n	800d7a6 <HAL_UART_IRQHandler+0x76a>
 800d784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d788:	2b00      	cmp	r3, #0
 800d78a:	da0c      	bge.n	800d7a6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f001 ff43 	bl	800f618 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d792:	e008      	b.n	800d7a6 <HAL_UART_IRQHandler+0x76a>
      return;
 800d794:	bf00      	nop
 800d796:	e006      	b.n	800d7a6 <HAL_UART_IRQHandler+0x76a>
    return;
 800d798:	bf00      	nop
 800d79a:	e004      	b.n	800d7a6 <HAL_UART_IRQHandler+0x76a>
      return;
 800d79c:	bf00      	nop
 800d79e:	e002      	b.n	800d7a6 <HAL_UART_IRQHandler+0x76a>
      return;
 800d7a0:	bf00      	nop
 800d7a2:	e000      	b.n	800d7a6 <HAL_UART_IRQHandler+0x76a>
    return;
 800d7a4:	bf00      	nop
  }
}
 800d7a6:	37e8      	adds	r7, #232	@ 0xe8
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	effffffe 	.word	0xeffffffe

0800d7b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b083      	sub	sp, #12
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d7b8:	bf00      	nop
 800d7ba:	370c      	adds	r7, #12
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c2:	4770      	bx	lr

0800d7c4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b083      	sub	sp, #12
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d7cc:	bf00      	nop
 800d7ce:	370c      	adds	r7, #12
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr

0800d7d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b083      	sub	sp, #12
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d7e0:	bf00      	nop
 800d7e2:	370c      	adds	r7, #12
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr

0800d7ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d7ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d7f0:	b092      	sub	sp, #72	@ 0x48
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	689a      	ldr	r2, [r3, #8]
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	691b      	ldr	r3, [r3, #16]
 800d804:	431a      	orrs	r2, r3
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	695b      	ldr	r3, [r3, #20]
 800d80a:	431a      	orrs	r2, r3
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	69db      	ldr	r3, [r3, #28]
 800d810:	4313      	orrs	r3, r2
 800d812:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	681a      	ldr	r2, [r3, #0]
 800d81a:	4bbe      	ldr	r3, [pc, #760]	@ (800db14 <UART_SetConfig+0x328>)
 800d81c:	4013      	ands	r3, r2
 800d81e:	697a      	ldr	r2, [r7, #20]
 800d820:	6812      	ldr	r2, [r2, #0]
 800d822:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d824:	430b      	orrs	r3, r1
 800d826:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	68da      	ldr	r2, [r3, #12]
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	430a      	orrs	r2, r1
 800d83c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	699b      	ldr	r3, [r3, #24]
 800d842:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	4ab3      	ldr	r2, [pc, #716]	@ (800db18 <UART_SetConfig+0x32c>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d004      	beq.n	800d858 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	6a1b      	ldr	r3, [r3, #32]
 800d852:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d854:	4313      	orrs	r3, r2
 800d856:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	689a      	ldr	r2, [r3, #8]
 800d85e:	4baf      	ldr	r3, [pc, #700]	@ (800db1c <UART_SetConfig+0x330>)
 800d860:	4013      	ands	r3, r2
 800d862:	697a      	ldr	r2, [r7, #20]
 800d864:	6812      	ldr	r2, [r2, #0]
 800d866:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d868:	430b      	orrs	r3, r1
 800d86a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d872:	f023 010f 	bic.w	r1, r3, #15
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	430a      	orrs	r2, r1
 800d880:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	4aa6      	ldr	r2, [pc, #664]	@ (800db20 <UART_SetConfig+0x334>)
 800d888:	4293      	cmp	r3, r2
 800d88a:	d177      	bne.n	800d97c <UART_SetConfig+0x190>
 800d88c:	4ba5      	ldr	r3, [pc, #660]	@ (800db24 <UART_SetConfig+0x338>)
 800d88e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d890:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d894:	2b28      	cmp	r3, #40	@ 0x28
 800d896:	d86d      	bhi.n	800d974 <UART_SetConfig+0x188>
 800d898:	a201      	add	r2, pc, #4	@ (adr r2, 800d8a0 <UART_SetConfig+0xb4>)
 800d89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d89e:	bf00      	nop
 800d8a0:	0800d945 	.word	0x0800d945
 800d8a4:	0800d975 	.word	0x0800d975
 800d8a8:	0800d975 	.word	0x0800d975
 800d8ac:	0800d975 	.word	0x0800d975
 800d8b0:	0800d975 	.word	0x0800d975
 800d8b4:	0800d975 	.word	0x0800d975
 800d8b8:	0800d975 	.word	0x0800d975
 800d8bc:	0800d975 	.word	0x0800d975
 800d8c0:	0800d94d 	.word	0x0800d94d
 800d8c4:	0800d975 	.word	0x0800d975
 800d8c8:	0800d975 	.word	0x0800d975
 800d8cc:	0800d975 	.word	0x0800d975
 800d8d0:	0800d975 	.word	0x0800d975
 800d8d4:	0800d975 	.word	0x0800d975
 800d8d8:	0800d975 	.word	0x0800d975
 800d8dc:	0800d975 	.word	0x0800d975
 800d8e0:	0800d955 	.word	0x0800d955
 800d8e4:	0800d975 	.word	0x0800d975
 800d8e8:	0800d975 	.word	0x0800d975
 800d8ec:	0800d975 	.word	0x0800d975
 800d8f0:	0800d975 	.word	0x0800d975
 800d8f4:	0800d975 	.word	0x0800d975
 800d8f8:	0800d975 	.word	0x0800d975
 800d8fc:	0800d975 	.word	0x0800d975
 800d900:	0800d95d 	.word	0x0800d95d
 800d904:	0800d975 	.word	0x0800d975
 800d908:	0800d975 	.word	0x0800d975
 800d90c:	0800d975 	.word	0x0800d975
 800d910:	0800d975 	.word	0x0800d975
 800d914:	0800d975 	.word	0x0800d975
 800d918:	0800d975 	.word	0x0800d975
 800d91c:	0800d975 	.word	0x0800d975
 800d920:	0800d965 	.word	0x0800d965
 800d924:	0800d975 	.word	0x0800d975
 800d928:	0800d975 	.word	0x0800d975
 800d92c:	0800d975 	.word	0x0800d975
 800d930:	0800d975 	.word	0x0800d975
 800d934:	0800d975 	.word	0x0800d975
 800d938:	0800d975 	.word	0x0800d975
 800d93c:	0800d975 	.word	0x0800d975
 800d940:	0800d96d 	.word	0x0800d96d
 800d944:	2301      	movs	r3, #1
 800d946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d94a:	e326      	b.n	800df9a <UART_SetConfig+0x7ae>
 800d94c:	2304      	movs	r3, #4
 800d94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d952:	e322      	b.n	800df9a <UART_SetConfig+0x7ae>
 800d954:	2308      	movs	r3, #8
 800d956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d95a:	e31e      	b.n	800df9a <UART_SetConfig+0x7ae>
 800d95c:	2310      	movs	r3, #16
 800d95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d962:	e31a      	b.n	800df9a <UART_SetConfig+0x7ae>
 800d964:	2320      	movs	r3, #32
 800d966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d96a:	e316      	b.n	800df9a <UART_SetConfig+0x7ae>
 800d96c:	2340      	movs	r3, #64	@ 0x40
 800d96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d972:	e312      	b.n	800df9a <UART_SetConfig+0x7ae>
 800d974:	2380      	movs	r3, #128	@ 0x80
 800d976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d97a:	e30e      	b.n	800df9a <UART_SetConfig+0x7ae>
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4a69      	ldr	r2, [pc, #420]	@ (800db28 <UART_SetConfig+0x33c>)
 800d982:	4293      	cmp	r3, r2
 800d984:	d130      	bne.n	800d9e8 <UART_SetConfig+0x1fc>
 800d986:	4b67      	ldr	r3, [pc, #412]	@ (800db24 <UART_SetConfig+0x338>)
 800d988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d98a:	f003 0307 	and.w	r3, r3, #7
 800d98e:	2b05      	cmp	r3, #5
 800d990:	d826      	bhi.n	800d9e0 <UART_SetConfig+0x1f4>
 800d992:	a201      	add	r2, pc, #4	@ (adr r2, 800d998 <UART_SetConfig+0x1ac>)
 800d994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d998:	0800d9b1 	.word	0x0800d9b1
 800d99c:	0800d9b9 	.word	0x0800d9b9
 800d9a0:	0800d9c1 	.word	0x0800d9c1
 800d9a4:	0800d9c9 	.word	0x0800d9c9
 800d9a8:	0800d9d1 	.word	0x0800d9d1
 800d9ac:	0800d9d9 	.word	0x0800d9d9
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9b6:	e2f0      	b.n	800df9a <UART_SetConfig+0x7ae>
 800d9b8:	2304      	movs	r3, #4
 800d9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9be:	e2ec      	b.n	800df9a <UART_SetConfig+0x7ae>
 800d9c0:	2308      	movs	r3, #8
 800d9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9c6:	e2e8      	b.n	800df9a <UART_SetConfig+0x7ae>
 800d9c8:	2310      	movs	r3, #16
 800d9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ce:	e2e4      	b.n	800df9a <UART_SetConfig+0x7ae>
 800d9d0:	2320      	movs	r3, #32
 800d9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9d6:	e2e0      	b.n	800df9a <UART_SetConfig+0x7ae>
 800d9d8:	2340      	movs	r3, #64	@ 0x40
 800d9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9de:	e2dc      	b.n	800df9a <UART_SetConfig+0x7ae>
 800d9e0:	2380      	movs	r3, #128	@ 0x80
 800d9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9e6:	e2d8      	b.n	800df9a <UART_SetConfig+0x7ae>
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a4f      	ldr	r2, [pc, #316]	@ (800db2c <UART_SetConfig+0x340>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d130      	bne.n	800da54 <UART_SetConfig+0x268>
 800d9f2:	4b4c      	ldr	r3, [pc, #304]	@ (800db24 <UART_SetConfig+0x338>)
 800d9f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9f6:	f003 0307 	and.w	r3, r3, #7
 800d9fa:	2b05      	cmp	r3, #5
 800d9fc:	d826      	bhi.n	800da4c <UART_SetConfig+0x260>
 800d9fe:	a201      	add	r2, pc, #4	@ (adr r2, 800da04 <UART_SetConfig+0x218>)
 800da00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da04:	0800da1d 	.word	0x0800da1d
 800da08:	0800da25 	.word	0x0800da25
 800da0c:	0800da2d 	.word	0x0800da2d
 800da10:	0800da35 	.word	0x0800da35
 800da14:	0800da3d 	.word	0x0800da3d
 800da18:	0800da45 	.word	0x0800da45
 800da1c:	2300      	movs	r3, #0
 800da1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da22:	e2ba      	b.n	800df9a <UART_SetConfig+0x7ae>
 800da24:	2304      	movs	r3, #4
 800da26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da2a:	e2b6      	b.n	800df9a <UART_SetConfig+0x7ae>
 800da2c:	2308      	movs	r3, #8
 800da2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da32:	e2b2      	b.n	800df9a <UART_SetConfig+0x7ae>
 800da34:	2310      	movs	r3, #16
 800da36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da3a:	e2ae      	b.n	800df9a <UART_SetConfig+0x7ae>
 800da3c:	2320      	movs	r3, #32
 800da3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da42:	e2aa      	b.n	800df9a <UART_SetConfig+0x7ae>
 800da44:	2340      	movs	r3, #64	@ 0x40
 800da46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da4a:	e2a6      	b.n	800df9a <UART_SetConfig+0x7ae>
 800da4c:	2380      	movs	r3, #128	@ 0x80
 800da4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da52:	e2a2      	b.n	800df9a <UART_SetConfig+0x7ae>
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4a35      	ldr	r2, [pc, #212]	@ (800db30 <UART_SetConfig+0x344>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d130      	bne.n	800dac0 <UART_SetConfig+0x2d4>
 800da5e:	4b31      	ldr	r3, [pc, #196]	@ (800db24 <UART_SetConfig+0x338>)
 800da60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da62:	f003 0307 	and.w	r3, r3, #7
 800da66:	2b05      	cmp	r3, #5
 800da68:	d826      	bhi.n	800dab8 <UART_SetConfig+0x2cc>
 800da6a:	a201      	add	r2, pc, #4	@ (adr r2, 800da70 <UART_SetConfig+0x284>)
 800da6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da70:	0800da89 	.word	0x0800da89
 800da74:	0800da91 	.word	0x0800da91
 800da78:	0800da99 	.word	0x0800da99
 800da7c:	0800daa1 	.word	0x0800daa1
 800da80:	0800daa9 	.word	0x0800daa9
 800da84:	0800dab1 	.word	0x0800dab1
 800da88:	2300      	movs	r3, #0
 800da8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da8e:	e284      	b.n	800df9a <UART_SetConfig+0x7ae>
 800da90:	2304      	movs	r3, #4
 800da92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da96:	e280      	b.n	800df9a <UART_SetConfig+0x7ae>
 800da98:	2308      	movs	r3, #8
 800da9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da9e:	e27c      	b.n	800df9a <UART_SetConfig+0x7ae>
 800daa0:	2310      	movs	r3, #16
 800daa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daa6:	e278      	b.n	800df9a <UART_SetConfig+0x7ae>
 800daa8:	2320      	movs	r3, #32
 800daaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daae:	e274      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dab0:	2340      	movs	r3, #64	@ 0x40
 800dab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dab6:	e270      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dab8:	2380      	movs	r3, #128	@ 0x80
 800daba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dabe:	e26c      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	4a1b      	ldr	r2, [pc, #108]	@ (800db34 <UART_SetConfig+0x348>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d142      	bne.n	800db50 <UART_SetConfig+0x364>
 800daca:	4b16      	ldr	r3, [pc, #88]	@ (800db24 <UART_SetConfig+0x338>)
 800dacc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dace:	f003 0307 	and.w	r3, r3, #7
 800dad2:	2b05      	cmp	r3, #5
 800dad4:	d838      	bhi.n	800db48 <UART_SetConfig+0x35c>
 800dad6:	a201      	add	r2, pc, #4	@ (adr r2, 800dadc <UART_SetConfig+0x2f0>)
 800dad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dadc:	0800daf5 	.word	0x0800daf5
 800dae0:	0800dafd 	.word	0x0800dafd
 800dae4:	0800db05 	.word	0x0800db05
 800dae8:	0800db0d 	.word	0x0800db0d
 800daec:	0800db39 	.word	0x0800db39
 800daf0:	0800db41 	.word	0x0800db41
 800daf4:	2300      	movs	r3, #0
 800daf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dafa:	e24e      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dafc:	2304      	movs	r3, #4
 800dafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db02:	e24a      	b.n	800df9a <UART_SetConfig+0x7ae>
 800db04:	2308      	movs	r3, #8
 800db06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db0a:	e246      	b.n	800df9a <UART_SetConfig+0x7ae>
 800db0c:	2310      	movs	r3, #16
 800db0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db12:	e242      	b.n	800df9a <UART_SetConfig+0x7ae>
 800db14:	cfff69f3 	.word	0xcfff69f3
 800db18:	58000c00 	.word	0x58000c00
 800db1c:	11fff4ff 	.word	0x11fff4ff
 800db20:	40011000 	.word	0x40011000
 800db24:	58024400 	.word	0x58024400
 800db28:	40004400 	.word	0x40004400
 800db2c:	40004800 	.word	0x40004800
 800db30:	40004c00 	.word	0x40004c00
 800db34:	40005000 	.word	0x40005000
 800db38:	2320      	movs	r3, #32
 800db3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db3e:	e22c      	b.n	800df9a <UART_SetConfig+0x7ae>
 800db40:	2340      	movs	r3, #64	@ 0x40
 800db42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db46:	e228      	b.n	800df9a <UART_SetConfig+0x7ae>
 800db48:	2380      	movs	r3, #128	@ 0x80
 800db4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db4e:	e224      	b.n	800df9a <UART_SetConfig+0x7ae>
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	4ab1      	ldr	r2, [pc, #708]	@ (800de1c <UART_SetConfig+0x630>)
 800db56:	4293      	cmp	r3, r2
 800db58:	d176      	bne.n	800dc48 <UART_SetConfig+0x45c>
 800db5a:	4bb1      	ldr	r3, [pc, #708]	@ (800de20 <UART_SetConfig+0x634>)
 800db5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800db62:	2b28      	cmp	r3, #40	@ 0x28
 800db64:	d86c      	bhi.n	800dc40 <UART_SetConfig+0x454>
 800db66:	a201      	add	r2, pc, #4	@ (adr r2, 800db6c <UART_SetConfig+0x380>)
 800db68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db6c:	0800dc11 	.word	0x0800dc11
 800db70:	0800dc41 	.word	0x0800dc41
 800db74:	0800dc41 	.word	0x0800dc41
 800db78:	0800dc41 	.word	0x0800dc41
 800db7c:	0800dc41 	.word	0x0800dc41
 800db80:	0800dc41 	.word	0x0800dc41
 800db84:	0800dc41 	.word	0x0800dc41
 800db88:	0800dc41 	.word	0x0800dc41
 800db8c:	0800dc19 	.word	0x0800dc19
 800db90:	0800dc41 	.word	0x0800dc41
 800db94:	0800dc41 	.word	0x0800dc41
 800db98:	0800dc41 	.word	0x0800dc41
 800db9c:	0800dc41 	.word	0x0800dc41
 800dba0:	0800dc41 	.word	0x0800dc41
 800dba4:	0800dc41 	.word	0x0800dc41
 800dba8:	0800dc41 	.word	0x0800dc41
 800dbac:	0800dc21 	.word	0x0800dc21
 800dbb0:	0800dc41 	.word	0x0800dc41
 800dbb4:	0800dc41 	.word	0x0800dc41
 800dbb8:	0800dc41 	.word	0x0800dc41
 800dbbc:	0800dc41 	.word	0x0800dc41
 800dbc0:	0800dc41 	.word	0x0800dc41
 800dbc4:	0800dc41 	.word	0x0800dc41
 800dbc8:	0800dc41 	.word	0x0800dc41
 800dbcc:	0800dc29 	.word	0x0800dc29
 800dbd0:	0800dc41 	.word	0x0800dc41
 800dbd4:	0800dc41 	.word	0x0800dc41
 800dbd8:	0800dc41 	.word	0x0800dc41
 800dbdc:	0800dc41 	.word	0x0800dc41
 800dbe0:	0800dc41 	.word	0x0800dc41
 800dbe4:	0800dc41 	.word	0x0800dc41
 800dbe8:	0800dc41 	.word	0x0800dc41
 800dbec:	0800dc31 	.word	0x0800dc31
 800dbf0:	0800dc41 	.word	0x0800dc41
 800dbf4:	0800dc41 	.word	0x0800dc41
 800dbf8:	0800dc41 	.word	0x0800dc41
 800dbfc:	0800dc41 	.word	0x0800dc41
 800dc00:	0800dc41 	.word	0x0800dc41
 800dc04:	0800dc41 	.word	0x0800dc41
 800dc08:	0800dc41 	.word	0x0800dc41
 800dc0c:	0800dc39 	.word	0x0800dc39
 800dc10:	2301      	movs	r3, #1
 800dc12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc16:	e1c0      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dc18:	2304      	movs	r3, #4
 800dc1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc1e:	e1bc      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dc20:	2308      	movs	r3, #8
 800dc22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc26:	e1b8      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dc28:	2310      	movs	r3, #16
 800dc2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc2e:	e1b4      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dc30:	2320      	movs	r3, #32
 800dc32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc36:	e1b0      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dc38:	2340      	movs	r3, #64	@ 0x40
 800dc3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc3e:	e1ac      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dc40:	2380      	movs	r3, #128	@ 0x80
 800dc42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc46:	e1a8      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4a75      	ldr	r2, [pc, #468]	@ (800de24 <UART_SetConfig+0x638>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d130      	bne.n	800dcb4 <UART_SetConfig+0x4c8>
 800dc52:	4b73      	ldr	r3, [pc, #460]	@ (800de20 <UART_SetConfig+0x634>)
 800dc54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc56:	f003 0307 	and.w	r3, r3, #7
 800dc5a:	2b05      	cmp	r3, #5
 800dc5c:	d826      	bhi.n	800dcac <UART_SetConfig+0x4c0>
 800dc5e:	a201      	add	r2, pc, #4	@ (adr r2, 800dc64 <UART_SetConfig+0x478>)
 800dc60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc64:	0800dc7d 	.word	0x0800dc7d
 800dc68:	0800dc85 	.word	0x0800dc85
 800dc6c:	0800dc8d 	.word	0x0800dc8d
 800dc70:	0800dc95 	.word	0x0800dc95
 800dc74:	0800dc9d 	.word	0x0800dc9d
 800dc78:	0800dca5 	.word	0x0800dca5
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc82:	e18a      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dc84:	2304      	movs	r3, #4
 800dc86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc8a:	e186      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dc8c:	2308      	movs	r3, #8
 800dc8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc92:	e182      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dc94:	2310      	movs	r3, #16
 800dc96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc9a:	e17e      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dc9c:	2320      	movs	r3, #32
 800dc9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dca2:	e17a      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dca4:	2340      	movs	r3, #64	@ 0x40
 800dca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcaa:	e176      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dcac:	2380      	movs	r3, #128	@ 0x80
 800dcae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcb2:	e172      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	4a5b      	ldr	r2, [pc, #364]	@ (800de28 <UART_SetConfig+0x63c>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d130      	bne.n	800dd20 <UART_SetConfig+0x534>
 800dcbe:	4b58      	ldr	r3, [pc, #352]	@ (800de20 <UART_SetConfig+0x634>)
 800dcc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcc2:	f003 0307 	and.w	r3, r3, #7
 800dcc6:	2b05      	cmp	r3, #5
 800dcc8:	d826      	bhi.n	800dd18 <UART_SetConfig+0x52c>
 800dcca:	a201      	add	r2, pc, #4	@ (adr r2, 800dcd0 <UART_SetConfig+0x4e4>)
 800dccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcd0:	0800dce9 	.word	0x0800dce9
 800dcd4:	0800dcf1 	.word	0x0800dcf1
 800dcd8:	0800dcf9 	.word	0x0800dcf9
 800dcdc:	0800dd01 	.word	0x0800dd01
 800dce0:	0800dd09 	.word	0x0800dd09
 800dce4:	0800dd11 	.word	0x0800dd11
 800dce8:	2300      	movs	r3, #0
 800dcea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcee:	e154      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dcf0:	2304      	movs	r3, #4
 800dcf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcf6:	e150      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dcf8:	2308      	movs	r3, #8
 800dcfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcfe:	e14c      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dd00:	2310      	movs	r3, #16
 800dd02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd06:	e148      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dd08:	2320      	movs	r3, #32
 800dd0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd0e:	e144      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dd10:	2340      	movs	r3, #64	@ 0x40
 800dd12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd16:	e140      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dd18:	2380      	movs	r3, #128	@ 0x80
 800dd1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd1e:	e13c      	b.n	800df9a <UART_SetConfig+0x7ae>
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	4a41      	ldr	r2, [pc, #260]	@ (800de2c <UART_SetConfig+0x640>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	f040 8082 	bne.w	800de30 <UART_SetConfig+0x644>
 800dd2c:	4b3c      	ldr	r3, [pc, #240]	@ (800de20 <UART_SetConfig+0x634>)
 800dd2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dd34:	2b28      	cmp	r3, #40	@ 0x28
 800dd36:	d86d      	bhi.n	800de14 <UART_SetConfig+0x628>
 800dd38:	a201      	add	r2, pc, #4	@ (adr r2, 800dd40 <UART_SetConfig+0x554>)
 800dd3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd3e:	bf00      	nop
 800dd40:	0800dde5 	.word	0x0800dde5
 800dd44:	0800de15 	.word	0x0800de15
 800dd48:	0800de15 	.word	0x0800de15
 800dd4c:	0800de15 	.word	0x0800de15
 800dd50:	0800de15 	.word	0x0800de15
 800dd54:	0800de15 	.word	0x0800de15
 800dd58:	0800de15 	.word	0x0800de15
 800dd5c:	0800de15 	.word	0x0800de15
 800dd60:	0800dded 	.word	0x0800dded
 800dd64:	0800de15 	.word	0x0800de15
 800dd68:	0800de15 	.word	0x0800de15
 800dd6c:	0800de15 	.word	0x0800de15
 800dd70:	0800de15 	.word	0x0800de15
 800dd74:	0800de15 	.word	0x0800de15
 800dd78:	0800de15 	.word	0x0800de15
 800dd7c:	0800de15 	.word	0x0800de15
 800dd80:	0800ddf5 	.word	0x0800ddf5
 800dd84:	0800de15 	.word	0x0800de15
 800dd88:	0800de15 	.word	0x0800de15
 800dd8c:	0800de15 	.word	0x0800de15
 800dd90:	0800de15 	.word	0x0800de15
 800dd94:	0800de15 	.word	0x0800de15
 800dd98:	0800de15 	.word	0x0800de15
 800dd9c:	0800de15 	.word	0x0800de15
 800dda0:	0800ddfd 	.word	0x0800ddfd
 800dda4:	0800de15 	.word	0x0800de15
 800dda8:	0800de15 	.word	0x0800de15
 800ddac:	0800de15 	.word	0x0800de15
 800ddb0:	0800de15 	.word	0x0800de15
 800ddb4:	0800de15 	.word	0x0800de15
 800ddb8:	0800de15 	.word	0x0800de15
 800ddbc:	0800de15 	.word	0x0800de15
 800ddc0:	0800de05 	.word	0x0800de05
 800ddc4:	0800de15 	.word	0x0800de15
 800ddc8:	0800de15 	.word	0x0800de15
 800ddcc:	0800de15 	.word	0x0800de15
 800ddd0:	0800de15 	.word	0x0800de15
 800ddd4:	0800de15 	.word	0x0800de15
 800ddd8:	0800de15 	.word	0x0800de15
 800dddc:	0800de15 	.word	0x0800de15
 800dde0:	0800de0d 	.word	0x0800de0d
 800dde4:	2301      	movs	r3, #1
 800dde6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddea:	e0d6      	b.n	800df9a <UART_SetConfig+0x7ae>
 800ddec:	2304      	movs	r3, #4
 800ddee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddf2:	e0d2      	b.n	800df9a <UART_SetConfig+0x7ae>
 800ddf4:	2308      	movs	r3, #8
 800ddf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddfa:	e0ce      	b.n	800df9a <UART_SetConfig+0x7ae>
 800ddfc:	2310      	movs	r3, #16
 800ddfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de02:	e0ca      	b.n	800df9a <UART_SetConfig+0x7ae>
 800de04:	2320      	movs	r3, #32
 800de06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de0a:	e0c6      	b.n	800df9a <UART_SetConfig+0x7ae>
 800de0c:	2340      	movs	r3, #64	@ 0x40
 800de0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de12:	e0c2      	b.n	800df9a <UART_SetConfig+0x7ae>
 800de14:	2380      	movs	r3, #128	@ 0x80
 800de16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de1a:	e0be      	b.n	800df9a <UART_SetConfig+0x7ae>
 800de1c:	40011400 	.word	0x40011400
 800de20:	58024400 	.word	0x58024400
 800de24:	40007800 	.word	0x40007800
 800de28:	40007c00 	.word	0x40007c00
 800de2c:	40011800 	.word	0x40011800
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4aad      	ldr	r2, [pc, #692]	@ (800e0ec <UART_SetConfig+0x900>)
 800de36:	4293      	cmp	r3, r2
 800de38:	d176      	bne.n	800df28 <UART_SetConfig+0x73c>
 800de3a:	4bad      	ldr	r3, [pc, #692]	@ (800e0f0 <UART_SetConfig+0x904>)
 800de3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800de42:	2b28      	cmp	r3, #40	@ 0x28
 800de44:	d86c      	bhi.n	800df20 <UART_SetConfig+0x734>
 800de46:	a201      	add	r2, pc, #4	@ (adr r2, 800de4c <UART_SetConfig+0x660>)
 800de48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de4c:	0800def1 	.word	0x0800def1
 800de50:	0800df21 	.word	0x0800df21
 800de54:	0800df21 	.word	0x0800df21
 800de58:	0800df21 	.word	0x0800df21
 800de5c:	0800df21 	.word	0x0800df21
 800de60:	0800df21 	.word	0x0800df21
 800de64:	0800df21 	.word	0x0800df21
 800de68:	0800df21 	.word	0x0800df21
 800de6c:	0800def9 	.word	0x0800def9
 800de70:	0800df21 	.word	0x0800df21
 800de74:	0800df21 	.word	0x0800df21
 800de78:	0800df21 	.word	0x0800df21
 800de7c:	0800df21 	.word	0x0800df21
 800de80:	0800df21 	.word	0x0800df21
 800de84:	0800df21 	.word	0x0800df21
 800de88:	0800df21 	.word	0x0800df21
 800de8c:	0800df01 	.word	0x0800df01
 800de90:	0800df21 	.word	0x0800df21
 800de94:	0800df21 	.word	0x0800df21
 800de98:	0800df21 	.word	0x0800df21
 800de9c:	0800df21 	.word	0x0800df21
 800dea0:	0800df21 	.word	0x0800df21
 800dea4:	0800df21 	.word	0x0800df21
 800dea8:	0800df21 	.word	0x0800df21
 800deac:	0800df09 	.word	0x0800df09
 800deb0:	0800df21 	.word	0x0800df21
 800deb4:	0800df21 	.word	0x0800df21
 800deb8:	0800df21 	.word	0x0800df21
 800debc:	0800df21 	.word	0x0800df21
 800dec0:	0800df21 	.word	0x0800df21
 800dec4:	0800df21 	.word	0x0800df21
 800dec8:	0800df21 	.word	0x0800df21
 800decc:	0800df11 	.word	0x0800df11
 800ded0:	0800df21 	.word	0x0800df21
 800ded4:	0800df21 	.word	0x0800df21
 800ded8:	0800df21 	.word	0x0800df21
 800dedc:	0800df21 	.word	0x0800df21
 800dee0:	0800df21 	.word	0x0800df21
 800dee4:	0800df21 	.word	0x0800df21
 800dee8:	0800df21 	.word	0x0800df21
 800deec:	0800df19 	.word	0x0800df19
 800def0:	2301      	movs	r3, #1
 800def2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800def6:	e050      	b.n	800df9a <UART_SetConfig+0x7ae>
 800def8:	2304      	movs	r3, #4
 800defa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800defe:	e04c      	b.n	800df9a <UART_SetConfig+0x7ae>
 800df00:	2308      	movs	r3, #8
 800df02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df06:	e048      	b.n	800df9a <UART_SetConfig+0x7ae>
 800df08:	2310      	movs	r3, #16
 800df0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df0e:	e044      	b.n	800df9a <UART_SetConfig+0x7ae>
 800df10:	2320      	movs	r3, #32
 800df12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df16:	e040      	b.n	800df9a <UART_SetConfig+0x7ae>
 800df18:	2340      	movs	r3, #64	@ 0x40
 800df1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df1e:	e03c      	b.n	800df9a <UART_SetConfig+0x7ae>
 800df20:	2380      	movs	r3, #128	@ 0x80
 800df22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df26:	e038      	b.n	800df9a <UART_SetConfig+0x7ae>
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4a71      	ldr	r2, [pc, #452]	@ (800e0f4 <UART_SetConfig+0x908>)
 800df2e:	4293      	cmp	r3, r2
 800df30:	d130      	bne.n	800df94 <UART_SetConfig+0x7a8>
 800df32:	4b6f      	ldr	r3, [pc, #444]	@ (800e0f0 <UART_SetConfig+0x904>)
 800df34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df36:	f003 0307 	and.w	r3, r3, #7
 800df3a:	2b05      	cmp	r3, #5
 800df3c:	d826      	bhi.n	800df8c <UART_SetConfig+0x7a0>
 800df3e:	a201      	add	r2, pc, #4	@ (adr r2, 800df44 <UART_SetConfig+0x758>)
 800df40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df44:	0800df5d 	.word	0x0800df5d
 800df48:	0800df65 	.word	0x0800df65
 800df4c:	0800df6d 	.word	0x0800df6d
 800df50:	0800df75 	.word	0x0800df75
 800df54:	0800df7d 	.word	0x0800df7d
 800df58:	0800df85 	.word	0x0800df85
 800df5c:	2302      	movs	r3, #2
 800df5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df62:	e01a      	b.n	800df9a <UART_SetConfig+0x7ae>
 800df64:	2304      	movs	r3, #4
 800df66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df6a:	e016      	b.n	800df9a <UART_SetConfig+0x7ae>
 800df6c:	2308      	movs	r3, #8
 800df6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df72:	e012      	b.n	800df9a <UART_SetConfig+0x7ae>
 800df74:	2310      	movs	r3, #16
 800df76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df7a:	e00e      	b.n	800df9a <UART_SetConfig+0x7ae>
 800df7c:	2320      	movs	r3, #32
 800df7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df82:	e00a      	b.n	800df9a <UART_SetConfig+0x7ae>
 800df84:	2340      	movs	r3, #64	@ 0x40
 800df86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df8a:	e006      	b.n	800df9a <UART_SetConfig+0x7ae>
 800df8c:	2380      	movs	r3, #128	@ 0x80
 800df8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df92:	e002      	b.n	800df9a <UART_SetConfig+0x7ae>
 800df94:	2380      	movs	r3, #128	@ 0x80
 800df96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	4a55      	ldr	r2, [pc, #340]	@ (800e0f4 <UART_SetConfig+0x908>)
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	f040 80f8 	bne.w	800e196 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dfa6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dfaa:	2b20      	cmp	r3, #32
 800dfac:	dc46      	bgt.n	800e03c <UART_SetConfig+0x850>
 800dfae:	2b02      	cmp	r3, #2
 800dfb0:	db75      	blt.n	800e09e <UART_SetConfig+0x8b2>
 800dfb2:	3b02      	subs	r3, #2
 800dfb4:	2b1e      	cmp	r3, #30
 800dfb6:	d872      	bhi.n	800e09e <UART_SetConfig+0x8b2>
 800dfb8:	a201      	add	r2, pc, #4	@ (adr r2, 800dfc0 <UART_SetConfig+0x7d4>)
 800dfba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfbe:	bf00      	nop
 800dfc0:	0800e043 	.word	0x0800e043
 800dfc4:	0800e09f 	.word	0x0800e09f
 800dfc8:	0800e04b 	.word	0x0800e04b
 800dfcc:	0800e09f 	.word	0x0800e09f
 800dfd0:	0800e09f 	.word	0x0800e09f
 800dfd4:	0800e09f 	.word	0x0800e09f
 800dfd8:	0800e05b 	.word	0x0800e05b
 800dfdc:	0800e09f 	.word	0x0800e09f
 800dfe0:	0800e09f 	.word	0x0800e09f
 800dfe4:	0800e09f 	.word	0x0800e09f
 800dfe8:	0800e09f 	.word	0x0800e09f
 800dfec:	0800e09f 	.word	0x0800e09f
 800dff0:	0800e09f 	.word	0x0800e09f
 800dff4:	0800e09f 	.word	0x0800e09f
 800dff8:	0800e06b 	.word	0x0800e06b
 800dffc:	0800e09f 	.word	0x0800e09f
 800e000:	0800e09f 	.word	0x0800e09f
 800e004:	0800e09f 	.word	0x0800e09f
 800e008:	0800e09f 	.word	0x0800e09f
 800e00c:	0800e09f 	.word	0x0800e09f
 800e010:	0800e09f 	.word	0x0800e09f
 800e014:	0800e09f 	.word	0x0800e09f
 800e018:	0800e09f 	.word	0x0800e09f
 800e01c:	0800e09f 	.word	0x0800e09f
 800e020:	0800e09f 	.word	0x0800e09f
 800e024:	0800e09f 	.word	0x0800e09f
 800e028:	0800e09f 	.word	0x0800e09f
 800e02c:	0800e09f 	.word	0x0800e09f
 800e030:	0800e09f 	.word	0x0800e09f
 800e034:	0800e09f 	.word	0x0800e09f
 800e038:	0800e091 	.word	0x0800e091
 800e03c:	2b40      	cmp	r3, #64	@ 0x40
 800e03e:	d02a      	beq.n	800e096 <UART_SetConfig+0x8aa>
 800e040:	e02d      	b.n	800e09e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e042:	f7fc fc5d 	bl	800a900 <HAL_RCCEx_GetD3PCLK1Freq>
 800e046:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e048:	e02f      	b.n	800e0aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e04a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e04e:	4618      	mov	r0, r3
 800e050:	f7fc fc6c 	bl	800a92c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e058:	e027      	b.n	800e0aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e05a:	f107 0318 	add.w	r3, r7, #24
 800e05e:	4618      	mov	r0, r3
 800e060:	f7fc fdb8 	bl	800abd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e068:	e01f      	b.n	800e0aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e06a:	4b21      	ldr	r3, [pc, #132]	@ (800e0f0 <UART_SetConfig+0x904>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f003 0320 	and.w	r3, r3, #32
 800e072:	2b00      	cmp	r3, #0
 800e074:	d009      	beq.n	800e08a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e076:	4b1e      	ldr	r3, [pc, #120]	@ (800e0f0 <UART_SetConfig+0x904>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	08db      	lsrs	r3, r3, #3
 800e07c:	f003 0303 	and.w	r3, r3, #3
 800e080:	4a1d      	ldr	r2, [pc, #116]	@ (800e0f8 <UART_SetConfig+0x90c>)
 800e082:	fa22 f303 	lsr.w	r3, r2, r3
 800e086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e088:	e00f      	b.n	800e0aa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e08a:	4b1b      	ldr	r3, [pc, #108]	@ (800e0f8 <UART_SetConfig+0x90c>)
 800e08c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e08e:	e00c      	b.n	800e0aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e090:	4b1a      	ldr	r3, [pc, #104]	@ (800e0fc <UART_SetConfig+0x910>)
 800e092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e094:	e009      	b.n	800e0aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e096:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e09a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e09c:	e005      	b.n	800e0aa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e0a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e0aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	f000 81ee 	beq.w	800e48e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0b6:	4a12      	ldr	r2, [pc, #72]	@ (800e100 <UART_SetConfig+0x914>)
 800e0b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0bc:	461a      	mov	r2, r3
 800e0be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0c4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	685a      	ldr	r2, [r3, #4]
 800e0ca:	4613      	mov	r3, r2
 800e0cc:	005b      	lsls	r3, r3, #1
 800e0ce:	4413      	add	r3, r2
 800e0d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d305      	bcc.n	800e0e2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	685b      	ldr	r3, [r3, #4]
 800e0da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e0dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	d910      	bls.n	800e104 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e0e8:	e1d1      	b.n	800e48e <UART_SetConfig+0xca2>
 800e0ea:	bf00      	nop
 800e0ec:	40011c00 	.word	0x40011c00
 800e0f0:	58024400 	.word	0x58024400
 800e0f4:	58000c00 	.word	0x58000c00
 800e0f8:	03d09000 	.word	0x03d09000
 800e0fc:	003d0900 	.word	0x003d0900
 800e100:	0800fbe0 	.word	0x0800fbe0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e106:	2200      	movs	r2, #0
 800e108:	60bb      	str	r3, [r7, #8]
 800e10a:	60fa      	str	r2, [r7, #12]
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e110:	4ac0      	ldr	r2, [pc, #768]	@ (800e414 <UART_SetConfig+0xc28>)
 800e112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e116:	b29b      	uxth	r3, r3
 800e118:	2200      	movs	r2, #0
 800e11a:	603b      	str	r3, [r7, #0]
 800e11c:	607a      	str	r2, [r7, #4]
 800e11e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e122:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e126:	f7f2 f8f1 	bl	800030c <__aeabi_uldivmod>
 800e12a:	4602      	mov	r2, r0
 800e12c:	460b      	mov	r3, r1
 800e12e:	4610      	mov	r0, r2
 800e130:	4619      	mov	r1, r3
 800e132:	f04f 0200 	mov.w	r2, #0
 800e136:	f04f 0300 	mov.w	r3, #0
 800e13a:	020b      	lsls	r3, r1, #8
 800e13c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e140:	0202      	lsls	r2, r0, #8
 800e142:	6979      	ldr	r1, [r7, #20]
 800e144:	6849      	ldr	r1, [r1, #4]
 800e146:	0849      	lsrs	r1, r1, #1
 800e148:	2000      	movs	r0, #0
 800e14a:	460c      	mov	r4, r1
 800e14c:	4605      	mov	r5, r0
 800e14e:	eb12 0804 	adds.w	r8, r2, r4
 800e152:	eb43 0905 	adc.w	r9, r3, r5
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	2200      	movs	r2, #0
 800e15c:	469a      	mov	sl, r3
 800e15e:	4693      	mov	fp, r2
 800e160:	4652      	mov	r2, sl
 800e162:	465b      	mov	r3, fp
 800e164:	4640      	mov	r0, r8
 800e166:	4649      	mov	r1, r9
 800e168:	f7f2 f8d0 	bl	800030c <__aeabi_uldivmod>
 800e16c:	4602      	mov	r2, r0
 800e16e:	460b      	mov	r3, r1
 800e170:	4613      	mov	r3, r2
 800e172:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e176:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e17a:	d308      	bcc.n	800e18e <UART_SetConfig+0x9a2>
 800e17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e17e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e182:	d204      	bcs.n	800e18e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e18a:	60da      	str	r2, [r3, #12]
 800e18c:	e17f      	b.n	800e48e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e18e:	2301      	movs	r3, #1
 800e190:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e194:	e17b      	b.n	800e48e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	69db      	ldr	r3, [r3, #28]
 800e19a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e19e:	f040 80bd 	bne.w	800e31c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e1a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e1a6:	2b20      	cmp	r3, #32
 800e1a8:	dc48      	bgt.n	800e23c <UART_SetConfig+0xa50>
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	db7b      	blt.n	800e2a6 <UART_SetConfig+0xaba>
 800e1ae:	2b20      	cmp	r3, #32
 800e1b0:	d879      	bhi.n	800e2a6 <UART_SetConfig+0xaba>
 800e1b2:	a201      	add	r2, pc, #4	@ (adr r2, 800e1b8 <UART_SetConfig+0x9cc>)
 800e1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1b8:	0800e243 	.word	0x0800e243
 800e1bc:	0800e24b 	.word	0x0800e24b
 800e1c0:	0800e2a7 	.word	0x0800e2a7
 800e1c4:	0800e2a7 	.word	0x0800e2a7
 800e1c8:	0800e253 	.word	0x0800e253
 800e1cc:	0800e2a7 	.word	0x0800e2a7
 800e1d0:	0800e2a7 	.word	0x0800e2a7
 800e1d4:	0800e2a7 	.word	0x0800e2a7
 800e1d8:	0800e263 	.word	0x0800e263
 800e1dc:	0800e2a7 	.word	0x0800e2a7
 800e1e0:	0800e2a7 	.word	0x0800e2a7
 800e1e4:	0800e2a7 	.word	0x0800e2a7
 800e1e8:	0800e2a7 	.word	0x0800e2a7
 800e1ec:	0800e2a7 	.word	0x0800e2a7
 800e1f0:	0800e2a7 	.word	0x0800e2a7
 800e1f4:	0800e2a7 	.word	0x0800e2a7
 800e1f8:	0800e273 	.word	0x0800e273
 800e1fc:	0800e2a7 	.word	0x0800e2a7
 800e200:	0800e2a7 	.word	0x0800e2a7
 800e204:	0800e2a7 	.word	0x0800e2a7
 800e208:	0800e2a7 	.word	0x0800e2a7
 800e20c:	0800e2a7 	.word	0x0800e2a7
 800e210:	0800e2a7 	.word	0x0800e2a7
 800e214:	0800e2a7 	.word	0x0800e2a7
 800e218:	0800e2a7 	.word	0x0800e2a7
 800e21c:	0800e2a7 	.word	0x0800e2a7
 800e220:	0800e2a7 	.word	0x0800e2a7
 800e224:	0800e2a7 	.word	0x0800e2a7
 800e228:	0800e2a7 	.word	0x0800e2a7
 800e22c:	0800e2a7 	.word	0x0800e2a7
 800e230:	0800e2a7 	.word	0x0800e2a7
 800e234:	0800e2a7 	.word	0x0800e2a7
 800e238:	0800e299 	.word	0x0800e299
 800e23c:	2b40      	cmp	r3, #64	@ 0x40
 800e23e:	d02e      	beq.n	800e29e <UART_SetConfig+0xab2>
 800e240:	e031      	b.n	800e2a6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e242:	f7fa fcbf 	bl	8008bc4 <HAL_RCC_GetPCLK1Freq>
 800e246:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e248:	e033      	b.n	800e2b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e24a:	f7fa fcd1 	bl	8008bf0 <HAL_RCC_GetPCLK2Freq>
 800e24e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e250:	e02f      	b.n	800e2b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e252:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e256:	4618      	mov	r0, r3
 800e258:	f7fc fb68 	bl	800a92c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e25c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e260:	e027      	b.n	800e2b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e262:	f107 0318 	add.w	r3, r7, #24
 800e266:	4618      	mov	r0, r3
 800e268:	f7fc fcb4 	bl	800abd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e26c:	69fb      	ldr	r3, [r7, #28]
 800e26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e270:	e01f      	b.n	800e2b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e272:	4b69      	ldr	r3, [pc, #420]	@ (800e418 <UART_SetConfig+0xc2c>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f003 0320 	and.w	r3, r3, #32
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d009      	beq.n	800e292 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e27e:	4b66      	ldr	r3, [pc, #408]	@ (800e418 <UART_SetConfig+0xc2c>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	08db      	lsrs	r3, r3, #3
 800e284:	f003 0303 	and.w	r3, r3, #3
 800e288:	4a64      	ldr	r2, [pc, #400]	@ (800e41c <UART_SetConfig+0xc30>)
 800e28a:	fa22 f303 	lsr.w	r3, r2, r3
 800e28e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e290:	e00f      	b.n	800e2b2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e292:	4b62      	ldr	r3, [pc, #392]	@ (800e41c <UART_SetConfig+0xc30>)
 800e294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e296:	e00c      	b.n	800e2b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e298:	4b61      	ldr	r3, [pc, #388]	@ (800e420 <UART_SetConfig+0xc34>)
 800e29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e29c:	e009      	b.n	800e2b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e29e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2a4:	e005      	b.n	800e2b2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e2b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e2b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	f000 80ea 	beq.w	800e48e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2be:	4a55      	ldr	r2, [pc, #340]	@ (800e414 <UART_SetConfig+0xc28>)
 800e2c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2c4:	461a      	mov	r2, r3
 800e2c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2cc:	005a      	lsls	r2, r3, #1
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	685b      	ldr	r3, [r3, #4]
 800e2d2:	085b      	lsrs	r3, r3, #1
 800e2d4:	441a      	add	r2, r3
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2de:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e2e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2e2:	2b0f      	cmp	r3, #15
 800e2e4:	d916      	bls.n	800e314 <UART_SetConfig+0xb28>
 800e2e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e2ec:	d212      	bcs.n	800e314 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	f023 030f 	bic.w	r3, r3, #15
 800e2f6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2fa:	085b      	lsrs	r3, r3, #1
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	f003 0307 	and.w	r3, r3, #7
 800e302:	b29a      	uxth	r2, r3
 800e304:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e306:	4313      	orrs	r3, r2
 800e308:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e310:	60da      	str	r2, [r3, #12]
 800e312:	e0bc      	b.n	800e48e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e314:	2301      	movs	r3, #1
 800e316:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e31a:	e0b8      	b.n	800e48e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e31c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e320:	2b20      	cmp	r3, #32
 800e322:	dc4b      	bgt.n	800e3bc <UART_SetConfig+0xbd0>
 800e324:	2b00      	cmp	r3, #0
 800e326:	f2c0 8087 	blt.w	800e438 <UART_SetConfig+0xc4c>
 800e32a:	2b20      	cmp	r3, #32
 800e32c:	f200 8084 	bhi.w	800e438 <UART_SetConfig+0xc4c>
 800e330:	a201      	add	r2, pc, #4	@ (adr r2, 800e338 <UART_SetConfig+0xb4c>)
 800e332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e336:	bf00      	nop
 800e338:	0800e3c3 	.word	0x0800e3c3
 800e33c:	0800e3cb 	.word	0x0800e3cb
 800e340:	0800e439 	.word	0x0800e439
 800e344:	0800e439 	.word	0x0800e439
 800e348:	0800e3d3 	.word	0x0800e3d3
 800e34c:	0800e439 	.word	0x0800e439
 800e350:	0800e439 	.word	0x0800e439
 800e354:	0800e439 	.word	0x0800e439
 800e358:	0800e3e3 	.word	0x0800e3e3
 800e35c:	0800e439 	.word	0x0800e439
 800e360:	0800e439 	.word	0x0800e439
 800e364:	0800e439 	.word	0x0800e439
 800e368:	0800e439 	.word	0x0800e439
 800e36c:	0800e439 	.word	0x0800e439
 800e370:	0800e439 	.word	0x0800e439
 800e374:	0800e439 	.word	0x0800e439
 800e378:	0800e3f3 	.word	0x0800e3f3
 800e37c:	0800e439 	.word	0x0800e439
 800e380:	0800e439 	.word	0x0800e439
 800e384:	0800e439 	.word	0x0800e439
 800e388:	0800e439 	.word	0x0800e439
 800e38c:	0800e439 	.word	0x0800e439
 800e390:	0800e439 	.word	0x0800e439
 800e394:	0800e439 	.word	0x0800e439
 800e398:	0800e439 	.word	0x0800e439
 800e39c:	0800e439 	.word	0x0800e439
 800e3a0:	0800e439 	.word	0x0800e439
 800e3a4:	0800e439 	.word	0x0800e439
 800e3a8:	0800e439 	.word	0x0800e439
 800e3ac:	0800e439 	.word	0x0800e439
 800e3b0:	0800e439 	.word	0x0800e439
 800e3b4:	0800e439 	.word	0x0800e439
 800e3b8:	0800e42b 	.word	0x0800e42b
 800e3bc:	2b40      	cmp	r3, #64	@ 0x40
 800e3be:	d037      	beq.n	800e430 <UART_SetConfig+0xc44>
 800e3c0:	e03a      	b.n	800e438 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e3c2:	f7fa fbff 	bl	8008bc4 <HAL_RCC_GetPCLK1Freq>
 800e3c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e3c8:	e03c      	b.n	800e444 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e3ca:	f7fa fc11 	bl	8008bf0 <HAL_RCC_GetPCLK2Freq>
 800e3ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e3d0:	e038      	b.n	800e444 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fc faa8 	bl	800a92c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3e0:	e030      	b.n	800e444 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e3e2:	f107 0318 	add.w	r3, r7, #24
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7fc fbf4 	bl	800abd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e3ec:	69fb      	ldr	r3, [r7, #28]
 800e3ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3f0:	e028      	b.n	800e444 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e3f2:	4b09      	ldr	r3, [pc, #36]	@ (800e418 <UART_SetConfig+0xc2c>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f003 0320 	and.w	r3, r3, #32
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d012      	beq.n	800e424 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e3fe:	4b06      	ldr	r3, [pc, #24]	@ (800e418 <UART_SetConfig+0xc2c>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	08db      	lsrs	r3, r3, #3
 800e404:	f003 0303 	and.w	r3, r3, #3
 800e408:	4a04      	ldr	r2, [pc, #16]	@ (800e41c <UART_SetConfig+0xc30>)
 800e40a:	fa22 f303 	lsr.w	r3, r2, r3
 800e40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e410:	e018      	b.n	800e444 <UART_SetConfig+0xc58>
 800e412:	bf00      	nop
 800e414:	0800fbe0 	.word	0x0800fbe0
 800e418:	58024400 	.word	0x58024400
 800e41c:	03d09000 	.word	0x03d09000
 800e420:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e424:	4b24      	ldr	r3, [pc, #144]	@ (800e4b8 <UART_SetConfig+0xccc>)
 800e426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e428:	e00c      	b.n	800e444 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e42a:	4b24      	ldr	r3, [pc, #144]	@ (800e4bc <UART_SetConfig+0xcd0>)
 800e42c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e42e:	e009      	b.n	800e444 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e430:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e436:	e005      	b.n	800e444 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e438:	2300      	movs	r3, #0
 800e43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e43c:	2301      	movs	r3, #1
 800e43e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e442:	bf00      	nop
    }

    if (pclk != 0U)
 800e444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e446:	2b00      	cmp	r3, #0
 800e448:	d021      	beq.n	800e48e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e44e:	4a1c      	ldr	r2, [pc, #112]	@ (800e4c0 <UART_SetConfig+0xcd4>)
 800e450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e454:	461a      	mov	r2, r3
 800e456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e458:	fbb3 f2f2 	udiv	r2, r3, r2
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	685b      	ldr	r3, [r3, #4]
 800e460:	085b      	lsrs	r3, r3, #1
 800e462:	441a      	add	r2, r3
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	685b      	ldr	r3, [r3, #4]
 800e468:	fbb2 f3f3 	udiv	r3, r2, r3
 800e46c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e46e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e470:	2b0f      	cmp	r3, #15
 800e472:	d909      	bls.n	800e488 <UART_SetConfig+0xc9c>
 800e474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e47a:	d205      	bcs.n	800e488 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e47e:	b29a      	uxth	r2, r3
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	60da      	str	r2, [r3, #12]
 800e486:	e002      	b.n	800e48e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e488:	2301      	movs	r3, #1
 800e48a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	2201      	movs	r2, #1
 800e492:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	2201      	movs	r2, #1
 800e49a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e4a4:	697b      	ldr	r3, [r7, #20]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e4aa:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3748      	adds	r7, #72	@ 0x48
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e4b8:	03d09000 	.word	0x03d09000
 800e4bc:	003d0900 	.word	0x003d0900
 800e4c0:	0800fbe0 	.word	0x0800fbe0

0800e4c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b083      	sub	sp, #12
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4d0:	f003 0308 	and.w	r3, r3, #8
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d00a      	beq.n	800e4ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	685b      	ldr	r3, [r3, #4]
 800e4de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	430a      	orrs	r2, r1
 800e4ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4f2:	f003 0301 	and.w	r3, r3, #1
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d00a      	beq.n	800e510 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	685b      	ldr	r3, [r3, #4]
 800e500:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	430a      	orrs	r2, r1
 800e50e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e514:	f003 0302 	and.w	r3, r3, #2
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d00a      	beq.n	800e532 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	685b      	ldr	r3, [r3, #4]
 800e522:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	430a      	orrs	r2, r1
 800e530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e536:	f003 0304 	and.w	r3, r3, #4
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d00a      	beq.n	800e554 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	430a      	orrs	r2, r1
 800e552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e558:	f003 0310 	and.w	r3, r3, #16
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d00a      	beq.n	800e576 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	689b      	ldr	r3, [r3, #8]
 800e566:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	430a      	orrs	r2, r1
 800e574:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e57a:	f003 0320 	and.w	r3, r3, #32
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d00a      	beq.n	800e598 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	689b      	ldr	r3, [r3, #8]
 800e588:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	430a      	orrs	r2, r1
 800e596:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e59c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d01a      	beq.n	800e5da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	685b      	ldr	r3, [r3, #4]
 800e5aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	430a      	orrs	r2, r1
 800e5b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e5be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e5c2:	d10a      	bne.n	800e5da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	685b      	ldr	r3, [r3, #4]
 800e5ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	430a      	orrs	r2, r1
 800e5d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d00a      	beq.n	800e5fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	685b      	ldr	r3, [r3, #4]
 800e5ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	430a      	orrs	r2, r1
 800e5fa:	605a      	str	r2, [r3, #4]
  }
}
 800e5fc:	bf00      	nop
 800e5fe:	370c      	adds	r7, #12
 800e600:	46bd      	mov	sp, r7
 800e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e606:	4770      	bx	lr

0800e608 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b098      	sub	sp, #96	@ 0x60
 800e60c:	af02      	add	r7, sp, #8
 800e60e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2200      	movs	r2, #0
 800e614:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e618:	f7f4 f934 	bl	8002884 <HAL_GetTick>
 800e61c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	f003 0308 	and.w	r3, r3, #8
 800e628:	2b08      	cmp	r3, #8
 800e62a:	d12f      	bne.n	800e68c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e62c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e630:	9300      	str	r3, [sp, #0]
 800e632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e634:	2200      	movs	r2, #0
 800e636:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f000 f88e 	bl	800e75c <UART_WaitOnFlagUntilTimeout>
 800e640:	4603      	mov	r3, r0
 800e642:	2b00      	cmp	r3, #0
 800e644:	d022      	beq.n	800e68c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e64e:	e853 3f00 	ldrex	r3, [r3]
 800e652:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e656:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e65a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	461a      	mov	r2, r3
 800e662:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e664:	647b      	str	r3, [r7, #68]	@ 0x44
 800e666:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e668:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e66a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e66c:	e841 2300 	strex	r3, r2, [r1]
 800e670:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e674:	2b00      	cmp	r3, #0
 800e676:	d1e6      	bne.n	800e646 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2220      	movs	r2, #32
 800e67c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2200      	movs	r2, #0
 800e684:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e688:	2303      	movs	r3, #3
 800e68a:	e063      	b.n	800e754 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	f003 0304 	and.w	r3, r3, #4
 800e696:	2b04      	cmp	r3, #4
 800e698:	d149      	bne.n	800e72e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e69a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e69e:	9300      	str	r3, [sp, #0]
 800e6a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f000 f857 	bl	800e75c <UART_WaitOnFlagUntilTimeout>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d03c      	beq.n	800e72e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6bc:	e853 3f00 	ldrex	r3, [r3]
 800e6c0:	623b      	str	r3, [r7, #32]
   return(result);
 800e6c2:	6a3b      	ldr	r3, [r7, #32]
 800e6c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e6c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800e6d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e6d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e6da:	e841 2300 	strex	r3, r2, [r1]
 800e6de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e6e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d1e6      	bne.n	800e6b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	3308      	adds	r3, #8
 800e6ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	e853 3f00 	ldrex	r3, [r3]
 800e6f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	f023 0301 	bic.w	r3, r3, #1
 800e6fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	3308      	adds	r3, #8
 800e704:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e706:	61fa      	str	r2, [r7, #28]
 800e708:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e70a:	69b9      	ldr	r1, [r7, #24]
 800e70c:	69fa      	ldr	r2, [r7, #28]
 800e70e:	e841 2300 	strex	r3, r2, [r1]
 800e712:	617b      	str	r3, [r7, #20]
   return(result);
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d1e5      	bne.n	800e6e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2220      	movs	r2, #32
 800e71e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2200      	movs	r2, #0
 800e726:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e72a:	2303      	movs	r3, #3
 800e72c:	e012      	b.n	800e754 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2220      	movs	r2, #32
 800e732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2220      	movs	r2, #32
 800e73a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2200      	movs	r2, #0
 800e742:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2200      	movs	r2, #0
 800e748:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2200      	movs	r2, #0
 800e74e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e752:	2300      	movs	r3, #0
}
 800e754:	4618      	mov	r0, r3
 800e756:	3758      	adds	r7, #88	@ 0x58
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b084      	sub	sp, #16
 800e760:	af00      	add	r7, sp, #0
 800e762:	60f8      	str	r0, [r7, #12]
 800e764:	60b9      	str	r1, [r7, #8]
 800e766:	603b      	str	r3, [r7, #0]
 800e768:	4613      	mov	r3, r2
 800e76a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e76c:	e04f      	b.n	800e80e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e76e:	69bb      	ldr	r3, [r7, #24]
 800e770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e774:	d04b      	beq.n	800e80e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e776:	f7f4 f885 	bl	8002884 <HAL_GetTick>
 800e77a:	4602      	mov	r2, r0
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	1ad3      	subs	r3, r2, r3
 800e780:	69ba      	ldr	r2, [r7, #24]
 800e782:	429a      	cmp	r2, r3
 800e784:	d302      	bcc.n	800e78c <UART_WaitOnFlagUntilTimeout+0x30>
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d101      	bne.n	800e790 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e78c:	2303      	movs	r3, #3
 800e78e:	e04e      	b.n	800e82e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f003 0304 	and.w	r3, r3, #4
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d037      	beq.n	800e80e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	2b80      	cmp	r3, #128	@ 0x80
 800e7a2:	d034      	beq.n	800e80e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	2b40      	cmp	r3, #64	@ 0x40
 800e7a8:	d031      	beq.n	800e80e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	69db      	ldr	r3, [r3, #28]
 800e7b0:	f003 0308 	and.w	r3, r3, #8
 800e7b4:	2b08      	cmp	r3, #8
 800e7b6:	d110      	bne.n	800e7da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	2208      	movs	r2, #8
 800e7be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e7c0:	68f8      	ldr	r0, [r7, #12]
 800e7c2:	f000 f95b 	bl	800ea7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	2208      	movs	r2, #8
 800e7ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	e029      	b.n	800e82e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	69db      	ldr	r3, [r3, #28]
 800e7e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e7e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e7e8:	d111      	bne.n	800e80e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e7f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e7f4:	68f8      	ldr	r0, [r7, #12]
 800e7f6:	f000 f941 	bl	800ea7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2220      	movs	r2, #32
 800e7fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	2200      	movs	r2, #0
 800e806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e80a:	2303      	movs	r3, #3
 800e80c:	e00f      	b.n	800e82e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	69da      	ldr	r2, [r3, #28]
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	4013      	ands	r3, r2
 800e818:	68ba      	ldr	r2, [r7, #8]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	bf0c      	ite	eq
 800e81e:	2301      	moveq	r3, #1
 800e820:	2300      	movne	r3, #0
 800e822:	b2db      	uxtb	r3, r3
 800e824:	461a      	mov	r2, r3
 800e826:	79fb      	ldrb	r3, [r7, #7]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d0a0      	beq.n	800e76e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e82c:	2300      	movs	r3, #0
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3710      	adds	r7, #16
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
	...

0800e838 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e838:	b480      	push	{r7}
 800e83a:	b0a3      	sub	sp, #140	@ 0x8c
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	60f8      	str	r0, [r7, #12]
 800e840:	60b9      	str	r1, [r7, #8]
 800e842:	4613      	mov	r3, r2
 800e844:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	68ba      	ldr	r2, [r7, #8]
 800e84a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	88fa      	ldrh	r2, [r7, #6]
 800e850:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	88fa      	ldrh	r2, [r7, #6]
 800e858:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	2200      	movs	r2, #0
 800e860:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	689b      	ldr	r3, [r3, #8]
 800e866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e86a:	d10e      	bne.n	800e88a <UART_Start_Receive_IT+0x52>
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	691b      	ldr	r3, [r3, #16]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d105      	bne.n	800e880 <UART_Start_Receive_IT+0x48>
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e87a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e87e:	e02d      	b.n	800e8dc <UART_Start_Receive_IT+0xa4>
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	22ff      	movs	r2, #255	@ 0xff
 800e884:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e888:	e028      	b.n	800e8dc <UART_Start_Receive_IT+0xa4>
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	689b      	ldr	r3, [r3, #8]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d10d      	bne.n	800e8ae <UART_Start_Receive_IT+0x76>
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	691b      	ldr	r3, [r3, #16]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d104      	bne.n	800e8a4 <UART_Start_Receive_IT+0x6c>
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	22ff      	movs	r2, #255	@ 0xff
 800e89e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e8a2:	e01b      	b.n	800e8dc <UART_Start_Receive_IT+0xa4>
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	227f      	movs	r2, #127	@ 0x7f
 800e8a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e8ac:	e016      	b.n	800e8dc <UART_Start_Receive_IT+0xa4>
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	689b      	ldr	r3, [r3, #8]
 800e8b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e8b6:	d10d      	bne.n	800e8d4 <UART_Start_Receive_IT+0x9c>
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	691b      	ldr	r3, [r3, #16]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d104      	bne.n	800e8ca <UART_Start_Receive_IT+0x92>
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	227f      	movs	r2, #127	@ 0x7f
 800e8c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e8c8:	e008      	b.n	800e8dc <UART_Start_Receive_IT+0xa4>
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	223f      	movs	r2, #63	@ 0x3f
 800e8ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e8d2:	e003      	b.n	800e8dc <UART_Start_Receive_IT+0xa4>
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	2222      	movs	r2, #34	@ 0x22
 800e8e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	3308      	adds	r3, #8
 800e8f2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e8f6:	e853 3f00 	ldrex	r3, [r3]
 800e8fa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e8fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e8fe:	f043 0301 	orr.w	r3, r3, #1
 800e902:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	3308      	adds	r3, #8
 800e90c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e910:	673a      	str	r2, [r7, #112]	@ 0x70
 800e912:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e914:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e916:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e918:	e841 2300 	strex	r3, r2, [r1]
 800e91c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800e91e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e920:	2b00      	cmp	r3, #0
 800e922:	d1e3      	bne.n	800e8ec <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e928:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e92c:	d14f      	bne.n	800e9ce <UART_Start_Receive_IT+0x196>
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e934:	88fa      	ldrh	r2, [r7, #6]
 800e936:	429a      	cmp	r2, r3
 800e938:	d349      	bcc.n	800e9ce <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	689b      	ldr	r3, [r3, #8]
 800e93e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e942:	d107      	bne.n	800e954 <UART_Start_Receive_IT+0x11c>
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	691b      	ldr	r3, [r3, #16]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d103      	bne.n	800e954 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	4a47      	ldr	r2, [pc, #284]	@ (800ea6c <UART_Start_Receive_IT+0x234>)
 800e950:	675a      	str	r2, [r3, #116]	@ 0x74
 800e952:	e002      	b.n	800e95a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	4a46      	ldr	r2, [pc, #280]	@ (800ea70 <UART_Start_Receive_IT+0x238>)
 800e958:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	691b      	ldr	r3, [r3, #16]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d01a      	beq.n	800e998 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e968:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e96a:	e853 3f00 	ldrex	r3, [r3]
 800e96e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e972:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e976:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	461a      	mov	r2, r3
 800e980:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e984:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e986:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e988:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e98a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e98c:	e841 2300 	strex	r3, r2, [r1]
 800e990:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800e992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e994:	2b00      	cmp	r3, #0
 800e996:	d1e4      	bne.n	800e962 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	3308      	adds	r3, #8
 800e99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9a2:	e853 3f00 	ldrex	r3, [r3]
 800e9a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e9ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	3308      	adds	r3, #8
 800e9b6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e9b8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800e9ba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e9be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e9c0:	e841 2300 	strex	r3, r2, [r1]
 800e9c4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e9c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d1e5      	bne.n	800e998 <UART_Start_Receive_IT+0x160>
 800e9cc:	e046      	b.n	800ea5c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	689b      	ldr	r3, [r3, #8]
 800e9d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e9d6:	d107      	bne.n	800e9e8 <UART_Start_Receive_IT+0x1b0>
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	691b      	ldr	r3, [r3, #16]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d103      	bne.n	800e9e8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	4a24      	ldr	r2, [pc, #144]	@ (800ea74 <UART_Start_Receive_IT+0x23c>)
 800e9e4:	675a      	str	r2, [r3, #116]	@ 0x74
 800e9e6:	e002      	b.n	800e9ee <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	4a23      	ldr	r2, [pc, #140]	@ (800ea78 <UART_Start_Receive_IT+0x240>)
 800e9ec:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	691b      	ldr	r3, [r3, #16]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d019      	beq.n	800ea2a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9fe:	e853 3f00 	ldrex	r3, [r3]
 800ea02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ea04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea06:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ea0a:	677b      	str	r3, [r7, #116]	@ 0x74
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	461a      	mov	r2, r3
 800ea12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ea14:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea16:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ea1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ea1c:	e841 2300 	strex	r3, r2, [r1]
 800ea20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ea22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d1e6      	bne.n	800e9f6 <UART_Start_Receive_IT+0x1be>
 800ea28:	e018      	b.n	800ea5c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	e853 3f00 	ldrex	r3, [r3]
 800ea36:	613b      	str	r3, [r7, #16]
   return(result);
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	f043 0320 	orr.w	r3, r3, #32
 800ea3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	461a      	mov	r2, r3
 800ea46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ea48:	623b      	str	r3, [r7, #32]
 800ea4a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea4c:	69f9      	ldr	r1, [r7, #28]
 800ea4e:	6a3a      	ldr	r2, [r7, #32]
 800ea50:	e841 2300 	strex	r3, r2, [r1]
 800ea54:	61bb      	str	r3, [r7, #24]
   return(result);
 800ea56:	69bb      	ldr	r3, [r7, #24]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d1e6      	bne.n	800ea2a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ea5c:	2300      	movs	r3, #0
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	378c      	adds	r7, #140	@ 0x8c
 800ea62:	46bd      	mov	sp, r7
 800ea64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea68:	4770      	bx	lr
 800ea6a:	bf00      	nop
 800ea6c:	0800f29d 	.word	0x0800f29d
 800ea70:	0800ef3d 	.word	0x0800ef3d
 800ea74:	0800ed85 	.word	0x0800ed85
 800ea78:	0800ebcd 	.word	0x0800ebcd

0800ea7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b095      	sub	sp, #84	@ 0x54
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea8c:	e853 3f00 	ldrex	r3, [r3]
 800ea90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ea92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ea98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	461a      	mov	r2, r3
 800eaa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eaa2:	643b      	str	r3, [r7, #64]	@ 0x40
 800eaa4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaa6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800eaa8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eaaa:	e841 2300 	strex	r3, r2, [r1]
 800eaae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d1e6      	bne.n	800ea84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	3308      	adds	r3, #8
 800eabc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eabe:	6a3b      	ldr	r3, [r7, #32]
 800eac0:	e853 3f00 	ldrex	r3, [r3]
 800eac4:	61fb      	str	r3, [r7, #28]
   return(result);
 800eac6:	69fa      	ldr	r2, [r7, #28]
 800eac8:	4b1e      	ldr	r3, [pc, #120]	@ (800eb44 <UART_EndRxTransfer+0xc8>)
 800eaca:	4013      	ands	r3, r2
 800eacc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	3308      	adds	r3, #8
 800ead4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ead6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ead8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eada:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eadc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eade:	e841 2300 	strex	r3, r2, [r1]
 800eae2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d1e5      	bne.n	800eab6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	d118      	bne.n	800eb24 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	e853 3f00 	ldrex	r3, [r3]
 800eafe:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	f023 0310 	bic.w	r3, r3, #16
 800eb06:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	461a      	mov	r2, r3
 800eb0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb10:	61bb      	str	r3, [r7, #24]
 800eb12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb14:	6979      	ldr	r1, [r7, #20]
 800eb16:	69ba      	ldr	r2, [r7, #24]
 800eb18:	e841 2300 	strex	r3, r2, [r1]
 800eb1c:	613b      	str	r3, [r7, #16]
   return(result);
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d1e6      	bne.n	800eaf2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2220      	movs	r2, #32
 800eb28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2200      	movs	r2, #0
 800eb36:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800eb38:	bf00      	nop
 800eb3a:	3754      	adds	r7, #84	@ 0x54
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb42:	4770      	bx	lr
 800eb44:	effffffe 	.word	0xeffffffe

0800eb48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b084      	sub	sp, #16
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	2200      	movs	r2, #0
 800eb62:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb66:	68f8      	ldr	r0, [r7, #12]
 800eb68:	f7fe fe36 	bl	800d7d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb6c:	bf00      	nop
 800eb6e:	3710      	adds	r7, #16
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}

0800eb74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b088      	sub	sp, #32
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	e853 3f00 	ldrex	r3, [r3]
 800eb88:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb90:	61fb      	str	r3, [r7, #28]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	461a      	mov	r2, r3
 800eb98:	69fb      	ldr	r3, [r7, #28]
 800eb9a:	61bb      	str	r3, [r7, #24]
 800eb9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb9e:	6979      	ldr	r1, [r7, #20]
 800eba0:	69ba      	ldr	r2, [r7, #24]
 800eba2:	e841 2300 	strex	r3, r2, [r1]
 800eba6:	613b      	str	r3, [r7, #16]
   return(result);
 800eba8:	693b      	ldr	r3, [r7, #16]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d1e6      	bne.n	800eb7c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2220      	movs	r2, #32
 800ebb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f7fe fdf7 	bl	800d7b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebc2:	bf00      	nop
 800ebc4:	3720      	adds	r7, #32
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}
	...

0800ebcc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b09c      	sub	sp, #112	@ 0x70
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ebda:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ebe4:	2b22      	cmp	r3, #34	@ 0x22
 800ebe6:	f040 80be 	bne.w	800ed66 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebf0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ebf4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ebf8:	b2d9      	uxtb	r1, r3
 800ebfa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ebfe:	b2da      	uxtb	r2, r3
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec04:	400a      	ands	r2, r1
 800ec06:	b2d2      	uxtb	r2, r2
 800ec08:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec0e:	1c5a      	adds	r2, r3, #1
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	3b01      	subs	r3, #1
 800ec1e:	b29a      	uxth	r2, r3
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ec2c:	b29b      	uxth	r3, r3
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	f040 80a1 	bne.w	800ed76 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec3c:	e853 3f00 	ldrex	r3, [r3]
 800ec40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ec42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ec48:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	461a      	mov	r2, r3
 800ec50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ec52:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ec54:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ec58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ec5a:	e841 2300 	strex	r3, r2, [r1]
 800ec5e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ec60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d1e6      	bne.n	800ec34 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	3308      	adds	r3, #8
 800ec6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec70:	e853 3f00 	ldrex	r3, [r3]
 800ec74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ec76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec78:	f023 0301 	bic.w	r3, r3, #1
 800ec7c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	3308      	adds	r3, #8
 800ec84:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ec86:	647a      	str	r2, [r7, #68]	@ 0x44
 800ec88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ec8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ec8e:	e841 2300 	strex	r3, r2, [r1]
 800ec92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ec94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d1e5      	bne.n	800ec66 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2220      	movs	r2, #32
 800ec9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2200      	movs	r2, #0
 800eca6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	4a33      	ldr	r2, [pc, #204]	@ (800ed80 <UART_RxISR_8BIT+0x1b4>)
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	d01f      	beq.n	800ecf8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d018      	beq.n	800ecf8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecce:	e853 3f00 	ldrex	r3, [r3]
 800ecd2:	623b      	str	r3, [r7, #32]
   return(result);
 800ecd4:	6a3b      	ldr	r3, [r7, #32]
 800ecd6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ecda:	663b      	str	r3, [r7, #96]	@ 0x60
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	461a      	mov	r2, r3
 800ece2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ece4:	633b      	str	r3, [r7, #48]	@ 0x30
 800ece6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ece8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ecea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ecec:	e841 2300 	strex	r3, r2, [r1]
 800ecf0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ecf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d1e6      	bne.n	800ecc6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecfc:	2b01      	cmp	r3, #1
 800ecfe:	d12e      	bne.n	800ed5e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2200      	movs	r2, #0
 800ed04:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	e853 3f00 	ldrex	r3, [r3]
 800ed12:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f023 0310 	bic.w	r3, r3, #16
 800ed1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	461a      	mov	r2, r3
 800ed22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ed24:	61fb      	str	r3, [r7, #28]
 800ed26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed28:	69b9      	ldr	r1, [r7, #24]
 800ed2a:	69fa      	ldr	r2, [r7, #28]
 800ed2c:	e841 2300 	strex	r3, r2, [r1]
 800ed30:	617b      	str	r3, [r7, #20]
   return(result);
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d1e6      	bne.n	800ed06 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	69db      	ldr	r3, [r3, #28]
 800ed3e:	f003 0310 	and.w	r3, r3, #16
 800ed42:	2b10      	cmp	r3, #16
 800ed44:	d103      	bne.n	800ed4e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	2210      	movs	r2, #16
 800ed4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ed54:	4619      	mov	r1, r3
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f7f2 f98a 	bl	8001070 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ed5c:	e00b      	b.n	800ed76 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f7fe fd30 	bl	800d7c4 <HAL_UART_RxCpltCallback>
}
 800ed64:	e007      	b.n	800ed76 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	699a      	ldr	r2, [r3, #24]
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	f042 0208 	orr.w	r2, r2, #8
 800ed74:	619a      	str	r2, [r3, #24]
}
 800ed76:	bf00      	nop
 800ed78:	3770      	adds	r7, #112	@ 0x70
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	bf00      	nop
 800ed80:	58000c00 	.word	0x58000c00

0800ed84 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b09c      	sub	sp, #112	@ 0x70
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ed92:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ed9c:	2b22      	cmp	r3, #34	@ 0x22
 800ed9e:	f040 80be 	bne.w	800ef1e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eda8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800edb0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800edb2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800edb6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800edba:	4013      	ands	r3, r2
 800edbc:	b29a      	uxth	r2, r3
 800edbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800edc0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800edc6:	1c9a      	adds	r2, r3, #2
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	3b01      	subs	r3, #1
 800edd6:	b29a      	uxth	r2, r3
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ede4:	b29b      	uxth	r3, r3
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	f040 80a1 	bne.w	800ef2e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800edf4:	e853 3f00 	ldrex	r3, [r3]
 800edf8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800edfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ee00:	667b      	str	r3, [r7, #100]	@ 0x64
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	461a      	mov	r2, r3
 800ee08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ee0a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ee0c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee0e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ee10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ee12:	e841 2300 	strex	r3, r2, [r1]
 800ee16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ee18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d1e6      	bne.n	800edec <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	3308      	adds	r3, #8
 800ee24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee28:	e853 3f00 	ldrex	r3, [r3]
 800ee2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ee2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee30:	f023 0301 	bic.w	r3, r3, #1
 800ee34:	663b      	str	r3, [r7, #96]	@ 0x60
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	3308      	adds	r3, #8
 800ee3c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ee3e:	643a      	str	r2, [r7, #64]	@ 0x40
 800ee40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ee44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ee46:	e841 2300 	strex	r3, r2, [r1]
 800ee4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ee4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d1e5      	bne.n	800ee1e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2220      	movs	r2, #32
 800ee56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2200      	movs	r2, #0
 800ee64:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	4a33      	ldr	r2, [pc, #204]	@ (800ef38 <UART_RxISR_16BIT+0x1b4>)
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d01f      	beq.n	800eeb0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d018      	beq.n	800eeb0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee84:	6a3b      	ldr	r3, [r7, #32]
 800ee86:	e853 3f00 	ldrex	r3, [r3]
 800ee8a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee8c:	69fb      	ldr	r3, [r7, #28]
 800ee8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ee92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	461a      	mov	r2, r3
 800ee9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ee9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ee9e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eea0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eea2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eea4:	e841 2300 	strex	r3, r2, [r1]
 800eea8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eeaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d1e6      	bne.n	800ee7e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eeb4:	2b01      	cmp	r3, #1
 800eeb6:	d12e      	bne.n	800ef16 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2200      	movs	r2, #0
 800eebc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	e853 3f00 	ldrex	r3, [r3]
 800eeca:	60bb      	str	r3, [r7, #8]
   return(result);
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	f023 0310 	bic.w	r3, r3, #16
 800eed2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	461a      	mov	r2, r3
 800eeda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eedc:	61bb      	str	r3, [r7, #24]
 800eede:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eee0:	6979      	ldr	r1, [r7, #20]
 800eee2:	69ba      	ldr	r2, [r7, #24]
 800eee4:	e841 2300 	strex	r3, r2, [r1]
 800eee8:	613b      	str	r3, [r7, #16]
   return(result);
 800eeea:	693b      	ldr	r3, [r7, #16]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d1e6      	bne.n	800eebe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	69db      	ldr	r3, [r3, #28]
 800eef6:	f003 0310 	and.w	r3, r3, #16
 800eefa:	2b10      	cmp	r3, #16
 800eefc:	d103      	bne.n	800ef06 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	2210      	movs	r2, #16
 800ef04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f7f2 f8ae 	bl	8001070 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ef14:	e00b      	b.n	800ef2e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f7fe fc54 	bl	800d7c4 <HAL_UART_RxCpltCallback>
}
 800ef1c:	e007      	b.n	800ef2e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	699a      	ldr	r2, [r3, #24]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	f042 0208 	orr.w	r2, r2, #8
 800ef2c:	619a      	str	r2, [r3, #24]
}
 800ef2e:	bf00      	nop
 800ef30:	3770      	adds	r7, #112	@ 0x70
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
 800ef36:	bf00      	nop
 800ef38:	58000c00 	.word	0x58000c00

0800ef3c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b0ac      	sub	sp, #176	@ 0xb0
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ef4a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	69db      	ldr	r3, [r3, #28]
 800ef54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	689b      	ldr	r3, [r3, #8]
 800ef68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ef72:	2b22      	cmp	r3, #34	@ 0x22
 800ef74:	f040 8180 	bne.w	800f278 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ef7e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ef82:	e123      	b.n	800f1cc <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef8a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ef8e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ef92:	b2d9      	uxtb	r1, r3
 800ef94:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ef98:	b2da      	uxtb	r2, r3
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef9e:	400a      	ands	r2, r1
 800efa0:	b2d2      	uxtb	r2, r2
 800efa2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800efa8:	1c5a      	adds	r2, r3, #1
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800efb4:	b29b      	uxth	r3, r3
 800efb6:	3b01      	subs	r3, #1
 800efb8:	b29a      	uxth	r2, r3
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	69db      	ldr	r3, [r3, #28]
 800efc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800efca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800efce:	f003 0307 	and.w	r3, r3, #7
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d053      	beq.n	800f07e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800efd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800efda:	f003 0301 	and.w	r3, r3, #1
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d011      	beq.n	800f006 <UART_RxISR_8BIT_FIFOEN+0xca>
 800efe2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800efe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800efea:	2b00      	cmp	r3, #0
 800efec:	d00b      	beq.n	800f006 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	2201      	movs	r2, #1
 800eff4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800effc:	f043 0201 	orr.w	r2, r3, #1
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f00a:	f003 0302 	and.w	r3, r3, #2
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d011      	beq.n	800f036 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f012:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f016:	f003 0301 	and.w	r3, r3, #1
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d00b      	beq.n	800f036 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	2202      	movs	r2, #2
 800f024:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f02c:	f043 0204 	orr.w	r2, r3, #4
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f03a:	f003 0304 	and.w	r3, r3, #4
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d011      	beq.n	800f066 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f046:	f003 0301 	and.w	r3, r3, #1
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d00b      	beq.n	800f066 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	2204      	movs	r2, #4
 800f054:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f05c:	f043 0202 	orr.w	r2, r3, #2
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d006      	beq.n	800f07e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f7fe fbb1 	bl	800d7d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2200      	movs	r2, #0
 800f07a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f084:	b29b      	uxth	r3, r3
 800f086:	2b00      	cmp	r3, #0
 800f088:	f040 80a0 	bne.w	800f1cc <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f092:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f094:	e853 3f00 	ldrex	r3, [r3]
 800f098:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800f09a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f09c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f0a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f0ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f0b0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0b2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800f0b4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f0b6:	e841 2300 	strex	r3, r2, [r1]
 800f0ba:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800f0bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d1e4      	bne.n	800f08c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	3308      	adds	r3, #8
 800f0c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f0cc:	e853 3f00 	ldrex	r3, [r3]
 800f0d0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800f0d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f0d4:	4b6e      	ldr	r3, [pc, #440]	@ (800f290 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800f0d6:	4013      	ands	r3, r2
 800f0d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	3308      	adds	r3, #8
 800f0e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f0e6:	66ba      	str	r2, [r7, #104]	@ 0x68
 800f0e8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0ea:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800f0ec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f0ee:	e841 2300 	strex	r3, r2, [r1]
 800f0f2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f0f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d1e3      	bne.n	800f0c2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2220      	movs	r2, #32
 800f0fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2200      	movs	r2, #0
 800f106:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2200      	movs	r2, #0
 800f10c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	4a60      	ldr	r2, [pc, #384]	@ (800f294 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800f114:	4293      	cmp	r3, r2
 800f116:	d021      	beq.n	800f15c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	685b      	ldr	r3, [r3, #4]
 800f11e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f122:	2b00      	cmp	r3, #0
 800f124:	d01a      	beq.n	800f15c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f12c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f12e:	e853 3f00 	ldrex	r3, [r3]
 800f132:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f136:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f13a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	461a      	mov	r2, r3
 800f144:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f148:	657b      	str	r3, [r7, #84]	@ 0x54
 800f14a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f14c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f14e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f150:	e841 2300 	strex	r3, r2, [r1]
 800f154:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f156:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d1e4      	bne.n	800f126 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f160:	2b01      	cmp	r3, #1
 800f162:	d130      	bne.n	800f1c6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2200      	movs	r2, #0
 800f168:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f172:	e853 3f00 	ldrex	r3, [r3]
 800f176:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f17a:	f023 0310 	bic.w	r3, r3, #16
 800f17e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	461a      	mov	r2, r3
 800f188:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f18c:	643b      	str	r3, [r7, #64]	@ 0x40
 800f18e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f190:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f192:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f194:	e841 2300 	strex	r3, r2, [r1]
 800f198:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d1e4      	bne.n	800f16a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	69db      	ldr	r3, [r3, #28]
 800f1a6:	f003 0310 	and.w	r3, r3, #16
 800f1aa:	2b10      	cmp	r3, #16
 800f1ac:	d103      	bne.n	800f1b6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	2210      	movs	r2, #16
 800f1b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f1bc:	4619      	mov	r1, r3
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f7f1 ff56 	bl	8001070 <HAL_UARTEx_RxEventCallback>
 800f1c4:	e002      	b.n	800f1cc <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f7fe fafc 	bl	800d7c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f1cc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d006      	beq.n	800f1e2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800f1d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f1d8:	f003 0320 	and.w	r3, r3, #32
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	f47f aed1 	bne.w	800ef84 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f1e8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f1ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d049      	beq.n	800f288 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f1fa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800f1fe:	429a      	cmp	r2, r3
 800f200:	d242      	bcs.n	800f288 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	3308      	adds	r3, #8
 800f208:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f20a:	6a3b      	ldr	r3, [r7, #32]
 800f20c:	e853 3f00 	ldrex	r3, [r3]
 800f210:	61fb      	str	r3, [r7, #28]
   return(result);
 800f212:	69fb      	ldr	r3, [r7, #28]
 800f214:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f218:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	3308      	adds	r3, #8
 800f222:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f226:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f228:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f22a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f22c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f22e:	e841 2300 	strex	r3, r2, [r1]
 800f232:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f236:	2b00      	cmp	r3, #0
 800f238:	d1e3      	bne.n	800f202 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	4a16      	ldr	r2, [pc, #88]	@ (800f298 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800f23e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	e853 3f00 	ldrex	r3, [r3]
 800f24c:	60bb      	str	r3, [r7, #8]
   return(result);
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	f043 0320 	orr.w	r3, r3, #32
 800f254:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	461a      	mov	r2, r3
 800f25e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f262:	61bb      	str	r3, [r7, #24]
 800f264:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f266:	6979      	ldr	r1, [r7, #20]
 800f268:	69ba      	ldr	r2, [r7, #24]
 800f26a:	e841 2300 	strex	r3, r2, [r1]
 800f26e:	613b      	str	r3, [r7, #16]
   return(result);
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d1e4      	bne.n	800f240 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f276:	e007      	b.n	800f288 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	699a      	ldr	r2, [r3, #24]
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	f042 0208 	orr.w	r2, r2, #8
 800f286:	619a      	str	r2, [r3, #24]
}
 800f288:	bf00      	nop
 800f28a:	37b0      	adds	r7, #176	@ 0xb0
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}
 800f290:	effffffe 	.word	0xeffffffe
 800f294:	58000c00 	.word	0x58000c00
 800f298:	0800ebcd 	.word	0x0800ebcd

0800f29c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b0ae      	sub	sp, #184	@ 0xb8
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f2aa:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	69db      	ldr	r3, [r3, #28]
 800f2b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f2d2:	2b22      	cmp	r3, #34	@ 0x22
 800f2d4:	f040 8184 	bne.w	800f5e0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f2de:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f2e2:	e127      	b.n	800f534 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2ea:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f2f6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800f2fa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800f2fe:	4013      	ands	r3, r2
 800f300:	b29a      	uxth	r2, r3
 800f302:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f306:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f30c:	1c9a      	adds	r2, r3, #2
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f318:	b29b      	uxth	r3, r3
 800f31a:	3b01      	subs	r3, #1
 800f31c:	b29a      	uxth	r2, r3
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	69db      	ldr	r3, [r3, #28]
 800f32a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f32e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f332:	f003 0307 	and.w	r3, r3, #7
 800f336:	2b00      	cmp	r3, #0
 800f338:	d053      	beq.n	800f3e2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f33a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f33e:	f003 0301 	and.w	r3, r3, #1
 800f342:	2b00      	cmp	r3, #0
 800f344:	d011      	beq.n	800f36a <UART_RxISR_16BIT_FIFOEN+0xce>
 800f346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f34a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d00b      	beq.n	800f36a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	2201      	movs	r2, #1
 800f358:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f360:	f043 0201 	orr.w	r2, r3, #1
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f36a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f36e:	f003 0302 	and.w	r3, r3, #2
 800f372:	2b00      	cmp	r3, #0
 800f374:	d011      	beq.n	800f39a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f376:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f37a:	f003 0301 	and.w	r3, r3, #1
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d00b      	beq.n	800f39a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	2202      	movs	r2, #2
 800f388:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f390:	f043 0204 	orr.w	r2, r3, #4
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f39a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f39e:	f003 0304 	and.w	r3, r3, #4
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d011      	beq.n	800f3ca <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f3a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f3aa:	f003 0301 	and.w	r3, r3, #1
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d00b      	beq.n	800f3ca <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	2204      	movs	r2, #4
 800f3b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f3c0:	f043 0202 	orr.w	r2, r3, #2
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d006      	beq.n	800f3e2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f7fe f9ff 	bl	800d7d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f3e8:	b29b      	uxth	r3, r3
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	f040 80a2 	bne.w	800f534 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f3f8:	e853 3f00 	ldrex	r3, [r3]
 800f3fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f3fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f400:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f404:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	461a      	mov	r2, r3
 800f40e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f412:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f416:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f418:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f41a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f41e:	e841 2300 	strex	r3, r2, [r1]
 800f422:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f424:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f426:	2b00      	cmp	r3, #0
 800f428:	d1e2      	bne.n	800f3f0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	3308      	adds	r3, #8
 800f430:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f432:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f434:	e853 3f00 	ldrex	r3, [r3]
 800f438:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f43a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f43c:	4b6e      	ldr	r3, [pc, #440]	@ (800f5f8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800f43e:	4013      	ands	r3, r2
 800f440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	3308      	adds	r3, #8
 800f44a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f44e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f450:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f452:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f454:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f456:	e841 2300 	strex	r3, r2, [r1]
 800f45a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f45c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d1e3      	bne.n	800f42a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2220      	movs	r2, #32
 800f466:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2200      	movs	r2, #0
 800f46e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2200      	movs	r2, #0
 800f474:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	4a60      	ldr	r2, [pc, #384]	@ (800f5fc <UART_RxISR_16BIT_FIFOEN+0x360>)
 800f47c:	4293      	cmp	r3, r2
 800f47e:	d021      	beq.n	800f4c4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	685b      	ldr	r3, [r3, #4]
 800f486:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d01a      	beq.n	800f4c4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f494:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f496:	e853 3f00 	ldrex	r3, [r3]
 800f49a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f49c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f49e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f4a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f4b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f4b2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f4b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f4b8:	e841 2300 	strex	r3, r2, [r1]
 800f4bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f4be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d1e4      	bne.n	800f48e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f4c8:	2b01      	cmp	r3, #1
 800f4ca:	d130      	bne.n	800f52e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4da:	e853 3f00 	ldrex	r3, [r3]
 800f4de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f4e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4e2:	f023 0310 	bic.w	r3, r3, #16
 800f4e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f4f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800f4f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f4fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f4fc:	e841 2300 	strex	r3, r2, [r1]
 800f500:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f504:	2b00      	cmp	r3, #0
 800f506:	d1e4      	bne.n	800f4d2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	69db      	ldr	r3, [r3, #28]
 800f50e:	f003 0310 	and.w	r3, r3, #16
 800f512:	2b10      	cmp	r3, #16
 800f514:	d103      	bne.n	800f51e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	2210      	movs	r2, #16
 800f51c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f524:	4619      	mov	r1, r3
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f7f1 fda2 	bl	8001070 <HAL_UARTEx_RxEventCallback>
 800f52c:	e002      	b.n	800f534 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f7fe f948 	bl	800d7c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f534:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d006      	beq.n	800f54a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800f53c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f540:	f003 0320 	and.w	r3, r3, #32
 800f544:	2b00      	cmp	r3, #0
 800f546:	f47f aecd 	bne.w	800f2e4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f550:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f554:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d049      	beq.n	800f5f0 <UART_RxISR_16BIT_FIFOEN+0x354>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f562:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800f566:	429a      	cmp	r2, r3
 800f568:	d242      	bcs.n	800f5f0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	3308      	adds	r3, #8
 800f570:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f574:	e853 3f00 	ldrex	r3, [r3]
 800f578:	623b      	str	r3, [r7, #32]
   return(result);
 800f57a:	6a3b      	ldr	r3, [r7, #32]
 800f57c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f580:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	3308      	adds	r3, #8
 800f58a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f58e:	633a      	str	r2, [r7, #48]	@ 0x30
 800f590:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f592:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f594:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f596:	e841 2300 	strex	r3, r2, [r1]
 800f59a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d1e3      	bne.n	800f56a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	4a16      	ldr	r2, [pc, #88]	@ (800f600 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f5a6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ae:	693b      	ldr	r3, [r7, #16]
 800f5b0:	e853 3f00 	ldrex	r3, [r3]
 800f5b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	f043 0320 	orr.w	r3, r3, #32
 800f5bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	461a      	mov	r2, r3
 800f5c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f5ca:	61fb      	str	r3, [r7, #28]
 800f5cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ce:	69b9      	ldr	r1, [r7, #24]
 800f5d0:	69fa      	ldr	r2, [r7, #28]
 800f5d2:	e841 2300 	strex	r3, r2, [r1]
 800f5d6:	617b      	str	r3, [r7, #20]
   return(result);
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d1e4      	bne.n	800f5a8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f5de:	e007      	b.n	800f5f0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	699a      	ldr	r2, [r3, #24]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	f042 0208 	orr.w	r2, r2, #8
 800f5ee:	619a      	str	r2, [r3, #24]
}
 800f5f0:	bf00      	nop
 800f5f2:	37b8      	adds	r7, #184	@ 0xb8
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}
 800f5f8:	effffffe 	.word	0xeffffffe
 800f5fc:	58000c00 	.word	0x58000c00
 800f600:	0800ed85 	.word	0x0800ed85

0800f604 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f604:	b480      	push	{r7}
 800f606:	b083      	sub	sp, #12
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f60c:	bf00      	nop
 800f60e:	370c      	adds	r7, #12
 800f610:	46bd      	mov	sp, r7
 800f612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f616:	4770      	bx	lr

0800f618 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f618:	b480      	push	{r7}
 800f61a:	b083      	sub	sp, #12
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f620:	bf00      	nop
 800f622:	370c      	adds	r7, #12
 800f624:	46bd      	mov	sp, r7
 800f626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62a:	4770      	bx	lr

0800f62c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f62c:	b480      	push	{r7}
 800f62e:	b083      	sub	sp, #12
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f634:	bf00      	nop
 800f636:	370c      	adds	r7, #12
 800f638:	46bd      	mov	sp, r7
 800f63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63e:	4770      	bx	lr

0800f640 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f640:	b480      	push	{r7}
 800f642:	b085      	sub	sp, #20
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f64e:	2b01      	cmp	r3, #1
 800f650:	d101      	bne.n	800f656 <HAL_UARTEx_DisableFifoMode+0x16>
 800f652:	2302      	movs	r3, #2
 800f654:	e027      	b.n	800f6a6 <HAL_UARTEx_DisableFifoMode+0x66>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2201      	movs	r2, #1
 800f65a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2224      	movs	r2, #36	@ 0x24
 800f662:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	681a      	ldr	r2, [r3, #0]
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	f022 0201 	bic.w	r2, r2, #1
 800f67c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f684:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2200      	movs	r2, #0
 800f68a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	68fa      	ldr	r2, [r7, #12]
 800f692:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2220      	movs	r2, #32
 800f698:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f6a4:	2300      	movs	r3, #0
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3714      	adds	r7, #20
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b0:	4770      	bx	lr

0800f6b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f6b2:	b580      	push	{r7, lr}
 800f6b4:	b084      	sub	sp, #16
 800f6b6:	af00      	add	r7, sp, #0
 800f6b8:	6078      	str	r0, [r7, #4]
 800f6ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f6c2:	2b01      	cmp	r3, #1
 800f6c4:	d101      	bne.n	800f6ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f6c6:	2302      	movs	r3, #2
 800f6c8:	e02d      	b.n	800f726 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2201      	movs	r2, #1
 800f6ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2224      	movs	r2, #36	@ 0x24
 800f6d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	681a      	ldr	r2, [r3, #0]
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	f022 0201 	bic.w	r2, r2, #1
 800f6f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	689b      	ldr	r3, [r3, #8]
 800f6f8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	683a      	ldr	r2, [r7, #0]
 800f702:	430a      	orrs	r2, r1
 800f704:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f706:	6878      	ldr	r0, [r7, #4]
 800f708:	f000 f8a0 	bl	800f84c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	68fa      	ldr	r2, [r7, #12]
 800f712:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2220      	movs	r2, #32
 800f718:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2200      	movs	r2, #0
 800f720:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f724:	2300      	movs	r3, #0
}
 800f726:	4618      	mov	r0, r3
 800f728:	3710      	adds	r7, #16
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}

0800f72e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f72e:	b580      	push	{r7, lr}
 800f730:	b084      	sub	sp, #16
 800f732:	af00      	add	r7, sp, #0
 800f734:	6078      	str	r0, [r7, #4]
 800f736:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f73e:	2b01      	cmp	r3, #1
 800f740:	d101      	bne.n	800f746 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f742:	2302      	movs	r3, #2
 800f744:	e02d      	b.n	800f7a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2201      	movs	r2, #1
 800f74a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2224      	movs	r2, #36	@ 0x24
 800f752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	681a      	ldr	r2, [r3, #0]
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	f022 0201 	bic.w	r2, r2, #1
 800f76c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	689b      	ldr	r3, [r3, #8]
 800f774:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	683a      	ldr	r2, [r7, #0]
 800f77e:	430a      	orrs	r2, r1
 800f780:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f000 f862 	bl	800f84c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	68fa      	ldr	r2, [r7, #12]
 800f78e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2220      	movs	r2, #32
 800f794:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2200      	movs	r2, #0
 800f79c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f7a0:	2300      	movs	r3, #0
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	3710      	adds	r7, #16
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bd80      	pop	{r7, pc}

0800f7aa <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f7aa:	b580      	push	{r7, lr}
 800f7ac:	b08c      	sub	sp, #48	@ 0x30
 800f7ae:	af00      	add	r7, sp, #0
 800f7b0:	60f8      	str	r0, [r7, #12]
 800f7b2:	60b9      	str	r1, [r7, #8]
 800f7b4:	4613      	mov	r3, r2
 800f7b6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f7c4:	2b20      	cmp	r3, #32
 800f7c6:	d13b      	bne.n	800f840 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d002      	beq.n	800f7d4 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800f7ce:	88fb      	ldrh	r3, [r7, #6]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d101      	bne.n	800f7d8 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	e034      	b.n	800f842 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	2201      	movs	r2, #1
 800f7dc:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800f7e4:	88fb      	ldrh	r3, [r7, #6]
 800f7e6:	461a      	mov	r2, r3
 800f7e8:	68b9      	ldr	r1, [r7, #8]
 800f7ea:	68f8      	ldr	r0, [r7, #12]
 800f7ec:	f7ff f824 	bl	800e838 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f7f4:	2b01      	cmp	r3, #1
 800f7f6:	d11d      	bne.n	800f834 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	2210      	movs	r2, #16
 800f7fe:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f806:	69bb      	ldr	r3, [r7, #24]
 800f808:	e853 3f00 	ldrex	r3, [r3]
 800f80c:	617b      	str	r3, [r7, #20]
   return(result);
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	f043 0310 	orr.w	r3, r3, #16
 800f814:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	461a      	mov	r2, r3
 800f81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f81e:	627b      	str	r3, [r7, #36]	@ 0x24
 800f820:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f822:	6a39      	ldr	r1, [r7, #32]
 800f824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f826:	e841 2300 	strex	r3, r2, [r1]
 800f82a:	61fb      	str	r3, [r7, #28]
   return(result);
 800f82c:	69fb      	ldr	r3, [r7, #28]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d1e6      	bne.n	800f800 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 800f832:	e002      	b.n	800f83a <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800f834:	2301      	movs	r3, #1
 800f836:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800f83a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f83e:	e000      	b.n	800f842 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 800f840:	2302      	movs	r3, #2
  }
}
 800f842:	4618      	mov	r0, r3
 800f844:	3730      	adds	r7, #48	@ 0x30
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}
	...

0800f84c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f84c:	b480      	push	{r7}
 800f84e:	b085      	sub	sp, #20
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d108      	bne.n	800f86e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2201      	movs	r2, #1
 800f860:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2201      	movs	r2, #1
 800f868:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f86c:	e031      	b.n	800f8d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f86e:	2310      	movs	r3, #16
 800f870:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f872:	2310      	movs	r3, #16
 800f874:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	689b      	ldr	r3, [r3, #8]
 800f87c:	0e5b      	lsrs	r3, r3, #25
 800f87e:	b2db      	uxtb	r3, r3
 800f880:	f003 0307 	and.w	r3, r3, #7
 800f884:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	689b      	ldr	r3, [r3, #8]
 800f88c:	0f5b      	lsrs	r3, r3, #29
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	f003 0307 	and.w	r3, r3, #7
 800f894:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f896:	7bbb      	ldrb	r3, [r7, #14]
 800f898:	7b3a      	ldrb	r2, [r7, #12]
 800f89a:	4911      	ldr	r1, [pc, #68]	@ (800f8e0 <UARTEx_SetNbDataToProcess+0x94>)
 800f89c:	5c8a      	ldrb	r2, [r1, r2]
 800f89e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f8a2:	7b3a      	ldrb	r2, [r7, #12]
 800f8a4:	490f      	ldr	r1, [pc, #60]	@ (800f8e4 <UARTEx_SetNbDataToProcess+0x98>)
 800f8a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f8a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8ac:	b29a      	uxth	r2, r3
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f8b4:	7bfb      	ldrb	r3, [r7, #15]
 800f8b6:	7b7a      	ldrb	r2, [r7, #13]
 800f8b8:	4909      	ldr	r1, [pc, #36]	@ (800f8e0 <UARTEx_SetNbDataToProcess+0x94>)
 800f8ba:	5c8a      	ldrb	r2, [r1, r2]
 800f8bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f8c0:	7b7a      	ldrb	r2, [r7, #13]
 800f8c2:	4908      	ldr	r1, [pc, #32]	@ (800f8e4 <UARTEx_SetNbDataToProcess+0x98>)
 800f8c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f8c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8ca:	b29a      	uxth	r2, r3
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f8d2:	bf00      	nop
 800f8d4:	3714      	adds	r7, #20
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8dc:	4770      	bx	lr
 800f8de:	bf00      	nop
 800f8e0:	0800fbf8 	.word	0x0800fbf8
 800f8e4:	0800fc00 	.word	0x0800fc00

0800f8e8 <memset>:
 800f8e8:	4402      	add	r2, r0
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	d100      	bne.n	800f8f2 <memset+0xa>
 800f8f0:	4770      	bx	lr
 800f8f2:	f803 1b01 	strb.w	r1, [r3], #1
 800f8f6:	e7f9      	b.n	800f8ec <memset+0x4>

0800f8f8 <__libc_init_array>:
 800f8f8:	b570      	push	{r4, r5, r6, lr}
 800f8fa:	4d0d      	ldr	r5, [pc, #52]	@ (800f930 <__libc_init_array+0x38>)
 800f8fc:	4c0d      	ldr	r4, [pc, #52]	@ (800f934 <__libc_init_array+0x3c>)
 800f8fe:	1b64      	subs	r4, r4, r5
 800f900:	10a4      	asrs	r4, r4, #2
 800f902:	2600      	movs	r6, #0
 800f904:	42a6      	cmp	r6, r4
 800f906:	d109      	bne.n	800f91c <__libc_init_array+0x24>
 800f908:	4d0b      	ldr	r5, [pc, #44]	@ (800f938 <__libc_init_array+0x40>)
 800f90a:	4c0c      	ldr	r4, [pc, #48]	@ (800f93c <__libc_init_array+0x44>)
 800f90c:	f000 f826 	bl	800f95c <_init>
 800f910:	1b64      	subs	r4, r4, r5
 800f912:	10a4      	asrs	r4, r4, #2
 800f914:	2600      	movs	r6, #0
 800f916:	42a6      	cmp	r6, r4
 800f918:	d105      	bne.n	800f926 <__libc_init_array+0x2e>
 800f91a:	bd70      	pop	{r4, r5, r6, pc}
 800f91c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f920:	4798      	blx	r3
 800f922:	3601      	adds	r6, #1
 800f924:	e7ee      	b.n	800f904 <__libc_init_array+0xc>
 800f926:	f855 3b04 	ldr.w	r3, [r5], #4
 800f92a:	4798      	blx	r3
 800f92c:	3601      	adds	r6, #1
 800f92e:	e7f2      	b.n	800f916 <__libc_init_array+0x1e>
 800f930:	0800fc10 	.word	0x0800fc10
 800f934:	0800fc10 	.word	0x0800fc10
 800f938:	0800fc10 	.word	0x0800fc10
 800f93c:	0800fc14 	.word	0x0800fc14

0800f940 <memcpy>:
 800f940:	440a      	add	r2, r1
 800f942:	4291      	cmp	r1, r2
 800f944:	f100 33ff 	add.w	r3, r0, #4294967295
 800f948:	d100      	bne.n	800f94c <memcpy+0xc>
 800f94a:	4770      	bx	lr
 800f94c:	b510      	push	{r4, lr}
 800f94e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f952:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f956:	4291      	cmp	r1, r2
 800f958:	d1f9      	bne.n	800f94e <memcpy+0xe>
 800f95a:	bd10      	pop	{r4, pc}

0800f95c <_init>:
 800f95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f95e:	bf00      	nop
 800f960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f962:	bc08      	pop	{r3}
 800f964:	469e      	mov	lr, r3
 800f966:	4770      	bx	lr

0800f968 <_fini>:
 800f968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f96a:	bf00      	nop
 800f96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f96e:	bc08      	pop	{r3}
 800f970:	469e      	mov	lr, r3
 800f972:	4770      	bx	lr
