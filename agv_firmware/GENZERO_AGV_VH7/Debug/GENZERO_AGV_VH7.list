
GENZERO_AGV_VH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f934  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800fc00  0800fc00  00010c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fe98  0800fe98  00010e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fea0  0800fea0  00010ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fea4  0800fea4  00010ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  24000000  0800fea8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005c0  24000064  0800ff0c  00011064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000624  0800ff0c  00011624  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00011064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ecc6  00000000  00000000  00011092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003300  00000000  00000000  0002fd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001868  00000000  00000000  00033058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001315  00000000  00000000  000348c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035fad  00000000  00000000  00035bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020977  00000000  00000000  0006bb82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167092  00000000  00000000  0008c4f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f358b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006a38  00000000  00000000  001f35d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  001fa008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000064 	.word	0x24000064
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800fbe8 	.word	0x0800fbe8

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000068 	.word	0x24000068
 8000308:	0800fbe8 	.word	0x0800fbe8

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80005fc:	b4b0      	push	{r4, r5, r7}
 80005fe:	b08f      	sub	sp, #60	@ 0x3c
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000604:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000608:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800060a:	2307      	movs	r3, #7
 800060c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000610:	2307      	movs	r3, #7
 8000612:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000616:	2301      	movs	r3, #1
 8000618:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 800061c:	23ff      	movs	r3, #255	@ 0xff
 800061e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000622:	2364      	movs	r3, #100	@ 0x64
 8000624:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000628:	2308      	movs	r3, #8
 800062a:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	461d      	mov	r5, r3
 8000630:	f107 040c 	add.w	r4, r7, #12
 8000634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800063a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800063c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000640:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	373c      	adds	r7, #60	@ 0x3c
 8000648:	46bd      	mov	sp, r7
 800064a:	bcb0      	pop	{r4, r5, r7}
 800064c:	4770      	bx	lr

0800064e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800064e:	b580      	push	{r7, lr}
 8000650:	b084      	sub	sp, #16
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000658:	2101      	movs	r1, #1
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f9fd 	bl	8000a5a <LoRa_read>
 8000660:	4603      	mov	r3, r0
 8000662:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000664:	7bbb      	ldrb	r3, [r7, #14]
 8000666:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d107      	bne.n	800067e <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	f023 0307 	bic.w	r3, r3, #7
 8000674:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
 800067c:	e03e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d10c      	bne.n	800069e <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000688:	f023 0307 	bic.w	r3, r3, #7
 800068c:	b25b      	sxtb	r3, r3
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	b25b      	sxtb	r3, r3
 8000694:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2201      	movs	r2, #1
 800069a:	61da      	str	r2, [r3, #28]
 800069c:	e02e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	d10c      	bne.n	80006be <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80006a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006a8:	f023 0307 	bic.w	r3, r3, #7
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	f043 0303 	orr.w	r3, r3, #3
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2203      	movs	r2, #3
 80006ba:	61da      	str	r2, [r3, #28]
 80006bc:	e01e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	d10c      	bne.n	80006de <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80006c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006c8:	f023 0307 	bic.w	r3, r3, #7
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	f043 0305 	orr.w	r3, r3, #5
 80006d2:	b25b      	sxtb	r3, r3
 80006d4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2205      	movs	r2, #5
 80006da:	61da      	str	r2, [r3, #28]
 80006dc:	e00e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	2b06      	cmp	r3, #6
 80006e2:	d10b      	bne.n	80006fc <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80006e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006e8:	f023 0307 	bic.w	r3, r3, #7
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	f043 0306 	orr.w	r3, r3, #6
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2206      	movs	r2, #6
 80006fa:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	461a      	mov	r2, r3
 8000700:	2101      	movs	r1, #1
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f000 f9c3 	bl	8000a8e <LoRa_write>
	//HAL_Delay(10);
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4613      	mov	r3, r2
 800071e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	889b      	ldrh	r3, [r3, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	4619      	mov	r1, r3
 800072c:	f007 fbce 	bl	8007ecc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	6998      	ldr	r0, [r3, #24]
 8000734:	88fa      	ldrh	r2, [r7, #6]
 8000736:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800073a:	68b9      	ldr	r1, [r7, #8]
 800073c:	f00b f8be 	bl	800b8bc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000740:	bf00      	nop
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4618      	mov	r0, r3
 8000748:	f00b fd18 	bl	800c17c <HAL_SPI_GetState>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	d1f7      	bne.n	8000742 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6998      	ldr	r0, [r3, #24]
 8000756:	8b3a      	ldrh	r2, [r7, #24]
 8000758:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800075c:	6839      	ldr	r1, [r7, #0]
 800075e:	f00b fa9b 	bl	800bc98 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000762:	bf00      	nop
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4618      	mov	r0, r3
 800076a:	f00b fd07 	bl	800c17c <HAL_SPI_GetState>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d1f7      	bne.n	8000764 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	889b      	ldrh	r3, [r3, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	4619      	mov	r1, r3
 8000780:	f007 fba4 	bl	8007ecc <HAL_GPIO_WritePin>
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	4613      	mov	r3, r2
 800079a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	889b      	ldrh	r3, [r3, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	f007 fb90 	bl	8007ecc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	6998      	ldr	r0, [r3, #24]
 80007b0:	88fa      	ldrh	r2, [r7, #6]
 80007b2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007b6:	68b9      	ldr	r1, [r7, #8]
 80007b8:	f00b f880 	bl	800b8bc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007bc:	bf00      	nop
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00b fcda 	bl	800c17c <HAL_SPI_GetState>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d1f7      	bne.n	80007be <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6998      	ldr	r0, [r3, #24]
 80007d2:	8b3a      	ldrh	r2, [r7, #24]
 80007d4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007d8:	6839      	ldr	r1, [r7, #0]
 80007da:	f00b f86f 	bl	800b8bc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007de:	bf00      	nop
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f00b fcc9 	bl	800c17c <HAL_SPI_GetState>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d1f7      	bne.n	80007e0 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	889b      	ldrh	r3, [r3, #4]
 80007f8:	2201      	movs	r2, #1
 80007fa:	4619      	mov	r1, r3
 80007fc:	f007 fb66 	bl	8007ecc <HAL_GPIO_WritePin>
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000814:	2126      	movs	r1, #38	@ 0x26
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 f91f 	bl	8000a5a <LoRa_read>
 800081c:	4603      	mov	r3, r0
 800081e:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d004      	beq.n	8000830 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e003      	b.n	8000838 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000830:	7bbb      	ldrb	r3, [r7, #14]
 8000832:	f023 0308 	bic.w	r3, r3, #8
 8000836:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	461a      	mov	r2, r3
 800083c:	2126      	movs	r1, #38	@ 0x26
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f000 f925 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000844:	200a      	movs	r0, #10
 8000846:	f002 f96f 	bl	8002b28 <HAL_Delay>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000854:	b580      	push	{r7, lr}
 8000856:	b096      	sub	sp, #88	@ 0x58
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 800085c:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <LoRa_setAutoLDO+0x64>)
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4611      	mov	r1, r2
 8000864:	2250      	movs	r2, #80	@ 0x50
 8000866:	4618      	mov	r0, r3
 8000868:	f00f f9b0 	bl	800fbcc <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000872:	461a      	mov	r2, r3
 8000874:	2301      	movs	r3, #1
 8000876:	4093      	lsls	r3, r2
 8000878:	ee07 3a90 	vmov	s15, r3
 800087c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	3358      	adds	r3, #88	@ 0x58
 800088a:	443b      	add	r3, r7
 800088c:	3b50      	subs	r3, #80	@ 0x50
 800088e:	ed93 6b00 	vldr	d6, [r3]
 8000892:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000896:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800089a:	ee17 3a90 	vmov	r3, s15
 800089e:	2b10      	cmp	r3, #16
 80008a0:	bfcc      	ite	gt
 80008a2:	2301      	movgt	r3, #1
 80008a4:	2300      	movle	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	4619      	mov	r1, r3
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffac 	bl	8000808 <LoRa_setLowDaraRateOptimization>
}
 80008b0:	bf00      	nop
 80008b2:	3758      	adds	r7, #88	@ 0x58
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	0800fc00 	.word	0x0800fc00

080008bc <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	04db      	lsls	r3, r3, #19
 80008ca:	115b      	asrs	r3, r3, #5
 80008cc:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	0c1b      	lsrs	r3, r3, #16
 80008d2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80008d4:	7afb      	ldrb	r3, [r7, #11]
 80008d6:	461a      	mov	r2, r3
 80008d8:	2106      	movs	r1, #6
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 f8d7 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 80008e0:	2005      	movs	r0, #5
 80008e2:	f002 f921 	bl	8002b28 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80008ec:	7afb      	ldrb	r3, [r7, #11]
 80008ee:	461a      	mov	r2, r3
 80008f0:	2107      	movs	r1, #7
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 f8cb 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 80008f8:	2005      	movs	r0, #5
 80008fa:	f002 f915 	bl	8002b28 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000902:	7afb      	ldrb	r3, [r7, #11]
 8000904:	461a      	mov	r2, r3
 8000906:	2108      	movs	r1, #8
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f8c0 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 800090e:	2005      	movs	r0, #5
 8000910:	f002 f90a 	bl	8002b28 <HAL_Delay>
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	2b0c      	cmp	r3, #12
 800092a:	dd01      	ble.n	8000930 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 800092c:	230c      	movs	r3, #12
 800092e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	2b06      	cmp	r3, #6
 8000934:	dc01      	bgt.n	800093a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000936:	2307      	movs	r3, #7
 8000938:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800093a:	211e      	movs	r1, #30
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 f88c 	bl	8000a5a <LoRa_read>
 8000942:	4603      	mov	r3, r0
 8000944:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000946:	200a      	movs	r0, #10
 8000948:	f002 f8ee 	bl	8002b28 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	011b      	lsls	r3, r3, #4
 8000952:	b2da      	uxtb	r2, r3
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4413      	add	r3, r2
 800095e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000960:	7bbb      	ldrb	r3, [r7, #14]
 8000962:	461a      	mov	r2, r3
 8000964:	211e      	movs	r1, #30
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f891 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 800096c:	200a      	movs	r0, #10
 800096e:	f002 f8db 	bl	8002b28 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ff6e 	bl	8000854 <LoRa_setAutoLDO>
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	461a      	mov	r2, r3
 8000990:	2109      	movs	r1, #9
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 f87b 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000998:	200a      	movs	r0, #10
 800099a:	f002 f8c5 	bl	8002b28 <HAL_Delay>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	2b2c      	cmp	r3, #44	@ 0x2c
 80009bc:	d801      	bhi.n	80009c2 <LoRa_setOCP+0x1a>
		current = 45;
 80009be:	232d      	movs	r3, #45	@ 0x2d
 80009c0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	2bf0      	cmp	r3, #240	@ 0xf0
 80009c6:	d901      	bls.n	80009cc <LoRa_setOCP+0x24>
		current = 240;
 80009c8:	23f0      	movs	r3, #240	@ 0xf0
 80009ca:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	2b78      	cmp	r3, #120	@ 0x78
 80009d0:	d809      	bhi.n	80009e6 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80009d2:	78fb      	ldrb	r3, [r7, #3]
 80009d4:	3b2d      	subs	r3, #45	@ 0x2d
 80009d6:	4a12      	ldr	r2, [pc, #72]	@ (8000a20 <LoRa_setOCP+0x78>)
 80009d8:	fb82 1203 	smull	r1, r2, r2, r3
 80009dc:	1052      	asrs	r2, r2, #1
 80009de:	17db      	asrs	r3, r3, #31
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	73fb      	strb	r3, [r7, #15]
 80009e4:	e00b      	b.n	80009fe <LoRa_setOCP+0x56>
	else if(current <= 240)
 80009e6:	78fb      	ldrb	r3, [r7, #3]
 80009e8:	2bf0      	cmp	r3, #240	@ 0xf0
 80009ea:	d808      	bhi.n	80009fe <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	331e      	adds	r3, #30
 80009f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a20 <LoRa_setOCP+0x78>)
 80009f2:	fb82 1203 	smull	r1, r2, r2, r3
 80009f6:	1092      	asrs	r2, r2, #2
 80009f8:	17db      	asrs	r3, r3, #31
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	3320      	adds	r3, #32
 8000a02:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	461a      	mov	r2, r3
 8000a08:	210b      	movs	r1, #11
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f83f 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000a10:	200a      	movs	r0, #10
 8000a12:	f002 f889 	bl	8002b28 <HAL_Delay>
}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	66666667 	.word	0x66666667

08000a24 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000a2c:	211e      	movs	r1, #30
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f000 f813 	bl	8000a5a <LoRa_read>
 8000a34:	4603      	mov	r3, r0
 8000a36:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	f043 0307 	orr.w	r3, r3, #7
 8000a3e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000a40:	7bbb      	ldrb	r3, [r7, #14]
 8000a42:	461a      	mov	r2, r3
 8000a44:	211e      	movs	r1, #30
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 f821 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000a4c:	200a      	movs	r0, #10
 8000a4e:	f002 f86b 	bl	8002b28 <HAL_Delay>
}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af02      	add	r7, sp, #8
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	460b      	mov	r3, r1
 8000a64:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000a66:	78fb      	ldrb	r3, [r7, #3]
 8000a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000a70:	f107 030f 	add.w	r3, r7, #15
 8000a74:	f107 010e 	add.w	r1, r7, #14
 8000a78:	2201      	movs	r2, #1
 8000a7a:	9200      	str	r2, [sp, #0]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff fe46 	bl	8000710 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af02      	add	r7, sp, #8
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	460b      	mov	r3, r1
 8000a98:	70fb      	strb	r3, [r7, #3]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000a9e:	78fb      	ldrb	r3, [r7, #3]
 8000aa0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000aa8:	78bb      	ldrb	r3, [r7, #2]
 8000aaa:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000aac:	f107 030f 	add.w	r3, r7, #15
 8000ab0:	f107 010e 	add.w	r1, r7, #14
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	9200      	str	r2, [sp, #0]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fe66 	bl	800078c <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	72fb      	strb	r3, [r7, #11]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8000adc:	7afb      	ldrb	r3, [r7, #11]
 8000ade:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	6818      	ldr	r0, [r3, #0]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	889b      	ldrh	r3, [r3, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	4619      	mov	r1, r3
 8000af2:	f007 f9eb 	bl	8007ecc <HAL_GPIO_WritePin>
	
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	6998      	ldr	r0, [r3, #24]
 8000afa:	f107 0117 	add.w	r1, r7, #23
 8000afe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b02:	2201      	movs	r2, #1
 8000b04:	f00a feda 	bl	800b8bc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000b08:	bf00      	nop
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f00b fb34 	bl	800c17c <HAL_SPI_GetState>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d1f7      	bne.n	8000b0a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	6998      	ldr	r0, [r3, #24]
 8000b1e:	7abb      	ldrb	r3, [r7, #10]
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	f00a fec8 	bl	800b8bc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000b2c:	bf00      	nop
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f00b fb22 	bl	800c17c <HAL_SPI_GetState>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d1f7      	bne.n	8000b2e <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	6818      	ldr	r0, [r3, #0]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	889b      	ldrh	r3, [r3, #4]
 8000b46:	2201      	movs	r2, #1
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f007 f9bf 	bl	8007ecc <HAL_GPIO_WritePin>
}
 8000b4e:	bf00      	nop
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]

	return 1;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	4611      	mov	r1, r2
 8000b78:	461a      	mov	r2, r3
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	71fb      	strb	r3, [r7, #7]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000b88:	2101      	movs	r1, #1
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff fd5f 	bl	800064e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000b90:	210e      	movs	r1, #14
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f7ff ff61 	bl	8000a5a <LoRa_read>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000b9c:	7cfb      	ldrb	r3, [r7, #19]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	210d      	movs	r1, #13
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f7ff ff73 	bl	8000a8e <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	461a      	mov	r2, r3
 8000bac:	2122      	movs	r1, #34	@ 0x22
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f7ff ff6d 	bl	8000a8e <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	2100      	movs	r1, #0
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f7ff ff84 	bl	8000ac8 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000bc0:	2103      	movs	r1, #3
 8000bc2:	68f8      	ldr	r0, [r7, #12]
 8000bc4:	f7ff fd43 	bl	800064e <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000bc8:	2112      	movs	r1, #18
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	f7ff ff45 	bl	8000a5a <LoRa_read>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8000bd4:	7cfb      	ldrb	r3, [r7, #19]
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d00a      	beq.n	8000bf4 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000bde:	22ff      	movs	r2, #255	@ 0xff
 8000be0:	2112      	movs	r1, #18
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f7ff ff53 	bl	8000a8e <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000be8:	6979      	ldr	r1, [r7, #20]
 8000bea:	68f8      	ldr	r0, [r7, #12]
 8000bec:	f7ff fd2f 	bl	800064e <LoRa_gotoMode>
			return 1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e00f      	b.n	8000c14 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8000bf4:	88bb      	ldrh	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	80bb      	strh	r3, [r7, #4]
 8000bfa:	88bb      	ldrh	r3, [r7, #4]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d105      	bne.n	8000c0c <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8000c00:	6979      	ldr	r1, [r7, #20]
 8000c02:	68f8      	ldr	r0, [r7, #12]
 8000c04:	f7ff fd23 	bl	800064e <LoRa_gotoMode>
				return 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e003      	b.n	8000c14 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f001 ff8b 	bl	8002b28 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000c12:	e7d9      	b.n	8000bc8 <LoRa_transmit+0x5c>
	}
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000c24:	2105      	movs	r1, #5
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff fd11 	bl	800064e <LoRa_gotoMode>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b089      	sub	sp, #36	@ 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	e007      	b.n	8000c5c <LoRa_receive+0x28>
		data[i]=0;
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	4413      	add	r3, r2
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dbf3      	blt.n	8000c4c <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000c64:	2101      	movs	r1, #1
 8000c66:	68f8      	ldr	r0, [r7, #12]
 8000c68:	f7ff fcf1 	bl	800064e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000c6c:	2112      	movs	r1, #18
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f7ff fef3 	bl	8000a5a <LoRa_read>
 8000c74:	4603      	mov	r3, r0
 8000c76:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000c78:	7cfb      	ldrb	r3, [r7, #19]
 8000c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d02f      	beq.n	8000ce2 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000c82:	22ff      	movs	r2, #255	@ 0xff
 8000c84:	2112      	movs	r1, #18
 8000c86:	68f8      	ldr	r0, [r7, #12]
 8000c88:	f7ff ff01 	bl	8000a8e <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000c8c:	2113      	movs	r1, #19
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f7ff fee3 	bl	8000a5a <LoRa_read>
 8000c94:	4603      	mov	r3, r0
 8000c96:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000c98:	2110      	movs	r1, #16
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f7ff fedd 	bl	8000a5a <LoRa_read>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000ca4:	7cfb      	ldrb	r3, [r7, #19]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	210d      	movs	r1, #13
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f7ff feef 	bl	8000a8e <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000cb0:	7cba      	ldrb	r2, [r7, #18]
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	bf28      	it	cs
 8000cb8:	4613      	movcs	r3, r2
 8000cba:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	e00b      	b.n	8000cda <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	68ba      	ldr	r2, [r7, #8]
 8000cc6:	18d4      	adds	r4, r2, r3
 8000cc8:	2100      	movs	r1, #0
 8000cca:	68f8      	ldr	r0, [r7, #12]
 8000ccc:	f7ff fec5 	bl	8000a5a <LoRa_read>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	7ffb      	ldrb	r3, [r7, #31]
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	dbef      	blt.n	8000cc2 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000ce2:	2105      	movs	r1, #5
 8000ce4:	68f8      	ldr	r0, [r7, #12]
 8000ce6:	f7ff fcb2 	bl	800064e <LoRa_gotoMode>
    return min;
 8000cea:	7ffb      	ldrb	r3, [r7, #31]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3724      	adds	r7, #36	@ 0x24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd90      	pop	{r4, r7, pc}

08000cf4 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff2a 	bl	8000b56 <LoRa_isvalid>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 8096 	beq.w	8000e36 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff fc9e 	bl	800064e <LoRa_gotoMode>
			HAL_Delay(10);
 8000d12:	200a      	movs	r0, #10
 8000d14:	f001 ff08 	bl	8002b28 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000d18:	2101      	movs	r1, #1
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff fe9d 	bl	8000a5a <LoRa_read>
 8000d20:	4603      	mov	r3, r0
 8000d22:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000d24:	200a      	movs	r0, #10
 8000d26:	f001 feff 	bl	8002b28 <HAL_Delay>
			data = read | 0x80;
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d30:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000d32:	7bbb      	ldrb	r3, [r7, #14]
 8000d34:	461a      	mov	r2, r3
 8000d36:	2101      	movs	r1, #1
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff fea8 	bl	8000a8e <LoRa_write>
			HAL_Delay(100);
 8000d3e:	2064      	movs	r0, #100	@ 0x64
 8000d40:	f001 fef2 	bl	8002b28 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a1b      	ldr	r3, [r3, #32]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff fdb6 	bl	80008bc <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000d56:	4619      	mov	r1, r3
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff fe11 	bl	8000980 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000d64:	4619      	mov	r1, r3
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff fe1e 	bl	80009a8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000d6c:	2223      	movs	r2, #35	@ 0x23
 8000d6e:	210c      	movs	r1, #12
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff fe8c 	bl	8000a8e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff fe54 	bl	8000a24 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d82:	4619      	mov	r1, r3
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff fdc9 	bl	800091c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000d8a:	22ff      	movs	r2, #255	@ 0xff
 8000d8c:	211f      	movs	r1, #31
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff fe7d 	bl	8000a8e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	4413      	add	r3, r2
 8000dae:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000db0:	7bbb      	ldrb	r3, [r7, #14]
 8000db2:	461a      	mov	r2, r3
 8000db4:	211d      	movs	r1, #29
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff fe69 	bl	8000a8e <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff fd49 	bl	8000854 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000dc6:	0a1b      	lsrs	r3, r3, #8
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	461a      	mov	r2, r3
 8000dce:	2120      	movs	r1, #32
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff fe5c 	bl	8000a8e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	461a      	mov	r2, r3
 8000dde:	2121      	movs	r1, #33	@ 0x21
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff fe54 	bl	8000a8e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000de6:	2140      	movs	r1, #64	@ 0x40
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff fe36 	bl	8000a5a <LoRa_read>
 8000dee:	4603      	mov	r3, r0
 8000df0:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8000df8:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	2140      	movs	r1, #64	@ 0x40
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff fe44 	bl	8000a8e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000e06:	2101      	movs	r1, #1
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff fc20 	bl	800064e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2201      	movs	r2, #1
 8000e12:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000e14:	200a      	movs	r0, #10
 8000e16:	f001 fe87 	bl	8002b28 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000e1a:	2142      	movs	r1, #66	@ 0x42
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff fe1c 	bl	8000a5a <LoRa_read>
 8000e22:	4603      	mov	r3, r0
 8000e24:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	2b12      	cmp	r3, #18
 8000e2a:	d101      	bne.n	8000e30 <LoRa_init+0x13c>
				return LORA_OK;
 8000e2c:	23c8      	movs	r3, #200	@ 0xc8
 8000e2e:	e004      	b.n	8000e3a <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8000e30:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8000e34:	e001      	b.n	8000e3a <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8000e36:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <ir_array_init>:
                   int      *ir_sen_read_line_old_val,
          volatile uint8_t  *ir_sen_on_line_total_num,
          volatile uint8_t  *ir_sen_on_line_mid_num,
		  volatile uint8_t  *ir_sen_on_line_left_num,
          volatile uint8_t  *ir_sen_on_line_right_num,
             const uint16_t *ir_sen_threshold){
 8000e42:	b480      	push	{r7}
 8000e44:	b087      	sub	sp, #28
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	603b      	str	r3, [r7, #0]

    for(uint8_t i = 0; i < 10; i++){
 8000e50:	2300      	movs	r3, #0
 8000e52:	75fb      	strb	r3, [r7, #23]
 8000e54:	e025      	b.n	8000ea2 <ir_array_init+0x60>
        //ir_struct->ir_sen_val_dma[i] = ir_sen_val_dma[i];
        ir_struct->ir_sen_val_cal[i] = ir_sen_val_cal[i];
 8000e56:	7dfb      	ldrb	r3, [r7, #23]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	441a      	add	r2, r3
 8000e5e:	7dfb      	ldrb	r3, [r7, #23]
 8000e60:	8812      	ldrh	r2, [r2, #0]
 8000e62:	b291      	uxth	r1, r2
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	3308      	adds	r3, #8
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	460a      	mov	r2, r1
 8000e6e:	809a      	strh	r2, [r3, #4]
        ir_struct->ir_sen_max_val[i] = ir_sen_max_val[i];
 8000e70:	7dfb      	ldrb	r3, [r7, #23]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	7dfa      	ldrb	r2, [r7, #23]
 8000e7a:	8819      	ldrh	r1, [r3, #0]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	3214      	adds	r2, #20
 8000e80:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        ir_struct->ir_sen_min_val[i] = ir_sen_min_val[i];
 8000e84:	7dfb      	ldrb	r3, [r7, #23]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	441a      	add	r2, r3
 8000e8c:	7dfb      	ldrb	r3, [r7, #23]
 8000e8e:	8811      	ldrh	r1, [r2, #0]
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	331c      	adds	r3, #28
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	4413      	add	r3, r2
 8000e98:	460a      	mov	r2, r1
 8000e9a:	809a      	strh	r2, [r3, #4]
    for(uint8_t i = 0; i < 10; i++){
 8000e9c:	7dfb      	ldrb	r3, [r7, #23]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	75fb      	strb	r3, [r7, #23]
 8000ea2:	7dfb      	ldrb	r3, [r7, #23]
 8000ea4:	2b09      	cmp	r3, #9
 8000ea6:	d9d6      	bls.n	8000e56 <ir_array_init+0x14>
    }
    ir_struct->ir_sen_channel_num = *ir_sen_channel_num;
 8000ea8:	6a3b      	ldr	r3, [r7, #32]
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    ir_struct->ir_sen_read_line_val = *ir_sen_read_line_val;
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    ir_struct->ir_sen_read_line_old_val = *ir_sen_read_line_old_val;
 8000ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	655a      	str	r2, [r3, #84]	@ 0x54
    ir_struct->ir_sen_on_line_total_num = *ir_sen_on_line_total_num;
 8000ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    ir_struct->ir_sen_on_line_mid_num = *ir_sen_on_line_mid_num;
 8000ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    ir_struct->ir_sen_on_line_left_num = *ir_sen_on_line_left_num;
 8000ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
    ir_struct->ir_sen_on_line_right_num = *ir_sen_on_line_right_num;
 8000eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
    ir_struct->ir_sen_threshold = *ir_sen_threshold;
 8000ef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ef8:	881a      	ldrh	r2, [r3, #0]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

}
 8000f00:	bf00      	nop
 8000f02:	371c      	adds	r7, #28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <Line_Sensor_Calculation>:

void Line_Sensor_Calculation(ir_array *ir_struct){
 8000f0c:	b480      	push	{r7}
 8000f0e:	b08b      	sub	sp, #44	@ 0x2c
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
    uint8_t i, on_line = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint32_t avg = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
    uint32_t sum = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    uint16_t value;
    uint8_t on_sensor_total_number = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	76fb      	strb	r3, [r7, #27]

    uint8_t middle_on_line = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	76bb      	strb	r3, [r7, #26]
    uint8_t left_on_line = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	767b      	strb	r3, [r7, #25]
    uint8_t right_on_line = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	763b      	strb	r3, [r7, #24]


    for(i = 0; i < ir_struct->ir_sen_channel_num; i++){
 8000f32:	2300      	movs	r3, #0
 8000f34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f38:	e092      	b.n	8001060 <Line_Sensor_Calculation+0x154>
        uint16_t calmin, calmax;
        uint16_t denominator;
        calmax = ir_struct->ir_sen_max_val[i];
 8000f3a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3214      	adds	r2, #20
 8000f42:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f46:	827b      	strh	r3, [r7, #18]
        calmin = ir_struct->ir_sen_min_val[i];
 8000f48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	331c      	adds	r3, #28
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	4413      	add	r3, r2
 8000f54:	889b      	ldrh	r3, [r3, #4]
 8000f56:	823b      	strh	r3, [r7, #16]

        denominator = calmax - calmin;
 8000f58:	8a7a      	ldrh	r2, [r7, #18]
 8000f5a:	8a3b      	ldrh	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	81fb      	strh	r3, [r7, #14]

        int x = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
        if(denominator != 0){
 8000f64:	89fb      	ldrh	r3, [r7, #14]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d010      	beq.n	8000f8c <Line_Sensor_Calculation+0x80>
            x = (((signed long)ir_struct->ir_sen_val_dma[i]) - calmin) * 1000/denominator;
 8000f6a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	461a      	mov	r2, r3
 8000f78:	8a3b      	ldrh	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f80:	fb03 f202 	mul.w	r2, r3, r2
 8000f84:	89fb      	ldrh	r3, [r7, #14]
 8000f86:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f8a:	617b      	str	r3, [r7, #20]
        }
        if(x <0){
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	da01      	bge.n	8000f96 <Line_Sensor_Calculation+0x8a>
            x = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
        }
        if(x>1000){
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f9c:	dd02      	ble.n	8000fa4 <Line_Sensor_Calculation+0x98>
            x = 1000;
 8000f9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa2:	617b      	str	r3, [r7, #20]
        }
        value = (1000-x);
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8000fac:	81bb      	strh	r3, [r7, #12]
        ir_struct->ir_sen_val_cal[i] = value;
 8000fae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	3308      	adds	r3, #8
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4413      	add	r3, r2
 8000fba:	89ba      	ldrh	r2, [r7, #12]
 8000fbc:	809a      	strh	r2, [r3, #4]

        // start read line number section
        if(value > 600){
 8000fbe:	89bb      	ldrh	r3, [r7, #12]
 8000fc0:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000fc4:	d902      	bls.n	8000fcc <Line_Sensor_Calculation+0xc0>
            on_line = 1;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }
        if(value > 200){
 8000fcc:	89bb      	ldrh	r3, [r7, #12]
 8000fce:	2bc8      	cmp	r3, #200	@ 0xc8
 8000fd0:	d910      	bls.n	8000ff4 <Line_Sensor_Calculation+0xe8>
            avg += (long)(value)*(i*1000);
 8000fd2:	89bb      	ldrh	r3, [r7, #12]
 8000fd4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000fd8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fdc:	fb01 f202 	mul.w	r2, r1, r2
 8000fe0:	fb02 f303 	mul.w	r3, r2, r3
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	4413      	add	r3, r2
 8000fea:	623b      	str	r3, [r7, #32]
            sum += value;
 8000fec:	89bb      	ldrh	r3, [r7, #12]
 8000fee:	69fa      	ldr	r2, [r7, #28]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	61fb      	str	r3, [r7, #28]
        }
        // end read line number section

        // start on line sensor calculation
        if(value > ir_struct->ir_sen_threshold){
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8000ffa:	89ba      	ldrh	r2, [r7, #12]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d923      	bls.n	8001048 <Line_Sensor_Calculation+0x13c>
            on_sensor_total_number++;
 8001000:	7efb      	ldrb	r3, [r7, #27]
 8001002:	3301      	adds	r3, #1
 8001004:	76fb      	strb	r3, [r7, #27]
            ir_struct->ir_sen_val_cal_trig[i] = 0xff;
 8001006:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	22ff      	movs	r2, #255	@ 0xff
 8001010:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
            if(i >= 2 && i <= 7){
 8001014:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001018:	2b01      	cmp	r3, #1
 800101a:	d906      	bls.n	800102a <Line_Sensor_Calculation+0x11e>
 800101c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001020:	2b07      	cmp	r3, #7
 8001022:	d802      	bhi.n	800102a <Line_Sensor_Calculation+0x11e>
                middle_on_line++;
 8001024:	7ebb      	ldrb	r3, [r7, #26]
 8001026:	3301      	adds	r3, #1
 8001028:	76bb      	strb	r3, [r7, #26]
            }
            if(i <= 2){
 800102a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800102e:	2b02      	cmp	r3, #2
 8001030:	d802      	bhi.n	8001038 <Line_Sensor_Calculation+0x12c>
            	left_on_line++;
 8001032:	7e7b      	ldrb	r3, [r7, #25]
 8001034:	3301      	adds	r3, #1
 8001036:	767b      	strb	r3, [r7, #25]
            }
            if(i >= 7){
 8001038:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800103c:	2b06      	cmp	r3, #6
 800103e:	d90a      	bls.n	8001056 <Line_Sensor_Calculation+0x14a>
            	right_on_line++;
 8001040:	7e3b      	ldrb	r3, [r7, #24]
 8001042:	3301      	adds	r3, #1
 8001044:	763b      	strb	r3, [r7, #24]
 8001046:	e006      	b.n	8001056 <Line_Sensor_Calculation+0x14a>
            }
        }
        else{
        	ir_struct->ir_sen_val_cal_trig[i] = 0x00;
 8001048:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	4413      	add	r3, r2
 8001050:	2200      	movs	r2, #0
 8001052:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
    for(i = 0; i < ir_struct->ir_sen_channel_num; i++){
 8001056:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800105a:	3301      	adds	r3, #1
 800105c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001066:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800106a:	429a      	cmp	r2, r3
 800106c:	f4ff af65 	bcc.w	8000f3a <Line_Sensor_Calculation+0x2e>
        }
        // end on line sensor calculation
    }

    // start read line number section
    if(!on_line){
 8001070:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001074:	2b00      	cmp	r3, #0
 8001076:	d11a      	bne.n	80010ae <Line_Sensor_Calculation+0x1a2>
        if(ir_struct->ir_sen_read_line_old_val < (ir_struct->ir_sen_channel_num - 1) * 1000/2){
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001082:	3b01      	subs	r3, #1
 8001084:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001088:	fb01 f303 	mul.w	r3, r1, r3
 800108c:	429a      	cmp	r2, r3
 800108e:	da03      	bge.n	8001098 <Line_Sensor_Calculation+0x18c>
            ir_struct->ir_sen_read_line_old_val = 0;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	655a      	str	r2, [r3, #84]	@ 0x54
 8001096:	e011      	b.n	80010bc <Line_Sensor_Calculation+0x1b0>
        }
        else{
            ir_struct->ir_sen_read_line_old_val = (ir_struct->ir_sen_channel_num - 1)*1000;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800109e:	3b01      	subs	r3, #1
 80010a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010a4:	fb03 f202 	mul.w	r2, r3, r2
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	655a      	str	r2, [r3, #84]	@ 0x54
 80010ac:	e006      	b.n	80010bc <Line_Sensor_Calculation+0x1b0>
        }
    }
    else{
        ir_struct->ir_sen_read_line_old_val = avg/sum;
 80010ae:	6a3a      	ldr	r2, [r7, #32]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b6:	461a      	mov	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    ir_struct->ir_sen_read_line_val = ir_struct->ir_sen_read_line_old_val;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    // end read line number section

    // start on line sensor calculation

    ir_struct->ir_sen_on_line_left_num = left_on_line;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	7e7a      	ldrb	r2, [r7, #25]
 80010cc:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
    ir_struct->ir_sen_on_line_right_num = right_on_line;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	7e3a      	ldrb	r2, [r7, #24]
 80010d4:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b

    ir_struct->ir_sen_on_line_mid_num = middle_on_line;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7eba      	ldrb	r2, [r7, #26]
 80010dc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    ir_struct->ir_sen_on_line_total_num = on_sensor_total_number;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7efa      	ldrb	r2, [r7, #27]
 80010e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    // end on line sensor calculation
    // 0 - 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9

    // 2 - 7 --> mid

}
 80010e8:	bf00      	nop
 80010ea:	372c      	adds	r7, #44	@ 0x2c
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <PID_Forward_Rotation>:
		pid_motor_speed_B = 0;
	}

}

void PID_Forward_Rotation(uint16_t enableA, uint16_t enableB, uint16_t *orientation){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	603a      	str	r2, [r7, #0]
 80010fe:	80fb      	strh	r3, [r7, #6]
 8001100:	460b      	mov	r3, r1
 8001102:	80bb      	strh	r3, [r7, #4]

	if(*orientation == 0xF11F){
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 800110c:	4293      	cmp	r3, r2
 800110e:	d11b      	bne.n	8001148 <PID_Forward_Rotation+0x54>
		//LEFT
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	2120      	movs	r1, #32
 8001114:	4825      	ldr	r0, [pc, #148]	@ (80011ac <PID_Forward_Rotation+0xb8>)
 8001116:	f006 fed9 	bl	8007ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2110      	movs	r1, #16
 800111e:	4823      	ldr	r0, [pc, #140]	@ (80011ac <PID_Forward_Rotation+0xb8>)
 8001120:	f006 fed4 	bl	8007ecc <HAL_GPIO_WritePin>

		//RIGHT
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	2104      	movs	r1, #4
 8001128:	4820      	ldr	r0, [pc, #128]	@ (80011ac <PID_Forward_Rotation+0xb8>)
 800112a:	f006 fecf 	bl	8007ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	2108      	movs	r1, #8
 8001132:	481e      	ldr	r0, [pc, #120]	@ (80011ac <PID_Forward_Rotation+0xb8>)
 8001134:	f006 feca 	bl	8007ecc <HAL_GPIO_WritePin>

		//Right
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, enableA);
 8001138:	4b1d      	ldr	r3, [pc, #116]	@ (80011b0 <PID_Forward_Rotation+0xbc>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	88fa      	ldrh	r2, [r7, #6]
 800113e:	635a      	str	r2, [r3, #52]	@ 0x34

		//Left
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, enableB);
 8001140:	4b1b      	ldr	r3, [pc, #108]	@ (80011b0 <PID_Forward_Rotation+0xbc>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	88ba      	ldrh	r2, [r7, #4]
 8001146:	639a      	str	r2, [r3, #56]	@ 0x38

//		set_speed(0x01, enableB, 0);
//		set_speed(0x02, enableA, 1);
	}

	if(*orientation == 0xF00F){
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 8001150:	4293      	cmp	r3, r2
 8001152:	d127      	bne.n	80011a4 <PID_Forward_Rotation+0xb0>

		//LEFT
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	2120      	movs	r1, #32
 8001158:	4814      	ldr	r0, [pc, #80]	@ (80011ac <PID_Forward_Rotation+0xb8>)
 800115a:	f006 feb7 	bl	8007ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 800115e:	2201      	movs	r2, #1
 8001160:	2110      	movs	r1, #16
 8001162:	4812      	ldr	r0, [pc, #72]	@ (80011ac <PID_Forward_Rotation+0xb8>)
 8001164:	f006 feb2 	bl	8007ecc <HAL_GPIO_WritePin>

		//RIGHT
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8001168:	2201      	movs	r2, #1
 800116a:	2104      	movs	r1, #4
 800116c:	480f      	ldr	r0, [pc, #60]	@ (80011ac <PID_Forward_Rotation+0xb8>)
 800116e:	f006 fead 	bl	8007ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2108      	movs	r1, #8
 8001176:	480d      	ldr	r0, [pc, #52]	@ (80011ac <PID_Forward_Rotation+0xb8>)
 8001178:	f006 fea8 	bl	8007ecc <HAL_GPIO_WritePin>

		//Right
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, enableA);
 800117c:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <PID_Forward_Rotation+0xbc>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	88fa      	ldrh	r2, [r7, #6]
 8001182:	635a      	str	r2, [r3, #52]	@ 0x34

		//Left
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, enableB);
 8001184:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <PID_Forward_Rotation+0xbc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	88ba      	ldrh	r2, [r7, #4]
 800118a:	639a      	str	r2, [r3, #56]	@ 0x38

		set_speed(0x01, enableB, 1);
 800118c:	88bb      	ldrh	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	4619      	mov	r1, r3
 8001192:	2001      	movs	r0, #1
 8001194:	f000 f946 	bl	8001424 <set_speed>
		set_speed(0x02, enableA, 0);
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	2200      	movs	r2, #0
 800119c:	4619      	mov	r1, r3
 800119e:	2002      	movs	r0, #2
 80011a0:	f000 f940 	bl	8001424 <set_speed>

	}



}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	58020000 	.word	0x58020000
 80011b0:	240002d8 	.word	0x240002d8

080011b4 <HAL_GPIO_EXTI_Callback>:
//		Station_id[3] = uid[3];
//		Station_id[4] = uid[4];
//	}
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d102      	bne.n	80011ca <HAL_GPIO_EXTI_Callback+0x16>
		Station = 0;
 80011c4:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <HAL_GPIO_EXTI_Callback+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_1){
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d102      	bne.n	80011d6 <HAL_GPIO_EXTI_Callback+0x22>
		Station = 1;
 80011d0:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <HAL_GPIO_EXTI_Callback+0x74>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_2){
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	2b04      	cmp	r3, #4
 80011da:	d102      	bne.n	80011e2 <HAL_GPIO_EXTI_Callback+0x2e>
		Station = 2;
 80011dc:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <HAL_GPIO_EXTI_Callback+0x74>)
 80011de:	2202      	movs	r2, #2
 80011e0:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_3){
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	d102      	bne.n	80011ee <HAL_GPIO_EXTI_Callback+0x3a>
		Station = 3;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001228 <HAL_GPIO_EXTI_Callback+0x74>)
 80011ea:	2203      	movs	r2, #3
 80011ec:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_4){
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	2b10      	cmp	r3, #16
 80011f2:	d103      	bne.n	80011fc <HAL_GPIO_EXTI_Callback+0x48>
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_7);
 80011f4:	2180      	movs	r1, #128	@ 0x80
 80011f6:	480d      	ldr	r0, [pc, #52]	@ (800122c <HAL_GPIO_EXTI_Callback+0x78>)
 80011f8:	f006 fe81 	bl	8007efe <HAL_GPIO_TogglePin>
	}

	if(GPIO_Pin == myLoRa.DIO0_pin){
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <HAL_GPIO_EXTI_Callback+0x7c>)
 80011fe:	8a9b      	ldrh	r3, [r3, #20]
 8001200:	88fa      	ldrh	r2, [r7, #6]
 8001202:	429a      	cmp	r2, r3
 8001204:	d10b      	bne.n	800121e <HAL_GPIO_EXTI_Callback+0x6a>
		LoRa_receive(&myLoRa, LoraRxBuffer, 128);
 8001206:	2280      	movs	r2, #128	@ 0x80
 8001208:	490a      	ldr	r1, [pc, #40]	@ (8001234 <HAL_GPIO_EXTI_Callback+0x80>)
 800120a:	4809      	ldr	r0, [pc, #36]	@ (8001230 <HAL_GPIO_EXTI_Callback+0x7c>)
 800120c:	f7ff fd12 	bl	8000c34 <LoRa_receive>
		HAL_GPIO_TogglePin(LORA_RX_LED_GPIO_Port, LORA_RX_LED_Pin);
 8001210:	2140      	movs	r1, #64	@ 0x40
 8001212:	4809      	ldr	r0, [pc, #36]	@ (8001238 <HAL_GPIO_EXTI_Callback+0x84>)
 8001214:	f006 fe73 	bl	8007efe <HAL_GPIO_TogglePin>
		lora_receive_toggle = 255;
 8001218:	4b08      	ldr	r3, [pc, #32]	@ (800123c <HAL_GPIO_EXTI_Callback+0x88>)
 800121a:	22ff      	movs	r2, #255	@ 0xff
 800121c:	701a      	strb	r2, [r3, #0]

	}
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	240004e8 	.word	0x240004e8
 800122c:	58021800 	.word	0x58021800
 8001230:	240004ec 	.word	0x240004ec
 8001234:	2400059c 	.word	0x2400059c
 8001238:	58020c00 	.word	0x58020c00
 800123c:	2400061c 	.word	0x2400061c

08001240 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	807b      	strh	r3, [r7, #2]

//	if(rs485_RxData[1] == 0x6){ //0x6 == writing function code
//
//	}
	if(rs485_RxData[1] == 0x3){ //0x3 == reading function code
 800124c:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <HAL_UARTEx_RxEventCallback+0x6c>)
 800124e:	785b      	ldrb	r3, [r3, #1]
 8001250:	2b03      	cmp	r3, #3
 8001252:	d11b      	bne.n	800128c <HAL_UARTEx_RxEventCallback+0x4c>
		rs485_rx_num_bytes = rs485_RxData[2];
 8001254:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <HAL_UARTEx_RxEventCallback+0x6c>)
 8001256:	789a      	ldrb	r2, [r3, #2]
 8001258:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <HAL_UARTEx_RxEventCallback+0x70>)
 800125a:	701a      	strb	r2, [r3, #0]
		rs485_reg_address = (rs485_TxData[2] << 8) | (rs485_TxData[3]);
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <HAL_UARTEx_RxEventCallback+0x74>)
 800125e:	789b      	ldrb	r3, [r3, #2]
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	b21a      	sxth	r2, r3
 8001264:	4b13      	ldr	r3, [pc, #76]	@ (80012b4 <HAL_UARTEx_RxEventCallback+0x74>)
 8001266:	78db      	ldrb	r3, [r3, #3]
 8001268:	b21b      	sxth	r3, r3
 800126a:	4313      	orrs	r3, r2
 800126c:	b21b      	sxth	r3, r3
 800126e:	b29a      	uxth	r2, r3
 8001270:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <HAL_UARTEx_RxEventCallback+0x78>)
 8001272:	801a      	strh	r2, [r3, #0]
		rs485_reg_number  = (rs485_TxData[4] << 8) | (rs485_TxData[5]);
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <HAL_UARTEx_RxEventCallback+0x74>)
 8001276:	791b      	ldrb	r3, [r3, #4]
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b21a      	sxth	r2, r3
 800127c:	4b0d      	ldr	r3, [pc, #52]	@ (80012b4 <HAL_UARTEx_RxEventCallback+0x74>)
 800127e:	795b      	ldrb	r3, [r3, #5]
 8001280:	b21b      	sxth	r3, r3
 8001282:	4313      	orrs	r3, r2
 8001284:	b21b      	sxth	r3, r3
 8001286:	b29a      	uxth	r2, r3
 8001288:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <HAL_UARTEx_RxEventCallback+0x7c>)
 800128a:	801a      	strh	r2, [r3, #0]

	}
	//rs485_time2 = HAL_GetTick();
	//rs485_exc_time = rs485_time2 - rs485_time1;
	rs485_isbusy = 0;
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <HAL_UARTEx_RxEventCallback+0x80>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
	rs485_fail_check = 0;
 8001292:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <HAL_UARTEx_RxEventCallback+0x84>)
 8001294:	2200      	movs	r2, #0
 8001296:	801a      	strh	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, rs485_RxData, 32);
 8001298:	2220      	movs	r2, #32
 800129a:	4904      	ldr	r1, [pc, #16]	@ (80012ac <HAL_UARTEx_RxEventCallback+0x6c>)
 800129c:	480a      	ldr	r0, [pc, #40]	@ (80012c8 <HAL_UARTEx_RxEventCallback+0x88>)
 800129e:	f00e fbca 	bl	800fa36 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	240003b8 	.word	0x240003b8
 80012b0:	240003d6 	.word	0x240003d6
 80012b4:	240003c8 	.word	0x240003c8
 80012b8:	240003d2 	.word	0x240003d2
 80012bc:	240003d4 	.word	0x240003d4
 80012c0:	240003d0 	.word	0x240003d0
 80012c4:	240003d8 	.word	0x240003d8
 80012c8:	24000324 	.word	0x24000324

080012cc <rs485_send_data>:

void rs485_send_data(uint8_t *data)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

	if(rs485_isbusy == 0){
 80012d4:	4b23      	ldr	r3, [pc, #140]	@ (8001364 <rs485_send_data+0x98>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d116      	bne.n	800130a <rs485_send_data+0x3e>
		HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_SET);
 80012dc:	2201      	movs	r2, #1
 80012de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012e2:	4821      	ldr	r0, [pc, #132]	@ (8001368 <rs485_send_data+0x9c>)
 80012e4:	f006 fdf2 	bl	8007ecc <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart1, data, 8, 1000);
 80012e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ec:	2208      	movs	r2, #8
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	481e      	ldr	r0, [pc, #120]	@ (800136c <rs485_send_data+0xa0>)
 80012f2:	f00b ff5b 	bl	800d1ac <HAL_UART_Transmit>
		HAL_GPIO_WritePin(TX_EN_GPIO_Port,TX_EN_Pin , GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012fc:	481a      	ldr	r0, [pc, #104]	@ (8001368 <rs485_send_data+0x9c>)
 80012fe:	f006 fde5 	bl	8007ecc <HAL_GPIO_WritePin>
		rs485_isbusy = 255;
 8001302:	4b18      	ldr	r3, [pc, #96]	@ (8001364 <rs485_send_data+0x98>)
 8001304:	22ff      	movs	r2, #255	@ 0xff
 8001306:	701a      	strb	r2, [r3, #0]
				//rs485_connectivity++;
			}
		}
		rs485_last_fail_check = rs485_fail_check;
	}
}
 8001308:	e028      	b.n	800135c <rs485_send_data+0x90>
		if(rs485_fail_check < 0xffff){
 800130a:	4b19      	ldr	r3, [pc, #100]	@ (8001370 <rs485_send_data+0xa4>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001312:	4293      	cmp	r3, r2
 8001314:	d006      	beq.n	8001324 <rs485_send_data+0x58>
			rs485_fail_check++;
 8001316:	4b16      	ldr	r3, [pc, #88]	@ (8001370 <rs485_send_data+0xa4>)
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	3301      	adds	r3, #1
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <rs485_send_data+0xa4>)
 8001320:	801a      	strh	r2, [r3, #0]
 8001322:	e005      	b.n	8001330 <rs485_send_data+0x64>
			rs485_isbusy = 0;
 8001324:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <rs485_send_data+0x98>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
			HAL_Delay(20);
 800132a:	2014      	movs	r0, #20
 800132c:	f001 fbfc 	bl	8002b28 <HAL_Delay>
		if(rs485_last_fail_check == 0xffff){
 8001330:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <rs485_send_data+0xa8>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001338:	4293      	cmp	r3, r2
 800133a:	d10b      	bne.n	8001354 <rs485_send_data+0x88>
			if(rs485_fail_check < 0xffff){
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <rs485_send_data+0xa4>)
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001344:	4293      	cmp	r3, r2
 8001346:	d005      	beq.n	8001354 <rs485_send_data+0x88>
				motor_enable_velocity_mode(0x01);
 8001348:	2001      	movs	r0, #1
 800134a:	f000 f815 	bl	8001378 <motor_enable_velocity_mode>
				motor_enable_velocity_mode(0x02);
 800134e:	2002      	movs	r0, #2
 8001350:	f000 f812 	bl	8001378 <motor_enable_velocity_mode>
		rs485_last_fail_check = rs485_fail_check;
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <rs485_send_data+0xa4>)
 8001356:	881a      	ldrh	r2, [r3, #0]
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <rs485_send_data+0xa8>)
 800135a:	801a      	strh	r2, [r3, #0]
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	240003d0 	.word	0x240003d0
 8001368:	58020400 	.word	0x58020400
 800136c:	24000324 	.word	0x24000324
 8001370:	240003d8 	.word	0x240003d8
 8001374:	240003da 	.word	0x240003da

08001378 <motor_enable_velocity_mode>:


void motor_enable_velocity_mode(uint8_t id){
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
	  rs485_TxData[0] = id;
 8001382:	4a27      	ldr	r2, [pc, #156]	@ (8001420 <motor_enable_velocity_mode+0xa8>)
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	7013      	strb	r3, [r2, #0]
	  rs485_TxData[1] = 0x06;  // Function code
 8001388:	4b25      	ldr	r3, [pc, #148]	@ (8001420 <motor_enable_velocity_mode+0xa8>)
 800138a:	2206      	movs	r2, #6
 800138c:	705a      	strb	r2, [r3, #1]
	  //address 2032 -> Operating Mode
	  rs485_TxData[2] = 0x20;  // High 8 bit register address
 800138e:	4b24      	ldr	r3, [pc, #144]	@ (8001420 <motor_enable_velocity_mode+0xa8>)
 8001390:	2220      	movs	r2, #32
 8001392:	709a      	strb	r2, [r3, #2]
	  rs485_TxData[3] = 0x32;  // Low  8 bit register address
 8001394:	4b22      	ldr	r3, [pc, #136]	@ (8001420 <motor_enable_velocity_mode+0xa8>)
 8001396:	2232      	movs	r2, #50	@ 0x32
 8001398:	70da      	strb	r2, [r3, #3]
	  //data 0x03 -> Set Velocity Mode
	  rs485_TxData[4] = 0x00;  // High 8 bit register data
 800139a:	4b21      	ldr	r3, [pc, #132]	@ (8001420 <motor_enable_velocity_mode+0xa8>)
 800139c:	2200      	movs	r2, #0
 800139e:	711a      	strb	r2, [r3, #4]
	  rs485_TxData[5] = 0x03;  // Low  8 bit register data
 80013a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001420 <motor_enable_velocity_mode+0xa8>)
 80013a2:	2203      	movs	r2, #3
 80013a4:	715a      	strb	r2, [r3, #5]
	  uint16_t crc = crc16(rs485_TxData, 6);
 80013a6:	2106      	movs	r1, #6
 80013a8:	481d      	ldr	r0, [pc, #116]	@ (8001420 <motor_enable_velocity_mode+0xa8>)
 80013aa:	f000 fef3 	bl	8002194 <crc16>
 80013ae:	4603      	mov	r3, r0
 80013b0:	81fb      	strh	r3, [r7, #14]
	  rs485_TxData[6] = crc&0xFF;
 80013b2:	89fb      	ldrh	r3, [r7, #14]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <motor_enable_velocity_mode+0xa8>)
 80013b8:	719a      	strb	r2, [r3, #6]
	  rs485_TxData[7] = (crc>>8)&0xFF;
 80013ba:	89fb      	ldrh	r3, [r7, #14]
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	b29b      	uxth	r3, r3
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4b17      	ldr	r3, [pc, #92]	@ (8001420 <motor_enable_velocity_mode+0xa8>)
 80013c4:	71da      	strb	r2, [r3, #7]
	  rs485_send_data(rs485_TxData);
 80013c6:	4816      	ldr	r0, [pc, #88]	@ (8001420 <motor_enable_velocity_mode+0xa8>)
 80013c8:	f7ff ff80 	bl	80012cc <rs485_send_data>


	  rs485_TxData[0] = id;
 80013cc:	4a14      	ldr	r2, [pc, #80]	@ (8001420 <motor_enable_velocity_mode+0xa8>)
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	7013      	strb	r3, [r2, #0]
	  rs485_TxData[1] = 0x06;  // Function code
 80013d2:	4b13      	ldr	r3, [pc, #76]	@ (8001420 <motor_enable_velocity_mode+0xa8>)
 80013d4:	2206      	movs	r2, #6
 80013d6:	705a      	strb	r2, [r3, #1]
	  //address 2031 -> Control Word
	  rs485_TxData[2] = 0x20;  // High 8 bit register address
 80013d8:	4b11      	ldr	r3, [pc, #68]	@ (8001420 <motor_enable_velocity_mode+0xa8>)
 80013da:	2220      	movs	r2, #32
 80013dc:	709a      	strb	r2, [r3, #2]
	  rs485_TxData[3] = 0x31;  // Low  8 bit register address
 80013de:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <motor_enable_velocity_mode+0xa8>)
 80013e0:	2231      	movs	r2, #49	@ 0x31
 80013e2:	70da      	strb	r2, [r3, #3]
	  //data 0x08 -> Enable Motor
	  rs485_TxData[4] = 0x00;  // High 8 bit register data
 80013e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001420 <motor_enable_velocity_mode+0xa8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	711a      	strb	r2, [r3, #4]
	  rs485_TxData[5] = 0x08;  // Low  8 bit register data
 80013ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001420 <motor_enable_velocity_mode+0xa8>)
 80013ec:	2208      	movs	r2, #8
 80013ee:	715a      	strb	r2, [r3, #5]
	  crc = crc16(rs485_TxData, 6);
 80013f0:	2106      	movs	r1, #6
 80013f2:	480b      	ldr	r0, [pc, #44]	@ (8001420 <motor_enable_velocity_mode+0xa8>)
 80013f4:	f000 fece 	bl	8002194 <crc16>
 80013f8:	4603      	mov	r3, r0
 80013fa:	81fb      	strh	r3, [r7, #14]
	  rs485_TxData[6] = crc&0xFF;
 80013fc:	89fb      	ldrh	r3, [r7, #14]
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b07      	ldr	r3, [pc, #28]	@ (8001420 <motor_enable_velocity_mode+0xa8>)
 8001402:	719a      	strb	r2, [r3, #6]
	  rs485_TxData[7] = (crc>>8)&0xFF;
 8001404:	89fb      	ldrh	r3, [r7, #14]
 8001406:	0a1b      	lsrs	r3, r3, #8
 8001408:	b29b      	uxth	r3, r3
 800140a:	b2da      	uxtb	r2, r3
 800140c:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <motor_enable_velocity_mode+0xa8>)
 800140e:	71da      	strb	r2, [r3, #7]
	  rs485_send_data(rs485_TxData);
 8001410:	4803      	ldr	r0, [pc, #12]	@ (8001420 <motor_enable_velocity_mode+0xa8>)
 8001412:	f7ff ff5b 	bl	80012cc <rs485_send_data>

}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	240003c8 	.word	0x240003c8

08001424 <set_speed>:

void set_speed(uint8_t id, uint16_t speed, uint8_t dir){
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
 800142e:	460b      	mov	r3, r1
 8001430:	80bb      	strh	r3, [r7, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	71bb      	strb	r3, [r7, #6]

	rs485_TxData[0] = id;
 8001436:	4a20      	ldr	r2, [pc, #128]	@ (80014b8 <set_speed+0x94>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	7013      	strb	r3, [r2, #0]
	rs485_TxData[1] = 0x06;  // Function code
 800143c:	4b1e      	ldr	r3, [pc, #120]	@ (80014b8 <set_speed+0x94>)
 800143e:	2206      	movs	r2, #6
 8001440:	705a      	strb	r2, [r3, #1]
	//address 203A -> Target Speed
	rs485_TxData[2] = 0x20;  // High 8 bit register address
 8001442:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <set_speed+0x94>)
 8001444:	2220      	movs	r2, #32
 8001446:	709a      	strb	r2, [r3, #2]
	rs485_TxData[3] = 0x3A;  // Low  8 bit register address
 8001448:	4b1b      	ldr	r3, [pc, #108]	@ (80014b8 <set_speed+0x94>)
 800144a:	223a      	movs	r2, #58	@ 0x3a
 800144c:	70da      	strb	r2, [r3, #3]
	// Set Speed and Direction
	if(dir == 0){
 800144e:	79bb      	ldrb	r3, [r7, #6]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d109      	bne.n	8001468 <set_speed+0x44>
		rs485_TxData[4] = (speed>>8)&0xFF; // High 8 bit register data
 8001454:	88bb      	ldrh	r3, [r7, #4]
 8001456:	0a1b      	lsrs	r3, r3, #8
 8001458:	b29b      	uxth	r3, r3
 800145a:	b2da      	uxtb	r2, r3
 800145c:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <set_speed+0x94>)
 800145e:	711a      	strb	r2, [r3, #4]
		rs485_TxData[5] = speed&0xFF; // Low  8 bit register address
 8001460:	88bb      	ldrh	r3, [r7, #4]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <set_speed+0x94>)
 8001466:	715a      	strb	r2, [r3, #5]
	}
	if(dir == 1){
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d10c      	bne.n	8001488 <set_speed+0x64>
		speed = (~speed) + 1;
 800146e:	88bb      	ldrh	r3, [r7, #4]
 8001470:	425b      	negs	r3, r3
 8001472:	80bb      	strh	r3, [r7, #4]
		rs485_TxData[4] = (speed>>8)&0xFF; // High 8 bit register data
 8001474:	88bb      	ldrh	r3, [r7, #4]
 8001476:	0a1b      	lsrs	r3, r3, #8
 8001478:	b29b      	uxth	r3, r3
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <set_speed+0x94>)
 800147e:	711a      	strb	r2, [r3, #4]
		rs485_TxData[5] = speed&0xFF; // Low  8 bit register address
 8001480:	88bb      	ldrh	r3, [r7, #4]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <set_speed+0x94>)
 8001486:	715a      	strb	r2, [r3, #5]
	}
	uint16_t crc = crc16(rs485_TxData, 6);
 8001488:	2106      	movs	r1, #6
 800148a:	480b      	ldr	r0, [pc, #44]	@ (80014b8 <set_speed+0x94>)
 800148c:	f000 fe82 	bl	8002194 <crc16>
 8001490:	4603      	mov	r3, r0
 8001492:	81fb      	strh	r3, [r7, #14]
	rs485_TxData[6] = crc&0xFF;
 8001494:	89fb      	ldrh	r3, [r7, #14]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b07      	ldr	r3, [pc, #28]	@ (80014b8 <set_speed+0x94>)
 800149a:	719a      	strb	r2, [r3, #6]
	rs485_TxData[7] = (crc>>8)&0xFF;
 800149c:	89fb      	ldrh	r3, [r7, #14]
 800149e:	0a1b      	lsrs	r3, r3, #8
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	4b04      	ldr	r3, [pc, #16]	@ (80014b8 <set_speed+0x94>)
 80014a6:	71da      	strb	r2, [r3, #7]
	rs485_send_data(rs485_TxData);
 80014a8:	4803      	ldr	r0, [pc, #12]	@ (80014b8 <set_speed+0x94>)
 80014aa:	f7ff ff0f 	bl	80012cc <rs485_send_data>
}
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	240003c8 	.word	0x240003c8

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b5b0      	push	{r4, r5, r7, lr}
 80014be:	b094      	sub	sp, #80	@ 0x50
 80014c0:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c2:	f001 fa9f 	bl	8002a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c6:	f000 f91b 	bl	8001700 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80014ca:	f000 f98b 	bl	80017e4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ce:	f000 fd03 	bl	8001ed8 <MX_GPIO_Init>
  MX_DMA_Init();
 80014d2:	f000 fcd9 	bl	8001e88 <MX_DMA_Init>
  MX_ADC1_Init();
 80014d6:	f000 f9b9 	bl	800184c <MX_ADC1_Init>
  MX_ADC3_Init();
 80014da:	f000 fac9 	bl	8001a70 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 80014de:	f000 fc87 	bl	8001df0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80014e2:	f000 fc21 	bl	8001d28 <MX_TIM2_Init>
  MX_SPI1_Init();
 80014e6:	f000 fbc9 	bl	8001c7c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */



  HAL_UARTEx_ReceiveToIdle_IT(&huart1, rs485_RxData, 16);
 80014ea:	2210      	movs	r2, #16
 80014ec:	4960      	ldr	r1, [pc, #384]	@ (8001670 <main+0x1b4>)
 80014ee:	4861      	ldr	r0, [pc, #388]	@ (8001674 <main+0x1b8>)
 80014f0:	f00e faa1 	bl	800fa36 <HAL_UARTEx_ReceiveToIdle_IT>


  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80014f4:	2100      	movs	r1, #0
 80014f6:	4860      	ldr	r0, [pc, #384]	@ (8001678 <main+0x1bc>)
 80014f8:	f00a ff8e 	bl	800c418 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80014fc:	2104      	movs	r1, #4
 80014fe:	485e      	ldr	r0, [pc, #376]	@ (8001678 <main+0x1bc>)
 8001500:	f00a ff8a 	bl	800c418 <HAL_TIM_PWM_Start>
//  motor_enable_velocity_mode(0x01);
//  motor_enable_velocity_mode(0x02);



  myLoRa = newLoRa();
 8001504:	4c5d      	ldr	r4, [pc, #372]	@ (800167c <main+0x1c0>)
 8001506:	463b      	mov	r3, r7
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f877 	bl	80005fc <newLoRa>
 800150e:	4625      	mov	r5, r4
 8001510:	463c      	mov	r4, r7
 8001512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800151e:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = LORA_NSS_GPIO_Port;
 8001522:	4b56      	ldr	r3, [pc, #344]	@ (800167c <main+0x1c0>)
 8001524:	4a56      	ldr	r2, [pc, #344]	@ (8001680 <main+0x1c4>)
 8001526:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = LORA_NSS_Pin;
 8001528:	4b54      	ldr	r3, [pc, #336]	@ (800167c <main+0x1c0>)
 800152a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800152e:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = LORA_RST_GPIO_Port;
 8001530:	4b52      	ldr	r3, [pc, #328]	@ (800167c <main+0x1c0>)
 8001532:	4a53      	ldr	r2, [pc, #332]	@ (8001680 <main+0x1c4>)
 8001534:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = LORA_RST_Pin;
 8001536:	4b51      	ldr	r3, [pc, #324]	@ (800167c <main+0x1c0>)
 8001538:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800153c:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = LORA_DIO0_GPIO_Port;
 800153e:	4b4f      	ldr	r3, [pc, #316]	@ (800167c <main+0x1c0>)
 8001540:	4a4f      	ldr	r2, [pc, #316]	@ (8001680 <main+0x1c4>)
 8001542:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = LORA_DIO0_Pin;
 8001544:	4b4d      	ldr	r3, [pc, #308]	@ (800167c <main+0x1c0>)
 8001546:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800154a:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 800154c:	4b4b      	ldr	r3, [pc, #300]	@ (800167c <main+0x1c0>)
 800154e:	4a4d      	ldr	r2, [pc, #308]	@ (8001684 <main+0x1c8>)
 8001550:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 433;             // default = 433 MHz
 8001552:	4b4a      	ldr	r3, [pc, #296]	@ (800167c <main+0x1c0>)
 8001554:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8001558:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 800155a:	4b48      	ldr	r3, [pc, #288]	@ (800167c <main+0x1c0>)
 800155c:	2207      	movs	r2, #7
 800155e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  myLoRa.bandWidth             = BW_125KHz;       // default = BW_125KHz
 8001562:	4b46      	ldr	r3, [pc, #280]	@ (800167c <main+0x1c0>)
 8001564:	2207      	movs	r2, #7
 8001566:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 800156a:	4b44      	ldr	r3, [pc, #272]	@ (800167c <main+0x1c0>)
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 8001572:	4b42      	ldr	r3, [pc, #264]	@ (800167c <main+0x1c0>)
 8001574:	22ff      	movs	r2, #255	@ 0xff
 8001576:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  myLoRa.overCurrentProtection = 100;             // default = 100 mA
 800157a:	4b40      	ldr	r3, [pc, #256]	@ (800167c <main+0x1c0>)
 800157c:	2264      	movs	r2, #100	@ 0x64
 800157e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  myLoRa.preamble              = 8;              // default = 8;
 8001582:	4b3e      	ldr	r3, [pc, #248]	@ (800167c <main+0x1c0>)
 8001584:	2208      	movs	r2, #8
 8001586:	851a      	strh	r2, [r3, #40]	@ 0x28

  if(LoRa_init(&myLoRa) == LORA_OK){
 8001588:	483c      	ldr	r0, [pc, #240]	@ (800167c <main+0x1c0>)
 800158a:	f7ff fbb3 	bl	8000cf4 <LoRa_init>
 800158e:	4603      	mov	r3, r0
 8001590:	2bc8      	cmp	r3, #200	@ 0xc8
 8001592:	d102      	bne.n	800159a <main+0xde>
	  LoRa_stat = 1;
 8001594:	4b3c      	ldr	r3, [pc, #240]	@ (8001688 <main+0x1cc>)
 8001596:	2201      	movs	r2, #1
 8001598:	801a      	strh	r2, [r3, #0]
  }

  LoRa_startReceiving(&myLoRa);
 800159a:	4838      	ldr	r0, [pc, #224]	@ (800167c <main+0x1c0>)
 800159c:	f7ff fb3e 	bl	8000c1c <LoRa_startReceiving>

  LoraTxBuffer[0] = 0xAA;
 80015a0:	4b3a      	ldr	r3, [pc, #232]	@ (800168c <main+0x1d0>)
 80015a2:	22aa      	movs	r2, #170	@ 0xaa
 80015a4:	701a      	strb	r2, [r3, #0]
  LoraTxBuffer[1] = 0xBB;
 80015a6:	4b39      	ldr	r3, [pc, #228]	@ (800168c <main+0x1d0>)
 80015a8:	22bb      	movs	r2, #187	@ 0xbb
 80015aa:	705a      	strb	r2, [r3, #1]
  LoraTxBuffer[2] = 0xCC;
 80015ac:	4b37      	ldr	r3, [pc, #220]	@ (800168c <main+0x1d0>)
 80015ae:	22cc      	movs	r2, #204	@ 0xcc
 80015b0:	709a      	strb	r2, [r3, #2]

  //LoRa_transmit(&myLoRa, LoraTxBuffer, 3, 500);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) front_array.ir_sen_val_dma, line_sensor_front_channel_number);
 80015b2:	230a      	movs	r3, #10
 80015b4:	461a      	mov	r2, r3
 80015b6:	4936      	ldr	r1, [pc, #216]	@ (8001690 <main+0x1d4>)
 80015b8:	4836      	ldr	r0, [pc, #216]	@ (8001694 <main+0x1d8>)
 80015ba:	f001 ffe3 	bl	8003584 <HAL_ADC_Start_DMA>
  ir_array_init(&front_array,
 80015be:	4b36      	ldr	r3, [pc, #216]	@ (8001698 <main+0x1dc>)
 80015c0:	9307      	str	r3, [sp, #28]
 80015c2:	4b36      	ldr	r3, [pc, #216]	@ (800169c <main+0x1e0>)
 80015c4:	9306      	str	r3, [sp, #24]
 80015c6:	4b36      	ldr	r3, [pc, #216]	@ (80016a0 <main+0x1e4>)
 80015c8:	9305      	str	r3, [sp, #20]
 80015ca:	4b36      	ldr	r3, [pc, #216]	@ (80016a4 <main+0x1e8>)
 80015cc:	9304      	str	r3, [sp, #16]
 80015ce:	4b36      	ldr	r3, [pc, #216]	@ (80016a8 <main+0x1ec>)
 80015d0:	9303      	str	r3, [sp, #12]
 80015d2:	4b36      	ldr	r3, [pc, #216]	@ (80016ac <main+0x1f0>)
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	4b36      	ldr	r3, [pc, #216]	@ (80016b0 <main+0x1f4>)
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	4b36      	ldr	r3, [pc, #216]	@ (80016b4 <main+0x1f8>)
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	4b36      	ldr	r3, [pc, #216]	@ (80016b8 <main+0x1fc>)
 80015e0:	4a36      	ldr	r2, [pc, #216]	@ (80016bc <main+0x200>)
 80015e2:	4937      	ldr	r1, [pc, #220]	@ (80016c0 <main+0x204>)
 80015e4:	482a      	ldr	r0, [pc, #168]	@ (8001690 <main+0x1d4>)
 80015e6:	f7ff fc2c 	bl	8000e42 <ir_array_init>
                &line_sensor_front_on_line_left_number,
                &line_sensor_front_on_line_right_number,
                &line_sensor_front_threshold);


  HAL_ADC_Start_DMA(&hadc3, (uint32_t*) back_array.ir_sen_val_dma, line_sensor_back_channel_number);
 80015ea:	230a      	movs	r3, #10
 80015ec:	461a      	mov	r2, r3
 80015ee:	4935      	ldr	r1, [pc, #212]	@ (80016c4 <main+0x208>)
 80015f0:	4835      	ldr	r0, [pc, #212]	@ (80016c8 <main+0x20c>)
 80015f2:	f001 ffc7 	bl	8003584 <HAL_ADC_Start_DMA>
  ir_array_init(&back_array,
 80015f6:	4b35      	ldr	r3, [pc, #212]	@ (80016cc <main+0x210>)
 80015f8:	9307      	str	r3, [sp, #28]
 80015fa:	4b35      	ldr	r3, [pc, #212]	@ (80016d0 <main+0x214>)
 80015fc:	9306      	str	r3, [sp, #24]
 80015fe:	4b35      	ldr	r3, [pc, #212]	@ (80016d4 <main+0x218>)
 8001600:	9305      	str	r3, [sp, #20]
 8001602:	4b35      	ldr	r3, [pc, #212]	@ (80016d8 <main+0x21c>)
 8001604:	9304      	str	r3, [sp, #16]
 8001606:	4b35      	ldr	r3, [pc, #212]	@ (80016dc <main+0x220>)
 8001608:	9303      	str	r3, [sp, #12]
 800160a:	4b35      	ldr	r3, [pc, #212]	@ (80016e0 <main+0x224>)
 800160c:	9302      	str	r3, [sp, #8]
 800160e:	4b35      	ldr	r3, [pc, #212]	@ (80016e4 <main+0x228>)
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	4b35      	ldr	r3, [pc, #212]	@ (80016e8 <main+0x22c>)
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	4b35      	ldr	r3, [pc, #212]	@ (80016ec <main+0x230>)
 8001618:	4a35      	ldr	r2, [pc, #212]	@ (80016f0 <main+0x234>)
 800161a:	4936      	ldr	r1, [pc, #216]	@ (80016f4 <main+0x238>)
 800161c:	4829      	ldr	r0, [pc, #164]	@ (80016c4 <main+0x208>)
 800161e:	f7ff fc10 	bl	8000e42 <ir_array_init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  agv_orientation = 0xF00F;
 8001622:	4b35      	ldr	r3, [pc, #212]	@ (80016f8 <main+0x23c>)
 8001624:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 8001628:	801a      	strh	r2, [r3, #0]
//
	  if(lora_receive_toggle == 255){
 800162a:	4b34      	ldr	r3, [pc, #208]	@ (80016fc <main+0x240>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2bff      	cmp	r3, #255	@ 0xff
 8001630:	d111      	bne.n	8001656 <main+0x19a>
		  if(LoRa_transmit(&myLoRa, LoraTxBuffer, 26, 500) == 1){
 8001632:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001636:	221a      	movs	r2, #26
 8001638:	4914      	ldr	r1, [pc, #80]	@ (800168c <main+0x1d0>)
 800163a:	4810      	ldr	r0, [pc, #64]	@ (800167c <main+0x1c0>)
 800163c:	f7ff fa96 	bl	8000b6c <LoRa_transmit>
 8001640:	4603      	mov	r3, r0
 8001642:	2b01      	cmp	r3, #1
 8001644:	d104      	bne.n	8001650 <main+0x194>

			  HAL_GPIO_TogglePin(LORA_TX_LED_GPIO_Port, LORA_TX_LED_Pin);
 8001646:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800164a:	480d      	ldr	r0, [pc, #52]	@ (8001680 <main+0x1c4>)
 800164c:	f006 fc57 	bl	8007efe <HAL_GPIO_TogglePin>
		  }
		  lora_receive_toggle = 0;
 8001650:	4b2a      	ldr	r3, [pc, #168]	@ (80016fc <main+0x240>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
	  }

	  Line_Sensor_Calculation(&front_array);
 8001656:	480e      	ldr	r0, [pc, #56]	@ (8001690 <main+0x1d4>)
 8001658:	f7ff fc58 	bl	8000f0c <Line_Sensor_Calculation>
	  Line_Sensor_Calculation(&back_array);
 800165c:	4819      	ldr	r0, [pc, #100]	@ (80016c4 <main+0x208>)
 800165e:	f7ff fc55 	bl	8000f0c <Line_Sensor_Calculation>
//	  HAL_Delay(10);
//	  motor_enable_velocity_mode(0x02);
//	  HAL_Delay(10);
//	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_7);
//	  agv_orientation = 0xF00F;
	  PID_Forward_Rotation(255, 10, &agv_orientation);
 8001662:	4a25      	ldr	r2, [pc, #148]	@ (80016f8 <main+0x23c>)
 8001664:	210a      	movs	r1, #10
 8001666:	20ff      	movs	r0, #255	@ 0xff
 8001668:	f7ff fd44 	bl	80010f4 <PID_Forward_Rotation>
	  agv_orientation = 0xF00F;
 800166c:	e7d9      	b.n	8001622 <main+0x166>
 800166e:	bf00      	nop
 8001670:	240003b8 	.word	0x240003b8
 8001674:	24000324 	.word	0x24000324
 8001678:	240002d8 	.word	0x240002d8
 800167c:	240004ec 	.word	0x240004ec
 8001680:	58021800 	.word	0x58021800
 8001684:	24000250 	.word	0x24000250
 8001688:	24000518 	.word	0x24000518
 800168c:	2400051c 	.word	0x2400051c
 8001690:	24000418 	.word	0x24000418
 8001694:	24000080 	.word	0x24000080
 8001698:	0800fc52 	.word	0x0800fc52
 800169c:	2400040e 	.word	0x2400040e
 80016a0:	2400040c 	.word	0x2400040c
 80016a4:	2400040d 	.word	0x2400040d
 80016a8:	2400040f 	.word	0x2400040f
 80016ac:	240003dc 	.word	0x240003dc
 80016b0:	24000414 	.word	0x24000414
 80016b4:	0800fc50 	.word	0x0800fc50
 80016b8:	24000014 	.word	0x24000014
 80016bc:	24000000 	.word	0x24000000
 80016c0:	240003e4 	.word	0x240003e4
 80016c4:	24000480 	.word	0x24000480
 80016c8:	240000f0 	.word	0x240000f0
 80016cc:	0800fc54 	.word	0x0800fc54
 80016d0:	24000412 	.word	0x24000412
 80016d4:	24000410 	.word	0x24000410
 80016d8:	24000411 	.word	0x24000411
 80016dc:	24000413 	.word	0x24000413
 80016e0:	240003e0 	.word	0x240003e0
 80016e4:	24000416 	.word	0x24000416
 80016e8:	0800fc51 	.word	0x0800fc51
 80016ec:	2400003c 	.word	0x2400003c
 80016f0:	24000028 	.word	0x24000028
 80016f4:	240003f8 	.word	0x240003f8
 80016f8:	24000050 	.word	0x24000050
 80016fc:	2400061c 	.word	0x2400061c

08001700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b09c      	sub	sp, #112	@ 0x70
 8001704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800170a:	224c      	movs	r2, #76	@ 0x4c
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f00e fa30 	bl	800fb74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2220      	movs	r2, #32
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f00e fa2a 	bl	800fb74 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001720:	2002      	movs	r0, #2
 8001722:	f006 fc21 	bl	8007f68 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001726:	2300      	movs	r3, #0
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	4b2d      	ldr	r3, [pc, #180]	@ (80017e0 <SystemClock_Config+0xe0>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	4a2c      	ldr	r2, [pc, #176]	@ (80017e0 <SystemClock_Config+0xe0>)
 8001730:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001734:	6193      	str	r3, [r2, #24]
 8001736:	4b2a      	ldr	r3, [pc, #168]	@ (80017e0 <SystemClock_Config+0xe0>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001742:	bf00      	nop
 8001744:	4b26      	ldr	r3, [pc, #152]	@ (80017e0 <SystemClock_Config+0xe0>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800174c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001750:	d1f8      	bne.n	8001744 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001752:	2303      	movs	r3, #3
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001756:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800175a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800175c:	2301      	movs	r3, #1
 800175e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001760:	2340      	movs	r3, #64	@ 0x40
 8001762:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001764:	2302      	movs	r3, #2
 8001766:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001768:	2302      	movs	r3, #2
 800176a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800176c:	2302      	movs	r3, #2
 800176e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001770:	232c      	movs	r3, #44	@ 0x2c
 8001772:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001774:	2301      	movs	r3, #1
 8001776:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001778:	2303      	movs	r3, #3
 800177a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800177c:	2302      	movs	r3, #2
 800177e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001780:	230c      	movs	r3, #12
 8001782:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001784:	2300      	movs	r3, #0
 8001786:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001790:	4618      	mov	r0, r3
 8001792:	f006 fc23 	bl	8007fdc <HAL_RCC_OscConfig>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800179c:	f000 fcf4 	bl	8002188 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a0:	233f      	movs	r3, #63	@ 0x3f
 80017a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a4:	2303      	movs	r3, #3
 80017a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80017ac:	2308      	movs	r3, #8
 80017ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80017b0:	2340      	movs	r3, #64	@ 0x40
 80017b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80017b4:	2340      	movs	r3, #64	@ 0x40
 80017b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80017b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80017be:	2340      	movs	r3, #64	@ 0x40
 80017c0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	2103      	movs	r1, #3
 80017c6:	4618      	mov	r0, r3
 80017c8:	f006 ffe2 	bl	8008790 <HAL_RCC_ClockConfig>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80017d2:	f000 fcd9 	bl	8002188 <Error_Handler>
  }
}
 80017d6:	bf00      	nop
 80017d8:	3770      	adds	r7, #112	@ 0x70
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	58024800 	.word	0x58024800

080017e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b0ae      	sub	sp, #184	@ 0xb8
 80017e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017ea:	463b      	mov	r3, r7
 80017ec:	22b8      	movs	r2, #184	@ 0xb8
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00e f9bf 	bl	800fb74 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CKPER;
 80017f6:	4a14      	ldr	r2, [pc, #80]	@ (8001848 <PeriphCommonClock_Config+0x64>)
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001800:	2302      	movs	r3, #2
 8001802:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 8001804:	230f      	movs	r3, #15
 8001806:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001808:	2302      	movs	r3, #2
 800180a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800180c:	2302      	movs	r3, #2
 800180e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001810:	2302      	movs	r3, #2
 8001812:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001814:	23c0      	movs	r3, #192	@ 0xc0
 8001816:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001818:	2300      	movs	r3, #0
 800181a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 800181c:	f640 3386 	movw	r3, #2950	@ 0xb86
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001822:	2300      	movs	r3, #0
 8001824:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001826:	2300      	movs	r3, #0
 8001828:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800182c:	463b      	mov	r3, r7
 800182e:	4618      	mov	r0, r3
 8001830:	f007 fb3a 	bl	8008ea8 <HAL_RCCEx_PeriphCLKConfig>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800183a:	f000 fca5 	bl	8002188 <Error_Handler>
  }
}
 800183e:	bf00      	nop
 8001840:	37b8      	adds	r7, #184	@ 0xb8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	80080000 	.word	0x80080000

0800184c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08c      	sub	sp, #48	@ 0x30
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001852:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800185e:	463b      	mov	r3, r7
 8001860:	2224      	movs	r2, #36	@ 0x24
 8001862:	2100      	movs	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f00e f985 	bl	800fb74 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800186a:	4b75      	ldr	r3, [pc, #468]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 800186c:	4a75      	ldr	r2, [pc, #468]	@ (8001a44 <MX_ADC1_Init+0x1f8>)
 800186e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001870:	4b73      	ldr	r3, [pc, #460]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 8001872:	2200      	movs	r2, #0
 8001874:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001876:	4b72      	ldr	r3, [pc, #456]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 8001878:	2208      	movs	r2, #8
 800187a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800187c:	4b70      	ldr	r3, [pc, #448]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 800187e:	2201      	movs	r2, #1
 8001880:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001882:	4b6f      	ldr	r3, [pc, #444]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 8001884:	2204      	movs	r2, #4
 8001886:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001888:	4b6d      	ldr	r3, [pc, #436]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 800188a:	2200      	movs	r2, #0
 800188c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800188e:	4b6c      	ldr	r3, [pc, #432]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 8001890:	2201      	movs	r2, #1
 8001892:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 8001894:	4b6a      	ldr	r3, [pc, #424]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 8001896:	220a      	movs	r2, #10
 8001898:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800189a:	4b69      	ldr	r3, [pc, #420]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018a2:	4b67      	ldr	r3, [pc, #412]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018a8:	4b65      	ldr	r3, [pc, #404]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80018ae:	4b64      	ldr	r3, [pc, #400]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 80018b0:	2203      	movs	r2, #3
 80018b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80018b4:	4b62      	ldr	r3, [pc, #392]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 80018b6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80018bc:	4b60      	ldr	r3, [pc, #384]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 80018be:	2200      	movs	r2, #0
 80018c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80018c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80018ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018d0:	485b      	ldr	r0, [pc, #364]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 80018d2:	f001 fc4f 	bl	8003174 <HAL_ADC_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80018dc:	f000 fc54 	bl	8002188 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80018e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e8:	4619      	mov	r1, r3
 80018ea:	4855      	ldr	r0, [pc, #340]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 80018ec:	f003 f91c 	bl	8004b28 <HAL_ADCEx_MultiModeConfigChannel>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80018f6:	f000 fc47 	bl	8002188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80018fa:	4b53      	ldr	r3, [pc, #332]	@ (8001a48 <MX_ADC1_Init+0x1fc>)
 80018fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018fe:	2306      	movs	r3, #6
 8001900:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8001902:	2305      	movs	r3, #5
 8001904:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001906:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800190a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800190c:	2304      	movs	r3, #4
 800190e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800191a:	463b      	mov	r3, r7
 800191c:	4619      	mov	r1, r3
 800191e:	4848      	ldr	r0, [pc, #288]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 8001920:	f002 f96e 	bl	8003c00 <HAL_ADC_ConfigChannel>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800192a:	f000 fc2d 	bl	8002188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800192e:	4b47      	ldr	r3, [pc, #284]	@ (8001a4c <MX_ADC1_Init+0x200>)
 8001930:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001932:	230c      	movs	r3, #12
 8001934:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001936:	463b      	mov	r3, r7
 8001938:	4619      	mov	r1, r3
 800193a:	4841      	ldr	r0, [pc, #260]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 800193c:	f002 f960 	bl	8003c00 <HAL_ADC_ConfigChannel>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001946:	f000 fc1f 	bl	8002188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800194a:	4b41      	ldr	r3, [pc, #260]	@ (8001a50 <MX_ADC1_Init+0x204>)
 800194c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800194e:	2312      	movs	r3, #18
 8001950:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001952:	463b      	mov	r3, r7
 8001954:	4619      	mov	r1, r3
 8001956:	483a      	ldr	r0, [pc, #232]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 8001958:	f002 f952 	bl	8003c00 <HAL_ADC_ConfigChannel>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8001962:	f000 fc11 	bl	8002188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001966:	4b3b      	ldr	r3, [pc, #236]	@ (8001a54 <MX_ADC1_Init+0x208>)
 8001968:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800196a:	2318      	movs	r3, #24
 800196c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800196e:	463b      	mov	r3, r7
 8001970:	4619      	mov	r1, r3
 8001972:	4833      	ldr	r0, [pc, #204]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 8001974:	f002 f944 	bl	8003c00 <HAL_ADC_ConfigChannel>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 800197e:	f000 fc03 	bl	8002188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001982:	4b35      	ldr	r3, [pc, #212]	@ (8001a58 <MX_ADC1_Init+0x20c>)
 8001984:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001986:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800198a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800198c:	463b      	mov	r3, r7
 800198e:	4619      	mov	r1, r3
 8001990:	482b      	ldr	r0, [pc, #172]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 8001992:	f002 f935 	bl	8003c00 <HAL_ADC_ConfigChannel>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800199c:	f000 fbf4 	bl	8002188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80019a0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a5c <MX_ADC1_Init+0x210>)
 80019a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80019a4:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80019a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019aa:	463b      	mov	r3, r7
 80019ac:	4619      	mov	r1, r3
 80019ae:	4824      	ldr	r0, [pc, #144]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 80019b0:	f002 f926 	bl	8003c00 <HAL_ADC_ConfigChannel>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 80019ba:	f000 fbe5 	bl	8002188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80019be:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <MX_ADC1_Init+0x214>)
 80019c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80019c2:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80019c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019c8:	463b      	mov	r3, r7
 80019ca:	4619      	mov	r1, r3
 80019cc:	481c      	ldr	r0, [pc, #112]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 80019ce:	f002 f917 	bl	8003c00 <HAL_ADC_ConfigChannel>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 80019d8:	f000 fbd6 	bl	8002188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80019dc:	4b21      	ldr	r3, [pc, #132]	@ (8001a64 <MX_ADC1_Init+0x218>)
 80019de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80019e0:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80019e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019e6:	463b      	mov	r3, r7
 80019e8:	4619      	mov	r1, r3
 80019ea:	4815      	ldr	r0, [pc, #84]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 80019ec:	f002 f908 	bl	8003c00 <HAL_ADC_ConfigChannel>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 80019f6:	f000 fbc7 	bl	8002188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80019fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001a68 <MX_ADC1_Init+0x21c>)
 80019fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80019fe:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001a02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a04:	463b      	mov	r3, r7
 8001a06:	4619      	mov	r1, r3
 8001a08:	480d      	ldr	r0, [pc, #52]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 8001a0a:	f002 f8f9 	bl	8003c00 <HAL_ADC_ConfigChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_ADC1_Init+0x1cc>
  {
    Error_Handler();
 8001a14:	f000 fbb8 	bl	8002188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001a18:	4b14      	ldr	r3, [pc, #80]	@ (8001a6c <MX_ADC1_Init+0x220>)
 8001a1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001a1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a20:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a22:	463b      	mov	r3, r7
 8001a24:	4619      	mov	r1, r3
 8001a26:	4806      	ldr	r0, [pc, #24]	@ (8001a40 <MX_ADC1_Init+0x1f4>)
 8001a28:	f002 f8ea 	bl	8003c00 <HAL_ADC_ConfigChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_ADC1_Init+0x1ea>
  {
    Error_Handler();
 8001a32:	f000 fba9 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	3730      	adds	r7, #48	@ 0x30
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	24000080 	.word	0x24000080
 8001a44:	40022000 	.word	0x40022000
 8001a48:	08600004 	.word	0x08600004
 8001a4c:	0c900008 	.word	0x0c900008
 8001a50:	10c00010 	.word	0x10c00010
 8001a54:	14f00020 	.word	0x14f00020
 8001a58:	19200040 	.word	0x19200040
 8001a5c:	1d500080 	.word	0x1d500080
 8001a60:	21800100 	.word	0x21800100
 8001a64:	25b00200 	.word	0x25b00200
 8001a68:	2a000400 	.word	0x2a000400
 8001a6c:	2e300800 	.word	0x2e300800

08001a70 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	@ 0x28
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	2224      	movs	r2, #36	@ 0x24
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f00e f879 	bl	800fb74 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001a82:	4b73      	ldr	r3, [pc, #460]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001a84:	4a73      	ldr	r2, [pc, #460]	@ (8001c54 <MX_ADC3_Init+0x1e4>)
 8001a86:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a88:	4b71      	ldr	r3, [pc, #452]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001a8e:	4b70      	ldr	r3, [pc, #448]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001a90:	2208      	movs	r2, #8
 8001a92:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001a94:	4b6e      	ldr	r3, [pc, #440]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a9a:	4b6d      	ldr	r3, [pc, #436]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aa0:	4b6b      	ldr	r3, [pc, #428]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001aa6:	4b6a      	ldr	r3, [pc, #424]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001aac:	4b68      	ldr	r3, [pc, #416]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 10;
 8001ab2:	4b67      	ldr	r3, [pc, #412]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001ab4:	220a      	movs	r2, #10
 8001ab6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001ab8:	4b65      	ldr	r3, [pc, #404]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ac0:	4b63      	ldr	r3, [pc, #396]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ac6:	4b62      	ldr	r3, [pc, #392]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001acc:	4b60      	ldr	r3, [pc, #384]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001ad4:	4b5e      	ldr	r3, [pc, #376]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001ada:	4b5d      	ldr	r3, [pc, #372]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001adc:	2203      	movs	r2, #3
 8001ade:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001ae0:	4b5b      	ldr	r3, [pc, #364]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001ae2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ae6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001ae8:	4b59      	ldr	r3, [pc, #356]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001aee:	4b58      	ldr	r3, [pc, #352]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 8001af6:	4b56      	ldr	r3, [pc, #344]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001afc:	4854      	ldr	r0, [pc, #336]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001afe:	f001 fb39 	bl	8003174 <HAL_ADC_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_ADC3_Init+0x9c>
  {
    Error_Handler();
 8001b08:	f000 fb3e 	bl	8002188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b10:	2306      	movs	r3, #6
 8001b12:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_92CYCLES_5;
 8001b14:	2305      	movs	r3, #5
 8001b16:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b18:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001b1c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b1e:	2304      	movs	r3, #4
 8001b20:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4848      	ldr	r0, [pc, #288]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001b30:	f002 f866 	bl	8003c00 <HAL_ADC_ConfigChannel>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8001b3a:	f000 fb25 	bl	8002188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b3e:	4b46      	ldr	r3, [pc, #280]	@ (8001c58 <MX_ADC3_Init+0x1e8>)
 8001b40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b42:	230c      	movs	r3, #12
 8001b44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4841      	ldr	r0, [pc, #260]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001b4c:	f002 f858 	bl	8003c00 <HAL_ADC_ConfigChannel>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001b56:	f000 fb17 	bl	8002188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001b5a:	4b40      	ldr	r3, [pc, #256]	@ (8001c5c <MX_ADC3_Init+0x1ec>)
 8001b5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001b5e:	2312      	movs	r3, #18
 8001b60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	4619      	mov	r1, r3
 8001b66:	483a      	ldr	r0, [pc, #232]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001b68:	f002 f84a 	bl	8003c00 <HAL_ADC_ConfigChannel>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001b72:	f000 fb09 	bl	8002188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001b76:	4b3a      	ldr	r3, [pc, #232]	@ (8001c60 <MX_ADC3_Init+0x1f0>)
 8001b78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001b7a:	2318      	movs	r3, #24
 8001b7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	4619      	mov	r1, r3
 8001b82:	4833      	ldr	r0, [pc, #204]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001b84:	f002 f83c 	bl	8003c00 <HAL_ADC_ConfigChannel>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_ADC3_Init+0x122>
  {
    Error_Handler();
 8001b8e:	f000 fafb 	bl	8002188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b92:	4b34      	ldr	r3, [pc, #208]	@ (8001c64 <MX_ADC3_Init+0x1f4>)
 8001b94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001b96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	482b      	ldr	r0, [pc, #172]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001ba2:	f002 f82d 	bl	8003c00 <HAL_ADC_ConfigChannel>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_ADC3_Init+0x140>
  {
    Error_Handler();
 8001bac:	f000 faec 	bl	8002188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c68 <MX_ADC3_Init+0x1f8>)
 8001bb2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001bb4:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8001bb8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4824      	ldr	r0, [pc, #144]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001bc0:	f002 f81e 	bl	8003c00 <HAL_ADC_ConfigChannel>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_ADC3_Init+0x15e>
  {
    Error_Handler();
 8001bca:	f000 fadd 	bl	8002188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001bce:	4b27      	ldr	r3, [pc, #156]	@ (8001c6c <MX_ADC3_Init+0x1fc>)
 8001bd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001bd2:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8001bd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	4619      	mov	r1, r3
 8001bdc:	481c      	ldr	r0, [pc, #112]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001bde:	f002 f80f 	bl	8003c00 <HAL_ADC_ConfigChannel>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_ADC3_Init+0x17c>
  {
    Error_Handler();
 8001be8:	f000 face 	bl	8002188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001bec:	4b20      	ldr	r3, [pc, #128]	@ (8001c70 <MX_ADC3_Init+0x200>)
 8001bee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001bf0:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8001bf4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4815      	ldr	r0, [pc, #84]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001bfc:	f002 f800 	bl	8003c00 <HAL_ADC_ConfigChannel>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_ADC3_Init+0x19a>
  {
    Error_Handler();
 8001c06:	f000 fabf 	bl	8002188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <MX_ADC3_Init+0x204>)
 8001c0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001c0e:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001c12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	4619      	mov	r1, r3
 8001c18:	480d      	ldr	r0, [pc, #52]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001c1a:	f001 fff1 	bl	8003c00 <HAL_ADC_ConfigChannel>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_ADC3_Init+0x1b8>
  {
    Error_Handler();
 8001c24:	f000 fab0 	bl	8002188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001c28:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <MX_ADC3_Init+0x208>)
 8001c2a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001c2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	4619      	mov	r1, r3
 8001c36:	4806      	ldr	r0, [pc, #24]	@ (8001c50 <MX_ADC3_Init+0x1e0>)
 8001c38:	f001 ffe2 	bl	8003c00 <HAL_ADC_ConfigChannel>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_ADC3_Init+0x1d6>
  {
    Error_Handler();
 8001c42:	f000 faa1 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001c46:	bf00      	nop
 8001c48:	3728      	adds	r7, #40	@ 0x28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	240000f0 	.word	0x240000f0
 8001c54:	58026000 	.word	0x58026000
 8001c58:	04300002 	.word	0x04300002
 8001c5c:	08600004 	.word	0x08600004
 8001c60:	0c900008 	.word	0x0c900008
 8001c64:	10c00010 	.word	0x10c00010
 8001c68:	14f00020 	.word	0x14f00020
 8001c6c:	19200040 	.word	0x19200040
 8001c70:	1d500080 	.word	0x1d500080
 8001c74:	21800100 	.word	0x21800100
 8001c78:	25b00200 	.word	0x25b00200

08001c7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c80:	4b27      	ldr	r3, [pc, #156]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001c82:	4a28      	ldr	r2, [pc, #160]	@ (8001d24 <MX_SPI1_Init+0xa8>)
 8001c84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c86:	4b26      	ldr	r3, [pc, #152]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001c88:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001c8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c8e:	4b24      	ldr	r3, [pc, #144]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c94:	4b22      	ldr	r3, [pc, #136]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001c96:	2207      	movs	r2, #7
 8001c98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c9a:	4b21      	ldr	r3, [pc, #132]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001ca8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001cac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001cae:	4b1c      	ldr	r3, [pc, #112]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cb0:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001cb4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cbc:	4b18      	ldr	r3, [pc, #96]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc2:	4b17      	ldr	r3, [pc, #92]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001cc8:	4b15      	ldr	r3, [pc, #84]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cce:	4b14      	ldr	r3, [pc, #80]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cd0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cd4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001cd6:	4b12      	ldr	r3, [pc, #72]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001cdc:	4b10      	ldr	r3, [pc, #64]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001cee:	4b0c      	ldr	r3, [pc, #48]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001cfa:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d00:	4b07      	ldr	r3, [pc, #28]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d06:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d0c:	4804      	ldr	r0, [pc, #16]	@ (8001d20 <MX_SPI1_Init+0xa4>)
 8001d0e:	f009 fcb1 	bl	800b674 <HAL_SPI_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001d18:	f000 fa36 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	24000250 	.word	0x24000250
 8001d24:	40013000 	.word	0x40013000

08001d28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	@ 0x28
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2e:	f107 031c 	add.w	r3, r7, #28
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
 8001d48:	615a      	str	r2, [r3, #20]
 8001d4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d4c:	4b27      	ldr	r3, [pc, #156]	@ (8001dec <MX_TIM2_Init+0xc4>)
 8001d4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8001d54:	4b25      	ldr	r3, [pc, #148]	@ (8001dec <MX_TIM2_Init+0xc4>)
 8001d56:	2240      	movs	r2, #64	@ 0x40
 8001d58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5a:	4b24      	ldr	r3, [pc, #144]	@ (8001dec <MX_TIM2_Init+0xc4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001d60:	4b22      	ldr	r3, [pc, #136]	@ (8001dec <MX_TIM2_Init+0xc4>)
 8001d62:	22ff      	movs	r2, #255	@ 0xff
 8001d64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001d66:	4b21      	ldr	r3, [pc, #132]	@ (8001dec <MX_TIM2_Init+0xc4>)
 8001d68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dec <MX_TIM2_Init+0xc4>)
 8001d70:	2280      	movs	r2, #128	@ 0x80
 8001d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d74:	481d      	ldr	r0, [pc, #116]	@ (8001dec <MX_TIM2_Init+0xc4>)
 8001d76:	f00a faf8 	bl	800c36a <HAL_TIM_PWM_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001d80:	f000 fa02 	bl	8002188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d8c:	f107 031c 	add.w	r3, r7, #28
 8001d90:	4619      	mov	r1, r3
 8001d92:	4816      	ldr	r0, [pc, #88]	@ (8001dec <MX_TIM2_Init+0xc4>)
 8001d94:	f00b f91e 	bl	800cfd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001d9e:	f000 f9f3 	bl	8002188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001da2:	2360      	movs	r3, #96	@ 0x60
 8001da4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001dae:	2304      	movs	r3, #4
 8001db0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001db2:	463b      	mov	r3, r7
 8001db4:	2200      	movs	r2, #0
 8001db6:	4619      	mov	r1, r3
 8001db8:	480c      	ldr	r0, [pc, #48]	@ (8001dec <MX_TIM2_Init+0xc4>)
 8001dba:	f00a fc49 	bl	800c650 <HAL_TIM_PWM_ConfigChannel>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001dc4:	f000 f9e0 	bl	8002188 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dc8:	463b      	mov	r3, r7
 8001dca:	2204      	movs	r2, #4
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4807      	ldr	r0, [pc, #28]	@ (8001dec <MX_TIM2_Init+0xc4>)
 8001dd0:	f00a fc3e 	bl	800c650 <HAL_TIM_PWM_ConfigChannel>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001dda:	f000 f9d5 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001dde:	4803      	ldr	r0, [pc, #12]	@ (8001dec <MX_TIM2_Init+0xc4>)
 8001de0:	f000 fc3e 	bl	8002660 <HAL_TIM_MspPostInit>

}
 8001de4:	bf00      	nop
 8001de6:	3728      	adds	r7, #40	@ 0x28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	240002d8 	.word	0x240002d8

08001df0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001df4:	4b22      	ldr	r3, [pc, #136]	@ (8001e80 <MX_USART1_UART_Init+0x90>)
 8001df6:	4a23      	ldr	r2, [pc, #140]	@ (8001e84 <MX_USART1_UART_Init+0x94>)
 8001df8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dfa:	4b21      	ldr	r3, [pc, #132]	@ (8001e80 <MX_USART1_UART_Init+0x90>)
 8001dfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e02:	4b1f      	ldr	r3, [pc, #124]	@ (8001e80 <MX_USART1_UART_Init+0x90>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e08:	4b1d      	ldr	r3, [pc, #116]	@ (8001e80 <MX_USART1_UART_Init+0x90>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e80 <MX_USART1_UART_Init+0x90>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e14:	4b1a      	ldr	r3, [pc, #104]	@ (8001e80 <MX_USART1_UART_Init+0x90>)
 8001e16:	220c      	movs	r2, #12
 8001e18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1a:	4b19      	ldr	r3, [pc, #100]	@ (8001e80 <MX_USART1_UART_Init+0x90>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e20:	4b17      	ldr	r3, [pc, #92]	@ (8001e80 <MX_USART1_UART_Init+0x90>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e26:	4b16      	ldr	r3, [pc, #88]	@ (8001e80 <MX_USART1_UART_Init+0x90>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e2c:	4b14      	ldr	r3, [pc, #80]	@ (8001e80 <MX_USART1_UART_Init+0x90>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e32:	4b13      	ldr	r3, [pc, #76]	@ (8001e80 <MX_USART1_UART_Init+0x90>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e38:	4811      	ldr	r0, [pc, #68]	@ (8001e80 <MX_USART1_UART_Init+0x90>)
 8001e3a:	f00b f967 	bl	800d10c <HAL_UART_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e44:	f000 f9a0 	bl	8002188 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e48:	2100      	movs	r1, #0
 8001e4a:	480d      	ldr	r0, [pc, #52]	@ (8001e80 <MX_USART1_UART_Init+0x90>)
 8001e4c:	f00d fd77 	bl	800f93e <HAL_UARTEx_SetTxFifoThreshold>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001e56:	f000 f997 	bl	8002188 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4808      	ldr	r0, [pc, #32]	@ (8001e80 <MX_USART1_UART_Init+0x90>)
 8001e5e:	f00d fdac 	bl	800f9ba <HAL_UARTEx_SetRxFifoThreshold>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e68:	f000 f98e 	bl	8002188 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e6c:	4804      	ldr	r0, [pc, #16]	@ (8001e80 <MX_USART1_UART_Init+0x90>)
 8001e6e:	f00d fd2d 	bl	800f8cc <HAL_UARTEx_DisableFifoMode>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e78:	f000 f986 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	24000324 	.word	0x24000324
 8001e84:	40011000 	.word	0x40011000

08001e88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <MX_DMA_Init+0x4c>)
 8001e90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e94:	4a0f      	ldr	r2, [pc, #60]	@ (8001ed4 <MX_DMA_Init+0x4c>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed4 <MX_DMA_Init+0x4c>)
 8001ea0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2100      	movs	r1, #0
 8001eb0:	200b      	movs	r0, #11
 8001eb2:	f002 fff6 	bl	8004ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001eb6:	200b      	movs	r0, #11
 8001eb8:	f003 f80d 	bl	8004ed6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	200c      	movs	r0, #12
 8001ec2:	f002 ffee 	bl	8004ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001ec6:	200c      	movs	r0, #12
 8001ec8:	f003 f805 	bl	8004ed6 <HAL_NVIC_EnableIRQ>

}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	58024400 	.word	0x58024400

08001ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08e      	sub	sp, #56	@ 0x38
 8001edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eee:	4b9f      	ldr	r3, [pc, #636]	@ (800216c <MX_GPIO_Init+0x294>)
 8001ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef4:	4a9d      	ldr	r2, [pc, #628]	@ (800216c <MX_GPIO_Init+0x294>)
 8001ef6:	f043 0310 	orr.w	r3, r3, #16
 8001efa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001efe:	4b9b      	ldr	r3, [pc, #620]	@ (800216c <MX_GPIO_Init+0x294>)
 8001f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	623b      	str	r3, [r7, #32]
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f0c:	4b97      	ldr	r3, [pc, #604]	@ (800216c <MX_GPIO_Init+0x294>)
 8001f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f12:	4a96      	ldr	r2, [pc, #600]	@ (800216c <MX_GPIO_Init+0x294>)
 8001f14:	f043 0304 	orr.w	r3, r3, #4
 8001f18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f1c:	4b93      	ldr	r3, [pc, #588]	@ (800216c <MX_GPIO_Init+0x294>)
 8001f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	61fb      	str	r3, [r7, #28]
 8001f28:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f2a:	4b90      	ldr	r3, [pc, #576]	@ (800216c <MX_GPIO_Init+0x294>)
 8001f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f30:	4a8e      	ldr	r2, [pc, #568]	@ (800216c <MX_GPIO_Init+0x294>)
 8001f32:	f043 0320 	orr.w	r3, r3, #32
 8001f36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f3a:	4b8c      	ldr	r3, [pc, #560]	@ (800216c <MX_GPIO_Init+0x294>)
 8001f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f40:	f003 0320 	and.w	r3, r3, #32
 8001f44:	61bb      	str	r3, [r7, #24]
 8001f46:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f48:	4b88      	ldr	r3, [pc, #544]	@ (800216c <MX_GPIO_Init+0x294>)
 8001f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f4e:	4a87      	ldr	r2, [pc, #540]	@ (800216c <MX_GPIO_Init+0x294>)
 8001f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f58:	4b84      	ldr	r3, [pc, #528]	@ (800216c <MX_GPIO_Init+0x294>)
 8001f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	4b81      	ldr	r3, [pc, #516]	@ (800216c <MX_GPIO_Init+0x294>)
 8001f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f6c:	4a7f      	ldr	r2, [pc, #508]	@ (800216c <MX_GPIO_Init+0x294>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f76:	4b7d      	ldr	r3, [pc, #500]	@ (800216c <MX_GPIO_Init+0x294>)
 8001f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f84:	4b79      	ldr	r3, [pc, #484]	@ (800216c <MX_GPIO_Init+0x294>)
 8001f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f8a:	4a78      	ldr	r2, [pc, #480]	@ (800216c <MX_GPIO_Init+0x294>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f94:	4b75      	ldr	r3, [pc, #468]	@ (800216c <MX_GPIO_Init+0x294>)
 8001f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fa2:	4b72      	ldr	r3, [pc, #456]	@ (800216c <MX_GPIO_Init+0x294>)
 8001fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fa8:	4a70      	ldr	r2, [pc, #448]	@ (800216c <MX_GPIO_Init+0x294>)
 8001faa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fb2:	4b6e      	ldr	r3, [pc, #440]	@ (800216c <MX_GPIO_Init+0x294>)
 8001fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc0:	4b6a      	ldr	r3, [pc, #424]	@ (800216c <MX_GPIO_Init+0x294>)
 8001fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc6:	4a69      	ldr	r2, [pc, #420]	@ (800216c <MX_GPIO_Init+0x294>)
 8001fc8:	f043 0308 	orr.w	r3, r3, #8
 8001fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fd0:	4b66      	ldr	r3, [pc, #408]	@ (800216c <MX_GPIO_Init+0x294>)
 8001fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fe4:	4862      	ldr	r0, [pc, #392]	@ (8002170 <MX_GPIO_Init+0x298>)
 8001fe6:	f005 ff71 	bl	8007ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN3_Pin|IN4_Pin|IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	213c      	movs	r1, #60	@ 0x3c
 8001fee:	4861      	ldr	r0, [pc, #388]	@ (8002174 <MX_GPIO_Init+0x29c>)
 8001ff0:	f005 ff6c 	bl	8007ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ffa:	485f      	ldr	r0, [pc, #380]	@ (8002178 <MX_GPIO_Init+0x2a0>)
 8001ffc:	f005 ff66 	bl	8007ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 8002000:	2200      	movs	r2, #0
 8002002:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002006:	485d      	ldr	r0, [pc, #372]	@ (800217c <MX_GPIO_Init+0x2a4>)
 8002008:	f005 ff60 	bl	8007ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|LORA_TX_LED_Pin, GPIO_PIN_RESET);
 800200c:	2200      	movs	r2, #0
 800200e:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8002012:	485b      	ldr	r0, [pc, #364]	@ (8002180 <MX_GPIO_Init+0x2a8>)
 8002014:	f005 ff5a 	bl	8007ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RX_LED_GPIO_Port, LORA_RX_LED_Pin, GPIO_PIN_SET);
 8002018:	2201      	movs	r2, #1
 800201a:	2140      	movs	r1, #64	@ 0x40
 800201c:	4859      	ldr	r0, [pc, #356]	@ (8002184 <MX_GPIO_Init+0x2ac>)
 800201e:	f005 ff55 	bl	8007ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LORA_NSS_Pin|LORA_RST_Pin, GPIO_PIN_SET);
 8002022:	2201      	movs	r2, #1
 8002024:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8002028:	4855      	ldr	r0, [pc, #340]	@ (8002180 <MX_GPIO_Init+0x2a8>)
 800202a:	f005 ff4f 	bl	8007ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_0
 800202e:	231f      	movs	r3, #31
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002032:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002036:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800203c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002040:	4619      	mov	r1, r3
 8002042:	484d      	ldr	r0, [pc, #308]	@ (8002178 <MX_GPIO_Init+0x2a0>)
 8002044:	f005 fd9a 	bl	8007b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002048:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800204e:	2301      	movs	r3, #1
 8002050:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002056:	2300      	movs	r3, #0
 8002058:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800205a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800205e:	4619      	mov	r1, r3
 8002060:	4843      	ldr	r0, [pc, #268]	@ (8002170 <MX_GPIO_Init+0x298>)
 8002062:	f005 fd8b 	bl	8007b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN3_Pin IN4_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin|IN2_Pin|IN1_Pin;
 8002066:	233c      	movs	r3, #60	@ 0x3c
 8002068:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206a:	2301      	movs	r3, #1
 800206c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	2300      	movs	r3, #0
 8002074:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800207a:	4619      	mov	r1, r3
 800207c:	483d      	ldr	r0, [pc, #244]	@ (8002174 <MX_GPIO_Init+0x29c>)
 800207e:	f005 fd7d 	bl	8007b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8002082:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002086:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002088:	2301      	movs	r3, #1
 800208a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800208c:	2302      	movs	r3, #2
 800208e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002090:	2302      	movs	r3, #2
 8002092:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8002094:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002098:	4619      	mov	r1, r3
 800209a:	4837      	ldr	r0, [pc, #220]	@ (8002178 <MX_GPIO_Init+0x2a0>)
 800209c:	f005 fd6e 	bl	8007b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 80020a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a6:	2301      	movs	r3, #1
 80020a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ae:	2300      	movs	r3, #0
 80020b0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 80020b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020b6:	4619      	mov	r1, r3
 80020b8:	4830      	ldr	r0, [pc, #192]	@ (800217c <MX_GPIO_Init+0x2a4>)
 80020ba:	f005 fd5f 	bl	8007b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 LORA_NSS_Pin LORA_RST_Pin LORA_TX_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|LORA_NSS_Pin|LORA_RST_Pin|LORA_TX_LED_Pin;
 80020be:	f44f 43a9 	mov.w	r3, #21632	@ 0x5480
 80020c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c4:	2301      	movs	r3, #1
 80020c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020cc:	2300      	movs	r3, #0
 80020ce:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020d4:	4619      	mov	r1, r3
 80020d6:	482a      	ldr	r0, [pc, #168]	@ (8002180 <MX_GPIO_Init+0x2a8>)
 80020d8:	f005 fd50 	bl	8007b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_RX_LED_Pin */
  GPIO_InitStruct.Pin = LORA_RX_LED_Pin;
 80020dc:	2340      	movs	r3, #64	@ 0x40
 80020de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e0:	2301      	movs	r3, #1
 80020e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e8:	2300      	movs	r3, #0
 80020ea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LORA_RX_LED_GPIO_Port, &GPIO_InitStruct);
 80020ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020f0:	4619      	mov	r1, r3
 80020f2:	4824      	ldr	r0, [pc, #144]	@ (8002184 <MX_GPIO_Init+0x2ac>)
 80020f4:	f005 fd42 	bl	8007b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO0_Pin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 80020f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020fe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002102:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 8002108:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800210c:	4619      	mov	r1, r3
 800210e:	481c      	ldr	r0, [pc, #112]	@ (8002180 <MX_GPIO_Init+0x2a8>)
 8002110:	f005 fd34 	bl	8007b7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002114:	2200      	movs	r2, #0
 8002116:	2100      	movs	r1, #0
 8002118:	2006      	movs	r0, #6
 800211a:	f002 fec2 	bl	8004ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800211e:	2006      	movs	r0, #6
 8002120:	f002 fed9 	bl	8004ed6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002124:	2200      	movs	r2, #0
 8002126:	2100      	movs	r1, #0
 8002128:	2007      	movs	r0, #7
 800212a:	f002 feba 	bl	8004ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800212e:	2007      	movs	r0, #7
 8002130:	f002 fed1 	bl	8004ed6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002134:	2200      	movs	r2, #0
 8002136:	2100      	movs	r1, #0
 8002138:	2008      	movs	r0, #8
 800213a:	f002 feb2 	bl	8004ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800213e:	2008      	movs	r0, #8
 8002140:	f002 fec9 	bl	8004ed6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002144:	2200      	movs	r2, #0
 8002146:	2100      	movs	r1, #0
 8002148:	2009      	movs	r0, #9
 800214a:	f002 feaa 	bl	8004ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800214e:	2009      	movs	r0, #9
 8002150:	f002 fec1 	bl	8004ed6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002154:	2200      	movs	r2, #0
 8002156:	2100      	movs	r1, #0
 8002158:	2028      	movs	r0, #40	@ 0x28
 800215a:	f002 fea2 	bl	8004ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800215e:	2028      	movs	r0, #40	@ 0x28
 8002160:	f002 feb9 	bl	8004ed6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002164:	bf00      	nop
 8002166:	3738      	adds	r7, #56	@ 0x38
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	58024400 	.word	0x58024400
 8002170:	58020800 	.word	0x58020800
 8002174:	58020000 	.word	0x58020000
 8002178:	58021000 	.word	0x58021000
 800217c:	58020400 	.word	0x58020400
 8002180:	58021800 	.word	0x58021800
 8002184:	58020c00 	.word	0x58020c00

08002188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800218c:	b672      	cpsid	i
}
 800218e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002190:	bf00      	nop
 8002192:	e7fd      	b.n	8002190 <Error_Handler+0x8>

08002194 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 80021a0:	23ff      	movs	r3, #255	@ 0xff
 80021a2:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 80021a4:	23ff      	movs	r3, #255	@ 0xff
 80021a6:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 80021a8:	e013      	b.n	80021d2 <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	781a      	ldrb	r2, [r3, #0]
 80021b2:	7bbb      	ldrb	r3, [r7, #14]
 80021b4:	4053      	eors	r3, r2
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 80021ba:	4a0f      	ldr	r2, [pc, #60]	@ (80021f8 <crc16+0x64>)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	4413      	add	r3, r2
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	4053      	eors	r3, r2
 80021c6:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 80021c8:	4a0c      	ldr	r2, [pc, #48]	@ (80021fc <crc16+0x68>)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	4413      	add	r3, r2
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 80021d2:	887b      	ldrh	r3, [r7, #2]
 80021d4:	1e5a      	subs	r2, r3, #1
 80021d6:	807a      	strh	r2, [r7, #2]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1e6      	bne.n	80021aa <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	7bbb      	ldrb	r3, [r7, #14]
 80021e4:	b21b      	sxth	r3, r3
 80021e6:	4313      	orrs	r3, r2
 80021e8:	b21b      	sxth	r3, r3
 80021ea:	b29b      	uxth	r3, r3
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	0800fc58 	.word	0x0800fc58
 80021fc:	0800fd58 	.word	0x0800fd58

08002200 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002206:	4b0a      	ldr	r3, [pc, #40]	@ (8002230 <HAL_MspInit+0x30>)
 8002208:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800220c:	4a08      	ldr	r2, [pc, #32]	@ (8002230 <HAL_MspInit+0x30>)
 800220e:	f043 0302 	orr.w	r3, r3, #2
 8002212:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002216:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <HAL_MspInit+0x30>)
 8002218:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	58024400 	.word	0x58024400

08002234 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b090      	sub	sp, #64	@ 0x40
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4aa0      	ldr	r2, [pc, #640]	@ (80024d4 <HAL_ADC_MspInit+0x2a0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	f040 80b6 	bne.w	80023c4 <HAL_ADC_MspInit+0x190>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002258:	4b9f      	ldr	r3, [pc, #636]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 800225a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800225e:	4a9e      	ldr	r2, [pc, #632]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 8002260:	f043 0320 	orr.w	r3, r3, #32
 8002264:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002268:	4b9b      	ldr	r3, [pc, #620]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 800226a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002274:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002276:	4b98      	ldr	r3, [pc, #608]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 8002278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800227c:	4a96      	ldr	r2, [pc, #600]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 800227e:	f043 0304 	orr.w	r3, r3, #4
 8002282:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002286:	4b94      	ldr	r3, [pc, #592]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 8002288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	627b      	str	r3, [r7, #36]	@ 0x24
 8002292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002294:	4b90      	ldr	r3, [pc, #576]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 8002296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800229a:	4a8f      	ldr	r2, [pc, #572]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022a4:	4b8c      	ldr	r3, [pc, #560]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 80022a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	623b      	str	r3, [r7, #32]
 80022b0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b2:	4b89      	ldr	r3, [pc, #548]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 80022b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022b8:	4a87      	ldr	r2, [pc, #540]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 80022ba:	f043 0302 	orr.w	r3, r3, #2
 80022be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022c2:	4b85      	ldr	r3, [pc, #532]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 80022c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022d0:	4b81      	ldr	r3, [pc, #516]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 80022d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d6:	4a80      	ldr	r2, [pc, #512]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 80022d8:	f043 0320 	orr.w	r3, r3, #32
 80022dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022e0:	4b7d      	ldr	r3, [pc, #500]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 80022e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	61bb      	str	r3, [r7, #24]
 80022ec:	69bb      	ldr	r3, [r7, #24]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80022ee:	2333      	movs	r3, #51	@ 0x33
 80022f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022f2:	2303      	movs	r3, #3
 80022f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022fe:	4619      	mov	r1, r3
 8002300:	4876      	ldr	r0, [pc, #472]	@ (80024dc <HAL_ADC_MspInit+0x2a8>)
 8002302:	f005 fc3b 	bl	8007b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002306:	23c0      	movs	r3, #192	@ 0xc0
 8002308:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800230a:	2303      	movs	r3, #3
 800230c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002312:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002316:	4619      	mov	r1, r3
 8002318:	4871      	ldr	r0, [pc, #452]	@ (80024e0 <HAL_ADC_MspInit+0x2ac>)
 800231a:	f005 fc2f 	bl	8007b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800231e:	2303      	movs	r3, #3
 8002320:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002322:	2303      	movs	r3, #3
 8002324:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800232e:	4619      	mov	r1, r3
 8002330:	486c      	ldr	r0, [pc, #432]	@ (80024e4 <HAL_ADC_MspInit+0x2b0>)
 8002332:	f005 fc23 	bl	8007b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002336:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800233a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800233c:	2303      	movs	r3, #3
 800233e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002344:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002348:	4619      	mov	r1, r3
 800234a:	4867      	ldr	r0, [pc, #412]	@ (80024e8 <HAL_ADC_MspInit+0x2b4>)
 800234c:	f005 fc16 	bl	8007b7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002350:	4b66      	ldr	r3, [pc, #408]	@ (80024ec <HAL_ADC_MspInit+0x2b8>)
 8002352:	4a67      	ldr	r2, [pc, #412]	@ (80024f0 <HAL_ADC_MspInit+0x2bc>)
 8002354:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002356:	4b65      	ldr	r3, [pc, #404]	@ (80024ec <HAL_ADC_MspInit+0x2b8>)
 8002358:	2209      	movs	r2, #9
 800235a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800235c:	4b63      	ldr	r3, [pc, #396]	@ (80024ec <HAL_ADC_MspInit+0x2b8>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002362:	4b62      	ldr	r3, [pc, #392]	@ (80024ec <HAL_ADC_MspInit+0x2b8>)
 8002364:	2200      	movs	r2, #0
 8002366:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002368:	4b60      	ldr	r3, [pc, #384]	@ (80024ec <HAL_ADC_MspInit+0x2b8>)
 800236a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800236e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002370:	4b5e      	ldr	r3, [pc, #376]	@ (80024ec <HAL_ADC_MspInit+0x2b8>)
 8002372:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002376:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002378:	4b5c      	ldr	r3, [pc, #368]	@ (80024ec <HAL_ADC_MspInit+0x2b8>)
 800237a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800237e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002380:	4b5a      	ldr	r3, [pc, #360]	@ (80024ec <HAL_ADC_MspInit+0x2b8>)
 8002382:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002386:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002388:	4b58      	ldr	r3, [pc, #352]	@ (80024ec <HAL_ADC_MspInit+0x2b8>)
 800238a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800238e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002390:	4b56      	ldr	r3, [pc, #344]	@ (80024ec <HAL_ADC_MspInit+0x2b8>)
 8002392:	2200      	movs	r2, #0
 8002394:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002396:	4855      	ldr	r0, [pc, #340]	@ (80024ec <HAL_ADC_MspInit+0x2b8>)
 8002398:	f002 fdb8 	bl	8004f0c <HAL_DMA_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_ADC_MspInit+0x172>
    {
      Error_Handler();
 80023a2:	f7ff fef1 	bl	8002188 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a50      	ldr	r2, [pc, #320]	@ (80024ec <HAL_ADC_MspInit+0x2b8>)
 80023aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80023ac:	4a4f      	ldr	r2, [pc, #316]	@ (80024ec <HAL_ADC_MspInit+0x2b8>)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2100      	movs	r1, #0
 80023b6:	2012      	movs	r0, #18
 80023b8:	f002 fd73 	bl	8004ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80023bc:	2012      	movs	r0, #18
 80023be:	f002 fd8a 	bl	8004ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80023c2:	e083      	b.n	80024cc <HAL_ADC_MspInit+0x298>
  else if(hadc->Instance==ADC3)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a4a      	ldr	r2, [pc, #296]	@ (80024f4 <HAL_ADC_MspInit+0x2c0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d17e      	bne.n	80024cc <HAL_ADC_MspInit+0x298>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80023ce:	4b42      	ldr	r3, [pc, #264]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 80023d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023d4:	4a40      	ldr	r2, [pc, #256]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 80023d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023de:	4b3e      	ldr	r3, [pc, #248]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 80023e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023ec:	4b3a      	ldr	r3, [pc, #232]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 80023ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023f2:	4a39      	ldr	r2, [pc, #228]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 80023f4:	f043 0320 	orr.w	r3, r3, #32
 80023f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023fc:	4b36      	ldr	r3, [pc, #216]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 80023fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002402:	f003 0320 	and.w	r3, r3, #32
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800240a:	4b33      	ldr	r3, [pc, #204]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 800240c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002410:	4a31      	ldr	r2, [pc, #196]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 8002412:	f043 0304 	orr.w	r3, r3, #4
 8002416:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800241a:	4b2f      	ldr	r3, [pc, #188]	@ (80024d8 <HAL_ADC_MspInit+0x2a4>)
 800241c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002428:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 800242c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800242e:	2303      	movs	r3, #3
 8002430:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002436:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800243a:	4619      	mov	r1, r3
 800243c:	482a      	ldr	r0, [pc, #168]	@ (80024e8 <HAL_ADC_MspInit+0x2b4>)
 800243e:	f005 fb9d 	bl	8007b7c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002442:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8002446:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800244a:	f000 fb91 	bl	8002b70 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800244e:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8002452:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002456:	f000 fb8b 	bl	8002b70 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 800245a:	4b27      	ldr	r3, [pc, #156]	@ (80024f8 <HAL_ADC_MspInit+0x2c4>)
 800245c:	4a27      	ldr	r2, [pc, #156]	@ (80024fc <HAL_ADC_MspInit+0x2c8>)
 800245e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002460:	4b25      	ldr	r3, [pc, #148]	@ (80024f8 <HAL_ADC_MspInit+0x2c4>)
 8002462:	2273      	movs	r2, #115	@ 0x73
 8002464:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002466:	4b24      	ldr	r3, [pc, #144]	@ (80024f8 <HAL_ADC_MspInit+0x2c4>)
 8002468:	2200      	movs	r2, #0
 800246a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800246c:	4b22      	ldr	r3, [pc, #136]	@ (80024f8 <HAL_ADC_MspInit+0x2c4>)
 800246e:	2200      	movs	r2, #0
 8002470:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002472:	4b21      	ldr	r3, [pc, #132]	@ (80024f8 <HAL_ADC_MspInit+0x2c4>)
 8002474:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002478:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800247a:	4b1f      	ldr	r3, [pc, #124]	@ (80024f8 <HAL_ADC_MspInit+0x2c4>)
 800247c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002480:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002482:	4b1d      	ldr	r3, [pc, #116]	@ (80024f8 <HAL_ADC_MspInit+0x2c4>)
 8002484:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002488:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800248a:	4b1b      	ldr	r3, [pc, #108]	@ (80024f8 <HAL_ADC_MspInit+0x2c4>)
 800248c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002490:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8002492:	4b19      	ldr	r3, [pc, #100]	@ (80024f8 <HAL_ADC_MspInit+0x2c4>)
 8002494:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002498:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800249a:	4b17      	ldr	r3, [pc, #92]	@ (80024f8 <HAL_ADC_MspInit+0x2c4>)
 800249c:	2200      	movs	r2, #0
 800249e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80024a0:	4815      	ldr	r0, [pc, #84]	@ (80024f8 <HAL_ADC_MspInit+0x2c4>)
 80024a2:	f002 fd33 	bl	8004f0c <HAL_DMA_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_ADC_MspInit+0x27c>
      Error_Handler();
 80024ac:	f7ff fe6c 	bl	8002188 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a11      	ldr	r2, [pc, #68]	@ (80024f8 <HAL_ADC_MspInit+0x2c4>)
 80024b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80024b6:	4a10      	ldr	r2, [pc, #64]	@ (80024f8 <HAL_ADC_MspInit+0x2c4>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80024bc:	2200      	movs	r2, #0
 80024be:	2100      	movs	r1, #0
 80024c0:	207f      	movs	r0, #127	@ 0x7f
 80024c2:	f002 fcee 	bl	8004ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80024c6:	207f      	movs	r0, #127	@ 0x7f
 80024c8:	f002 fd05 	bl	8004ed6 <HAL_NVIC_EnableIRQ>
}
 80024cc:	bf00      	nop
 80024ce:	3740      	adds	r7, #64	@ 0x40
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40022000 	.word	0x40022000
 80024d8:	58024400 	.word	0x58024400
 80024dc:	58020800 	.word	0x58020800
 80024e0:	58020000 	.word	0x58020000
 80024e4:	58020400 	.word	0x58020400
 80024e8:	58021400 	.word	0x58021400
 80024ec:	24000160 	.word	0x24000160
 80024f0:	40020010 	.word	0x40020010
 80024f4:	58026000 	.word	0x58026000
 80024f8:	240001d8 	.word	0x240001d8
 80024fc:	40020028 	.word	0x40020028

08002500 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b0ba      	sub	sp, #232	@ 0xe8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002518:	f107 0318 	add.w	r3, r7, #24
 800251c:	22b8      	movs	r2, #184	@ 0xb8
 800251e:	2100      	movs	r1, #0
 8002520:	4618      	mov	r0, r3
 8002522:	f00d fb27 	bl	800fb74 <memset>
  if(hspi->Instance==SPI1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a39      	ldr	r2, [pc, #228]	@ (8002610 <HAL_SPI_MspInit+0x110>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d16a      	bne.n	8002606 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002530:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800253c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002540:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002542:	f107 0318 	add.w	r3, r7, #24
 8002546:	4618      	mov	r0, r3
 8002548:	f006 fcae 	bl	8008ea8 <HAL_RCCEx_PeriphCLKConfig>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002552:	f7ff fe19 	bl	8002188 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002556:	4b2f      	ldr	r3, [pc, #188]	@ (8002614 <HAL_SPI_MspInit+0x114>)
 8002558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800255c:	4a2d      	ldr	r2, [pc, #180]	@ (8002614 <HAL_SPI_MspInit+0x114>)
 800255e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002562:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002566:	4b2b      	ldr	r3, [pc, #172]	@ (8002614 <HAL_SPI_MspInit+0x114>)
 8002568:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800256c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002574:	4b27      	ldr	r3, [pc, #156]	@ (8002614 <HAL_SPI_MspInit+0x114>)
 8002576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800257a:	4a26      	ldr	r2, [pc, #152]	@ (8002614 <HAL_SPI_MspInit+0x114>)
 800257c:	f043 0308 	orr.w	r3, r3, #8
 8002580:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002584:	4b23      	ldr	r3, [pc, #140]	@ (8002614 <HAL_SPI_MspInit+0x114>)
 8002586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002592:	4b20      	ldr	r3, [pc, #128]	@ (8002614 <HAL_SPI_MspInit+0x114>)
 8002594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002598:	4a1e      	ldr	r2, [pc, #120]	@ (8002614 <HAL_SPI_MspInit+0x114>)
 800259a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800259e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002614 <HAL_SPI_MspInit+0x114>)
 80025a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025b0:	2380      	movs	r3, #128	@ 0x80
 80025b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025c8:	2305      	movs	r3, #5
 80025ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025ce:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025d2:	4619      	mov	r1, r3
 80025d4:	4810      	ldr	r0, [pc, #64]	@ (8002618 <HAL_SPI_MspInit+0x118>)
 80025d6:	f005 fad1 	bl	8007b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80025da:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80025de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e2:	2302      	movs	r3, #2
 80025e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025f4:	2305      	movs	r3, #5
 80025f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025fa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025fe:	4619      	mov	r1, r3
 8002600:	4806      	ldr	r0, [pc, #24]	@ (800261c <HAL_SPI_MspInit+0x11c>)
 8002602:	f005 fabb 	bl	8007b7c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002606:	bf00      	nop
 8002608:	37e8      	adds	r7, #232	@ 0xe8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40013000 	.word	0x40013000
 8002614:	58024400 	.word	0x58024400
 8002618:	58020c00 	.word	0x58020c00
 800261c:	58021800 	.word	0x58021800

08002620 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002630:	d10e      	bne.n	8002650 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002632:	4b0a      	ldr	r3, [pc, #40]	@ (800265c <HAL_TIM_PWM_MspInit+0x3c>)
 8002634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002638:	4a08      	ldr	r2, [pc, #32]	@ (800265c <HAL_TIM_PWM_MspInit+0x3c>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002642:	4b06      	ldr	r3, [pc, #24]	@ (800265c <HAL_TIM_PWM_MspInit+0x3c>)
 8002644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	58024400 	.word	0x58024400

08002660 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 030c 	add.w	r3, r7, #12
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002680:	d11e      	bne.n	80026c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002682:	4b11      	ldr	r3, [pc, #68]	@ (80026c8 <HAL_TIM_MspPostInit+0x68>)
 8002684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002688:	4a0f      	ldr	r2, [pc, #60]	@ (80026c8 <HAL_TIM_MspPostInit+0x68>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002692:	4b0d      	ldr	r3, [pc, #52]	@ (80026c8 <HAL_TIM_MspPostInit+0x68>)
 8002694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026a0:	2303      	movs	r3, #3
 80026a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026b0:	2301      	movs	r3, #1
 80026b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b4:	f107 030c 	add.w	r3, r7, #12
 80026b8:	4619      	mov	r1, r3
 80026ba:	4804      	ldr	r0, [pc, #16]	@ (80026cc <HAL_TIM_MspPostInit+0x6c>)
 80026bc:	f005 fa5e 	bl	8007b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80026c0:	bf00      	nop
 80026c2:	3720      	adds	r7, #32
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	58024400 	.word	0x58024400
 80026cc:	58020000 	.word	0x58020000

080026d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b0b8      	sub	sp, #224	@ 0xe0
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026e8:	f107 0310 	add.w	r3, r7, #16
 80026ec:	22b8      	movs	r2, #184	@ 0xb8
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f00d fa3f 	bl	800fb74 <memset>
  if(huart->Instance==USART1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a2b      	ldr	r2, [pc, #172]	@ (80027a8 <HAL_UART_MspInit+0xd8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d14e      	bne.n	800279e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002700:	f04f 0201 	mov.w	r2, #1
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800270c:	2300      	movs	r3, #0
 800270e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002712:	f107 0310 	add.w	r3, r7, #16
 8002716:	4618      	mov	r0, r3
 8002718:	f006 fbc6 	bl	8008ea8 <HAL_RCCEx_PeriphCLKConfig>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002722:	f7ff fd31 	bl	8002188 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002726:	4b21      	ldr	r3, [pc, #132]	@ (80027ac <HAL_UART_MspInit+0xdc>)
 8002728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800272c:	4a1f      	ldr	r2, [pc, #124]	@ (80027ac <HAL_UART_MspInit+0xdc>)
 800272e:	f043 0310 	orr.w	r3, r3, #16
 8002732:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002736:	4b1d      	ldr	r3, [pc, #116]	@ (80027ac <HAL_UART_MspInit+0xdc>)
 8002738:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800273c:	f003 0310 	and.w	r3, r3, #16
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002744:	4b19      	ldr	r3, [pc, #100]	@ (80027ac <HAL_UART_MspInit+0xdc>)
 8002746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800274a:	4a18      	ldr	r2, [pc, #96]	@ (80027ac <HAL_UART_MspInit+0xdc>)
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002754:	4b15      	ldr	r3, [pc, #84]	@ (80027ac <HAL_UART_MspInit+0xdc>)
 8002756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002762:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002766:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002776:	2303      	movs	r3, #3
 8002778:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800277c:	2304      	movs	r3, #4
 800277e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002782:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002786:	4619      	mov	r1, r3
 8002788:	4809      	ldr	r0, [pc, #36]	@ (80027b0 <HAL_UART_MspInit+0xe0>)
 800278a:	f005 f9f7 	bl	8007b7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800278e:	2200      	movs	r2, #0
 8002790:	2100      	movs	r1, #0
 8002792:	2025      	movs	r0, #37	@ 0x25
 8002794:	f002 fb85 	bl	8004ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002798:	2025      	movs	r0, #37	@ 0x25
 800279a:	f002 fb9c 	bl	8004ed6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800279e:	bf00      	nop
 80027a0:	37e0      	adds	r7, #224	@ 0xe0
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40011000 	.word	0x40011000
 80027ac:	58024400 	.word	0x58024400
 80027b0:	58020400 	.word	0x58020400

080027b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027b8:	bf00      	nop
 80027ba:	e7fd      	b.n	80027b8 <NMI_Handler+0x4>

080027bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027c0:	bf00      	nop
 80027c2:	e7fd      	b.n	80027c0 <HardFault_Handler+0x4>

080027c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c8:	bf00      	nop
 80027ca:	e7fd      	b.n	80027c8 <MemManage_Handler+0x4>

080027cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027d0:	bf00      	nop
 80027d2:	e7fd      	b.n	80027d0 <BusFault_Handler+0x4>

080027d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d8:	bf00      	nop
 80027da:	e7fd      	b.n	80027d8 <UsageFault_Handler+0x4>

080027dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ea:	b480      	push	{r7}
 80027ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800280a:	f000 f96d 	bl	8002ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}

08002812 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002816:	2001      	movs	r0, #1
 8002818:	f005 fb8b 	bl	8007f32 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800281c:	bf00      	nop
 800281e:	bd80      	pop	{r7, pc}

08002820 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002824:	2002      	movs	r0, #2
 8002826:	f005 fb84 	bl	8007f32 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}

0800282e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002832:	2004      	movs	r0, #4
 8002834:	f005 fb7d 	bl	8007f32 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}

0800283c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002840:	2008      	movs	r0, #8
 8002842:	f005 fb76 	bl	8007f32 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002850:	4802      	ldr	r0, [pc, #8]	@ (800285c <DMA1_Stream0_IRQHandler+0x10>)
 8002852:	f003 fe81 	bl	8006558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	24000160 	.word	0x24000160

08002860 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002864:	4802      	ldr	r0, [pc, #8]	@ (8002870 <DMA1_Stream1_IRQHandler+0x10>)
 8002866:	f003 fe77 	bl	8006558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	240001d8 	.word	0x240001d8

08002874 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002878:	4802      	ldr	r0, [pc, #8]	@ (8002884 <ADC_IRQHandler+0x10>)
 800287a:	f000 ff5f 	bl	800373c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	24000080 	.word	0x24000080

08002888 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800288c:	4802      	ldr	r0, [pc, #8]	@ (8002898 <USART1_IRQHandler+0x10>)
 800288e:	f00a fd1b 	bl	800d2c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	24000324 	.word	0x24000324

0800289c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_DIO0_Pin);
 80028a0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80028a4:	f005 fb45 	bl	8007f32 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028a8:	bf00      	nop
 80028aa:	bd80      	pop	{r7, pc}

080028ac <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80028b0:	4802      	ldr	r0, [pc, #8]	@ (80028bc <ADC3_IRQHandler+0x10>)
 80028b2:	f000 ff43 	bl	800373c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	240000f0 	.word	0x240000f0

080028c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80028c4:	4b32      	ldr	r3, [pc, #200]	@ (8002990 <SystemInit+0xd0>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ca:	4a31      	ldr	r2, [pc, #196]	@ (8002990 <SystemInit+0xd0>)
 80028cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002994 <SystemInit+0xd4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	2b06      	cmp	r3, #6
 80028de:	d807      	bhi.n	80028f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002994 <SystemInit+0xd4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f023 030f 	bic.w	r3, r3, #15
 80028e8:	4a2a      	ldr	r2, [pc, #168]	@ (8002994 <SystemInit+0xd4>)
 80028ea:	f043 0307 	orr.w	r3, r3, #7
 80028ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80028f0:	4b29      	ldr	r3, [pc, #164]	@ (8002998 <SystemInit+0xd8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a28      	ldr	r2, [pc, #160]	@ (8002998 <SystemInit+0xd8>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028fc:	4b26      	ldr	r3, [pc, #152]	@ (8002998 <SystemInit+0xd8>)
 80028fe:	2200      	movs	r2, #0
 8002900:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002902:	4b25      	ldr	r3, [pc, #148]	@ (8002998 <SystemInit+0xd8>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4924      	ldr	r1, [pc, #144]	@ (8002998 <SystemInit+0xd8>)
 8002908:	4b24      	ldr	r3, [pc, #144]	@ (800299c <SystemInit+0xdc>)
 800290a:	4013      	ands	r3, r2
 800290c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800290e:	4b21      	ldr	r3, [pc, #132]	@ (8002994 <SystemInit+0xd4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d007      	beq.n	800292a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800291a:	4b1e      	ldr	r3, [pc, #120]	@ (8002994 <SystemInit+0xd4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 030f 	bic.w	r3, r3, #15
 8002922:	4a1c      	ldr	r2, [pc, #112]	@ (8002994 <SystemInit+0xd4>)
 8002924:	f043 0307 	orr.w	r3, r3, #7
 8002928:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800292a:	4b1b      	ldr	r3, [pc, #108]	@ (8002998 <SystemInit+0xd8>)
 800292c:	2200      	movs	r2, #0
 800292e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002930:	4b19      	ldr	r3, [pc, #100]	@ (8002998 <SystemInit+0xd8>)
 8002932:	2200      	movs	r2, #0
 8002934:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002936:	4b18      	ldr	r3, [pc, #96]	@ (8002998 <SystemInit+0xd8>)
 8002938:	2200      	movs	r2, #0
 800293a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800293c:	4b16      	ldr	r3, [pc, #88]	@ (8002998 <SystemInit+0xd8>)
 800293e:	4a18      	ldr	r2, [pc, #96]	@ (80029a0 <SystemInit+0xe0>)
 8002940:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002942:	4b15      	ldr	r3, [pc, #84]	@ (8002998 <SystemInit+0xd8>)
 8002944:	4a17      	ldr	r2, [pc, #92]	@ (80029a4 <SystemInit+0xe4>)
 8002946:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002948:	4b13      	ldr	r3, [pc, #76]	@ (8002998 <SystemInit+0xd8>)
 800294a:	4a17      	ldr	r2, [pc, #92]	@ (80029a8 <SystemInit+0xe8>)
 800294c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800294e:	4b12      	ldr	r3, [pc, #72]	@ (8002998 <SystemInit+0xd8>)
 8002950:	2200      	movs	r2, #0
 8002952:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002954:	4b10      	ldr	r3, [pc, #64]	@ (8002998 <SystemInit+0xd8>)
 8002956:	4a14      	ldr	r2, [pc, #80]	@ (80029a8 <SystemInit+0xe8>)
 8002958:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800295a:	4b0f      	ldr	r3, [pc, #60]	@ (8002998 <SystemInit+0xd8>)
 800295c:	2200      	movs	r2, #0
 800295e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002960:	4b0d      	ldr	r3, [pc, #52]	@ (8002998 <SystemInit+0xd8>)
 8002962:	4a11      	ldr	r2, [pc, #68]	@ (80029a8 <SystemInit+0xe8>)
 8002964:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002966:	4b0c      	ldr	r3, [pc, #48]	@ (8002998 <SystemInit+0xd8>)
 8002968:	2200      	movs	r2, #0
 800296a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800296c:	4b0a      	ldr	r3, [pc, #40]	@ (8002998 <SystemInit+0xd8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a09      	ldr	r2, [pc, #36]	@ (8002998 <SystemInit+0xd8>)
 8002972:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002976:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002978:	4b07      	ldr	r3, [pc, #28]	@ (8002998 <SystemInit+0xd8>)
 800297a:	2200      	movs	r2, #0
 800297c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800297e:	4b0b      	ldr	r3, [pc, #44]	@ (80029ac <SystemInit+0xec>)
 8002980:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002984:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002986:	bf00      	nop
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000ed00 	.word	0xe000ed00
 8002994:	52002000 	.word	0x52002000
 8002998:	58024400 	.word	0x58024400
 800299c:	eaf6ed7f 	.word	0xeaf6ed7f
 80029a0:	02020200 	.word	0x02020200
 80029a4:	01ff0000 	.word	0x01ff0000
 80029a8:	01010280 	.word	0x01010280
 80029ac:	52004000 	.word	0x52004000

080029b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80029b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029b4:	f7ff ff84 	bl	80028c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029b8:	480c      	ldr	r0, [pc, #48]	@ (80029ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029ba:	490d      	ldr	r1, [pc, #52]	@ (80029f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029bc:	4a0d      	ldr	r2, [pc, #52]	@ (80029f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029c0:	e002      	b.n	80029c8 <LoopCopyDataInit>

080029c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029c6:	3304      	adds	r3, #4

080029c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029cc:	d3f9      	bcc.n	80029c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ce:	4a0a      	ldr	r2, [pc, #40]	@ (80029f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029d0:	4c0a      	ldr	r4, [pc, #40]	@ (80029fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80029d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029d4:	e001      	b.n	80029da <LoopFillZerobss>

080029d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029d8:	3204      	adds	r2, #4

080029da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029dc:	d3fb      	bcc.n	80029d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029de:	f00d f8d1 	bl	800fb84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029e2:	f7fe fd6b 	bl	80014bc <main>
  bx  lr
 80029e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029e8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80029ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80029f0:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80029f4:	0800fea8 	.word	0x0800fea8
  ldr r2, =_sbss
 80029f8:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 80029fc:	24000624 	.word	0x24000624

08002a00 <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a00:	e7fe      	b.n	8002a00 <BDMA_Channel0_IRQHandler>
	...

08002a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a0a:	2003      	movs	r0, #3
 8002a0c:	f002 fa3e 	bl	8004e8c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a10:	f006 f874 	bl	8008afc <HAL_RCC_GetSysClockFreq>
 8002a14:	4602      	mov	r2, r0
 8002a16:	4b15      	ldr	r3, [pc, #84]	@ (8002a6c <HAL_Init+0x68>)
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	0a1b      	lsrs	r3, r3, #8
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	4913      	ldr	r1, [pc, #76]	@ (8002a70 <HAL_Init+0x6c>)
 8002a22:	5ccb      	ldrb	r3, [r1, r3]
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a6c <HAL_Init+0x68>)
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	4a0e      	ldr	r2, [pc, #56]	@ (8002a70 <HAL_Init+0x6c>)
 8002a38:	5cd3      	ldrb	r3, [r2, r3]
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	fa22 f303 	lsr.w	r3, r2, r3
 8002a44:	4a0b      	ldr	r2, [pc, #44]	@ (8002a74 <HAL_Init+0x70>)
 8002a46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a48:	4a0b      	ldr	r2, [pc, #44]	@ (8002a78 <HAL_Init+0x74>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a4e:	200f      	movs	r0, #15
 8002a50:	f000 f814 	bl	8002a7c <HAL_InitTick>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e002      	b.n	8002a64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a5e:	f7ff fbcf 	bl	8002200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	58024400 	.word	0x58024400
 8002a70:	0800fe58 	.word	0x0800fe58
 8002a74:	24000058 	.word	0x24000058
 8002a78:	24000054 	.word	0x24000054

08002a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a84:	4b15      	ldr	r3, [pc, #84]	@ (8002adc <HAL_InitTick+0x60>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e021      	b.n	8002ad4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a90:	4b13      	ldr	r3, [pc, #76]	@ (8002ae0 <HAL_InitTick+0x64>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b11      	ldr	r3, [pc, #68]	@ (8002adc <HAL_InitTick+0x60>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f002 fa23 	bl	8004ef2 <HAL_SYSTICK_Config>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e00e      	b.n	8002ad4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b0f      	cmp	r3, #15
 8002aba:	d80a      	bhi.n	8002ad2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002abc:	2200      	movs	r2, #0
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac4:	f002 f9ed 	bl	8004ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ac8:	4a06      	ldr	r2, [pc, #24]	@ (8002ae4 <HAL_InitTick+0x68>)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e000      	b.n	8002ad4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	24000060 	.word	0x24000060
 8002ae0:	24000054 	.word	0x24000054
 8002ae4:	2400005c 	.word	0x2400005c

08002ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002aec:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <HAL_IncTick+0x20>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	4b06      	ldr	r3, [pc, #24]	@ (8002b0c <HAL_IncTick+0x24>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4413      	add	r3, r2
 8002af8:	4a04      	ldr	r2, [pc, #16]	@ (8002b0c <HAL_IncTick+0x24>)
 8002afa:	6013      	str	r3, [r2, #0]
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	24000060 	.word	0x24000060
 8002b0c:	24000620 	.word	0x24000620

08002b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  return uwTick;
 8002b14:	4b03      	ldr	r3, [pc, #12]	@ (8002b24 <HAL_GetTick+0x14>)
 8002b16:	681b      	ldr	r3, [r3, #0]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	24000620 	.word	0x24000620

08002b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b30:	f7ff ffee 	bl	8002b10 <HAL_GetTick>
 8002b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b40:	d005      	beq.n	8002b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b42:	4b0a      	ldr	r3, [pc, #40]	@ (8002b6c <HAL_Delay+0x44>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b4e:	bf00      	nop
 8002b50:	f7ff ffde 	bl	8002b10 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d8f7      	bhi.n	8002b50 <HAL_Delay+0x28>
  {
  }
}
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	24000060 	.word	0x24000060

08002b70 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002b7a:	4b07      	ldr	r3, [pc, #28]	@ (8002b98 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	43db      	mvns	r3, r3
 8002b82:	401a      	ands	r2, r3
 8002b84:	4904      	ldr	r1, [pc, #16]	@ (8002b98 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	58000400 	.word	0x58000400

08002b9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	609a      	str	r2, [r3, #8]
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
 8002bca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	609a      	str	r2, [r3, #8]
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	3360      	adds	r3, #96	@ 0x60
 8002c16:	461a      	mov	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4a10      	ldr	r2, [pc, #64]	@ (8002c64 <LL_ADC_SetOffset+0x60>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d10b      	bne.n	8002c40 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002c3e:	e00b      	b.n	8002c58 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	430b      	orrs	r3, r1
 8002c52:	431a      	orrs	r2, r3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	601a      	str	r2, [r3, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	371c      	adds	r7, #28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	58026000 	.word	0x58026000

08002c68 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3360      	adds	r3, #96	@ 0x60
 8002c76:	461a      	mov	r2, r3
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	611a      	str	r2, [r3, #16]
}
 8002cba:	bf00      	nop
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8002d08 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d00e      	beq.n	8002cfa <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	3360      	adds	r3, #96	@ 0x60
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	601a      	str	r2, [r3, #0]
  }
}
 8002cfa:	bf00      	nop
 8002cfc:	371c      	adds	r7, #28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	58026000 	.word	0x58026000

08002d0c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8002d4c <LL_ADC_SetOffsetSaturation+0x40>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d10e      	bne.n	8002d3e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	3360      	adds	r3, #96	@ 0x60
 8002d24:	461a      	mov	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002d3e:	bf00      	nop
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	58026000 	.word	0x58026000

08002d50 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8002d90 <LL_ADC_SetOffsetSign+0x40>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d10e      	bne.n	8002d82 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	3360      	adds	r3, #96	@ 0x60
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	58026000 	.word	0x58026000

08002d94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	3360      	adds	r3, #96	@ 0x60
 8002da4:	461a      	mov	r2, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4a0c      	ldr	r2, [pc, #48]	@ (8002de4 <LL_ADC_SetOffsetState+0x50>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d108      	bne.n	8002dc8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002dc6:	e007      	b.n	8002dd8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	601a      	str	r2, [r3, #0]
}
 8002dd8:	bf00      	nop
 8002dda:	371c      	adds	r7, #28
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	58026000 	.word	0x58026000

08002de8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e000      	b.n	8002e02 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b087      	sub	sp, #28
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3330      	adds	r3, #48	@ 0x30
 8002e1e:	461a      	mov	r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	0a1b      	lsrs	r3, r3, #8
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	f003 030c 	and.w	r3, r3, #12
 8002e2a:	4413      	add	r3, r2
 8002e2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	211f      	movs	r1, #31
 8002e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	401a      	ands	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	0e9b      	lsrs	r3, r3, #26
 8002e46:	f003 011f 	and.w	r1, r3, #31
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f003 031f 	and.w	r3, r3, #31
 8002e50:	fa01 f303 	lsl.w	r3, r1, r3
 8002e54:	431a      	orrs	r2, r3
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e5a:	bf00      	nop
 8002e5c:	371c      	adds	r7, #28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f023 0203 	bic.w	r2, r3, #3
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	60da      	str	r2, [r3, #12]
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f043 0201 	orr.w	r2, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	60da      	str	r2, [r3, #12]
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a08      	ldr	r2, [pc, #32]	@ (8002edc <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d107      	bne.n	8002ece <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f023 0203 	bic.w	r2, r3, #3
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	60da      	str	r2, [r3, #12]
  }
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	58026000 	.word	0x58026000

08002ee0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eec:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b087      	sub	sp, #28
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	3314      	adds	r3, #20
 8002f16:	461a      	mov	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	0e5b      	lsrs	r3, r3, #25
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	4413      	add	r3, r2
 8002f24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	0d1b      	lsrs	r3, r3, #20
 8002f2e:	f003 031f 	and.w	r3, r3, #31
 8002f32:	2107      	movs	r1, #7
 8002f34:	fa01 f303 	lsl.w	r3, r1, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	401a      	ands	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	0d1b      	lsrs	r3, r3, #20
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f50:	bf00      	nop
 8002f52:	371c      	adds	r7, #28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8002fd4 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d115      	bne.n	8002f9c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	401a      	ands	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f003 0318 	and.w	r3, r3, #24
 8002f86:	4914      	ldr	r1, [pc, #80]	@ (8002fd8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002f88:	40d9      	lsrs	r1, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	400b      	ands	r3, r1
 8002f8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f92:	431a      	orrs	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002f9a:	e014      	b.n	8002fc6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	401a      	ands	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f003 0318 	and.w	r3, r3, #24
 8002fb2:	4909      	ldr	r1, [pc, #36]	@ (8002fd8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002fb4:	40d9      	lsrs	r1, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	400b      	ands	r3, r1
 8002fba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002fc6:	bf00      	nop
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	58026000 	.word	0x58026000
 8002fd8:	000fffff 	.word	0x000fffff

08002fdc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 031f 	and.w	r3, r3, #31
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	4b04      	ldr	r3, [pc, #16]	@ (8003034 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003022:	4013      	ands	r3, r2
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6093      	str	r3, [r2, #8]
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	5fffffc0 	.word	0x5fffffc0

08003038 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800304c:	d101      	bne.n	8003052 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	4b05      	ldr	r3, [pc, #20]	@ (8003084 <LL_ADC_EnableInternalRegulator+0x24>)
 800306e:	4013      	ands	r3, r2
 8003070:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	6fffffc0 	.word	0x6fffffc0

08003088 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003098:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800309c:	d101      	bne.n	80030a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	4b05      	ldr	r3, [pc, #20]	@ (80030d4 <LL_ADC_Enable+0x24>)
 80030be:	4013      	ands	r3, r2
 80030c0:	f043 0201 	orr.w	r2, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	7fffffc0 	.word	0x7fffffc0

080030d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <LL_ADC_IsEnabled+0x18>
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <LL_ADC_IsEnabled+0x1a>
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
	...

08003100 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	4b05      	ldr	r3, [pc, #20]	@ (8003124 <LL_ADC_REG_StartConversion+0x24>)
 800310e:	4013      	ands	r3, r2
 8003110:	f043 0204 	orr.w	r2, r3, #4
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	7fffffc0 	.word	0x7fffffc0

08003128 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b04      	cmp	r3, #4
 800313a:	d101      	bne.n	8003140 <LL_ADC_REG_IsConversionOngoing+0x18>
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b08      	cmp	r3, #8
 8003160:	d101      	bne.n	8003166 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003174:	b590      	push	{r4, r7, lr}
 8003176:	b089      	sub	sp, #36	@ 0x24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003180:	2300      	movs	r3, #0
 8003182:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e1ee      	b.n	800356c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff f849 	bl	8002234 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff3f 	bl	8003038 <LL_ADC_IsDeepPowerDownEnabled>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d004      	beq.n	80031ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff ff25 	bl	8003014 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff ff5a 	bl	8003088 <LL_ADC_IsInternalRegulatorEnabled>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d114      	bne.n	8003204 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff ff3e 	bl	8003060 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031e4:	4b8e      	ldr	r3, [pc, #568]	@ (8003420 <HAL_ADC_Init+0x2ac>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	099b      	lsrs	r3, r3, #6
 80031ea:	4a8e      	ldr	r2, [pc, #568]	@ (8003424 <HAL_ADC_Init+0x2b0>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	099b      	lsrs	r3, r3, #6
 80031f2:	3301      	adds	r3, #1
 80031f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031f6:	e002      	b.n	80031fe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1f9      	bne.n	80031f8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff ff3d 	bl	8003088 <LL_ADC_IsInternalRegulatorEnabled>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10d      	bne.n	8003230 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003218:	f043 0210 	orr.w	r2, r3, #16
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003224:	f043 0201 	orr.w	r2, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff ff77 	bl	8003128 <LL_ADC_REG_IsConversionOngoing>
 800323a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2b00      	cmp	r3, #0
 8003246:	f040 8188 	bne.w	800355a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2b00      	cmp	r3, #0
 800324e:	f040 8184 	bne.w	800355a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003256:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800325a:	f043 0202 	orr.w	r2, r3, #2
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff ff36 	bl	80030d8 <LL_ADC_IsEnabled>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d136      	bne.n	80032e0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a6c      	ldr	r2, [pc, #432]	@ (8003428 <HAL_ADC_Init+0x2b4>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d004      	beq.n	8003286 <HAL_ADC_Init+0x112>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a6a      	ldr	r2, [pc, #424]	@ (800342c <HAL_ADC_Init+0x2b8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d10e      	bne.n	80032a4 <HAL_ADC_Init+0x130>
 8003286:	4868      	ldr	r0, [pc, #416]	@ (8003428 <HAL_ADC_Init+0x2b4>)
 8003288:	f7ff ff26 	bl	80030d8 <LL_ADC_IsEnabled>
 800328c:	4604      	mov	r4, r0
 800328e:	4867      	ldr	r0, [pc, #412]	@ (800342c <HAL_ADC_Init+0x2b8>)
 8003290:	f7ff ff22 	bl	80030d8 <LL_ADC_IsEnabled>
 8003294:	4603      	mov	r3, r0
 8003296:	4323      	orrs	r3, r4
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf0c      	ite	eq
 800329c:	2301      	moveq	r3, #1
 800329e:	2300      	movne	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	e008      	b.n	80032b6 <HAL_ADC_Init+0x142>
 80032a4:	4862      	ldr	r0, [pc, #392]	@ (8003430 <HAL_ADC_Init+0x2bc>)
 80032a6:	f7ff ff17 	bl	80030d8 <LL_ADC_IsEnabled>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d012      	beq.n	80032e0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a5a      	ldr	r2, [pc, #360]	@ (8003428 <HAL_ADC_Init+0x2b4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d004      	beq.n	80032ce <HAL_ADC_Init+0x15a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a58      	ldr	r2, [pc, #352]	@ (800342c <HAL_ADC_Init+0x2b8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_Init+0x15e>
 80032ce:	4a59      	ldr	r2, [pc, #356]	@ (8003434 <HAL_ADC_Init+0x2c0>)
 80032d0:	e000      	b.n	80032d4 <HAL_ADC_Init+0x160>
 80032d2:	4a59      	ldr	r2, [pc, #356]	@ (8003438 <HAL_ADC_Init+0x2c4>)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	4619      	mov	r1, r3
 80032da:	4610      	mov	r0, r2
 80032dc:	f7ff fc5e 	bl	8002b9c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a52      	ldr	r2, [pc, #328]	@ (8003430 <HAL_ADC_Init+0x2bc>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d129      	bne.n	800333e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	7e5b      	ldrb	r3, [r3, #25]
 80032ee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80032f4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80032fa:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d013      	beq.n	800332c <HAL_ADC_Init+0x1b8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b0c      	cmp	r3, #12
 800330a:	d00d      	beq.n	8003328 <HAL_ADC_Init+0x1b4>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b1c      	cmp	r3, #28
 8003312:	d007      	beq.n	8003324 <HAL_ADC_Init+0x1b0>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b18      	cmp	r3, #24
 800331a:	d101      	bne.n	8003320 <HAL_ADC_Init+0x1ac>
 800331c:	2318      	movs	r3, #24
 800331e:	e006      	b.n	800332e <HAL_ADC_Init+0x1ba>
 8003320:	2300      	movs	r3, #0
 8003322:	e004      	b.n	800332e <HAL_ADC_Init+0x1ba>
 8003324:	2310      	movs	r3, #16
 8003326:	e002      	b.n	800332e <HAL_ADC_Init+0x1ba>
 8003328:	2308      	movs	r3, #8
 800332a:	e000      	b.n	800332e <HAL_ADC_Init+0x1ba>
 800332c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800332e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003336:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
 800333c:	e00e      	b.n	800335c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	7e5b      	ldrb	r3, [r3, #25]
 8003342:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003348:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800334e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003356:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d106      	bne.n	8003374 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336a:	3b01      	subs	r3, #1
 800336c:	045b      	lsls	r3, r3, #17
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003378:	2b00      	cmp	r3, #0
 800337a:	d009      	beq.n	8003390 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003380:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003388:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a26      	ldr	r2, [pc, #152]	@ (8003430 <HAL_ADC_Init+0x2bc>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d115      	bne.n	80033c6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	4b26      	ldr	r3, [pc, #152]	@ (800343c <HAL_ADC_Init+0x2c8>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	69b9      	ldr	r1, [r7, #24]
 80033aa:	430b      	orrs	r3, r1
 80033ac:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	611a      	str	r2, [r3, #16]
 80033c4:	e009      	b.n	80033da <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	4b1c      	ldr	r3, [pc, #112]	@ (8003440 <HAL_ADC_Init+0x2cc>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6812      	ldr	r2, [r2, #0]
 80033d4:	69b9      	ldr	r1, [r7, #24]
 80033d6:	430b      	orrs	r3, r1
 80033d8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff fea2 	bl	8003128 <LL_ADC_REG_IsConversionOngoing>
 80033e4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff feaf 	bl	800314e <LL_ADC_INJ_IsConversionOngoing>
 80033f0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f040 808e 	bne.w	8003516 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f040 808a 	bne.w	8003516 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a0a      	ldr	r2, [pc, #40]	@ (8003430 <HAL_ADC_Init+0x2bc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d11b      	bne.n	8003444 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	7e1b      	ldrb	r3, [r3, #24]
 8003410:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003418:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	e018      	b.n	8003452 <HAL_ADC_Init+0x2de>
 8003420:	24000054 	.word	0x24000054
 8003424:	053e2d63 	.word	0x053e2d63
 8003428:	40022000 	.word	0x40022000
 800342c:	40022100 	.word	0x40022100
 8003430:	58026000 	.word	0x58026000
 8003434:	40022300 	.word	0x40022300
 8003438:	58026300 	.word	0x58026300
 800343c:	fff04007 	.word	0xfff04007
 8003440:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	7e1b      	ldrb	r3, [r3, #24]
 8003448:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	4b46      	ldr	r3, [pc, #280]	@ (8003574 <HAL_ADC_Init+0x400>)
 800345a:	4013      	ands	r3, r2
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	69b9      	ldr	r1, [r7, #24]
 8003462:	430b      	orrs	r3, r1
 8003464:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800346c:	2b01      	cmp	r3, #1
 800346e:	d137      	bne.n	80034e0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003474:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a3f      	ldr	r2, [pc, #252]	@ (8003578 <HAL_ADC_Init+0x404>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d116      	bne.n	80034ae <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	4b3d      	ldr	r3, [pc, #244]	@ (800357c <HAL_ADC_Init+0x408>)
 8003488:	4013      	ands	r3, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003492:	4311      	orrs	r1, r2
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003498:	4311      	orrs	r1, r2
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800349e:	430a      	orrs	r2, r1
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	611a      	str	r2, [r3, #16]
 80034ac:	e020      	b.n	80034f0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	4b32      	ldr	r3, [pc, #200]	@ (8003580 <HAL_ADC_Init+0x40c>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034bc:	3a01      	subs	r2, #1
 80034be:	0411      	lsls	r1, r2, #16
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80034c4:	4311      	orrs	r1, r2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034ca:	4311      	orrs	r1, r2
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80034d0:	430a      	orrs	r2, r1
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0201 	orr.w	r2, r2, #1
 80034dc:	611a      	str	r2, [r3, #16]
 80034de:	e007      	b.n	80034f0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1b      	ldr	r2, [pc, #108]	@ (8003578 <HAL_ADC_Init+0x404>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d002      	beq.n	8003516 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f001 f9c3 	bl	800489c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d10c      	bne.n	8003538 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003524:	f023 010f 	bic.w	r1, r3, #15
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	1e5a      	subs	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	631a      	str	r2, [r3, #48]	@ 0x30
 8003536:	e007      	b.n	8003548 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 020f 	bic.w	r2, r2, #15
 8003546:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354c:	f023 0303 	bic.w	r3, r3, #3
 8003550:	f043 0201 	orr.w	r2, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	661a      	str	r2, [r3, #96]	@ 0x60
 8003558:	e007      	b.n	800356a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800355e:	f043 0210 	orr.w	r2, r3, #16
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800356a:	7ffb      	ldrb	r3, [r7, #31]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3724      	adds	r7, #36	@ 0x24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd90      	pop	{r4, r7, pc}
 8003574:	ffffbffc 	.word	0xffffbffc
 8003578:	58026000 	.word	0x58026000
 800357c:	fc00f81f 	.word	0xfc00f81f
 8003580:	fc00f81e 	.word	0xfc00f81e

08003584 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a60      	ldr	r2, [pc, #384]	@ (8003718 <HAL_ADC_Start_DMA+0x194>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d004      	beq.n	80035a4 <HAL_ADC_Start_DMA+0x20>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a5f      	ldr	r2, [pc, #380]	@ (800371c <HAL_ADC_Start_DMA+0x198>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d101      	bne.n	80035a8 <HAL_ADC_Start_DMA+0x24>
 80035a4:	4b5e      	ldr	r3, [pc, #376]	@ (8003720 <HAL_ADC_Start_DMA+0x19c>)
 80035a6:	e000      	b.n	80035aa <HAL_ADC_Start_DMA+0x26>
 80035a8:	4b5e      	ldr	r3, [pc, #376]	@ (8003724 <HAL_ADC_Start_DMA+0x1a0>)
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff fd16 	bl	8002fdc <LL_ADC_GetMultimode>
 80035b0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fdb6 	bl	8003128 <LL_ADC_REG_IsConversionOngoing>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f040 80a2 	bne.w	8003708 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_ADC_Start_DMA+0x4e>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e09d      	b.n	800370e <HAL_ADC_Start_DMA+0x18a>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d006      	beq.n	80035ee <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	2b05      	cmp	r3, #5
 80035e4:	d003      	beq.n	80035ee <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	2b09      	cmp	r3, #9
 80035ea:	f040 8086 	bne.w	80036fa <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f001 f836 	bl	8004660 <ADC_Enable>
 80035f4:	4603      	mov	r3, r0
 80035f6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80035f8:	7dfb      	ldrb	r3, [r7, #23]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d178      	bne.n	80036f0 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003602:	4b49      	ldr	r3, [pc, #292]	@ (8003728 <HAL_ADC_Start_DMA+0x1a4>)
 8003604:	4013      	ands	r3, r2
 8003606:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a42      	ldr	r2, [pc, #264]	@ (800371c <HAL_ADC_Start_DMA+0x198>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d002      	beq.n	800361e <HAL_ADC_Start_DMA+0x9a>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	e000      	b.n	8003620 <HAL_ADC_Start_DMA+0x9c>
 800361e:	4b3e      	ldr	r3, [pc, #248]	@ (8003718 <HAL_ADC_Start_DMA+0x194>)
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	4293      	cmp	r3, r2
 8003626:	d002      	beq.n	800362e <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d105      	bne.n	800363a <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003632:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800363e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d006      	beq.n	8003654 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800364a:	f023 0206 	bic.w	r2, r3, #6
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	665a      	str	r2, [r3, #100]	@ 0x64
 8003652:	e002      	b.n	800365a <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800365e:	4a33      	ldr	r2, [pc, #204]	@ (800372c <HAL_ADC_Start_DMA+0x1a8>)
 8003660:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003666:	4a32      	ldr	r2, [pc, #200]	@ (8003730 <HAL_ADC_Start_DMA+0x1ac>)
 8003668:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800366e:	4a31      	ldr	r2, [pc, #196]	@ (8003734 <HAL_ADC_Start_DMA+0x1b0>)
 8003670:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	221c      	movs	r2, #28
 8003678:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0210 	orr.w	r2, r2, #16
 8003690:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a28      	ldr	r2, [pc, #160]	@ (8003738 <HAL_ADC_Start_DMA+0x1b4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d10f      	bne.n	80036bc <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	4619      	mov	r1, r3
 80036aa:	4610      	mov	r0, r2
 80036ac:	f7ff fbfe 	bl	8002eac <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff fbe9 	bl	8002e8c <LL_ADC_EnableDMAReq>
 80036ba:	e007      	b.n	80036cc <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c4:	4619      	mov	r1, r3
 80036c6:	4610      	mov	r0, r2
 80036c8:	f7ff fbcd 	bl	8002e66 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3340      	adds	r3, #64	@ 0x40
 80036d6:	4619      	mov	r1, r3
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f001 ff6e 	bl	80055bc <HAL_DMA_Start_IT>
 80036e0:	4603      	mov	r3, r0
 80036e2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff fd09 	bl	8003100 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80036ee:	e00d      	b.n	800370c <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 80036f8:	e008      	b.n	800370c <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003706:	e001      	b.n	800370c <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003708:	2302      	movs	r3, #2
 800370a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800370c:	7dfb      	ldrb	r3, [r7, #23]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40022000 	.word	0x40022000
 800371c:	40022100 	.word	0x40022100
 8003720:	40022300 	.word	0x40022300
 8003724:	58026300 	.word	0x58026300
 8003728:	fffff0fe 	.word	0xfffff0fe
 800372c:	08004775 	.word	0x08004775
 8003730:	0800484d 	.word	0x0800484d
 8003734:	08004869 	.word	0x08004869
 8003738:	58026000 	.word	0x58026000

0800373c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08a      	sub	sp, #40	@ 0x28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003744:	2300      	movs	r3, #0
 8003746:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a87      	ldr	r2, [pc, #540]	@ (800397c <HAL_ADC_IRQHandler+0x240>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d004      	beq.n	800376c <HAL_ADC_IRQHandler+0x30>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a86      	ldr	r2, [pc, #536]	@ (8003980 <HAL_ADC_IRQHandler+0x244>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d101      	bne.n	8003770 <HAL_ADC_IRQHandler+0x34>
 800376c:	4b85      	ldr	r3, [pc, #532]	@ (8003984 <HAL_ADC_IRQHandler+0x248>)
 800376e:	e000      	b.n	8003772 <HAL_ADC_IRQHandler+0x36>
 8003770:	4b85      	ldr	r3, [pc, #532]	@ (8003988 <HAL_ADC_IRQHandler+0x24c>)
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff fc32 	bl	8002fdc <LL_ADC_GetMultimode>
 8003778:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d017      	beq.n	80037b4 <HAL_ADC_IRQHandler+0x78>
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d012      	beq.n	80037b4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003792:	f003 0310 	and.w	r3, r3, #16
 8003796:	2b00      	cmp	r3, #0
 8003798:	d105      	bne.n	80037a6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800379e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f001 f9b4 	bl	8004b14 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2202      	movs	r2, #2
 80037b2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d004      	beq.n	80037c8 <HAL_ADC_IRQHandler+0x8c>
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10a      	bne.n	80037de <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 8083 	beq.w	80038da <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d07d      	beq.n	80038da <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d105      	bne.n	80037f6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff faf4 	bl	8002de8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d062      	beq.n	80038cc <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a5d      	ldr	r2, [pc, #372]	@ (8003980 <HAL_ADC_IRQHandler+0x244>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d002      	beq.n	8003816 <HAL_ADC_IRQHandler+0xda>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	e000      	b.n	8003818 <HAL_ADC_IRQHandler+0xdc>
 8003816:	4b59      	ldr	r3, [pc, #356]	@ (800397c <HAL_ADC_IRQHandler+0x240>)
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	4293      	cmp	r3, r2
 800381e:	d008      	beq.n	8003832 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d005      	beq.n	8003832 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2b05      	cmp	r3, #5
 800382a:	d002      	beq.n	8003832 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2b09      	cmp	r3, #9
 8003830:	d104      	bne.n	800383c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	623b      	str	r3, [r7, #32]
 800383a:	e00c      	b.n	8003856 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a4f      	ldr	r2, [pc, #316]	@ (8003980 <HAL_ADC_IRQHandler+0x244>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d002      	beq.n	800384c <HAL_ADC_IRQHandler+0x110>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	e000      	b.n	800384e <HAL_ADC_IRQHandler+0x112>
 800384c:	4b4b      	ldr	r3, [pc, #300]	@ (800397c <HAL_ADC_IRQHandler+0x240>)
 800384e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d135      	bne.n	80038cc <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b08      	cmp	r3, #8
 800386c:	d12e      	bne.n	80038cc <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff fc58 	bl	8003128 <LL_ADC_REG_IsConversionOngoing>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d11a      	bne.n	80038b4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 020c 	bic.w	r2, r2, #12
 800388c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003892:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800389e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d112      	bne.n	80038cc <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038aa:	f043 0201 	orr.w	r2, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	661a      	str	r2, [r3, #96]	@ 0x60
 80038b2:	e00b      	b.n	80038cc <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b8:	f043 0210 	orr.w	r2, r3, #16
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038c4:	f043 0201 	orr.w	r2, r3, #1
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f96f 	bl	8003bb0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	220c      	movs	r2, #12
 80038d8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d004      	beq.n	80038ee <HAL_ADC_IRQHandler+0x1b2>
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10b      	bne.n	8003906 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 80a0 	beq.w	8003a3a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 809a 	beq.w	8003a3a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b00      	cmp	r3, #0
 8003910:	d105      	bne.n	800391e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003916:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff fadc 	bl	8002ee0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003928:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff fa5a 	bl	8002de8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003934:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a11      	ldr	r2, [pc, #68]	@ (8003980 <HAL_ADC_IRQHandler+0x244>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d002      	beq.n	8003946 <HAL_ADC_IRQHandler+0x20a>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	e000      	b.n	8003948 <HAL_ADC_IRQHandler+0x20c>
 8003946:	4b0d      	ldr	r3, [pc, #52]	@ (800397c <HAL_ADC_IRQHandler+0x240>)
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	4293      	cmp	r3, r2
 800394e:	d008      	beq.n	8003962 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b06      	cmp	r3, #6
 800395a:	d002      	beq.n	8003962 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2b07      	cmp	r3, #7
 8003960:	d104      	bne.n	800396c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	623b      	str	r3, [r7, #32]
 800396a:	e014      	b.n	8003996 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a03      	ldr	r2, [pc, #12]	@ (8003980 <HAL_ADC_IRQHandler+0x244>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00a      	beq.n	800398c <HAL_ADC_IRQHandler+0x250>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	e008      	b.n	800398e <HAL_ADC_IRQHandler+0x252>
 800397c:	40022000 	.word	0x40022000
 8003980:	40022100 	.word	0x40022100
 8003984:	40022300 	.word	0x40022300
 8003988:	58026300 	.word	0x58026300
 800398c:	4b84      	ldr	r3, [pc, #528]	@ (8003ba0 <HAL_ADC_IRQHandler+0x464>)
 800398e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d047      	beq.n	8003a2c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d007      	beq.n	80039b6 <HAL_ADC_IRQHandler+0x27a>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d03f      	beq.n	8003a2c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d13a      	bne.n	8003a2c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c0:	2b40      	cmp	r3, #64	@ 0x40
 80039c2:	d133      	bne.n	8003a2c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d12e      	bne.n	8003a2c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff fbbb 	bl	800314e <LL_ADC_INJ_IsConversionOngoing>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d11a      	bne.n	8003a14 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80039ec:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d112      	bne.n	8003a2c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a0a:	f043 0201 	orr.w	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	661a      	str	r2, [r3, #96]	@ 0x60
 8003a12:	e00b      	b.n	8003a2c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a18:	f043 0210 	orr.w	r2, r3, #16
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a24:	f043 0201 	orr.w	r2, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f001 f849 	bl	8004ac4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2260      	movs	r2, #96	@ 0x60
 8003a38:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d011      	beq.n	8003a68 <HAL_ADC_IRQHandler+0x32c>
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00c      	beq.n	8003a68 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a52:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f8bc 	bl	8003bd8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2280      	movs	r2, #128	@ 0x80
 8003a66:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d012      	beq.n	8003a98 <HAL_ADC_IRQHandler+0x35c>
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00d      	beq.n	8003a98 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a80:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f001 f82f 	bl	8004aec <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a96:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d012      	beq.n	8003ac8 <HAL_ADC_IRQHandler+0x38c>
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00d      	beq.n	8003ac8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f001 f821 	bl	8004b00 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ac6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f003 0310 	and.w	r3, r3, #16
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d043      	beq.n	8003b5a <HAL_ADC_IRQHandler+0x41e>
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	f003 0310 	and.w	r3, r3, #16
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d03e      	beq.n	8003b5a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d102      	bne.n	8003aea <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae8:	e021      	b.n	8003b2e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d015      	beq.n	8003b1c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a2a      	ldr	r2, [pc, #168]	@ (8003ba0 <HAL_ADC_IRQHandler+0x464>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d004      	beq.n	8003b04 <HAL_ADC_IRQHandler+0x3c8>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a29      	ldr	r2, [pc, #164]	@ (8003ba4 <HAL_ADC_IRQHandler+0x468>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d101      	bne.n	8003b08 <HAL_ADC_IRQHandler+0x3cc>
 8003b04:	4b28      	ldr	r3, [pc, #160]	@ (8003ba8 <HAL_ADC_IRQHandler+0x46c>)
 8003b06:	e000      	b.n	8003b0a <HAL_ADC_IRQHandler+0x3ce>
 8003b08:	4b28      	ldr	r3, [pc, #160]	@ (8003bac <HAL_ADC_IRQHandler+0x470>)
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff fa74 	bl	8002ff8 <LL_ADC_GetMultiDMATransfer>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00b      	beq.n	8003b2e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003b16:	2301      	movs	r3, #1
 8003b18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b1a:	e008      	b.n	8003b2e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d10e      	bne.n	8003b52 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b38:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b44:	f043 0202 	orr.w	r2, r3, #2
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f84d 	bl	8003bec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2210      	movs	r2, #16
 8003b58:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d018      	beq.n	8003b96 <HAL_ADC_IRQHandler+0x45a>
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d013      	beq.n	8003b96 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b72:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b7e:	f043 0208 	orr.w	r2, r3, #8
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b8e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 ffa1 	bl	8004ad8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003b96:	bf00      	nop
 8003b98:	3728      	adds	r7, #40	@ 0x28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40022000 	.word	0x40022000
 8003ba4:	40022100 	.word	0x40022100
 8003ba8:	40022300 	.word	0x40022300
 8003bac:	58026300 	.word	0x58026300

08003bb0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c00:	b590      	push	{r4, r7, lr}
 8003c02:	b0b9      	sub	sp, #228	@ 0xe4
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003c10:	2300      	movs	r3, #0
 8003c12:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c1a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	4aab      	ldr	r2, [pc, #684]	@ (8003ed0 <HAL_ADC_ConfigChannel+0x2d0>)
 8003c22:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d102      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x34>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	f000 bcfe 	b.w	8004630 <HAL_ADC_ConfigChannel+0xa30>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff fa71 	bl	8003128 <LL_ADC_REG_IsConversionOngoing>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f040 84e2 	bne.w	8004612 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	db38      	blt.n	8003cc8 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a9e      	ldr	r2, [pc, #632]	@ (8003ed4 <HAL_ADC_ConfigChannel+0x2d4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d033      	beq.n	8003cc8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d108      	bne.n	8003c7e <HAL_ADC_ConfigChannel+0x7e>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	0e9b      	lsrs	r3, r3, #26
 8003c72:	f003 031f 	and.w	r3, r3, #31
 8003c76:	2201      	movs	r2, #1
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	e01d      	b.n	8003cba <HAL_ADC_ConfigChannel+0xba>
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c8a:	fa93 f3a3 	rbit	r3, r3
 8003c8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003ca2:	2320      	movs	r3, #32
 8003ca4:	e004      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003ca6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003caa:	fab3 f383 	clz	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6812      	ldr	r2, [r2, #0]
 8003cbe:	69d1      	ldr	r1, [r2, #28]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	430b      	orrs	r3, r1
 8003cc6:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6818      	ldr	r0, [r3, #0]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	6859      	ldr	r1, [r3, #4]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	f7ff f89a 	bl	8002e0e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff fa22 	bl	8003128 <LL_ADC_REG_IsConversionOngoing>
 8003ce4:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff fa2e 	bl	800314e <LL_ADC_INJ_IsConversionOngoing>
 8003cf2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f040 8270 	bne.w	80041e0 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f040 826b 	bne.w	80041e0 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	6819      	ldr	r1, [r3, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	461a      	mov	r2, r3
 8003d18:	f7ff f8f5 	bl	8002f06 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a6c      	ldr	r2, [pc, #432]	@ (8003ed4 <HAL_ADC_ConfigChannel+0x2d4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d10d      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	08db      	lsrs	r3, r3, #3
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d40:	e032      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d42:	4b65      	ldr	r3, [pc, #404]	@ (8003ed8 <HAL_ADC_ConfigChannel+0x2d8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003d4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d4e:	d10b      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x168>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	695a      	ldr	r2, [r3, #20]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	089b      	lsrs	r3, r3, #2
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	e01d      	b.n	8003da4 <HAL_ADC_ConfigChannel+0x1a4>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f003 0310 	and.w	r3, r3, #16
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10b      	bne.n	8003d8e <HAL_ADC_ConfigChannel+0x18e>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	695a      	ldr	r2, [r3, #20]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	089b      	lsrs	r3, r3, #2
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	e00a      	b.n	8003da4 <HAL_ADC_ConfigChannel+0x1a4>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	695a      	ldr	r2, [r3, #20]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	089b      	lsrs	r3, r3, #2
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d048      	beq.n	8003e42 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	6919      	ldr	r1, [r3, #16]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003dc0:	f7fe ff20 	bl	8002c04 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a42      	ldr	r2, [pc, #264]	@ (8003ed4 <HAL_ADC_ConfigChannel+0x2d4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d119      	bne.n	8003e02 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6919      	ldr	r1, [r3, #16]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f7fe ffb8 	bl	8002d50 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	6919      	ldr	r1, [r3, #16]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d102      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x1f8>
 8003df2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003df6:	e000      	b.n	8003dfa <HAL_ADC_ConfigChannel+0x1fa>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	f7fe ff86 	bl	8002d0c <LL_ADC_SetOffsetSaturation>
 8003e00:	e1ee      	b.n	80041e0 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6919      	ldr	r1, [r3, #16]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d102      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x21a>
 8003e14:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003e18:	e000      	b.n	8003e1c <HAL_ADC_ConfigChannel+0x21c>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f7fe ff53 	bl	8002cc8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6919      	ldr	r1, [r3, #16]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	7e1b      	ldrb	r3, [r3, #24]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d102      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x238>
 8003e32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e36:	e000      	b.n	8003e3a <HAL_ADC_ConfigChannel+0x23a>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f7fe ff2a 	bl	8002c94 <LL_ADC_SetDataRightShift>
 8003e40:	e1ce      	b.n	80041e0 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a23      	ldr	r2, [pc, #140]	@ (8003ed4 <HAL_ADC_ConfigChannel+0x2d4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	f040 8181 	bne.w	8004150 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2100      	movs	r1, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fe ff07 	bl	8002c68 <LL_ADC_GetOffsetChannel>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x27a>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2100      	movs	r1, #0
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fe fefc 	bl	8002c68 <LL_ADC_GetOffsetChannel>
 8003e70:	4603      	mov	r3, r0
 8003e72:	0e9b      	lsrs	r3, r3, #26
 8003e74:	f003 021f 	and.w	r2, r3, #31
 8003e78:	e01e      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x2b8>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2100      	movs	r1, #0
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fe fef1 	bl	8002c68 <LL_ADC_GetOffsetChannel>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e90:	fa93 f3a3 	rbit	r3, r3
 8003e94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003e98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003e9c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003ea0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003ea8:	2320      	movs	r3, #32
 8003eaa:	e004      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003eac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003eb0:	fab3 f383 	clz	r3, r3
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10b      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x2dc>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	0e9b      	lsrs	r3, r3, #26
 8003eca:	f003 031f 	and.w	r3, r3, #31
 8003ece:	e01e      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x30e>
 8003ed0:	47ff0000 	.word	0x47ff0000
 8003ed4:	58026000 	.word	0x58026000
 8003ed8:	5c001000 	.word	0x5c001000
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ee8:	fa93 f3a3 	rbit	r3, r3
 8003eec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003ef0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003ef8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003f00:	2320      	movs	r3, #32
 8003f02:	e004      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003f04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003f08:	fab3 f383 	clz	r3, r3
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d106      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2200      	movs	r2, #0
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fe ff3a 	bl	8002d94 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2101      	movs	r1, #1
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fe fe9e 	bl	8002c68 <LL_ADC_GetOffsetChannel>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10a      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x34c>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fe fe93 	bl	8002c68 <LL_ADC_GetOffsetChannel>
 8003f42:	4603      	mov	r3, r0
 8003f44:	0e9b      	lsrs	r3, r3, #26
 8003f46:	f003 021f 	and.w	r2, r3, #31
 8003f4a:	e01e      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x38a>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2101      	movs	r1, #1
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fe fe88 	bl	8002c68 <LL_ADC_GetOffsetChannel>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f62:	fa93 f3a3 	rbit	r3, r3
 8003f66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003f6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003f72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003f7a:	2320      	movs	r3, #32
 8003f7c:	e004      	b.n	8003f88 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003f7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f82:	fab3 f383 	clz	r3, r3
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d105      	bne.n	8003fa2 <HAL_ADC_ConfigChannel+0x3a2>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	0e9b      	lsrs	r3, r3, #26
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	e018      	b.n	8003fd4 <HAL_ADC_ConfigChannel+0x3d4>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003faa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003fae:	fa93 f3a3 	rbit	r3, r3
 8003fb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003fb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003fba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003fbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003fc6:	2320      	movs	r3, #32
 8003fc8:	e004      	b.n	8003fd4 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8003fca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fce:	fab3 f383 	clz	r3, r3
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d106      	bne.n	8003fe6 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2101      	movs	r1, #1
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fe fed7 	bl	8002d94 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2102      	movs	r1, #2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fe fe3b 	bl	8002c68 <LL_ADC_GetOffsetChannel>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10a      	bne.n	8004012 <HAL_ADC_ConfigChannel+0x412>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2102      	movs	r1, #2
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe fe30 	bl	8002c68 <LL_ADC_GetOffsetChannel>
 8004008:	4603      	mov	r3, r0
 800400a:	0e9b      	lsrs	r3, r3, #26
 800400c:	f003 021f 	and.w	r2, r3, #31
 8004010:	e01e      	b.n	8004050 <HAL_ADC_ConfigChannel+0x450>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2102      	movs	r1, #2
 8004018:	4618      	mov	r0, r3
 800401a:	f7fe fe25 	bl	8002c68 <LL_ADC_GetOffsetChannel>
 800401e:	4603      	mov	r3, r0
 8004020:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004024:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004028:	fa93 f3a3 	rbit	r3, r3
 800402c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004030:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004034:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004038:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8004040:	2320      	movs	r3, #32
 8004042:	e004      	b.n	800404e <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8004044:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004048:	fab3 f383 	clz	r3, r3
 800404c:	b2db      	uxtb	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004058:	2b00      	cmp	r3, #0
 800405a:	d105      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x468>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	0e9b      	lsrs	r3, r3, #26
 8004062:	f003 031f 	and.w	r3, r3, #31
 8004066:	e014      	b.n	8004092 <HAL_ADC_ConfigChannel+0x492>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004070:	fa93 f3a3 	rbit	r3, r3
 8004074:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004076:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004078:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800407c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004084:	2320      	movs	r3, #32
 8004086:	e004      	b.n	8004092 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004088:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800408c:	fab3 f383 	clz	r3, r3
 8004090:	b2db      	uxtb	r3, r3
 8004092:	429a      	cmp	r2, r3
 8004094:	d106      	bne.n	80040a4 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2200      	movs	r2, #0
 800409c:	2102      	movs	r1, #2
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fe fe78 	bl	8002d94 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2103      	movs	r1, #3
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fe fddc 	bl	8002c68 <LL_ADC_GetOffsetChannel>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10a      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x4d0>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2103      	movs	r1, #3
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fe fdd1 	bl	8002c68 <LL_ADC_GetOffsetChannel>
 80040c6:	4603      	mov	r3, r0
 80040c8:	0e9b      	lsrs	r3, r3, #26
 80040ca:	f003 021f 	and.w	r2, r3, #31
 80040ce:	e017      	b.n	8004100 <HAL_ADC_ConfigChannel+0x500>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2103      	movs	r1, #3
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fe fdc6 	bl	8002c68 <LL_ADC_GetOffsetChannel>
 80040dc:	4603      	mov	r3, r0
 80040de:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040e2:	fa93 f3a3 	rbit	r3, r3
 80040e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80040e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040ea:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80040ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 80040f2:	2320      	movs	r3, #32
 80040f4:	e003      	b.n	80040fe <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 80040f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040f8:	fab3 f383 	clz	r3, r3
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	461a      	mov	r2, r3
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004108:	2b00      	cmp	r3, #0
 800410a:	d105      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x518>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	0e9b      	lsrs	r3, r3, #26
 8004112:	f003 031f 	and.w	r3, r3, #31
 8004116:	e011      	b.n	800413c <HAL_ADC_ConfigChannel+0x53c>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004120:	fa93 f3a3 	rbit	r3, r3
 8004124:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004126:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004128:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800412a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8004130:	2320      	movs	r3, #32
 8004132:	e003      	b.n	800413c <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8004134:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004136:	fab3 f383 	clz	r3, r3
 800413a:	b2db      	uxtb	r3, r3
 800413c:	429a      	cmp	r2, r3
 800413e:	d14f      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2200      	movs	r2, #0
 8004146:	2103      	movs	r1, #3
 8004148:	4618      	mov	r0, r3
 800414a:	f7fe fe23 	bl	8002d94 <LL_ADC_SetOffsetState>
 800414e:	e047      	b.n	80041e0 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004156:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	069b      	lsls	r3, r3, #26
 8004160:	429a      	cmp	r2, r3
 8004162:	d107      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004172:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800417a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	069b      	lsls	r3, r3, #26
 8004184:	429a      	cmp	r2, r3
 8004186:	d107      	bne.n	8004198 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004196:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800419e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	069b      	lsls	r3, r3, #26
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d107      	bne.n	80041bc <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80041ba:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	069b      	lsls	r3, r3, #26
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d107      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80041de:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fe ff77 	bl	80030d8 <LL_ADC_IsEnabled>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f040 8219 	bne.w	8004624 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6819      	ldr	r1, [r3, #0]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	461a      	mov	r2, r3
 8004200:	f7fe feac 	bl	8002f5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	4aa1      	ldr	r2, [pc, #644]	@ (8004490 <HAL_ADC_ConfigChannel+0x890>)
 800420a:	4293      	cmp	r3, r2
 800420c:	f040 812e 	bne.w	800446c <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10b      	bne.n	8004238 <HAL_ADC_ConfigChannel+0x638>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	0e9b      	lsrs	r3, r3, #26
 8004226:	3301      	adds	r3, #1
 8004228:	f003 031f 	and.w	r3, r3, #31
 800422c:	2b09      	cmp	r3, #9
 800422e:	bf94      	ite	ls
 8004230:	2301      	movls	r3, #1
 8004232:	2300      	movhi	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	e019      	b.n	800426c <HAL_ADC_ConfigChannel+0x66c>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004240:	fa93 f3a3 	rbit	r3, r3
 8004244:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004248:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800424a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004250:	2320      	movs	r3, #32
 8004252:	e003      	b.n	800425c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004254:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004256:	fab3 f383 	clz	r3, r3
 800425a:	b2db      	uxtb	r3, r3
 800425c:	3301      	adds	r3, #1
 800425e:	f003 031f 	and.w	r3, r3, #31
 8004262:	2b09      	cmp	r3, #9
 8004264:	bf94      	ite	ls
 8004266:	2301      	movls	r3, #1
 8004268:	2300      	movhi	r3, #0
 800426a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800426c:	2b00      	cmp	r3, #0
 800426e:	d079      	beq.n	8004364 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004278:	2b00      	cmp	r3, #0
 800427a:	d107      	bne.n	800428c <HAL_ADC_ConfigChannel+0x68c>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	0e9b      	lsrs	r3, r3, #26
 8004282:	3301      	adds	r3, #1
 8004284:	069b      	lsls	r3, r3, #26
 8004286:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800428a:	e015      	b.n	80042b8 <HAL_ADC_ConfigChannel+0x6b8>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004294:	fa93 f3a3 	rbit	r3, r3
 8004298:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800429a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800429c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800429e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80042a4:	2320      	movs	r3, #32
 80042a6:	e003      	b.n	80042b0 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80042a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042aa:	fab3 f383 	clz	r3, r3
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	3301      	adds	r3, #1
 80042b2:	069b      	lsls	r3, r3, #26
 80042b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d109      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x6d8>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	0e9b      	lsrs	r3, r3, #26
 80042ca:	3301      	adds	r3, #1
 80042cc:	f003 031f 	and.w	r3, r3, #31
 80042d0:	2101      	movs	r1, #1
 80042d2:	fa01 f303 	lsl.w	r3, r1, r3
 80042d6:	e017      	b.n	8004308 <HAL_ADC_ConfigChannel+0x708>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042e0:	fa93 f3a3 	rbit	r3, r3
 80042e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80042e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042e8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80042ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 80042f0:	2320      	movs	r3, #32
 80042f2:	e003      	b.n	80042fc <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 80042f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042f6:	fab3 f383 	clz	r3, r3
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	3301      	adds	r3, #1
 80042fe:	f003 031f 	and.w	r3, r3, #31
 8004302:	2101      	movs	r1, #1
 8004304:	fa01 f303 	lsl.w	r3, r1, r3
 8004308:	ea42 0103 	orr.w	r1, r2, r3
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10a      	bne.n	800432e <HAL_ADC_ConfigChannel+0x72e>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	0e9b      	lsrs	r3, r3, #26
 800431e:	3301      	adds	r3, #1
 8004320:	f003 021f 	and.w	r2, r3, #31
 8004324:	4613      	mov	r3, r2
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	4413      	add	r3, r2
 800432a:	051b      	lsls	r3, r3, #20
 800432c:	e018      	b.n	8004360 <HAL_ADC_ConfigChannel+0x760>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004336:	fa93 f3a3 	rbit	r3, r3
 800433a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800433c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8004346:	2320      	movs	r3, #32
 8004348:	e003      	b.n	8004352 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800434a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800434c:	fab3 f383 	clz	r3, r3
 8004350:	b2db      	uxtb	r3, r3
 8004352:	3301      	adds	r3, #1
 8004354:	f003 021f 	and.w	r2, r3, #31
 8004358:	4613      	mov	r3, r2
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	4413      	add	r3, r2
 800435e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004360:	430b      	orrs	r3, r1
 8004362:	e07e      	b.n	8004462 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800436c:	2b00      	cmp	r3, #0
 800436e:	d107      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x780>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	0e9b      	lsrs	r3, r3, #26
 8004376:	3301      	adds	r3, #1
 8004378:	069b      	lsls	r3, r3, #26
 800437a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800437e:	e015      	b.n	80043ac <HAL_ADC_ConfigChannel+0x7ac>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004388:	fa93 f3a3 	rbit	r3, r3
 800438c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800438e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004390:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8004398:	2320      	movs	r3, #32
 800439a:	e003      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 800439c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800439e:	fab3 f383 	clz	r3, r3
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	3301      	adds	r3, #1
 80043a6:	069b      	lsls	r3, r3, #26
 80043a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d109      	bne.n	80043cc <HAL_ADC_ConfigChannel+0x7cc>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	0e9b      	lsrs	r3, r3, #26
 80043be:	3301      	adds	r3, #1
 80043c0:	f003 031f 	and.w	r3, r3, #31
 80043c4:	2101      	movs	r1, #1
 80043c6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ca:	e017      	b.n	80043fc <HAL_ADC_ConfigChannel+0x7fc>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	fa93 f3a3 	rbit	r3, r3
 80043d8:	61bb      	str	r3, [r7, #24]
  return result;
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80043e4:	2320      	movs	r3, #32
 80043e6:	e003      	b.n	80043f0 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	fab3 f383 	clz	r3, r3
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	3301      	adds	r3, #1
 80043f2:	f003 031f 	and.w	r3, r3, #31
 80043f6:	2101      	movs	r1, #1
 80043f8:	fa01 f303 	lsl.w	r3, r1, r3
 80043fc:	ea42 0103 	orr.w	r1, r2, r3
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10d      	bne.n	8004428 <HAL_ADC_ConfigChannel+0x828>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	0e9b      	lsrs	r3, r3, #26
 8004412:	3301      	adds	r3, #1
 8004414:	f003 021f 	and.w	r2, r3, #31
 8004418:	4613      	mov	r3, r2
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	4413      	add	r3, r2
 800441e:	3b1e      	subs	r3, #30
 8004420:	051b      	lsls	r3, r3, #20
 8004422:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004426:	e01b      	b.n	8004460 <HAL_ADC_ConfigChannel+0x860>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	fa93 f3a3 	rbit	r3, r3
 8004434:	60fb      	str	r3, [r7, #12]
  return result;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8004440:	2320      	movs	r3, #32
 8004442:	e003      	b.n	800444c <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	fab3 f383 	clz	r3, r3
 800444a:	b2db      	uxtb	r3, r3
 800444c:	3301      	adds	r3, #1
 800444e:	f003 021f 	and.w	r2, r3, #31
 8004452:	4613      	mov	r3, r2
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	4413      	add	r3, r2
 8004458:	3b1e      	subs	r3, #30
 800445a:	051b      	lsls	r3, r3, #20
 800445c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004460:	430b      	orrs	r3, r1
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	6892      	ldr	r2, [r2, #8]
 8004466:	4619      	mov	r1, r3
 8004468:	f7fe fd4d 	bl	8002f06 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	f280 80d7 	bge.w	8004624 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a06      	ldr	r2, [pc, #24]	@ (8004494 <HAL_ADC_ConfigChannel+0x894>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d004      	beq.n	800448a <HAL_ADC_ConfigChannel+0x88a>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a04      	ldr	r2, [pc, #16]	@ (8004498 <HAL_ADC_ConfigChannel+0x898>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d10a      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x8a0>
 800448a:	4b04      	ldr	r3, [pc, #16]	@ (800449c <HAL_ADC_ConfigChannel+0x89c>)
 800448c:	e009      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x8a2>
 800448e:	bf00      	nop
 8004490:	47ff0000 	.word	0x47ff0000
 8004494:	40022000 	.word	0x40022000
 8004498:	40022100 	.word	0x40022100
 800449c:	40022300 	.word	0x40022300
 80044a0:	4b65      	ldr	r3, [pc, #404]	@ (8004638 <HAL_ADC_ConfigChannel+0xa38>)
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fe fba0 	bl	8002be8 <LL_ADC_GetCommonPathInternalCh>
 80044a8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a62      	ldr	r2, [pc, #392]	@ (800463c <HAL_ADC_ConfigChannel+0xa3c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d004      	beq.n	80044c0 <HAL_ADC_ConfigChannel+0x8c0>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a61      	ldr	r2, [pc, #388]	@ (8004640 <HAL_ADC_ConfigChannel+0xa40>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d10e      	bne.n	80044de <HAL_ADC_ConfigChannel+0x8de>
 80044c0:	485e      	ldr	r0, [pc, #376]	@ (800463c <HAL_ADC_ConfigChannel+0xa3c>)
 80044c2:	f7fe fe09 	bl	80030d8 <LL_ADC_IsEnabled>
 80044c6:	4604      	mov	r4, r0
 80044c8:	485d      	ldr	r0, [pc, #372]	@ (8004640 <HAL_ADC_ConfigChannel+0xa40>)
 80044ca:	f7fe fe05 	bl	80030d8 <LL_ADC_IsEnabled>
 80044ce:	4603      	mov	r3, r0
 80044d0:	4323      	orrs	r3, r4
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	bf0c      	ite	eq
 80044d6:	2301      	moveq	r3, #1
 80044d8:	2300      	movne	r3, #0
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	e008      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x8f0>
 80044de:	4859      	ldr	r0, [pc, #356]	@ (8004644 <HAL_ADC_ConfigChannel+0xa44>)
 80044e0:	f7fe fdfa 	bl	80030d8 <LL_ADC_IsEnabled>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	bf0c      	ite	eq
 80044ea:	2301      	moveq	r3, #1
 80044ec:	2300      	movne	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8084 	beq.w	80045fe <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a53      	ldr	r2, [pc, #332]	@ (8004648 <HAL_ADC_ConfigChannel+0xa48>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d132      	bne.n	8004566 <HAL_ADC_ConfigChannel+0x966>
 8004500:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004504:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d12c      	bne.n	8004566 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a4c      	ldr	r2, [pc, #304]	@ (8004644 <HAL_ADC_ConfigChannel+0xa44>)
 8004512:	4293      	cmp	r3, r2
 8004514:	f040 8086 	bne.w	8004624 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a47      	ldr	r2, [pc, #284]	@ (800463c <HAL_ADC_ConfigChannel+0xa3c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d004      	beq.n	800452c <HAL_ADC_ConfigChannel+0x92c>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a46      	ldr	r2, [pc, #280]	@ (8004640 <HAL_ADC_ConfigChannel+0xa40>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d101      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x930>
 800452c:	4a47      	ldr	r2, [pc, #284]	@ (800464c <HAL_ADC_ConfigChannel+0xa4c>)
 800452e:	e000      	b.n	8004532 <HAL_ADC_ConfigChannel+0x932>
 8004530:	4a41      	ldr	r2, [pc, #260]	@ (8004638 <HAL_ADC_ConfigChannel+0xa38>)
 8004532:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004536:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800453a:	4619      	mov	r1, r3
 800453c:	4610      	mov	r0, r2
 800453e:	f7fe fb40 	bl	8002bc2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004542:	4b43      	ldr	r3, [pc, #268]	@ (8004650 <HAL_ADC_ConfigChannel+0xa50>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	099b      	lsrs	r3, r3, #6
 8004548:	4a42      	ldr	r2, [pc, #264]	@ (8004654 <HAL_ADC_ConfigChannel+0xa54>)
 800454a:	fba2 2303 	umull	r2, r3, r2, r3
 800454e:	099b      	lsrs	r3, r3, #6
 8004550:	3301      	adds	r3, #1
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004556:	e002      	b.n	800455e <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	3b01      	subs	r3, #1
 800455c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1f9      	bne.n	8004558 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004564:	e05e      	b.n	8004624 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a3b      	ldr	r2, [pc, #236]	@ (8004658 <HAL_ADC_ConfigChannel+0xa58>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d120      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x9b2>
 8004570:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004574:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d11a      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a30      	ldr	r2, [pc, #192]	@ (8004644 <HAL_ADC_ConfigChannel+0xa44>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d14e      	bne.n	8004624 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a2c      	ldr	r2, [pc, #176]	@ (800463c <HAL_ADC_ConfigChannel+0xa3c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d004      	beq.n	800459a <HAL_ADC_ConfigChannel+0x99a>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a2a      	ldr	r2, [pc, #168]	@ (8004640 <HAL_ADC_ConfigChannel+0xa40>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d101      	bne.n	800459e <HAL_ADC_ConfigChannel+0x99e>
 800459a:	4a2c      	ldr	r2, [pc, #176]	@ (800464c <HAL_ADC_ConfigChannel+0xa4c>)
 800459c:	e000      	b.n	80045a0 <HAL_ADC_ConfigChannel+0x9a0>
 800459e:	4a26      	ldr	r2, [pc, #152]	@ (8004638 <HAL_ADC_ConfigChannel+0xa38>)
 80045a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045a8:	4619      	mov	r1, r3
 80045aa:	4610      	mov	r0, r2
 80045ac:	f7fe fb09 	bl	8002bc2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045b0:	e038      	b.n	8004624 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a29      	ldr	r2, [pc, #164]	@ (800465c <HAL_ADC_ConfigChannel+0xa5c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d133      	bne.n	8004624 <HAL_ADC_ConfigChannel+0xa24>
 80045bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d12d      	bne.n	8004624 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004644 <HAL_ADC_ConfigChannel+0xa44>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d128      	bne.n	8004624 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a19      	ldr	r2, [pc, #100]	@ (800463c <HAL_ADC_ConfigChannel+0xa3c>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d004      	beq.n	80045e6 <HAL_ADC_ConfigChannel+0x9e6>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a17      	ldr	r2, [pc, #92]	@ (8004640 <HAL_ADC_ConfigChannel+0xa40>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d101      	bne.n	80045ea <HAL_ADC_ConfigChannel+0x9ea>
 80045e6:	4a19      	ldr	r2, [pc, #100]	@ (800464c <HAL_ADC_ConfigChannel+0xa4c>)
 80045e8:	e000      	b.n	80045ec <HAL_ADC_ConfigChannel+0x9ec>
 80045ea:	4a13      	ldr	r2, [pc, #76]	@ (8004638 <HAL_ADC_ConfigChannel+0xa38>)
 80045ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80045f4:	4619      	mov	r1, r3
 80045f6:	4610      	mov	r0, r2
 80045f8:	f7fe fae3 	bl	8002bc2 <LL_ADC_SetCommonPathInternalCh>
 80045fc:	e012      	b.n	8004624 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004602:	f043 0220 	orr.w	r2, r3, #32
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004610:	e008      	b.n	8004624 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004616:	f043 0220 	orr.w	r2, r3, #32
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800462c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004630:	4618      	mov	r0, r3
 8004632:	37e4      	adds	r7, #228	@ 0xe4
 8004634:	46bd      	mov	sp, r7
 8004636:	bd90      	pop	{r4, r7, pc}
 8004638:	58026300 	.word	0x58026300
 800463c:	40022000 	.word	0x40022000
 8004640:	40022100 	.word	0x40022100
 8004644:	58026000 	.word	0x58026000
 8004648:	c7520000 	.word	0xc7520000
 800464c:	40022300 	.word	0x40022300
 8004650:	24000054 	.word	0x24000054
 8004654:	053e2d63 	.word	0x053e2d63
 8004658:	c3210000 	.word	0xc3210000
 800465c:	cb840000 	.word	0xcb840000

08004660 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f7fe fd33 	bl	80030d8 <LL_ADC_IsEnabled>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d16e      	bne.n	8004756 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	4b38      	ldr	r3, [pc, #224]	@ (8004760 <ADC_Enable+0x100>)
 8004680:	4013      	ands	r3, r2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00d      	beq.n	80046a2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800468a:	f043 0210 	orr.w	r2, r3, #16
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004696:	f043 0201 	orr.w	r2, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e05a      	b.n	8004758 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fe fd02 	bl	80030b0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80046ac:	f7fe fa30 	bl	8002b10 <HAL_GetTick>
 80046b0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a2b      	ldr	r2, [pc, #172]	@ (8004764 <ADC_Enable+0x104>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d004      	beq.n	80046c6 <ADC_Enable+0x66>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a29      	ldr	r2, [pc, #164]	@ (8004768 <ADC_Enable+0x108>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d101      	bne.n	80046ca <ADC_Enable+0x6a>
 80046c6:	4b29      	ldr	r3, [pc, #164]	@ (800476c <ADC_Enable+0x10c>)
 80046c8:	e000      	b.n	80046cc <ADC_Enable+0x6c>
 80046ca:	4b29      	ldr	r3, [pc, #164]	@ (8004770 <ADC_Enable+0x110>)
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fe fc85 	bl	8002fdc <LL_ADC_GetMultimode>
 80046d2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a23      	ldr	r2, [pc, #140]	@ (8004768 <ADC_Enable+0x108>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d002      	beq.n	80046e4 <ADC_Enable+0x84>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	e000      	b.n	80046e6 <ADC_Enable+0x86>
 80046e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004764 <ADC_Enable+0x104>)
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6812      	ldr	r2, [r2, #0]
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d02c      	beq.n	8004748 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d130      	bne.n	8004756 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046f4:	e028      	b.n	8004748 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fe fcec 	bl	80030d8 <LL_ADC_IsEnabled>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d104      	bne.n	8004710 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe fcd0 	bl	80030b0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004710:	f7fe f9fe 	bl	8002b10 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d914      	bls.n	8004748 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b01      	cmp	r3, #1
 800472a:	d00d      	beq.n	8004748 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004730:	f043 0210 	orr.w	r2, r3, #16
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800473c:	f043 0201 	orr.w	r2, r3, #1
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e007      	b.n	8004758 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b01      	cmp	r3, #1
 8004754:	d1cf      	bne.n	80046f6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	8000003f 	.word	0x8000003f
 8004764:	40022000 	.word	0x40022000
 8004768:	40022100 	.word	0x40022100
 800476c:	40022300 	.word	0x40022300
 8004770:	58026300 	.word	0x58026300

08004774 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004780:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004786:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800478a:	2b00      	cmp	r3, #0
 800478c:	d14b      	bne.n	8004826 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004792:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d021      	beq.n	80047ec <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fe fb1b 	bl	8002de8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d032      	beq.n	800481e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d12b      	bne.n	800481e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d11f      	bne.n	800481e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e2:	f043 0201 	orr.w	r2, r3, #1
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	661a      	str	r2, [r3, #96]	@ 0x60
 80047ea:	e018      	b.n	800481e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d111      	bne.n	800481e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800480a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d105      	bne.n	800481e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004816:	f043 0201 	orr.w	r2, r3, #1
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f7ff f9c6 	bl	8003bb0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004824:	e00e      	b.n	8004844 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800482a:	f003 0310 	and.w	r3, r3, #16
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f7ff f9da 	bl	8003bec <HAL_ADC_ErrorCallback>
}
 8004838:	e004      	b.n	8004844 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800483e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	4798      	blx	r3
}
 8004844:	bf00      	nop
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004858:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f7ff f9b2 	bl	8003bc4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004860:	bf00      	nop
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004874:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800487a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004886:	f043 0204 	orr.w	r2, r3, #4
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f7ff f9ac 	bl	8003bec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004894:	bf00      	nop
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a6c      	ldr	r2, [pc, #432]	@ (8004a5c <ADC_ConfigureBoostMode+0x1c0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d004      	beq.n	80048b8 <ADC_ConfigureBoostMode+0x1c>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a6b      	ldr	r2, [pc, #428]	@ (8004a60 <ADC_ConfigureBoostMode+0x1c4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d109      	bne.n	80048cc <ADC_ConfigureBoostMode+0x30>
 80048b8:	4b6a      	ldr	r3, [pc, #424]	@ (8004a64 <ADC_ConfigureBoostMode+0x1c8>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bf14      	ite	ne
 80048c4:	2301      	movne	r3, #1
 80048c6:	2300      	moveq	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	e008      	b.n	80048de <ADC_ConfigureBoostMode+0x42>
 80048cc:	4b66      	ldr	r3, [pc, #408]	@ (8004a68 <ADC_ConfigureBoostMode+0x1cc>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	bf14      	ite	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	2300      	moveq	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01c      	beq.n	800491c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80048e2:	f004 fa85 	bl	8008df0 <HAL_RCC_GetHCLKFreq>
 80048e6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80048f0:	d010      	beq.n	8004914 <ADC_ConfigureBoostMode+0x78>
 80048f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80048f6:	d873      	bhi.n	80049e0 <ADC_ConfigureBoostMode+0x144>
 80048f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048fc:	d002      	beq.n	8004904 <ADC_ConfigureBoostMode+0x68>
 80048fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004902:	d16d      	bne.n	80049e0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	0c1b      	lsrs	r3, r3, #16
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004910:	60fb      	str	r3, [r7, #12]
        break;
 8004912:	e068      	b.n	80049e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	089b      	lsrs	r3, r3, #2
 8004918:	60fb      	str	r3, [r7, #12]
        break;
 800491a:	e064      	b.n	80049e6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800491c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004920:	f04f 0100 	mov.w	r1, #0
 8004924:	f005 fc60 	bl	800a1e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004928:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004932:	d051      	beq.n	80049d8 <ADC_ConfigureBoostMode+0x13c>
 8004934:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004938:	d854      	bhi.n	80049e4 <ADC_ConfigureBoostMode+0x148>
 800493a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800493e:	d047      	beq.n	80049d0 <ADC_ConfigureBoostMode+0x134>
 8004940:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004944:	d84e      	bhi.n	80049e4 <ADC_ConfigureBoostMode+0x148>
 8004946:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800494a:	d03d      	beq.n	80049c8 <ADC_ConfigureBoostMode+0x12c>
 800494c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004950:	d848      	bhi.n	80049e4 <ADC_ConfigureBoostMode+0x148>
 8004952:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004956:	d033      	beq.n	80049c0 <ADC_ConfigureBoostMode+0x124>
 8004958:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800495c:	d842      	bhi.n	80049e4 <ADC_ConfigureBoostMode+0x148>
 800495e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004962:	d029      	beq.n	80049b8 <ADC_ConfigureBoostMode+0x11c>
 8004964:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004968:	d83c      	bhi.n	80049e4 <ADC_ConfigureBoostMode+0x148>
 800496a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800496e:	d01a      	beq.n	80049a6 <ADC_ConfigureBoostMode+0x10a>
 8004970:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004974:	d836      	bhi.n	80049e4 <ADC_ConfigureBoostMode+0x148>
 8004976:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800497a:	d014      	beq.n	80049a6 <ADC_ConfigureBoostMode+0x10a>
 800497c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004980:	d830      	bhi.n	80049e4 <ADC_ConfigureBoostMode+0x148>
 8004982:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004986:	d00e      	beq.n	80049a6 <ADC_ConfigureBoostMode+0x10a>
 8004988:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800498c:	d82a      	bhi.n	80049e4 <ADC_ConfigureBoostMode+0x148>
 800498e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004992:	d008      	beq.n	80049a6 <ADC_ConfigureBoostMode+0x10a>
 8004994:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004998:	d824      	bhi.n	80049e4 <ADC_ConfigureBoostMode+0x148>
 800499a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800499e:	d002      	beq.n	80049a6 <ADC_ConfigureBoostMode+0x10a>
 80049a0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80049a4:	d11e      	bne.n	80049e4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	0c9b      	lsrs	r3, r3, #18
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b4:	60fb      	str	r3, [r7, #12]
        break;
 80049b6:	e016      	b.n	80049e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	091b      	lsrs	r3, r3, #4
 80049bc:	60fb      	str	r3, [r7, #12]
        break;
 80049be:	e012      	b.n	80049e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	60fb      	str	r3, [r7, #12]
        break;
 80049c6:	e00e      	b.n	80049e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	099b      	lsrs	r3, r3, #6
 80049cc:	60fb      	str	r3, [r7, #12]
        break;
 80049ce:	e00a      	b.n	80049e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	09db      	lsrs	r3, r3, #7
 80049d4:	60fb      	str	r3, [r7, #12]
        break;
 80049d6:	e006      	b.n	80049e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	0a1b      	lsrs	r3, r3, #8
 80049dc:	60fb      	str	r3, [r7, #12]
        break;
 80049de:	e002      	b.n	80049e6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80049e0:	bf00      	nop
 80049e2:	e000      	b.n	80049e6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80049e4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	085b      	lsrs	r3, r3, #1
 80049ea:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4a1f      	ldr	r2, [pc, #124]	@ (8004a6c <ADC_ConfigureBoostMode+0x1d0>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d808      	bhi.n	8004a06 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004a02:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004a04:	e025      	b.n	8004a52 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4a19      	ldr	r2, [pc, #100]	@ (8004a70 <ADC_ConfigureBoostMode+0x1d4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d80a      	bhi.n	8004a24 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a20:	609a      	str	r2, [r3, #8]
}
 8004a22:	e016      	b.n	8004a52 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4a13      	ldr	r2, [pc, #76]	@ (8004a74 <ADC_ConfigureBoostMode+0x1d8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d80a      	bhi.n	8004a42 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a3e:	609a      	str	r2, [r3, #8]
}
 8004a40:	e007      	b.n	8004a52 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004a50:	609a      	str	r2, [r3, #8]
}
 8004a52:	bf00      	nop
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40022000 	.word	0x40022000
 8004a60:	40022100 	.word	0x40022100
 8004a64:	40022300 	.word	0x40022300
 8004a68:	58026300 	.word	0x58026300
 8004a6c:	005f5e10 	.word	0x005f5e10
 8004a70:	00bebc20 	.word	0x00bebc20
 8004a74:	017d7840 	.word	0x017d7840

08004a78 <LL_ADC_IsEnabled>:
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <LL_ADC_IsEnabled+0x18>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e000      	b.n	8004a92 <LL_ADC_IsEnabled+0x1a>
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <LL_ADC_REG_IsConversionOngoing>:
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d101      	bne.n	8004ab6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004b28:	b590      	push	{r4, r7, lr}
 8004b2a:	b0a3      	sub	sp, #140	@ 0x8c
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b42:	2302      	movs	r3, #2
 8004b44:	e0c1      	b.n	8004cca <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004b52:	2300      	movs	r3, #0
 8004b54:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a5e      	ldr	r2, [pc, #376]	@ (8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d102      	bne.n	8004b66 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004b60:	4b5d      	ldr	r3, [pc, #372]	@ (8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	e001      	b.n	8004b6a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10b      	bne.n	8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b74:	f043 0220 	orr.w	r2, r3, #32
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e0a0      	b.n	8004cca <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff ff87 	bl	8004a9e <LL_ADC_REG_IsConversionOngoing>
 8004b90:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7ff ff80 	bl	8004a9e <LL_ADC_REG_IsConversionOngoing>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f040 8081 	bne.w	8004ca8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004ba6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d17c      	bne.n	8004ca8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a48      	ldr	r2, [pc, #288]	@ (8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d004      	beq.n	8004bc2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a46      	ldr	r2, [pc, #280]	@ (8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d101      	bne.n	8004bc6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004bc2:	4b46      	ldr	r3, [pc, #280]	@ (8004cdc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004bc4:	e000      	b.n	8004bc8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004bc6:	4b46      	ldr	r3, [pc, #280]	@ (8004ce0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004bc8:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d039      	beq.n	8004c46 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004bd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004be2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a3a      	ldr	r2, [pc, #232]	@ (8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d004      	beq.n	8004bf8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a39      	ldr	r2, [pc, #228]	@ (8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d10e      	bne.n	8004c16 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004bf8:	4836      	ldr	r0, [pc, #216]	@ (8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004bfa:	f7ff ff3d 	bl	8004a78 <LL_ADC_IsEnabled>
 8004bfe:	4604      	mov	r4, r0
 8004c00:	4835      	ldr	r0, [pc, #212]	@ (8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c02:	f7ff ff39 	bl	8004a78 <LL_ADC_IsEnabled>
 8004c06:	4603      	mov	r3, r0
 8004c08:	4323      	orrs	r3, r4
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	bf0c      	ite	eq
 8004c0e:	2301      	moveq	r3, #1
 8004c10:	2300      	movne	r3, #0
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	e008      	b.n	8004c28 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004c16:	4833      	ldr	r0, [pc, #204]	@ (8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004c18:	f7ff ff2e 	bl	8004a78 <LL_ADC_IsEnabled>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bf0c      	ite	eq
 8004c22:	2301      	moveq	r3, #1
 8004c24:	2300      	movne	r3, #0
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d047      	beq.n	8004cbc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	4b2d      	ldr	r3, [pc, #180]	@ (8004ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004c32:	4013      	ands	r3, r2
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	6811      	ldr	r1, [r2, #0]
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	6892      	ldr	r2, [r2, #8]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c42:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c44:	e03a      	b.n	8004cbc <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004c46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c50:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1f      	ldr	r2, [pc, #124]	@ (8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d004      	beq.n	8004c66 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1d      	ldr	r2, [pc, #116]	@ (8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d10e      	bne.n	8004c84 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004c66:	481b      	ldr	r0, [pc, #108]	@ (8004cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c68:	f7ff ff06 	bl	8004a78 <LL_ADC_IsEnabled>
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	481a      	ldr	r0, [pc, #104]	@ (8004cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c70:	f7ff ff02 	bl	8004a78 <LL_ADC_IsEnabled>
 8004c74:	4603      	mov	r3, r0
 8004c76:	4323      	orrs	r3, r4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bf0c      	ite	eq
 8004c7c:	2301      	moveq	r3, #1
 8004c7e:	2300      	movne	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	e008      	b.n	8004c96 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004c84:	4817      	ldr	r0, [pc, #92]	@ (8004ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004c86:	f7ff fef7 	bl	8004a78 <LL_ADC_IsEnabled>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	bf0c      	ite	eq
 8004c90:	2301      	moveq	r3, #1
 8004c92:	2300      	movne	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d010      	beq.n	8004cbc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004c9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	4b12      	ldr	r3, [pc, #72]	@ (8004ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004ca4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ca6:	e009      	b.n	8004cbc <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cac:	f043 0220 	orr.w	r2, r3, #32
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004cba:	e000      	b.n	8004cbe <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cbc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004cc6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	378c      	adds	r7, #140	@ 0x8c
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd90      	pop	{r4, r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40022000 	.word	0x40022000
 8004cd8:	40022100 	.word	0x40022100
 8004cdc:	40022300 	.word	0x40022300
 8004ce0:	58026300 	.word	0x58026300
 8004ce4:	58026000 	.word	0x58026000
 8004ce8:	fffff0e0 	.word	0xfffff0e0

08004cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8004d2c <__NVIC_SetPriorityGrouping+0x40>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d08:	4013      	ands	r3, r2
 8004d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004d14:	4b06      	ldr	r3, [pc, #24]	@ (8004d30 <__NVIC_SetPriorityGrouping+0x44>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d1a:	4a04      	ldr	r2, [pc, #16]	@ (8004d2c <__NVIC_SetPriorityGrouping+0x40>)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	60d3      	str	r3, [r2, #12]
}
 8004d20:	bf00      	nop
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	e000ed00 	.word	0xe000ed00
 8004d30:	05fa0000 	.word	0x05fa0000

08004d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d38:	4b04      	ldr	r3, [pc, #16]	@ (8004d4c <__NVIC_GetPriorityGrouping+0x18>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	0a1b      	lsrs	r3, r3, #8
 8004d3e:	f003 0307 	and.w	r3, r3, #7
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	e000ed00 	.word	0xe000ed00

08004d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	4603      	mov	r3, r0
 8004d58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	db0b      	blt.n	8004d7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d62:	88fb      	ldrh	r3, [r7, #6]
 8004d64:	f003 021f 	and.w	r2, r3, #31
 8004d68:	4907      	ldr	r1, [pc, #28]	@ (8004d88 <__NVIC_EnableIRQ+0x38>)
 8004d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d6e:	095b      	lsrs	r3, r3, #5
 8004d70:	2001      	movs	r0, #1
 8004d72:	fa00 f202 	lsl.w	r2, r0, r2
 8004d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	e000e100 	.word	0xe000e100

08004d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	4603      	mov	r3, r0
 8004d94:	6039      	str	r1, [r7, #0]
 8004d96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	db0a      	blt.n	8004db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	490c      	ldr	r1, [pc, #48]	@ (8004dd8 <__NVIC_SetPriority+0x4c>)
 8004da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004daa:	0112      	lsls	r2, r2, #4
 8004dac:	b2d2      	uxtb	r2, r2
 8004dae:	440b      	add	r3, r1
 8004db0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004db4:	e00a      	b.n	8004dcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	4908      	ldr	r1, [pc, #32]	@ (8004ddc <__NVIC_SetPriority+0x50>)
 8004dbc:	88fb      	ldrh	r3, [r7, #6]
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	3b04      	subs	r3, #4
 8004dc4:	0112      	lsls	r2, r2, #4
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	440b      	add	r3, r1
 8004dca:	761a      	strb	r2, [r3, #24]
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	e000e100 	.word	0xe000e100
 8004ddc:	e000ed00 	.word	0xe000ed00

08004de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b089      	sub	sp, #36	@ 0x24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f1c3 0307 	rsb	r3, r3, #7
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	bf28      	it	cs
 8004dfe:	2304      	movcs	r3, #4
 8004e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	3304      	adds	r3, #4
 8004e06:	2b06      	cmp	r3, #6
 8004e08:	d902      	bls.n	8004e10 <NVIC_EncodePriority+0x30>
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	3b03      	subs	r3, #3
 8004e0e:	e000      	b.n	8004e12 <NVIC_EncodePriority+0x32>
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e14:	f04f 32ff 	mov.w	r2, #4294967295
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1e:	43da      	mvns	r2, r3
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	401a      	ands	r2, r3
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e28:	f04f 31ff 	mov.w	r1, #4294967295
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e32:	43d9      	mvns	r1, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e38:	4313      	orrs	r3, r2
         );
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3724      	adds	r7, #36	@ 0x24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e58:	d301      	bcc.n	8004e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e00f      	b.n	8004e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e88 <SysTick_Config+0x40>)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e66:	210f      	movs	r1, #15
 8004e68:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6c:	f7ff ff8e 	bl	8004d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e70:	4b05      	ldr	r3, [pc, #20]	@ (8004e88 <SysTick_Config+0x40>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e76:	4b04      	ldr	r3, [pc, #16]	@ (8004e88 <SysTick_Config+0x40>)
 8004e78:	2207      	movs	r2, #7
 8004e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	e000e010 	.word	0xe000e010

08004e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff ff29 	bl	8004cec <__NVIC_SetPriorityGrouping>
}
 8004e9a:	bf00      	nop
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b086      	sub	sp, #24
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	607a      	str	r2, [r7, #4]
 8004eae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004eb0:	f7ff ff40 	bl	8004d34 <__NVIC_GetPriorityGrouping>
 8004eb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	68b9      	ldr	r1, [r7, #8]
 8004eba:	6978      	ldr	r0, [r7, #20]
 8004ebc:	f7ff ff90 	bl	8004de0 <NVIC_EncodePriority>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff ff5f 	bl	8004d8c <__NVIC_SetPriority>
}
 8004ece:	bf00      	nop
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b082      	sub	sp, #8
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	4603      	mov	r3, r0
 8004ede:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ee0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff ff33 	bl	8004d50 <__NVIC_EnableIRQ>
}
 8004eea:	bf00      	nop
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b082      	sub	sp, #8
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7ff ffa4 	bl	8004e48 <SysTick_Config>
 8004f00:	4603      	mov	r3, r0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004f14:	f7fd fdfc 	bl	8002b10 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e312      	b.n	800554a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a66      	ldr	r2, [pc, #408]	@ (80050c4 <HAL_DMA_Init+0x1b8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d04a      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a65      	ldr	r2, [pc, #404]	@ (80050c8 <HAL_DMA_Init+0x1bc>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d045      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a63      	ldr	r2, [pc, #396]	@ (80050cc <HAL_DMA_Init+0x1c0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d040      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a62      	ldr	r2, [pc, #392]	@ (80050d0 <HAL_DMA_Init+0x1c4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d03b      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a60      	ldr	r2, [pc, #384]	@ (80050d4 <HAL_DMA_Init+0x1c8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d036      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a5f      	ldr	r2, [pc, #380]	@ (80050d8 <HAL_DMA_Init+0x1cc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d031      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a5d      	ldr	r2, [pc, #372]	@ (80050dc <HAL_DMA_Init+0x1d0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d02c      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a5c      	ldr	r2, [pc, #368]	@ (80050e0 <HAL_DMA_Init+0x1d4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d027      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a5a      	ldr	r2, [pc, #360]	@ (80050e4 <HAL_DMA_Init+0x1d8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d022      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a59      	ldr	r2, [pc, #356]	@ (80050e8 <HAL_DMA_Init+0x1dc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d01d      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a57      	ldr	r2, [pc, #348]	@ (80050ec <HAL_DMA_Init+0x1e0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d018      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a56      	ldr	r2, [pc, #344]	@ (80050f0 <HAL_DMA_Init+0x1e4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d013      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a54      	ldr	r2, [pc, #336]	@ (80050f4 <HAL_DMA_Init+0x1e8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00e      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a53      	ldr	r2, [pc, #332]	@ (80050f8 <HAL_DMA_Init+0x1ec>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d009      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a51      	ldr	r2, [pc, #324]	@ (80050fc <HAL_DMA_Init+0x1f0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d004      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a50      	ldr	r2, [pc, #320]	@ (8005100 <HAL_DMA_Init+0x1f4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d101      	bne.n	8004fc8 <HAL_DMA_Init+0xbc>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e000      	b.n	8004fca <HAL_DMA_Init+0xbe>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 813c 	beq.w	8005248 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a37      	ldr	r2, [pc, #220]	@ (80050c4 <HAL_DMA_Init+0x1b8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d04a      	beq.n	8005080 <HAL_DMA_Init+0x174>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a36      	ldr	r2, [pc, #216]	@ (80050c8 <HAL_DMA_Init+0x1bc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d045      	beq.n	8005080 <HAL_DMA_Init+0x174>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a34      	ldr	r2, [pc, #208]	@ (80050cc <HAL_DMA_Init+0x1c0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d040      	beq.n	8005080 <HAL_DMA_Init+0x174>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a33      	ldr	r2, [pc, #204]	@ (80050d0 <HAL_DMA_Init+0x1c4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d03b      	beq.n	8005080 <HAL_DMA_Init+0x174>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a31      	ldr	r2, [pc, #196]	@ (80050d4 <HAL_DMA_Init+0x1c8>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d036      	beq.n	8005080 <HAL_DMA_Init+0x174>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a30      	ldr	r2, [pc, #192]	@ (80050d8 <HAL_DMA_Init+0x1cc>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d031      	beq.n	8005080 <HAL_DMA_Init+0x174>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a2e      	ldr	r2, [pc, #184]	@ (80050dc <HAL_DMA_Init+0x1d0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d02c      	beq.n	8005080 <HAL_DMA_Init+0x174>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a2d      	ldr	r2, [pc, #180]	@ (80050e0 <HAL_DMA_Init+0x1d4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d027      	beq.n	8005080 <HAL_DMA_Init+0x174>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a2b      	ldr	r2, [pc, #172]	@ (80050e4 <HAL_DMA_Init+0x1d8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d022      	beq.n	8005080 <HAL_DMA_Init+0x174>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a2a      	ldr	r2, [pc, #168]	@ (80050e8 <HAL_DMA_Init+0x1dc>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d01d      	beq.n	8005080 <HAL_DMA_Init+0x174>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a28      	ldr	r2, [pc, #160]	@ (80050ec <HAL_DMA_Init+0x1e0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d018      	beq.n	8005080 <HAL_DMA_Init+0x174>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a27      	ldr	r2, [pc, #156]	@ (80050f0 <HAL_DMA_Init+0x1e4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d013      	beq.n	8005080 <HAL_DMA_Init+0x174>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a25      	ldr	r2, [pc, #148]	@ (80050f4 <HAL_DMA_Init+0x1e8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00e      	beq.n	8005080 <HAL_DMA_Init+0x174>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a24      	ldr	r2, [pc, #144]	@ (80050f8 <HAL_DMA_Init+0x1ec>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d009      	beq.n	8005080 <HAL_DMA_Init+0x174>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a22      	ldr	r2, [pc, #136]	@ (80050fc <HAL_DMA_Init+0x1f0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d004      	beq.n	8005080 <HAL_DMA_Init+0x174>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a21      	ldr	r2, [pc, #132]	@ (8005100 <HAL_DMA_Init+0x1f4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d108      	bne.n	8005092 <HAL_DMA_Init+0x186>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0201 	bic.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	e007      	b.n	80050a2 <HAL_DMA_Init+0x196>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 0201 	bic.w	r2, r2, #1
 80050a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80050a2:	e02f      	b.n	8005104 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050a4:	f7fd fd34 	bl	8002b10 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b05      	cmp	r3, #5
 80050b0:	d928      	bls.n	8005104 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2220      	movs	r2, #32
 80050b6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2203      	movs	r2, #3
 80050bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e242      	b.n	800554a <HAL_DMA_Init+0x63e>
 80050c4:	40020010 	.word	0x40020010
 80050c8:	40020028 	.word	0x40020028
 80050cc:	40020040 	.word	0x40020040
 80050d0:	40020058 	.word	0x40020058
 80050d4:	40020070 	.word	0x40020070
 80050d8:	40020088 	.word	0x40020088
 80050dc:	400200a0 	.word	0x400200a0
 80050e0:	400200b8 	.word	0x400200b8
 80050e4:	40020410 	.word	0x40020410
 80050e8:	40020428 	.word	0x40020428
 80050ec:	40020440 	.word	0x40020440
 80050f0:	40020458 	.word	0x40020458
 80050f4:	40020470 	.word	0x40020470
 80050f8:	40020488 	.word	0x40020488
 80050fc:	400204a0 	.word	0x400204a0
 8005100:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1c8      	bne.n	80050a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4b83      	ldr	r3, [pc, #524]	@ (800532c <HAL_DMA_Init+0x420>)
 800511e:	4013      	ands	r3, r2
 8005120:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800512a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005136:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005142:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005154:	2b04      	cmp	r3, #4
 8005156:	d107      	bne.n	8005168 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005160:	4313      	orrs	r3, r2
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	4313      	orrs	r3, r2
 8005166:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2b28      	cmp	r3, #40	@ 0x28
 800516e:	d903      	bls.n	8005178 <HAL_DMA_Init+0x26c>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	2b2e      	cmp	r3, #46	@ 0x2e
 8005176:	d91f      	bls.n	80051b8 <HAL_DMA_Init+0x2ac>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2b3e      	cmp	r3, #62	@ 0x3e
 800517e:	d903      	bls.n	8005188 <HAL_DMA_Init+0x27c>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b42      	cmp	r3, #66	@ 0x42
 8005186:	d917      	bls.n	80051b8 <HAL_DMA_Init+0x2ac>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	2b46      	cmp	r3, #70	@ 0x46
 800518e:	d903      	bls.n	8005198 <HAL_DMA_Init+0x28c>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2b48      	cmp	r3, #72	@ 0x48
 8005196:	d90f      	bls.n	80051b8 <HAL_DMA_Init+0x2ac>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	2b4e      	cmp	r3, #78	@ 0x4e
 800519e:	d903      	bls.n	80051a8 <HAL_DMA_Init+0x29c>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2b52      	cmp	r3, #82	@ 0x52
 80051a6:	d907      	bls.n	80051b8 <HAL_DMA_Init+0x2ac>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	2b73      	cmp	r3, #115	@ 0x73
 80051ae:	d905      	bls.n	80051bc <HAL_DMA_Init+0x2b0>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b77      	cmp	r3, #119	@ 0x77
 80051b6:	d801      	bhi.n	80051bc <HAL_DMA_Init+0x2b0>
 80051b8:	2301      	movs	r3, #1
 80051ba:	e000      	b.n	80051be <HAL_DMA_Init+0x2b2>
 80051bc:	2300      	movs	r3, #0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051c8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f023 0307 	bic.w	r3, r3, #7
 80051e0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d117      	bne.n	8005224 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00e      	beq.n	8005224 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f002 fb2e 	bl	8007868 <DMA_CheckFifoParam>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d008      	beq.n	8005224 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2240      	movs	r2, #64	@ 0x40
 8005216:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e192      	b.n	800554a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f002 fa69 	bl	8007704 <DMA_CalcBaseAndBitshift>
 8005232:	4603      	mov	r3, r0
 8005234:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800523a:	f003 031f 	and.w	r3, r3, #31
 800523e:	223f      	movs	r2, #63	@ 0x3f
 8005240:	409a      	lsls	r2, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	609a      	str	r2, [r3, #8]
 8005246:	e0c8      	b.n	80053da <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a38      	ldr	r2, [pc, #224]	@ (8005330 <HAL_DMA_Init+0x424>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d022      	beq.n	8005298 <HAL_DMA_Init+0x38c>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a37      	ldr	r2, [pc, #220]	@ (8005334 <HAL_DMA_Init+0x428>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d01d      	beq.n	8005298 <HAL_DMA_Init+0x38c>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a35      	ldr	r2, [pc, #212]	@ (8005338 <HAL_DMA_Init+0x42c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d018      	beq.n	8005298 <HAL_DMA_Init+0x38c>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a34      	ldr	r2, [pc, #208]	@ (800533c <HAL_DMA_Init+0x430>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d013      	beq.n	8005298 <HAL_DMA_Init+0x38c>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a32      	ldr	r2, [pc, #200]	@ (8005340 <HAL_DMA_Init+0x434>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00e      	beq.n	8005298 <HAL_DMA_Init+0x38c>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a31      	ldr	r2, [pc, #196]	@ (8005344 <HAL_DMA_Init+0x438>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d009      	beq.n	8005298 <HAL_DMA_Init+0x38c>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a2f      	ldr	r2, [pc, #188]	@ (8005348 <HAL_DMA_Init+0x43c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d004      	beq.n	8005298 <HAL_DMA_Init+0x38c>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a2e      	ldr	r2, [pc, #184]	@ (800534c <HAL_DMA_Init+0x440>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d101      	bne.n	800529c <HAL_DMA_Init+0x390>
 8005298:	2301      	movs	r3, #1
 800529a:	e000      	b.n	800529e <HAL_DMA_Init+0x392>
 800529c:	2300      	movs	r3, #0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 8092 	beq.w	80053c8 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a21      	ldr	r2, [pc, #132]	@ (8005330 <HAL_DMA_Init+0x424>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d021      	beq.n	80052f2 <HAL_DMA_Init+0x3e6>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a20      	ldr	r2, [pc, #128]	@ (8005334 <HAL_DMA_Init+0x428>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d01c      	beq.n	80052f2 <HAL_DMA_Init+0x3e6>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a1e      	ldr	r2, [pc, #120]	@ (8005338 <HAL_DMA_Init+0x42c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d017      	beq.n	80052f2 <HAL_DMA_Init+0x3e6>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a1d      	ldr	r2, [pc, #116]	@ (800533c <HAL_DMA_Init+0x430>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d012      	beq.n	80052f2 <HAL_DMA_Init+0x3e6>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005340 <HAL_DMA_Init+0x434>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00d      	beq.n	80052f2 <HAL_DMA_Init+0x3e6>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a1a      	ldr	r2, [pc, #104]	@ (8005344 <HAL_DMA_Init+0x438>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d008      	beq.n	80052f2 <HAL_DMA_Init+0x3e6>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a18      	ldr	r2, [pc, #96]	@ (8005348 <HAL_DMA_Init+0x43c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d003      	beq.n	80052f2 <HAL_DMA_Init+0x3e6>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a17      	ldr	r2, [pc, #92]	@ (800534c <HAL_DMA_Init+0x440>)
 80052f0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2202      	movs	r2, #2
 80052f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4b10      	ldr	r3, [pc, #64]	@ (8005350 <HAL_DMA_Init+0x444>)
 800530e:	4013      	ands	r3, r2
 8005310:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	2b40      	cmp	r3, #64	@ 0x40
 8005318:	d01c      	beq.n	8005354 <HAL_DMA_Init+0x448>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	2b80      	cmp	r3, #128	@ 0x80
 8005320:	d102      	bne.n	8005328 <HAL_DMA_Init+0x41c>
 8005322:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005326:	e016      	b.n	8005356 <HAL_DMA_Init+0x44a>
 8005328:	2300      	movs	r3, #0
 800532a:	e014      	b.n	8005356 <HAL_DMA_Init+0x44a>
 800532c:	fe10803f 	.word	0xfe10803f
 8005330:	58025408 	.word	0x58025408
 8005334:	5802541c 	.word	0x5802541c
 8005338:	58025430 	.word	0x58025430
 800533c:	58025444 	.word	0x58025444
 8005340:	58025458 	.word	0x58025458
 8005344:	5802546c 	.word	0x5802546c
 8005348:	58025480 	.word	0x58025480
 800534c:	58025494 	.word	0x58025494
 8005350:	fffe000f 	.word	0xfffe000f
 8005354:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	68d2      	ldr	r2, [r2, #12]
 800535a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800535c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005364:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800536c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005374:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800537c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005384:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	461a      	mov	r2, r3
 800539a:	4b6e      	ldr	r3, [pc, #440]	@ (8005554 <HAL_DMA_Init+0x648>)
 800539c:	4413      	add	r3, r2
 800539e:	4a6e      	ldr	r2, [pc, #440]	@ (8005558 <HAL_DMA_Init+0x64c>)
 80053a0:	fba2 2303 	umull	r2, r3, r2, r3
 80053a4:	091b      	lsrs	r3, r3, #4
 80053a6:	009a      	lsls	r2, r3, #2
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f002 f9a9 	bl	8007704 <DMA_CalcBaseAndBitshift>
 80053b2:	4603      	mov	r3, r0
 80053b4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ba:	f003 031f 	and.w	r3, r3, #31
 80053be:	2201      	movs	r2, #1
 80053c0:	409a      	lsls	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	605a      	str	r2, [r3, #4]
 80053c6:	e008      	b.n	80053da <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2240      	movs	r2, #64	@ 0x40
 80053cc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2203      	movs	r2, #3
 80053d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e0b7      	b.n	800554a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a5f      	ldr	r2, [pc, #380]	@ (800555c <HAL_DMA_Init+0x650>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d072      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a5d      	ldr	r2, [pc, #372]	@ (8005560 <HAL_DMA_Init+0x654>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d06d      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a5c      	ldr	r2, [pc, #368]	@ (8005564 <HAL_DMA_Init+0x658>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d068      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a5a      	ldr	r2, [pc, #360]	@ (8005568 <HAL_DMA_Init+0x65c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d063      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a59      	ldr	r2, [pc, #356]	@ (800556c <HAL_DMA_Init+0x660>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d05e      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a57      	ldr	r2, [pc, #348]	@ (8005570 <HAL_DMA_Init+0x664>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d059      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a56      	ldr	r2, [pc, #344]	@ (8005574 <HAL_DMA_Init+0x668>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d054      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a54      	ldr	r2, [pc, #336]	@ (8005578 <HAL_DMA_Init+0x66c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d04f      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a53      	ldr	r2, [pc, #332]	@ (800557c <HAL_DMA_Init+0x670>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d04a      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a51      	ldr	r2, [pc, #324]	@ (8005580 <HAL_DMA_Init+0x674>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d045      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a50      	ldr	r2, [pc, #320]	@ (8005584 <HAL_DMA_Init+0x678>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d040      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a4e      	ldr	r2, [pc, #312]	@ (8005588 <HAL_DMA_Init+0x67c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d03b      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a4d      	ldr	r2, [pc, #308]	@ (800558c <HAL_DMA_Init+0x680>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d036      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a4b      	ldr	r2, [pc, #300]	@ (8005590 <HAL_DMA_Init+0x684>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d031      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a4a      	ldr	r2, [pc, #296]	@ (8005594 <HAL_DMA_Init+0x688>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d02c      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a48      	ldr	r2, [pc, #288]	@ (8005598 <HAL_DMA_Init+0x68c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d027      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a47      	ldr	r2, [pc, #284]	@ (800559c <HAL_DMA_Init+0x690>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d022      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a45      	ldr	r2, [pc, #276]	@ (80055a0 <HAL_DMA_Init+0x694>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d01d      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a44      	ldr	r2, [pc, #272]	@ (80055a4 <HAL_DMA_Init+0x698>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d018      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a42      	ldr	r2, [pc, #264]	@ (80055a8 <HAL_DMA_Init+0x69c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d013      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a41      	ldr	r2, [pc, #260]	@ (80055ac <HAL_DMA_Init+0x6a0>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00e      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a3f      	ldr	r2, [pc, #252]	@ (80055b0 <HAL_DMA_Init+0x6a4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d009      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a3e      	ldr	r2, [pc, #248]	@ (80055b4 <HAL_DMA_Init+0x6a8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d004      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a3c      	ldr	r2, [pc, #240]	@ (80055b8 <HAL_DMA_Init+0x6ac>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d101      	bne.n	80054ce <HAL_DMA_Init+0x5c2>
 80054ca:	2301      	movs	r3, #1
 80054cc:	e000      	b.n	80054d0 <HAL_DMA_Init+0x5c4>
 80054ce:	2300      	movs	r3, #0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d032      	beq.n	800553a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f002 fa43 	bl	8007960 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	2b80      	cmp	r3, #128	@ 0x80
 80054e0:	d102      	bne.n	80054e8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80054fc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d010      	beq.n	8005528 <HAL_DMA_Init+0x61c>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b08      	cmp	r3, #8
 800550c:	d80c      	bhi.n	8005528 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f002 fac0 	bl	8007a94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005524:	605a      	str	r2, [r3, #4]
 8005526:	e008      	b.n	800553a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3718      	adds	r7, #24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	a7fdabf8 	.word	0xa7fdabf8
 8005558:	cccccccd 	.word	0xcccccccd
 800555c:	40020010 	.word	0x40020010
 8005560:	40020028 	.word	0x40020028
 8005564:	40020040 	.word	0x40020040
 8005568:	40020058 	.word	0x40020058
 800556c:	40020070 	.word	0x40020070
 8005570:	40020088 	.word	0x40020088
 8005574:	400200a0 	.word	0x400200a0
 8005578:	400200b8 	.word	0x400200b8
 800557c:	40020410 	.word	0x40020410
 8005580:	40020428 	.word	0x40020428
 8005584:	40020440 	.word	0x40020440
 8005588:	40020458 	.word	0x40020458
 800558c:	40020470 	.word	0x40020470
 8005590:	40020488 	.word	0x40020488
 8005594:	400204a0 	.word	0x400204a0
 8005598:	400204b8 	.word	0x400204b8
 800559c:	58025408 	.word	0x58025408
 80055a0:	5802541c 	.word	0x5802541c
 80055a4:	58025430 	.word	0x58025430
 80055a8:	58025444 	.word	0x58025444
 80055ac:	58025458 	.word	0x58025458
 80055b0:	5802546c 	.word	0x5802546c
 80055b4:	58025480 	.word	0x58025480
 80055b8:	58025494 	.word	0x58025494

080055bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ca:	2300      	movs	r3, #0
 80055cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e226      	b.n	8005a26 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d101      	bne.n	80055e6 <HAL_DMA_Start_IT+0x2a>
 80055e2:	2302      	movs	r3, #2
 80055e4:	e21f      	b.n	8005a26 <HAL_DMA_Start_IT+0x46a>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	f040 820a 	bne.w	8005a10 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a68      	ldr	r2, [pc, #416]	@ (80057b0 <HAL_DMA_Start_IT+0x1f4>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d04a      	beq.n	80056aa <HAL_DMA_Start_IT+0xee>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a66      	ldr	r2, [pc, #408]	@ (80057b4 <HAL_DMA_Start_IT+0x1f8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d045      	beq.n	80056aa <HAL_DMA_Start_IT+0xee>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a65      	ldr	r2, [pc, #404]	@ (80057b8 <HAL_DMA_Start_IT+0x1fc>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d040      	beq.n	80056aa <HAL_DMA_Start_IT+0xee>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a63      	ldr	r2, [pc, #396]	@ (80057bc <HAL_DMA_Start_IT+0x200>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d03b      	beq.n	80056aa <HAL_DMA_Start_IT+0xee>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a62      	ldr	r2, [pc, #392]	@ (80057c0 <HAL_DMA_Start_IT+0x204>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d036      	beq.n	80056aa <HAL_DMA_Start_IT+0xee>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a60      	ldr	r2, [pc, #384]	@ (80057c4 <HAL_DMA_Start_IT+0x208>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d031      	beq.n	80056aa <HAL_DMA_Start_IT+0xee>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a5f      	ldr	r2, [pc, #380]	@ (80057c8 <HAL_DMA_Start_IT+0x20c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d02c      	beq.n	80056aa <HAL_DMA_Start_IT+0xee>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a5d      	ldr	r2, [pc, #372]	@ (80057cc <HAL_DMA_Start_IT+0x210>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d027      	beq.n	80056aa <HAL_DMA_Start_IT+0xee>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a5c      	ldr	r2, [pc, #368]	@ (80057d0 <HAL_DMA_Start_IT+0x214>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d022      	beq.n	80056aa <HAL_DMA_Start_IT+0xee>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a5a      	ldr	r2, [pc, #360]	@ (80057d4 <HAL_DMA_Start_IT+0x218>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d01d      	beq.n	80056aa <HAL_DMA_Start_IT+0xee>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a59      	ldr	r2, [pc, #356]	@ (80057d8 <HAL_DMA_Start_IT+0x21c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d018      	beq.n	80056aa <HAL_DMA_Start_IT+0xee>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a57      	ldr	r2, [pc, #348]	@ (80057dc <HAL_DMA_Start_IT+0x220>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d013      	beq.n	80056aa <HAL_DMA_Start_IT+0xee>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a56      	ldr	r2, [pc, #344]	@ (80057e0 <HAL_DMA_Start_IT+0x224>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00e      	beq.n	80056aa <HAL_DMA_Start_IT+0xee>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a54      	ldr	r2, [pc, #336]	@ (80057e4 <HAL_DMA_Start_IT+0x228>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d009      	beq.n	80056aa <HAL_DMA_Start_IT+0xee>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a53      	ldr	r2, [pc, #332]	@ (80057e8 <HAL_DMA_Start_IT+0x22c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d004      	beq.n	80056aa <HAL_DMA_Start_IT+0xee>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a51      	ldr	r2, [pc, #324]	@ (80057ec <HAL_DMA_Start_IT+0x230>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d108      	bne.n	80056bc <HAL_DMA_Start_IT+0x100>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0201 	bic.w	r2, r2, #1
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	e007      	b.n	80056cc <HAL_DMA_Start_IT+0x110>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0201 	bic.w	r2, r2, #1
 80056ca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f001 fe6a 	bl	80073ac <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a34      	ldr	r2, [pc, #208]	@ (80057b0 <HAL_DMA_Start_IT+0x1f4>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d04a      	beq.n	8005778 <HAL_DMA_Start_IT+0x1bc>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a33      	ldr	r2, [pc, #204]	@ (80057b4 <HAL_DMA_Start_IT+0x1f8>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d045      	beq.n	8005778 <HAL_DMA_Start_IT+0x1bc>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a31      	ldr	r2, [pc, #196]	@ (80057b8 <HAL_DMA_Start_IT+0x1fc>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d040      	beq.n	8005778 <HAL_DMA_Start_IT+0x1bc>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a30      	ldr	r2, [pc, #192]	@ (80057bc <HAL_DMA_Start_IT+0x200>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d03b      	beq.n	8005778 <HAL_DMA_Start_IT+0x1bc>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a2e      	ldr	r2, [pc, #184]	@ (80057c0 <HAL_DMA_Start_IT+0x204>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d036      	beq.n	8005778 <HAL_DMA_Start_IT+0x1bc>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a2d      	ldr	r2, [pc, #180]	@ (80057c4 <HAL_DMA_Start_IT+0x208>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d031      	beq.n	8005778 <HAL_DMA_Start_IT+0x1bc>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a2b      	ldr	r2, [pc, #172]	@ (80057c8 <HAL_DMA_Start_IT+0x20c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d02c      	beq.n	8005778 <HAL_DMA_Start_IT+0x1bc>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a2a      	ldr	r2, [pc, #168]	@ (80057cc <HAL_DMA_Start_IT+0x210>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d027      	beq.n	8005778 <HAL_DMA_Start_IT+0x1bc>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a28      	ldr	r2, [pc, #160]	@ (80057d0 <HAL_DMA_Start_IT+0x214>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d022      	beq.n	8005778 <HAL_DMA_Start_IT+0x1bc>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a27      	ldr	r2, [pc, #156]	@ (80057d4 <HAL_DMA_Start_IT+0x218>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d01d      	beq.n	8005778 <HAL_DMA_Start_IT+0x1bc>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a25      	ldr	r2, [pc, #148]	@ (80057d8 <HAL_DMA_Start_IT+0x21c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d018      	beq.n	8005778 <HAL_DMA_Start_IT+0x1bc>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a24      	ldr	r2, [pc, #144]	@ (80057dc <HAL_DMA_Start_IT+0x220>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d013      	beq.n	8005778 <HAL_DMA_Start_IT+0x1bc>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a22      	ldr	r2, [pc, #136]	@ (80057e0 <HAL_DMA_Start_IT+0x224>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00e      	beq.n	8005778 <HAL_DMA_Start_IT+0x1bc>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a21      	ldr	r2, [pc, #132]	@ (80057e4 <HAL_DMA_Start_IT+0x228>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d009      	beq.n	8005778 <HAL_DMA_Start_IT+0x1bc>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a1f      	ldr	r2, [pc, #124]	@ (80057e8 <HAL_DMA_Start_IT+0x22c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d004      	beq.n	8005778 <HAL_DMA_Start_IT+0x1bc>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a1e      	ldr	r2, [pc, #120]	@ (80057ec <HAL_DMA_Start_IT+0x230>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d101      	bne.n	800577c <HAL_DMA_Start_IT+0x1c0>
 8005778:	2301      	movs	r3, #1
 800577a:	e000      	b.n	800577e <HAL_DMA_Start_IT+0x1c2>
 800577c:	2300      	movs	r3, #0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d036      	beq.n	80057f0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f023 021e 	bic.w	r2, r3, #30
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0216 	orr.w	r2, r2, #22
 8005794:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579a:	2b00      	cmp	r3, #0
 800579c:	d03e      	beq.n	800581c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f042 0208 	orr.w	r2, r2, #8
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	e035      	b.n	800581c <HAL_DMA_Start_IT+0x260>
 80057b0:	40020010 	.word	0x40020010
 80057b4:	40020028 	.word	0x40020028
 80057b8:	40020040 	.word	0x40020040
 80057bc:	40020058 	.word	0x40020058
 80057c0:	40020070 	.word	0x40020070
 80057c4:	40020088 	.word	0x40020088
 80057c8:	400200a0 	.word	0x400200a0
 80057cc:	400200b8 	.word	0x400200b8
 80057d0:	40020410 	.word	0x40020410
 80057d4:	40020428 	.word	0x40020428
 80057d8:	40020440 	.word	0x40020440
 80057dc:	40020458 	.word	0x40020458
 80057e0:	40020470 	.word	0x40020470
 80057e4:	40020488 	.word	0x40020488
 80057e8:	400204a0 	.word	0x400204a0
 80057ec:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f023 020e 	bic.w	r2, r3, #14
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 020a 	orr.w	r2, r2, #10
 8005802:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005808:	2b00      	cmp	r3, #0
 800580a:	d007      	beq.n	800581c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0204 	orr.w	r2, r2, #4
 800581a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a83      	ldr	r2, [pc, #524]	@ (8005a30 <HAL_DMA_Start_IT+0x474>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d072      	beq.n	800590c <HAL_DMA_Start_IT+0x350>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a82      	ldr	r2, [pc, #520]	@ (8005a34 <HAL_DMA_Start_IT+0x478>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d06d      	beq.n	800590c <HAL_DMA_Start_IT+0x350>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a80      	ldr	r2, [pc, #512]	@ (8005a38 <HAL_DMA_Start_IT+0x47c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d068      	beq.n	800590c <HAL_DMA_Start_IT+0x350>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a7f      	ldr	r2, [pc, #508]	@ (8005a3c <HAL_DMA_Start_IT+0x480>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d063      	beq.n	800590c <HAL_DMA_Start_IT+0x350>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a7d      	ldr	r2, [pc, #500]	@ (8005a40 <HAL_DMA_Start_IT+0x484>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d05e      	beq.n	800590c <HAL_DMA_Start_IT+0x350>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a7c      	ldr	r2, [pc, #496]	@ (8005a44 <HAL_DMA_Start_IT+0x488>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d059      	beq.n	800590c <HAL_DMA_Start_IT+0x350>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a7a      	ldr	r2, [pc, #488]	@ (8005a48 <HAL_DMA_Start_IT+0x48c>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d054      	beq.n	800590c <HAL_DMA_Start_IT+0x350>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a79      	ldr	r2, [pc, #484]	@ (8005a4c <HAL_DMA_Start_IT+0x490>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d04f      	beq.n	800590c <HAL_DMA_Start_IT+0x350>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a77      	ldr	r2, [pc, #476]	@ (8005a50 <HAL_DMA_Start_IT+0x494>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d04a      	beq.n	800590c <HAL_DMA_Start_IT+0x350>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a76      	ldr	r2, [pc, #472]	@ (8005a54 <HAL_DMA_Start_IT+0x498>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d045      	beq.n	800590c <HAL_DMA_Start_IT+0x350>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a74      	ldr	r2, [pc, #464]	@ (8005a58 <HAL_DMA_Start_IT+0x49c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d040      	beq.n	800590c <HAL_DMA_Start_IT+0x350>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a73      	ldr	r2, [pc, #460]	@ (8005a5c <HAL_DMA_Start_IT+0x4a0>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d03b      	beq.n	800590c <HAL_DMA_Start_IT+0x350>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a71      	ldr	r2, [pc, #452]	@ (8005a60 <HAL_DMA_Start_IT+0x4a4>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d036      	beq.n	800590c <HAL_DMA_Start_IT+0x350>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a70      	ldr	r2, [pc, #448]	@ (8005a64 <HAL_DMA_Start_IT+0x4a8>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d031      	beq.n	800590c <HAL_DMA_Start_IT+0x350>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a6e      	ldr	r2, [pc, #440]	@ (8005a68 <HAL_DMA_Start_IT+0x4ac>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d02c      	beq.n	800590c <HAL_DMA_Start_IT+0x350>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a6d      	ldr	r2, [pc, #436]	@ (8005a6c <HAL_DMA_Start_IT+0x4b0>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d027      	beq.n	800590c <HAL_DMA_Start_IT+0x350>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a6b      	ldr	r2, [pc, #428]	@ (8005a70 <HAL_DMA_Start_IT+0x4b4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d022      	beq.n	800590c <HAL_DMA_Start_IT+0x350>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a6a      	ldr	r2, [pc, #424]	@ (8005a74 <HAL_DMA_Start_IT+0x4b8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d01d      	beq.n	800590c <HAL_DMA_Start_IT+0x350>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a68      	ldr	r2, [pc, #416]	@ (8005a78 <HAL_DMA_Start_IT+0x4bc>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d018      	beq.n	800590c <HAL_DMA_Start_IT+0x350>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a67      	ldr	r2, [pc, #412]	@ (8005a7c <HAL_DMA_Start_IT+0x4c0>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d013      	beq.n	800590c <HAL_DMA_Start_IT+0x350>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a65      	ldr	r2, [pc, #404]	@ (8005a80 <HAL_DMA_Start_IT+0x4c4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00e      	beq.n	800590c <HAL_DMA_Start_IT+0x350>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a64      	ldr	r2, [pc, #400]	@ (8005a84 <HAL_DMA_Start_IT+0x4c8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d009      	beq.n	800590c <HAL_DMA_Start_IT+0x350>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a62      	ldr	r2, [pc, #392]	@ (8005a88 <HAL_DMA_Start_IT+0x4cc>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d004      	beq.n	800590c <HAL_DMA_Start_IT+0x350>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a61      	ldr	r2, [pc, #388]	@ (8005a8c <HAL_DMA_Start_IT+0x4d0>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d101      	bne.n	8005910 <HAL_DMA_Start_IT+0x354>
 800590c:	2301      	movs	r3, #1
 800590e:	e000      	b.n	8005912 <HAL_DMA_Start_IT+0x356>
 8005910:	2300      	movs	r3, #0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d01a      	beq.n	800594c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d007      	beq.n	8005934 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800592e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005932:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005938:	2b00      	cmp	r3, #0
 800593a:	d007      	beq.n	800594c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005946:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800594a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a37      	ldr	r2, [pc, #220]	@ (8005a30 <HAL_DMA_Start_IT+0x474>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d04a      	beq.n	80059ec <HAL_DMA_Start_IT+0x430>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a36      	ldr	r2, [pc, #216]	@ (8005a34 <HAL_DMA_Start_IT+0x478>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d045      	beq.n	80059ec <HAL_DMA_Start_IT+0x430>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a34      	ldr	r2, [pc, #208]	@ (8005a38 <HAL_DMA_Start_IT+0x47c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d040      	beq.n	80059ec <HAL_DMA_Start_IT+0x430>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a33      	ldr	r2, [pc, #204]	@ (8005a3c <HAL_DMA_Start_IT+0x480>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d03b      	beq.n	80059ec <HAL_DMA_Start_IT+0x430>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a31      	ldr	r2, [pc, #196]	@ (8005a40 <HAL_DMA_Start_IT+0x484>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d036      	beq.n	80059ec <HAL_DMA_Start_IT+0x430>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a30      	ldr	r2, [pc, #192]	@ (8005a44 <HAL_DMA_Start_IT+0x488>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d031      	beq.n	80059ec <HAL_DMA_Start_IT+0x430>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a2e      	ldr	r2, [pc, #184]	@ (8005a48 <HAL_DMA_Start_IT+0x48c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d02c      	beq.n	80059ec <HAL_DMA_Start_IT+0x430>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a2d      	ldr	r2, [pc, #180]	@ (8005a4c <HAL_DMA_Start_IT+0x490>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d027      	beq.n	80059ec <HAL_DMA_Start_IT+0x430>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a2b      	ldr	r2, [pc, #172]	@ (8005a50 <HAL_DMA_Start_IT+0x494>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d022      	beq.n	80059ec <HAL_DMA_Start_IT+0x430>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a2a      	ldr	r2, [pc, #168]	@ (8005a54 <HAL_DMA_Start_IT+0x498>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d01d      	beq.n	80059ec <HAL_DMA_Start_IT+0x430>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a28      	ldr	r2, [pc, #160]	@ (8005a58 <HAL_DMA_Start_IT+0x49c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d018      	beq.n	80059ec <HAL_DMA_Start_IT+0x430>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a27      	ldr	r2, [pc, #156]	@ (8005a5c <HAL_DMA_Start_IT+0x4a0>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d013      	beq.n	80059ec <HAL_DMA_Start_IT+0x430>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a25      	ldr	r2, [pc, #148]	@ (8005a60 <HAL_DMA_Start_IT+0x4a4>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00e      	beq.n	80059ec <HAL_DMA_Start_IT+0x430>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a24      	ldr	r2, [pc, #144]	@ (8005a64 <HAL_DMA_Start_IT+0x4a8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d009      	beq.n	80059ec <HAL_DMA_Start_IT+0x430>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a22      	ldr	r2, [pc, #136]	@ (8005a68 <HAL_DMA_Start_IT+0x4ac>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d004      	beq.n	80059ec <HAL_DMA_Start_IT+0x430>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a21      	ldr	r2, [pc, #132]	@ (8005a6c <HAL_DMA_Start_IT+0x4b0>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d108      	bne.n	80059fe <HAL_DMA_Start_IT+0x442>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0201 	orr.w	r2, r2, #1
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	e012      	b.n	8005a24 <HAL_DMA_Start_IT+0x468>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f042 0201 	orr.w	r2, r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	e009      	b.n	8005a24 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a16:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	40020010 	.word	0x40020010
 8005a34:	40020028 	.word	0x40020028
 8005a38:	40020040 	.word	0x40020040
 8005a3c:	40020058 	.word	0x40020058
 8005a40:	40020070 	.word	0x40020070
 8005a44:	40020088 	.word	0x40020088
 8005a48:	400200a0 	.word	0x400200a0
 8005a4c:	400200b8 	.word	0x400200b8
 8005a50:	40020410 	.word	0x40020410
 8005a54:	40020428 	.word	0x40020428
 8005a58:	40020440 	.word	0x40020440
 8005a5c:	40020458 	.word	0x40020458
 8005a60:	40020470 	.word	0x40020470
 8005a64:	40020488 	.word	0x40020488
 8005a68:	400204a0 	.word	0x400204a0
 8005a6c:	400204b8 	.word	0x400204b8
 8005a70:	58025408 	.word	0x58025408
 8005a74:	5802541c 	.word	0x5802541c
 8005a78:	58025430 	.word	0x58025430
 8005a7c:	58025444 	.word	0x58025444
 8005a80:	58025458 	.word	0x58025458
 8005a84:	5802546c 	.word	0x5802546c
 8005a88:	58025480 	.word	0x58025480
 8005a8c:	58025494 	.word	0x58025494

08005a90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005a98:	f7fd f83a 	bl	8002b10 <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e2dc      	b.n	8006062 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d008      	beq.n	8005ac6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2280      	movs	r2, #128	@ 0x80
 8005ab8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e2cd      	b.n	8006062 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a76      	ldr	r2, [pc, #472]	@ (8005ca4 <HAL_DMA_Abort+0x214>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d04a      	beq.n	8005b66 <HAL_DMA_Abort+0xd6>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a74      	ldr	r2, [pc, #464]	@ (8005ca8 <HAL_DMA_Abort+0x218>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d045      	beq.n	8005b66 <HAL_DMA_Abort+0xd6>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a73      	ldr	r2, [pc, #460]	@ (8005cac <HAL_DMA_Abort+0x21c>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d040      	beq.n	8005b66 <HAL_DMA_Abort+0xd6>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a71      	ldr	r2, [pc, #452]	@ (8005cb0 <HAL_DMA_Abort+0x220>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d03b      	beq.n	8005b66 <HAL_DMA_Abort+0xd6>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a70      	ldr	r2, [pc, #448]	@ (8005cb4 <HAL_DMA_Abort+0x224>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d036      	beq.n	8005b66 <HAL_DMA_Abort+0xd6>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a6e      	ldr	r2, [pc, #440]	@ (8005cb8 <HAL_DMA_Abort+0x228>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d031      	beq.n	8005b66 <HAL_DMA_Abort+0xd6>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a6d      	ldr	r2, [pc, #436]	@ (8005cbc <HAL_DMA_Abort+0x22c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d02c      	beq.n	8005b66 <HAL_DMA_Abort+0xd6>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a6b      	ldr	r2, [pc, #428]	@ (8005cc0 <HAL_DMA_Abort+0x230>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d027      	beq.n	8005b66 <HAL_DMA_Abort+0xd6>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a6a      	ldr	r2, [pc, #424]	@ (8005cc4 <HAL_DMA_Abort+0x234>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d022      	beq.n	8005b66 <HAL_DMA_Abort+0xd6>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a68      	ldr	r2, [pc, #416]	@ (8005cc8 <HAL_DMA_Abort+0x238>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d01d      	beq.n	8005b66 <HAL_DMA_Abort+0xd6>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a67      	ldr	r2, [pc, #412]	@ (8005ccc <HAL_DMA_Abort+0x23c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d018      	beq.n	8005b66 <HAL_DMA_Abort+0xd6>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a65      	ldr	r2, [pc, #404]	@ (8005cd0 <HAL_DMA_Abort+0x240>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d013      	beq.n	8005b66 <HAL_DMA_Abort+0xd6>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a64      	ldr	r2, [pc, #400]	@ (8005cd4 <HAL_DMA_Abort+0x244>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d00e      	beq.n	8005b66 <HAL_DMA_Abort+0xd6>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a62      	ldr	r2, [pc, #392]	@ (8005cd8 <HAL_DMA_Abort+0x248>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d009      	beq.n	8005b66 <HAL_DMA_Abort+0xd6>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a61      	ldr	r2, [pc, #388]	@ (8005cdc <HAL_DMA_Abort+0x24c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d004      	beq.n	8005b66 <HAL_DMA_Abort+0xd6>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a5f      	ldr	r2, [pc, #380]	@ (8005ce0 <HAL_DMA_Abort+0x250>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d101      	bne.n	8005b6a <HAL_DMA_Abort+0xda>
 8005b66:	2301      	movs	r3, #1
 8005b68:	e000      	b.n	8005b6c <HAL_DMA_Abort+0xdc>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d013      	beq.n	8005b98 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 021e 	bic.w	r2, r2, #30
 8005b7e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	695a      	ldr	r2, [r3, #20]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b8e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	617b      	str	r3, [r7, #20]
 8005b96:	e00a      	b.n	8005bae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 020e 	bic.w	r2, r2, #14
 8005ba6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a3c      	ldr	r2, [pc, #240]	@ (8005ca4 <HAL_DMA_Abort+0x214>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d072      	beq.n	8005c9e <HAL_DMA_Abort+0x20e>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a3a      	ldr	r2, [pc, #232]	@ (8005ca8 <HAL_DMA_Abort+0x218>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d06d      	beq.n	8005c9e <HAL_DMA_Abort+0x20e>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a39      	ldr	r2, [pc, #228]	@ (8005cac <HAL_DMA_Abort+0x21c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d068      	beq.n	8005c9e <HAL_DMA_Abort+0x20e>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a37      	ldr	r2, [pc, #220]	@ (8005cb0 <HAL_DMA_Abort+0x220>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d063      	beq.n	8005c9e <HAL_DMA_Abort+0x20e>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a36      	ldr	r2, [pc, #216]	@ (8005cb4 <HAL_DMA_Abort+0x224>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d05e      	beq.n	8005c9e <HAL_DMA_Abort+0x20e>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a34      	ldr	r2, [pc, #208]	@ (8005cb8 <HAL_DMA_Abort+0x228>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d059      	beq.n	8005c9e <HAL_DMA_Abort+0x20e>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a33      	ldr	r2, [pc, #204]	@ (8005cbc <HAL_DMA_Abort+0x22c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d054      	beq.n	8005c9e <HAL_DMA_Abort+0x20e>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a31      	ldr	r2, [pc, #196]	@ (8005cc0 <HAL_DMA_Abort+0x230>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d04f      	beq.n	8005c9e <HAL_DMA_Abort+0x20e>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a30      	ldr	r2, [pc, #192]	@ (8005cc4 <HAL_DMA_Abort+0x234>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d04a      	beq.n	8005c9e <HAL_DMA_Abort+0x20e>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a2e      	ldr	r2, [pc, #184]	@ (8005cc8 <HAL_DMA_Abort+0x238>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d045      	beq.n	8005c9e <HAL_DMA_Abort+0x20e>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a2d      	ldr	r2, [pc, #180]	@ (8005ccc <HAL_DMA_Abort+0x23c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d040      	beq.n	8005c9e <HAL_DMA_Abort+0x20e>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a2b      	ldr	r2, [pc, #172]	@ (8005cd0 <HAL_DMA_Abort+0x240>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d03b      	beq.n	8005c9e <HAL_DMA_Abort+0x20e>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8005cd4 <HAL_DMA_Abort+0x244>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d036      	beq.n	8005c9e <HAL_DMA_Abort+0x20e>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a28      	ldr	r2, [pc, #160]	@ (8005cd8 <HAL_DMA_Abort+0x248>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d031      	beq.n	8005c9e <HAL_DMA_Abort+0x20e>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a27      	ldr	r2, [pc, #156]	@ (8005cdc <HAL_DMA_Abort+0x24c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d02c      	beq.n	8005c9e <HAL_DMA_Abort+0x20e>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a25      	ldr	r2, [pc, #148]	@ (8005ce0 <HAL_DMA_Abort+0x250>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d027      	beq.n	8005c9e <HAL_DMA_Abort+0x20e>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a24      	ldr	r2, [pc, #144]	@ (8005ce4 <HAL_DMA_Abort+0x254>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d022      	beq.n	8005c9e <HAL_DMA_Abort+0x20e>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a22      	ldr	r2, [pc, #136]	@ (8005ce8 <HAL_DMA_Abort+0x258>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d01d      	beq.n	8005c9e <HAL_DMA_Abort+0x20e>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a21      	ldr	r2, [pc, #132]	@ (8005cec <HAL_DMA_Abort+0x25c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d018      	beq.n	8005c9e <HAL_DMA_Abort+0x20e>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a1f      	ldr	r2, [pc, #124]	@ (8005cf0 <HAL_DMA_Abort+0x260>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d013      	beq.n	8005c9e <HAL_DMA_Abort+0x20e>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8005cf4 <HAL_DMA_Abort+0x264>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00e      	beq.n	8005c9e <HAL_DMA_Abort+0x20e>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1c      	ldr	r2, [pc, #112]	@ (8005cf8 <HAL_DMA_Abort+0x268>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d009      	beq.n	8005c9e <HAL_DMA_Abort+0x20e>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8005cfc <HAL_DMA_Abort+0x26c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d004      	beq.n	8005c9e <HAL_DMA_Abort+0x20e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a19      	ldr	r2, [pc, #100]	@ (8005d00 <HAL_DMA_Abort+0x270>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d132      	bne.n	8005d04 <HAL_DMA_Abort+0x274>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e031      	b.n	8005d06 <HAL_DMA_Abort+0x276>
 8005ca2:	bf00      	nop
 8005ca4:	40020010 	.word	0x40020010
 8005ca8:	40020028 	.word	0x40020028
 8005cac:	40020040 	.word	0x40020040
 8005cb0:	40020058 	.word	0x40020058
 8005cb4:	40020070 	.word	0x40020070
 8005cb8:	40020088 	.word	0x40020088
 8005cbc:	400200a0 	.word	0x400200a0
 8005cc0:	400200b8 	.word	0x400200b8
 8005cc4:	40020410 	.word	0x40020410
 8005cc8:	40020428 	.word	0x40020428
 8005ccc:	40020440 	.word	0x40020440
 8005cd0:	40020458 	.word	0x40020458
 8005cd4:	40020470 	.word	0x40020470
 8005cd8:	40020488 	.word	0x40020488
 8005cdc:	400204a0 	.word	0x400204a0
 8005ce0:	400204b8 	.word	0x400204b8
 8005ce4:	58025408 	.word	0x58025408
 8005ce8:	5802541c 	.word	0x5802541c
 8005cec:	58025430 	.word	0x58025430
 8005cf0:	58025444 	.word	0x58025444
 8005cf4:	58025458 	.word	0x58025458
 8005cf8:	5802546c 	.word	0x5802546c
 8005cfc:	58025480 	.word	0x58025480
 8005d00:	58025494 	.word	0x58025494
 8005d04:	2300      	movs	r3, #0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d007      	beq.n	8005d1a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d18:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a6d      	ldr	r2, [pc, #436]	@ (8005ed4 <HAL_DMA_Abort+0x444>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d04a      	beq.n	8005dba <HAL_DMA_Abort+0x32a>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a6b      	ldr	r2, [pc, #428]	@ (8005ed8 <HAL_DMA_Abort+0x448>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d045      	beq.n	8005dba <HAL_DMA_Abort+0x32a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a6a      	ldr	r2, [pc, #424]	@ (8005edc <HAL_DMA_Abort+0x44c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d040      	beq.n	8005dba <HAL_DMA_Abort+0x32a>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a68      	ldr	r2, [pc, #416]	@ (8005ee0 <HAL_DMA_Abort+0x450>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d03b      	beq.n	8005dba <HAL_DMA_Abort+0x32a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a67      	ldr	r2, [pc, #412]	@ (8005ee4 <HAL_DMA_Abort+0x454>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d036      	beq.n	8005dba <HAL_DMA_Abort+0x32a>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a65      	ldr	r2, [pc, #404]	@ (8005ee8 <HAL_DMA_Abort+0x458>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d031      	beq.n	8005dba <HAL_DMA_Abort+0x32a>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a64      	ldr	r2, [pc, #400]	@ (8005eec <HAL_DMA_Abort+0x45c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d02c      	beq.n	8005dba <HAL_DMA_Abort+0x32a>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a62      	ldr	r2, [pc, #392]	@ (8005ef0 <HAL_DMA_Abort+0x460>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d027      	beq.n	8005dba <HAL_DMA_Abort+0x32a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a61      	ldr	r2, [pc, #388]	@ (8005ef4 <HAL_DMA_Abort+0x464>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d022      	beq.n	8005dba <HAL_DMA_Abort+0x32a>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a5f      	ldr	r2, [pc, #380]	@ (8005ef8 <HAL_DMA_Abort+0x468>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d01d      	beq.n	8005dba <HAL_DMA_Abort+0x32a>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a5e      	ldr	r2, [pc, #376]	@ (8005efc <HAL_DMA_Abort+0x46c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d018      	beq.n	8005dba <HAL_DMA_Abort+0x32a>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a5c      	ldr	r2, [pc, #368]	@ (8005f00 <HAL_DMA_Abort+0x470>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d013      	beq.n	8005dba <HAL_DMA_Abort+0x32a>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a5b      	ldr	r2, [pc, #364]	@ (8005f04 <HAL_DMA_Abort+0x474>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00e      	beq.n	8005dba <HAL_DMA_Abort+0x32a>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a59      	ldr	r2, [pc, #356]	@ (8005f08 <HAL_DMA_Abort+0x478>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d009      	beq.n	8005dba <HAL_DMA_Abort+0x32a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a58      	ldr	r2, [pc, #352]	@ (8005f0c <HAL_DMA_Abort+0x47c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d004      	beq.n	8005dba <HAL_DMA_Abort+0x32a>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a56      	ldr	r2, [pc, #344]	@ (8005f10 <HAL_DMA_Abort+0x480>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d108      	bne.n	8005dcc <HAL_DMA_Abort+0x33c>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0201 	bic.w	r2, r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	e007      	b.n	8005ddc <HAL_DMA_Abort+0x34c>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0201 	bic.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005ddc:	e013      	b.n	8005e06 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dde:	f7fc fe97 	bl	8002b10 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b05      	cmp	r3, #5
 8005dea:	d90c      	bls.n	8005e06 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2220      	movs	r2, #32
 8005df0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2203      	movs	r2, #3
 8005df6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e12d      	b.n	8006062 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1e5      	bne.n	8005dde <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a2f      	ldr	r2, [pc, #188]	@ (8005ed4 <HAL_DMA_Abort+0x444>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d04a      	beq.n	8005eb2 <HAL_DMA_Abort+0x422>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a2d      	ldr	r2, [pc, #180]	@ (8005ed8 <HAL_DMA_Abort+0x448>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d045      	beq.n	8005eb2 <HAL_DMA_Abort+0x422>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8005edc <HAL_DMA_Abort+0x44c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d040      	beq.n	8005eb2 <HAL_DMA_Abort+0x422>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a2a      	ldr	r2, [pc, #168]	@ (8005ee0 <HAL_DMA_Abort+0x450>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d03b      	beq.n	8005eb2 <HAL_DMA_Abort+0x422>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a29      	ldr	r2, [pc, #164]	@ (8005ee4 <HAL_DMA_Abort+0x454>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d036      	beq.n	8005eb2 <HAL_DMA_Abort+0x422>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a27      	ldr	r2, [pc, #156]	@ (8005ee8 <HAL_DMA_Abort+0x458>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d031      	beq.n	8005eb2 <HAL_DMA_Abort+0x422>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a26      	ldr	r2, [pc, #152]	@ (8005eec <HAL_DMA_Abort+0x45c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d02c      	beq.n	8005eb2 <HAL_DMA_Abort+0x422>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a24      	ldr	r2, [pc, #144]	@ (8005ef0 <HAL_DMA_Abort+0x460>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d027      	beq.n	8005eb2 <HAL_DMA_Abort+0x422>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a23      	ldr	r2, [pc, #140]	@ (8005ef4 <HAL_DMA_Abort+0x464>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d022      	beq.n	8005eb2 <HAL_DMA_Abort+0x422>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a21      	ldr	r2, [pc, #132]	@ (8005ef8 <HAL_DMA_Abort+0x468>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d01d      	beq.n	8005eb2 <HAL_DMA_Abort+0x422>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a20      	ldr	r2, [pc, #128]	@ (8005efc <HAL_DMA_Abort+0x46c>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d018      	beq.n	8005eb2 <HAL_DMA_Abort+0x422>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a1e      	ldr	r2, [pc, #120]	@ (8005f00 <HAL_DMA_Abort+0x470>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d013      	beq.n	8005eb2 <HAL_DMA_Abort+0x422>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a1d      	ldr	r2, [pc, #116]	@ (8005f04 <HAL_DMA_Abort+0x474>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d00e      	beq.n	8005eb2 <HAL_DMA_Abort+0x422>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a1b      	ldr	r2, [pc, #108]	@ (8005f08 <HAL_DMA_Abort+0x478>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d009      	beq.n	8005eb2 <HAL_DMA_Abort+0x422>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a1a      	ldr	r2, [pc, #104]	@ (8005f0c <HAL_DMA_Abort+0x47c>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d004      	beq.n	8005eb2 <HAL_DMA_Abort+0x422>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a18      	ldr	r2, [pc, #96]	@ (8005f10 <HAL_DMA_Abort+0x480>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d101      	bne.n	8005eb6 <HAL_DMA_Abort+0x426>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e000      	b.n	8005eb8 <HAL_DMA_Abort+0x428>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d02b      	beq.n	8005f14 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ec0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ec6:	f003 031f 	and.w	r3, r3, #31
 8005eca:	223f      	movs	r2, #63	@ 0x3f
 8005ecc:	409a      	lsls	r2, r3
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	609a      	str	r2, [r3, #8]
 8005ed2:	e02a      	b.n	8005f2a <HAL_DMA_Abort+0x49a>
 8005ed4:	40020010 	.word	0x40020010
 8005ed8:	40020028 	.word	0x40020028
 8005edc:	40020040 	.word	0x40020040
 8005ee0:	40020058 	.word	0x40020058
 8005ee4:	40020070 	.word	0x40020070
 8005ee8:	40020088 	.word	0x40020088
 8005eec:	400200a0 	.word	0x400200a0
 8005ef0:	400200b8 	.word	0x400200b8
 8005ef4:	40020410 	.word	0x40020410
 8005ef8:	40020428 	.word	0x40020428
 8005efc:	40020440 	.word	0x40020440
 8005f00:	40020458 	.word	0x40020458
 8005f04:	40020470 	.word	0x40020470
 8005f08:	40020488 	.word	0x40020488
 8005f0c:	400204a0 	.word	0x400204a0
 8005f10:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f18:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f1e:	f003 031f 	and.w	r3, r3, #31
 8005f22:	2201      	movs	r2, #1
 8005f24:	409a      	lsls	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a4f      	ldr	r2, [pc, #316]	@ (800606c <HAL_DMA_Abort+0x5dc>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d072      	beq.n	800601a <HAL_DMA_Abort+0x58a>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a4d      	ldr	r2, [pc, #308]	@ (8006070 <HAL_DMA_Abort+0x5e0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d06d      	beq.n	800601a <HAL_DMA_Abort+0x58a>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a4c      	ldr	r2, [pc, #304]	@ (8006074 <HAL_DMA_Abort+0x5e4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d068      	beq.n	800601a <HAL_DMA_Abort+0x58a>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a4a      	ldr	r2, [pc, #296]	@ (8006078 <HAL_DMA_Abort+0x5e8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d063      	beq.n	800601a <HAL_DMA_Abort+0x58a>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a49      	ldr	r2, [pc, #292]	@ (800607c <HAL_DMA_Abort+0x5ec>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d05e      	beq.n	800601a <HAL_DMA_Abort+0x58a>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a47      	ldr	r2, [pc, #284]	@ (8006080 <HAL_DMA_Abort+0x5f0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d059      	beq.n	800601a <HAL_DMA_Abort+0x58a>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a46      	ldr	r2, [pc, #280]	@ (8006084 <HAL_DMA_Abort+0x5f4>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d054      	beq.n	800601a <HAL_DMA_Abort+0x58a>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a44      	ldr	r2, [pc, #272]	@ (8006088 <HAL_DMA_Abort+0x5f8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d04f      	beq.n	800601a <HAL_DMA_Abort+0x58a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a43      	ldr	r2, [pc, #268]	@ (800608c <HAL_DMA_Abort+0x5fc>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d04a      	beq.n	800601a <HAL_DMA_Abort+0x58a>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a41      	ldr	r2, [pc, #260]	@ (8006090 <HAL_DMA_Abort+0x600>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d045      	beq.n	800601a <HAL_DMA_Abort+0x58a>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a40      	ldr	r2, [pc, #256]	@ (8006094 <HAL_DMA_Abort+0x604>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d040      	beq.n	800601a <HAL_DMA_Abort+0x58a>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a3e      	ldr	r2, [pc, #248]	@ (8006098 <HAL_DMA_Abort+0x608>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d03b      	beq.n	800601a <HAL_DMA_Abort+0x58a>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a3d      	ldr	r2, [pc, #244]	@ (800609c <HAL_DMA_Abort+0x60c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d036      	beq.n	800601a <HAL_DMA_Abort+0x58a>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a3b      	ldr	r2, [pc, #236]	@ (80060a0 <HAL_DMA_Abort+0x610>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d031      	beq.n	800601a <HAL_DMA_Abort+0x58a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a3a      	ldr	r2, [pc, #232]	@ (80060a4 <HAL_DMA_Abort+0x614>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d02c      	beq.n	800601a <HAL_DMA_Abort+0x58a>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a38      	ldr	r2, [pc, #224]	@ (80060a8 <HAL_DMA_Abort+0x618>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d027      	beq.n	800601a <HAL_DMA_Abort+0x58a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a37      	ldr	r2, [pc, #220]	@ (80060ac <HAL_DMA_Abort+0x61c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d022      	beq.n	800601a <HAL_DMA_Abort+0x58a>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a35      	ldr	r2, [pc, #212]	@ (80060b0 <HAL_DMA_Abort+0x620>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d01d      	beq.n	800601a <HAL_DMA_Abort+0x58a>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a34      	ldr	r2, [pc, #208]	@ (80060b4 <HAL_DMA_Abort+0x624>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d018      	beq.n	800601a <HAL_DMA_Abort+0x58a>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a32      	ldr	r2, [pc, #200]	@ (80060b8 <HAL_DMA_Abort+0x628>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d013      	beq.n	800601a <HAL_DMA_Abort+0x58a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a31      	ldr	r2, [pc, #196]	@ (80060bc <HAL_DMA_Abort+0x62c>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d00e      	beq.n	800601a <HAL_DMA_Abort+0x58a>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a2f      	ldr	r2, [pc, #188]	@ (80060c0 <HAL_DMA_Abort+0x630>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d009      	beq.n	800601a <HAL_DMA_Abort+0x58a>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a2e      	ldr	r2, [pc, #184]	@ (80060c4 <HAL_DMA_Abort+0x634>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d004      	beq.n	800601a <HAL_DMA_Abort+0x58a>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a2c      	ldr	r2, [pc, #176]	@ (80060c8 <HAL_DMA_Abort+0x638>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d101      	bne.n	800601e <HAL_DMA_Abort+0x58e>
 800601a:	2301      	movs	r3, #1
 800601c:	e000      	b.n	8006020 <HAL_DMA_Abort+0x590>
 800601e:	2300      	movs	r3, #0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d015      	beq.n	8006050 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800602c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00c      	beq.n	8006050 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006040:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006044:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800604e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	40020010 	.word	0x40020010
 8006070:	40020028 	.word	0x40020028
 8006074:	40020040 	.word	0x40020040
 8006078:	40020058 	.word	0x40020058
 800607c:	40020070 	.word	0x40020070
 8006080:	40020088 	.word	0x40020088
 8006084:	400200a0 	.word	0x400200a0
 8006088:	400200b8 	.word	0x400200b8
 800608c:	40020410 	.word	0x40020410
 8006090:	40020428 	.word	0x40020428
 8006094:	40020440 	.word	0x40020440
 8006098:	40020458 	.word	0x40020458
 800609c:	40020470 	.word	0x40020470
 80060a0:	40020488 	.word	0x40020488
 80060a4:	400204a0 	.word	0x400204a0
 80060a8:	400204b8 	.word	0x400204b8
 80060ac:	58025408 	.word	0x58025408
 80060b0:	5802541c 	.word	0x5802541c
 80060b4:	58025430 	.word	0x58025430
 80060b8:	58025444 	.word	0x58025444
 80060bc:	58025458 	.word	0x58025458
 80060c0:	5802546c 	.word	0x5802546c
 80060c4:	58025480 	.word	0x58025480
 80060c8:	58025494 	.word	0x58025494

080060cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e237      	b.n	800654e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d004      	beq.n	80060f4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2280      	movs	r2, #128	@ 0x80
 80060ee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e22c      	b.n	800654e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a5c      	ldr	r2, [pc, #368]	@ (800626c <HAL_DMA_Abort_IT+0x1a0>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d04a      	beq.n	8006194 <HAL_DMA_Abort_IT+0xc8>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a5b      	ldr	r2, [pc, #364]	@ (8006270 <HAL_DMA_Abort_IT+0x1a4>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d045      	beq.n	8006194 <HAL_DMA_Abort_IT+0xc8>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a59      	ldr	r2, [pc, #356]	@ (8006274 <HAL_DMA_Abort_IT+0x1a8>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d040      	beq.n	8006194 <HAL_DMA_Abort_IT+0xc8>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a58      	ldr	r2, [pc, #352]	@ (8006278 <HAL_DMA_Abort_IT+0x1ac>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d03b      	beq.n	8006194 <HAL_DMA_Abort_IT+0xc8>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a56      	ldr	r2, [pc, #344]	@ (800627c <HAL_DMA_Abort_IT+0x1b0>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d036      	beq.n	8006194 <HAL_DMA_Abort_IT+0xc8>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a55      	ldr	r2, [pc, #340]	@ (8006280 <HAL_DMA_Abort_IT+0x1b4>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d031      	beq.n	8006194 <HAL_DMA_Abort_IT+0xc8>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a53      	ldr	r2, [pc, #332]	@ (8006284 <HAL_DMA_Abort_IT+0x1b8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d02c      	beq.n	8006194 <HAL_DMA_Abort_IT+0xc8>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a52      	ldr	r2, [pc, #328]	@ (8006288 <HAL_DMA_Abort_IT+0x1bc>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d027      	beq.n	8006194 <HAL_DMA_Abort_IT+0xc8>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a50      	ldr	r2, [pc, #320]	@ (800628c <HAL_DMA_Abort_IT+0x1c0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d022      	beq.n	8006194 <HAL_DMA_Abort_IT+0xc8>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a4f      	ldr	r2, [pc, #316]	@ (8006290 <HAL_DMA_Abort_IT+0x1c4>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d01d      	beq.n	8006194 <HAL_DMA_Abort_IT+0xc8>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a4d      	ldr	r2, [pc, #308]	@ (8006294 <HAL_DMA_Abort_IT+0x1c8>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d018      	beq.n	8006194 <HAL_DMA_Abort_IT+0xc8>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a4c      	ldr	r2, [pc, #304]	@ (8006298 <HAL_DMA_Abort_IT+0x1cc>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d013      	beq.n	8006194 <HAL_DMA_Abort_IT+0xc8>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a4a      	ldr	r2, [pc, #296]	@ (800629c <HAL_DMA_Abort_IT+0x1d0>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d00e      	beq.n	8006194 <HAL_DMA_Abort_IT+0xc8>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a49      	ldr	r2, [pc, #292]	@ (80062a0 <HAL_DMA_Abort_IT+0x1d4>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d009      	beq.n	8006194 <HAL_DMA_Abort_IT+0xc8>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a47      	ldr	r2, [pc, #284]	@ (80062a4 <HAL_DMA_Abort_IT+0x1d8>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d004      	beq.n	8006194 <HAL_DMA_Abort_IT+0xc8>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a46      	ldr	r2, [pc, #280]	@ (80062a8 <HAL_DMA_Abort_IT+0x1dc>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d101      	bne.n	8006198 <HAL_DMA_Abort_IT+0xcc>
 8006194:	2301      	movs	r3, #1
 8006196:	e000      	b.n	800619a <HAL_DMA_Abort_IT+0xce>
 8006198:	2300      	movs	r3, #0
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 8086 	beq.w	80062ac <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2204      	movs	r2, #4
 80061a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a2f      	ldr	r2, [pc, #188]	@ (800626c <HAL_DMA_Abort_IT+0x1a0>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d04a      	beq.n	8006248 <HAL_DMA_Abort_IT+0x17c>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a2e      	ldr	r2, [pc, #184]	@ (8006270 <HAL_DMA_Abort_IT+0x1a4>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d045      	beq.n	8006248 <HAL_DMA_Abort_IT+0x17c>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a2c      	ldr	r2, [pc, #176]	@ (8006274 <HAL_DMA_Abort_IT+0x1a8>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d040      	beq.n	8006248 <HAL_DMA_Abort_IT+0x17c>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a2b      	ldr	r2, [pc, #172]	@ (8006278 <HAL_DMA_Abort_IT+0x1ac>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d03b      	beq.n	8006248 <HAL_DMA_Abort_IT+0x17c>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a29      	ldr	r2, [pc, #164]	@ (800627c <HAL_DMA_Abort_IT+0x1b0>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d036      	beq.n	8006248 <HAL_DMA_Abort_IT+0x17c>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a28      	ldr	r2, [pc, #160]	@ (8006280 <HAL_DMA_Abort_IT+0x1b4>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d031      	beq.n	8006248 <HAL_DMA_Abort_IT+0x17c>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a26      	ldr	r2, [pc, #152]	@ (8006284 <HAL_DMA_Abort_IT+0x1b8>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d02c      	beq.n	8006248 <HAL_DMA_Abort_IT+0x17c>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a25      	ldr	r2, [pc, #148]	@ (8006288 <HAL_DMA_Abort_IT+0x1bc>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d027      	beq.n	8006248 <HAL_DMA_Abort_IT+0x17c>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a23      	ldr	r2, [pc, #140]	@ (800628c <HAL_DMA_Abort_IT+0x1c0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d022      	beq.n	8006248 <HAL_DMA_Abort_IT+0x17c>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a22      	ldr	r2, [pc, #136]	@ (8006290 <HAL_DMA_Abort_IT+0x1c4>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d01d      	beq.n	8006248 <HAL_DMA_Abort_IT+0x17c>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a20      	ldr	r2, [pc, #128]	@ (8006294 <HAL_DMA_Abort_IT+0x1c8>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d018      	beq.n	8006248 <HAL_DMA_Abort_IT+0x17c>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a1f      	ldr	r2, [pc, #124]	@ (8006298 <HAL_DMA_Abort_IT+0x1cc>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d013      	beq.n	8006248 <HAL_DMA_Abort_IT+0x17c>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a1d      	ldr	r2, [pc, #116]	@ (800629c <HAL_DMA_Abort_IT+0x1d0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d00e      	beq.n	8006248 <HAL_DMA_Abort_IT+0x17c>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a1c      	ldr	r2, [pc, #112]	@ (80062a0 <HAL_DMA_Abort_IT+0x1d4>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d009      	beq.n	8006248 <HAL_DMA_Abort_IT+0x17c>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a1a      	ldr	r2, [pc, #104]	@ (80062a4 <HAL_DMA_Abort_IT+0x1d8>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d004      	beq.n	8006248 <HAL_DMA_Abort_IT+0x17c>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a19      	ldr	r2, [pc, #100]	@ (80062a8 <HAL_DMA_Abort_IT+0x1dc>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d108      	bne.n	800625a <HAL_DMA_Abort_IT+0x18e>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 0201 	bic.w	r2, r2, #1
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	e178      	b.n	800654c <HAL_DMA_Abort_IT+0x480>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0201 	bic.w	r2, r2, #1
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	e16f      	b.n	800654c <HAL_DMA_Abort_IT+0x480>
 800626c:	40020010 	.word	0x40020010
 8006270:	40020028 	.word	0x40020028
 8006274:	40020040 	.word	0x40020040
 8006278:	40020058 	.word	0x40020058
 800627c:	40020070 	.word	0x40020070
 8006280:	40020088 	.word	0x40020088
 8006284:	400200a0 	.word	0x400200a0
 8006288:	400200b8 	.word	0x400200b8
 800628c:	40020410 	.word	0x40020410
 8006290:	40020428 	.word	0x40020428
 8006294:	40020440 	.word	0x40020440
 8006298:	40020458 	.word	0x40020458
 800629c:	40020470 	.word	0x40020470
 80062a0:	40020488 	.word	0x40020488
 80062a4:	400204a0 	.word	0x400204a0
 80062a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 020e 	bic.w	r2, r2, #14
 80062ba:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a6c      	ldr	r2, [pc, #432]	@ (8006474 <HAL_DMA_Abort_IT+0x3a8>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d04a      	beq.n	800635c <HAL_DMA_Abort_IT+0x290>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a6b      	ldr	r2, [pc, #428]	@ (8006478 <HAL_DMA_Abort_IT+0x3ac>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d045      	beq.n	800635c <HAL_DMA_Abort_IT+0x290>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a69      	ldr	r2, [pc, #420]	@ (800647c <HAL_DMA_Abort_IT+0x3b0>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d040      	beq.n	800635c <HAL_DMA_Abort_IT+0x290>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a68      	ldr	r2, [pc, #416]	@ (8006480 <HAL_DMA_Abort_IT+0x3b4>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d03b      	beq.n	800635c <HAL_DMA_Abort_IT+0x290>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a66      	ldr	r2, [pc, #408]	@ (8006484 <HAL_DMA_Abort_IT+0x3b8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d036      	beq.n	800635c <HAL_DMA_Abort_IT+0x290>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a65      	ldr	r2, [pc, #404]	@ (8006488 <HAL_DMA_Abort_IT+0x3bc>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d031      	beq.n	800635c <HAL_DMA_Abort_IT+0x290>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a63      	ldr	r2, [pc, #396]	@ (800648c <HAL_DMA_Abort_IT+0x3c0>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d02c      	beq.n	800635c <HAL_DMA_Abort_IT+0x290>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a62      	ldr	r2, [pc, #392]	@ (8006490 <HAL_DMA_Abort_IT+0x3c4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d027      	beq.n	800635c <HAL_DMA_Abort_IT+0x290>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a60      	ldr	r2, [pc, #384]	@ (8006494 <HAL_DMA_Abort_IT+0x3c8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d022      	beq.n	800635c <HAL_DMA_Abort_IT+0x290>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a5f      	ldr	r2, [pc, #380]	@ (8006498 <HAL_DMA_Abort_IT+0x3cc>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d01d      	beq.n	800635c <HAL_DMA_Abort_IT+0x290>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a5d      	ldr	r2, [pc, #372]	@ (800649c <HAL_DMA_Abort_IT+0x3d0>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d018      	beq.n	800635c <HAL_DMA_Abort_IT+0x290>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a5c      	ldr	r2, [pc, #368]	@ (80064a0 <HAL_DMA_Abort_IT+0x3d4>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d013      	beq.n	800635c <HAL_DMA_Abort_IT+0x290>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a5a      	ldr	r2, [pc, #360]	@ (80064a4 <HAL_DMA_Abort_IT+0x3d8>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d00e      	beq.n	800635c <HAL_DMA_Abort_IT+0x290>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a59      	ldr	r2, [pc, #356]	@ (80064a8 <HAL_DMA_Abort_IT+0x3dc>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d009      	beq.n	800635c <HAL_DMA_Abort_IT+0x290>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a57      	ldr	r2, [pc, #348]	@ (80064ac <HAL_DMA_Abort_IT+0x3e0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d004      	beq.n	800635c <HAL_DMA_Abort_IT+0x290>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a56      	ldr	r2, [pc, #344]	@ (80064b0 <HAL_DMA_Abort_IT+0x3e4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d108      	bne.n	800636e <HAL_DMA_Abort_IT+0x2a2>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 0201 	bic.w	r2, r2, #1
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	e007      	b.n	800637e <HAL_DMA_Abort_IT+0x2b2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0201 	bic.w	r2, r2, #1
 800637c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a3c      	ldr	r2, [pc, #240]	@ (8006474 <HAL_DMA_Abort_IT+0x3a8>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d072      	beq.n	800646e <HAL_DMA_Abort_IT+0x3a2>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a3a      	ldr	r2, [pc, #232]	@ (8006478 <HAL_DMA_Abort_IT+0x3ac>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d06d      	beq.n	800646e <HAL_DMA_Abort_IT+0x3a2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a39      	ldr	r2, [pc, #228]	@ (800647c <HAL_DMA_Abort_IT+0x3b0>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d068      	beq.n	800646e <HAL_DMA_Abort_IT+0x3a2>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a37      	ldr	r2, [pc, #220]	@ (8006480 <HAL_DMA_Abort_IT+0x3b4>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d063      	beq.n	800646e <HAL_DMA_Abort_IT+0x3a2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a36      	ldr	r2, [pc, #216]	@ (8006484 <HAL_DMA_Abort_IT+0x3b8>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d05e      	beq.n	800646e <HAL_DMA_Abort_IT+0x3a2>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a34      	ldr	r2, [pc, #208]	@ (8006488 <HAL_DMA_Abort_IT+0x3bc>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d059      	beq.n	800646e <HAL_DMA_Abort_IT+0x3a2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a33      	ldr	r2, [pc, #204]	@ (800648c <HAL_DMA_Abort_IT+0x3c0>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d054      	beq.n	800646e <HAL_DMA_Abort_IT+0x3a2>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a31      	ldr	r2, [pc, #196]	@ (8006490 <HAL_DMA_Abort_IT+0x3c4>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d04f      	beq.n	800646e <HAL_DMA_Abort_IT+0x3a2>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a30      	ldr	r2, [pc, #192]	@ (8006494 <HAL_DMA_Abort_IT+0x3c8>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d04a      	beq.n	800646e <HAL_DMA_Abort_IT+0x3a2>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a2e      	ldr	r2, [pc, #184]	@ (8006498 <HAL_DMA_Abort_IT+0x3cc>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d045      	beq.n	800646e <HAL_DMA_Abort_IT+0x3a2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a2d      	ldr	r2, [pc, #180]	@ (800649c <HAL_DMA_Abort_IT+0x3d0>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d040      	beq.n	800646e <HAL_DMA_Abort_IT+0x3a2>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a2b      	ldr	r2, [pc, #172]	@ (80064a0 <HAL_DMA_Abort_IT+0x3d4>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d03b      	beq.n	800646e <HAL_DMA_Abort_IT+0x3a2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a2a      	ldr	r2, [pc, #168]	@ (80064a4 <HAL_DMA_Abort_IT+0x3d8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d036      	beq.n	800646e <HAL_DMA_Abort_IT+0x3a2>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a28      	ldr	r2, [pc, #160]	@ (80064a8 <HAL_DMA_Abort_IT+0x3dc>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d031      	beq.n	800646e <HAL_DMA_Abort_IT+0x3a2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a27      	ldr	r2, [pc, #156]	@ (80064ac <HAL_DMA_Abort_IT+0x3e0>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d02c      	beq.n	800646e <HAL_DMA_Abort_IT+0x3a2>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a25      	ldr	r2, [pc, #148]	@ (80064b0 <HAL_DMA_Abort_IT+0x3e4>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d027      	beq.n	800646e <HAL_DMA_Abort_IT+0x3a2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a24      	ldr	r2, [pc, #144]	@ (80064b4 <HAL_DMA_Abort_IT+0x3e8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d022      	beq.n	800646e <HAL_DMA_Abort_IT+0x3a2>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a22      	ldr	r2, [pc, #136]	@ (80064b8 <HAL_DMA_Abort_IT+0x3ec>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d01d      	beq.n	800646e <HAL_DMA_Abort_IT+0x3a2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a21      	ldr	r2, [pc, #132]	@ (80064bc <HAL_DMA_Abort_IT+0x3f0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d018      	beq.n	800646e <HAL_DMA_Abort_IT+0x3a2>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a1f      	ldr	r2, [pc, #124]	@ (80064c0 <HAL_DMA_Abort_IT+0x3f4>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d013      	beq.n	800646e <HAL_DMA_Abort_IT+0x3a2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a1e      	ldr	r2, [pc, #120]	@ (80064c4 <HAL_DMA_Abort_IT+0x3f8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d00e      	beq.n	800646e <HAL_DMA_Abort_IT+0x3a2>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a1c      	ldr	r2, [pc, #112]	@ (80064c8 <HAL_DMA_Abort_IT+0x3fc>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d009      	beq.n	800646e <HAL_DMA_Abort_IT+0x3a2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a1b      	ldr	r2, [pc, #108]	@ (80064cc <HAL_DMA_Abort_IT+0x400>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d004      	beq.n	800646e <HAL_DMA_Abort_IT+0x3a2>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a19      	ldr	r2, [pc, #100]	@ (80064d0 <HAL_DMA_Abort_IT+0x404>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d132      	bne.n	80064d4 <HAL_DMA_Abort_IT+0x408>
 800646e:	2301      	movs	r3, #1
 8006470:	e031      	b.n	80064d6 <HAL_DMA_Abort_IT+0x40a>
 8006472:	bf00      	nop
 8006474:	40020010 	.word	0x40020010
 8006478:	40020028 	.word	0x40020028
 800647c:	40020040 	.word	0x40020040
 8006480:	40020058 	.word	0x40020058
 8006484:	40020070 	.word	0x40020070
 8006488:	40020088 	.word	0x40020088
 800648c:	400200a0 	.word	0x400200a0
 8006490:	400200b8 	.word	0x400200b8
 8006494:	40020410 	.word	0x40020410
 8006498:	40020428 	.word	0x40020428
 800649c:	40020440 	.word	0x40020440
 80064a0:	40020458 	.word	0x40020458
 80064a4:	40020470 	.word	0x40020470
 80064a8:	40020488 	.word	0x40020488
 80064ac:	400204a0 	.word	0x400204a0
 80064b0:	400204b8 	.word	0x400204b8
 80064b4:	58025408 	.word	0x58025408
 80064b8:	5802541c 	.word	0x5802541c
 80064bc:	58025430 	.word	0x58025430
 80064c0:	58025444 	.word	0x58025444
 80064c4:	58025458 	.word	0x58025458
 80064c8:	5802546c 	.word	0x5802546c
 80064cc:	58025480 	.word	0x58025480
 80064d0:	58025494 	.word	0x58025494
 80064d4:	2300      	movs	r3, #0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d028      	beq.n	800652c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064e8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064ee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064f4:	f003 031f 	and.w	r3, r3, #31
 80064f8:	2201      	movs	r2, #1
 80064fa:	409a      	lsls	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006508:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00c      	beq.n	800652c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800651c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006520:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800652a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006540:	2b00      	cmp	r3, #0
 8006542:	d003      	beq.n	800654c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop

08006558 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08a      	sub	sp, #40	@ 0x28
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006564:	4b67      	ldr	r3, [pc, #412]	@ (8006704 <HAL_DMA_IRQHandler+0x1ac>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a67      	ldr	r2, [pc, #412]	@ (8006708 <HAL_DMA_IRQHandler+0x1b0>)
 800656a:	fba2 2303 	umull	r2, r3, r2, r3
 800656e:	0a9b      	lsrs	r3, r3, #10
 8006570:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006576:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800657c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a5f      	ldr	r2, [pc, #380]	@ (800670c <HAL_DMA_IRQHandler+0x1b4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d04a      	beq.n	800662a <HAL_DMA_IRQHandler+0xd2>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a5d      	ldr	r2, [pc, #372]	@ (8006710 <HAL_DMA_IRQHandler+0x1b8>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d045      	beq.n	800662a <HAL_DMA_IRQHandler+0xd2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a5c      	ldr	r2, [pc, #368]	@ (8006714 <HAL_DMA_IRQHandler+0x1bc>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d040      	beq.n	800662a <HAL_DMA_IRQHandler+0xd2>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a5a      	ldr	r2, [pc, #360]	@ (8006718 <HAL_DMA_IRQHandler+0x1c0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d03b      	beq.n	800662a <HAL_DMA_IRQHandler+0xd2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a59      	ldr	r2, [pc, #356]	@ (800671c <HAL_DMA_IRQHandler+0x1c4>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d036      	beq.n	800662a <HAL_DMA_IRQHandler+0xd2>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a57      	ldr	r2, [pc, #348]	@ (8006720 <HAL_DMA_IRQHandler+0x1c8>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d031      	beq.n	800662a <HAL_DMA_IRQHandler+0xd2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a56      	ldr	r2, [pc, #344]	@ (8006724 <HAL_DMA_IRQHandler+0x1cc>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d02c      	beq.n	800662a <HAL_DMA_IRQHandler+0xd2>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a54      	ldr	r2, [pc, #336]	@ (8006728 <HAL_DMA_IRQHandler+0x1d0>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d027      	beq.n	800662a <HAL_DMA_IRQHandler+0xd2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a53      	ldr	r2, [pc, #332]	@ (800672c <HAL_DMA_IRQHandler+0x1d4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d022      	beq.n	800662a <HAL_DMA_IRQHandler+0xd2>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a51      	ldr	r2, [pc, #324]	@ (8006730 <HAL_DMA_IRQHandler+0x1d8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d01d      	beq.n	800662a <HAL_DMA_IRQHandler+0xd2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a50      	ldr	r2, [pc, #320]	@ (8006734 <HAL_DMA_IRQHandler+0x1dc>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d018      	beq.n	800662a <HAL_DMA_IRQHandler+0xd2>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a4e      	ldr	r2, [pc, #312]	@ (8006738 <HAL_DMA_IRQHandler+0x1e0>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d013      	beq.n	800662a <HAL_DMA_IRQHandler+0xd2>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a4d      	ldr	r2, [pc, #308]	@ (800673c <HAL_DMA_IRQHandler+0x1e4>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d00e      	beq.n	800662a <HAL_DMA_IRQHandler+0xd2>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a4b      	ldr	r2, [pc, #300]	@ (8006740 <HAL_DMA_IRQHandler+0x1e8>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d009      	beq.n	800662a <HAL_DMA_IRQHandler+0xd2>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a4a      	ldr	r2, [pc, #296]	@ (8006744 <HAL_DMA_IRQHandler+0x1ec>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d004      	beq.n	800662a <HAL_DMA_IRQHandler+0xd2>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a48      	ldr	r2, [pc, #288]	@ (8006748 <HAL_DMA_IRQHandler+0x1f0>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d101      	bne.n	800662e <HAL_DMA_IRQHandler+0xd6>
 800662a:	2301      	movs	r3, #1
 800662c:	e000      	b.n	8006630 <HAL_DMA_IRQHandler+0xd8>
 800662e:	2300      	movs	r3, #0
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 842b 	beq.w	8006e8c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800663a:	f003 031f 	and.w	r3, r3, #31
 800663e:	2208      	movs	r2, #8
 8006640:	409a      	lsls	r2, r3
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	4013      	ands	r3, r2
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 80a2 	beq.w	8006790 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a2e      	ldr	r2, [pc, #184]	@ (800670c <HAL_DMA_IRQHandler+0x1b4>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d04a      	beq.n	80066ec <HAL_DMA_IRQHandler+0x194>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a2d      	ldr	r2, [pc, #180]	@ (8006710 <HAL_DMA_IRQHandler+0x1b8>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d045      	beq.n	80066ec <HAL_DMA_IRQHandler+0x194>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a2b      	ldr	r2, [pc, #172]	@ (8006714 <HAL_DMA_IRQHandler+0x1bc>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d040      	beq.n	80066ec <HAL_DMA_IRQHandler+0x194>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a2a      	ldr	r2, [pc, #168]	@ (8006718 <HAL_DMA_IRQHandler+0x1c0>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d03b      	beq.n	80066ec <HAL_DMA_IRQHandler+0x194>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a28      	ldr	r2, [pc, #160]	@ (800671c <HAL_DMA_IRQHandler+0x1c4>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d036      	beq.n	80066ec <HAL_DMA_IRQHandler+0x194>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a27      	ldr	r2, [pc, #156]	@ (8006720 <HAL_DMA_IRQHandler+0x1c8>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d031      	beq.n	80066ec <HAL_DMA_IRQHandler+0x194>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a25      	ldr	r2, [pc, #148]	@ (8006724 <HAL_DMA_IRQHandler+0x1cc>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d02c      	beq.n	80066ec <HAL_DMA_IRQHandler+0x194>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a24      	ldr	r2, [pc, #144]	@ (8006728 <HAL_DMA_IRQHandler+0x1d0>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d027      	beq.n	80066ec <HAL_DMA_IRQHandler+0x194>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a22      	ldr	r2, [pc, #136]	@ (800672c <HAL_DMA_IRQHandler+0x1d4>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d022      	beq.n	80066ec <HAL_DMA_IRQHandler+0x194>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a21      	ldr	r2, [pc, #132]	@ (8006730 <HAL_DMA_IRQHandler+0x1d8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d01d      	beq.n	80066ec <HAL_DMA_IRQHandler+0x194>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a1f      	ldr	r2, [pc, #124]	@ (8006734 <HAL_DMA_IRQHandler+0x1dc>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d018      	beq.n	80066ec <HAL_DMA_IRQHandler+0x194>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a1e      	ldr	r2, [pc, #120]	@ (8006738 <HAL_DMA_IRQHandler+0x1e0>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d013      	beq.n	80066ec <HAL_DMA_IRQHandler+0x194>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a1c      	ldr	r2, [pc, #112]	@ (800673c <HAL_DMA_IRQHandler+0x1e4>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d00e      	beq.n	80066ec <HAL_DMA_IRQHandler+0x194>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a1b      	ldr	r2, [pc, #108]	@ (8006740 <HAL_DMA_IRQHandler+0x1e8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d009      	beq.n	80066ec <HAL_DMA_IRQHandler+0x194>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a19      	ldr	r2, [pc, #100]	@ (8006744 <HAL_DMA_IRQHandler+0x1ec>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d004      	beq.n	80066ec <HAL_DMA_IRQHandler+0x194>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a18      	ldr	r2, [pc, #96]	@ (8006748 <HAL_DMA_IRQHandler+0x1f0>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d12f      	bne.n	800674c <HAL_DMA_IRQHandler+0x1f4>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0304 	and.w	r3, r3, #4
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	bf14      	ite	ne
 80066fa:	2301      	movne	r3, #1
 80066fc:	2300      	moveq	r3, #0
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	e02e      	b.n	8006760 <HAL_DMA_IRQHandler+0x208>
 8006702:	bf00      	nop
 8006704:	24000054 	.word	0x24000054
 8006708:	1b4e81b5 	.word	0x1b4e81b5
 800670c:	40020010 	.word	0x40020010
 8006710:	40020028 	.word	0x40020028
 8006714:	40020040 	.word	0x40020040
 8006718:	40020058 	.word	0x40020058
 800671c:	40020070 	.word	0x40020070
 8006720:	40020088 	.word	0x40020088
 8006724:	400200a0 	.word	0x400200a0
 8006728:	400200b8 	.word	0x400200b8
 800672c:	40020410 	.word	0x40020410
 8006730:	40020428 	.word	0x40020428
 8006734:	40020440 	.word	0x40020440
 8006738:	40020458 	.word	0x40020458
 800673c:	40020470 	.word	0x40020470
 8006740:	40020488 	.word	0x40020488
 8006744:	400204a0 	.word	0x400204a0
 8006748:	400204b8 	.word	0x400204b8
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0308 	and.w	r3, r3, #8
 8006756:	2b00      	cmp	r3, #0
 8006758:	bf14      	ite	ne
 800675a:	2301      	movne	r3, #1
 800675c:	2300      	moveq	r3, #0
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	d015      	beq.n	8006790 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 0204 	bic.w	r2, r2, #4
 8006772:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006778:	f003 031f 	and.w	r3, r3, #31
 800677c:	2208      	movs	r2, #8
 800677e:	409a      	lsls	r2, r3
 8006780:	6a3b      	ldr	r3, [r7, #32]
 8006782:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006788:	f043 0201 	orr.w	r2, r3, #1
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006794:	f003 031f 	and.w	r3, r3, #31
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	fa22 f303 	lsr.w	r3, r2, r3
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d06e      	beq.n	8006884 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a69      	ldr	r2, [pc, #420]	@ (8006950 <HAL_DMA_IRQHandler+0x3f8>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d04a      	beq.n	8006846 <HAL_DMA_IRQHandler+0x2ee>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a67      	ldr	r2, [pc, #412]	@ (8006954 <HAL_DMA_IRQHandler+0x3fc>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d045      	beq.n	8006846 <HAL_DMA_IRQHandler+0x2ee>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a66      	ldr	r2, [pc, #408]	@ (8006958 <HAL_DMA_IRQHandler+0x400>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d040      	beq.n	8006846 <HAL_DMA_IRQHandler+0x2ee>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a64      	ldr	r2, [pc, #400]	@ (800695c <HAL_DMA_IRQHandler+0x404>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d03b      	beq.n	8006846 <HAL_DMA_IRQHandler+0x2ee>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a63      	ldr	r2, [pc, #396]	@ (8006960 <HAL_DMA_IRQHandler+0x408>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d036      	beq.n	8006846 <HAL_DMA_IRQHandler+0x2ee>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a61      	ldr	r2, [pc, #388]	@ (8006964 <HAL_DMA_IRQHandler+0x40c>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d031      	beq.n	8006846 <HAL_DMA_IRQHandler+0x2ee>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a60      	ldr	r2, [pc, #384]	@ (8006968 <HAL_DMA_IRQHandler+0x410>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d02c      	beq.n	8006846 <HAL_DMA_IRQHandler+0x2ee>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a5e      	ldr	r2, [pc, #376]	@ (800696c <HAL_DMA_IRQHandler+0x414>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d027      	beq.n	8006846 <HAL_DMA_IRQHandler+0x2ee>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a5d      	ldr	r2, [pc, #372]	@ (8006970 <HAL_DMA_IRQHandler+0x418>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d022      	beq.n	8006846 <HAL_DMA_IRQHandler+0x2ee>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a5b      	ldr	r2, [pc, #364]	@ (8006974 <HAL_DMA_IRQHandler+0x41c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d01d      	beq.n	8006846 <HAL_DMA_IRQHandler+0x2ee>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a5a      	ldr	r2, [pc, #360]	@ (8006978 <HAL_DMA_IRQHandler+0x420>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d018      	beq.n	8006846 <HAL_DMA_IRQHandler+0x2ee>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a58      	ldr	r2, [pc, #352]	@ (800697c <HAL_DMA_IRQHandler+0x424>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d013      	beq.n	8006846 <HAL_DMA_IRQHandler+0x2ee>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a57      	ldr	r2, [pc, #348]	@ (8006980 <HAL_DMA_IRQHandler+0x428>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d00e      	beq.n	8006846 <HAL_DMA_IRQHandler+0x2ee>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a55      	ldr	r2, [pc, #340]	@ (8006984 <HAL_DMA_IRQHandler+0x42c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d009      	beq.n	8006846 <HAL_DMA_IRQHandler+0x2ee>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a54      	ldr	r2, [pc, #336]	@ (8006988 <HAL_DMA_IRQHandler+0x430>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d004      	beq.n	8006846 <HAL_DMA_IRQHandler+0x2ee>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a52      	ldr	r2, [pc, #328]	@ (800698c <HAL_DMA_IRQHandler+0x434>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d10a      	bne.n	800685c <HAL_DMA_IRQHandler+0x304>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006850:	2b00      	cmp	r3, #0
 8006852:	bf14      	ite	ne
 8006854:	2301      	movne	r3, #1
 8006856:	2300      	moveq	r3, #0
 8006858:	b2db      	uxtb	r3, r3
 800685a:	e003      	b.n	8006864 <HAL_DMA_IRQHandler+0x30c>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2300      	movs	r3, #0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00d      	beq.n	8006884 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800686c:	f003 031f 	and.w	r3, r3, #31
 8006870:	2201      	movs	r2, #1
 8006872:	409a      	lsls	r2, r3
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800687c:	f043 0202 	orr.w	r2, r3, #2
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006888:	f003 031f 	and.w	r3, r3, #31
 800688c:	2204      	movs	r2, #4
 800688e:	409a      	lsls	r2, r3
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	4013      	ands	r3, r2
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 808f 	beq.w	80069b8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a2c      	ldr	r2, [pc, #176]	@ (8006950 <HAL_DMA_IRQHandler+0x3f8>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d04a      	beq.n	800693a <HAL_DMA_IRQHandler+0x3e2>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a2a      	ldr	r2, [pc, #168]	@ (8006954 <HAL_DMA_IRQHandler+0x3fc>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d045      	beq.n	800693a <HAL_DMA_IRQHandler+0x3e2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a29      	ldr	r2, [pc, #164]	@ (8006958 <HAL_DMA_IRQHandler+0x400>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d040      	beq.n	800693a <HAL_DMA_IRQHandler+0x3e2>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a27      	ldr	r2, [pc, #156]	@ (800695c <HAL_DMA_IRQHandler+0x404>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d03b      	beq.n	800693a <HAL_DMA_IRQHandler+0x3e2>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a26      	ldr	r2, [pc, #152]	@ (8006960 <HAL_DMA_IRQHandler+0x408>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d036      	beq.n	800693a <HAL_DMA_IRQHandler+0x3e2>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a24      	ldr	r2, [pc, #144]	@ (8006964 <HAL_DMA_IRQHandler+0x40c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d031      	beq.n	800693a <HAL_DMA_IRQHandler+0x3e2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a23      	ldr	r2, [pc, #140]	@ (8006968 <HAL_DMA_IRQHandler+0x410>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d02c      	beq.n	800693a <HAL_DMA_IRQHandler+0x3e2>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a21      	ldr	r2, [pc, #132]	@ (800696c <HAL_DMA_IRQHandler+0x414>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d027      	beq.n	800693a <HAL_DMA_IRQHandler+0x3e2>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a20      	ldr	r2, [pc, #128]	@ (8006970 <HAL_DMA_IRQHandler+0x418>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d022      	beq.n	800693a <HAL_DMA_IRQHandler+0x3e2>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a1e      	ldr	r2, [pc, #120]	@ (8006974 <HAL_DMA_IRQHandler+0x41c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d01d      	beq.n	800693a <HAL_DMA_IRQHandler+0x3e2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a1d      	ldr	r2, [pc, #116]	@ (8006978 <HAL_DMA_IRQHandler+0x420>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d018      	beq.n	800693a <HAL_DMA_IRQHandler+0x3e2>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a1b      	ldr	r2, [pc, #108]	@ (800697c <HAL_DMA_IRQHandler+0x424>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d013      	beq.n	800693a <HAL_DMA_IRQHandler+0x3e2>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a1a      	ldr	r2, [pc, #104]	@ (8006980 <HAL_DMA_IRQHandler+0x428>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d00e      	beq.n	800693a <HAL_DMA_IRQHandler+0x3e2>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a18      	ldr	r2, [pc, #96]	@ (8006984 <HAL_DMA_IRQHandler+0x42c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d009      	beq.n	800693a <HAL_DMA_IRQHandler+0x3e2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a17      	ldr	r2, [pc, #92]	@ (8006988 <HAL_DMA_IRQHandler+0x430>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d004      	beq.n	800693a <HAL_DMA_IRQHandler+0x3e2>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a15      	ldr	r2, [pc, #84]	@ (800698c <HAL_DMA_IRQHandler+0x434>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d12a      	bne.n	8006990 <HAL_DMA_IRQHandler+0x438>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b00      	cmp	r3, #0
 8006946:	bf14      	ite	ne
 8006948:	2301      	movne	r3, #1
 800694a:	2300      	moveq	r3, #0
 800694c:	b2db      	uxtb	r3, r3
 800694e:	e023      	b.n	8006998 <HAL_DMA_IRQHandler+0x440>
 8006950:	40020010 	.word	0x40020010
 8006954:	40020028 	.word	0x40020028
 8006958:	40020040 	.word	0x40020040
 800695c:	40020058 	.word	0x40020058
 8006960:	40020070 	.word	0x40020070
 8006964:	40020088 	.word	0x40020088
 8006968:	400200a0 	.word	0x400200a0
 800696c:	400200b8 	.word	0x400200b8
 8006970:	40020410 	.word	0x40020410
 8006974:	40020428 	.word	0x40020428
 8006978:	40020440 	.word	0x40020440
 800697c:	40020458 	.word	0x40020458
 8006980:	40020470 	.word	0x40020470
 8006984:	40020488 	.word	0x40020488
 8006988:	400204a0 	.word	0x400204a0
 800698c:	400204b8 	.word	0x400204b8
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2300      	movs	r3, #0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00d      	beq.n	80069b8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069a0:	f003 031f 	and.w	r3, r3, #31
 80069a4:	2204      	movs	r2, #4
 80069a6:	409a      	lsls	r2, r3
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069b0:	f043 0204 	orr.w	r2, r3, #4
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069bc:	f003 031f 	and.w	r3, r3, #31
 80069c0:	2210      	movs	r2, #16
 80069c2:	409a      	lsls	r2, r3
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	4013      	ands	r3, r2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 80a6 	beq.w	8006b1a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a85      	ldr	r2, [pc, #532]	@ (8006be8 <HAL_DMA_IRQHandler+0x690>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d04a      	beq.n	8006a6e <HAL_DMA_IRQHandler+0x516>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a83      	ldr	r2, [pc, #524]	@ (8006bec <HAL_DMA_IRQHandler+0x694>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d045      	beq.n	8006a6e <HAL_DMA_IRQHandler+0x516>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a82      	ldr	r2, [pc, #520]	@ (8006bf0 <HAL_DMA_IRQHandler+0x698>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d040      	beq.n	8006a6e <HAL_DMA_IRQHandler+0x516>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a80      	ldr	r2, [pc, #512]	@ (8006bf4 <HAL_DMA_IRQHandler+0x69c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d03b      	beq.n	8006a6e <HAL_DMA_IRQHandler+0x516>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a7f      	ldr	r2, [pc, #508]	@ (8006bf8 <HAL_DMA_IRQHandler+0x6a0>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d036      	beq.n	8006a6e <HAL_DMA_IRQHandler+0x516>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a7d      	ldr	r2, [pc, #500]	@ (8006bfc <HAL_DMA_IRQHandler+0x6a4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d031      	beq.n	8006a6e <HAL_DMA_IRQHandler+0x516>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a7c      	ldr	r2, [pc, #496]	@ (8006c00 <HAL_DMA_IRQHandler+0x6a8>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d02c      	beq.n	8006a6e <HAL_DMA_IRQHandler+0x516>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a7a      	ldr	r2, [pc, #488]	@ (8006c04 <HAL_DMA_IRQHandler+0x6ac>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d027      	beq.n	8006a6e <HAL_DMA_IRQHandler+0x516>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a79      	ldr	r2, [pc, #484]	@ (8006c08 <HAL_DMA_IRQHandler+0x6b0>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d022      	beq.n	8006a6e <HAL_DMA_IRQHandler+0x516>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a77      	ldr	r2, [pc, #476]	@ (8006c0c <HAL_DMA_IRQHandler+0x6b4>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d01d      	beq.n	8006a6e <HAL_DMA_IRQHandler+0x516>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a76      	ldr	r2, [pc, #472]	@ (8006c10 <HAL_DMA_IRQHandler+0x6b8>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d018      	beq.n	8006a6e <HAL_DMA_IRQHandler+0x516>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a74      	ldr	r2, [pc, #464]	@ (8006c14 <HAL_DMA_IRQHandler+0x6bc>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d013      	beq.n	8006a6e <HAL_DMA_IRQHandler+0x516>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a73      	ldr	r2, [pc, #460]	@ (8006c18 <HAL_DMA_IRQHandler+0x6c0>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d00e      	beq.n	8006a6e <HAL_DMA_IRQHandler+0x516>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a71      	ldr	r2, [pc, #452]	@ (8006c1c <HAL_DMA_IRQHandler+0x6c4>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d009      	beq.n	8006a6e <HAL_DMA_IRQHandler+0x516>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a70      	ldr	r2, [pc, #448]	@ (8006c20 <HAL_DMA_IRQHandler+0x6c8>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d004      	beq.n	8006a6e <HAL_DMA_IRQHandler+0x516>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a6e      	ldr	r2, [pc, #440]	@ (8006c24 <HAL_DMA_IRQHandler+0x6cc>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d10a      	bne.n	8006a84 <HAL_DMA_IRQHandler+0x52c>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0308 	and.w	r3, r3, #8
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	bf14      	ite	ne
 8006a7c:	2301      	movne	r3, #1
 8006a7e:	2300      	moveq	r3, #0
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	e009      	b.n	8006a98 <HAL_DMA_IRQHandler+0x540>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0304 	and.w	r3, r3, #4
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	bf14      	ite	ne
 8006a92:	2301      	movne	r3, #1
 8006a94:	2300      	moveq	r3, #0
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d03e      	beq.n	8006b1a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aa0:	f003 031f 	and.w	r3, r3, #31
 8006aa4:	2210      	movs	r2, #16
 8006aa6:	409a      	lsls	r2, r3
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d018      	beq.n	8006aec <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d108      	bne.n	8006ada <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d024      	beq.n	8006b1a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	4798      	blx	r3
 8006ad8:	e01f      	b.n	8006b1a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d01b      	beq.n	8006b1a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	4798      	blx	r3
 8006aea:	e016      	b.n	8006b1a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d107      	bne.n	8006b0a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0208 	bic.w	r2, r2, #8
 8006b08:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b1e:	f003 031f 	and.w	r3, r3, #31
 8006b22:	2220      	movs	r2, #32
 8006b24:	409a      	lsls	r2, r3
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	4013      	ands	r3, r2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 8110 	beq.w	8006d50 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a2c      	ldr	r2, [pc, #176]	@ (8006be8 <HAL_DMA_IRQHandler+0x690>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d04a      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x678>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a2b      	ldr	r2, [pc, #172]	@ (8006bec <HAL_DMA_IRQHandler+0x694>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d045      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x678>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a29      	ldr	r2, [pc, #164]	@ (8006bf0 <HAL_DMA_IRQHandler+0x698>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d040      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x678>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a28      	ldr	r2, [pc, #160]	@ (8006bf4 <HAL_DMA_IRQHandler+0x69c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d03b      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x678>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a26      	ldr	r2, [pc, #152]	@ (8006bf8 <HAL_DMA_IRQHandler+0x6a0>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d036      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x678>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a25      	ldr	r2, [pc, #148]	@ (8006bfc <HAL_DMA_IRQHandler+0x6a4>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d031      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x678>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a23      	ldr	r2, [pc, #140]	@ (8006c00 <HAL_DMA_IRQHandler+0x6a8>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d02c      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x678>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a22      	ldr	r2, [pc, #136]	@ (8006c04 <HAL_DMA_IRQHandler+0x6ac>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d027      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x678>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a20      	ldr	r2, [pc, #128]	@ (8006c08 <HAL_DMA_IRQHandler+0x6b0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d022      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x678>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8006c0c <HAL_DMA_IRQHandler+0x6b4>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d01d      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x678>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a1d      	ldr	r2, [pc, #116]	@ (8006c10 <HAL_DMA_IRQHandler+0x6b8>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d018      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x678>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8006c14 <HAL_DMA_IRQHandler+0x6bc>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d013      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x678>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a1a      	ldr	r2, [pc, #104]	@ (8006c18 <HAL_DMA_IRQHandler+0x6c0>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d00e      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x678>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a19      	ldr	r2, [pc, #100]	@ (8006c1c <HAL_DMA_IRQHandler+0x6c4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d009      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x678>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a17      	ldr	r2, [pc, #92]	@ (8006c20 <HAL_DMA_IRQHandler+0x6c8>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d004      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x678>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a16      	ldr	r2, [pc, #88]	@ (8006c24 <HAL_DMA_IRQHandler+0x6cc>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d12b      	bne.n	8006c28 <HAL_DMA_IRQHandler+0x6d0>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0310 	and.w	r3, r3, #16
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	bf14      	ite	ne
 8006bde:	2301      	movne	r3, #1
 8006be0:	2300      	moveq	r3, #0
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	e02a      	b.n	8006c3c <HAL_DMA_IRQHandler+0x6e4>
 8006be6:	bf00      	nop
 8006be8:	40020010 	.word	0x40020010
 8006bec:	40020028 	.word	0x40020028
 8006bf0:	40020040 	.word	0x40020040
 8006bf4:	40020058 	.word	0x40020058
 8006bf8:	40020070 	.word	0x40020070
 8006bfc:	40020088 	.word	0x40020088
 8006c00:	400200a0 	.word	0x400200a0
 8006c04:	400200b8 	.word	0x400200b8
 8006c08:	40020410 	.word	0x40020410
 8006c0c:	40020428 	.word	0x40020428
 8006c10:	40020440 	.word	0x40020440
 8006c14:	40020458 	.word	0x40020458
 8006c18:	40020470 	.word	0x40020470
 8006c1c:	40020488 	.word	0x40020488
 8006c20:	400204a0 	.word	0x400204a0
 8006c24:	400204b8 	.word	0x400204b8
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	bf14      	ite	ne
 8006c36:	2301      	movne	r3, #1
 8006c38:	2300      	moveq	r3, #0
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 8087 	beq.w	8006d50 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c46:	f003 031f 	and.w	r3, r3, #31
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	409a      	lsls	r2, r3
 8006c4e:	6a3b      	ldr	r3, [r7, #32]
 8006c50:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b04      	cmp	r3, #4
 8006c5c:	d139      	bne.n	8006cd2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f022 0216 	bic.w	r2, r2, #22
 8006c6c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	695a      	ldr	r2, [r3, #20]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c7c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d103      	bne.n	8006c8e <HAL_DMA_IRQHandler+0x736>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d007      	beq.n	8006c9e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 0208 	bic.w	r2, r2, #8
 8006c9c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ca2:	f003 031f 	and.w	r3, r3, #31
 8006ca6:	223f      	movs	r2, #63	@ 0x3f
 8006ca8:	409a      	lsls	r2, r3
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 834a 	beq.w	800735c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	4798      	blx	r3
          }
          return;
 8006cd0:	e344      	b.n	800735c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d018      	beq.n	8006d12 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d108      	bne.n	8006d00 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d02c      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	4798      	blx	r3
 8006cfe:	e027      	b.n	8006d50 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d023      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	4798      	blx	r3
 8006d10:	e01e      	b.n	8006d50 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10f      	bne.n	8006d40 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 0210 	bic.w	r2, r2, #16
 8006d2e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 8306 	beq.w	8007366 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f000 8088 	beq.w	8006e78 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2204      	movs	r2, #4
 8006d6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a7a      	ldr	r2, [pc, #488]	@ (8006f60 <HAL_DMA_IRQHandler+0xa08>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d04a      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x8b8>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a79      	ldr	r2, [pc, #484]	@ (8006f64 <HAL_DMA_IRQHandler+0xa0c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d045      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x8b8>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a77      	ldr	r2, [pc, #476]	@ (8006f68 <HAL_DMA_IRQHandler+0xa10>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d040      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x8b8>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a76      	ldr	r2, [pc, #472]	@ (8006f6c <HAL_DMA_IRQHandler+0xa14>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d03b      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x8b8>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a74      	ldr	r2, [pc, #464]	@ (8006f70 <HAL_DMA_IRQHandler+0xa18>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d036      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x8b8>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a73      	ldr	r2, [pc, #460]	@ (8006f74 <HAL_DMA_IRQHandler+0xa1c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d031      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x8b8>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a71      	ldr	r2, [pc, #452]	@ (8006f78 <HAL_DMA_IRQHandler+0xa20>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d02c      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x8b8>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a70      	ldr	r2, [pc, #448]	@ (8006f7c <HAL_DMA_IRQHandler+0xa24>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d027      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x8b8>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a6e      	ldr	r2, [pc, #440]	@ (8006f80 <HAL_DMA_IRQHandler+0xa28>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d022      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x8b8>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a6d      	ldr	r2, [pc, #436]	@ (8006f84 <HAL_DMA_IRQHandler+0xa2c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d01d      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x8b8>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a6b      	ldr	r2, [pc, #428]	@ (8006f88 <HAL_DMA_IRQHandler+0xa30>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d018      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x8b8>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a6a      	ldr	r2, [pc, #424]	@ (8006f8c <HAL_DMA_IRQHandler+0xa34>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d013      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x8b8>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a68      	ldr	r2, [pc, #416]	@ (8006f90 <HAL_DMA_IRQHandler+0xa38>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00e      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x8b8>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a67      	ldr	r2, [pc, #412]	@ (8006f94 <HAL_DMA_IRQHandler+0xa3c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d009      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x8b8>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a65      	ldr	r2, [pc, #404]	@ (8006f98 <HAL_DMA_IRQHandler+0xa40>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d004      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x8b8>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a64      	ldr	r2, [pc, #400]	@ (8006f9c <HAL_DMA_IRQHandler+0xa44>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d108      	bne.n	8006e22 <HAL_DMA_IRQHandler+0x8ca>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0201 	bic.w	r2, r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]
 8006e20:	e007      	b.n	8006e32 <HAL_DMA_IRQHandler+0x8da>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 0201 	bic.w	r2, r2, #1
 8006e30:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3301      	adds	r3, #1
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d307      	bcc.n	8006e4e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1f2      	bne.n	8006e32 <HAL_DMA_IRQHandler+0x8da>
 8006e4c:	e000      	b.n	8006e50 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006e4e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d004      	beq.n	8006e68 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2203      	movs	r2, #3
 8006e62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006e66:	e003      	b.n	8006e70 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 8272 	beq.w	8007366 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	4798      	blx	r3
 8006e8a:	e26c      	b.n	8007366 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a43      	ldr	r2, [pc, #268]	@ (8006fa0 <HAL_DMA_IRQHandler+0xa48>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d022      	beq.n	8006edc <HAL_DMA_IRQHandler+0x984>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a42      	ldr	r2, [pc, #264]	@ (8006fa4 <HAL_DMA_IRQHandler+0xa4c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d01d      	beq.n	8006edc <HAL_DMA_IRQHandler+0x984>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a40      	ldr	r2, [pc, #256]	@ (8006fa8 <HAL_DMA_IRQHandler+0xa50>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d018      	beq.n	8006edc <HAL_DMA_IRQHandler+0x984>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a3f      	ldr	r2, [pc, #252]	@ (8006fac <HAL_DMA_IRQHandler+0xa54>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d013      	beq.n	8006edc <HAL_DMA_IRQHandler+0x984>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a3d      	ldr	r2, [pc, #244]	@ (8006fb0 <HAL_DMA_IRQHandler+0xa58>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d00e      	beq.n	8006edc <HAL_DMA_IRQHandler+0x984>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a3c      	ldr	r2, [pc, #240]	@ (8006fb4 <HAL_DMA_IRQHandler+0xa5c>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d009      	beq.n	8006edc <HAL_DMA_IRQHandler+0x984>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a3a      	ldr	r2, [pc, #232]	@ (8006fb8 <HAL_DMA_IRQHandler+0xa60>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d004      	beq.n	8006edc <HAL_DMA_IRQHandler+0x984>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a39      	ldr	r2, [pc, #228]	@ (8006fbc <HAL_DMA_IRQHandler+0xa64>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d101      	bne.n	8006ee0 <HAL_DMA_IRQHandler+0x988>
 8006edc:	2301      	movs	r3, #1
 8006ede:	e000      	b.n	8006ee2 <HAL_DMA_IRQHandler+0x98a>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f000 823f 	beq.w	8007366 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ef4:	f003 031f 	and.w	r3, r3, #31
 8006ef8:	2204      	movs	r2, #4
 8006efa:	409a      	lsls	r2, r3
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	4013      	ands	r3, r2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 80cd 	beq.w	80070a0 <HAL_DMA_IRQHandler+0xb48>
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 80c7 	beq.w	80070a0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f16:	f003 031f 	and.w	r3, r3, #31
 8006f1a:	2204      	movs	r2, #4
 8006f1c:	409a      	lsls	r2, r3
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d049      	beq.n	8006fc0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d109      	bne.n	8006f4a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 8210 	beq.w	8007360 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f48:	e20a      	b.n	8007360 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 8206 	beq.w	8007360 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f5c:	e200      	b.n	8007360 <HAL_DMA_IRQHandler+0xe08>
 8006f5e:	bf00      	nop
 8006f60:	40020010 	.word	0x40020010
 8006f64:	40020028 	.word	0x40020028
 8006f68:	40020040 	.word	0x40020040
 8006f6c:	40020058 	.word	0x40020058
 8006f70:	40020070 	.word	0x40020070
 8006f74:	40020088 	.word	0x40020088
 8006f78:	400200a0 	.word	0x400200a0
 8006f7c:	400200b8 	.word	0x400200b8
 8006f80:	40020410 	.word	0x40020410
 8006f84:	40020428 	.word	0x40020428
 8006f88:	40020440 	.word	0x40020440
 8006f8c:	40020458 	.word	0x40020458
 8006f90:	40020470 	.word	0x40020470
 8006f94:	40020488 	.word	0x40020488
 8006f98:	400204a0 	.word	0x400204a0
 8006f9c:	400204b8 	.word	0x400204b8
 8006fa0:	58025408 	.word	0x58025408
 8006fa4:	5802541c 	.word	0x5802541c
 8006fa8:	58025430 	.word	0x58025430
 8006fac:	58025444 	.word	0x58025444
 8006fb0:	58025458 	.word	0x58025458
 8006fb4:	5802546c 	.word	0x5802546c
 8006fb8:	58025480 	.word	0x58025480
 8006fbc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	f003 0320 	and.w	r3, r3, #32
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d160      	bne.n	800708c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a7f      	ldr	r2, [pc, #508]	@ (80071cc <HAL_DMA_IRQHandler+0xc74>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d04a      	beq.n	800706a <HAL_DMA_IRQHandler+0xb12>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a7d      	ldr	r2, [pc, #500]	@ (80071d0 <HAL_DMA_IRQHandler+0xc78>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d045      	beq.n	800706a <HAL_DMA_IRQHandler+0xb12>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a7c      	ldr	r2, [pc, #496]	@ (80071d4 <HAL_DMA_IRQHandler+0xc7c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d040      	beq.n	800706a <HAL_DMA_IRQHandler+0xb12>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a7a      	ldr	r2, [pc, #488]	@ (80071d8 <HAL_DMA_IRQHandler+0xc80>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d03b      	beq.n	800706a <HAL_DMA_IRQHandler+0xb12>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a79      	ldr	r2, [pc, #484]	@ (80071dc <HAL_DMA_IRQHandler+0xc84>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d036      	beq.n	800706a <HAL_DMA_IRQHandler+0xb12>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a77      	ldr	r2, [pc, #476]	@ (80071e0 <HAL_DMA_IRQHandler+0xc88>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d031      	beq.n	800706a <HAL_DMA_IRQHandler+0xb12>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a76      	ldr	r2, [pc, #472]	@ (80071e4 <HAL_DMA_IRQHandler+0xc8c>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d02c      	beq.n	800706a <HAL_DMA_IRQHandler+0xb12>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a74      	ldr	r2, [pc, #464]	@ (80071e8 <HAL_DMA_IRQHandler+0xc90>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d027      	beq.n	800706a <HAL_DMA_IRQHandler+0xb12>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a73      	ldr	r2, [pc, #460]	@ (80071ec <HAL_DMA_IRQHandler+0xc94>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d022      	beq.n	800706a <HAL_DMA_IRQHandler+0xb12>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a71      	ldr	r2, [pc, #452]	@ (80071f0 <HAL_DMA_IRQHandler+0xc98>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d01d      	beq.n	800706a <HAL_DMA_IRQHandler+0xb12>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a70      	ldr	r2, [pc, #448]	@ (80071f4 <HAL_DMA_IRQHandler+0xc9c>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d018      	beq.n	800706a <HAL_DMA_IRQHandler+0xb12>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a6e      	ldr	r2, [pc, #440]	@ (80071f8 <HAL_DMA_IRQHandler+0xca0>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d013      	beq.n	800706a <HAL_DMA_IRQHandler+0xb12>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a6d      	ldr	r2, [pc, #436]	@ (80071fc <HAL_DMA_IRQHandler+0xca4>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d00e      	beq.n	800706a <HAL_DMA_IRQHandler+0xb12>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a6b      	ldr	r2, [pc, #428]	@ (8007200 <HAL_DMA_IRQHandler+0xca8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d009      	beq.n	800706a <HAL_DMA_IRQHandler+0xb12>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a6a      	ldr	r2, [pc, #424]	@ (8007204 <HAL_DMA_IRQHandler+0xcac>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d004      	beq.n	800706a <HAL_DMA_IRQHandler+0xb12>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a68      	ldr	r2, [pc, #416]	@ (8007208 <HAL_DMA_IRQHandler+0xcb0>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d108      	bne.n	800707c <HAL_DMA_IRQHandler+0xb24>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0208 	bic.w	r2, r2, #8
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	e007      	b.n	800708c <HAL_DMA_IRQHandler+0xb34>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0204 	bic.w	r2, r2, #4
 800708a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 8165 	beq.w	8007360 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800709e:	e15f      	b.n	8007360 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070a4:	f003 031f 	and.w	r3, r3, #31
 80070a8:	2202      	movs	r2, #2
 80070aa:	409a      	lsls	r2, r3
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	4013      	ands	r3, r2
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 80c5 	beq.w	8007240 <HAL_DMA_IRQHandler+0xce8>
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	f003 0302 	and.w	r3, r3, #2
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 80bf 	beq.w	8007240 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070c6:	f003 031f 	and.w	r3, r3, #31
 80070ca:	2202      	movs	r2, #2
 80070cc:	409a      	lsls	r2, r3
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d018      	beq.n	800710e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d109      	bne.n	80070fa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f000 813a 	beq.w	8007364 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070f8:	e134      	b.n	8007364 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 8130 	beq.w	8007364 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800710c:	e12a      	b.n	8007364 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f003 0320 	and.w	r3, r3, #32
 8007114:	2b00      	cmp	r3, #0
 8007116:	f040 8089 	bne.w	800722c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a2b      	ldr	r2, [pc, #172]	@ (80071cc <HAL_DMA_IRQHandler+0xc74>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d04a      	beq.n	80071ba <HAL_DMA_IRQHandler+0xc62>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a29      	ldr	r2, [pc, #164]	@ (80071d0 <HAL_DMA_IRQHandler+0xc78>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d045      	beq.n	80071ba <HAL_DMA_IRQHandler+0xc62>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a28      	ldr	r2, [pc, #160]	@ (80071d4 <HAL_DMA_IRQHandler+0xc7c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d040      	beq.n	80071ba <HAL_DMA_IRQHandler+0xc62>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a26      	ldr	r2, [pc, #152]	@ (80071d8 <HAL_DMA_IRQHandler+0xc80>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d03b      	beq.n	80071ba <HAL_DMA_IRQHandler+0xc62>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a25      	ldr	r2, [pc, #148]	@ (80071dc <HAL_DMA_IRQHandler+0xc84>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d036      	beq.n	80071ba <HAL_DMA_IRQHandler+0xc62>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a23      	ldr	r2, [pc, #140]	@ (80071e0 <HAL_DMA_IRQHandler+0xc88>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d031      	beq.n	80071ba <HAL_DMA_IRQHandler+0xc62>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a22      	ldr	r2, [pc, #136]	@ (80071e4 <HAL_DMA_IRQHandler+0xc8c>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d02c      	beq.n	80071ba <HAL_DMA_IRQHandler+0xc62>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a20      	ldr	r2, [pc, #128]	@ (80071e8 <HAL_DMA_IRQHandler+0xc90>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d027      	beq.n	80071ba <HAL_DMA_IRQHandler+0xc62>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a1f      	ldr	r2, [pc, #124]	@ (80071ec <HAL_DMA_IRQHandler+0xc94>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d022      	beq.n	80071ba <HAL_DMA_IRQHandler+0xc62>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a1d      	ldr	r2, [pc, #116]	@ (80071f0 <HAL_DMA_IRQHandler+0xc98>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d01d      	beq.n	80071ba <HAL_DMA_IRQHandler+0xc62>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a1c      	ldr	r2, [pc, #112]	@ (80071f4 <HAL_DMA_IRQHandler+0xc9c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d018      	beq.n	80071ba <HAL_DMA_IRQHandler+0xc62>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a1a      	ldr	r2, [pc, #104]	@ (80071f8 <HAL_DMA_IRQHandler+0xca0>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d013      	beq.n	80071ba <HAL_DMA_IRQHandler+0xc62>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a19      	ldr	r2, [pc, #100]	@ (80071fc <HAL_DMA_IRQHandler+0xca4>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d00e      	beq.n	80071ba <HAL_DMA_IRQHandler+0xc62>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a17      	ldr	r2, [pc, #92]	@ (8007200 <HAL_DMA_IRQHandler+0xca8>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d009      	beq.n	80071ba <HAL_DMA_IRQHandler+0xc62>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a16      	ldr	r2, [pc, #88]	@ (8007204 <HAL_DMA_IRQHandler+0xcac>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d004      	beq.n	80071ba <HAL_DMA_IRQHandler+0xc62>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a14      	ldr	r2, [pc, #80]	@ (8007208 <HAL_DMA_IRQHandler+0xcb0>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d128      	bne.n	800720c <HAL_DMA_IRQHandler+0xcb4>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f022 0214 	bic.w	r2, r2, #20
 80071c8:	601a      	str	r2, [r3, #0]
 80071ca:	e027      	b.n	800721c <HAL_DMA_IRQHandler+0xcc4>
 80071cc:	40020010 	.word	0x40020010
 80071d0:	40020028 	.word	0x40020028
 80071d4:	40020040 	.word	0x40020040
 80071d8:	40020058 	.word	0x40020058
 80071dc:	40020070 	.word	0x40020070
 80071e0:	40020088 	.word	0x40020088
 80071e4:	400200a0 	.word	0x400200a0
 80071e8:	400200b8 	.word	0x400200b8
 80071ec:	40020410 	.word	0x40020410
 80071f0:	40020428 	.word	0x40020428
 80071f4:	40020440 	.word	0x40020440
 80071f8:	40020458 	.word	0x40020458
 80071fc:	40020470 	.word	0x40020470
 8007200:	40020488 	.word	0x40020488
 8007204:	400204a0 	.word	0x400204a0
 8007208:	400204b8 	.word	0x400204b8
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 020a 	bic.w	r2, r2, #10
 800721a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 8097 	beq.w	8007364 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800723e:	e091      	b.n	8007364 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007244:	f003 031f 	and.w	r3, r3, #31
 8007248:	2208      	movs	r2, #8
 800724a:	409a      	lsls	r2, r3
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	4013      	ands	r3, r2
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 8088 	beq.w	8007366 <HAL_DMA_IRQHandler+0xe0e>
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	f003 0308 	and.w	r3, r3, #8
 800725c:	2b00      	cmp	r3, #0
 800725e:	f000 8082 	beq.w	8007366 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a41      	ldr	r2, [pc, #260]	@ (800736c <HAL_DMA_IRQHandler+0xe14>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d04a      	beq.n	8007302 <HAL_DMA_IRQHandler+0xdaa>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a3f      	ldr	r2, [pc, #252]	@ (8007370 <HAL_DMA_IRQHandler+0xe18>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d045      	beq.n	8007302 <HAL_DMA_IRQHandler+0xdaa>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a3e      	ldr	r2, [pc, #248]	@ (8007374 <HAL_DMA_IRQHandler+0xe1c>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d040      	beq.n	8007302 <HAL_DMA_IRQHandler+0xdaa>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a3c      	ldr	r2, [pc, #240]	@ (8007378 <HAL_DMA_IRQHandler+0xe20>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d03b      	beq.n	8007302 <HAL_DMA_IRQHandler+0xdaa>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a3b      	ldr	r2, [pc, #236]	@ (800737c <HAL_DMA_IRQHandler+0xe24>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d036      	beq.n	8007302 <HAL_DMA_IRQHandler+0xdaa>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a39      	ldr	r2, [pc, #228]	@ (8007380 <HAL_DMA_IRQHandler+0xe28>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d031      	beq.n	8007302 <HAL_DMA_IRQHandler+0xdaa>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a38      	ldr	r2, [pc, #224]	@ (8007384 <HAL_DMA_IRQHandler+0xe2c>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d02c      	beq.n	8007302 <HAL_DMA_IRQHandler+0xdaa>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a36      	ldr	r2, [pc, #216]	@ (8007388 <HAL_DMA_IRQHandler+0xe30>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d027      	beq.n	8007302 <HAL_DMA_IRQHandler+0xdaa>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a35      	ldr	r2, [pc, #212]	@ (800738c <HAL_DMA_IRQHandler+0xe34>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d022      	beq.n	8007302 <HAL_DMA_IRQHandler+0xdaa>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a33      	ldr	r2, [pc, #204]	@ (8007390 <HAL_DMA_IRQHandler+0xe38>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d01d      	beq.n	8007302 <HAL_DMA_IRQHandler+0xdaa>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a32      	ldr	r2, [pc, #200]	@ (8007394 <HAL_DMA_IRQHandler+0xe3c>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d018      	beq.n	8007302 <HAL_DMA_IRQHandler+0xdaa>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a30      	ldr	r2, [pc, #192]	@ (8007398 <HAL_DMA_IRQHandler+0xe40>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d013      	beq.n	8007302 <HAL_DMA_IRQHandler+0xdaa>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a2f      	ldr	r2, [pc, #188]	@ (800739c <HAL_DMA_IRQHandler+0xe44>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d00e      	beq.n	8007302 <HAL_DMA_IRQHandler+0xdaa>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a2d      	ldr	r2, [pc, #180]	@ (80073a0 <HAL_DMA_IRQHandler+0xe48>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d009      	beq.n	8007302 <HAL_DMA_IRQHandler+0xdaa>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a2c      	ldr	r2, [pc, #176]	@ (80073a4 <HAL_DMA_IRQHandler+0xe4c>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d004      	beq.n	8007302 <HAL_DMA_IRQHandler+0xdaa>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a2a      	ldr	r2, [pc, #168]	@ (80073a8 <HAL_DMA_IRQHandler+0xe50>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d108      	bne.n	8007314 <HAL_DMA_IRQHandler+0xdbc>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f022 021c 	bic.w	r2, r2, #28
 8007310:	601a      	str	r2, [r3, #0]
 8007312:	e007      	b.n	8007324 <HAL_DMA_IRQHandler+0xdcc>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f022 020e 	bic.w	r2, r2, #14
 8007322:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007328:	f003 031f 	and.w	r3, r3, #31
 800732c:	2201      	movs	r2, #1
 800732e:	409a      	lsls	r2, r3
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800734e:	2b00      	cmp	r3, #0
 8007350:	d009      	beq.n	8007366 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	4798      	blx	r3
 800735a:	e004      	b.n	8007366 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800735c:	bf00      	nop
 800735e:	e002      	b.n	8007366 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007360:	bf00      	nop
 8007362:	e000      	b.n	8007366 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007364:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007366:	3728      	adds	r7, #40	@ 0x28
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	40020010 	.word	0x40020010
 8007370:	40020028 	.word	0x40020028
 8007374:	40020040 	.word	0x40020040
 8007378:	40020058 	.word	0x40020058
 800737c:	40020070 	.word	0x40020070
 8007380:	40020088 	.word	0x40020088
 8007384:	400200a0 	.word	0x400200a0
 8007388:	400200b8 	.word	0x400200b8
 800738c:	40020410 	.word	0x40020410
 8007390:	40020428 	.word	0x40020428
 8007394:	40020440 	.word	0x40020440
 8007398:	40020458 	.word	0x40020458
 800739c:	40020470 	.word	0x40020470
 80073a0:	40020488 	.word	0x40020488
 80073a4:	400204a0 	.word	0x400204a0
 80073a8:	400204b8 	.word	0x400204b8

080073ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b087      	sub	sp, #28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073be:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073c4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a7f      	ldr	r2, [pc, #508]	@ (80075c8 <DMA_SetConfig+0x21c>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d072      	beq.n	80074b6 <DMA_SetConfig+0x10a>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a7d      	ldr	r2, [pc, #500]	@ (80075cc <DMA_SetConfig+0x220>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d06d      	beq.n	80074b6 <DMA_SetConfig+0x10a>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a7c      	ldr	r2, [pc, #496]	@ (80075d0 <DMA_SetConfig+0x224>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d068      	beq.n	80074b6 <DMA_SetConfig+0x10a>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a7a      	ldr	r2, [pc, #488]	@ (80075d4 <DMA_SetConfig+0x228>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d063      	beq.n	80074b6 <DMA_SetConfig+0x10a>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a79      	ldr	r2, [pc, #484]	@ (80075d8 <DMA_SetConfig+0x22c>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d05e      	beq.n	80074b6 <DMA_SetConfig+0x10a>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a77      	ldr	r2, [pc, #476]	@ (80075dc <DMA_SetConfig+0x230>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d059      	beq.n	80074b6 <DMA_SetConfig+0x10a>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a76      	ldr	r2, [pc, #472]	@ (80075e0 <DMA_SetConfig+0x234>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d054      	beq.n	80074b6 <DMA_SetConfig+0x10a>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a74      	ldr	r2, [pc, #464]	@ (80075e4 <DMA_SetConfig+0x238>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d04f      	beq.n	80074b6 <DMA_SetConfig+0x10a>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a73      	ldr	r2, [pc, #460]	@ (80075e8 <DMA_SetConfig+0x23c>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d04a      	beq.n	80074b6 <DMA_SetConfig+0x10a>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a71      	ldr	r2, [pc, #452]	@ (80075ec <DMA_SetConfig+0x240>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d045      	beq.n	80074b6 <DMA_SetConfig+0x10a>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a70      	ldr	r2, [pc, #448]	@ (80075f0 <DMA_SetConfig+0x244>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d040      	beq.n	80074b6 <DMA_SetConfig+0x10a>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a6e      	ldr	r2, [pc, #440]	@ (80075f4 <DMA_SetConfig+0x248>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d03b      	beq.n	80074b6 <DMA_SetConfig+0x10a>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a6d      	ldr	r2, [pc, #436]	@ (80075f8 <DMA_SetConfig+0x24c>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d036      	beq.n	80074b6 <DMA_SetConfig+0x10a>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a6b      	ldr	r2, [pc, #428]	@ (80075fc <DMA_SetConfig+0x250>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d031      	beq.n	80074b6 <DMA_SetConfig+0x10a>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a6a      	ldr	r2, [pc, #424]	@ (8007600 <DMA_SetConfig+0x254>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d02c      	beq.n	80074b6 <DMA_SetConfig+0x10a>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a68      	ldr	r2, [pc, #416]	@ (8007604 <DMA_SetConfig+0x258>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d027      	beq.n	80074b6 <DMA_SetConfig+0x10a>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a67      	ldr	r2, [pc, #412]	@ (8007608 <DMA_SetConfig+0x25c>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d022      	beq.n	80074b6 <DMA_SetConfig+0x10a>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a65      	ldr	r2, [pc, #404]	@ (800760c <DMA_SetConfig+0x260>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d01d      	beq.n	80074b6 <DMA_SetConfig+0x10a>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a64      	ldr	r2, [pc, #400]	@ (8007610 <DMA_SetConfig+0x264>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d018      	beq.n	80074b6 <DMA_SetConfig+0x10a>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a62      	ldr	r2, [pc, #392]	@ (8007614 <DMA_SetConfig+0x268>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d013      	beq.n	80074b6 <DMA_SetConfig+0x10a>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a61      	ldr	r2, [pc, #388]	@ (8007618 <DMA_SetConfig+0x26c>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00e      	beq.n	80074b6 <DMA_SetConfig+0x10a>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a5f      	ldr	r2, [pc, #380]	@ (800761c <DMA_SetConfig+0x270>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d009      	beq.n	80074b6 <DMA_SetConfig+0x10a>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a5e      	ldr	r2, [pc, #376]	@ (8007620 <DMA_SetConfig+0x274>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d004      	beq.n	80074b6 <DMA_SetConfig+0x10a>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a5c      	ldr	r2, [pc, #368]	@ (8007624 <DMA_SetConfig+0x278>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d101      	bne.n	80074ba <DMA_SetConfig+0x10e>
 80074b6:	2301      	movs	r3, #1
 80074b8:	e000      	b.n	80074bc <DMA_SetConfig+0x110>
 80074ba:	2300      	movs	r3, #0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00d      	beq.n	80074dc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80074c8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d004      	beq.n	80074dc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80074da:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a39      	ldr	r2, [pc, #228]	@ (80075c8 <DMA_SetConfig+0x21c>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d04a      	beq.n	800757c <DMA_SetConfig+0x1d0>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a38      	ldr	r2, [pc, #224]	@ (80075cc <DMA_SetConfig+0x220>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d045      	beq.n	800757c <DMA_SetConfig+0x1d0>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a36      	ldr	r2, [pc, #216]	@ (80075d0 <DMA_SetConfig+0x224>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d040      	beq.n	800757c <DMA_SetConfig+0x1d0>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a35      	ldr	r2, [pc, #212]	@ (80075d4 <DMA_SetConfig+0x228>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d03b      	beq.n	800757c <DMA_SetConfig+0x1d0>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a33      	ldr	r2, [pc, #204]	@ (80075d8 <DMA_SetConfig+0x22c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d036      	beq.n	800757c <DMA_SetConfig+0x1d0>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a32      	ldr	r2, [pc, #200]	@ (80075dc <DMA_SetConfig+0x230>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d031      	beq.n	800757c <DMA_SetConfig+0x1d0>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a30      	ldr	r2, [pc, #192]	@ (80075e0 <DMA_SetConfig+0x234>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d02c      	beq.n	800757c <DMA_SetConfig+0x1d0>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a2f      	ldr	r2, [pc, #188]	@ (80075e4 <DMA_SetConfig+0x238>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d027      	beq.n	800757c <DMA_SetConfig+0x1d0>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a2d      	ldr	r2, [pc, #180]	@ (80075e8 <DMA_SetConfig+0x23c>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d022      	beq.n	800757c <DMA_SetConfig+0x1d0>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a2c      	ldr	r2, [pc, #176]	@ (80075ec <DMA_SetConfig+0x240>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d01d      	beq.n	800757c <DMA_SetConfig+0x1d0>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a2a      	ldr	r2, [pc, #168]	@ (80075f0 <DMA_SetConfig+0x244>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d018      	beq.n	800757c <DMA_SetConfig+0x1d0>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a29      	ldr	r2, [pc, #164]	@ (80075f4 <DMA_SetConfig+0x248>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d013      	beq.n	800757c <DMA_SetConfig+0x1d0>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a27      	ldr	r2, [pc, #156]	@ (80075f8 <DMA_SetConfig+0x24c>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d00e      	beq.n	800757c <DMA_SetConfig+0x1d0>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a26      	ldr	r2, [pc, #152]	@ (80075fc <DMA_SetConfig+0x250>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d009      	beq.n	800757c <DMA_SetConfig+0x1d0>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a24      	ldr	r2, [pc, #144]	@ (8007600 <DMA_SetConfig+0x254>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d004      	beq.n	800757c <DMA_SetConfig+0x1d0>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a23      	ldr	r2, [pc, #140]	@ (8007604 <DMA_SetConfig+0x258>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d101      	bne.n	8007580 <DMA_SetConfig+0x1d4>
 800757c:	2301      	movs	r3, #1
 800757e:	e000      	b.n	8007582 <DMA_SetConfig+0x1d6>
 8007580:	2300      	movs	r3, #0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d059      	beq.n	800763a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800758a:	f003 031f 	and.w	r3, r3, #31
 800758e:	223f      	movs	r2, #63	@ 0x3f
 8007590:	409a      	lsls	r2, r3
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80075a4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	2b40      	cmp	r3, #64	@ 0x40
 80075b4:	d138      	bne.n	8007628 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80075c6:	e086      	b.n	80076d6 <DMA_SetConfig+0x32a>
 80075c8:	40020010 	.word	0x40020010
 80075cc:	40020028 	.word	0x40020028
 80075d0:	40020040 	.word	0x40020040
 80075d4:	40020058 	.word	0x40020058
 80075d8:	40020070 	.word	0x40020070
 80075dc:	40020088 	.word	0x40020088
 80075e0:	400200a0 	.word	0x400200a0
 80075e4:	400200b8 	.word	0x400200b8
 80075e8:	40020410 	.word	0x40020410
 80075ec:	40020428 	.word	0x40020428
 80075f0:	40020440 	.word	0x40020440
 80075f4:	40020458 	.word	0x40020458
 80075f8:	40020470 	.word	0x40020470
 80075fc:	40020488 	.word	0x40020488
 8007600:	400204a0 	.word	0x400204a0
 8007604:	400204b8 	.word	0x400204b8
 8007608:	58025408 	.word	0x58025408
 800760c:	5802541c 	.word	0x5802541c
 8007610:	58025430 	.word	0x58025430
 8007614:	58025444 	.word	0x58025444
 8007618:	58025458 	.word	0x58025458
 800761c:	5802546c 	.word	0x5802546c
 8007620:	58025480 	.word	0x58025480
 8007624:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	60da      	str	r2, [r3, #12]
}
 8007638:	e04d      	b.n	80076d6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a29      	ldr	r2, [pc, #164]	@ (80076e4 <DMA_SetConfig+0x338>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d022      	beq.n	800768a <DMA_SetConfig+0x2de>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a27      	ldr	r2, [pc, #156]	@ (80076e8 <DMA_SetConfig+0x33c>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d01d      	beq.n	800768a <DMA_SetConfig+0x2de>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a26      	ldr	r2, [pc, #152]	@ (80076ec <DMA_SetConfig+0x340>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d018      	beq.n	800768a <DMA_SetConfig+0x2de>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a24      	ldr	r2, [pc, #144]	@ (80076f0 <DMA_SetConfig+0x344>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d013      	beq.n	800768a <DMA_SetConfig+0x2de>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a23      	ldr	r2, [pc, #140]	@ (80076f4 <DMA_SetConfig+0x348>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d00e      	beq.n	800768a <DMA_SetConfig+0x2de>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a21      	ldr	r2, [pc, #132]	@ (80076f8 <DMA_SetConfig+0x34c>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d009      	beq.n	800768a <DMA_SetConfig+0x2de>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a20      	ldr	r2, [pc, #128]	@ (80076fc <DMA_SetConfig+0x350>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d004      	beq.n	800768a <DMA_SetConfig+0x2de>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a1e      	ldr	r2, [pc, #120]	@ (8007700 <DMA_SetConfig+0x354>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d101      	bne.n	800768e <DMA_SetConfig+0x2e2>
 800768a:	2301      	movs	r3, #1
 800768c:	e000      	b.n	8007690 <DMA_SetConfig+0x2e4>
 800768e:	2300      	movs	r3, #0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d020      	beq.n	80076d6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007698:	f003 031f 	and.w	r3, r3, #31
 800769c:	2201      	movs	r2, #1
 800769e:	409a      	lsls	r2, r3
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	2b40      	cmp	r3, #64	@ 0x40
 80076b2:	d108      	bne.n	80076c6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	60da      	str	r2, [r3, #12]
}
 80076c4:	e007      	b.n	80076d6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	60da      	str	r2, [r3, #12]
}
 80076d6:	bf00      	nop
 80076d8:	371c      	adds	r7, #28
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	58025408 	.word	0x58025408
 80076e8:	5802541c 	.word	0x5802541c
 80076ec:	58025430 	.word	0x58025430
 80076f0:	58025444 	.word	0x58025444
 80076f4:	58025458 	.word	0x58025458
 80076f8:	5802546c 	.word	0x5802546c
 80076fc:	58025480 	.word	0x58025480
 8007700:	58025494 	.word	0x58025494

08007704 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a42      	ldr	r2, [pc, #264]	@ (800781c <DMA_CalcBaseAndBitshift+0x118>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d04a      	beq.n	80077ac <DMA_CalcBaseAndBitshift+0xa8>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a41      	ldr	r2, [pc, #260]	@ (8007820 <DMA_CalcBaseAndBitshift+0x11c>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d045      	beq.n	80077ac <DMA_CalcBaseAndBitshift+0xa8>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a3f      	ldr	r2, [pc, #252]	@ (8007824 <DMA_CalcBaseAndBitshift+0x120>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d040      	beq.n	80077ac <DMA_CalcBaseAndBitshift+0xa8>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a3e      	ldr	r2, [pc, #248]	@ (8007828 <DMA_CalcBaseAndBitshift+0x124>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d03b      	beq.n	80077ac <DMA_CalcBaseAndBitshift+0xa8>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a3c      	ldr	r2, [pc, #240]	@ (800782c <DMA_CalcBaseAndBitshift+0x128>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d036      	beq.n	80077ac <DMA_CalcBaseAndBitshift+0xa8>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a3b      	ldr	r2, [pc, #236]	@ (8007830 <DMA_CalcBaseAndBitshift+0x12c>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d031      	beq.n	80077ac <DMA_CalcBaseAndBitshift+0xa8>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a39      	ldr	r2, [pc, #228]	@ (8007834 <DMA_CalcBaseAndBitshift+0x130>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d02c      	beq.n	80077ac <DMA_CalcBaseAndBitshift+0xa8>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a38      	ldr	r2, [pc, #224]	@ (8007838 <DMA_CalcBaseAndBitshift+0x134>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d027      	beq.n	80077ac <DMA_CalcBaseAndBitshift+0xa8>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a36      	ldr	r2, [pc, #216]	@ (800783c <DMA_CalcBaseAndBitshift+0x138>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d022      	beq.n	80077ac <DMA_CalcBaseAndBitshift+0xa8>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a35      	ldr	r2, [pc, #212]	@ (8007840 <DMA_CalcBaseAndBitshift+0x13c>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d01d      	beq.n	80077ac <DMA_CalcBaseAndBitshift+0xa8>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a33      	ldr	r2, [pc, #204]	@ (8007844 <DMA_CalcBaseAndBitshift+0x140>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d018      	beq.n	80077ac <DMA_CalcBaseAndBitshift+0xa8>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a32      	ldr	r2, [pc, #200]	@ (8007848 <DMA_CalcBaseAndBitshift+0x144>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d013      	beq.n	80077ac <DMA_CalcBaseAndBitshift+0xa8>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a30      	ldr	r2, [pc, #192]	@ (800784c <DMA_CalcBaseAndBitshift+0x148>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d00e      	beq.n	80077ac <DMA_CalcBaseAndBitshift+0xa8>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a2f      	ldr	r2, [pc, #188]	@ (8007850 <DMA_CalcBaseAndBitshift+0x14c>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d009      	beq.n	80077ac <DMA_CalcBaseAndBitshift+0xa8>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a2d      	ldr	r2, [pc, #180]	@ (8007854 <DMA_CalcBaseAndBitshift+0x150>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d004      	beq.n	80077ac <DMA_CalcBaseAndBitshift+0xa8>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a2c      	ldr	r2, [pc, #176]	@ (8007858 <DMA_CalcBaseAndBitshift+0x154>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d101      	bne.n	80077b0 <DMA_CalcBaseAndBitshift+0xac>
 80077ac:	2301      	movs	r3, #1
 80077ae:	e000      	b.n	80077b2 <DMA_CalcBaseAndBitshift+0xae>
 80077b0:	2300      	movs	r3, #0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d024      	beq.n	8007800 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	3b10      	subs	r3, #16
 80077be:	4a27      	ldr	r2, [pc, #156]	@ (800785c <DMA_CalcBaseAndBitshift+0x158>)
 80077c0:	fba2 2303 	umull	r2, r3, r2, r3
 80077c4:	091b      	lsrs	r3, r3, #4
 80077c6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f003 0307 	and.w	r3, r3, #7
 80077ce:	4a24      	ldr	r2, [pc, #144]	@ (8007860 <DMA_CalcBaseAndBitshift+0x15c>)
 80077d0:	5cd3      	ldrb	r3, [r2, r3]
 80077d2:	461a      	mov	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d908      	bls.n	80077f0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	461a      	mov	r2, r3
 80077e4:	4b1f      	ldr	r3, [pc, #124]	@ (8007864 <DMA_CalcBaseAndBitshift+0x160>)
 80077e6:	4013      	ands	r3, r2
 80077e8:	1d1a      	adds	r2, r3, #4
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	659a      	str	r2, [r3, #88]	@ 0x58
 80077ee:	e00d      	b.n	800780c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	461a      	mov	r2, r3
 80077f6:	4b1b      	ldr	r3, [pc, #108]	@ (8007864 <DMA_CalcBaseAndBitshift+0x160>)
 80077f8:	4013      	ands	r3, r2
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80077fe:	e005      	b.n	800780c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007810:	4618      	mov	r0, r3
 8007812:	3714      	adds	r7, #20
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	40020010 	.word	0x40020010
 8007820:	40020028 	.word	0x40020028
 8007824:	40020040 	.word	0x40020040
 8007828:	40020058 	.word	0x40020058
 800782c:	40020070 	.word	0x40020070
 8007830:	40020088 	.word	0x40020088
 8007834:	400200a0 	.word	0x400200a0
 8007838:	400200b8 	.word	0x400200b8
 800783c:	40020410 	.word	0x40020410
 8007840:	40020428 	.word	0x40020428
 8007844:	40020440 	.word	0x40020440
 8007848:	40020458 	.word	0x40020458
 800784c:	40020470 	.word	0x40020470
 8007850:	40020488 	.word	0x40020488
 8007854:	400204a0 	.word	0x400204a0
 8007858:	400204b8 	.word	0x400204b8
 800785c:	aaaaaaab 	.word	0xaaaaaaab
 8007860:	0800fe68 	.word	0x0800fe68
 8007864:	fffffc00 	.word	0xfffffc00

08007868 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d120      	bne.n	80078be <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007880:	2b03      	cmp	r3, #3
 8007882:	d858      	bhi.n	8007936 <DMA_CheckFifoParam+0xce>
 8007884:	a201      	add	r2, pc, #4	@ (adr r2, 800788c <DMA_CheckFifoParam+0x24>)
 8007886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788a:	bf00      	nop
 800788c:	0800789d 	.word	0x0800789d
 8007890:	080078af 	.word	0x080078af
 8007894:	0800789d 	.word	0x0800789d
 8007898:	08007937 	.word	0x08007937
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d048      	beq.n	800793a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80078ac:	e045      	b.n	800793a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80078b6:	d142      	bne.n	800793e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80078bc:	e03f      	b.n	800793e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078c6:	d123      	bne.n	8007910 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078cc:	2b03      	cmp	r3, #3
 80078ce:	d838      	bhi.n	8007942 <DMA_CheckFifoParam+0xda>
 80078d0:	a201      	add	r2, pc, #4	@ (adr r2, 80078d8 <DMA_CheckFifoParam+0x70>)
 80078d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d6:	bf00      	nop
 80078d8:	080078e9 	.word	0x080078e9
 80078dc:	080078ef 	.word	0x080078ef
 80078e0:	080078e9 	.word	0x080078e9
 80078e4:	08007901 	.word	0x08007901
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	73fb      	strb	r3, [r7, #15]
        break;
 80078ec:	e030      	b.n	8007950 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d025      	beq.n	8007946 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80078fe:	e022      	b.n	8007946 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007904:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007908:	d11f      	bne.n	800794a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800790e:	e01c      	b.n	800794a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007914:	2b02      	cmp	r3, #2
 8007916:	d902      	bls.n	800791e <DMA_CheckFifoParam+0xb6>
 8007918:	2b03      	cmp	r3, #3
 800791a:	d003      	beq.n	8007924 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800791c:	e018      	b.n	8007950 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	73fb      	strb	r3, [r7, #15]
        break;
 8007922:	e015      	b.n	8007950 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007928:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00e      	beq.n	800794e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	73fb      	strb	r3, [r7, #15]
    break;
 8007934:	e00b      	b.n	800794e <DMA_CheckFifoParam+0xe6>
        break;
 8007936:	bf00      	nop
 8007938:	e00a      	b.n	8007950 <DMA_CheckFifoParam+0xe8>
        break;
 800793a:	bf00      	nop
 800793c:	e008      	b.n	8007950 <DMA_CheckFifoParam+0xe8>
        break;
 800793e:	bf00      	nop
 8007940:	e006      	b.n	8007950 <DMA_CheckFifoParam+0xe8>
        break;
 8007942:	bf00      	nop
 8007944:	e004      	b.n	8007950 <DMA_CheckFifoParam+0xe8>
        break;
 8007946:	bf00      	nop
 8007948:	e002      	b.n	8007950 <DMA_CheckFifoParam+0xe8>
        break;
 800794a:	bf00      	nop
 800794c:	e000      	b.n	8007950 <DMA_CheckFifoParam+0xe8>
    break;
 800794e:	bf00      	nop
    }
  }

  return status;
 8007950:	7bfb      	ldrb	r3, [r7, #15]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3714      	adds	r7, #20
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop

08007960 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a38      	ldr	r2, [pc, #224]	@ (8007a54 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d022      	beq.n	80079be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a36      	ldr	r2, [pc, #216]	@ (8007a58 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d01d      	beq.n	80079be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a35      	ldr	r2, [pc, #212]	@ (8007a5c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d018      	beq.n	80079be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a33      	ldr	r2, [pc, #204]	@ (8007a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d013      	beq.n	80079be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a32      	ldr	r2, [pc, #200]	@ (8007a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d00e      	beq.n	80079be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a30      	ldr	r2, [pc, #192]	@ (8007a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d009      	beq.n	80079be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a2f      	ldr	r2, [pc, #188]	@ (8007a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d004      	beq.n	80079be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a2d      	ldr	r2, [pc, #180]	@ (8007a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d101      	bne.n	80079c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80079be:	2301      	movs	r3, #1
 80079c0:	e000      	b.n	80079c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80079c2:	2300      	movs	r3, #0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d01a      	beq.n	80079fe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	3b08      	subs	r3, #8
 80079d0:	4a28      	ldr	r2, [pc, #160]	@ (8007a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80079d2:	fba2 2303 	umull	r2, r3, r2, r3
 80079d6:	091b      	lsrs	r3, r3, #4
 80079d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	4b26      	ldr	r3, [pc, #152]	@ (8007a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80079de:	4413      	add	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	461a      	mov	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a24      	ldr	r2, [pc, #144]	@ (8007a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80079ec:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f003 031f 	and.w	r3, r3, #31
 80079f4:	2201      	movs	r2, #1
 80079f6:	409a      	lsls	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80079fc:	e024      	b.n	8007a48 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	3b10      	subs	r3, #16
 8007a06:	4a1e      	ldr	r2, [pc, #120]	@ (8007a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007a08:	fba2 2303 	umull	r2, r3, r2, r3
 8007a0c:	091b      	lsrs	r3, r3, #4
 8007a0e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	4a1c      	ldr	r2, [pc, #112]	@ (8007a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d806      	bhi.n	8007a26 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	4a1b      	ldr	r2, [pc, #108]	@ (8007a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d902      	bls.n	8007a26 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	3308      	adds	r3, #8
 8007a24:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	4b18      	ldr	r3, [pc, #96]	@ (8007a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007a2a:	4413      	add	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	461a      	mov	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a16      	ldr	r2, [pc, #88]	@ (8007a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007a38:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f003 031f 	and.w	r3, r3, #31
 8007a40:	2201      	movs	r2, #1
 8007a42:	409a      	lsls	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007a48:	bf00      	nop
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	58025408 	.word	0x58025408
 8007a58:	5802541c 	.word	0x5802541c
 8007a5c:	58025430 	.word	0x58025430
 8007a60:	58025444 	.word	0x58025444
 8007a64:	58025458 	.word	0x58025458
 8007a68:	5802546c 	.word	0x5802546c
 8007a6c:	58025480 	.word	0x58025480
 8007a70:	58025494 	.word	0x58025494
 8007a74:	cccccccd 	.word	0xcccccccd
 8007a78:	16009600 	.word	0x16009600
 8007a7c:	58025880 	.word	0x58025880
 8007a80:	aaaaaaab 	.word	0xaaaaaaab
 8007a84:	400204b8 	.word	0x400204b8
 8007a88:	4002040f 	.word	0x4002040f
 8007a8c:	10008200 	.word	0x10008200
 8007a90:	40020880 	.word	0x40020880

08007a94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d04a      	beq.n	8007b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2b08      	cmp	r3, #8
 8007aae:	d847      	bhi.n	8007b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a25      	ldr	r2, [pc, #148]	@ (8007b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d022      	beq.n	8007b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a24      	ldr	r2, [pc, #144]	@ (8007b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d01d      	beq.n	8007b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a22      	ldr	r2, [pc, #136]	@ (8007b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d018      	beq.n	8007b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a21      	ldr	r2, [pc, #132]	@ (8007b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d013      	beq.n	8007b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a1f      	ldr	r2, [pc, #124]	@ (8007b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d00e      	beq.n	8007b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a1e      	ldr	r2, [pc, #120]	@ (8007b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d009      	beq.n	8007b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a1c      	ldr	r2, [pc, #112]	@ (8007b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d004      	beq.n	8007b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a1b      	ldr	r2, [pc, #108]	@ (8007b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d101      	bne.n	8007b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007b00:	2301      	movs	r3, #1
 8007b02:	e000      	b.n	8007b06 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007b04:	2300      	movs	r3, #0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00a      	beq.n	8007b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	4b17      	ldr	r3, [pc, #92]	@ (8007b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007b0e:	4413      	add	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	461a      	mov	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a15      	ldr	r2, [pc, #84]	@ (8007b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007b1c:	671a      	str	r2, [r3, #112]	@ 0x70
 8007b1e:	e009      	b.n	8007b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	4b14      	ldr	r3, [pc, #80]	@ (8007b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007b24:	4413      	add	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	461a      	mov	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a11      	ldr	r2, [pc, #68]	@ (8007b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007b32:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	2201      	movs	r2, #1
 8007b3a:	409a      	lsls	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007b40:	bf00      	nop
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	58025408 	.word	0x58025408
 8007b50:	5802541c 	.word	0x5802541c
 8007b54:	58025430 	.word	0x58025430
 8007b58:	58025444 	.word	0x58025444
 8007b5c:	58025458 	.word	0x58025458
 8007b60:	5802546c 	.word	0x5802546c
 8007b64:	58025480 	.word	0x58025480
 8007b68:	58025494 	.word	0x58025494
 8007b6c:	1600963f 	.word	0x1600963f
 8007b70:	58025940 	.word	0x58025940
 8007b74:	1000823f 	.word	0x1000823f
 8007b78:	40020940 	.word	0x40020940

08007b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b089      	sub	sp, #36	@ 0x24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007b8a:	4b86      	ldr	r3, [pc, #536]	@ (8007da4 <HAL_GPIO_Init+0x228>)
 8007b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007b8e:	e18c      	b.n	8007eaa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	2101      	movs	r1, #1
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	fa01 f303 	lsl.w	r3, r1, r3
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 817e 	beq.w	8007ea4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	f003 0303 	and.w	r3, r3, #3
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d005      	beq.n	8007bc0 <HAL_GPIO_Init+0x44>
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f003 0303 	and.w	r3, r3, #3
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d130      	bne.n	8007c22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	005b      	lsls	r3, r3, #1
 8007bca:	2203      	movs	r2, #3
 8007bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd0:	43db      	mvns	r3, r3
 8007bd2:	69ba      	ldr	r2, [r7, #24]
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	68da      	ldr	r2, [r3, #12]
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	fa02 f303 	lsl.w	r3, r2, r3
 8007be4:	69ba      	ldr	r2, [r7, #24]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	69ba      	ldr	r2, [r7, #24]
 8007bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfe:	43db      	mvns	r3, r3
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	4013      	ands	r3, r2
 8007c04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	091b      	lsrs	r3, r3, #4
 8007c0c:	f003 0201 	and.w	r2, r3, #1
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	fa02 f303 	lsl.w	r3, r2, r3
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	69ba      	ldr	r2, [r7, #24]
 8007c20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f003 0303 	and.w	r3, r3, #3
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d017      	beq.n	8007c5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	005b      	lsls	r3, r3, #1
 8007c38:	2203      	movs	r2, #3
 8007c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3e:	43db      	mvns	r3, r3
 8007c40:	69ba      	ldr	r2, [r7, #24]
 8007c42:	4013      	ands	r3, r2
 8007c44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	689a      	ldr	r2, [r3, #8]
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	005b      	lsls	r3, r3, #1
 8007c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	69ba      	ldr	r2, [r7, #24]
 8007c5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f003 0303 	and.w	r3, r3, #3
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d123      	bne.n	8007cb2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	08da      	lsrs	r2, r3, #3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	3208      	adds	r2, #8
 8007c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	f003 0307 	and.w	r3, r3, #7
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	220f      	movs	r2, #15
 8007c82:	fa02 f303 	lsl.w	r3, r2, r3
 8007c86:	43db      	mvns	r3, r3
 8007c88:	69ba      	ldr	r2, [r7, #24]
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	691a      	ldr	r2, [r3, #16]
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	f003 0307 	and.w	r3, r3, #7
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9e:	69ba      	ldr	r2, [r7, #24]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	08da      	lsrs	r2, r3, #3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	3208      	adds	r2, #8
 8007cac:	69b9      	ldr	r1, [r7, #24]
 8007cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	005b      	lsls	r3, r3, #1
 8007cbc:	2203      	movs	r2, #3
 8007cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc2:	43db      	mvns	r3, r3
 8007cc4:	69ba      	ldr	r2, [r7, #24]
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f003 0203 	and.w	r2, r3, #3
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	005b      	lsls	r3, r3, #1
 8007cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	69ba      	ldr	r2, [r7, #24]
 8007ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 80d8 	beq.w	8007ea4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cf4:	4b2c      	ldr	r3, [pc, #176]	@ (8007da8 <HAL_GPIO_Init+0x22c>)
 8007cf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007cfa:	4a2b      	ldr	r2, [pc, #172]	@ (8007da8 <HAL_GPIO_Init+0x22c>)
 8007cfc:	f043 0302 	orr.w	r3, r3, #2
 8007d00:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007d04:	4b28      	ldr	r3, [pc, #160]	@ (8007da8 <HAL_GPIO_Init+0x22c>)
 8007d06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d12:	4a26      	ldr	r2, [pc, #152]	@ (8007dac <HAL_GPIO_Init+0x230>)
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	089b      	lsrs	r3, r3, #2
 8007d18:	3302      	adds	r3, #2
 8007d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	f003 0303 	and.w	r3, r3, #3
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	220f      	movs	r2, #15
 8007d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2e:	43db      	mvns	r3, r3
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	4013      	ands	r3, r2
 8007d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a1d      	ldr	r2, [pc, #116]	@ (8007db0 <HAL_GPIO_Init+0x234>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d04a      	beq.n	8007dd4 <HAL_GPIO_Init+0x258>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a1c      	ldr	r2, [pc, #112]	@ (8007db4 <HAL_GPIO_Init+0x238>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d02b      	beq.n	8007d9e <HAL_GPIO_Init+0x222>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a1b      	ldr	r2, [pc, #108]	@ (8007db8 <HAL_GPIO_Init+0x23c>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d025      	beq.n	8007d9a <HAL_GPIO_Init+0x21e>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a1a      	ldr	r2, [pc, #104]	@ (8007dbc <HAL_GPIO_Init+0x240>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d01f      	beq.n	8007d96 <HAL_GPIO_Init+0x21a>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a19      	ldr	r2, [pc, #100]	@ (8007dc0 <HAL_GPIO_Init+0x244>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d019      	beq.n	8007d92 <HAL_GPIO_Init+0x216>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a18      	ldr	r2, [pc, #96]	@ (8007dc4 <HAL_GPIO_Init+0x248>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d013      	beq.n	8007d8e <HAL_GPIO_Init+0x212>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a17      	ldr	r2, [pc, #92]	@ (8007dc8 <HAL_GPIO_Init+0x24c>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d00d      	beq.n	8007d8a <HAL_GPIO_Init+0x20e>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a16      	ldr	r2, [pc, #88]	@ (8007dcc <HAL_GPIO_Init+0x250>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d007      	beq.n	8007d86 <HAL_GPIO_Init+0x20a>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a15      	ldr	r2, [pc, #84]	@ (8007dd0 <HAL_GPIO_Init+0x254>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d101      	bne.n	8007d82 <HAL_GPIO_Init+0x206>
 8007d7e:	2309      	movs	r3, #9
 8007d80:	e029      	b.n	8007dd6 <HAL_GPIO_Init+0x25a>
 8007d82:	230a      	movs	r3, #10
 8007d84:	e027      	b.n	8007dd6 <HAL_GPIO_Init+0x25a>
 8007d86:	2307      	movs	r3, #7
 8007d88:	e025      	b.n	8007dd6 <HAL_GPIO_Init+0x25a>
 8007d8a:	2306      	movs	r3, #6
 8007d8c:	e023      	b.n	8007dd6 <HAL_GPIO_Init+0x25a>
 8007d8e:	2305      	movs	r3, #5
 8007d90:	e021      	b.n	8007dd6 <HAL_GPIO_Init+0x25a>
 8007d92:	2304      	movs	r3, #4
 8007d94:	e01f      	b.n	8007dd6 <HAL_GPIO_Init+0x25a>
 8007d96:	2303      	movs	r3, #3
 8007d98:	e01d      	b.n	8007dd6 <HAL_GPIO_Init+0x25a>
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	e01b      	b.n	8007dd6 <HAL_GPIO_Init+0x25a>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e019      	b.n	8007dd6 <HAL_GPIO_Init+0x25a>
 8007da2:	bf00      	nop
 8007da4:	58000080 	.word	0x58000080
 8007da8:	58024400 	.word	0x58024400
 8007dac:	58000400 	.word	0x58000400
 8007db0:	58020000 	.word	0x58020000
 8007db4:	58020400 	.word	0x58020400
 8007db8:	58020800 	.word	0x58020800
 8007dbc:	58020c00 	.word	0x58020c00
 8007dc0:	58021000 	.word	0x58021000
 8007dc4:	58021400 	.word	0x58021400
 8007dc8:	58021800 	.word	0x58021800
 8007dcc:	58021c00 	.word	0x58021c00
 8007dd0:	58022400 	.word	0x58022400
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	69fa      	ldr	r2, [r7, #28]
 8007dd8:	f002 0203 	and.w	r2, r2, #3
 8007ddc:	0092      	lsls	r2, r2, #2
 8007dde:	4093      	lsls	r3, r2
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007de6:	4938      	ldr	r1, [pc, #224]	@ (8007ec8 <HAL_GPIO_Init+0x34c>)
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	089b      	lsrs	r3, r3, #2
 8007dec:	3302      	adds	r3, #2
 8007dee:	69ba      	ldr	r2, [r7, #24]
 8007df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	43db      	mvns	r3, r3
 8007e00:	69ba      	ldr	r2, [r7, #24]
 8007e02:	4013      	ands	r3, r2
 8007e04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d003      	beq.n	8007e1a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007e12:	69ba      	ldr	r2, [r7, #24]
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007e1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007e22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	43db      	mvns	r3, r3
 8007e2e:	69ba      	ldr	r2, [r7, #24]
 8007e30:	4013      	ands	r3, r2
 8007e32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d003      	beq.n	8007e48 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007e40:	69ba      	ldr	r2, [r7, #24]
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007e48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	43db      	mvns	r3, r3
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d003      	beq.n	8007e74 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007e6c:	69ba      	ldr	r2, [r7, #24]
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	69ba      	ldr	r2, [r7, #24]
 8007e78:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	43db      	mvns	r3, r3
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	4013      	ands	r3, r2
 8007e88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007e96:	69ba      	ldr	r2, [r7, #24]
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	69ba      	ldr	r2, [r7, #24]
 8007ea2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f47f ae6b 	bne.w	8007b90 <HAL_GPIO_Init+0x14>
  }
}
 8007eba:	bf00      	nop
 8007ebc:	bf00      	nop
 8007ebe:	3724      	adds	r7, #36	@ 0x24
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr
 8007ec8:	58000400 	.word	0x58000400

08007ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	807b      	strh	r3, [r7, #2]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007edc:	787b      	ldrb	r3, [r7, #1]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ee2:	887a      	ldrh	r2, [r7, #2]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007ee8:	e003      	b.n	8007ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007eea:	887b      	ldrh	r3, [r7, #2]
 8007eec:	041a      	lsls	r2, r3, #16
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	619a      	str	r2, [r3, #24]
}
 8007ef2:	bf00      	nop
 8007ef4:	370c      	adds	r7, #12
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007efe:	b480      	push	{r7}
 8007f00:	b085      	sub	sp, #20
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	460b      	mov	r3, r1
 8007f08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007f10:	887a      	ldrh	r2, [r7, #2]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4013      	ands	r3, r2
 8007f16:	041a      	lsls	r2, r3, #16
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	43d9      	mvns	r1, r3
 8007f1c:	887b      	ldrh	r3, [r7, #2]
 8007f1e:	400b      	ands	r3, r1
 8007f20:	431a      	orrs	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	619a      	str	r2, [r3, #24]
}
 8007f26:	bf00      	nop
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b082      	sub	sp, #8
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	4603      	mov	r3, r0
 8007f3a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007f3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f40:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007f44:	88fb      	ldrh	r3, [r7, #6]
 8007f46:	4013      	ands	r3, r2
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d008      	beq.n	8007f5e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007f4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f50:	88fb      	ldrh	r3, [r7, #6]
 8007f52:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007f56:	88fb      	ldrh	r3, [r7, #6]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7f9 f92b 	bl	80011b4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007f5e:	bf00      	nop
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
	...

08007f68 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007f70:	4b19      	ldr	r3, [pc, #100]	@ (8007fd8 <HAL_PWREx_ConfigSupply+0x70>)
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f003 0304 	and.w	r3, r3, #4
 8007f78:	2b04      	cmp	r3, #4
 8007f7a:	d00a      	beq.n	8007f92 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007f7c:	4b16      	ldr	r3, [pc, #88]	@ (8007fd8 <HAL_PWREx_ConfigSupply+0x70>)
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	f003 0307 	and.w	r3, r3, #7
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d001      	beq.n	8007f8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e01f      	b.n	8007fce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	e01d      	b.n	8007fce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007f92:	4b11      	ldr	r3, [pc, #68]	@ (8007fd8 <HAL_PWREx_ConfigSupply+0x70>)
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	f023 0207 	bic.w	r2, r3, #7
 8007f9a:	490f      	ldr	r1, [pc, #60]	@ (8007fd8 <HAL_PWREx_ConfigSupply+0x70>)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007fa2:	f7fa fdb5 	bl	8002b10 <HAL_GetTick>
 8007fa6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007fa8:	e009      	b.n	8007fbe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007faa:	f7fa fdb1 	bl	8002b10 <HAL_GetTick>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	1ad3      	subs	r3, r2, r3
 8007fb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007fb8:	d901      	bls.n	8007fbe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e007      	b.n	8007fce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007fbe:	4b06      	ldr	r3, [pc, #24]	@ (8007fd8 <HAL_PWREx_ConfigSupply+0x70>)
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007fc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fca:	d1ee      	bne.n	8007faa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	58024800 	.word	0x58024800

08007fdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b08c      	sub	sp, #48	@ 0x30
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d101      	bne.n	8007fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e3c8      	b.n	8008780 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 8087 	beq.w	800810a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ffc:	4b88      	ldr	r3, [pc, #544]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008004:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008006:	4b86      	ldr	r3, [pc, #536]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 8008008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800800a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800800c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800800e:	2b10      	cmp	r3, #16
 8008010:	d007      	beq.n	8008022 <HAL_RCC_OscConfig+0x46>
 8008012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008014:	2b18      	cmp	r3, #24
 8008016:	d110      	bne.n	800803a <HAL_RCC_OscConfig+0x5e>
 8008018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800801a:	f003 0303 	and.w	r3, r3, #3
 800801e:	2b02      	cmp	r3, #2
 8008020:	d10b      	bne.n	800803a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008022:	4b7f      	ldr	r3, [pc, #508]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d06c      	beq.n	8008108 <HAL_RCC_OscConfig+0x12c>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d168      	bne.n	8008108 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e3a2      	b.n	8008780 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008042:	d106      	bne.n	8008052 <HAL_RCC_OscConfig+0x76>
 8008044:	4b76      	ldr	r3, [pc, #472]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a75      	ldr	r2, [pc, #468]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 800804a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800804e:	6013      	str	r3, [r2, #0]
 8008050:	e02e      	b.n	80080b0 <HAL_RCC_OscConfig+0xd4>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10c      	bne.n	8008074 <HAL_RCC_OscConfig+0x98>
 800805a:	4b71      	ldr	r3, [pc, #452]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a70      	ldr	r2, [pc, #448]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 8008060:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008064:	6013      	str	r3, [r2, #0]
 8008066:	4b6e      	ldr	r3, [pc, #440]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a6d      	ldr	r2, [pc, #436]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 800806c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008070:	6013      	str	r3, [r2, #0]
 8008072:	e01d      	b.n	80080b0 <HAL_RCC_OscConfig+0xd4>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800807c:	d10c      	bne.n	8008098 <HAL_RCC_OscConfig+0xbc>
 800807e:	4b68      	ldr	r3, [pc, #416]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a67      	ldr	r2, [pc, #412]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 8008084:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008088:	6013      	str	r3, [r2, #0]
 800808a:	4b65      	ldr	r3, [pc, #404]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a64      	ldr	r2, [pc, #400]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 8008090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008094:	6013      	str	r3, [r2, #0]
 8008096:	e00b      	b.n	80080b0 <HAL_RCC_OscConfig+0xd4>
 8008098:	4b61      	ldr	r3, [pc, #388]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a60      	ldr	r2, [pc, #384]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 800809e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080a2:	6013      	str	r3, [r2, #0]
 80080a4:	4b5e      	ldr	r3, [pc, #376]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a5d      	ldr	r2, [pc, #372]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 80080aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80080ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d013      	beq.n	80080e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b8:	f7fa fd2a 	bl	8002b10 <HAL_GetTick>
 80080bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80080be:	e008      	b.n	80080d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080c0:	f7fa fd26 	bl	8002b10 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b64      	cmp	r3, #100	@ 0x64
 80080cc:	d901      	bls.n	80080d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e356      	b.n	8008780 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80080d2:	4b53      	ldr	r3, [pc, #332]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0f0      	beq.n	80080c0 <HAL_RCC_OscConfig+0xe4>
 80080de:	e014      	b.n	800810a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080e0:	f7fa fd16 	bl	8002b10 <HAL_GetTick>
 80080e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80080e6:	e008      	b.n	80080fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080e8:	f7fa fd12 	bl	8002b10 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	2b64      	cmp	r3, #100	@ 0x64
 80080f4:	d901      	bls.n	80080fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e342      	b.n	8008780 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80080fa:	4b49      	ldr	r3, [pc, #292]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1f0      	bne.n	80080e8 <HAL_RCC_OscConfig+0x10c>
 8008106:	e000      	b.n	800810a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0302 	and.w	r3, r3, #2
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 808c 	beq.w	8008230 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008118:	4b41      	ldr	r3, [pc, #260]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008120:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008122:	4b3f      	ldr	r3, [pc, #252]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 8008124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008126:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d007      	beq.n	800813e <HAL_RCC_OscConfig+0x162>
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	2b18      	cmp	r3, #24
 8008132:	d137      	bne.n	80081a4 <HAL_RCC_OscConfig+0x1c8>
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	f003 0303 	and.w	r3, r3, #3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d132      	bne.n	80081a4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800813e:	4b38      	ldr	r3, [pc, #224]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 0304 	and.w	r3, r3, #4
 8008146:	2b00      	cmp	r3, #0
 8008148:	d005      	beq.n	8008156 <HAL_RCC_OscConfig+0x17a>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e314      	b.n	8008780 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008156:	4b32      	ldr	r3, [pc, #200]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f023 0219 	bic.w	r2, r3, #25
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	492f      	ldr	r1, [pc, #188]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 8008164:	4313      	orrs	r3, r2
 8008166:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008168:	f7fa fcd2 	bl	8002b10 <HAL_GetTick>
 800816c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800816e:	e008      	b.n	8008182 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008170:	f7fa fcce 	bl	8002b10 <HAL_GetTick>
 8008174:	4602      	mov	r2, r0
 8008176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	2b02      	cmp	r3, #2
 800817c:	d901      	bls.n	8008182 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e2fe      	b.n	8008780 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008182:	4b27      	ldr	r3, [pc, #156]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0304 	and.w	r3, r3, #4
 800818a:	2b00      	cmp	r3, #0
 800818c:	d0f0      	beq.n	8008170 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800818e:	4b24      	ldr	r3, [pc, #144]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	061b      	lsls	r3, r3, #24
 800819c:	4920      	ldr	r1, [pc, #128]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081a2:	e045      	b.n	8008230 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d026      	beq.n	80081fa <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80081ac:	4b1c      	ldr	r3, [pc, #112]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f023 0219 	bic.w	r2, r3, #25
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	4919      	ldr	r1, [pc, #100]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081be:	f7fa fca7 	bl	8002b10 <HAL_GetTick>
 80081c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081c4:	e008      	b.n	80081d8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081c6:	f7fa fca3 	bl	8002b10 <HAL_GetTick>
 80081ca:	4602      	mov	r2, r0
 80081cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	d901      	bls.n	80081d8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e2d3      	b.n	8008780 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081d8:	4b11      	ldr	r3, [pc, #68]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0304 	and.w	r3, r3, #4
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d0f0      	beq.n	80081c6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	061b      	lsls	r3, r3, #24
 80081f2:	490b      	ldr	r1, [pc, #44]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 80081f4:	4313      	orrs	r3, r2
 80081f6:	604b      	str	r3, [r1, #4]
 80081f8:	e01a      	b.n	8008230 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081fa:	4b09      	ldr	r3, [pc, #36]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a08      	ldr	r2, [pc, #32]	@ (8008220 <HAL_RCC_OscConfig+0x244>)
 8008200:	f023 0301 	bic.w	r3, r3, #1
 8008204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008206:	f7fa fc83 	bl	8002b10 <HAL_GetTick>
 800820a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800820c:	e00a      	b.n	8008224 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800820e:	f7fa fc7f 	bl	8002b10 <HAL_GetTick>
 8008212:	4602      	mov	r2, r0
 8008214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	2b02      	cmp	r3, #2
 800821a:	d903      	bls.n	8008224 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e2af      	b.n	8008780 <HAL_RCC_OscConfig+0x7a4>
 8008220:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008224:	4b96      	ldr	r3, [pc, #600]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0304 	and.w	r3, r3, #4
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1ee      	bne.n	800820e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0310 	and.w	r3, r3, #16
 8008238:	2b00      	cmp	r3, #0
 800823a:	d06a      	beq.n	8008312 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800823c:	4b90      	ldr	r3, [pc, #576]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008244:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008246:	4b8e      	ldr	r3, [pc, #568]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 8008248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800824a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	2b08      	cmp	r3, #8
 8008250:	d007      	beq.n	8008262 <HAL_RCC_OscConfig+0x286>
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	2b18      	cmp	r3, #24
 8008256:	d11b      	bne.n	8008290 <HAL_RCC_OscConfig+0x2b4>
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	f003 0303 	and.w	r3, r3, #3
 800825e:	2b01      	cmp	r3, #1
 8008260:	d116      	bne.n	8008290 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008262:	4b87      	ldr	r3, [pc, #540]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800826a:	2b00      	cmp	r3, #0
 800826c:	d005      	beq.n	800827a <HAL_RCC_OscConfig+0x29e>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	2b80      	cmp	r3, #128	@ 0x80
 8008274:	d001      	beq.n	800827a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e282      	b.n	8008780 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800827a:	4b81      	ldr	r3, [pc, #516]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	061b      	lsls	r3, r3, #24
 8008288:	497d      	ldr	r1, [pc, #500]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 800828a:	4313      	orrs	r3, r2
 800828c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800828e:	e040      	b.n	8008312 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	69db      	ldr	r3, [r3, #28]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d023      	beq.n	80082e0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008298:	4b79      	ldr	r3, [pc, #484]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a78      	ldr	r2, [pc, #480]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 800829e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082a4:	f7fa fc34 	bl	8002b10 <HAL_GetTick>
 80082a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80082aa:	e008      	b.n	80082be <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80082ac:	f7fa fc30 	bl	8002b10 <HAL_GetTick>
 80082b0:	4602      	mov	r2, r0
 80082b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d901      	bls.n	80082be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e260      	b.n	8008780 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80082be:	4b70      	ldr	r3, [pc, #448]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d0f0      	beq.n	80082ac <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80082ca:	4b6d      	ldr	r3, [pc, #436]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a1b      	ldr	r3, [r3, #32]
 80082d6:	061b      	lsls	r3, r3, #24
 80082d8:	4969      	ldr	r1, [pc, #420]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	60cb      	str	r3, [r1, #12]
 80082de:	e018      	b.n	8008312 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80082e0:	4b67      	ldr	r3, [pc, #412]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a66      	ldr	r2, [pc, #408]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 80082e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ec:	f7fa fc10 	bl	8002b10 <HAL_GetTick>
 80082f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80082f2:	e008      	b.n	8008306 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80082f4:	f7fa fc0c 	bl	8002b10 <HAL_GetTick>
 80082f8:	4602      	mov	r2, r0
 80082fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d901      	bls.n	8008306 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e23c      	b.n	8008780 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008306:	4b5e      	ldr	r3, [pc, #376]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1f0      	bne.n	80082f4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0308 	and.w	r3, r3, #8
 800831a:	2b00      	cmp	r3, #0
 800831c:	d036      	beq.n	800838c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d019      	beq.n	800835a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008326:	4b56      	ldr	r3, [pc, #344]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 8008328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800832a:	4a55      	ldr	r2, [pc, #340]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 800832c:	f043 0301 	orr.w	r3, r3, #1
 8008330:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008332:	f7fa fbed 	bl	8002b10 <HAL_GetTick>
 8008336:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008338:	e008      	b.n	800834c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800833a:	f7fa fbe9 	bl	8002b10 <HAL_GetTick>
 800833e:	4602      	mov	r2, r0
 8008340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	2b02      	cmp	r3, #2
 8008346:	d901      	bls.n	800834c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e219      	b.n	8008780 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800834c:	4b4c      	ldr	r3, [pc, #304]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 800834e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008350:	f003 0302 	and.w	r3, r3, #2
 8008354:	2b00      	cmp	r3, #0
 8008356:	d0f0      	beq.n	800833a <HAL_RCC_OscConfig+0x35e>
 8008358:	e018      	b.n	800838c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800835a:	4b49      	ldr	r3, [pc, #292]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 800835c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800835e:	4a48      	ldr	r2, [pc, #288]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 8008360:	f023 0301 	bic.w	r3, r3, #1
 8008364:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008366:	f7fa fbd3 	bl	8002b10 <HAL_GetTick>
 800836a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800836c:	e008      	b.n	8008380 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800836e:	f7fa fbcf 	bl	8002b10 <HAL_GetTick>
 8008372:	4602      	mov	r2, r0
 8008374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008376:	1ad3      	subs	r3, r2, r3
 8008378:	2b02      	cmp	r3, #2
 800837a:	d901      	bls.n	8008380 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	e1ff      	b.n	8008780 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008380:	4b3f      	ldr	r3, [pc, #252]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 8008382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1f0      	bne.n	800836e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 0320 	and.w	r3, r3, #32
 8008394:	2b00      	cmp	r3, #0
 8008396:	d036      	beq.n	8008406 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d019      	beq.n	80083d4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80083a0:	4b37      	ldr	r3, [pc, #220]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a36      	ldr	r2, [pc, #216]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 80083a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80083aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80083ac:	f7fa fbb0 	bl	8002b10 <HAL_GetTick>
 80083b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80083b2:	e008      	b.n	80083c6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083b4:	f7fa fbac 	bl	8002b10 <HAL_GetTick>
 80083b8:	4602      	mov	r2, r0
 80083ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d901      	bls.n	80083c6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e1dc      	b.n	8008780 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80083c6:	4b2e      	ldr	r3, [pc, #184]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d0f0      	beq.n	80083b4 <HAL_RCC_OscConfig+0x3d8>
 80083d2:	e018      	b.n	8008406 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80083d4:	4b2a      	ldr	r3, [pc, #168]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a29      	ldr	r2, [pc, #164]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 80083da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80083e0:	f7fa fb96 	bl	8002b10 <HAL_GetTick>
 80083e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80083e6:	e008      	b.n	80083fa <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083e8:	f7fa fb92 	bl	8002b10 <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d901      	bls.n	80083fa <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e1c2      	b.n	8008780 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80083fa:	4b21      	ldr	r3, [pc, #132]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1f0      	bne.n	80083e8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0304 	and.w	r3, r3, #4
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 8086 	beq.w	8008520 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008414:	4b1b      	ldr	r3, [pc, #108]	@ (8008484 <HAL_RCC_OscConfig+0x4a8>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a1a      	ldr	r2, [pc, #104]	@ (8008484 <HAL_RCC_OscConfig+0x4a8>)
 800841a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800841e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008420:	f7fa fb76 	bl	8002b10 <HAL_GetTick>
 8008424:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008426:	e008      	b.n	800843a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008428:	f7fa fb72 	bl	8002b10 <HAL_GetTick>
 800842c:	4602      	mov	r2, r0
 800842e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	2b64      	cmp	r3, #100	@ 0x64
 8008434:	d901      	bls.n	800843a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e1a2      	b.n	8008780 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800843a:	4b12      	ldr	r3, [pc, #72]	@ (8008484 <HAL_RCC_OscConfig+0x4a8>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0f0      	beq.n	8008428 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	2b01      	cmp	r3, #1
 800844c:	d106      	bne.n	800845c <HAL_RCC_OscConfig+0x480>
 800844e:	4b0c      	ldr	r3, [pc, #48]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 8008450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008452:	4a0b      	ldr	r2, [pc, #44]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 8008454:	f043 0301 	orr.w	r3, r3, #1
 8008458:	6713      	str	r3, [r2, #112]	@ 0x70
 800845a:	e032      	b.n	80084c2 <HAL_RCC_OscConfig+0x4e6>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d111      	bne.n	8008488 <HAL_RCC_OscConfig+0x4ac>
 8008464:	4b06      	ldr	r3, [pc, #24]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 8008466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008468:	4a05      	ldr	r2, [pc, #20]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 800846a:	f023 0301 	bic.w	r3, r3, #1
 800846e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008470:	4b03      	ldr	r3, [pc, #12]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 8008472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008474:	4a02      	ldr	r2, [pc, #8]	@ (8008480 <HAL_RCC_OscConfig+0x4a4>)
 8008476:	f023 0304 	bic.w	r3, r3, #4
 800847a:	6713      	str	r3, [r2, #112]	@ 0x70
 800847c:	e021      	b.n	80084c2 <HAL_RCC_OscConfig+0x4e6>
 800847e:	bf00      	nop
 8008480:	58024400 	.word	0x58024400
 8008484:	58024800 	.word	0x58024800
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	2b05      	cmp	r3, #5
 800848e:	d10c      	bne.n	80084aa <HAL_RCC_OscConfig+0x4ce>
 8008490:	4b83      	ldr	r3, [pc, #524]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 8008492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008494:	4a82      	ldr	r2, [pc, #520]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 8008496:	f043 0304 	orr.w	r3, r3, #4
 800849a:	6713      	str	r3, [r2, #112]	@ 0x70
 800849c:	4b80      	ldr	r3, [pc, #512]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 800849e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084a0:	4a7f      	ldr	r2, [pc, #508]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 80084a2:	f043 0301 	orr.w	r3, r3, #1
 80084a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80084a8:	e00b      	b.n	80084c2 <HAL_RCC_OscConfig+0x4e6>
 80084aa:	4b7d      	ldr	r3, [pc, #500]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 80084ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ae:	4a7c      	ldr	r2, [pc, #496]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 80084b0:	f023 0301 	bic.w	r3, r3, #1
 80084b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80084b6:	4b7a      	ldr	r3, [pc, #488]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 80084b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ba:	4a79      	ldr	r2, [pc, #484]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 80084bc:	f023 0304 	bic.w	r3, r3, #4
 80084c0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d015      	beq.n	80084f6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084ca:	f7fa fb21 	bl	8002b10 <HAL_GetTick>
 80084ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084d0:	e00a      	b.n	80084e8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084d2:	f7fa fb1d 	bl	8002b10 <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d901      	bls.n	80084e8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e14b      	b.n	8008780 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084e8:	4b6d      	ldr	r3, [pc, #436]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 80084ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ec:	f003 0302 	and.w	r3, r3, #2
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d0ee      	beq.n	80084d2 <HAL_RCC_OscConfig+0x4f6>
 80084f4:	e014      	b.n	8008520 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084f6:	f7fa fb0b 	bl	8002b10 <HAL_GetTick>
 80084fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80084fc:	e00a      	b.n	8008514 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084fe:	f7fa fb07 	bl	8002b10 <HAL_GetTick>
 8008502:	4602      	mov	r2, r0
 8008504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008506:	1ad3      	subs	r3, r2, r3
 8008508:	f241 3288 	movw	r2, #5000	@ 0x1388
 800850c:	4293      	cmp	r3, r2
 800850e:	d901      	bls.n	8008514 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008510:	2303      	movs	r3, #3
 8008512:	e135      	b.n	8008780 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008514:	4b62      	ldr	r3, [pc, #392]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 8008516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008518:	f003 0302 	and.w	r3, r3, #2
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1ee      	bne.n	80084fe <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008524:	2b00      	cmp	r3, #0
 8008526:	f000 812a 	beq.w	800877e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800852a:	4b5d      	ldr	r3, [pc, #372]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008532:	2b18      	cmp	r3, #24
 8008534:	f000 80ba 	beq.w	80086ac <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800853c:	2b02      	cmp	r3, #2
 800853e:	f040 8095 	bne.w	800866c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008542:	4b57      	ldr	r3, [pc, #348]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a56      	ldr	r2, [pc, #344]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 8008548:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800854c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800854e:	f7fa fadf 	bl	8002b10 <HAL_GetTick>
 8008552:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008554:	e008      	b.n	8008568 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008556:	f7fa fadb 	bl	8002b10 <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	2b02      	cmp	r3, #2
 8008562:	d901      	bls.n	8008568 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e10b      	b.n	8008780 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008568:	4b4d      	ldr	r3, [pc, #308]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1f0      	bne.n	8008556 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008574:	4b4a      	ldr	r3, [pc, #296]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 8008576:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008578:	4b4a      	ldr	r3, [pc, #296]	@ (80086a4 <HAL_RCC_OscConfig+0x6c8>)
 800857a:	4013      	ands	r3, r2
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008584:	0112      	lsls	r2, r2, #4
 8008586:	430a      	orrs	r2, r1
 8008588:	4945      	ldr	r1, [pc, #276]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 800858a:	4313      	orrs	r3, r2
 800858c:	628b      	str	r3, [r1, #40]	@ 0x28
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008592:	3b01      	subs	r3, #1
 8008594:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800859c:	3b01      	subs	r3, #1
 800859e:	025b      	lsls	r3, r3, #9
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	431a      	orrs	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a8:	3b01      	subs	r3, #1
 80085aa:	041b      	lsls	r3, r3, #16
 80085ac:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80085b0:	431a      	orrs	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085b6:	3b01      	subs	r3, #1
 80085b8:	061b      	lsls	r3, r3, #24
 80085ba:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80085be:	4938      	ldr	r1, [pc, #224]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 80085c0:	4313      	orrs	r3, r2
 80085c2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80085c4:	4b36      	ldr	r3, [pc, #216]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 80085c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c8:	4a35      	ldr	r2, [pc, #212]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 80085ca:	f023 0301 	bic.w	r3, r3, #1
 80085ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80085d0:	4b33      	ldr	r3, [pc, #204]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 80085d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085d4:	4b34      	ldr	r3, [pc, #208]	@ (80086a8 <HAL_RCC_OscConfig+0x6cc>)
 80085d6:	4013      	ands	r3, r2
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80085dc:	00d2      	lsls	r2, r2, #3
 80085de:	4930      	ldr	r1, [pc, #192]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 80085e0:	4313      	orrs	r3, r2
 80085e2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80085e4:	4b2e      	ldr	r3, [pc, #184]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 80085e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e8:	f023 020c 	bic.w	r2, r3, #12
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f0:	492b      	ldr	r1, [pc, #172]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 80085f2:	4313      	orrs	r3, r2
 80085f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80085f6:	4b2a      	ldr	r3, [pc, #168]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 80085f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085fa:	f023 0202 	bic.w	r2, r3, #2
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008602:	4927      	ldr	r1, [pc, #156]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 8008604:	4313      	orrs	r3, r2
 8008606:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008608:	4b25      	ldr	r3, [pc, #148]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 800860a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860c:	4a24      	ldr	r2, [pc, #144]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 800860e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008612:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008614:	4b22      	ldr	r3, [pc, #136]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 8008616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008618:	4a21      	ldr	r2, [pc, #132]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 800861a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800861e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008620:	4b1f      	ldr	r3, [pc, #124]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 8008622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008624:	4a1e      	ldr	r2, [pc, #120]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 8008626:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800862a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800862c:	4b1c      	ldr	r3, [pc, #112]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 800862e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008630:	4a1b      	ldr	r2, [pc, #108]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 8008632:	f043 0301 	orr.w	r3, r3, #1
 8008636:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008638:	4b19      	ldr	r3, [pc, #100]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a18      	ldr	r2, [pc, #96]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 800863e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008644:	f7fa fa64 	bl	8002b10 <HAL_GetTick>
 8008648:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800864a:	e008      	b.n	800865e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800864c:	f7fa fa60 	bl	8002b10 <HAL_GetTick>
 8008650:	4602      	mov	r2, r0
 8008652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	2b02      	cmp	r3, #2
 8008658:	d901      	bls.n	800865e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e090      	b.n	8008780 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800865e:	4b10      	ldr	r3, [pc, #64]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d0f0      	beq.n	800864c <HAL_RCC_OscConfig+0x670>
 800866a:	e088      	b.n	800877e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800866c:	4b0c      	ldr	r3, [pc, #48]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a0b      	ldr	r2, [pc, #44]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 8008672:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008678:	f7fa fa4a 	bl	8002b10 <HAL_GetTick>
 800867c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800867e:	e008      	b.n	8008692 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008680:	f7fa fa46 	bl	8002b10 <HAL_GetTick>
 8008684:	4602      	mov	r2, r0
 8008686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	2b02      	cmp	r3, #2
 800868c:	d901      	bls.n	8008692 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800868e:	2303      	movs	r3, #3
 8008690:	e076      	b.n	8008780 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008692:	4b03      	ldr	r3, [pc, #12]	@ (80086a0 <HAL_RCC_OscConfig+0x6c4>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1f0      	bne.n	8008680 <HAL_RCC_OscConfig+0x6a4>
 800869e:	e06e      	b.n	800877e <HAL_RCC_OscConfig+0x7a2>
 80086a0:	58024400 	.word	0x58024400
 80086a4:	fffffc0c 	.word	0xfffffc0c
 80086a8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80086ac:	4b36      	ldr	r3, [pc, #216]	@ (8008788 <HAL_RCC_OscConfig+0x7ac>)
 80086ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80086b2:	4b35      	ldr	r3, [pc, #212]	@ (8008788 <HAL_RCC_OscConfig+0x7ac>)
 80086b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d031      	beq.n	8008724 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	f003 0203 	and.w	r2, r3, #3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d12a      	bne.n	8008724 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	091b      	lsrs	r3, r3, #4
 80086d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086da:	429a      	cmp	r2, r3
 80086dc:	d122      	bne.n	8008724 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d11a      	bne.n	8008724 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	0a5b      	lsrs	r3, r3, #9
 80086f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d111      	bne.n	8008724 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	0c1b      	lsrs	r3, r3, #16
 8008704:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800870c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800870e:	429a      	cmp	r2, r3
 8008710:	d108      	bne.n	8008724 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	0e1b      	lsrs	r3, r3, #24
 8008716:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800871e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008720:	429a      	cmp	r2, r3
 8008722:	d001      	beq.n	8008728 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e02b      	b.n	8008780 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008728:	4b17      	ldr	r3, [pc, #92]	@ (8008788 <HAL_RCC_OscConfig+0x7ac>)
 800872a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800872c:	08db      	lsrs	r3, r3, #3
 800872e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008732:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	429a      	cmp	r2, r3
 800873c:	d01f      	beq.n	800877e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800873e:	4b12      	ldr	r3, [pc, #72]	@ (8008788 <HAL_RCC_OscConfig+0x7ac>)
 8008740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008742:	4a11      	ldr	r2, [pc, #68]	@ (8008788 <HAL_RCC_OscConfig+0x7ac>)
 8008744:	f023 0301 	bic.w	r3, r3, #1
 8008748:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800874a:	f7fa f9e1 	bl	8002b10 <HAL_GetTick>
 800874e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008750:	bf00      	nop
 8008752:	f7fa f9dd 	bl	8002b10 <HAL_GetTick>
 8008756:	4602      	mov	r2, r0
 8008758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875a:	4293      	cmp	r3, r2
 800875c:	d0f9      	beq.n	8008752 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800875e:	4b0a      	ldr	r3, [pc, #40]	@ (8008788 <HAL_RCC_OscConfig+0x7ac>)
 8008760:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008762:	4b0a      	ldr	r3, [pc, #40]	@ (800878c <HAL_RCC_OscConfig+0x7b0>)
 8008764:	4013      	ands	r3, r2
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800876a:	00d2      	lsls	r2, r2, #3
 800876c:	4906      	ldr	r1, [pc, #24]	@ (8008788 <HAL_RCC_OscConfig+0x7ac>)
 800876e:	4313      	orrs	r3, r2
 8008770:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008772:	4b05      	ldr	r3, [pc, #20]	@ (8008788 <HAL_RCC_OscConfig+0x7ac>)
 8008774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008776:	4a04      	ldr	r2, [pc, #16]	@ (8008788 <HAL_RCC_OscConfig+0x7ac>)
 8008778:	f043 0301 	orr.w	r3, r3, #1
 800877c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3730      	adds	r7, #48	@ 0x30
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	58024400 	.word	0x58024400
 800878c:	ffff0007 	.word	0xffff0007

08008790 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d101      	bne.n	80087a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e19c      	b.n	8008ade <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80087a4:	4b8a      	ldr	r3, [pc, #552]	@ (80089d0 <HAL_RCC_ClockConfig+0x240>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 030f 	and.w	r3, r3, #15
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d910      	bls.n	80087d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087b2:	4b87      	ldr	r3, [pc, #540]	@ (80089d0 <HAL_RCC_ClockConfig+0x240>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f023 020f 	bic.w	r2, r3, #15
 80087ba:	4985      	ldr	r1, [pc, #532]	@ (80089d0 <HAL_RCC_ClockConfig+0x240>)
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	4313      	orrs	r3, r2
 80087c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087c2:	4b83      	ldr	r3, [pc, #524]	@ (80089d0 <HAL_RCC_ClockConfig+0x240>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 030f 	and.w	r3, r3, #15
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d001      	beq.n	80087d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e184      	b.n	8008ade <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0304 	and.w	r3, r3, #4
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d010      	beq.n	8008802 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	691a      	ldr	r2, [r3, #16]
 80087e4:	4b7b      	ldr	r3, [pc, #492]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d908      	bls.n	8008802 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80087f0:	4b78      	ldr	r3, [pc, #480]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	4975      	ldr	r1, [pc, #468]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 80087fe:	4313      	orrs	r3, r2
 8008800:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 0308 	and.w	r3, r3, #8
 800880a:	2b00      	cmp	r3, #0
 800880c:	d010      	beq.n	8008830 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	695a      	ldr	r2, [r3, #20]
 8008812:	4b70      	ldr	r3, [pc, #448]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 8008814:	69db      	ldr	r3, [r3, #28]
 8008816:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800881a:	429a      	cmp	r2, r3
 800881c:	d908      	bls.n	8008830 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800881e:	4b6d      	ldr	r3, [pc, #436]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 8008820:	69db      	ldr	r3, [r3, #28]
 8008822:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	496a      	ldr	r1, [pc, #424]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 800882c:	4313      	orrs	r3, r2
 800882e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 0310 	and.w	r3, r3, #16
 8008838:	2b00      	cmp	r3, #0
 800883a:	d010      	beq.n	800885e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	699a      	ldr	r2, [r3, #24]
 8008840:	4b64      	ldr	r3, [pc, #400]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 8008842:	69db      	ldr	r3, [r3, #28]
 8008844:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008848:	429a      	cmp	r2, r3
 800884a:	d908      	bls.n	800885e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800884c:	4b61      	ldr	r3, [pc, #388]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 800884e:	69db      	ldr	r3, [r3, #28]
 8008850:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	495e      	ldr	r1, [pc, #376]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 800885a:	4313      	orrs	r3, r2
 800885c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 0320 	and.w	r3, r3, #32
 8008866:	2b00      	cmp	r3, #0
 8008868:	d010      	beq.n	800888c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	69da      	ldr	r2, [r3, #28]
 800886e:	4b59      	ldr	r3, [pc, #356]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008876:	429a      	cmp	r2, r3
 8008878:	d908      	bls.n	800888c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800887a:	4b56      	ldr	r3, [pc, #344]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	4953      	ldr	r1, [pc, #332]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 8008888:	4313      	orrs	r3, r2
 800888a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0302 	and.w	r3, r3, #2
 8008894:	2b00      	cmp	r3, #0
 8008896:	d010      	beq.n	80088ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68da      	ldr	r2, [r3, #12]
 800889c:	4b4d      	ldr	r3, [pc, #308]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	f003 030f 	and.w	r3, r3, #15
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d908      	bls.n	80088ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088a8:	4b4a      	ldr	r3, [pc, #296]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	f023 020f 	bic.w	r2, r3, #15
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	4947      	ldr	r1, [pc, #284]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 80088b6:	4313      	orrs	r3, r2
 80088b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d055      	beq.n	8008972 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80088c6:	4b43      	ldr	r3, [pc, #268]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	4940      	ldr	r1, [pc, #256]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 80088d4:	4313      	orrs	r3, r2
 80088d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d107      	bne.n	80088f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80088e0:	4b3c      	ldr	r3, [pc, #240]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d121      	bne.n	8008930 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e0f6      	b.n	8008ade <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	d107      	bne.n	8008908 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80088f8:	4b36      	ldr	r3, [pc, #216]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008900:	2b00      	cmp	r3, #0
 8008902:	d115      	bne.n	8008930 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e0ea      	b.n	8008ade <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d107      	bne.n	8008920 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008910:	4b30      	ldr	r3, [pc, #192]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008918:	2b00      	cmp	r3, #0
 800891a:	d109      	bne.n	8008930 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e0de      	b.n	8008ade <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008920:	4b2c      	ldr	r3, [pc, #176]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0304 	and.w	r3, r3, #4
 8008928:	2b00      	cmp	r3, #0
 800892a:	d101      	bne.n	8008930 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	e0d6      	b.n	8008ade <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008930:	4b28      	ldr	r3, [pc, #160]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	f023 0207 	bic.w	r2, r3, #7
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	4925      	ldr	r1, [pc, #148]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 800893e:	4313      	orrs	r3, r2
 8008940:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008942:	f7fa f8e5 	bl	8002b10 <HAL_GetTick>
 8008946:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008948:	e00a      	b.n	8008960 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800894a:	f7fa f8e1 	bl	8002b10 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008958:	4293      	cmp	r3, r2
 800895a:	d901      	bls.n	8008960 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e0be      	b.n	8008ade <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008960:	4b1c      	ldr	r3, [pc, #112]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	00db      	lsls	r3, r3, #3
 800896e:	429a      	cmp	r2, r3
 8008970:	d1eb      	bne.n	800894a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 0302 	and.w	r3, r3, #2
 800897a:	2b00      	cmp	r3, #0
 800897c:	d010      	beq.n	80089a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	68da      	ldr	r2, [r3, #12]
 8008982:	4b14      	ldr	r3, [pc, #80]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	f003 030f 	and.w	r3, r3, #15
 800898a:	429a      	cmp	r2, r3
 800898c:	d208      	bcs.n	80089a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800898e:	4b11      	ldr	r3, [pc, #68]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	f023 020f 	bic.w	r2, r3, #15
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	490e      	ldr	r1, [pc, #56]	@ (80089d4 <HAL_RCC_ClockConfig+0x244>)
 800899c:	4313      	orrs	r3, r2
 800899e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80089a0:	4b0b      	ldr	r3, [pc, #44]	@ (80089d0 <HAL_RCC_ClockConfig+0x240>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 030f 	and.w	r3, r3, #15
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d214      	bcs.n	80089d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089ae:	4b08      	ldr	r3, [pc, #32]	@ (80089d0 <HAL_RCC_ClockConfig+0x240>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f023 020f 	bic.w	r2, r3, #15
 80089b6:	4906      	ldr	r1, [pc, #24]	@ (80089d0 <HAL_RCC_ClockConfig+0x240>)
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089be:	4b04      	ldr	r3, [pc, #16]	@ (80089d0 <HAL_RCC_ClockConfig+0x240>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 030f 	and.w	r3, r3, #15
 80089c6:	683a      	ldr	r2, [r7, #0]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d005      	beq.n	80089d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e086      	b.n	8008ade <HAL_RCC_ClockConfig+0x34e>
 80089d0:	52002000 	.word	0x52002000
 80089d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0304 	and.w	r3, r3, #4
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d010      	beq.n	8008a06 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	691a      	ldr	r2, [r3, #16]
 80089e8:	4b3f      	ldr	r3, [pc, #252]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d208      	bcs.n	8008a06 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80089f4:	4b3c      	ldr	r3, [pc, #240]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	4939      	ldr	r1, [pc, #228]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008a02:	4313      	orrs	r3, r2
 8008a04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 0308 	and.w	r3, r3, #8
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d010      	beq.n	8008a34 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	695a      	ldr	r2, [r3, #20]
 8008a16:	4b34      	ldr	r3, [pc, #208]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008a18:	69db      	ldr	r3, [r3, #28]
 8008a1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d208      	bcs.n	8008a34 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008a22:	4b31      	ldr	r3, [pc, #196]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008a24:	69db      	ldr	r3, [r3, #28]
 8008a26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	492e      	ldr	r1, [pc, #184]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008a30:	4313      	orrs	r3, r2
 8008a32:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 0310 	and.w	r3, r3, #16
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d010      	beq.n	8008a62 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	699a      	ldr	r2, [r3, #24]
 8008a44:	4b28      	ldr	r3, [pc, #160]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008a46:	69db      	ldr	r3, [r3, #28]
 8008a48:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d208      	bcs.n	8008a62 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008a50:	4b25      	ldr	r3, [pc, #148]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008a52:	69db      	ldr	r3, [r3, #28]
 8008a54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	4922      	ldr	r1, [pc, #136]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 0320 	and.w	r3, r3, #32
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d010      	beq.n	8008a90 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	69da      	ldr	r2, [r3, #28]
 8008a72:	4b1d      	ldr	r3, [pc, #116]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008a74:	6a1b      	ldr	r3, [r3, #32]
 8008a76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d208      	bcs.n	8008a90 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008a80:	6a1b      	ldr	r3, [r3, #32]
 8008a82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	69db      	ldr	r3, [r3, #28]
 8008a8a:	4917      	ldr	r1, [pc, #92]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008a90:	f000 f834 	bl	8008afc <HAL_RCC_GetSysClockFreq>
 8008a94:	4602      	mov	r2, r0
 8008a96:	4b14      	ldr	r3, [pc, #80]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	0a1b      	lsrs	r3, r3, #8
 8008a9c:	f003 030f 	and.w	r3, r3, #15
 8008aa0:	4912      	ldr	r1, [pc, #72]	@ (8008aec <HAL_RCC_ClockConfig+0x35c>)
 8008aa2:	5ccb      	ldrb	r3, [r1, r3]
 8008aa4:	f003 031f 	and.w	r3, r3, #31
 8008aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8008aac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008aae:	4b0e      	ldr	r3, [pc, #56]	@ (8008ae8 <HAL_RCC_ClockConfig+0x358>)
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	f003 030f 	and.w	r3, r3, #15
 8008ab6:	4a0d      	ldr	r2, [pc, #52]	@ (8008aec <HAL_RCC_ClockConfig+0x35c>)
 8008ab8:	5cd3      	ldrb	r3, [r2, r3]
 8008aba:	f003 031f 	and.w	r3, r3, #31
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8008af0 <HAL_RCC_ClockConfig+0x360>)
 8008ac6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8008af4 <HAL_RCC_ClockConfig+0x364>)
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008ace:	4b0a      	ldr	r3, [pc, #40]	@ (8008af8 <HAL_RCC_ClockConfig+0x368>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7f9 ffd2 	bl	8002a7c <HAL_InitTick>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3718      	adds	r7, #24
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	58024400 	.word	0x58024400
 8008aec:	0800fe58 	.word	0x0800fe58
 8008af0:	24000058 	.word	0x24000058
 8008af4:	24000054 	.word	0x24000054
 8008af8:	2400005c 	.word	0x2400005c

08008afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b089      	sub	sp, #36	@ 0x24
 8008b00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b02:	4bb3      	ldr	r3, [pc, #716]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b0a:	2b18      	cmp	r3, #24
 8008b0c:	f200 8155 	bhi.w	8008dba <HAL_RCC_GetSysClockFreq+0x2be>
 8008b10:	a201      	add	r2, pc, #4	@ (adr r2, 8008b18 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b16:	bf00      	nop
 8008b18:	08008b7d 	.word	0x08008b7d
 8008b1c:	08008dbb 	.word	0x08008dbb
 8008b20:	08008dbb 	.word	0x08008dbb
 8008b24:	08008dbb 	.word	0x08008dbb
 8008b28:	08008dbb 	.word	0x08008dbb
 8008b2c:	08008dbb 	.word	0x08008dbb
 8008b30:	08008dbb 	.word	0x08008dbb
 8008b34:	08008dbb 	.word	0x08008dbb
 8008b38:	08008ba3 	.word	0x08008ba3
 8008b3c:	08008dbb 	.word	0x08008dbb
 8008b40:	08008dbb 	.word	0x08008dbb
 8008b44:	08008dbb 	.word	0x08008dbb
 8008b48:	08008dbb 	.word	0x08008dbb
 8008b4c:	08008dbb 	.word	0x08008dbb
 8008b50:	08008dbb 	.word	0x08008dbb
 8008b54:	08008dbb 	.word	0x08008dbb
 8008b58:	08008ba9 	.word	0x08008ba9
 8008b5c:	08008dbb 	.word	0x08008dbb
 8008b60:	08008dbb 	.word	0x08008dbb
 8008b64:	08008dbb 	.word	0x08008dbb
 8008b68:	08008dbb 	.word	0x08008dbb
 8008b6c:	08008dbb 	.word	0x08008dbb
 8008b70:	08008dbb 	.word	0x08008dbb
 8008b74:	08008dbb 	.word	0x08008dbb
 8008b78:	08008baf 	.word	0x08008baf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b7c:	4b94      	ldr	r3, [pc, #592]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 0320 	and.w	r3, r3, #32
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d009      	beq.n	8008b9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b88:	4b91      	ldr	r3, [pc, #580]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	08db      	lsrs	r3, r3, #3
 8008b8e:	f003 0303 	and.w	r3, r3, #3
 8008b92:	4a90      	ldr	r2, [pc, #576]	@ (8008dd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b94:	fa22 f303 	lsr.w	r3, r2, r3
 8008b98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008b9a:	e111      	b.n	8008dc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008b9c:	4b8d      	ldr	r3, [pc, #564]	@ (8008dd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b9e:	61bb      	str	r3, [r7, #24]
      break;
 8008ba0:	e10e      	b.n	8008dc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008ba2:	4b8d      	ldr	r3, [pc, #564]	@ (8008dd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ba4:	61bb      	str	r3, [r7, #24]
      break;
 8008ba6:	e10b      	b.n	8008dc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008ba8:	4b8c      	ldr	r3, [pc, #560]	@ (8008ddc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008baa:	61bb      	str	r3, [r7, #24]
      break;
 8008bac:	e108      	b.n	8008dc0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bae:	4b88      	ldr	r3, [pc, #544]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb2:	f003 0303 	and.w	r3, r3, #3
 8008bb6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008bb8:	4b85      	ldr	r3, [pc, #532]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bbc:	091b      	lsrs	r3, r3, #4
 8008bbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008bc2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008bc4:	4b82      	ldr	r3, [pc, #520]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc8:	f003 0301 	and.w	r3, r3, #1
 8008bcc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008bce:	4b80      	ldr	r3, [pc, #512]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bd2:	08db      	lsrs	r3, r3, #3
 8008bd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	fb02 f303 	mul.w	r3, r2, r3
 8008bde:	ee07 3a90 	vmov	s15, r3
 8008be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 80e1 	beq.w	8008db4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	f000 8083 	beq.w	8008d00 <HAL_RCC_GetSysClockFreq+0x204>
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	f200 80a1 	bhi.w	8008d44 <HAL_RCC_GetSysClockFreq+0x248>
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d003      	beq.n	8008c10 <HAL_RCC_GetSysClockFreq+0x114>
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d056      	beq.n	8008cbc <HAL_RCC_GetSysClockFreq+0x1c0>
 8008c0e:	e099      	b.n	8008d44 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c10:	4b6f      	ldr	r3, [pc, #444]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 0320 	and.w	r3, r3, #32
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d02d      	beq.n	8008c78 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c1c:	4b6c      	ldr	r3, [pc, #432]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	08db      	lsrs	r3, r3, #3
 8008c22:	f003 0303 	and.w	r3, r3, #3
 8008c26:	4a6b      	ldr	r2, [pc, #428]	@ (8008dd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c28:	fa22 f303 	lsr.w	r3, r2, r3
 8008c2c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	ee07 3a90 	vmov	s15, r3
 8008c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	ee07 3a90 	vmov	s15, r3
 8008c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c46:	4b62      	ldr	r3, [pc, #392]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c4e:	ee07 3a90 	vmov	s15, r3
 8008c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c56:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c5a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008de0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c72:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008c76:	e087      	b.n	8008d88 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	ee07 3a90 	vmov	s15, r3
 8008c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c82:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008de4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c8a:	4b51      	ldr	r3, [pc, #324]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c92:	ee07 3a90 	vmov	s15, r3
 8008c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c9e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008de0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008cba:	e065      	b.n	8008d88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	ee07 3a90 	vmov	s15, r3
 8008cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cc6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008de8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cce:	4b40      	ldr	r3, [pc, #256]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cd6:	ee07 3a90 	vmov	s15, r3
 8008cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cde:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ce2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008de0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008cfe:	e043      	b.n	8008d88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	ee07 3a90 	vmov	s15, r3
 8008d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d0a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008dec <HAL_RCC_GetSysClockFreq+0x2f0>
 8008d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d12:	4b2f      	ldr	r3, [pc, #188]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d1a:	ee07 3a90 	vmov	s15, r3
 8008d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d22:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d26:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008de0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d42:	e021      	b.n	8008d88 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	ee07 3a90 	vmov	s15, r3
 8008d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d4e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008de8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d56:	4b1e      	ldr	r3, [pc, #120]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d5e:	ee07 3a90 	vmov	s15, r3
 8008d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d66:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d6a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008de0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d86:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008d88:	4b11      	ldr	r3, [pc, #68]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d8c:	0a5b      	lsrs	r3, r3, #9
 8008d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d92:	3301      	adds	r3, #1
 8008d94:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	ee07 3a90 	vmov	s15, r3
 8008d9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008da0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dac:	ee17 3a90 	vmov	r3, s15
 8008db0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008db2:	e005      	b.n	8008dc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008db4:	2300      	movs	r3, #0
 8008db6:	61bb      	str	r3, [r7, #24]
      break;
 8008db8:	e002      	b.n	8008dc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008dba:	4b07      	ldr	r3, [pc, #28]	@ (8008dd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008dbc:	61bb      	str	r3, [r7, #24]
      break;
 8008dbe:	bf00      	nop
  }

  return sysclockfreq;
 8008dc0:	69bb      	ldr	r3, [r7, #24]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3724      	adds	r7, #36	@ 0x24
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	58024400 	.word	0x58024400
 8008dd4:	03d09000 	.word	0x03d09000
 8008dd8:	003d0900 	.word	0x003d0900
 8008ddc:	017d7840 	.word	0x017d7840
 8008de0:	46000000 	.word	0x46000000
 8008de4:	4c742400 	.word	0x4c742400
 8008de8:	4a742400 	.word	0x4a742400
 8008dec:	4bbebc20 	.word	0x4bbebc20

08008df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008df6:	f7ff fe81 	bl	8008afc <HAL_RCC_GetSysClockFreq>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	4b10      	ldr	r3, [pc, #64]	@ (8008e40 <HAL_RCC_GetHCLKFreq+0x50>)
 8008dfe:	699b      	ldr	r3, [r3, #24]
 8008e00:	0a1b      	lsrs	r3, r3, #8
 8008e02:	f003 030f 	and.w	r3, r3, #15
 8008e06:	490f      	ldr	r1, [pc, #60]	@ (8008e44 <HAL_RCC_GetHCLKFreq+0x54>)
 8008e08:	5ccb      	ldrb	r3, [r1, r3]
 8008e0a:	f003 031f 	and.w	r3, r3, #31
 8008e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e12:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e14:	4b0a      	ldr	r3, [pc, #40]	@ (8008e40 <HAL_RCC_GetHCLKFreq+0x50>)
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	f003 030f 	and.w	r3, r3, #15
 8008e1c:	4a09      	ldr	r2, [pc, #36]	@ (8008e44 <HAL_RCC_GetHCLKFreq+0x54>)
 8008e1e:	5cd3      	ldrb	r3, [r2, r3]
 8008e20:	f003 031f 	and.w	r3, r3, #31
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	fa22 f303 	lsr.w	r3, r2, r3
 8008e2a:	4a07      	ldr	r2, [pc, #28]	@ (8008e48 <HAL_RCC_GetHCLKFreq+0x58>)
 8008e2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008e2e:	4a07      	ldr	r2, [pc, #28]	@ (8008e4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008e34:	4b04      	ldr	r3, [pc, #16]	@ (8008e48 <HAL_RCC_GetHCLKFreq+0x58>)
 8008e36:	681b      	ldr	r3, [r3, #0]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	58024400 	.word	0x58024400
 8008e44:	0800fe58 	.word	0x0800fe58
 8008e48:	24000058 	.word	0x24000058
 8008e4c:	24000054 	.word	0x24000054

08008e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008e54:	f7ff ffcc 	bl	8008df0 <HAL_RCC_GetHCLKFreq>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	4b06      	ldr	r3, [pc, #24]	@ (8008e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e5c:	69db      	ldr	r3, [r3, #28]
 8008e5e:	091b      	lsrs	r3, r3, #4
 8008e60:	f003 0307 	and.w	r3, r3, #7
 8008e64:	4904      	ldr	r1, [pc, #16]	@ (8008e78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008e66:	5ccb      	ldrb	r3, [r1, r3]
 8008e68:	f003 031f 	and.w	r3, r3, #31
 8008e6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	58024400 	.word	0x58024400
 8008e78:	0800fe58 	.word	0x0800fe58

08008e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008e80:	f7ff ffb6 	bl	8008df0 <HAL_RCC_GetHCLKFreq>
 8008e84:	4602      	mov	r2, r0
 8008e86:	4b06      	ldr	r3, [pc, #24]	@ (8008ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e88:	69db      	ldr	r3, [r3, #28]
 8008e8a:	0a1b      	lsrs	r3, r3, #8
 8008e8c:	f003 0307 	and.w	r3, r3, #7
 8008e90:	4904      	ldr	r1, [pc, #16]	@ (8008ea4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008e92:	5ccb      	ldrb	r3, [r1, r3]
 8008e94:	f003 031f 	and.w	r3, r3, #31
 8008e98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	58024400 	.word	0x58024400
 8008ea4:	0800fe58 	.word	0x0800fe58

08008ea8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008eac:	b0c6      	sub	sp, #280	@ 0x118
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008eba:	2300      	movs	r3, #0
 8008ebc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008ecc:	2500      	movs	r5, #0
 8008ece:	ea54 0305 	orrs.w	r3, r4, r5
 8008ed2:	d049      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ed8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008eda:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ede:	d02f      	beq.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008ee0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ee4:	d828      	bhi.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008ee6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008eea:	d01a      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008eec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ef0:	d822      	bhi.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d003      	beq.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008ef6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008efa:	d007      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008efc:	e01c      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008efe:	4bab      	ldr	r3, [pc, #684]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f02:	4aaa      	ldr	r2, [pc, #680]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f0a:	e01a      	b.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f10:	3308      	adds	r3, #8
 8008f12:	2102      	movs	r1, #2
 8008f14:	4618      	mov	r0, r3
 8008f16:	f002 fa49 	bl	800b3ac <RCCEx_PLL2_Config>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f20:	e00f      	b.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f26:	3328      	adds	r3, #40	@ 0x28
 8008f28:	2102      	movs	r1, #2
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f002 faf0 	bl	800b510 <RCCEx_PLL3_Config>
 8008f30:	4603      	mov	r3, r0
 8008f32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f36:	e004      	b.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008f3e:	e000      	b.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008f40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10a      	bne.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008f4a:	4b98      	ldr	r3, [pc, #608]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f58:	4a94      	ldr	r2, [pc, #592]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f5a:	430b      	orrs	r3, r1
 8008f5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f5e:	e003      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f70:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008f74:	f04f 0900 	mov.w	r9, #0
 8008f78:	ea58 0309 	orrs.w	r3, r8, r9
 8008f7c:	d047      	beq.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f84:	2b04      	cmp	r3, #4
 8008f86:	d82a      	bhi.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008f88:	a201      	add	r2, pc, #4	@ (adr r2, 8008f90 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8e:	bf00      	nop
 8008f90:	08008fa5 	.word	0x08008fa5
 8008f94:	08008fb3 	.word	0x08008fb3
 8008f98:	08008fc9 	.word	0x08008fc9
 8008f9c:	08008fe7 	.word	0x08008fe7
 8008fa0:	08008fe7 	.word	0x08008fe7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fa4:	4b81      	ldr	r3, [pc, #516]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fa8:	4a80      	ldr	r2, [pc, #512]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008faa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fb0:	e01a      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fb6:	3308      	adds	r3, #8
 8008fb8:	2100      	movs	r1, #0
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f002 f9f6 	bl	800b3ac <RCCEx_PLL2_Config>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fc6:	e00f      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fcc:	3328      	adds	r3, #40	@ 0x28
 8008fce:	2100      	movs	r1, #0
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f002 fa9d 	bl	800b510 <RCCEx_PLL3_Config>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fdc:	e004      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008fe4:	e000      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fe8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10a      	bne.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ff0:	4b6e      	ldr	r3, [pc, #440]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ff4:	f023 0107 	bic.w	r1, r3, #7
 8008ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ffe:	4a6b      	ldr	r2, [pc, #428]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009000:	430b      	orrs	r3, r1
 8009002:	6513      	str	r3, [r2, #80]	@ 0x50
 8009004:	e003      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009006:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800900a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800900e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009016:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800901a:	f04f 0b00 	mov.w	fp, #0
 800901e:	ea5a 030b 	orrs.w	r3, sl, fp
 8009022:	d05b      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009028:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800902c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009030:	d03b      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009032:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009036:	d834      	bhi.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009038:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800903c:	d037      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x206>
 800903e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009042:	d82e      	bhi.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009044:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009048:	d033      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800904a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800904e:	d828      	bhi.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009050:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009054:	d01a      	beq.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009056:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800905a:	d822      	bhi.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800905c:	2b00      	cmp	r3, #0
 800905e:	d003      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009060:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009064:	d007      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009066:	e01c      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009068:	4b50      	ldr	r3, [pc, #320]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800906a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800906c:	4a4f      	ldr	r2, [pc, #316]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800906e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009072:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009074:	e01e      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800907a:	3308      	adds	r3, #8
 800907c:	2100      	movs	r1, #0
 800907e:	4618      	mov	r0, r3
 8009080:	f002 f994 	bl	800b3ac <RCCEx_PLL2_Config>
 8009084:	4603      	mov	r3, r0
 8009086:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800908a:	e013      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800908c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009090:	3328      	adds	r3, #40	@ 0x28
 8009092:	2100      	movs	r1, #0
 8009094:	4618      	mov	r0, r3
 8009096:	f002 fa3b 	bl	800b510 <RCCEx_PLL3_Config>
 800909a:	4603      	mov	r3, r0
 800909c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090a0:	e008      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80090a8:	e004      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80090aa:	bf00      	nop
 80090ac:	e002      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80090ae:	bf00      	nop
 80090b0:	e000      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80090b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d10b      	bne.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80090bc:	4b3b      	ldr	r3, [pc, #236]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80090be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090c0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80090c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80090cc:	4a37      	ldr	r2, [pc, #220]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80090ce:	430b      	orrs	r3, r1
 80090d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80090d2:	e003      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80090dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80090e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80090ec:	2300      	movs	r3, #0
 80090ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80090f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80090f6:	460b      	mov	r3, r1
 80090f8:	4313      	orrs	r3, r2
 80090fa:	d05d      	beq.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80090fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009100:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009104:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009108:	d03b      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800910a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800910e:	d834      	bhi.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009110:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009114:	d037      	beq.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009116:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800911a:	d82e      	bhi.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800911c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009120:	d033      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009122:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009126:	d828      	bhi.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009128:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800912c:	d01a      	beq.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800912e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009132:	d822      	bhi.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009134:	2b00      	cmp	r3, #0
 8009136:	d003      	beq.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009138:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800913c:	d007      	beq.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800913e:	e01c      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009140:	4b1a      	ldr	r3, [pc, #104]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009144:	4a19      	ldr	r2, [pc, #100]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800914a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800914c:	e01e      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800914e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009152:	3308      	adds	r3, #8
 8009154:	2100      	movs	r1, #0
 8009156:	4618      	mov	r0, r3
 8009158:	f002 f928 	bl	800b3ac <RCCEx_PLL2_Config>
 800915c:	4603      	mov	r3, r0
 800915e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009162:	e013      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009168:	3328      	adds	r3, #40	@ 0x28
 800916a:	2100      	movs	r1, #0
 800916c:	4618      	mov	r0, r3
 800916e:	f002 f9cf 	bl	800b510 <RCCEx_PLL3_Config>
 8009172:	4603      	mov	r3, r0
 8009174:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009178:	e008      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009180:	e004      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009182:	bf00      	nop
 8009184:	e002      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009186:	bf00      	nop
 8009188:	e000      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800918a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800918c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10d      	bne.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009194:	4b05      	ldr	r3, [pc, #20]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009198:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800919c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80091a4:	4a01      	ldr	r2, [pc, #4]	@ (80091ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80091a6:	430b      	orrs	r3, r1
 80091a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80091aa:	e005      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80091ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80091b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80091c4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80091c8:	2300      	movs	r3, #0
 80091ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80091ce:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80091d2:	460b      	mov	r3, r1
 80091d4:	4313      	orrs	r3, r2
 80091d6:	d03a      	beq.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80091d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091de:	2b30      	cmp	r3, #48	@ 0x30
 80091e0:	d01f      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80091e2:	2b30      	cmp	r3, #48	@ 0x30
 80091e4:	d819      	bhi.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80091e6:	2b20      	cmp	r3, #32
 80091e8:	d00c      	beq.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80091ea:	2b20      	cmp	r3, #32
 80091ec:	d815      	bhi.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d019      	beq.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80091f2:	2b10      	cmp	r3, #16
 80091f4:	d111      	bne.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091f6:	4baa      	ldr	r3, [pc, #680]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fa:	4aa9      	ldr	r2, [pc, #676]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009200:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009202:	e011      	b.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009208:	3308      	adds	r3, #8
 800920a:	2102      	movs	r1, #2
 800920c:	4618      	mov	r0, r3
 800920e:	f002 f8cd 	bl	800b3ac <RCCEx_PLL2_Config>
 8009212:	4603      	mov	r3, r0
 8009214:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009218:	e006      	b.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009220:	e002      	b.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009222:	bf00      	nop
 8009224:	e000      	b.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009228:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10a      	bne.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009230:	4b9b      	ldr	r3, [pc, #620]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009234:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800923c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800923e:	4a98      	ldr	r2, [pc, #608]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009240:	430b      	orrs	r3, r1
 8009242:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009244:	e003      	b.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009246:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800924a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800924e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009256:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800925a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800925e:	2300      	movs	r3, #0
 8009260:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009264:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009268:	460b      	mov	r3, r1
 800926a:	4313      	orrs	r3, r2
 800926c:	d051      	beq.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800926e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009274:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009278:	d035      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800927a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800927e:	d82e      	bhi.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009280:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009284:	d031      	beq.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009286:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800928a:	d828      	bhi.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x436>
 800928c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009290:	d01a      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009292:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009296:	d822      	bhi.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009298:	2b00      	cmp	r3, #0
 800929a:	d003      	beq.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800929c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092a0:	d007      	beq.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80092a2:	e01c      	b.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092a4:	4b7e      	ldr	r3, [pc, #504]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a8:	4a7d      	ldr	r2, [pc, #500]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80092b0:	e01c      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092b6:	3308      	adds	r3, #8
 80092b8:	2100      	movs	r1, #0
 80092ba:	4618      	mov	r0, r3
 80092bc:	f002 f876 	bl	800b3ac <RCCEx_PLL2_Config>
 80092c0:	4603      	mov	r3, r0
 80092c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80092c6:	e011      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092cc:	3328      	adds	r3, #40	@ 0x28
 80092ce:	2100      	movs	r1, #0
 80092d0:	4618      	mov	r0, r3
 80092d2:	f002 f91d 	bl	800b510 <RCCEx_PLL3_Config>
 80092d6:	4603      	mov	r3, r0
 80092d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80092dc:	e006      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80092e4:	e002      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80092e6:	bf00      	nop
 80092e8:	e000      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80092ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d10a      	bne.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80092f4:	4b6a      	ldr	r3, [pc, #424]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092f8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80092fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009302:	4a67      	ldr	r2, [pc, #412]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009304:	430b      	orrs	r3, r1
 8009306:	6513      	str	r3, [r2, #80]	@ 0x50
 8009308:	e003      	b.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800930a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800930e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800931e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009322:	2300      	movs	r3, #0
 8009324:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009328:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800932c:	460b      	mov	r3, r1
 800932e:	4313      	orrs	r3, r2
 8009330:	d053      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009338:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800933c:	d033      	beq.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800933e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009342:	d82c      	bhi.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009344:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009348:	d02f      	beq.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x502>
 800934a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800934e:	d826      	bhi.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009350:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009354:	d02b      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009356:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800935a:	d820      	bhi.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800935c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009360:	d012      	beq.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009362:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009366:	d81a      	bhi.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009368:	2b00      	cmp	r3, #0
 800936a:	d022      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800936c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009370:	d115      	bne.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009376:	3308      	adds	r3, #8
 8009378:	2101      	movs	r1, #1
 800937a:	4618      	mov	r0, r3
 800937c:	f002 f816 	bl	800b3ac <RCCEx_PLL2_Config>
 8009380:	4603      	mov	r3, r0
 8009382:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009386:	e015      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800938c:	3328      	adds	r3, #40	@ 0x28
 800938e:	2101      	movs	r1, #1
 8009390:	4618      	mov	r0, r3
 8009392:	f002 f8bd 	bl	800b510 <RCCEx_PLL3_Config>
 8009396:	4603      	mov	r3, r0
 8009398:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800939c:	e00a      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80093a4:	e006      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80093a6:	bf00      	nop
 80093a8:	e004      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80093aa:	bf00      	nop
 80093ac:	e002      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80093ae:	bf00      	nop
 80093b0:	e000      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80093b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d10a      	bne.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80093bc:	4b38      	ldr	r3, [pc, #224]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80093be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80093c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093ca:	4a35      	ldr	r2, [pc, #212]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80093cc:	430b      	orrs	r3, r1
 80093ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80093d0:	e003      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80093da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80093e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80093ea:	2300      	movs	r3, #0
 80093ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80093f0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80093f4:	460b      	mov	r3, r1
 80093f6:	4313      	orrs	r3, r2
 80093f8:	d058      	beq.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80093fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009402:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009406:	d033      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009408:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800940c:	d82c      	bhi.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800940e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009412:	d02f      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009418:	d826      	bhi.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800941a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800941e:	d02b      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009420:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009424:	d820      	bhi.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009426:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800942a:	d012      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800942c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009430:	d81a      	bhi.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009432:	2b00      	cmp	r3, #0
 8009434:	d022      	beq.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009436:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800943a:	d115      	bne.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800943c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009440:	3308      	adds	r3, #8
 8009442:	2101      	movs	r1, #1
 8009444:	4618      	mov	r0, r3
 8009446:	f001 ffb1 	bl	800b3ac <RCCEx_PLL2_Config>
 800944a:	4603      	mov	r3, r0
 800944c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009450:	e015      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009456:	3328      	adds	r3, #40	@ 0x28
 8009458:	2101      	movs	r1, #1
 800945a:	4618      	mov	r0, r3
 800945c:	f002 f858 	bl	800b510 <RCCEx_PLL3_Config>
 8009460:	4603      	mov	r3, r0
 8009462:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009466:	e00a      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800946e:	e006      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009470:	bf00      	nop
 8009472:	e004      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009474:	bf00      	nop
 8009476:	e002      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009478:	bf00      	nop
 800947a:	e000      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800947c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800947e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009482:	2b00      	cmp	r3, #0
 8009484:	d10e      	bne.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009486:	4b06      	ldr	r3, [pc, #24]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800948a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800948e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009492:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009496:	4a02      	ldr	r2, [pc, #8]	@ (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009498:	430b      	orrs	r3, r1
 800949a:	6593      	str	r3, [r2, #88]	@ 0x58
 800949c:	e006      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x604>
 800949e:	bf00      	nop
 80094a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80094ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80094b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80094bc:	2300      	movs	r3, #0
 80094be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80094c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80094c6:	460b      	mov	r3, r1
 80094c8:	4313      	orrs	r3, r2
 80094ca:	d037      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80094cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094d6:	d00e      	beq.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80094d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094dc:	d816      	bhi.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d018      	beq.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80094e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094e6:	d111      	bne.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094e8:	4bc4      	ldr	r3, [pc, #784]	@ (80097fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ec:	4ac3      	ldr	r2, [pc, #780]	@ (80097fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80094f4:	e00f      	b.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094fa:	3308      	adds	r3, #8
 80094fc:	2101      	movs	r1, #1
 80094fe:	4618      	mov	r0, r3
 8009500:	f001 ff54 	bl	800b3ac <RCCEx_PLL2_Config>
 8009504:	4603      	mov	r3, r0
 8009506:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800950a:	e004      	b.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009512:	e000      	b.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009516:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10a      	bne.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800951e:	4bb7      	ldr	r3, [pc, #732]	@ (80097fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009522:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800952a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800952c:	4ab3      	ldr	r2, [pc, #716]	@ (80097fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800952e:	430b      	orrs	r3, r1
 8009530:	6513      	str	r3, [r2, #80]	@ 0x50
 8009532:	e003      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009534:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009538:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800953c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009544:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009548:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800954c:	2300      	movs	r3, #0
 800954e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009552:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009556:	460b      	mov	r3, r1
 8009558:	4313      	orrs	r3, r2
 800955a:	d039      	beq.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800955c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009562:	2b03      	cmp	r3, #3
 8009564:	d81c      	bhi.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009566:	a201      	add	r2, pc, #4	@ (adr r2, 800956c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956c:	080095a9 	.word	0x080095a9
 8009570:	0800957d 	.word	0x0800957d
 8009574:	0800958b 	.word	0x0800958b
 8009578:	080095a9 	.word	0x080095a9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800957c:	4b9f      	ldr	r3, [pc, #636]	@ (80097fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800957e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009580:	4a9e      	ldr	r2, [pc, #632]	@ (80097fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009582:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009586:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009588:	e00f      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800958a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800958e:	3308      	adds	r3, #8
 8009590:	2102      	movs	r1, #2
 8009592:	4618      	mov	r0, r3
 8009594:	f001 ff0a 	bl	800b3ac <RCCEx_PLL2_Config>
 8009598:	4603      	mov	r3, r0
 800959a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800959e:	e004      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80095a6:	e000      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80095a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d10a      	bne.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80095b2:	4b92      	ldr	r3, [pc, #584]	@ (80097fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095b6:	f023 0103 	bic.w	r1, r3, #3
 80095ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095c0:	4a8e      	ldr	r2, [pc, #568]	@ (80097fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80095c2:	430b      	orrs	r3, r1
 80095c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80095c6:	e003      	b.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80095d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80095dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80095e0:	2300      	movs	r3, #0
 80095e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80095e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80095ea:	460b      	mov	r3, r1
 80095ec:	4313      	orrs	r3, r2
 80095ee:	f000 8099 	beq.w	8009724 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80095f2:	4b83      	ldr	r3, [pc, #524]	@ (8009800 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a82      	ldr	r2, [pc, #520]	@ (8009800 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80095f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80095fe:	f7f9 fa87 	bl	8002b10 <HAL_GetTick>
 8009602:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009606:	e00b      	b.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009608:	f7f9 fa82 	bl	8002b10 <HAL_GetTick>
 800960c:	4602      	mov	r2, r0
 800960e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009612:	1ad3      	subs	r3, r2, r3
 8009614:	2b64      	cmp	r3, #100	@ 0x64
 8009616:	d903      	bls.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009618:	2303      	movs	r3, #3
 800961a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800961e:	e005      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009620:	4b77      	ldr	r3, [pc, #476]	@ (8009800 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009628:	2b00      	cmp	r3, #0
 800962a:	d0ed      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800962c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009630:	2b00      	cmp	r3, #0
 8009632:	d173      	bne.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009634:	4b71      	ldr	r3, [pc, #452]	@ (80097fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009636:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800963c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009640:	4053      	eors	r3, r2
 8009642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009646:	2b00      	cmp	r3, #0
 8009648:	d015      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800964a:	4b6c      	ldr	r3, [pc, #432]	@ (80097fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800964c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800964e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009652:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009656:	4b69      	ldr	r3, [pc, #420]	@ (80097fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800965a:	4a68      	ldr	r2, [pc, #416]	@ (80097fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800965c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009660:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009662:	4b66      	ldr	r3, [pc, #408]	@ (80097fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009666:	4a65      	ldr	r2, [pc, #404]	@ (80097fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009668:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800966c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800966e:	4a63      	ldr	r2, [pc, #396]	@ (80097fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009670:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009674:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800967a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800967e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009682:	d118      	bne.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009684:	f7f9 fa44 	bl	8002b10 <HAL_GetTick>
 8009688:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800968c:	e00d      	b.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800968e:	f7f9 fa3f 	bl	8002b10 <HAL_GetTick>
 8009692:	4602      	mov	r2, r0
 8009694:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009698:	1ad2      	subs	r2, r2, r3
 800969a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800969e:	429a      	cmp	r2, r3
 80096a0:	d903      	bls.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80096a2:	2303      	movs	r3, #3
 80096a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80096a8:	e005      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096aa:	4b54      	ldr	r3, [pc, #336]	@ (80097fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80096ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096ae:	f003 0302 	and.w	r3, r3, #2
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d0eb      	beq.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80096b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d129      	bne.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80096be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80096c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80096ce:	d10e      	bne.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x846>
 80096d0:	4b4a      	ldr	r3, [pc, #296]	@ (80097fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80096d2:	691b      	ldr	r3, [r3, #16]
 80096d4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80096d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80096e0:	091a      	lsrs	r2, r3, #4
 80096e2:	4b48      	ldr	r3, [pc, #288]	@ (8009804 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80096e4:	4013      	ands	r3, r2
 80096e6:	4a45      	ldr	r2, [pc, #276]	@ (80097fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80096e8:	430b      	orrs	r3, r1
 80096ea:	6113      	str	r3, [r2, #16]
 80096ec:	e005      	b.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x852>
 80096ee:	4b43      	ldr	r3, [pc, #268]	@ (80097fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80096f0:	691b      	ldr	r3, [r3, #16]
 80096f2:	4a42      	ldr	r2, [pc, #264]	@ (80097fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80096f4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80096f8:	6113      	str	r3, [r2, #16]
 80096fa:	4b40      	ldr	r3, [pc, #256]	@ (80097fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80096fc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80096fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009702:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800970a:	4a3c      	ldr	r2, [pc, #240]	@ (80097fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800970c:	430b      	orrs	r3, r1
 800970e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009710:	e008      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009712:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009716:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800971a:	e003      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800971c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009720:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972c:	f002 0301 	and.w	r3, r2, #1
 8009730:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009734:	2300      	movs	r3, #0
 8009736:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800973a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800973e:	460b      	mov	r3, r1
 8009740:	4313      	orrs	r3, r2
 8009742:	f000 808f 	beq.w	8009864 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800974a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800974c:	2b28      	cmp	r3, #40	@ 0x28
 800974e:	d871      	bhi.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009750:	a201      	add	r2, pc, #4	@ (adr r2, 8009758 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009756:	bf00      	nop
 8009758:	0800983d 	.word	0x0800983d
 800975c:	08009835 	.word	0x08009835
 8009760:	08009835 	.word	0x08009835
 8009764:	08009835 	.word	0x08009835
 8009768:	08009835 	.word	0x08009835
 800976c:	08009835 	.word	0x08009835
 8009770:	08009835 	.word	0x08009835
 8009774:	08009835 	.word	0x08009835
 8009778:	08009809 	.word	0x08009809
 800977c:	08009835 	.word	0x08009835
 8009780:	08009835 	.word	0x08009835
 8009784:	08009835 	.word	0x08009835
 8009788:	08009835 	.word	0x08009835
 800978c:	08009835 	.word	0x08009835
 8009790:	08009835 	.word	0x08009835
 8009794:	08009835 	.word	0x08009835
 8009798:	0800981f 	.word	0x0800981f
 800979c:	08009835 	.word	0x08009835
 80097a0:	08009835 	.word	0x08009835
 80097a4:	08009835 	.word	0x08009835
 80097a8:	08009835 	.word	0x08009835
 80097ac:	08009835 	.word	0x08009835
 80097b0:	08009835 	.word	0x08009835
 80097b4:	08009835 	.word	0x08009835
 80097b8:	0800983d 	.word	0x0800983d
 80097bc:	08009835 	.word	0x08009835
 80097c0:	08009835 	.word	0x08009835
 80097c4:	08009835 	.word	0x08009835
 80097c8:	08009835 	.word	0x08009835
 80097cc:	08009835 	.word	0x08009835
 80097d0:	08009835 	.word	0x08009835
 80097d4:	08009835 	.word	0x08009835
 80097d8:	0800983d 	.word	0x0800983d
 80097dc:	08009835 	.word	0x08009835
 80097e0:	08009835 	.word	0x08009835
 80097e4:	08009835 	.word	0x08009835
 80097e8:	08009835 	.word	0x08009835
 80097ec:	08009835 	.word	0x08009835
 80097f0:	08009835 	.word	0x08009835
 80097f4:	08009835 	.word	0x08009835
 80097f8:	0800983d 	.word	0x0800983d
 80097fc:	58024400 	.word	0x58024400
 8009800:	58024800 	.word	0x58024800
 8009804:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800980c:	3308      	adds	r3, #8
 800980e:	2101      	movs	r1, #1
 8009810:	4618      	mov	r0, r3
 8009812:	f001 fdcb 	bl	800b3ac <RCCEx_PLL2_Config>
 8009816:	4603      	mov	r3, r0
 8009818:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800981c:	e00f      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800981e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009822:	3328      	adds	r3, #40	@ 0x28
 8009824:	2101      	movs	r1, #1
 8009826:	4618      	mov	r0, r3
 8009828:	f001 fe72 	bl	800b510 <RCCEx_PLL3_Config>
 800982c:	4603      	mov	r3, r0
 800982e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009832:	e004      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800983a:	e000      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800983c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800983e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10a      	bne.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009846:	4bbf      	ldr	r3, [pc, #764]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800984a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800984e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009852:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009854:	4abb      	ldr	r2, [pc, #748]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009856:	430b      	orrs	r3, r1
 8009858:	6553      	str	r3, [r2, #84]	@ 0x54
 800985a:	e003      	b.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800985c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009860:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	f002 0302 	and.w	r3, r2, #2
 8009870:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009874:	2300      	movs	r3, #0
 8009876:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800987a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800987e:	460b      	mov	r3, r1
 8009880:	4313      	orrs	r3, r2
 8009882:	d041      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800988a:	2b05      	cmp	r3, #5
 800988c:	d824      	bhi.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800988e:	a201      	add	r2, pc, #4	@ (adr r2, 8009894 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009894:	080098e1 	.word	0x080098e1
 8009898:	080098ad 	.word	0x080098ad
 800989c:	080098c3 	.word	0x080098c3
 80098a0:	080098e1 	.word	0x080098e1
 80098a4:	080098e1 	.word	0x080098e1
 80098a8:	080098e1 	.word	0x080098e1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098b0:	3308      	adds	r3, #8
 80098b2:	2101      	movs	r1, #1
 80098b4:	4618      	mov	r0, r3
 80098b6:	f001 fd79 	bl	800b3ac <RCCEx_PLL2_Config>
 80098ba:	4603      	mov	r3, r0
 80098bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80098c0:	e00f      	b.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098c6:	3328      	adds	r3, #40	@ 0x28
 80098c8:	2101      	movs	r1, #1
 80098ca:	4618      	mov	r0, r3
 80098cc:	f001 fe20 	bl	800b510 <RCCEx_PLL3_Config>
 80098d0:	4603      	mov	r3, r0
 80098d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80098d6:	e004      	b.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098d8:	2301      	movs	r3, #1
 80098da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80098de:	e000      	b.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80098e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10a      	bne.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80098ea:	4b96      	ldr	r3, [pc, #600]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80098ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ee:	f023 0107 	bic.w	r1, r3, #7
 80098f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098f8:	4a92      	ldr	r2, [pc, #584]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80098fa:	430b      	orrs	r3, r1
 80098fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80098fe:	e003      	b.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009900:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009904:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800990c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009910:	f002 0304 	and.w	r3, r2, #4
 8009914:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009918:	2300      	movs	r3, #0
 800991a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800991e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009922:	460b      	mov	r3, r1
 8009924:	4313      	orrs	r3, r2
 8009926:	d044      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800992c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009930:	2b05      	cmp	r3, #5
 8009932:	d825      	bhi.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009934:	a201      	add	r2, pc, #4	@ (adr r2, 800993c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993a:	bf00      	nop
 800993c:	08009989 	.word	0x08009989
 8009940:	08009955 	.word	0x08009955
 8009944:	0800996b 	.word	0x0800996b
 8009948:	08009989 	.word	0x08009989
 800994c:	08009989 	.word	0x08009989
 8009950:	08009989 	.word	0x08009989
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009958:	3308      	adds	r3, #8
 800995a:	2101      	movs	r1, #1
 800995c:	4618      	mov	r0, r3
 800995e:	f001 fd25 	bl	800b3ac <RCCEx_PLL2_Config>
 8009962:	4603      	mov	r3, r0
 8009964:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009968:	e00f      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800996a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800996e:	3328      	adds	r3, #40	@ 0x28
 8009970:	2101      	movs	r1, #1
 8009972:	4618      	mov	r0, r3
 8009974:	f001 fdcc 	bl	800b510 <RCCEx_PLL3_Config>
 8009978:	4603      	mov	r3, r0
 800997a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800997e:	e004      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009986:	e000      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800998a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10b      	bne.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009992:	4b6c      	ldr	r3, [pc, #432]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009996:	f023 0107 	bic.w	r1, r3, #7
 800999a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800999e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099a2:	4a68      	ldr	r2, [pc, #416]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80099a4:	430b      	orrs	r3, r1
 80099a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80099a8:	e003      	b.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80099b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ba:	f002 0320 	and.w	r3, r2, #32
 80099be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80099c2:	2300      	movs	r3, #0
 80099c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80099c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80099cc:	460b      	mov	r3, r1
 80099ce:	4313      	orrs	r3, r2
 80099d0:	d055      	beq.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80099d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099de:	d033      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80099e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099e4:	d82c      	bhi.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80099e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099ea:	d02f      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80099ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099f0:	d826      	bhi.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80099f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80099f6:	d02b      	beq.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80099f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80099fc:	d820      	bhi.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80099fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a02:	d012      	beq.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009a04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a08:	d81a      	bhi.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d022      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009a0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a12:	d115      	bne.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a18:	3308      	adds	r3, #8
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f001 fcc5 	bl	800b3ac <RCCEx_PLL2_Config>
 8009a22:	4603      	mov	r3, r0
 8009a24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009a28:	e015      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a2e:	3328      	adds	r3, #40	@ 0x28
 8009a30:	2102      	movs	r1, #2
 8009a32:	4618      	mov	r0, r3
 8009a34:	f001 fd6c 	bl	800b510 <RCCEx_PLL3_Config>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009a3e:	e00a      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a46:	e006      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009a48:	bf00      	nop
 8009a4a:	e004      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009a4c:	bf00      	nop
 8009a4e:	e002      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009a50:	bf00      	nop
 8009a52:	e000      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10b      	bne.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009a5e:	4b39      	ldr	r3, [pc, #228]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a62:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a6e:	4a35      	ldr	r2, [pc, #212]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009a70:	430b      	orrs	r3, r1
 8009a72:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a74:	e003      	b.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a86:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009a8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009a94:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009a98:	460b      	mov	r3, r1
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	d058      	beq.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009aa6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009aaa:	d033      	beq.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8009aac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009ab0:	d82c      	bhi.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ab6:	d02f      	beq.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009ab8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009abc:	d826      	bhi.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009abe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ac2:	d02b      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009ac4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ac8:	d820      	bhi.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009aca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ace:	d012      	beq.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009ad0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ad4:	d81a      	bhi.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d022      	beq.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ade:	d115      	bne.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ae4:	3308      	adds	r3, #8
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f001 fc5f 	bl	800b3ac <RCCEx_PLL2_Config>
 8009aee:	4603      	mov	r3, r0
 8009af0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009af4:	e015      	b.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009afa:	3328      	adds	r3, #40	@ 0x28
 8009afc:	2102      	movs	r1, #2
 8009afe:	4618      	mov	r0, r3
 8009b00:	f001 fd06 	bl	800b510 <RCCEx_PLL3_Config>
 8009b04:	4603      	mov	r3, r0
 8009b06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009b0a:	e00a      	b.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b12:	e006      	b.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009b14:	bf00      	nop
 8009b16:	e004      	b.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009b18:	bf00      	nop
 8009b1a:	e002      	b.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009b1c:	bf00      	nop
 8009b1e:	e000      	b.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d10e      	bne.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009b2a:	4b06      	ldr	r3, [pc, #24]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b2e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009b3a:	4a02      	ldr	r2, [pc, #8]	@ (8009b44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009b3c:	430b      	orrs	r3, r1
 8009b3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b40:	e006      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009b42:	bf00      	nop
 8009b44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b58:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009b5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009b60:	2300      	movs	r3, #0
 8009b62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009b66:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	d055      	beq.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b78:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009b7c:	d033      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8009b7e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009b82:	d82c      	bhi.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009b84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b88:	d02f      	beq.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009b8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b8e:	d826      	bhi.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009b90:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009b94:	d02b      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009b96:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009b9a:	d820      	bhi.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009b9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ba0:	d012      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8009ba2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ba6:	d81a      	bhi.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d022      	beq.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009bac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bb0:	d115      	bne.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bb6:	3308      	adds	r3, #8
 8009bb8:	2100      	movs	r1, #0
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f001 fbf6 	bl	800b3ac <RCCEx_PLL2_Config>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009bc6:	e015      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bcc:	3328      	adds	r3, #40	@ 0x28
 8009bce:	2102      	movs	r1, #2
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f001 fc9d 	bl	800b510 <RCCEx_PLL3_Config>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009bdc:	e00a      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009be4:	e006      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009be6:	bf00      	nop
 8009be8:	e004      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009bea:	bf00      	nop
 8009bec:	e002      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009bee:	bf00      	nop
 8009bf0:	e000      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bf4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d10b      	bne.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009bfc:	4ba0      	ldr	r3, [pc, #640]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c00:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c0c:	4a9c      	ldr	r2, [pc, #624]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c0e:	430b      	orrs	r3, r1
 8009c10:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c12:	e003      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c24:	f002 0308 	and.w	r3, r2, #8
 8009c28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009c32:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009c36:	460b      	mov	r3, r1
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	d01e      	beq.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c48:	d10c      	bne.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c4e:	3328      	adds	r3, #40	@ 0x28
 8009c50:	2102      	movs	r1, #2
 8009c52:	4618      	mov	r0, r3
 8009c54:	f001 fc5c 	bl	800b510 <RCCEx_PLL3_Config>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d002      	beq.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009c64:	4b86      	ldr	r3, [pc, #536]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c68:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c74:	4a82      	ldr	r2, [pc, #520]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c76:	430b      	orrs	r3, r1
 8009c78:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c82:	f002 0310 	and.w	r3, r2, #16
 8009c86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009c90:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009c94:	460b      	mov	r3, r1
 8009c96:	4313      	orrs	r3, r2
 8009c98:	d01e      	beq.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ca6:	d10c      	bne.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cac:	3328      	adds	r3, #40	@ 0x28
 8009cae:	2102      	movs	r1, #2
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f001 fc2d 	bl	800b510 <RCCEx_PLL3_Config>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d002      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009cc2:	4b6f      	ldr	r3, [pc, #444]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cc6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009cd2:	4a6b      	ldr	r2, [pc, #428]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009cd4:	430b      	orrs	r3, r1
 8009cd6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009ce4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009cea:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009cee:	460b      	mov	r3, r1
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	d03e      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cf8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009cfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d00:	d022      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009d02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d06:	d81b      	bhi.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d003      	beq.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d10:	d00b      	beq.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009d12:	e015      	b.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d18:	3308      	adds	r3, #8
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f001 fb45 	bl	800b3ac <RCCEx_PLL2_Config>
 8009d22:	4603      	mov	r3, r0
 8009d24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009d28:	e00f      	b.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d2e:	3328      	adds	r3, #40	@ 0x28
 8009d30:	2102      	movs	r1, #2
 8009d32:	4618      	mov	r0, r3
 8009d34:	f001 fbec 	bl	800b510 <RCCEx_PLL3_Config>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009d3e:	e004      	b.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d46:	e000      	b.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10b      	bne.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009d52:	4b4b      	ldr	r3, [pc, #300]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d56:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009d62:	4a47      	ldr	r2, [pc, #284]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009d64:	430b      	orrs	r3, r1
 8009d66:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d68:	e003      	b.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009d7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d80:	2300      	movs	r3, #0
 8009d82:	677b      	str	r3, [r7, #116]	@ 0x74
 8009d84:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009d88:	460b      	mov	r3, r1
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	d03b      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d9a:	d01f      	beq.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009d9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009da0:	d818      	bhi.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009da2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009da6:	d003      	beq.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009da8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009dac:	d007      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009dae:	e011      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009db0:	4b33      	ldr	r3, [pc, #204]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009db4:	4a32      	ldr	r2, [pc, #200]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009db6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009dba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009dbc:	e00f      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dc2:	3328      	adds	r3, #40	@ 0x28
 8009dc4:	2101      	movs	r1, #1
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f001 fba2 	bl	800b510 <RCCEx_PLL3_Config>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009dd2:	e004      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009dda:	e000      	b.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10b      	bne.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009de6:	4b26      	ldr	r3, [pc, #152]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009df6:	4a22      	ldr	r2, [pc, #136]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009df8:	430b      	orrs	r3, r1
 8009dfa:	6553      	str	r3, [r2, #84]	@ 0x54
 8009dfc:	e003      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009e12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e14:	2300      	movs	r3, #0
 8009e16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009e18:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	d034      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d003      	beq.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e30:	d007      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009e32:	e011      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e34:	4b12      	ldr	r3, [pc, #72]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e38:	4a11      	ldr	r2, [pc, #68]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009e3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009e40:	e00e      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e46:	3308      	adds	r3, #8
 8009e48:	2102      	movs	r1, #2
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f001 faae 	bl	800b3ac <RCCEx_PLL2_Config>
 8009e50:	4603      	mov	r3, r0
 8009e52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009e56:	e003      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10d      	bne.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009e68:	4b05      	ldr	r3, [pc, #20]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e6c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e76:	4a02      	ldr	r2, [pc, #8]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009e78:	430b      	orrs	r3, r1
 8009e7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009e7c:	e006      	b.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009e7e:	bf00      	nop
 8009e80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e94:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009e98:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e9e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	d00c      	beq.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eac:	3328      	adds	r3, #40	@ 0x28
 8009eae:	2102      	movs	r1, #2
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f001 fb2d 	bl	800b510 <RCCEx_PLL3_Config>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d002      	beq.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009ece:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ed4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009ed8:	460b      	mov	r3, r1
 8009eda:	4313      	orrs	r3, r2
 8009edc:	d036      	beq.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ee2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ee4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ee8:	d018      	beq.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009eea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009eee:	d811      	bhi.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ef4:	d014      	beq.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009ef6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009efa:	d80b      	bhi.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d011      	beq.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009f00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f04:	d106      	bne.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f06:	4bb7      	ldr	r3, [pc, #732]	@ (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f0a:	4ab6      	ldr	r2, [pc, #728]	@ (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009f12:	e008      	b.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f1a:	e004      	b.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009f1c:	bf00      	nop
 8009f1e:	e002      	b.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009f20:	bf00      	nop
 8009f22:	e000      	b.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d10a      	bne.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f2e:	4bad      	ldr	r3, [pc, #692]	@ (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f32:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f3c:	4aa9      	ldr	r2, [pc, #676]	@ (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f3e:	430b      	orrs	r3, r1
 8009f40:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f42:	e003      	b.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f54:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009f58:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f5e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009f62:	460b      	mov	r3, r1
 8009f64:	4313      	orrs	r3, r2
 8009f66:	d009      	beq.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009f68:	4b9e      	ldr	r3, [pc, #632]	@ (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f6c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f76:	4a9b      	ldr	r2, [pc, #620]	@ (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f78:	430b      	orrs	r3, r1
 8009f7a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f84:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009f88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f8e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009f92:	460b      	mov	r3, r1
 8009f94:	4313      	orrs	r3, r2
 8009f96:	d009      	beq.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009f98:	4b92      	ldr	r3, [pc, #584]	@ (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f9c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009fa6:	4a8f      	ldr	r2, [pc, #572]	@ (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009fa8:	430b      	orrs	r3, r1
 8009faa:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009fb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8009fba:	2300      	movs	r3, #0
 8009fbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fbe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	d00e      	beq.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009fc8:	4b86      	ldr	r3, [pc, #536]	@ (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	4a85      	ldr	r2, [pc, #532]	@ (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009fce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009fd2:	6113      	str	r3, [r2, #16]
 8009fd4:	4b83      	ldr	r3, [pc, #524]	@ (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009fd6:	6919      	ldr	r1, [r3, #16]
 8009fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fdc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009fe0:	4a80      	ldr	r2, [pc, #512]	@ (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009fe2:	430b      	orrs	r3, r1
 8009fe4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fee:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ff8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	4313      	orrs	r3, r2
 800a000:	d009      	beq.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a002:	4b78      	ldr	r3, [pc, #480]	@ (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a006:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a00a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a00e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a010:	4a74      	ldr	r2, [pc, #464]	@ (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a012:	430b      	orrs	r3, r1
 800a014:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a022:	633b      	str	r3, [r7, #48]	@ 0x30
 800a024:	2300      	movs	r3, #0
 800a026:	637b      	str	r3, [r7, #52]	@ 0x34
 800a028:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a02c:	460b      	mov	r3, r1
 800a02e:	4313      	orrs	r3, r2
 800a030:	d00a      	beq.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a032:	4b6c      	ldr	r3, [pc, #432]	@ (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a036:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a03a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a03e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a042:	4a68      	ldr	r2, [pc, #416]	@ (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a044:	430b      	orrs	r3, r1
 800a046:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a050:	2100      	movs	r1, #0
 800a052:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a054:	f003 0301 	and.w	r3, r3, #1
 800a058:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a05a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a05e:	460b      	mov	r3, r1
 800a060:	4313      	orrs	r3, r2
 800a062:	d011      	beq.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a068:	3308      	adds	r3, #8
 800a06a:	2100      	movs	r1, #0
 800a06c:	4618      	mov	r0, r3
 800a06e:	f001 f99d 	bl	800b3ac <RCCEx_PLL2_Config>
 800a072:	4603      	mov	r3, r0
 800a074:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a078:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d003      	beq.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a080:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a084:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a090:	2100      	movs	r1, #0
 800a092:	6239      	str	r1, [r7, #32]
 800a094:	f003 0302 	and.w	r3, r3, #2
 800a098:	627b      	str	r3, [r7, #36]	@ 0x24
 800a09a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a09e:	460b      	mov	r3, r1
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	d011      	beq.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0a8:	3308      	adds	r3, #8
 800a0aa:	2101      	movs	r1, #1
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f001 f97d 	bl	800b3ac <RCCEx_PLL2_Config>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a0b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d003      	beq.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a0c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	61b9      	str	r1, [r7, #24]
 800a0d4:	f003 0304 	and.w	r3, r3, #4
 800a0d8:	61fb      	str	r3, [r7, #28]
 800a0da:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a0de:	460b      	mov	r3, r1
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	d011      	beq.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0e8:	3308      	adds	r3, #8
 800a0ea:	2102      	movs	r1, #2
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f001 f95d 	bl	800b3ac <RCCEx_PLL2_Config>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a0f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d003      	beq.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a100:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a104:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a110:	2100      	movs	r1, #0
 800a112:	6139      	str	r1, [r7, #16]
 800a114:	f003 0308 	and.w	r3, r3, #8
 800a118:	617b      	str	r3, [r7, #20]
 800a11a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a11e:	460b      	mov	r3, r1
 800a120:	4313      	orrs	r3, r2
 800a122:	d011      	beq.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a128:	3328      	adds	r3, #40	@ 0x28
 800a12a:	2100      	movs	r1, #0
 800a12c:	4618      	mov	r0, r3
 800a12e:	f001 f9ef 	bl	800b510 <RCCEx_PLL3_Config>
 800a132:	4603      	mov	r3, r0
 800a134:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800a138:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d003      	beq.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a140:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a144:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a150:	2100      	movs	r1, #0
 800a152:	60b9      	str	r1, [r7, #8]
 800a154:	f003 0310 	and.w	r3, r3, #16
 800a158:	60fb      	str	r3, [r7, #12]
 800a15a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a15e:	460b      	mov	r3, r1
 800a160:	4313      	orrs	r3, r2
 800a162:	d011      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a168:	3328      	adds	r3, #40	@ 0x28
 800a16a:	2101      	movs	r1, #1
 800a16c:	4618      	mov	r0, r3
 800a16e:	f001 f9cf 	bl	800b510 <RCCEx_PLL3_Config>
 800a172:	4603      	mov	r3, r0
 800a174:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a178:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d003      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a180:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a184:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a190:	2100      	movs	r1, #0
 800a192:	6039      	str	r1, [r7, #0]
 800a194:	f003 0320 	and.w	r3, r3, #32
 800a198:	607b      	str	r3, [r7, #4]
 800a19a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a19e:	460b      	mov	r3, r1
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	d011      	beq.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1a8:	3328      	adds	r3, #40	@ 0x28
 800a1aa:	2102      	movs	r1, #2
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f001 f9af 	bl	800b510 <RCCEx_PLL3_Config>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a1b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d003      	beq.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800a1c8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d101      	bne.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	e000      	b.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1e2:	bf00      	nop
 800a1e4:	58024400 	.word	0x58024400

0800a1e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b090      	sub	sp, #64	@ 0x40
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a1f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1f6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a1fa:	430b      	orrs	r3, r1
 800a1fc:	f040 8094 	bne.w	800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a200:	4b9b      	ldr	r3, [pc, #620]	@ (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a204:	f003 0307 	and.w	r3, r3, #7
 800a208:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a20c:	2b04      	cmp	r3, #4
 800a20e:	f200 8087 	bhi.w	800a320 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a212:	a201      	add	r2, pc, #4	@ (adr r2, 800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a218:	0800a22d 	.word	0x0800a22d
 800a21c:	0800a255 	.word	0x0800a255
 800a220:	0800a27d 	.word	0x0800a27d
 800a224:	0800a319 	.word	0x0800a319
 800a228:	0800a2a5 	.word	0x0800a2a5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a22c:	4b90      	ldr	r3, [pc, #576]	@ (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a234:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a238:	d108      	bne.n	800a24c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a23a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a23e:	4618      	mov	r0, r3
 800a240:	f000 ff62 	bl	800b108 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a248:	f000 bc93 	b.w	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a24c:	2300      	movs	r3, #0
 800a24e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a250:	f000 bc8f 	b.w	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a254:	4b86      	ldr	r3, [pc, #536]	@ (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a25c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a260:	d108      	bne.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a262:	f107 0318 	add.w	r3, r7, #24
 800a266:	4618      	mov	r0, r3
 800a268:	f000 fca6 	bl	800abb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a270:	f000 bc7f 	b.w	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a274:	2300      	movs	r3, #0
 800a276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a278:	f000 bc7b 	b.w	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a27c:	4b7c      	ldr	r3, [pc, #496]	@ (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a284:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a288:	d108      	bne.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a28a:	f107 030c 	add.w	r3, r7, #12
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 fde6 	bl	800ae60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a298:	f000 bc6b 	b.w	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a29c:	2300      	movs	r3, #0
 800a29e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2a0:	f000 bc67 	b.w	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a2a4:	4b72      	ldr	r3, [pc, #456]	@ (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a2a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a2ac:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a2ae:	4b70      	ldr	r3, [pc, #448]	@ (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f003 0304 	and.w	r3, r3, #4
 800a2b6:	2b04      	cmp	r3, #4
 800a2b8:	d10c      	bne.n	800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a2ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d109      	bne.n	800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2c0:	4b6b      	ldr	r3, [pc, #428]	@ (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	08db      	lsrs	r3, r3, #3
 800a2c6:	f003 0303 	and.w	r3, r3, #3
 800a2ca:	4a6a      	ldr	r2, [pc, #424]	@ (800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a2cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a2d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2d2:	e01f      	b.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a2d4:	4b66      	ldr	r3, [pc, #408]	@ (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2e0:	d106      	bne.n	800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a2e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2e8:	d102      	bne.n	800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a2ea:	4b63      	ldr	r3, [pc, #396]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a2ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2ee:	e011      	b.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a2f0:	4b5f      	ldr	r3, [pc, #380]	@ (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2fc:	d106      	bne.n	800a30c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a2fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a300:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a304:	d102      	bne.n	800a30c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a306:	4b5d      	ldr	r3, [pc, #372]	@ (800a47c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a308:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a30a:	e003      	b.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a30c:	2300      	movs	r3, #0
 800a30e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a310:	f000 bc2f 	b.w	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a314:	f000 bc2d 	b.w	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a318:	4b59      	ldr	r3, [pc, #356]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a31a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a31c:	f000 bc29 	b.w	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a320:	2300      	movs	r3, #0
 800a322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a324:	f000 bc25 	b.w	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a32c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a330:	430b      	orrs	r3, r1
 800a332:	f040 80a7 	bne.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a336:	4b4e      	ldr	r3, [pc, #312]	@ (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a33a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a33e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a342:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a346:	d054      	beq.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a34e:	f200 808b 	bhi.w	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a354:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a358:	f000 8083 	beq.w	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a362:	f200 8081 	bhi.w	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a368:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a36c:	d02f      	beq.n	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a370:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a374:	d878      	bhi.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d004      	beq.n	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a37c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a37e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a382:	d012      	beq.n	800a3aa <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a384:	e070      	b.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a386:	4b3a      	ldr	r3, [pc, #232]	@ (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a38e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a392:	d107      	bne.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a394:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a398:	4618      	mov	r0, r3
 800a39a:	f000 feb5 	bl	800b108 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3a2:	e3e6      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3a8:	e3e3      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3aa:	4b31      	ldr	r3, [pc, #196]	@ (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3b6:	d107      	bne.n	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3b8:	f107 0318 	add.w	r3, r7, #24
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f000 fbfb 	bl	800abb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3c6:	e3d4      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3cc:	e3d1      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a3ce:	4b28      	ldr	r3, [pc, #160]	@ (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a3d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3da:	d107      	bne.n	800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3dc:	f107 030c 	add.w	r3, r7, #12
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f000 fd3d 	bl	800ae60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3ea:	e3c2      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3f0:	e3bf      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a3f2:	4b1f      	ldr	r3, [pc, #124]	@ (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a3f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a3fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a3fc:	4b1c      	ldr	r3, [pc, #112]	@ (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 0304 	and.w	r3, r3, #4
 800a404:	2b04      	cmp	r3, #4
 800a406:	d10c      	bne.n	800a422 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d109      	bne.n	800a422 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a40e:	4b18      	ldr	r3, [pc, #96]	@ (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	08db      	lsrs	r3, r3, #3
 800a414:	f003 0303 	and.w	r3, r3, #3
 800a418:	4a16      	ldr	r2, [pc, #88]	@ (800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a41a:	fa22 f303 	lsr.w	r3, r2, r3
 800a41e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a420:	e01e      	b.n	800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a422:	4b13      	ldr	r3, [pc, #76]	@ (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a42a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a42e:	d106      	bne.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a432:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a436:	d102      	bne.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a438:	4b0f      	ldr	r3, [pc, #60]	@ (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a43c:	e010      	b.n	800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a43e:	4b0c      	ldr	r3, [pc, #48]	@ (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a446:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a44a:	d106      	bne.n	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a44c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a44e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a452:	d102      	bne.n	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a454:	4b09      	ldr	r3, [pc, #36]	@ (800a47c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a456:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a458:	e002      	b.n	800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a45a:	2300      	movs	r3, #0
 800a45c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a45e:	e388      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a460:	e387      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a462:	4b07      	ldr	r3, [pc, #28]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a466:	e384      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a468:	2300      	movs	r3, #0
 800a46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a46c:	e381      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a46e:	bf00      	nop
 800a470:	58024400 	.word	0x58024400
 800a474:	03d09000 	.word	0x03d09000
 800a478:	003d0900 	.word	0x003d0900
 800a47c:	017d7840 	.word	0x017d7840
 800a480:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a484:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a488:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a48c:	430b      	orrs	r3, r1
 800a48e:	f040 809c 	bne.w	800a5ca <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a492:	4b9e      	ldr	r3, [pc, #632]	@ (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a496:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a49a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a49c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a49e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a4a2:	d054      	beq.n	800a54e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a4aa:	f200 808b 	bhi.w	800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a4b4:	f000 8083 	beq.w	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a4be:	f200 8081 	bhi.w	800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4c8:	d02f      	beq.n	800a52a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4d0:	d878      	bhi.n	800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d004      	beq.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a4de:	d012      	beq.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a4e0:	e070      	b.n	800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4e2:	4b8a      	ldr	r3, [pc, #552]	@ (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4ee:	d107      	bne.n	800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f000 fe07 	bl	800b108 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4fe:	e338      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a500:	2300      	movs	r3, #0
 800a502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a504:	e335      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a506:	4b81      	ldr	r3, [pc, #516]	@ (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a50e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a512:	d107      	bne.n	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a514:	f107 0318 	add.w	r3, r7, #24
 800a518:	4618      	mov	r0, r3
 800a51a:	f000 fb4d 	bl	800abb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a522:	e326      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a524:	2300      	movs	r3, #0
 800a526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a528:	e323      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a52a:	4b78      	ldr	r3, [pc, #480]	@ (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a532:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a536:	d107      	bne.n	800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a538:	f107 030c 	add.w	r3, r7, #12
 800a53c:	4618      	mov	r0, r3
 800a53e:	f000 fc8f 	bl	800ae60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a546:	e314      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a548:	2300      	movs	r3, #0
 800a54a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a54c:	e311      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a54e:	4b6f      	ldr	r3, [pc, #444]	@ (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a552:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a556:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a558:	4b6c      	ldr	r3, [pc, #432]	@ (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f003 0304 	and.w	r3, r3, #4
 800a560:	2b04      	cmp	r3, #4
 800a562:	d10c      	bne.n	800a57e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a566:	2b00      	cmp	r3, #0
 800a568:	d109      	bne.n	800a57e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a56a:	4b68      	ldr	r3, [pc, #416]	@ (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	08db      	lsrs	r3, r3, #3
 800a570:	f003 0303 	and.w	r3, r3, #3
 800a574:	4a66      	ldr	r2, [pc, #408]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a576:	fa22 f303 	lsr.w	r3, r2, r3
 800a57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a57c:	e01e      	b.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a57e:	4b63      	ldr	r3, [pc, #396]	@ (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a586:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a58a:	d106      	bne.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a58c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a58e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a592:	d102      	bne.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a594:	4b5f      	ldr	r3, [pc, #380]	@ (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a596:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a598:	e010      	b.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a59a:	4b5c      	ldr	r3, [pc, #368]	@ (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5a6:	d106      	bne.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a5a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5ae:	d102      	bne.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a5b0:	4b59      	ldr	r3, [pc, #356]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5b4:	e002      	b.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a5ba:	e2da      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a5bc:	e2d9      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a5be:	4b57      	ldr	r3, [pc, #348]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a5c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5c2:	e2d6      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5c8:	e2d3      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a5ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5ce:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a5d2:	430b      	orrs	r3, r1
 800a5d4:	f040 80a7 	bne.w	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a5d8:	4b4c      	ldr	r3, [pc, #304]	@ (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a5da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5dc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a5e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a5e8:	d055      	beq.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a5f0:	f200 8096 	bhi.w	800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a5fa:	f000 8084 	beq.w	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a5fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a600:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a604:	f200 808c 	bhi.w	800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a60e:	d030      	beq.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a612:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a616:	f200 8083 	bhi.w	800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d004      	beq.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800a620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a626:	d012      	beq.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a628:	e07a      	b.n	800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a62a:	4b38      	ldr	r3, [pc, #224]	@ (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a632:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a636:	d107      	bne.n	800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a638:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a63c:	4618      	mov	r0, r3
 800a63e:	f000 fd63 	bl	800b108 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a646:	e294      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a648:	2300      	movs	r3, #0
 800a64a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a64c:	e291      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a64e:	4b2f      	ldr	r3, [pc, #188]	@ (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a656:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a65a:	d107      	bne.n	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a65c:	f107 0318 	add.w	r3, r7, #24
 800a660:	4618      	mov	r0, r3
 800a662:	f000 faa9 	bl	800abb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a66a:	e282      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a66c:	2300      	movs	r3, #0
 800a66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a670:	e27f      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a672:	4b26      	ldr	r3, [pc, #152]	@ (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a67a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a67e:	d107      	bne.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a680:	f107 030c 	add.w	r3, r7, #12
 800a684:	4618      	mov	r0, r3
 800a686:	f000 fbeb 	bl	800ae60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a68e:	e270      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a690:	2300      	movs	r3, #0
 800a692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a694:	e26d      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a696:	4b1d      	ldr	r3, [pc, #116]	@ (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a69a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a69e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6a0:	4b1a      	ldr	r3, [pc, #104]	@ (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f003 0304 	and.w	r3, r3, #4
 800a6a8:	2b04      	cmp	r3, #4
 800a6aa:	d10c      	bne.n	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800a6ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d109      	bne.n	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6b2:	4b16      	ldr	r3, [pc, #88]	@ (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	08db      	lsrs	r3, r3, #3
 800a6b8:	f003 0303 	and.w	r3, r3, #3
 800a6bc:	4a14      	ldr	r2, [pc, #80]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a6be:	fa22 f303 	lsr.w	r3, r2, r3
 800a6c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6c4:	e01e      	b.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6c6:	4b11      	ldr	r3, [pc, #68]	@ (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6d2:	d106      	bne.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a6d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6da:	d102      	bne.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a6dc:	4b0d      	ldr	r3, [pc, #52]	@ (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6e0:	e010      	b.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6ee:	d106      	bne.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800a6f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6f6:	d102      	bne.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6f8:	4b07      	ldr	r3, [pc, #28]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6fc:	e002      	b.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a6fe:	2300      	movs	r3, #0
 800a700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a702:	e236      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a704:	e235      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a706:	4b05      	ldr	r3, [pc, #20]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a70a:	e232      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a70c:	58024400 	.word	0x58024400
 800a710:	03d09000 	.word	0x03d09000
 800a714:	003d0900 	.word	0x003d0900
 800a718:	017d7840 	.word	0x017d7840
 800a71c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a720:	2300      	movs	r3, #0
 800a722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a724:	e225      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a72a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a72e:	430b      	orrs	r3, r1
 800a730:	f040 8085 	bne.w	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a734:	4b9c      	ldr	r3, [pc, #624]	@ (800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a738:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a73c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a73e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a740:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a744:	d06b      	beq.n	800a81e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a748:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a74c:	d874      	bhi.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a750:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a754:	d056      	beq.n	800a804 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a758:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a75c:	d86c      	bhi.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a75e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a760:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a764:	d03b      	beq.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a768:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a76c:	d864      	bhi.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a76e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a770:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a774:	d021      	beq.n	800a7ba <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a778:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a77c:	d85c      	bhi.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a780:	2b00      	cmp	r3, #0
 800a782:	d004      	beq.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a78a:	d004      	beq.n	800a796 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a78c:	e054      	b.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a78e:	f7fe fb5f 	bl	8008e50 <HAL_RCC_GetPCLK1Freq>
 800a792:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a794:	e1ed      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a796:	4b84      	ldr	r3, [pc, #528]	@ (800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a79e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7a2:	d107      	bne.n	800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7a4:	f107 0318 	add.w	r3, r7, #24
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f000 fa05 	bl	800abb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7b2:	e1de      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7b8:	e1db      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7ba:	4b7b      	ldr	r3, [pc, #492]	@ (800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7c6:	d107      	bne.n	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7c8:	f107 030c 	add.w	r3, r7, #12
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 fb47 	bl	800ae60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7d6:	e1cc      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7dc:	e1c9      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a7de:	4b72      	ldr	r3, [pc, #456]	@ (800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f003 0304 	and.w	r3, r3, #4
 800a7e6:	2b04      	cmp	r3, #4
 800a7e8:	d109      	bne.n	800a7fe <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7ea:	4b6f      	ldr	r3, [pc, #444]	@ (800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	08db      	lsrs	r3, r3, #3
 800a7f0:	f003 0303 	and.w	r3, r3, #3
 800a7f4:	4a6d      	ldr	r2, [pc, #436]	@ (800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a7f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7fc:	e1b9      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7fe:	2300      	movs	r3, #0
 800a800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a802:	e1b6      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a804:	4b68      	ldr	r3, [pc, #416]	@ (800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a80c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a810:	d102      	bne.n	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a812:	4b67      	ldr	r3, [pc, #412]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a816:	e1ac      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a818:	2300      	movs	r3, #0
 800a81a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a81c:	e1a9      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a81e:	4b62      	ldr	r3, [pc, #392]	@ (800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a826:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a82a:	d102      	bne.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a82c:	4b61      	ldr	r3, [pc, #388]	@ (800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a830:	e19f      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a832:	2300      	movs	r3, #0
 800a834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a836:	e19c      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a838:	2300      	movs	r3, #0
 800a83a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a83c:	e199      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a83e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a842:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a846:	430b      	orrs	r3, r1
 800a848:	d173      	bne.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a84a:	4b57      	ldr	r3, [pc, #348]	@ (800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a84c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a84e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a852:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a856:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a85a:	d02f      	beq.n	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a85e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a862:	d863      	bhi.n	800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a866:	2b00      	cmp	r3, #0
 800a868:	d004      	beq.n	800a874 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a86a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a86c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a870:	d012      	beq.n	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a872:	e05b      	b.n	800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a874:	4b4c      	ldr	r3, [pc, #304]	@ (800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a87c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a880:	d107      	bne.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a882:	f107 0318 	add.w	r3, r7, #24
 800a886:	4618      	mov	r0, r3
 800a888:	f000 f996 	bl	800abb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a890:	e16f      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a892:	2300      	movs	r3, #0
 800a894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a896:	e16c      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a898:	4b43      	ldr	r3, [pc, #268]	@ (800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8a4:	d107      	bne.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8a6:	f107 030c 	add.w	r3, r7, #12
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f000 fad8 	bl	800ae60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8b4:	e15d      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ba:	e15a      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a8bc:	4b3a      	ldr	r3, [pc, #232]	@ (800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a8be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a8c4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8c6:	4b38      	ldr	r3, [pc, #224]	@ (800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f003 0304 	and.w	r3, r3, #4
 800a8ce:	2b04      	cmp	r3, #4
 800a8d0:	d10c      	bne.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a8d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d109      	bne.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8d8:	4b33      	ldr	r3, [pc, #204]	@ (800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	08db      	lsrs	r3, r3, #3
 800a8de:	f003 0303 	and.w	r3, r3, #3
 800a8e2:	4a32      	ldr	r2, [pc, #200]	@ (800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a8e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a8e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8ea:	e01e      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8ec:	4b2e      	ldr	r3, [pc, #184]	@ (800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8f8:	d106      	bne.n	800a908 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a8fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a900:	d102      	bne.n	800a908 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a902:	4b2b      	ldr	r3, [pc, #172]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a904:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a906:	e010      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a908:	4b27      	ldr	r3, [pc, #156]	@ (800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a910:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a914:	d106      	bne.n	800a924 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a918:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a91c:	d102      	bne.n	800a924 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a91e:	4b25      	ldr	r3, [pc, #148]	@ (800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a920:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a922:	e002      	b.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a924:	2300      	movs	r3, #0
 800a926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a928:	e123      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a92a:	e122      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a92c:	2300      	movs	r3, #0
 800a92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a930:	e11f      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a932:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a936:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a93a:	430b      	orrs	r3, r1
 800a93c:	d13c      	bne.n	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a93e:	4b1a      	ldr	r3, [pc, #104]	@ (800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a942:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a946:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d004      	beq.n	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a94e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a954:	d012      	beq.n	800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a956:	e023      	b.n	800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a958:	4b13      	ldr	r3, [pc, #76]	@ (800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a960:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a964:	d107      	bne.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a966:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a96a:	4618      	mov	r0, r3
 800a96c:	f000 fbcc 	bl	800b108 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a974:	e0fd      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a976:	2300      	movs	r3, #0
 800a978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a97a:	e0fa      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a97c:	4b0a      	ldr	r3, [pc, #40]	@ (800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a984:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a988:	d107      	bne.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a98a:	f107 0318 	add.w	r3, r7, #24
 800a98e:	4618      	mov	r0, r3
 800a990:	f000 f912 	bl	800abb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a994:	6a3b      	ldr	r3, [r7, #32]
 800a996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a998:	e0eb      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a99a:	2300      	movs	r3, #0
 800a99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a99e:	e0e8      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9a4:	e0e5      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a9a6:	bf00      	nop
 800a9a8:	58024400 	.word	0x58024400
 800a9ac:	03d09000 	.word	0x03d09000
 800a9b0:	003d0900 	.word	0x003d0900
 800a9b4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a9b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9bc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a9c0:	430b      	orrs	r3, r1
 800a9c2:	f040 8085 	bne.w	800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a9c6:	4b6d      	ldr	r3, [pc, #436]	@ (800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a9c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9ca:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a9ce:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a9d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a9d6:	d06b      	beq.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a9de:	d874      	bhi.n	800aaca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a9e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9e6:	d056      	beq.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a9e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9ee:	d86c      	bhi.n	800aaca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a9f6:	d03b      	beq.n	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a9fe:	d864      	bhi.n	800aaca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800aa00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa06:	d021      	beq.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800aa08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa0e:	d85c      	bhi.n	800aaca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800aa10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d004      	beq.n	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800aa16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa1c:	d004      	beq.n	800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800aa1e:	e054      	b.n	800aaca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800aa20:	f000 f8b4 	bl	800ab8c <HAL_RCCEx_GetD3PCLK1Freq>
 800aa24:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa26:	e0a4      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa28:	4b54      	ldr	r3, [pc, #336]	@ (800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa34:	d107      	bne.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa36:	f107 0318 	add.w	r3, r7, #24
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f000 f8bc 	bl	800abb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa44:	e095      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa46:	2300      	movs	r3, #0
 800aa48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa4a:	e092      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa4c:	4b4b      	ldr	r3, [pc, #300]	@ (800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa58:	d107      	bne.n	800aa6a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa5a:	f107 030c 	add.w	r3, r7, #12
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f000 f9fe 	bl	800ae60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa68:	e083      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa6e:	e080      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa70:	4b42      	ldr	r3, [pc, #264]	@ (800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f003 0304 	and.w	r3, r3, #4
 800aa78:	2b04      	cmp	r3, #4
 800aa7a:	d109      	bne.n	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa7c:	4b3f      	ldr	r3, [pc, #252]	@ (800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	08db      	lsrs	r3, r3, #3
 800aa82:	f003 0303 	and.w	r3, r3, #3
 800aa86:	4a3e      	ldr	r2, [pc, #248]	@ (800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800aa88:	fa22 f303 	lsr.w	r3, r2, r3
 800aa8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa8e:	e070      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa90:	2300      	movs	r3, #0
 800aa92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa94:	e06d      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aa96:	4b39      	ldr	r3, [pc, #228]	@ (800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aaa2:	d102      	bne.n	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800aaa4:	4b37      	ldr	r3, [pc, #220]	@ (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800aaa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaa8:	e063      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaae:	e060      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aab0:	4b32      	ldr	r3, [pc, #200]	@ (800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aab8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aabc:	d102      	bne.n	800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800aabe:	4b32      	ldr	r3, [pc, #200]	@ (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aac2:	e056      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aac4:	2300      	movs	r3, #0
 800aac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aac8:	e053      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800aaca:	2300      	movs	r3, #0
 800aacc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aace:	e050      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aad0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aad4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800aad8:	430b      	orrs	r3, r1
 800aada:	d148      	bne.n	800ab6e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800aadc:	4b27      	ldr	r3, [pc, #156]	@ (800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aae0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aae4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaec:	d02a      	beq.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800aaee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaf4:	d838      	bhi.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800aaf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d004      	beq.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800aafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab02:	d00d      	beq.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800ab04:	e030      	b.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ab06:	4b1d      	ldr	r3, [pc, #116]	@ (800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab12:	d102      	bne.n	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800ab14:	4b1c      	ldr	r3, [pc, #112]	@ (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ab16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab18:	e02b      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab1e:	e028      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab20:	4b16      	ldr	r3, [pc, #88]	@ (800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab2c:	d107      	bne.n	800ab3e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab32:	4618      	mov	r0, r3
 800ab34:	f000 fae8 	bl	800b108 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab3c:	e019      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab42:	e016      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab44:	4b0d      	ldr	r3, [pc, #52]	@ (800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab50:	d107      	bne.n	800ab62 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab52:	f107 0318 	add.w	r3, r7, #24
 800ab56:	4618      	mov	r0, r3
 800ab58:	f000 f82e 	bl	800abb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab60:	e007      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab62:	2300      	movs	r3, #0
 800ab64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab66:	e004      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab6c:	e001      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ab72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3740      	adds	r7, #64	@ 0x40
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	58024400 	.word	0x58024400
 800ab80:	03d09000 	.word	0x03d09000
 800ab84:	003d0900 	.word	0x003d0900
 800ab88:	017d7840 	.word	0x017d7840

0800ab8c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ab90:	f7fe f92e 	bl	8008df0 <HAL_RCC_GetHCLKFreq>
 800ab94:	4602      	mov	r2, r0
 800ab96:	4b06      	ldr	r3, [pc, #24]	@ (800abb0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ab98:	6a1b      	ldr	r3, [r3, #32]
 800ab9a:	091b      	lsrs	r3, r3, #4
 800ab9c:	f003 0307 	and.w	r3, r3, #7
 800aba0:	4904      	ldr	r1, [pc, #16]	@ (800abb4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aba2:	5ccb      	ldrb	r3, [r1, r3]
 800aba4:	f003 031f 	and.w	r3, r3, #31
 800aba8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800abac:	4618      	mov	r0, r3
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	58024400 	.word	0x58024400
 800abb4:	0800fe58 	.word	0x0800fe58

0800abb8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800abb8:	b480      	push	{r7}
 800abba:	b089      	sub	sp, #36	@ 0x24
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abc0:	4ba1      	ldr	r3, [pc, #644]	@ (800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abc4:	f003 0303 	and.w	r3, r3, #3
 800abc8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800abca:	4b9f      	ldr	r3, [pc, #636]	@ (800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abce:	0b1b      	lsrs	r3, r3, #12
 800abd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800abd4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800abd6:	4b9c      	ldr	r3, [pc, #624]	@ (800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abda:	091b      	lsrs	r3, r3, #4
 800abdc:	f003 0301 	and.w	r3, r3, #1
 800abe0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800abe2:	4b99      	ldr	r3, [pc, #612]	@ (800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abe6:	08db      	lsrs	r3, r3, #3
 800abe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abec:	693a      	ldr	r2, [r7, #16]
 800abee:	fb02 f303 	mul.w	r3, r2, r3
 800abf2:	ee07 3a90 	vmov	s15, r3
 800abf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	f000 8111 	beq.w	800ae28 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	2b02      	cmp	r3, #2
 800ac0a:	f000 8083 	beq.w	800ad14 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	2b02      	cmp	r3, #2
 800ac12:	f200 80a1 	bhi.w	800ad58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d003      	beq.n	800ac24 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d056      	beq.n	800acd0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ac22:	e099      	b.n	800ad58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac24:	4b88      	ldr	r3, [pc, #544]	@ (800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f003 0320 	and.w	r3, r3, #32
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d02d      	beq.n	800ac8c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac30:	4b85      	ldr	r3, [pc, #532]	@ (800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	08db      	lsrs	r3, r3, #3
 800ac36:	f003 0303 	and.w	r3, r3, #3
 800ac3a:	4a84      	ldr	r2, [pc, #528]	@ (800ae4c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ac3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac40:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	ee07 3a90 	vmov	s15, r3
 800ac48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	ee07 3a90 	vmov	s15, r3
 800ac52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac5a:	4b7b      	ldr	r3, [pc, #492]	@ (800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac62:	ee07 3a90 	vmov	s15, r3
 800ac66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac6e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ae50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ac8a:	e087      	b.n	800ad9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	ee07 3a90 	vmov	s15, r3
 800ac92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac96:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ac9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac9e:	4b6a      	ldr	r3, [pc, #424]	@ (800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aca6:	ee07 3a90 	vmov	s15, r3
 800acaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acae:	ed97 6a03 	vldr	s12, [r7, #12]
 800acb2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ae50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acce:	e065      	b.n	800ad9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	ee07 3a90 	vmov	s15, r3
 800acd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acda:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ae58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800acde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ace2:	4b59      	ldr	r3, [pc, #356]	@ (800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ace4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ace6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acea:	ee07 3a90 	vmov	s15, r3
 800acee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800acf6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ae50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad12:	e043      	b.n	800ad9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	ee07 3a90 	vmov	s15, r3
 800ad1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad1e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ae5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ad22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad26:	4b48      	ldr	r3, [pc, #288]	@ (800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad2e:	ee07 3a90 	vmov	s15, r3
 800ad32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad36:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad3a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ae50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad56:	e021      	b.n	800ad9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	ee07 3a90 	vmov	s15, r3
 800ad5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad62:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ae58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad6a:	4b37      	ldr	r3, [pc, #220]	@ (800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad72:	ee07 3a90 	vmov	s15, r3
 800ad76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad7e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ae50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad9a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ad9c:	4b2a      	ldr	r3, [pc, #168]	@ (800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ada0:	0a5b      	lsrs	r3, r3, #9
 800ada2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ada6:	ee07 3a90 	vmov	s15, r3
 800adaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800adb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800adba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adc2:	ee17 2a90 	vmov	r2, s15
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800adca:	4b1f      	ldr	r3, [pc, #124]	@ (800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adce:	0c1b      	lsrs	r3, r3, #16
 800add0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800add4:	ee07 3a90 	vmov	s15, r3
 800add8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800addc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ade0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ade4:	edd7 6a07 	vldr	s13, [r7, #28]
 800ade8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adf0:	ee17 2a90 	vmov	r2, s15
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800adf8:	4b13      	ldr	r3, [pc, #76]	@ (800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adfc:	0e1b      	lsrs	r3, r3, #24
 800adfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae02:	ee07 3a90 	vmov	s15, r3
 800ae06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae12:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae1e:	ee17 2a90 	vmov	r2, s15
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ae26:	e008      	b.n	800ae3a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	609a      	str	r2, [r3, #8]
}
 800ae3a:	bf00      	nop
 800ae3c:	3724      	adds	r7, #36	@ 0x24
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	58024400 	.word	0x58024400
 800ae4c:	03d09000 	.word	0x03d09000
 800ae50:	46000000 	.word	0x46000000
 800ae54:	4c742400 	.word	0x4c742400
 800ae58:	4a742400 	.word	0x4a742400
 800ae5c:	4bbebc20 	.word	0x4bbebc20

0800ae60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b089      	sub	sp, #36	@ 0x24
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae68:	4ba1      	ldr	r3, [pc, #644]	@ (800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae6c:	f003 0303 	and.w	r3, r3, #3
 800ae70:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ae72:	4b9f      	ldr	r3, [pc, #636]	@ (800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae76:	0d1b      	lsrs	r3, r3, #20
 800ae78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae7c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ae7e:	4b9c      	ldr	r3, [pc, #624]	@ (800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae82:	0a1b      	lsrs	r3, r3, #8
 800ae84:	f003 0301 	and.w	r3, r3, #1
 800ae88:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ae8a:	4b99      	ldr	r3, [pc, #612]	@ (800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae8e:	08db      	lsrs	r3, r3, #3
 800ae90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae94:	693a      	ldr	r2, [r7, #16]
 800ae96:	fb02 f303 	mul.w	r3, r2, r3
 800ae9a:	ee07 3a90 	vmov	s15, r3
 800ae9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aea2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f000 8111 	beq.w	800b0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	f000 8083 	beq.w	800afbc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	2b02      	cmp	r3, #2
 800aeba:	f200 80a1 	bhi.w	800b000 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aebe:	69bb      	ldr	r3, [r7, #24]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d003      	beq.n	800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aec4:	69bb      	ldr	r3, [r7, #24]
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d056      	beq.n	800af78 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800aeca:	e099      	b.n	800b000 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aecc:	4b88      	ldr	r3, [pc, #544]	@ (800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f003 0320 	and.w	r3, r3, #32
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d02d      	beq.n	800af34 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aed8:	4b85      	ldr	r3, [pc, #532]	@ (800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	08db      	lsrs	r3, r3, #3
 800aede:	f003 0303 	and.w	r3, r3, #3
 800aee2:	4a84      	ldr	r2, [pc, #528]	@ (800b0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800aee4:	fa22 f303 	lsr.w	r3, r2, r3
 800aee8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	ee07 3a90 	vmov	s15, r3
 800aef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	ee07 3a90 	vmov	s15, r3
 800aefa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aefe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af02:	4b7b      	ldr	r3, [pc, #492]	@ (800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af0a:	ee07 3a90 	vmov	s15, r3
 800af0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af12:	ed97 6a03 	vldr	s12, [r7, #12]
 800af16:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800af32:	e087      	b.n	800b044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	ee07 3a90 	vmov	s15, r3
 800af3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af3e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b0fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800af42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af46:	4b6a      	ldr	r3, [pc, #424]	@ (800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af4e:	ee07 3a90 	vmov	s15, r3
 800af52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af56:	ed97 6a03 	vldr	s12, [r7, #12]
 800af5a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af76:	e065      	b.n	800b044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	ee07 3a90 	vmov	s15, r3
 800af7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af82:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b100 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af8a:	4b59      	ldr	r3, [pc, #356]	@ (800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af92:	ee07 3a90 	vmov	s15, r3
 800af96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af9e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afba:	e043      	b.n	800b044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	ee07 3a90 	vmov	s15, r3
 800afc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afc6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b104 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800afca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afce:	4b48      	ldr	r3, [pc, #288]	@ (800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afd6:	ee07 3a90 	vmov	s15, r3
 800afda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afde:	ed97 6a03 	vldr	s12, [r7, #12]
 800afe2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800affa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800affe:	e021      	b.n	800b044 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	ee07 3a90 	vmov	s15, r3
 800b006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b00a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b100 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b00e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b012:	4b37      	ldr	r3, [pc, #220]	@ (800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b01a:	ee07 3a90 	vmov	s15, r3
 800b01e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b022:	ed97 6a03 	vldr	s12, [r7, #12]
 800b026:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b02a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b02e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b03a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b03e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b042:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b044:	4b2a      	ldr	r3, [pc, #168]	@ (800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b048:	0a5b      	lsrs	r3, r3, #9
 800b04a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b04e:	ee07 3a90 	vmov	s15, r3
 800b052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b056:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b05a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b05e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b06a:	ee17 2a90 	vmov	r2, s15
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b072:	4b1f      	ldr	r3, [pc, #124]	@ (800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b076:	0c1b      	lsrs	r3, r3, #16
 800b078:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b07c:	ee07 3a90 	vmov	s15, r3
 800b080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b084:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b088:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b08c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b098:	ee17 2a90 	vmov	r2, s15
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b0a0:	4b13      	ldr	r3, [pc, #76]	@ (800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0a4:	0e1b      	lsrs	r3, r3, #24
 800b0a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0aa:	ee07 3a90 	vmov	s15, r3
 800b0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0c6:	ee17 2a90 	vmov	r2, s15
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b0ce:	e008      	b.n	800b0e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	609a      	str	r2, [r3, #8]
}
 800b0e2:	bf00      	nop
 800b0e4:	3724      	adds	r7, #36	@ 0x24
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop
 800b0f0:	58024400 	.word	0x58024400
 800b0f4:	03d09000 	.word	0x03d09000
 800b0f8:	46000000 	.word	0x46000000
 800b0fc:	4c742400 	.word	0x4c742400
 800b100:	4a742400 	.word	0x4a742400
 800b104:	4bbebc20 	.word	0x4bbebc20

0800b108 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b108:	b480      	push	{r7}
 800b10a:	b089      	sub	sp, #36	@ 0x24
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b110:	4ba0      	ldr	r3, [pc, #640]	@ (800b394 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b114:	f003 0303 	and.w	r3, r3, #3
 800b118:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b11a:	4b9e      	ldr	r3, [pc, #632]	@ (800b394 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b11c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b11e:	091b      	lsrs	r3, r3, #4
 800b120:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b124:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b126:	4b9b      	ldr	r3, [pc, #620]	@ (800b394 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b12a:	f003 0301 	and.w	r3, r3, #1
 800b12e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b130:	4b98      	ldr	r3, [pc, #608]	@ (800b394 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b134:	08db      	lsrs	r3, r3, #3
 800b136:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b13a:	693a      	ldr	r2, [r7, #16]
 800b13c:	fb02 f303 	mul.w	r3, r2, r3
 800b140:	ee07 3a90 	vmov	s15, r3
 800b144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b148:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f000 8111 	beq.w	800b376 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b154:	69bb      	ldr	r3, [r7, #24]
 800b156:	2b02      	cmp	r3, #2
 800b158:	f000 8083 	beq.w	800b262 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b15c:	69bb      	ldr	r3, [r7, #24]
 800b15e:	2b02      	cmp	r3, #2
 800b160:	f200 80a1 	bhi.w	800b2a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d003      	beq.n	800b172 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d056      	beq.n	800b21e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b170:	e099      	b.n	800b2a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b172:	4b88      	ldr	r3, [pc, #544]	@ (800b394 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f003 0320 	and.w	r3, r3, #32
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d02d      	beq.n	800b1da <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b17e:	4b85      	ldr	r3, [pc, #532]	@ (800b394 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	08db      	lsrs	r3, r3, #3
 800b184:	f003 0303 	and.w	r3, r3, #3
 800b188:	4a83      	ldr	r2, [pc, #524]	@ (800b398 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b18a:	fa22 f303 	lsr.w	r3, r2, r3
 800b18e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	ee07 3a90 	vmov	s15, r3
 800b196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	ee07 3a90 	vmov	s15, r3
 800b1a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1a8:	4b7a      	ldr	r3, [pc, #488]	@ (800b394 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1b0:	ee07 3a90 	vmov	s15, r3
 800b1b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1bc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b39c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1d4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b1d8:	e087      	b.n	800b2ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	ee07 3a90 	vmov	s15, r3
 800b1e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b1e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1ec:	4b69      	ldr	r3, [pc, #420]	@ (800b394 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1f4:	ee07 3a90 	vmov	s15, r3
 800b1f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b200:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b39c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b204:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b208:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b20c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b210:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b214:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b218:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b21c:	e065      	b.n	800b2ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	ee07 3a90 	vmov	s15, r3
 800b224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b228:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b3a4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b22c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b230:	4b58      	ldr	r3, [pc, #352]	@ (800b394 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b238:	ee07 3a90 	vmov	s15, r3
 800b23c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b240:	ed97 6a03 	vldr	s12, [r7, #12]
 800b244:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b39c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b248:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b24c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b250:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b254:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b25c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b260:	e043      	b.n	800b2ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	ee07 3a90 	vmov	s15, r3
 800b268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b26c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b3a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b270:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b274:	4b47      	ldr	r3, [pc, #284]	@ (800b394 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b27c:	ee07 3a90 	vmov	s15, r3
 800b280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b284:	ed97 6a03 	vldr	s12, [r7, #12]
 800b288:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b39c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b28c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b290:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b294:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b298:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b29c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2a4:	e021      	b.n	800b2ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	ee07 3a90 	vmov	s15, r3
 800b2ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2b0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b2b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2b8:	4b36      	ldr	r3, [pc, #216]	@ (800b394 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c0:	ee07 3a90 	vmov	s15, r3
 800b2c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2cc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b39c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b2d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2e8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b2ea:	4b2a      	ldr	r3, [pc, #168]	@ (800b394 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2ee:	0a5b      	lsrs	r3, r3, #9
 800b2f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2f4:	ee07 3a90 	vmov	s15, r3
 800b2f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b300:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b304:	edd7 6a07 	vldr	s13, [r7, #28]
 800b308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b30c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b310:	ee17 2a90 	vmov	r2, s15
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b318:	4b1e      	ldr	r3, [pc, #120]	@ (800b394 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b31a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b31c:	0c1b      	lsrs	r3, r3, #16
 800b31e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b322:	ee07 3a90 	vmov	s15, r3
 800b326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b32a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b32e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b332:	edd7 6a07 	vldr	s13, [r7, #28]
 800b336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b33a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b33e:	ee17 2a90 	vmov	r2, s15
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b346:	4b13      	ldr	r3, [pc, #76]	@ (800b394 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b34a:	0e1b      	lsrs	r3, r3, #24
 800b34c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b350:	ee07 3a90 	vmov	s15, r3
 800b354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b358:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b35c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b360:	edd7 6a07 	vldr	s13, [r7, #28]
 800b364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b36c:	ee17 2a90 	vmov	r2, s15
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b374:	e008      	b.n	800b388 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2200      	movs	r2, #0
 800b386:	609a      	str	r2, [r3, #8]
}
 800b388:	bf00      	nop
 800b38a:	3724      	adds	r7, #36	@ 0x24
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr
 800b394:	58024400 	.word	0x58024400
 800b398:	03d09000 	.word	0x03d09000
 800b39c:	46000000 	.word	0x46000000
 800b3a0:	4c742400 	.word	0x4c742400
 800b3a4:	4a742400 	.word	0x4a742400
 800b3a8:	4bbebc20 	.word	0x4bbebc20

0800b3ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b3ba:	4b53      	ldr	r3, [pc, #332]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b3bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3be:	f003 0303 	and.w	r3, r3, #3
 800b3c2:	2b03      	cmp	r3, #3
 800b3c4:	d101      	bne.n	800b3ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e099      	b.n	800b4fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b3ca:	4b4f      	ldr	r3, [pc, #316]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4a4e      	ldr	r2, [pc, #312]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b3d0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b3d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3d6:	f7f7 fb9b 	bl	8002b10 <HAL_GetTick>
 800b3da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b3dc:	e008      	b.n	800b3f0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b3de:	f7f7 fb97 	bl	8002b10 <HAL_GetTick>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	1ad3      	subs	r3, r2, r3
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	d901      	bls.n	800b3f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b3ec:	2303      	movs	r3, #3
 800b3ee:	e086      	b.n	800b4fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b3f0:	4b45      	ldr	r3, [pc, #276]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1f0      	bne.n	800b3de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b3fc:	4b42      	ldr	r3, [pc, #264]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b3fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b400:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	031b      	lsls	r3, r3, #12
 800b40a:	493f      	ldr	r1, [pc, #252]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b40c:	4313      	orrs	r3, r2
 800b40e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	3b01      	subs	r3, #1
 800b416:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	689b      	ldr	r3, [r3, #8]
 800b41e:	3b01      	subs	r3, #1
 800b420:	025b      	lsls	r3, r3, #9
 800b422:	b29b      	uxth	r3, r3
 800b424:	431a      	orrs	r2, r3
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	3b01      	subs	r3, #1
 800b42c:	041b      	lsls	r3, r3, #16
 800b42e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b432:	431a      	orrs	r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	3b01      	subs	r3, #1
 800b43a:	061b      	lsls	r3, r3, #24
 800b43c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b440:	4931      	ldr	r1, [pc, #196]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b442:	4313      	orrs	r3, r2
 800b444:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b446:	4b30      	ldr	r3, [pc, #192]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b44a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	695b      	ldr	r3, [r3, #20]
 800b452:	492d      	ldr	r1, [pc, #180]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b454:	4313      	orrs	r3, r2
 800b456:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b458:	4b2b      	ldr	r3, [pc, #172]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b45a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b45c:	f023 0220 	bic.w	r2, r3, #32
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	699b      	ldr	r3, [r3, #24]
 800b464:	4928      	ldr	r1, [pc, #160]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b466:	4313      	orrs	r3, r2
 800b468:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b46a:	4b27      	ldr	r3, [pc, #156]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b46c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b46e:	4a26      	ldr	r2, [pc, #152]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b470:	f023 0310 	bic.w	r3, r3, #16
 800b474:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b476:	4b24      	ldr	r3, [pc, #144]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b478:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b47a:	4b24      	ldr	r3, [pc, #144]	@ (800b50c <RCCEx_PLL2_Config+0x160>)
 800b47c:	4013      	ands	r3, r2
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	69d2      	ldr	r2, [r2, #28]
 800b482:	00d2      	lsls	r2, r2, #3
 800b484:	4920      	ldr	r1, [pc, #128]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b486:	4313      	orrs	r3, r2
 800b488:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b48a:	4b1f      	ldr	r3, [pc, #124]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b48c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b48e:	4a1e      	ldr	r2, [pc, #120]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b490:	f043 0310 	orr.w	r3, r3, #16
 800b494:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d106      	bne.n	800b4aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b49c:	4b1a      	ldr	r3, [pc, #104]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b49e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4a0:	4a19      	ldr	r2, [pc, #100]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b4a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b4a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b4a8:	e00f      	b.n	800b4ca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d106      	bne.n	800b4be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b4b0:	4b15      	ldr	r3, [pc, #84]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b4b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4b4:	4a14      	ldr	r2, [pc, #80]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b4b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b4ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b4bc:	e005      	b.n	800b4ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b4be:	4b12      	ldr	r3, [pc, #72]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b4c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4c2:	4a11      	ldr	r2, [pc, #68]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b4c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b4c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b4ca:	4b0f      	ldr	r3, [pc, #60]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4a0e      	ldr	r2, [pc, #56]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b4d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b4d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4d6:	f7f7 fb1b 	bl	8002b10 <HAL_GetTick>
 800b4da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b4dc:	e008      	b.n	800b4f0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b4de:	f7f7 fb17 	bl	8002b10 <HAL_GetTick>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	1ad3      	subs	r3, r2, r3
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	d901      	bls.n	800b4f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b4ec:	2303      	movs	r3, #3
 800b4ee:	e006      	b.n	800b4fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b4f0:	4b05      	ldr	r3, [pc, #20]	@ (800b508 <RCCEx_PLL2_Config+0x15c>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d0f0      	beq.n	800b4de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b4fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	58024400 	.word	0x58024400
 800b50c:	ffff0007 	.word	0xffff0007

0800b510 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b51a:	2300      	movs	r3, #0
 800b51c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b51e:	4b53      	ldr	r3, [pc, #332]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b522:	f003 0303 	and.w	r3, r3, #3
 800b526:	2b03      	cmp	r3, #3
 800b528:	d101      	bne.n	800b52e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b52a:	2301      	movs	r3, #1
 800b52c:	e099      	b.n	800b662 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b52e:	4b4f      	ldr	r3, [pc, #316]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4a4e      	ldr	r2, [pc, #312]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b534:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b538:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b53a:	f7f7 fae9 	bl	8002b10 <HAL_GetTick>
 800b53e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b540:	e008      	b.n	800b554 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b542:	f7f7 fae5 	bl	8002b10 <HAL_GetTick>
 800b546:	4602      	mov	r2, r0
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	1ad3      	subs	r3, r2, r3
 800b54c:	2b02      	cmp	r3, #2
 800b54e:	d901      	bls.n	800b554 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b550:	2303      	movs	r3, #3
 800b552:	e086      	b.n	800b662 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b554:	4b45      	ldr	r3, [pc, #276]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1f0      	bne.n	800b542 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b560:	4b42      	ldr	r3, [pc, #264]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b564:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	051b      	lsls	r3, r3, #20
 800b56e:	493f      	ldr	r1, [pc, #252]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b570:	4313      	orrs	r3, r2
 800b572:	628b      	str	r3, [r1, #40]	@ 0x28
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	3b01      	subs	r3, #1
 800b57a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	3b01      	subs	r3, #1
 800b584:	025b      	lsls	r3, r3, #9
 800b586:	b29b      	uxth	r3, r3
 800b588:	431a      	orrs	r2, r3
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	3b01      	subs	r3, #1
 800b590:	041b      	lsls	r3, r3, #16
 800b592:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b596:	431a      	orrs	r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	691b      	ldr	r3, [r3, #16]
 800b59c:	3b01      	subs	r3, #1
 800b59e:	061b      	lsls	r3, r3, #24
 800b5a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b5a4:	4931      	ldr	r1, [pc, #196]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b5aa:	4b30      	ldr	r3, [pc, #192]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b5ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	695b      	ldr	r3, [r3, #20]
 800b5b6:	492d      	ldr	r1, [pc, #180]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b5bc:	4b2b      	ldr	r3, [pc, #172]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b5be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5c0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	699b      	ldr	r3, [r3, #24]
 800b5c8:	4928      	ldr	r1, [pc, #160]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b5ce:	4b27      	ldr	r3, [pc, #156]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b5d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5d2:	4a26      	ldr	r2, [pc, #152]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b5d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b5da:	4b24      	ldr	r3, [pc, #144]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b5dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5de:	4b24      	ldr	r3, [pc, #144]	@ (800b670 <RCCEx_PLL3_Config+0x160>)
 800b5e0:	4013      	ands	r3, r2
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	69d2      	ldr	r2, [r2, #28]
 800b5e6:	00d2      	lsls	r2, r2, #3
 800b5e8:	4920      	ldr	r1, [pc, #128]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b5ee:	4b1f      	ldr	r3, [pc, #124]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b5f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5f2:	4a1e      	ldr	r2, [pc, #120]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b5f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b5f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d106      	bne.n	800b60e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b600:	4b1a      	ldr	r3, [pc, #104]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b604:	4a19      	ldr	r2, [pc, #100]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b606:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b60a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b60c:	e00f      	b.n	800b62e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	2b01      	cmp	r3, #1
 800b612:	d106      	bne.n	800b622 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b614:	4b15      	ldr	r3, [pc, #84]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b618:	4a14      	ldr	r2, [pc, #80]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b61a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b61e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b620:	e005      	b.n	800b62e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b622:	4b12      	ldr	r3, [pc, #72]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b626:	4a11      	ldr	r2, [pc, #68]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b628:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b62c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b62e:	4b0f      	ldr	r3, [pc, #60]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a0e      	ldr	r2, [pc, #56]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b63a:	f7f7 fa69 	bl	8002b10 <HAL_GetTick>
 800b63e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b640:	e008      	b.n	800b654 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b642:	f7f7 fa65 	bl	8002b10 <HAL_GetTick>
 800b646:	4602      	mov	r2, r0
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	1ad3      	subs	r3, r2, r3
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d901      	bls.n	800b654 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b650:	2303      	movs	r3, #3
 800b652:	e006      	b.n	800b662 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b654:	4b05      	ldr	r3, [pc, #20]	@ (800b66c <RCCEx_PLL3_Config+0x15c>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d0f0      	beq.n	800b642 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b660:	7bfb      	ldrb	r3, [r7, #15]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	58024400 	.word	0x58024400
 800b670:	ffff0007 	.word	0xffff0007

0800b674 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d101      	bne.n	800b686 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b682:	2301      	movs	r3, #1
 800b684:	e10f      	b.n	800b8a6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2200      	movs	r2, #0
 800b68a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a87      	ldr	r2, [pc, #540]	@ (800b8b0 <HAL_SPI_Init+0x23c>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d00f      	beq.n	800b6b6 <HAL_SPI_Init+0x42>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4a86      	ldr	r2, [pc, #536]	@ (800b8b4 <HAL_SPI_Init+0x240>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d00a      	beq.n	800b6b6 <HAL_SPI_Init+0x42>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a84      	ldr	r2, [pc, #528]	@ (800b8b8 <HAL_SPI_Init+0x244>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d005      	beq.n	800b6b6 <HAL_SPI_Init+0x42>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	2b0f      	cmp	r3, #15
 800b6b0:	d901      	bls.n	800b6b6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e0f7      	b.n	800b8a6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 fe3c 	bl	800c334 <SPI_GetPacketSize>
 800b6bc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a7b      	ldr	r2, [pc, #492]	@ (800b8b0 <HAL_SPI_Init+0x23c>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d00c      	beq.n	800b6e2 <HAL_SPI_Init+0x6e>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a79      	ldr	r2, [pc, #484]	@ (800b8b4 <HAL_SPI_Init+0x240>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d007      	beq.n	800b6e2 <HAL_SPI_Init+0x6e>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4a78      	ldr	r2, [pc, #480]	@ (800b8b8 <HAL_SPI_Init+0x244>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d002      	beq.n	800b6e2 <HAL_SPI_Init+0x6e>
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2b08      	cmp	r3, #8
 800b6e0:	d811      	bhi.n	800b706 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b6e6:	4a72      	ldr	r2, [pc, #456]	@ (800b8b0 <HAL_SPI_Init+0x23c>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d009      	beq.n	800b700 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a70      	ldr	r2, [pc, #448]	@ (800b8b4 <HAL_SPI_Init+0x240>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d004      	beq.n	800b700 <HAL_SPI_Init+0x8c>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a6f      	ldr	r2, [pc, #444]	@ (800b8b8 <HAL_SPI_Init+0x244>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d104      	bne.n	800b70a <HAL_SPI_Init+0x96>
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2b10      	cmp	r3, #16
 800b704:	d901      	bls.n	800b70a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	e0cd      	b.n	800b8a6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b710:	b2db      	uxtb	r3, r3
 800b712:	2b00      	cmp	r3, #0
 800b714:	d106      	bne.n	800b724 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f7f6 feee 	bl	8002500 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2202      	movs	r2, #2
 800b728:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f022 0201 	bic.w	r2, r2, #1
 800b73a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b746:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	699b      	ldr	r3, [r3, #24]
 800b74c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b750:	d119      	bne.n	800b786 <HAL_SPI_Init+0x112>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b75a:	d103      	bne.n	800b764 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b760:	2b00      	cmp	r3, #0
 800b762:	d008      	beq.n	800b776 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d10c      	bne.n	800b786 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b770:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b774:	d107      	bne.n	800b786 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b784:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d00f      	beq.n	800b7b2 <HAL_SPI_Init+0x13e>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	2b06      	cmp	r3, #6
 800b798:	d90b      	bls.n	800b7b2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	430a      	orrs	r2, r1
 800b7ae:	601a      	str	r2, [r3, #0]
 800b7b0:	e007      	b.n	800b7c2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b7c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	69da      	ldr	r2, [r3, #28]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7ca:	431a      	orrs	r2, r3
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	431a      	orrs	r2, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7d4:	ea42 0103 	orr.w	r1, r2, r3
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	68da      	ldr	r2, [r3, #12]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	430a      	orrs	r2, r1
 800b7e2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7ec:	431a      	orrs	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7f2:	431a      	orrs	r2, r3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	699b      	ldr	r3, [r3, #24]
 800b7f8:	431a      	orrs	r2, r3
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	691b      	ldr	r3, [r3, #16]
 800b7fe:	431a      	orrs	r2, r3
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	695b      	ldr	r3, [r3, #20]
 800b804:	431a      	orrs	r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a1b      	ldr	r3, [r3, #32]
 800b80a:	431a      	orrs	r2, r3
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	431a      	orrs	r2, r3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b816:	431a      	orrs	r2, r3
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	431a      	orrs	r2, r3
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b822:	ea42 0103 	orr.w	r1, r2, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	430a      	orrs	r2, r1
 800b830:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d113      	bne.n	800b862 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b84c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b860:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f022 0201 	bic.w	r2, r2, #1
 800b870:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00a      	beq.n	800b894 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	430a      	orrs	r2, r1
 800b892:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	40013000 	.word	0x40013000
 800b8b4:	40003800 	.word	0x40003800
 800b8b8:	40003c00 	.word	0x40003c00

0800b8bc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b088      	sub	sp, #32
 800b8c0:	af02      	add	r7, sp, #8
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	603b      	str	r3, [r7, #0]
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	3320      	adds	r3, #32
 800b8d2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8d4:	f7f7 f91c 	bl	8002b10 <HAL_GetTick>
 800b8d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b8e0:	b2db      	uxtb	r3, r3
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d001      	beq.n	800b8ea <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800b8e6:	2302      	movs	r3, #2
 800b8e8:	e1d1      	b.n	800bc8e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d002      	beq.n	800b8f6 <HAL_SPI_Transmit+0x3a>
 800b8f0:	88fb      	ldrh	r3, [r7, #6]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d101      	bne.n	800b8fa <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e1c9      	b.n	800bc8e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b900:	2b01      	cmp	r3, #1
 800b902:	d101      	bne.n	800b908 <HAL_SPI_Transmit+0x4c>
 800b904:	2302      	movs	r3, #2
 800b906:	e1c2      	b.n	800bc8e <HAL_SPI_Transmit+0x3d2>
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2201      	movs	r2, #1
 800b90c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2203      	movs	r2, #3
 800b914:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	68ba      	ldr	r2, [r7, #8]
 800b924:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	88fa      	ldrh	r2, [r7, #6]
 800b92a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	88fa      	ldrh	r2, [r7, #6]
 800b932:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2200      	movs	r2, #0
 800b93a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2200      	movs	r2, #0
 800b940:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2200      	movs	r2, #0
 800b948:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2200      	movs	r2, #0
 800b950:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2200      	movs	r2, #0
 800b956:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b960:	d108      	bne.n	800b974 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b970:	601a      	str	r2, [r3, #0]
 800b972:	e009      	b.n	800b988 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b986:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	685a      	ldr	r2, [r3, #4]
 800b98e:	4b96      	ldr	r3, [pc, #600]	@ (800bbe8 <HAL_SPI_Transmit+0x32c>)
 800b990:	4013      	ands	r3, r2
 800b992:	88f9      	ldrh	r1, [r7, #6]
 800b994:	68fa      	ldr	r2, [r7, #12]
 800b996:	6812      	ldr	r2, [r2, #0]
 800b998:	430b      	orrs	r3, r1
 800b99a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f042 0201 	orr.w	r2, r2, #1
 800b9aa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b9b4:	d107      	bne.n	800b9c6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b9c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	2b0f      	cmp	r3, #15
 800b9cc:	d947      	bls.n	800ba5e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b9ce:	e03f      	b.n	800ba50 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	695b      	ldr	r3, [r3, #20]
 800b9d6:	f003 0302 	and.w	r3, r3, #2
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d114      	bne.n	800ba08 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	6812      	ldr	r2, [r2, #0]
 800b9e8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9ee:	1d1a      	adds	r2, r3, #4
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	3b01      	subs	r3, #1
 800b9fe:	b29a      	uxth	r2, r3
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ba06:	e023      	b.n	800ba50 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba08:	f7f7 f882 	bl	8002b10 <HAL_GetTick>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	1ad3      	subs	r3, r2, r3
 800ba12:	683a      	ldr	r2, [r7, #0]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d803      	bhi.n	800ba20 <HAL_SPI_Transmit+0x164>
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba1e:	d102      	bne.n	800ba26 <HAL_SPI_Transmit+0x16a>
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d114      	bne.n	800ba50 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f000 fbb6 	bl	800c198 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba32:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2200      	movs	r2, #0
 800ba48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	e11e      	b.n	800bc8e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d1b9      	bne.n	800b9d0 <HAL_SPI_Transmit+0x114>
 800ba5c:	e0f1      	b.n	800bc42 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	68db      	ldr	r3, [r3, #12]
 800ba62:	2b07      	cmp	r3, #7
 800ba64:	f240 80e6 	bls.w	800bc34 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ba68:	e05d      	b.n	800bb26 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	695b      	ldr	r3, [r3, #20]
 800ba70:	f003 0302 	and.w	r3, r3, #2
 800ba74:	2b02      	cmp	r3, #2
 800ba76:	d132      	bne.n	800bade <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d918      	bls.n	800bab6 <HAL_SPI_Transmit+0x1fa>
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d014      	beq.n	800bab6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	6812      	ldr	r2, [r2, #0]
 800ba96:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba9c:	1d1a      	adds	r2, r3, #4
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	3b02      	subs	r3, #2
 800baac:	b29a      	uxth	r2, r3
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bab4:	e037      	b.n	800bb26 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800baba:	881a      	ldrh	r2, [r3, #0]
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bac4:	1c9a      	adds	r2, r3, #2
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	3b01      	subs	r3, #1
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800badc:	e023      	b.n	800bb26 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bade:	f7f7 f817 	bl	8002b10 <HAL_GetTick>
 800bae2:	4602      	mov	r2, r0
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	1ad3      	subs	r3, r2, r3
 800bae8:	683a      	ldr	r2, [r7, #0]
 800baea:	429a      	cmp	r2, r3
 800baec:	d803      	bhi.n	800baf6 <HAL_SPI_Transmit+0x23a>
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baf4:	d102      	bne.n	800bafc <HAL_SPI_Transmit+0x240>
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d114      	bne.n	800bb26 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f000 fb4b 	bl	800c198 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb08:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2201      	movs	r2, #1
 800bb16:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bb22:	2303      	movs	r3, #3
 800bb24:	e0b3      	b.n	800bc8e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d19b      	bne.n	800ba6a <HAL_SPI_Transmit+0x1ae>
 800bb32:	e086      	b.n	800bc42 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	695b      	ldr	r3, [r3, #20]
 800bb3a:	f003 0302 	and.w	r3, r3, #2
 800bb3e:	2b02      	cmp	r3, #2
 800bb40:	d154      	bne.n	800bbec <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	2b03      	cmp	r3, #3
 800bb4c:	d918      	bls.n	800bb80 <HAL_SPI_Transmit+0x2c4>
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb52:	2b40      	cmp	r3, #64	@ 0x40
 800bb54:	d914      	bls.n	800bb80 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	6812      	ldr	r2, [r2, #0]
 800bb60:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb66:	1d1a      	adds	r2, r3, #4
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	3b04      	subs	r3, #4
 800bb76:	b29a      	uxth	r2, r3
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bb7e:	e059      	b.n	800bc34 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d917      	bls.n	800bbbc <HAL_SPI_Transmit+0x300>
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d013      	beq.n	800bbbc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb98:	881a      	ldrh	r2, [r3, #0]
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bba2:	1c9a      	adds	r2, r3, #2
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	3b02      	subs	r3, #2
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bbba:	e03b      	b.n	800bc34 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	3320      	adds	r3, #32
 800bbc6:	7812      	ldrb	r2, [r2, #0]
 800bbc8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbce:	1c5a      	adds	r2, r3, #1
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	3b01      	subs	r3, #1
 800bbde:	b29a      	uxth	r2, r3
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bbe6:	e025      	b.n	800bc34 <HAL_SPI_Transmit+0x378>
 800bbe8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbec:	f7f6 ff90 	bl	8002b10 <HAL_GetTick>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	1ad3      	subs	r3, r2, r3
 800bbf6:	683a      	ldr	r2, [r7, #0]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d803      	bhi.n	800bc04 <HAL_SPI_Transmit+0x348>
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc02:	d102      	bne.n	800bc0a <HAL_SPI_Transmit+0x34e>
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d114      	bne.n	800bc34 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bc0a:	68f8      	ldr	r0, [r7, #12]
 800bc0c:	f000 fac4 	bl	800c198 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2201      	movs	r2, #1
 800bc24:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bc30:	2303      	movs	r3, #3
 800bc32:	e02c      	b.n	800bc8e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f47f af79 	bne.w	800bb34 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	9300      	str	r3, [sp, #0]
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	2108      	movs	r1, #8
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	f000 fb43 	bl	800c2d8 <SPI_WaitOnFlagUntilTimeout>
 800bc52:	4603      	mov	r3, r0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d007      	beq.n	800bc68 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc5e:	f043 0220 	orr.w	r2, r3, #32
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f000 fa95 	bl	800c198 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2201      	movs	r2, #1
 800bc72:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d001      	beq.n	800bc8c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	e000      	b.n	800bc8e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800bc8c:	2300      	movs	r3, #0
  }
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3718      	adds	r7, #24
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop

0800bc98 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b088      	sub	sp, #32
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	603b      	str	r3, [r7, #0]
 800bca4:	4613      	mov	r3, r2
 800bca6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcac:	095b      	lsrs	r3, r3, #5
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	3330      	adds	r3, #48	@ 0x30
 800bcba:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bcbc:	f7f6 ff28 	bl	8002b10 <HAL_GetTick>
 800bcc0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bcc8:	b2db      	uxtb	r3, r3
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d001      	beq.n	800bcd2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800bcce:	2302      	movs	r3, #2
 800bcd0:	e250      	b.n	800c174 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d002      	beq.n	800bcde <HAL_SPI_Receive+0x46>
 800bcd8:	88fb      	ldrh	r3, [r7, #6]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d101      	bne.n	800bce2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800bcde:	2301      	movs	r3, #1
 800bce0:	e248      	b.n	800c174 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d101      	bne.n	800bcf0 <HAL_SPI_Receive+0x58>
 800bcec:	2302      	movs	r3, #2
 800bcee:	e241      	b.n	800c174 <HAL_SPI_Receive+0x4dc>
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2204      	movs	r2, #4
 800bcfc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2200      	movs	r2, #0
 800bd04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	68ba      	ldr	r2, [r7, #8]
 800bd0c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	88fa      	ldrh	r2, [r7, #6]
 800bd12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	88fa      	ldrh	r2, [r7, #6]
 800bd1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2200      	movs	r2, #0
 800bd22:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2200      	movs	r2, #0
 800bd28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2200      	movs	r2, #0
 800bd38:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800bd48:	d108      	bne.n	800bd5c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	681a      	ldr	r2, [r3, #0]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bd58:	601a      	str	r2, [r3, #0]
 800bd5a:	e009      	b.n	800bd70 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	68db      	ldr	r3, [r3, #12]
 800bd62:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800bd6e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	685a      	ldr	r2, [r3, #4]
 800bd76:	4b95      	ldr	r3, [pc, #596]	@ (800bfcc <HAL_SPI_Receive+0x334>)
 800bd78:	4013      	ands	r3, r2
 800bd7a:	88f9      	ldrh	r1, [r7, #6]
 800bd7c:	68fa      	ldr	r2, [r7, #12]
 800bd7e:	6812      	ldr	r2, [r2, #0]
 800bd80:	430b      	orrs	r3, r1
 800bd82:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f042 0201 	orr.w	r2, r2, #1
 800bd92:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bd9c:	d107      	bne.n	800bdae <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bdac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	2b0f      	cmp	r3, #15
 800bdb4:	d96c      	bls.n	800be90 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bdb6:	e064      	b.n	800be82 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	695b      	ldr	r3, [r3, #20]
 800bdbe:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	695b      	ldr	r3, [r3, #20]
 800bdc6:	f003 0301 	and.w	r3, r3, #1
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	d114      	bne.n	800bdf8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdd6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bdd8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdde:	1d1a      	adds	r2, r3, #4
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	3b01      	subs	r3, #1
 800bdee:	b29a      	uxth	r2, r3
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bdf6:	e044      	b.n	800be82 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bdfe:	b29b      	uxth	r3, r3
 800be00:	8bfa      	ldrh	r2, [r7, #30]
 800be02:	429a      	cmp	r2, r3
 800be04:	d919      	bls.n	800be3a <HAL_SPI_Receive+0x1a2>
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d014      	beq.n	800be3a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be18:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800be1a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be20:	1d1a      	adds	r2, r3, #4
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	3b01      	subs	r3, #1
 800be30:	b29a      	uxth	r2, r3
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800be38:	e023      	b.n	800be82 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be3a:	f7f6 fe69 	bl	8002b10 <HAL_GetTick>
 800be3e:	4602      	mov	r2, r0
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	1ad3      	subs	r3, r2, r3
 800be44:	683a      	ldr	r2, [r7, #0]
 800be46:	429a      	cmp	r2, r3
 800be48:	d803      	bhi.n	800be52 <HAL_SPI_Receive+0x1ba>
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be50:	d102      	bne.n	800be58 <HAL_SPI_Receive+0x1c0>
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d114      	bne.n	800be82 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800be58:	68f8      	ldr	r0, [r7, #12]
 800be5a:	f000 f99d 	bl	800c198 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2201      	movs	r2, #1
 800be72:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2200      	movs	r2, #0
 800be7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800be7e:	2303      	movs	r3, #3
 800be80:	e178      	b.n	800c174 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be88:	b29b      	uxth	r3, r3
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d194      	bne.n	800bdb8 <HAL_SPI_Receive+0x120>
 800be8e:	e15e      	b.n	800c14e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	68db      	ldr	r3, [r3, #12]
 800be94:	2b07      	cmp	r3, #7
 800be96:	f240 8153 	bls.w	800c140 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800be9a:	e08f      	b.n	800bfbc <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	695b      	ldr	r3, [r3, #20]
 800bea2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	695b      	ldr	r3, [r3, #20]
 800beaa:	f003 0301 	and.w	r3, r3, #1
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d114      	bne.n	800bedc <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800beb6:	69ba      	ldr	r2, [r7, #24]
 800beb8:	8812      	ldrh	r2, [r2, #0]
 800beba:	b292      	uxth	r2, r2
 800bebc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bec2:	1c9a      	adds	r2, r3, #2
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bece:	b29b      	uxth	r3, r3
 800bed0:	3b01      	subs	r3, #1
 800bed2:	b29a      	uxth	r2, r3
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800beda:	e06f      	b.n	800bfbc <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	8bfa      	ldrh	r2, [r7, #30]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d924      	bls.n	800bf34 <HAL_SPI_Receive+0x29c>
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d01f      	beq.n	800bf34 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bef8:	69ba      	ldr	r2, [r7, #24]
 800befa:	8812      	ldrh	r2, [r2, #0]
 800befc:	b292      	uxth	r2, r2
 800befe:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf04:	1c9a      	adds	r2, r3, #2
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf0e:	69ba      	ldr	r2, [r7, #24]
 800bf10:	8812      	ldrh	r2, [r2, #0]
 800bf12:	b292      	uxth	r2, r2
 800bf14:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf1a:	1c9a      	adds	r2, r3, #2
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	3b02      	subs	r3, #2
 800bf2a:	b29a      	uxth	r2, r3
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bf32:	e043      	b.n	800bfbc <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf3a:	b29b      	uxth	r3, r3
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d119      	bne.n	800bf74 <HAL_SPI_Receive+0x2dc>
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d014      	beq.n	800bf74 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf4e:	69ba      	ldr	r2, [r7, #24]
 800bf50:	8812      	ldrh	r2, [r2, #0]
 800bf52:	b292      	uxth	r2, r2
 800bf54:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf5a:	1c9a      	adds	r2, r3, #2
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bf72:	e023      	b.n	800bfbc <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf74:	f7f6 fdcc 	bl	8002b10 <HAL_GetTick>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	1ad3      	subs	r3, r2, r3
 800bf7e:	683a      	ldr	r2, [r7, #0]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d803      	bhi.n	800bf8c <HAL_SPI_Receive+0x2f4>
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf8a:	d102      	bne.n	800bf92 <HAL_SPI_Receive+0x2fa>
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d114      	bne.n	800bfbc <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bf92:	68f8      	ldr	r0, [r7, #12]
 800bf94:	f000 f900 	bl	800c198 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf9e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2201      	movs	r2, #1
 800bfac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bfb8:	2303      	movs	r3, #3
 800bfba:	e0db      	b.n	800c174 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	f47f af69 	bne.w	800be9c <HAL_SPI_Receive+0x204>
 800bfca:	e0c0      	b.n	800c14e <HAL_SPI_Receive+0x4b6>
 800bfcc:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	695b      	ldr	r3, [r3, #20]
 800bfd6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	695b      	ldr	r3, [r3, #20]
 800bfde:	f003 0301 	and.w	r3, r3, #1
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d117      	bne.n	800c016 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bff2:	7812      	ldrb	r2, [r2, #0]
 800bff4:	b2d2      	uxtb	r2, r2
 800bff6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bffc:	1c5a      	adds	r2, r3, #1
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c008:	b29b      	uxth	r3, r3
 800c00a:	3b01      	subs	r3, #1
 800c00c:	b29a      	uxth	r2, r3
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c014:	e094      	b.n	800c140 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	8bfa      	ldrh	r2, [r7, #30]
 800c020:	429a      	cmp	r2, r3
 800c022:	d946      	bls.n	800c0b2 <HAL_SPI_Receive+0x41a>
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d041      	beq.n	800c0b2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c03a:	7812      	ldrb	r2, [r2, #0]
 800c03c:	b2d2      	uxtb	r2, r2
 800c03e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c044:	1c5a      	adds	r2, r3, #1
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c056:	7812      	ldrb	r2, [r2, #0]
 800c058:	b2d2      	uxtb	r2, r2
 800c05a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c060:	1c5a      	adds	r2, r3, #1
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c072:	7812      	ldrb	r2, [r2, #0]
 800c074:	b2d2      	uxtb	r2, r2
 800c076:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c07c:	1c5a      	adds	r2, r3, #1
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c08e:	7812      	ldrb	r2, [r2, #0]
 800c090:	b2d2      	uxtb	r2, r2
 800c092:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c098:	1c5a      	adds	r2, r3, #1
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	3b04      	subs	r3, #4
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c0b0:	e046      	b.n	800c140 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	2b03      	cmp	r3, #3
 800c0bc:	d81c      	bhi.n	800c0f8 <HAL_SPI_Receive+0x460>
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d017      	beq.n	800c0f8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0d4:	7812      	ldrb	r2, [r2, #0]
 800c0d6:	b2d2      	uxtb	r2, r2
 800c0d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0de:	1c5a      	adds	r2, r3, #1
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	3b01      	subs	r3, #1
 800c0ee:	b29a      	uxth	r2, r3
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c0f6:	e023      	b.n	800c140 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0f8:	f7f6 fd0a 	bl	8002b10 <HAL_GetTick>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	1ad3      	subs	r3, r2, r3
 800c102:	683a      	ldr	r2, [r7, #0]
 800c104:	429a      	cmp	r2, r3
 800c106:	d803      	bhi.n	800c110 <HAL_SPI_Receive+0x478>
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c10e:	d102      	bne.n	800c116 <HAL_SPI_Receive+0x47e>
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d114      	bne.n	800c140 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c116:	68f8      	ldr	r0, [r7, #12]
 800c118:	f000 f83e 	bl	800c198 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c122:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2201      	movs	r2, #1
 800c130:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2200      	movs	r2, #0
 800c138:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c13c:	2303      	movs	r3, #3
 800c13e:	e019      	b.n	800c174 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c146:	b29b      	uxth	r3, r3
 800c148:	2b00      	cmp	r3, #0
 800c14a:	f47f af41 	bne.w	800bfd0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	f000 f822 	bl	800c198 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2201      	movs	r2, #1
 800c158:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2200      	movs	r2, #0
 800c160:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d001      	beq.n	800c172 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800c16e:	2301      	movs	r3, #1
 800c170:	e000      	b.n	800c174 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800c172:	2300      	movs	r3, #0
  }
}
 800c174:	4618      	mov	r0, r3
 800c176:	3720      	adds	r7, #32
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c18a:	b2db      	uxtb	r3, r3
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	370c      	adds	r7, #12
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr

0800c198 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c198:	b480      	push	{r7}
 800c19a:	b085      	sub	sp, #20
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	695b      	ldr	r3, [r3, #20]
 800c1a6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	699a      	ldr	r2, [r3, #24]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f042 0208 	orr.w	r2, r2, #8
 800c1b6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	699a      	ldr	r2, [r3, #24]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f042 0210 	orr.w	r2, r2, #16
 800c1c6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	681a      	ldr	r2, [r3, #0]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f022 0201 	bic.w	r2, r2, #1
 800c1d6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	6919      	ldr	r1, [r3, #16]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	4b3c      	ldr	r3, [pc, #240]	@ (800c2d4 <SPI_CloseTransfer+0x13c>)
 800c1e4:	400b      	ands	r3, r1
 800c1e6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	689a      	ldr	r2, [r3, #8]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c1f6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	2b04      	cmp	r3, #4
 800c202:	d014      	beq.n	800c22e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f003 0320 	and.w	r3, r3, #32
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00f      	beq.n	800c22e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c214:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	699a      	ldr	r2, [r3, #24]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f042 0220 	orr.w	r2, r2, #32
 800c22c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c234:	b2db      	uxtb	r3, r3
 800c236:	2b03      	cmp	r3, #3
 800c238:	d014      	beq.n	800c264 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c240:	2b00      	cmp	r3, #0
 800c242:	d00f      	beq.n	800c264 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c24a:	f043 0204 	orr.w	r2, r3, #4
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	699a      	ldr	r2, [r3, #24]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c262:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d00f      	beq.n	800c28e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c274:	f043 0201 	orr.w	r2, r3, #1
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	699a      	ldr	r2, [r3, #24]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c28c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c294:	2b00      	cmp	r3, #0
 800c296:	d00f      	beq.n	800c2b8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c29e:	f043 0208 	orr.w	r2, r3, #8
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	699a      	ldr	r2, [r3, #24]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c2b6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c2c8:	bf00      	nop
 800c2ca:	3714      	adds	r7, #20
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr
 800c2d4:	fffffc90 	.word	0xfffffc90

0800c2d8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	603b      	str	r3, [r7, #0]
 800c2e4:	4613      	mov	r3, r2
 800c2e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c2e8:	e010      	b.n	800c30c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2ea:	f7f6 fc11 	bl	8002b10 <HAL_GetTick>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	69bb      	ldr	r3, [r7, #24]
 800c2f2:	1ad3      	subs	r3, r2, r3
 800c2f4:	683a      	ldr	r2, [r7, #0]
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d803      	bhi.n	800c302 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c300:	d102      	bne.n	800c308 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d101      	bne.n	800c30c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c308:	2303      	movs	r3, #3
 800c30a:	e00f      	b.n	800c32c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	695a      	ldr	r2, [r3, #20]
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	4013      	ands	r3, r2
 800c316:	68ba      	ldr	r2, [r7, #8]
 800c318:	429a      	cmp	r2, r3
 800c31a:	bf0c      	ite	eq
 800c31c:	2301      	moveq	r3, #1
 800c31e:	2300      	movne	r3, #0
 800c320:	b2db      	uxtb	r3, r3
 800c322:	461a      	mov	r2, r3
 800c324:	79fb      	ldrb	r3, [r7, #7]
 800c326:	429a      	cmp	r2, r3
 800c328:	d0df      	beq.n	800c2ea <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c32a:	2300      	movs	r3, #0
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3710      	adds	r7, #16
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c334:	b480      	push	{r7}
 800c336:	b085      	sub	sp, #20
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c340:	095b      	lsrs	r3, r3, #5
 800c342:	3301      	adds	r3, #1
 800c344:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	68db      	ldr	r3, [r3, #12]
 800c34a:	3301      	adds	r3, #1
 800c34c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	3307      	adds	r3, #7
 800c352:	08db      	lsrs	r3, r3, #3
 800c354:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	68fa      	ldr	r2, [r7, #12]
 800c35a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3714      	adds	r7, #20
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr

0800c36a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b082      	sub	sp, #8
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d101      	bne.n	800c37c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c378:	2301      	movs	r3, #1
 800c37a:	e049      	b.n	800c410 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c382:	b2db      	uxtb	r3, r3
 800c384:	2b00      	cmp	r3, #0
 800c386:	d106      	bne.n	800c396 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2200      	movs	r2, #0
 800c38c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f7f6 f945 	bl	8002620 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2202      	movs	r2, #2
 800c39a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	3304      	adds	r3, #4
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	4610      	mov	r0, r2
 800c3aa:	f000 fa65 	bl	800c878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2201      	movs	r2, #1
 800c3da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2201      	movs	r2, #1
 800c402:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2201      	movs	r2, #1
 800c40a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c40e:	2300      	movs	r3, #0
}
 800c410:	4618      	mov	r0, r3
 800c412:	3708      	adds	r7, #8
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d109      	bne.n	800c43c <HAL_TIM_PWM_Start+0x24>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c42e:	b2db      	uxtb	r3, r3
 800c430:	2b01      	cmp	r3, #1
 800c432:	bf14      	ite	ne
 800c434:	2301      	movne	r3, #1
 800c436:	2300      	moveq	r3, #0
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	e03c      	b.n	800c4b6 <HAL_TIM_PWM_Start+0x9e>
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	2b04      	cmp	r3, #4
 800c440:	d109      	bne.n	800c456 <HAL_TIM_PWM_Start+0x3e>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c448:	b2db      	uxtb	r3, r3
 800c44a:	2b01      	cmp	r3, #1
 800c44c:	bf14      	ite	ne
 800c44e:	2301      	movne	r3, #1
 800c450:	2300      	moveq	r3, #0
 800c452:	b2db      	uxtb	r3, r3
 800c454:	e02f      	b.n	800c4b6 <HAL_TIM_PWM_Start+0x9e>
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	2b08      	cmp	r3, #8
 800c45a:	d109      	bne.n	800c470 <HAL_TIM_PWM_Start+0x58>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c462:	b2db      	uxtb	r3, r3
 800c464:	2b01      	cmp	r3, #1
 800c466:	bf14      	ite	ne
 800c468:	2301      	movne	r3, #1
 800c46a:	2300      	moveq	r3, #0
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	e022      	b.n	800c4b6 <HAL_TIM_PWM_Start+0x9e>
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	2b0c      	cmp	r3, #12
 800c474:	d109      	bne.n	800c48a <HAL_TIM_PWM_Start+0x72>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c47c:	b2db      	uxtb	r3, r3
 800c47e:	2b01      	cmp	r3, #1
 800c480:	bf14      	ite	ne
 800c482:	2301      	movne	r3, #1
 800c484:	2300      	moveq	r3, #0
 800c486:	b2db      	uxtb	r3, r3
 800c488:	e015      	b.n	800c4b6 <HAL_TIM_PWM_Start+0x9e>
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	2b10      	cmp	r3, #16
 800c48e:	d109      	bne.n	800c4a4 <HAL_TIM_PWM_Start+0x8c>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c496:	b2db      	uxtb	r3, r3
 800c498:	2b01      	cmp	r3, #1
 800c49a:	bf14      	ite	ne
 800c49c:	2301      	movne	r3, #1
 800c49e:	2300      	moveq	r3, #0
 800c4a0:	b2db      	uxtb	r3, r3
 800c4a2:	e008      	b.n	800c4b6 <HAL_TIM_PWM_Start+0x9e>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	bf14      	ite	ne
 800c4b0:	2301      	movne	r3, #1
 800c4b2:	2300      	moveq	r3, #0
 800c4b4:	b2db      	uxtb	r3, r3
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d001      	beq.n	800c4be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	e0ab      	b.n	800c616 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d104      	bne.n	800c4ce <HAL_TIM_PWM_Start+0xb6>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2202      	movs	r2, #2
 800c4c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c4cc:	e023      	b.n	800c516 <HAL_TIM_PWM_Start+0xfe>
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	2b04      	cmp	r3, #4
 800c4d2:	d104      	bne.n	800c4de <HAL_TIM_PWM_Start+0xc6>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2202      	movs	r2, #2
 800c4d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c4dc:	e01b      	b.n	800c516 <HAL_TIM_PWM_Start+0xfe>
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	2b08      	cmp	r3, #8
 800c4e2:	d104      	bne.n	800c4ee <HAL_TIM_PWM_Start+0xd6>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2202      	movs	r2, #2
 800c4e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c4ec:	e013      	b.n	800c516 <HAL_TIM_PWM_Start+0xfe>
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	2b0c      	cmp	r3, #12
 800c4f2:	d104      	bne.n	800c4fe <HAL_TIM_PWM_Start+0xe6>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2202      	movs	r2, #2
 800c4f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c4fc:	e00b      	b.n	800c516 <HAL_TIM_PWM_Start+0xfe>
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	2b10      	cmp	r3, #16
 800c502:	d104      	bne.n	800c50e <HAL_TIM_PWM_Start+0xf6>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2202      	movs	r2, #2
 800c508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c50c:	e003      	b.n	800c516 <HAL_TIM_PWM_Start+0xfe>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2202      	movs	r2, #2
 800c512:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	2201      	movs	r2, #1
 800c51c:	6839      	ldr	r1, [r7, #0]
 800c51e:	4618      	mov	r0, r3
 800c520:	f000 fd32 	bl	800cf88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a3d      	ldr	r2, [pc, #244]	@ (800c620 <HAL_TIM_PWM_Start+0x208>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d013      	beq.n	800c556 <HAL_TIM_PWM_Start+0x13e>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	4a3c      	ldr	r2, [pc, #240]	@ (800c624 <HAL_TIM_PWM_Start+0x20c>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d00e      	beq.n	800c556 <HAL_TIM_PWM_Start+0x13e>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4a3a      	ldr	r2, [pc, #232]	@ (800c628 <HAL_TIM_PWM_Start+0x210>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d009      	beq.n	800c556 <HAL_TIM_PWM_Start+0x13e>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4a39      	ldr	r2, [pc, #228]	@ (800c62c <HAL_TIM_PWM_Start+0x214>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d004      	beq.n	800c556 <HAL_TIM_PWM_Start+0x13e>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a37      	ldr	r2, [pc, #220]	@ (800c630 <HAL_TIM_PWM_Start+0x218>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d101      	bne.n	800c55a <HAL_TIM_PWM_Start+0x142>
 800c556:	2301      	movs	r3, #1
 800c558:	e000      	b.n	800c55c <HAL_TIM_PWM_Start+0x144>
 800c55a:	2300      	movs	r3, #0
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d007      	beq.n	800c570 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c56e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a2a      	ldr	r2, [pc, #168]	@ (800c620 <HAL_TIM_PWM_Start+0x208>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d02c      	beq.n	800c5d4 <HAL_TIM_PWM_Start+0x1bc>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c582:	d027      	beq.n	800c5d4 <HAL_TIM_PWM_Start+0x1bc>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4a2a      	ldr	r2, [pc, #168]	@ (800c634 <HAL_TIM_PWM_Start+0x21c>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d022      	beq.n	800c5d4 <HAL_TIM_PWM_Start+0x1bc>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4a29      	ldr	r2, [pc, #164]	@ (800c638 <HAL_TIM_PWM_Start+0x220>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d01d      	beq.n	800c5d4 <HAL_TIM_PWM_Start+0x1bc>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a27      	ldr	r2, [pc, #156]	@ (800c63c <HAL_TIM_PWM_Start+0x224>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d018      	beq.n	800c5d4 <HAL_TIM_PWM_Start+0x1bc>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4a1f      	ldr	r2, [pc, #124]	@ (800c624 <HAL_TIM_PWM_Start+0x20c>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d013      	beq.n	800c5d4 <HAL_TIM_PWM_Start+0x1bc>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a23      	ldr	r2, [pc, #140]	@ (800c640 <HAL_TIM_PWM_Start+0x228>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d00e      	beq.n	800c5d4 <HAL_TIM_PWM_Start+0x1bc>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a1b      	ldr	r2, [pc, #108]	@ (800c628 <HAL_TIM_PWM_Start+0x210>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d009      	beq.n	800c5d4 <HAL_TIM_PWM_Start+0x1bc>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4a1f      	ldr	r2, [pc, #124]	@ (800c644 <HAL_TIM_PWM_Start+0x22c>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d004      	beq.n	800c5d4 <HAL_TIM_PWM_Start+0x1bc>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4a1e      	ldr	r2, [pc, #120]	@ (800c648 <HAL_TIM_PWM_Start+0x230>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d115      	bne.n	800c600 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	689a      	ldr	r2, [r3, #8]
 800c5da:	4b1c      	ldr	r3, [pc, #112]	@ (800c64c <HAL_TIM_PWM_Start+0x234>)
 800c5dc:	4013      	ands	r3, r2
 800c5de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2b06      	cmp	r3, #6
 800c5e4:	d015      	beq.n	800c612 <HAL_TIM_PWM_Start+0x1fa>
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c5ec:	d011      	beq.n	800c612 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	681a      	ldr	r2, [r3, #0]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f042 0201 	orr.w	r2, r2, #1
 800c5fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5fe:	e008      	b.n	800c612 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	681a      	ldr	r2, [r3, #0]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f042 0201 	orr.w	r2, r2, #1
 800c60e:	601a      	str	r2, [r3, #0]
 800c610:	e000      	b.n	800c614 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c612:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c614:	2300      	movs	r3, #0
}
 800c616:	4618      	mov	r0, r3
 800c618:	3710      	adds	r7, #16
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop
 800c620:	40010000 	.word	0x40010000
 800c624:	40010400 	.word	0x40010400
 800c628:	40014000 	.word	0x40014000
 800c62c:	40014400 	.word	0x40014400
 800c630:	40014800 	.word	0x40014800
 800c634:	40000400 	.word	0x40000400
 800c638:	40000800 	.word	0x40000800
 800c63c:	40000c00 	.word	0x40000c00
 800c640:	40001800 	.word	0x40001800
 800c644:	4000e000 	.word	0x4000e000
 800c648:	4000e400 	.word	0x4000e400
 800c64c:	00010007 	.word	0x00010007

0800c650 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b086      	sub	sp, #24
 800c654:	af00      	add	r7, sp, #0
 800c656:	60f8      	str	r0, [r7, #12]
 800c658:	60b9      	str	r1, [r7, #8]
 800c65a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c65c:	2300      	movs	r3, #0
 800c65e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c666:	2b01      	cmp	r3, #1
 800c668:	d101      	bne.n	800c66e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c66a:	2302      	movs	r3, #2
 800c66c:	e0ff      	b.n	800c86e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2201      	movs	r2, #1
 800c672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2b14      	cmp	r3, #20
 800c67a:	f200 80f0 	bhi.w	800c85e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c67e:	a201      	add	r2, pc, #4	@ (adr r2, 800c684 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c684:	0800c6d9 	.word	0x0800c6d9
 800c688:	0800c85f 	.word	0x0800c85f
 800c68c:	0800c85f 	.word	0x0800c85f
 800c690:	0800c85f 	.word	0x0800c85f
 800c694:	0800c719 	.word	0x0800c719
 800c698:	0800c85f 	.word	0x0800c85f
 800c69c:	0800c85f 	.word	0x0800c85f
 800c6a0:	0800c85f 	.word	0x0800c85f
 800c6a4:	0800c75b 	.word	0x0800c75b
 800c6a8:	0800c85f 	.word	0x0800c85f
 800c6ac:	0800c85f 	.word	0x0800c85f
 800c6b0:	0800c85f 	.word	0x0800c85f
 800c6b4:	0800c79b 	.word	0x0800c79b
 800c6b8:	0800c85f 	.word	0x0800c85f
 800c6bc:	0800c85f 	.word	0x0800c85f
 800c6c0:	0800c85f 	.word	0x0800c85f
 800c6c4:	0800c7dd 	.word	0x0800c7dd
 800c6c8:	0800c85f 	.word	0x0800c85f
 800c6cc:	0800c85f 	.word	0x0800c85f
 800c6d0:	0800c85f 	.word	0x0800c85f
 800c6d4:	0800c81d 	.word	0x0800c81d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	68b9      	ldr	r1, [r7, #8]
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f000 f97c 	bl	800c9dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	699a      	ldr	r2, [r3, #24]
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f042 0208 	orr.w	r2, r2, #8
 800c6f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	699a      	ldr	r2, [r3, #24]
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f022 0204 	bic.w	r2, r2, #4
 800c702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	6999      	ldr	r1, [r3, #24]
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	691a      	ldr	r2, [r3, #16]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	430a      	orrs	r2, r1
 800c714:	619a      	str	r2, [r3, #24]
      break;
 800c716:	e0a5      	b.n	800c864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	68b9      	ldr	r1, [r7, #8]
 800c71e:	4618      	mov	r0, r3
 800c720:	f000 f9ec 	bl	800cafc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	699a      	ldr	r2, [r3, #24]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	699a      	ldr	r2, [r3, #24]
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	6999      	ldr	r1, [r3, #24]
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	691b      	ldr	r3, [r3, #16]
 800c74e:	021a      	lsls	r2, r3, #8
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	430a      	orrs	r2, r1
 800c756:	619a      	str	r2, [r3, #24]
      break;
 800c758:	e084      	b.n	800c864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	68b9      	ldr	r1, [r7, #8]
 800c760:	4618      	mov	r0, r3
 800c762:	f000 fa55 	bl	800cc10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	69da      	ldr	r2, [r3, #28]
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f042 0208 	orr.w	r2, r2, #8
 800c774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	69da      	ldr	r2, [r3, #28]
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f022 0204 	bic.w	r2, r2, #4
 800c784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	69d9      	ldr	r1, [r3, #28]
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	691a      	ldr	r2, [r3, #16]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	430a      	orrs	r2, r1
 800c796:	61da      	str	r2, [r3, #28]
      break;
 800c798:	e064      	b.n	800c864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	68b9      	ldr	r1, [r7, #8]
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f000 fabd 	bl	800cd20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	69da      	ldr	r2, [r3, #28]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c7b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	69da      	ldr	r2, [r3, #28]
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c7c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	69d9      	ldr	r1, [r3, #28]
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	691b      	ldr	r3, [r3, #16]
 800c7d0:	021a      	lsls	r2, r3, #8
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	430a      	orrs	r2, r1
 800c7d8:	61da      	str	r2, [r3, #28]
      break;
 800c7da:	e043      	b.n	800c864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	68b9      	ldr	r1, [r7, #8]
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f000 fb06 	bl	800cdf4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f042 0208 	orr.w	r2, r2, #8
 800c7f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f022 0204 	bic.w	r2, r2, #4
 800c806:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	691a      	ldr	r2, [r3, #16]
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	430a      	orrs	r2, r1
 800c818:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c81a:	e023      	b.n	800c864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	68b9      	ldr	r1, [r7, #8]
 800c822:	4618      	mov	r0, r3
 800c824:	f000 fb4a 	bl	800cebc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c836:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c846:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	691b      	ldr	r3, [r3, #16]
 800c852:	021a      	lsls	r2, r3, #8
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	430a      	orrs	r2, r1
 800c85a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c85c:	e002      	b.n	800c864 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c85e:	2301      	movs	r3, #1
 800c860:	75fb      	strb	r3, [r7, #23]
      break;
 800c862:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2200      	movs	r2, #0
 800c868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c86c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3718      	adds	r7, #24
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop

0800c878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c878:	b480      	push	{r7}
 800c87a:	b085      	sub	sp, #20
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	4a4a      	ldr	r2, [pc, #296]	@ (800c9b4 <TIM_Base_SetConfig+0x13c>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d013      	beq.n	800c8b8 <TIM_Base_SetConfig+0x40>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c896:	d00f      	beq.n	800c8b8 <TIM_Base_SetConfig+0x40>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	4a47      	ldr	r2, [pc, #284]	@ (800c9b8 <TIM_Base_SetConfig+0x140>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d00b      	beq.n	800c8b8 <TIM_Base_SetConfig+0x40>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	4a46      	ldr	r2, [pc, #280]	@ (800c9bc <TIM_Base_SetConfig+0x144>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d007      	beq.n	800c8b8 <TIM_Base_SetConfig+0x40>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	4a45      	ldr	r2, [pc, #276]	@ (800c9c0 <TIM_Base_SetConfig+0x148>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d003      	beq.n	800c8b8 <TIM_Base_SetConfig+0x40>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	4a44      	ldr	r2, [pc, #272]	@ (800c9c4 <TIM_Base_SetConfig+0x14c>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d108      	bne.n	800c8ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	68fa      	ldr	r2, [r7, #12]
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	4a39      	ldr	r2, [pc, #228]	@ (800c9b4 <TIM_Base_SetConfig+0x13c>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d027      	beq.n	800c922 <TIM_Base_SetConfig+0xaa>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8d8:	d023      	beq.n	800c922 <TIM_Base_SetConfig+0xaa>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	4a36      	ldr	r2, [pc, #216]	@ (800c9b8 <TIM_Base_SetConfig+0x140>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d01f      	beq.n	800c922 <TIM_Base_SetConfig+0xaa>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	4a35      	ldr	r2, [pc, #212]	@ (800c9bc <TIM_Base_SetConfig+0x144>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d01b      	beq.n	800c922 <TIM_Base_SetConfig+0xaa>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4a34      	ldr	r2, [pc, #208]	@ (800c9c0 <TIM_Base_SetConfig+0x148>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d017      	beq.n	800c922 <TIM_Base_SetConfig+0xaa>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	4a33      	ldr	r2, [pc, #204]	@ (800c9c4 <TIM_Base_SetConfig+0x14c>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d013      	beq.n	800c922 <TIM_Base_SetConfig+0xaa>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4a32      	ldr	r2, [pc, #200]	@ (800c9c8 <TIM_Base_SetConfig+0x150>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d00f      	beq.n	800c922 <TIM_Base_SetConfig+0xaa>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	4a31      	ldr	r2, [pc, #196]	@ (800c9cc <TIM_Base_SetConfig+0x154>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d00b      	beq.n	800c922 <TIM_Base_SetConfig+0xaa>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	4a30      	ldr	r2, [pc, #192]	@ (800c9d0 <TIM_Base_SetConfig+0x158>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d007      	beq.n	800c922 <TIM_Base_SetConfig+0xaa>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	4a2f      	ldr	r2, [pc, #188]	@ (800c9d4 <TIM_Base_SetConfig+0x15c>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d003      	beq.n	800c922 <TIM_Base_SetConfig+0xaa>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	4a2e      	ldr	r2, [pc, #184]	@ (800c9d8 <TIM_Base_SetConfig+0x160>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d108      	bne.n	800c934 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	68db      	ldr	r3, [r3, #12]
 800c92e:	68fa      	ldr	r2, [r7, #12]
 800c930:	4313      	orrs	r3, r2
 800c932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	695b      	ldr	r3, [r3, #20]
 800c93e:	4313      	orrs	r3, r2
 800c940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	68fa      	ldr	r2, [r7, #12]
 800c946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	689a      	ldr	r2, [r3, #8]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	4a16      	ldr	r2, [pc, #88]	@ (800c9b4 <TIM_Base_SetConfig+0x13c>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d00f      	beq.n	800c980 <TIM_Base_SetConfig+0x108>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	4a18      	ldr	r2, [pc, #96]	@ (800c9c4 <TIM_Base_SetConfig+0x14c>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d00b      	beq.n	800c980 <TIM_Base_SetConfig+0x108>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	4a17      	ldr	r2, [pc, #92]	@ (800c9c8 <TIM_Base_SetConfig+0x150>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d007      	beq.n	800c980 <TIM_Base_SetConfig+0x108>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	4a16      	ldr	r2, [pc, #88]	@ (800c9cc <TIM_Base_SetConfig+0x154>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d003      	beq.n	800c980 <TIM_Base_SetConfig+0x108>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	4a15      	ldr	r2, [pc, #84]	@ (800c9d0 <TIM_Base_SetConfig+0x158>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d103      	bne.n	800c988 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	691a      	ldr	r2, [r3, #16]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2201      	movs	r2, #1
 800c98c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	691b      	ldr	r3, [r3, #16]
 800c992:	f003 0301 	and.w	r3, r3, #1
 800c996:	2b01      	cmp	r3, #1
 800c998:	d105      	bne.n	800c9a6 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	691b      	ldr	r3, [r3, #16]
 800c99e:	f023 0201 	bic.w	r2, r3, #1
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	611a      	str	r2, [r3, #16]
  }
}
 800c9a6:	bf00      	nop
 800c9a8:	3714      	adds	r7, #20
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr
 800c9b2:	bf00      	nop
 800c9b4:	40010000 	.word	0x40010000
 800c9b8:	40000400 	.word	0x40000400
 800c9bc:	40000800 	.word	0x40000800
 800c9c0:	40000c00 	.word	0x40000c00
 800c9c4:	40010400 	.word	0x40010400
 800c9c8:	40014000 	.word	0x40014000
 800c9cc:	40014400 	.word	0x40014400
 800c9d0:	40014800 	.word	0x40014800
 800c9d4:	4000e000 	.word	0x4000e000
 800c9d8:	4000e400 	.word	0x4000e400

0800c9dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b087      	sub	sp, #28
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6a1b      	ldr	r3, [r3, #32]
 800c9ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6a1b      	ldr	r3, [r3, #32]
 800c9f0:	f023 0201 	bic.w	r2, r3, #1
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	699b      	ldr	r3, [r3, #24]
 800ca02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ca04:	68fa      	ldr	r2, [r7, #12]
 800ca06:	4b37      	ldr	r3, [pc, #220]	@ (800cae4 <TIM_OC1_SetConfig+0x108>)
 800ca08:	4013      	ands	r3, r2
 800ca0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f023 0303 	bic.w	r3, r3, #3
 800ca12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	f023 0302 	bic.w	r3, r3, #2
 800ca24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	689b      	ldr	r3, [r3, #8]
 800ca2a:	697a      	ldr	r2, [r7, #20]
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	4a2d      	ldr	r2, [pc, #180]	@ (800cae8 <TIM_OC1_SetConfig+0x10c>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d00f      	beq.n	800ca58 <TIM_OC1_SetConfig+0x7c>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	4a2c      	ldr	r2, [pc, #176]	@ (800caec <TIM_OC1_SetConfig+0x110>)
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d00b      	beq.n	800ca58 <TIM_OC1_SetConfig+0x7c>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	4a2b      	ldr	r2, [pc, #172]	@ (800caf0 <TIM_OC1_SetConfig+0x114>)
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d007      	beq.n	800ca58 <TIM_OC1_SetConfig+0x7c>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	4a2a      	ldr	r2, [pc, #168]	@ (800caf4 <TIM_OC1_SetConfig+0x118>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d003      	beq.n	800ca58 <TIM_OC1_SetConfig+0x7c>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	4a29      	ldr	r2, [pc, #164]	@ (800caf8 <TIM_OC1_SetConfig+0x11c>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d10c      	bne.n	800ca72 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	f023 0308 	bic.w	r3, r3, #8
 800ca5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	68db      	ldr	r3, [r3, #12]
 800ca64:	697a      	ldr	r2, [r7, #20]
 800ca66:	4313      	orrs	r3, r2
 800ca68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	f023 0304 	bic.w	r3, r3, #4
 800ca70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	4a1c      	ldr	r2, [pc, #112]	@ (800cae8 <TIM_OC1_SetConfig+0x10c>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d00f      	beq.n	800ca9a <TIM_OC1_SetConfig+0xbe>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	4a1b      	ldr	r2, [pc, #108]	@ (800caec <TIM_OC1_SetConfig+0x110>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d00b      	beq.n	800ca9a <TIM_OC1_SetConfig+0xbe>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	4a1a      	ldr	r2, [pc, #104]	@ (800caf0 <TIM_OC1_SetConfig+0x114>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d007      	beq.n	800ca9a <TIM_OC1_SetConfig+0xbe>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	4a19      	ldr	r2, [pc, #100]	@ (800caf4 <TIM_OC1_SetConfig+0x118>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d003      	beq.n	800ca9a <TIM_OC1_SetConfig+0xbe>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	4a18      	ldr	r2, [pc, #96]	@ (800caf8 <TIM_OC1_SetConfig+0x11c>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d111      	bne.n	800cabe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800caa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800caa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	695b      	ldr	r3, [r3, #20]
 800caae:	693a      	ldr	r2, [r7, #16]
 800cab0:	4313      	orrs	r3, r2
 800cab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	699b      	ldr	r3, [r3, #24]
 800cab8:	693a      	ldr	r2, [r7, #16]
 800caba:	4313      	orrs	r3, r2
 800cabc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	693a      	ldr	r2, [r7, #16]
 800cac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	68fa      	ldr	r2, [r7, #12]
 800cac8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	685a      	ldr	r2, [r3, #4]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	697a      	ldr	r2, [r7, #20]
 800cad6:	621a      	str	r2, [r3, #32]
}
 800cad8:	bf00      	nop
 800cada:	371c      	adds	r7, #28
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr
 800cae4:	fffeff8f 	.word	0xfffeff8f
 800cae8:	40010000 	.word	0x40010000
 800caec:	40010400 	.word	0x40010400
 800caf0:	40014000 	.word	0x40014000
 800caf4:	40014400 	.word	0x40014400
 800caf8:	40014800 	.word	0x40014800

0800cafc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b087      	sub	sp, #28
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6a1b      	ldr	r3, [r3, #32]
 800cb0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6a1b      	ldr	r3, [r3, #32]
 800cb10:	f023 0210 	bic.w	r2, r3, #16
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	699b      	ldr	r3, [r3, #24]
 800cb22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cb24:	68fa      	ldr	r2, [r7, #12]
 800cb26:	4b34      	ldr	r3, [pc, #208]	@ (800cbf8 <TIM_OC2_SetConfig+0xfc>)
 800cb28:	4013      	ands	r3, r2
 800cb2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	021b      	lsls	r3, r3, #8
 800cb3a:	68fa      	ldr	r2, [r7, #12]
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	f023 0320 	bic.w	r3, r3, #32
 800cb46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	689b      	ldr	r3, [r3, #8]
 800cb4c:	011b      	lsls	r3, r3, #4
 800cb4e:	697a      	ldr	r2, [r7, #20]
 800cb50:	4313      	orrs	r3, r2
 800cb52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	4a29      	ldr	r2, [pc, #164]	@ (800cbfc <TIM_OC2_SetConfig+0x100>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d003      	beq.n	800cb64 <TIM_OC2_SetConfig+0x68>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4a28      	ldr	r2, [pc, #160]	@ (800cc00 <TIM_OC2_SetConfig+0x104>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d10d      	bne.n	800cb80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	68db      	ldr	r3, [r3, #12]
 800cb70:	011b      	lsls	r3, r3, #4
 800cb72:	697a      	ldr	r2, [r7, #20]
 800cb74:	4313      	orrs	r3, r2
 800cb76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	4a1e      	ldr	r2, [pc, #120]	@ (800cbfc <TIM_OC2_SetConfig+0x100>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d00f      	beq.n	800cba8 <TIM_OC2_SetConfig+0xac>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	4a1d      	ldr	r2, [pc, #116]	@ (800cc00 <TIM_OC2_SetConfig+0x104>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d00b      	beq.n	800cba8 <TIM_OC2_SetConfig+0xac>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	4a1c      	ldr	r2, [pc, #112]	@ (800cc04 <TIM_OC2_SetConfig+0x108>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d007      	beq.n	800cba8 <TIM_OC2_SetConfig+0xac>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	4a1b      	ldr	r2, [pc, #108]	@ (800cc08 <TIM_OC2_SetConfig+0x10c>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d003      	beq.n	800cba8 <TIM_OC2_SetConfig+0xac>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	4a1a      	ldr	r2, [pc, #104]	@ (800cc0c <TIM_OC2_SetConfig+0x110>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d113      	bne.n	800cbd0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cbae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cbb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	695b      	ldr	r3, [r3, #20]
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	693a      	ldr	r2, [r7, #16]
 800cbc0:	4313      	orrs	r3, r2
 800cbc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	699b      	ldr	r3, [r3, #24]
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	693a      	ldr	r2, [r7, #16]
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	693a      	ldr	r2, [r7, #16]
 800cbd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	68fa      	ldr	r2, [r7, #12]
 800cbda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	685a      	ldr	r2, [r3, #4]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	697a      	ldr	r2, [r7, #20]
 800cbe8:	621a      	str	r2, [r3, #32]
}
 800cbea:	bf00      	nop
 800cbec:	371c      	adds	r7, #28
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr
 800cbf6:	bf00      	nop
 800cbf8:	feff8fff 	.word	0xfeff8fff
 800cbfc:	40010000 	.word	0x40010000
 800cc00:	40010400 	.word	0x40010400
 800cc04:	40014000 	.word	0x40014000
 800cc08:	40014400 	.word	0x40014400
 800cc0c:	40014800 	.word	0x40014800

0800cc10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b087      	sub	sp, #28
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6a1b      	ldr	r3, [r3, #32]
 800cc1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6a1b      	ldr	r3, [r3, #32]
 800cc24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	69db      	ldr	r3, [r3, #28]
 800cc36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cc38:	68fa      	ldr	r2, [r7, #12]
 800cc3a:	4b33      	ldr	r3, [pc, #204]	@ (800cd08 <TIM_OC3_SetConfig+0xf8>)
 800cc3c:	4013      	ands	r3, r2
 800cc3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f023 0303 	bic.w	r3, r3, #3
 800cc46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	68fa      	ldr	r2, [r7, #12]
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cc58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	689b      	ldr	r3, [r3, #8]
 800cc5e:	021b      	lsls	r3, r3, #8
 800cc60:	697a      	ldr	r2, [r7, #20]
 800cc62:	4313      	orrs	r3, r2
 800cc64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	4a28      	ldr	r2, [pc, #160]	@ (800cd0c <TIM_OC3_SetConfig+0xfc>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d003      	beq.n	800cc76 <TIM_OC3_SetConfig+0x66>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	4a27      	ldr	r2, [pc, #156]	@ (800cd10 <TIM_OC3_SetConfig+0x100>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d10d      	bne.n	800cc92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cc7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	68db      	ldr	r3, [r3, #12]
 800cc82:	021b      	lsls	r3, r3, #8
 800cc84:	697a      	ldr	r2, [r7, #20]
 800cc86:	4313      	orrs	r3, r2
 800cc88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cc90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	4a1d      	ldr	r2, [pc, #116]	@ (800cd0c <TIM_OC3_SetConfig+0xfc>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d00f      	beq.n	800ccba <TIM_OC3_SetConfig+0xaa>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	4a1c      	ldr	r2, [pc, #112]	@ (800cd10 <TIM_OC3_SetConfig+0x100>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d00b      	beq.n	800ccba <TIM_OC3_SetConfig+0xaa>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	4a1b      	ldr	r2, [pc, #108]	@ (800cd14 <TIM_OC3_SetConfig+0x104>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d007      	beq.n	800ccba <TIM_OC3_SetConfig+0xaa>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	4a1a      	ldr	r2, [pc, #104]	@ (800cd18 <TIM_OC3_SetConfig+0x108>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d003      	beq.n	800ccba <TIM_OC3_SetConfig+0xaa>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	4a19      	ldr	r2, [pc, #100]	@ (800cd1c <TIM_OC3_SetConfig+0x10c>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d113      	bne.n	800cce2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ccc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ccc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	695b      	ldr	r3, [r3, #20]
 800ccce:	011b      	lsls	r3, r3, #4
 800ccd0:	693a      	ldr	r2, [r7, #16]
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	699b      	ldr	r3, [r3, #24]
 800ccda:	011b      	lsls	r3, r3, #4
 800ccdc:	693a      	ldr	r2, [r7, #16]
 800ccde:	4313      	orrs	r3, r2
 800cce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	693a      	ldr	r2, [r7, #16]
 800cce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	68fa      	ldr	r2, [r7, #12]
 800ccec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	685a      	ldr	r2, [r3, #4]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	697a      	ldr	r2, [r7, #20]
 800ccfa:	621a      	str	r2, [r3, #32]
}
 800ccfc:	bf00      	nop
 800ccfe:	371c      	adds	r7, #28
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr
 800cd08:	fffeff8f 	.word	0xfffeff8f
 800cd0c:	40010000 	.word	0x40010000
 800cd10:	40010400 	.word	0x40010400
 800cd14:	40014000 	.word	0x40014000
 800cd18:	40014400 	.word	0x40014400
 800cd1c:	40014800 	.word	0x40014800

0800cd20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b087      	sub	sp, #28
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6a1b      	ldr	r3, [r3, #32]
 800cd2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6a1b      	ldr	r3, [r3, #32]
 800cd34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	69db      	ldr	r3, [r3, #28]
 800cd46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cd48:	68fa      	ldr	r2, [r7, #12]
 800cd4a:	4b24      	ldr	r3, [pc, #144]	@ (800cddc <TIM_OC4_SetConfig+0xbc>)
 800cd4c:	4013      	ands	r3, r2
 800cd4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cd56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	021b      	lsls	r3, r3, #8
 800cd5e:	68fa      	ldr	r2, [r7, #12]
 800cd60:	4313      	orrs	r3, r2
 800cd62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cd6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	031b      	lsls	r3, r3, #12
 800cd72:	693a      	ldr	r2, [r7, #16]
 800cd74:	4313      	orrs	r3, r2
 800cd76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	4a19      	ldr	r2, [pc, #100]	@ (800cde0 <TIM_OC4_SetConfig+0xc0>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d00f      	beq.n	800cda0 <TIM_OC4_SetConfig+0x80>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	4a18      	ldr	r2, [pc, #96]	@ (800cde4 <TIM_OC4_SetConfig+0xc4>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d00b      	beq.n	800cda0 <TIM_OC4_SetConfig+0x80>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	4a17      	ldr	r2, [pc, #92]	@ (800cde8 <TIM_OC4_SetConfig+0xc8>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d007      	beq.n	800cda0 <TIM_OC4_SetConfig+0x80>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	4a16      	ldr	r2, [pc, #88]	@ (800cdec <TIM_OC4_SetConfig+0xcc>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d003      	beq.n	800cda0 <TIM_OC4_SetConfig+0x80>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	4a15      	ldr	r2, [pc, #84]	@ (800cdf0 <TIM_OC4_SetConfig+0xd0>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d109      	bne.n	800cdb4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cda6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	695b      	ldr	r3, [r3, #20]
 800cdac:	019b      	lsls	r3, r3, #6
 800cdae:	697a      	ldr	r2, [r7, #20]
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	697a      	ldr	r2, [r7, #20]
 800cdb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	68fa      	ldr	r2, [r7, #12]
 800cdbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	685a      	ldr	r2, [r3, #4]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	693a      	ldr	r2, [r7, #16]
 800cdcc:	621a      	str	r2, [r3, #32]
}
 800cdce:	bf00      	nop
 800cdd0:	371c      	adds	r7, #28
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr
 800cdda:	bf00      	nop
 800cddc:	feff8fff 	.word	0xfeff8fff
 800cde0:	40010000 	.word	0x40010000
 800cde4:	40010400 	.word	0x40010400
 800cde8:	40014000 	.word	0x40014000
 800cdec:	40014400 	.word	0x40014400
 800cdf0:	40014800 	.word	0x40014800

0800cdf4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b087      	sub	sp, #28
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6a1b      	ldr	r3, [r3, #32]
 800ce02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6a1b      	ldr	r3, [r3, #32]
 800ce08:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ce1c:	68fa      	ldr	r2, [r7, #12]
 800ce1e:	4b21      	ldr	r3, [pc, #132]	@ (800cea4 <TIM_OC5_SetConfig+0xb0>)
 800ce20:	4013      	ands	r3, r2
 800ce22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ce34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	689b      	ldr	r3, [r3, #8]
 800ce3a:	041b      	lsls	r3, r3, #16
 800ce3c:	693a      	ldr	r2, [r7, #16]
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	4a18      	ldr	r2, [pc, #96]	@ (800cea8 <TIM_OC5_SetConfig+0xb4>)
 800ce46:	4293      	cmp	r3, r2
 800ce48:	d00f      	beq.n	800ce6a <TIM_OC5_SetConfig+0x76>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	4a17      	ldr	r2, [pc, #92]	@ (800ceac <TIM_OC5_SetConfig+0xb8>)
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d00b      	beq.n	800ce6a <TIM_OC5_SetConfig+0x76>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	4a16      	ldr	r2, [pc, #88]	@ (800ceb0 <TIM_OC5_SetConfig+0xbc>)
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d007      	beq.n	800ce6a <TIM_OC5_SetConfig+0x76>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	4a15      	ldr	r2, [pc, #84]	@ (800ceb4 <TIM_OC5_SetConfig+0xc0>)
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d003      	beq.n	800ce6a <TIM_OC5_SetConfig+0x76>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	4a14      	ldr	r2, [pc, #80]	@ (800ceb8 <TIM_OC5_SetConfig+0xc4>)
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d109      	bne.n	800ce7e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ce70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	695b      	ldr	r3, [r3, #20]
 800ce76:	021b      	lsls	r3, r3, #8
 800ce78:	697a      	ldr	r2, [r7, #20]
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	697a      	ldr	r2, [r7, #20]
 800ce82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	68fa      	ldr	r2, [r7, #12]
 800ce88:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	685a      	ldr	r2, [r3, #4]
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	693a      	ldr	r2, [r7, #16]
 800ce96:	621a      	str	r2, [r3, #32]
}
 800ce98:	bf00      	nop
 800ce9a:	371c      	adds	r7, #28
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr
 800cea4:	fffeff8f 	.word	0xfffeff8f
 800cea8:	40010000 	.word	0x40010000
 800ceac:	40010400 	.word	0x40010400
 800ceb0:	40014000 	.word	0x40014000
 800ceb4:	40014400 	.word	0x40014400
 800ceb8:	40014800 	.word	0x40014800

0800cebc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b087      	sub	sp, #28
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6a1b      	ldr	r3, [r3, #32]
 800ceca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6a1b      	ldr	r3, [r3, #32]
 800ced0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cee4:	68fa      	ldr	r2, [r7, #12]
 800cee6:	4b22      	ldr	r3, [pc, #136]	@ (800cf70 <TIM_OC6_SetConfig+0xb4>)
 800cee8:	4013      	ands	r3, r2
 800ceea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	021b      	lsls	r3, r3, #8
 800cef2:	68fa      	ldr	r2, [r7, #12]
 800cef4:	4313      	orrs	r3, r2
 800cef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cefe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	689b      	ldr	r3, [r3, #8]
 800cf04:	051b      	lsls	r3, r3, #20
 800cf06:	693a      	ldr	r2, [r7, #16]
 800cf08:	4313      	orrs	r3, r2
 800cf0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	4a19      	ldr	r2, [pc, #100]	@ (800cf74 <TIM_OC6_SetConfig+0xb8>)
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d00f      	beq.n	800cf34 <TIM_OC6_SetConfig+0x78>
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	4a18      	ldr	r2, [pc, #96]	@ (800cf78 <TIM_OC6_SetConfig+0xbc>)
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d00b      	beq.n	800cf34 <TIM_OC6_SetConfig+0x78>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	4a17      	ldr	r2, [pc, #92]	@ (800cf7c <TIM_OC6_SetConfig+0xc0>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d007      	beq.n	800cf34 <TIM_OC6_SetConfig+0x78>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	4a16      	ldr	r2, [pc, #88]	@ (800cf80 <TIM_OC6_SetConfig+0xc4>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d003      	beq.n	800cf34 <TIM_OC6_SetConfig+0x78>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	4a15      	ldr	r2, [pc, #84]	@ (800cf84 <TIM_OC6_SetConfig+0xc8>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d109      	bne.n	800cf48 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cf3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	695b      	ldr	r3, [r3, #20]
 800cf40:	029b      	lsls	r3, r3, #10
 800cf42:	697a      	ldr	r2, [r7, #20]
 800cf44:	4313      	orrs	r3, r2
 800cf46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	697a      	ldr	r2, [r7, #20]
 800cf4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	68fa      	ldr	r2, [r7, #12]
 800cf52:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	685a      	ldr	r2, [r3, #4]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	693a      	ldr	r2, [r7, #16]
 800cf60:	621a      	str	r2, [r3, #32]
}
 800cf62:	bf00      	nop
 800cf64:	371c      	adds	r7, #28
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr
 800cf6e:	bf00      	nop
 800cf70:	feff8fff 	.word	0xfeff8fff
 800cf74:	40010000 	.word	0x40010000
 800cf78:	40010400 	.word	0x40010400
 800cf7c:	40014000 	.word	0x40014000
 800cf80:	40014400 	.word	0x40014400
 800cf84:	40014800 	.word	0x40014800

0800cf88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b087      	sub	sp, #28
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	60b9      	str	r1, [r7, #8]
 800cf92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	f003 031f 	and.w	r3, r3, #31
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	fa02 f303 	lsl.w	r3, r2, r3
 800cfa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	6a1a      	ldr	r2, [r3, #32]
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	43db      	mvns	r3, r3
 800cfaa:	401a      	ands	r2, r3
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	6a1a      	ldr	r2, [r3, #32]
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	f003 031f 	and.w	r3, r3, #31
 800cfba:	6879      	ldr	r1, [r7, #4]
 800cfbc:	fa01 f303 	lsl.w	r3, r1, r3
 800cfc0:	431a      	orrs	r2, r3
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	621a      	str	r2, [r3, #32]
}
 800cfc6:	bf00      	nop
 800cfc8:	371c      	adds	r7, #28
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr
	...

0800cfd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cfe4:	2b01      	cmp	r3, #1
 800cfe6:	d101      	bne.n	800cfec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cfe8:	2302      	movs	r3, #2
 800cfea:	e077      	b.n	800d0dc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2201      	movs	r2, #1
 800cff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2202      	movs	r2, #2
 800cff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	685b      	ldr	r3, [r3, #4]
 800d002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	689b      	ldr	r3, [r3, #8]
 800d00a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4a35      	ldr	r2, [pc, #212]	@ (800d0e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d012:	4293      	cmp	r3, r2
 800d014:	d004      	beq.n	800d020 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4a34      	ldr	r2, [pc, #208]	@ (800d0ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d108      	bne.n	800d032 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d026:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	4313      	orrs	r3, r2
 800d030:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d038:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	68fa      	ldr	r2, [r7, #12]
 800d040:	4313      	orrs	r3, r2
 800d042:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	68fa      	ldr	r2, [r7, #12]
 800d04a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a25      	ldr	r2, [pc, #148]	@ (800d0e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d02c      	beq.n	800d0b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d05e:	d027      	beq.n	800d0b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4a22      	ldr	r2, [pc, #136]	@ (800d0f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d022      	beq.n	800d0b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4a21      	ldr	r2, [pc, #132]	@ (800d0f4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d070:	4293      	cmp	r3, r2
 800d072:	d01d      	beq.n	800d0b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a1f      	ldr	r2, [pc, #124]	@ (800d0f8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d018      	beq.n	800d0b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	4a1a      	ldr	r2, [pc, #104]	@ (800d0ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d013      	beq.n	800d0b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4a1b      	ldr	r2, [pc, #108]	@ (800d0fc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d00e      	beq.n	800d0b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	4a1a      	ldr	r2, [pc, #104]	@ (800d100 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800d098:	4293      	cmp	r3, r2
 800d09a:	d009      	beq.n	800d0b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4a18      	ldr	r2, [pc, #96]	@ (800d104 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	d004      	beq.n	800d0b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a17      	ldr	r2, [pc, #92]	@ (800d108 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d10c      	bne.n	800d0ca <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d0b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	689b      	ldr	r3, [r3, #8]
 800d0bc:	68ba      	ldr	r2, [r7, #8]
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	68ba      	ldr	r2, [r7, #8]
 800d0c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d0da:	2300      	movs	r3, #0
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3714      	adds	r7, #20
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr
 800d0e8:	40010000 	.word	0x40010000
 800d0ec:	40010400 	.word	0x40010400
 800d0f0:	40000400 	.word	0x40000400
 800d0f4:	40000800 	.word	0x40000800
 800d0f8:	40000c00 	.word	0x40000c00
 800d0fc:	40001800 	.word	0x40001800
 800d100:	40014000 	.word	0x40014000
 800d104:	4000e000 	.word	0x4000e000
 800d108:	4000e400 	.word	0x4000e400

0800d10c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b082      	sub	sp, #8
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d101      	bne.n	800d11e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d11a:	2301      	movs	r3, #1
 800d11c:	e042      	b.n	800d1a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d124:	2b00      	cmp	r3, #0
 800d126:	d106      	bne.n	800d136 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2200      	movs	r2, #0
 800d12c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f7f5 facd 	bl	80026d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2224      	movs	r2, #36	@ 0x24
 800d13a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f022 0201 	bic.w	r2, r2, #1
 800d14c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d152:	2b00      	cmp	r3, #0
 800d154:	d002      	beq.n	800d15c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f001 fafa 	bl	800e750 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f000 fc8b 	bl	800da78 <UART_SetConfig>
 800d162:	4603      	mov	r3, r0
 800d164:	2b01      	cmp	r3, #1
 800d166:	d101      	bne.n	800d16c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d168:	2301      	movs	r3, #1
 800d16a:	e01b      	b.n	800d1a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	685a      	ldr	r2, [r3, #4]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d17a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	689a      	ldr	r2, [r3, #8]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d18a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	681a      	ldr	r2, [r3, #0]
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f042 0201 	orr.w	r2, r2, #1
 800d19a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f001 fb79 	bl	800e894 <UART_CheckIdleState>
 800d1a2:	4603      	mov	r3, r0
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3708      	adds	r7, #8
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b08a      	sub	sp, #40	@ 0x28
 800d1b0:	af02      	add	r7, sp, #8
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	603b      	str	r3, [r7, #0]
 800d1b8:	4613      	mov	r3, r2
 800d1ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1c2:	2b20      	cmp	r3, #32
 800d1c4:	d17b      	bne.n	800d2be <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d002      	beq.n	800d1d2 <HAL_UART_Transmit+0x26>
 800d1cc:	88fb      	ldrh	r3, [r7, #6]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d101      	bne.n	800d1d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	e074      	b.n	800d2c0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2200      	movs	r2, #0
 800d1da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2221      	movs	r2, #33	@ 0x21
 800d1e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d1e6:	f7f5 fc93 	bl	8002b10 <HAL_GetTick>
 800d1ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	88fa      	ldrh	r2, [r7, #6]
 800d1f0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	88fa      	ldrh	r2, [r7, #6]
 800d1f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	689b      	ldr	r3, [r3, #8]
 800d200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d204:	d108      	bne.n	800d218 <HAL_UART_Transmit+0x6c>
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	691b      	ldr	r3, [r3, #16]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d104      	bne.n	800d218 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d20e:	2300      	movs	r3, #0
 800d210:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	61bb      	str	r3, [r7, #24]
 800d216:	e003      	b.n	800d220 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d21c:	2300      	movs	r3, #0
 800d21e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d220:	e030      	b.n	800d284 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	9300      	str	r3, [sp, #0]
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	2200      	movs	r2, #0
 800d22a:	2180      	movs	r1, #128	@ 0x80
 800d22c:	68f8      	ldr	r0, [r7, #12]
 800d22e:	f001 fbdb 	bl	800e9e8 <UART_WaitOnFlagUntilTimeout>
 800d232:	4603      	mov	r3, r0
 800d234:	2b00      	cmp	r3, #0
 800d236:	d005      	beq.n	800d244 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2220      	movs	r2, #32
 800d23c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d240:	2303      	movs	r3, #3
 800d242:	e03d      	b.n	800d2c0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d10b      	bne.n	800d262 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d24a:	69bb      	ldr	r3, [r7, #24]
 800d24c:	881b      	ldrh	r3, [r3, #0]
 800d24e:	461a      	mov	r2, r3
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d258:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d25a:	69bb      	ldr	r3, [r7, #24]
 800d25c:	3302      	adds	r3, #2
 800d25e:	61bb      	str	r3, [r7, #24]
 800d260:	e007      	b.n	800d272 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d262:	69fb      	ldr	r3, [r7, #28]
 800d264:	781a      	ldrb	r2, [r3, #0]
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	3301      	adds	r3, #1
 800d270:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d278:	b29b      	uxth	r3, r3
 800d27a:	3b01      	subs	r3, #1
 800d27c:	b29a      	uxth	r2, r3
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d1c8      	bne.n	800d222 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	2200      	movs	r2, #0
 800d298:	2140      	movs	r1, #64	@ 0x40
 800d29a:	68f8      	ldr	r0, [r7, #12]
 800d29c:	f001 fba4 	bl	800e9e8 <UART_WaitOnFlagUntilTimeout>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d005      	beq.n	800d2b2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2220      	movs	r2, #32
 800d2aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d2ae:	2303      	movs	r3, #3
 800d2b0:	e006      	b.n	800d2c0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2220      	movs	r2, #32
 800d2b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	e000      	b.n	800d2c0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d2be:	2302      	movs	r3, #2
  }
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3720      	adds	r7, #32
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b0ba      	sub	sp, #232	@ 0xe8
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	69db      	ldr	r3, [r3, #28]
 800d2d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	689b      	ldr	r3, [r3, #8]
 800d2ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d2ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d2f2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d2f6:	4013      	ands	r3, r2
 800d2f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d2fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d300:	2b00      	cmp	r3, #0
 800d302:	d11b      	bne.n	800d33c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d308:	f003 0320 	and.w	r3, r3, #32
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d015      	beq.n	800d33c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d314:	f003 0320 	and.w	r3, r3, #32
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d105      	bne.n	800d328 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d31c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d324:	2b00      	cmp	r3, #0
 800d326:	d009      	beq.n	800d33c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	f000 8377 	beq.w	800da20 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	4798      	blx	r3
      }
      return;
 800d33a:	e371      	b.n	800da20 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d33c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d340:	2b00      	cmp	r3, #0
 800d342:	f000 8123 	beq.w	800d58c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d346:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d34a:	4b8d      	ldr	r3, [pc, #564]	@ (800d580 <HAL_UART_IRQHandler+0x2b8>)
 800d34c:	4013      	ands	r3, r2
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d106      	bne.n	800d360 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d352:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d356:	4b8b      	ldr	r3, [pc, #556]	@ (800d584 <HAL_UART_IRQHandler+0x2bc>)
 800d358:	4013      	ands	r3, r2
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	f000 8116 	beq.w	800d58c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d364:	f003 0301 	and.w	r3, r3, #1
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d011      	beq.n	800d390 <HAL_UART_IRQHandler+0xc8>
 800d36c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d374:	2b00      	cmp	r3, #0
 800d376:	d00b      	beq.n	800d390 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	2201      	movs	r2, #1
 800d37e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d386:	f043 0201 	orr.w	r2, r3, #1
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d394:	f003 0302 	and.w	r3, r3, #2
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d011      	beq.n	800d3c0 <HAL_UART_IRQHandler+0xf8>
 800d39c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d3a0:	f003 0301 	and.w	r3, r3, #1
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d00b      	beq.n	800d3c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	2202      	movs	r2, #2
 800d3ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3b6:	f043 0204 	orr.w	r2, r3, #4
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d3c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d3c4:	f003 0304 	and.w	r3, r3, #4
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d011      	beq.n	800d3f0 <HAL_UART_IRQHandler+0x128>
 800d3cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d3d0:	f003 0301 	and.w	r3, r3, #1
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d00b      	beq.n	800d3f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2204      	movs	r2, #4
 800d3de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3e6:	f043 0202 	orr.w	r2, r3, #2
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d3f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d3f4:	f003 0308 	and.w	r3, r3, #8
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d017      	beq.n	800d42c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d3fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d400:	f003 0320 	and.w	r3, r3, #32
 800d404:	2b00      	cmp	r3, #0
 800d406:	d105      	bne.n	800d414 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d408:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d40c:	4b5c      	ldr	r3, [pc, #368]	@ (800d580 <HAL_UART_IRQHandler+0x2b8>)
 800d40e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d410:	2b00      	cmp	r3, #0
 800d412:	d00b      	beq.n	800d42c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2208      	movs	r2, #8
 800d41a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d422:	f043 0208 	orr.w	r2, r3, #8
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d42c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d430:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d434:	2b00      	cmp	r3, #0
 800d436:	d012      	beq.n	800d45e <HAL_UART_IRQHandler+0x196>
 800d438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d43c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d440:	2b00      	cmp	r3, #0
 800d442:	d00c      	beq.n	800d45e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d44c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d454:	f043 0220 	orr.w	r2, r3, #32
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d464:	2b00      	cmp	r3, #0
 800d466:	f000 82dd 	beq.w	800da24 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d46a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d46e:	f003 0320 	and.w	r3, r3, #32
 800d472:	2b00      	cmp	r3, #0
 800d474:	d013      	beq.n	800d49e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d47a:	f003 0320 	and.w	r3, r3, #32
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d105      	bne.n	800d48e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d007      	beq.n	800d49e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d492:	2b00      	cmp	r3, #0
 800d494:	d003      	beq.n	800d49e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	689b      	ldr	r3, [r3, #8]
 800d4ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4b2:	2b40      	cmp	r3, #64	@ 0x40
 800d4b4:	d005      	beq.n	800d4c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d4b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d4ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d054      	beq.n	800d56c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f001 fc20 	bl	800ed08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	689b      	ldr	r3, [r3, #8]
 800d4ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4d2:	2b40      	cmp	r3, #64	@ 0x40
 800d4d4:	d146      	bne.n	800d564 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	3308      	adds	r3, #8
 800d4dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d4e4:	e853 3f00 	ldrex	r3, [r3]
 800d4e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d4ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d4f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d4f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	3308      	adds	r3, #8
 800d4fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d502:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d506:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d50a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d50e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d512:	e841 2300 	strex	r3, r2, [r1]
 800d516:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d51a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d1d9      	bne.n	800d4d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d017      	beq.n	800d55c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d532:	4a15      	ldr	r2, [pc, #84]	@ (800d588 <HAL_UART_IRQHandler+0x2c0>)
 800d534:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d53c:	4618      	mov	r0, r3
 800d53e:	f7f8 fdc5 	bl	80060cc <HAL_DMA_Abort_IT>
 800d542:	4603      	mov	r3, r0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d019      	beq.n	800d57c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d54e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d556:	4610      	mov	r0, r2
 800d558:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d55a:	e00f      	b.n	800d57c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f000 fa81 	bl	800da64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d562:	e00b      	b.n	800d57c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 fa7d 	bl	800da64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d56a:	e007      	b.n	800d57c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f000 fa79 	bl	800da64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2200      	movs	r2, #0
 800d576:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d57a:	e253      	b.n	800da24 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d57c:	bf00      	nop
    return;
 800d57e:	e251      	b.n	800da24 <HAL_UART_IRQHandler+0x75c>
 800d580:	10000001 	.word	0x10000001
 800d584:	04000120 	.word	0x04000120
 800d588:	0800edd5 	.word	0x0800edd5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d590:	2b01      	cmp	r3, #1
 800d592:	f040 81e7 	bne.w	800d964 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d59a:	f003 0310 	and.w	r3, r3, #16
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	f000 81e0 	beq.w	800d964 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d5a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d5a8:	f003 0310 	and.w	r3, r3, #16
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	f000 81d9 	beq.w	800d964 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	2210      	movs	r2, #16
 800d5b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	689b      	ldr	r3, [r3, #8]
 800d5c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5c4:	2b40      	cmp	r3, #64	@ 0x40
 800d5c6:	f040 8151 	bne.w	800d86c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	4a96      	ldr	r2, [pc, #600]	@ (800d82c <HAL_UART_IRQHandler+0x564>)
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	d068      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a93      	ldr	r2, [pc, #588]	@ (800d830 <HAL_UART_IRQHandler+0x568>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d061      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	4a91      	ldr	r2, [pc, #580]	@ (800d834 <HAL_UART_IRQHandler+0x56c>)
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d05a      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4a8e      	ldr	r2, [pc, #568]	@ (800d838 <HAL_UART_IRQHandler+0x570>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d053      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4a8c      	ldr	r2, [pc, #560]	@ (800d83c <HAL_UART_IRQHandler+0x574>)
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d04c      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	4a89      	ldr	r2, [pc, #548]	@ (800d840 <HAL_UART_IRQHandler+0x578>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d045      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a87      	ldr	r2, [pc, #540]	@ (800d844 <HAL_UART_IRQHandler+0x57c>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d03e      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4a84      	ldr	r2, [pc, #528]	@ (800d848 <HAL_UART_IRQHandler+0x580>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d037      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	4a82      	ldr	r2, [pc, #520]	@ (800d84c <HAL_UART_IRQHandler+0x584>)
 800d644:	4293      	cmp	r3, r2
 800d646:	d030      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	4a7f      	ldr	r2, [pc, #508]	@ (800d850 <HAL_UART_IRQHandler+0x588>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d029      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	4a7d      	ldr	r2, [pc, #500]	@ (800d854 <HAL_UART_IRQHandler+0x58c>)
 800d660:	4293      	cmp	r3, r2
 800d662:	d022      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4a7a      	ldr	r2, [pc, #488]	@ (800d858 <HAL_UART_IRQHandler+0x590>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d01b      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4a78      	ldr	r2, [pc, #480]	@ (800d85c <HAL_UART_IRQHandler+0x594>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d014      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4a75      	ldr	r2, [pc, #468]	@ (800d860 <HAL_UART_IRQHandler+0x598>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d00d      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	4a73      	ldr	r2, [pc, #460]	@ (800d864 <HAL_UART_IRQHandler+0x59c>)
 800d698:	4293      	cmp	r3, r2
 800d69a:	d006      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4a70      	ldr	r2, [pc, #448]	@ (800d868 <HAL_UART_IRQHandler+0x5a0>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d106      	bne.n	800d6b8 <HAL_UART_IRQHandler+0x3f0>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	e005      	b.n	800d6c4 <HAL_UART_IRQHandler+0x3fc>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	b29b      	uxth	r3, r3
 800d6c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d6c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	f000 81ab 	beq.w	800da28 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d6d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	f080 81a3 	bcs.w	800da28 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d6e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6f2:	69db      	ldr	r3, [r3, #28]
 800d6f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d6f8:	f000 8087 	beq.w	800d80a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d704:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d708:	e853 3f00 	ldrex	r3, [r3]
 800d70c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d710:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d714:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d718:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	461a      	mov	r2, r3
 800d722:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d726:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d72a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d72e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d732:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d736:	e841 2300 	strex	r3, r2, [r1]
 800d73a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d73e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d742:	2b00      	cmp	r3, #0
 800d744:	d1da      	bne.n	800d6fc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	3308      	adds	r3, #8
 800d74c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d74e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d750:	e853 3f00 	ldrex	r3, [r3]
 800d754:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d756:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d758:	f023 0301 	bic.w	r3, r3, #1
 800d75c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	3308      	adds	r3, #8
 800d766:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d76a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d76e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d770:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d772:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d776:	e841 2300 	strex	r3, r2, [r1]
 800d77a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d77c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d1e1      	bne.n	800d746 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	3308      	adds	r3, #8
 800d788:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d78a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d78c:	e853 3f00 	ldrex	r3, [r3]
 800d790:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d794:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d798:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	3308      	adds	r3, #8
 800d7a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d7a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d7a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d7ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d7ae:	e841 2300 	strex	r3, r2, [r1]
 800d7b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d7b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d1e3      	bne.n	800d782 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2220      	movs	r2, #32
 800d7be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7d0:	e853 3f00 	ldrex	r3, [r3]
 800d7d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d7d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7d8:	f023 0310 	bic.w	r3, r3, #16
 800d7dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	461a      	mov	r2, r3
 800d7e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d7ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d7ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d7f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d7f2:	e841 2300 	strex	r3, r2, [r1]
 800d7f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d7f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d1e4      	bne.n	800d7c8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d804:	4618      	mov	r0, r3
 800d806:	f7f8 f943 	bl	8005a90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2202      	movs	r2, #2
 800d80e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	1ad3      	subs	r3, r2, r3
 800d820:	b29b      	uxth	r3, r3
 800d822:	4619      	mov	r1, r3
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f7f3 fd0b 	bl	8001240 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d82a:	e0fd      	b.n	800da28 <HAL_UART_IRQHandler+0x760>
 800d82c:	40020010 	.word	0x40020010
 800d830:	40020028 	.word	0x40020028
 800d834:	40020040 	.word	0x40020040
 800d838:	40020058 	.word	0x40020058
 800d83c:	40020070 	.word	0x40020070
 800d840:	40020088 	.word	0x40020088
 800d844:	400200a0 	.word	0x400200a0
 800d848:	400200b8 	.word	0x400200b8
 800d84c:	40020410 	.word	0x40020410
 800d850:	40020428 	.word	0x40020428
 800d854:	40020440 	.word	0x40020440
 800d858:	40020458 	.word	0x40020458
 800d85c:	40020470 	.word	0x40020470
 800d860:	40020488 	.word	0x40020488
 800d864:	400204a0 	.word	0x400204a0
 800d868:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d878:	b29b      	uxth	r3, r3
 800d87a:	1ad3      	subs	r3, r2, r3
 800d87c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d886:	b29b      	uxth	r3, r3
 800d888:	2b00      	cmp	r3, #0
 800d88a:	f000 80cf 	beq.w	800da2c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d88e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d892:	2b00      	cmp	r3, #0
 800d894:	f000 80ca 	beq.w	800da2c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8a0:	e853 3f00 	ldrex	r3, [r3]
 800d8a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d8a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d8ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d8ba:	647b      	str	r3, [r7, #68]	@ 0x44
 800d8bc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d8c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d8c2:	e841 2300 	strex	r3, r2, [r1]
 800d8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d8c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d1e4      	bne.n	800d898 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	3308      	adds	r3, #8
 800d8d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d8:	e853 3f00 	ldrex	r3, [r3]
 800d8dc:	623b      	str	r3, [r7, #32]
   return(result);
 800d8de:	6a3a      	ldr	r2, [r7, #32]
 800d8e0:	4b55      	ldr	r3, [pc, #340]	@ (800da38 <HAL_UART_IRQHandler+0x770>)
 800d8e2:	4013      	ands	r3, r2
 800d8e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	3308      	adds	r3, #8
 800d8ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d8f2:	633a      	str	r2, [r7, #48]	@ 0x30
 800d8f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d8f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8fa:	e841 2300 	strex	r3, r2, [r1]
 800d8fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d902:	2b00      	cmp	r3, #0
 800d904:	d1e3      	bne.n	800d8ce <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2220      	movs	r2, #32
 800d90a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2200      	movs	r2, #0
 800d912:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2200      	movs	r2, #0
 800d918:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	e853 3f00 	ldrex	r3, [r3]
 800d926:	60fb      	str	r3, [r7, #12]
   return(result);
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f023 0310 	bic.w	r3, r3, #16
 800d92e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	461a      	mov	r2, r3
 800d938:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d93c:	61fb      	str	r3, [r7, #28]
 800d93e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d940:	69b9      	ldr	r1, [r7, #24]
 800d942:	69fa      	ldr	r2, [r7, #28]
 800d944:	e841 2300 	strex	r3, r2, [r1]
 800d948:	617b      	str	r3, [r7, #20]
   return(result);
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d1e4      	bne.n	800d91a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2202      	movs	r2, #2
 800d954:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d956:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d95a:	4619      	mov	r1, r3
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f7f3 fc6f 	bl	8001240 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d962:	e063      	b.n	800da2c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d968:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00e      	beq.n	800d98e <HAL_UART_IRQHandler+0x6c6>
 800d970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d974:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d008      	beq.n	800d98e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d984:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f001 ff82 	bl	800f890 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d98c:	e051      	b.n	800da32 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d98e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d996:	2b00      	cmp	r3, #0
 800d998:	d014      	beq.n	800d9c4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d99a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d99e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d105      	bne.n	800d9b2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d9a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d9aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d008      	beq.n	800d9c4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d03a      	beq.n	800da30 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	4798      	blx	r3
    }
    return;
 800d9c2:	e035      	b.n	800da30 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d9c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d009      	beq.n	800d9e4 <HAL_UART_IRQHandler+0x71c>
 800d9d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d9d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d003      	beq.n	800d9e4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f001 fa0f 	bl	800ee00 <UART_EndTransmit_IT>
    return;
 800d9e2:	e026      	b.n	800da32 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d9e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d009      	beq.n	800da04 <HAL_UART_IRQHandler+0x73c>
 800d9f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d9f4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d003      	beq.n	800da04 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f001 ff5b 	bl	800f8b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800da02:	e016      	b.n	800da32 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800da04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d010      	beq.n	800da32 <HAL_UART_IRQHandler+0x76a>
 800da10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da14:	2b00      	cmp	r3, #0
 800da16:	da0c      	bge.n	800da32 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f001 ff43 	bl	800f8a4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800da1e:	e008      	b.n	800da32 <HAL_UART_IRQHandler+0x76a>
      return;
 800da20:	bf00      	nop
 800da22:	e006      	b.n	800da32 <HAL_UART_IRQHandler+0x76a>
    return;
 800da24:	bf00      	nop
 800da26:	e004      	b.n	800da32 <HAL_UART_IRQHandler+0x76a>
      return;
 800da28:	bf00      	nop
 800da2a:	e002      	b.n	800da32 <HAL_UART_IRQHandler+0x76a>
      return;
 800da2c:	bf00      	nop
 800da2e:	e000      	b.n	800da32 <HAL_UART_IRQHandler+0x76a>
    return;
 800da30:	bf00      	nop
  }
}
 800da32:	37e8      	adds	r7, #232	@ 0xe8
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}
 800da38:	effffffe 	.word	0xeffffffe

0800da3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b083      	sub	sp, #12
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800da44:	bf00      	nop
 800da46:	370c      	adds	r7, #12
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr

0800da50 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800da50:	b480      	push	{r7}
 800da52:	b083      	sub	sp, #12
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800da58:	bf00      	nop
 800da5a:	370c      	adds	r7, #12
 800da5c:	46bd      	mov	sp, r7
 800da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da62:	4770      	bx	lr

0800da64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800da64:	b480      	push	{r7}
 800da66:	b083      	sub	sp, #12
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800da6c:	bf00      	nop
 800da6e:	370c      	adds	r7, #12
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr

0800da78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800da78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800da7c:	b092      	sub	sp, #72	@ 0x48
 800da7e:	af00      	add	r7, sp, #0
 800da80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800da82:	2300      	movs	r3, #0
 800da84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	689a      	ldr	r2, [r3, #8]
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	691b      	ldr	r3, [r3, #16]
 800da90:	431a      	orrs	r2, r3
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	695b      	ldr	r3, [r3, #20]
 800da96:	431a      	orrs	r2, r3
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	69db      	ldr	r3, [r3, #28]
 800da9c:	4313      	orrs	r3, r2
 800da9e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	681a      	ldr	r2, [r3, #0]
 800daa6:	4bbe      	ldr	r3, [pc, #760]	@ (800dda0 <UART_SetConfig+0x328>)
 800daa8:	4013      	ands	r3, r2
 800daaa:	697a      	ldr	r2, [r7, #20]
 800daac:	6812      	ldr	r2, [r2, #0]
 800daae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dab0:	430b      	orrs	r3, r1
 800dab2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	68da      	ldr	r2, [r3, #12]
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	430a      	orrs	r2, r1
 800dac8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	699b      	ldr	r3, [r3, #24]
 800dace:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4ab3      	ldr	r2, [pc, #716]	@ (800dda4 <UART_SetConfig+0x32c>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d004      	beq.n	800dae4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	6a1b      	ldr	r3, [r3, #32]
 800dade:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dae0:	4313      	orrs	r3, r2
 800dae2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	689a      	ldr	r2, [r3, #8]
 800daea:	4baf      	ldr	r3, [pc, #700]	@ (800dda8 <UART_SetConfig+0x330>)
 800daec:	4013      	ands	r3, r2
 800daee:	697a      	ldr	r2, [r7, #20]
 800daf0:	6812      	ldr	r2, [r2, #0]
 800daf2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800daf4:	430b      	orrs	r3, r1
 800daf6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dafe:	f023 010f 	bic.w	r1, r3, #15
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	430a      	orrs	r2, r1
 800db0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	4aa6      	ldr	r2, [pc, #664]	@ (800ddac <UART_SetConfig+0x334>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d177      	bne.n	800dc08 <UART_SetConfig+0x190>
 800db18:	4ba5      	ldr	r3, [pc, #660]	@ (800ddb0 <UART_SetConfig+0x338>)
 800db1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800db20:	2b28      	cmp	r3, #40	@ 0x28
 800db22:	d86d      	bhi.n	800dc00 <UART_SetConfig+0x188>
 800db24:	a201      	add	r2, pc, #4	@ (adr r2, 800db2c <UART_SetConfig+0xb4>)
 800db26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db2a:	bf00      	nop
 800db2c:	0800dbd1 	.word	0x0800dbd1
 800db30:	0800dc01 	.word	0x0800dc01
 800db34:	0800dc01 	.word	0x0800dc01
 800db38:	0800dc01 	.word	0x0800dc01
 800db3c:	0800dc01 	.word	0x0800dc01
 800db40:	0800dc01 	.word	0x0800dc01
 800db44:	0800dc01 	.word	0x0800dc01
 800db48:	0800dc01 	.word	0x0800dc01
 800db4c:	0800dbd9 	.word	0x0800dbd9
 800db50:	0800dc01 	.word	0x0800dc01
 800db54:	0800dc01 	.word	0x0800dc01
 800db58:	0800dc01 	.word	0x0800dc01
 800db5c:	0800dc01 	.word	0x0800dc01
 800db60:	0800dc01 	.word	0x0800dc01
 800db64:	0800dc01 	.word	0x0800dc01
 800db68:	0800dc01 	.word	0x0800dc01
 800db6c:	0800dbe1 	.word	0x0800dbe1
 800db70:	0800dc01 	.word	0x0800dc01
 800db74:	0800dc01 	.word	0x0800dc01
 800db78:	0800dc01 	.word	0x0800dc01
 800db7c:	0800dc01 	.word	0x0800dc01
 800db80:	0800dc01 	.word	0x0800dc01
 800db84:	0800dc01 	.word	0x0800dc01
 800db88:	0800dc01 	.word	0x0800dc01
 800db8c:	0800dbe9 	.word	0x0800dbe9
 800db90:	0800dc01 	.word	0x0800dc01
 800db94:	0800dc01 	.word	0x0800dc01
 800db98:	0800dc01 	.word	0x0800dc01
 800db9c:	0800dc01 	.word	0x0800dc01
 800dba0:	0800dc01 	.word	0x0800dc01
 800dba4:	0800dc01 	.word	0x0800dc01
 800dba8:	0800dc01 	.word	0x0800dc01
 800dbac:	0800dbf1 	.word	0x0800dbf1
 800dbb0:	0800dc01 	.word	0x0800dc01
 800dbb4:	0800dc01 	.word	0x0800dc01
 800dbb8:	0800dc01 	.word	0x0800dc01
 800dbbc:	0800dc01 	.word	0x0800dc01
 800dbc0:	0800dc01 	.word	0x0800dc01
 800dbc4:	0800dc01 	.word	0x0800dc01
 800dbc8:	0800dc01 	.word	0x0800dc01
 800dbcc:	0800dbf9 	.word	0x0800dbf9
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbd6:	e326      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dbd8:	2304      	movs	r3, #4
 800dbda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbde:	e322      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dbe0:	2308      	movs	r3, #8
 800dbe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbe6:	e31e      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dbe8:	2310      	movs	r3, #16
 800dbea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbee:	e31a      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dbf0:	2320      	movs	r3, #32
 800dbf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbf6:	e316      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dbf8:	2340      	movs	r3, #64	@ 0x40
 800dbfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbfe:	e312      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dc00:	2380      	movs	r3, #128	@ 0x80
 800dc02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc06:	e30e      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	4a69      	ldr	r2, [pc, #420]	@ (800ddb4 <UART_SetConfig+0x33c>)
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d130      	bne.n	800dc74 <UART_SetConfig+0x1fc>
 800dc12:	4b67      	ldr	r3, [pc, #412]	@ (800ddb0 <UART_SetConfig+0x338>)
 800dc14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc16:	f003 0307 	and.w	r3, r3, #7
 800dc1a:	2b05      	cmp	r3, #5
 800dc1c:	d826      	bhi.n	800dc6c <UART_SetConfig+0x1f4>
 800dc1e:	a201      	add	r2, pc, #4	@ (adr r2, 800dc24 <UART_SetConfig+0x1ac>)
 800dc20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc24:	0800dc3d 	.word	0x0800dc3d
 800dc28:	0800dc45 	.word	0x0800dc45
 800dc2c:	0800dc4d 	.word	0x0800dc4d
 800dc30:	0800dc55 	.word	0x0800dc55
 800dc34:	0800dc5d 	.word	0x0800dc5d
 800dc38:	0800dc65 	.word	0x0800dc65
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc42:	e2f0      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dc44:	2304      	movs	r3, #4
 800dc46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc4a:	e2ec      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dc4c:	2308      	movs	r3, #8
 800dc4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc52:	e2e8      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dc54:	2310      	movs	r3, #16
 800dc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc5a:	e2e4      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dc5c:	2320      	movs	r3, #32
 800dc5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc62:	e2e0      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dc64:	2340      	movs	r3, #64	@ 0x40
 800dc66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc6a:	e2dc      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dc6c:	2380      	movs	r3, #128	@ 0x80
 800dc6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc72:	e2d8      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4a4f      	ldr	r2, [pc, #316]	@ (800ddb8 <UART_SetConfig+0x340>)
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d130      	bne.n	800dce0 <UART_SetConfig+0x268>
 800dc7e:	4b4c      	ldr	r3, [pc, #304]	@ (800ddb0 <UART_SetConfig+0x338>)
 800dc80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc82:	f003 0307 	and.w	r3, r3, #7
 800dc86:	2b05      	cmp	r3, #5
 800dc88:	d826      	bhi.n	800dcd8 <UART_SetConfig+0x260>
 800dc8a:	a201      	add	r2, pc, #4	@ (adr r2, 800dc90 <UART_SetConfig+0x218>)
 800dc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc90:	0800dca9 	.word	0x0800dca9
 800dc94:	0800dcb1 	.word	0x0800dcb1
 800dc98:	0800dcb9 	.word	0x0800dcb9
 800dc9c:	0800dcc1 	.word	0x0800dcc1
 800dca0:	0800dcc9 	.word	0x0800dcc9
 800dca4:	0800dcd1 	.word	0x0800dcd1
 800dca8:	2300      	movs	r3, #0
 800dcaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcae:	e2ba      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dcb0:	2304      	movs	r3, #4
 800dcb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcb6:	e2b6      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dcb8:	2308      	movs	r3, #8
 800dcba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcbe:	e2b2      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dcc0:	2310      	movs	r3, #16
 800dcc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcc6:	e2ae      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dcc8:	2320      	movs	r3, #32
 800dcca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcce:	e2aa      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dcd0:	2340      	movs	r3, #64	@ 0x40
 800dcd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcd6:	e2a6      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dcd8:	2380      	movs	r3, #128	@ 0x80
 800dcda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcde:	e2a2      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	4a35      	ldr	r2, [pc, #212]	@ (800ddbc <UART_SetConfig+0x344>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d130      	bne.n	800dd4c <UART_SetConfig+0x2d4>
 800dcea:	4b31      	ldr	r3, [pc, #196]	@ (800ddb0 <UART_SetConfig+0x338>)
 800dcec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcee:	f003 0307 	and.w	r3, r3, #7
 800dcf2:	2b05      	cmp	r3, #5
 800dcf4:	d826      	bhi.n	800dd44 <UART_SetConfig+0x2cc>
 800dcf6:	a201      	add	r2, pc, #4	@ (adr r2, 800dcfc <UART_SetConfig+0x284>)
 800dcf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcfc:	0800dd15 	.word	0x0800dd15
 800dd00:	0800dd1d 	.word	0x0800dd1d
 800dd04:	0800dd25 	.word	0x0800dd25
 800dd08:	0800dd2d 	.word	0x0800dd2d
 800dd0c:	0800dd35 	.word	0x0800dd35
 800dd10:	0800dd3d 	.word	0x0800dd3d
 800dd14:	2300      	movs	r3, #0
 800dd16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd1a:	e284      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dd1c:	2304      	movs	r3, #4
 800dd1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd22:	e280      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dd24:	2308      	movs	r3, #8
 800dd26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd2a:	e27c      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dd2c:	2310      	movs	r3, #16
 800dd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd32:	e278      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dd34:	2320      	movs	r3, #32
 800dd36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd3a:	e274      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dd3c:	2340      	movs	r3, #64	@ 0x40
 800dd3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd42:	e270      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dd44:	2380      	movs	r3, #128	@ 0x80
 800dd46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd4a:	e26c      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a1b      	ldr	r2, [pc, #108]	@ (800ddc0 <UART_SetConfig+0x348>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d142      	bne.n	800dddc <UART_SetConfig+0x364>
 800dd56:	4b16      	ldr	r3, [pc, #88]	@ (800ddb0 <UART_SetConfig+0x338>)
 800dd58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd5a:	f003 0307 	and.w	r3, r3, #7
 800dd5e:	2b05      	cmp	r3, #5
 800dd60:	d838      	bhi.n	800ddd4 <UART_SetConfig+0x35c>
 800dd62:	a201      	add	r2, pc, #4	@ (adr r2, 800dd68 <UART_SetConfig+0x2f0>)
 800dd64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd68:	0800dd81 	.word	0x0800dd81
 800dd6c:	0800dd89 	.word	0x0800dd89
 800dd70:	0800dd91 	.word	0x0800dd91
 800dd74:	0800dd99 	.word	0x0800dd99
 800dd78:	0800ddc5 	.word	0x0800ddc5
 800dd7c:	0800ddcd 	.word	0x0800ddcd
 800dd80:	2300      	movs	r3, #0
 800dd82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd86:	e24e      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dd88:	2304      	movs	r3, #4
 800dd8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd8e:	e24a      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dd90:	2308      	movs	r3, #8
 800dd92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd96:	e246      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dd98:	2310      	movs	r3, #16
 800dd9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd9e:	e242      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dda0:	cfff69f3 	.word	0xcfff69f3
 800dda4:	58000c00 	.word	0x58000c00
 800dda8:	11fff4ff 	.word	0x11fff4ff
 800ddac:	40011000 	.word	0x40011000
 800ddb0:	58024400 	.word	0x58024400
 800ddb4:	40004400 	.word	0x40004400
 800ddb8:	40004800 	.word	0x40004800
 800ddbc:	40004c00 	.word	0x40004c00
 800ddc0:	40005000 	.word	0x40005000
 800ddc4:	2320      	movs	r3, #32
 800ddc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddca:	e22c      	b.n	800e226 <UART_SetConfig+0x7ae>
 800ddcc:	2340      	movs	r3, #64	@ 0x40
 800ddce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddd2:	e228      	b.n	800e226 <UART_SetConfig+0x7ae>
 800ddd4:	2380      	movs	r3, #128	@ 0x80
 800ddd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddda:	e224      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	4ab1      	ldr	r2, [pc, #708]	@ (800e0a8 <UART_SetConfig+0x630>)
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d176      	bne.n	800ded4 <UART_SetConfig+0x45c>
 800dde6:	4bb1      	ldr	r3, [pc, #708]	@ (800e0ac <UART_SetConfig+0x634>)
 800dde8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ddee:	2b28      	cmp	r3, #40	@ 0x28
 800ddf0:	d86c      	bhi.n	800decc <UART_SetConfig+0x454>
 800ddf2:	a201      	add	r2, pc, #4	@ (adr r2, 800ddf8 <UART_SetConfig+0x380>)
 800ddf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddf8:	0800de9d 	.word	0x0800de9d
 800ddfc:	0800decd 	.word	0x0800decd
 800de00:	0800decd 	.word	0x0800decd
 800de04:	0800decd 	.word	0x0800decd
 800de08:	0800decd 	.word	0x0800decd
 800de0c:	0800decd 	.word	0x0800decd
 800de10:	0800decd 	.word	0x0800decd
 800de14:	0800decd 	.word	0x0800decd
 800de18:	0800dea5 	.word	0x0800dea5
 800de1c:	0800decd 	.word	0x0800decd
 800de20:	0800decd 	.word	0x0800decd
 800de24:	0800decd 	.word	0x0800decd
 800de28:	0800decd 	.word	0x0800decd
 800de2c:	0800decd 	.word	0x0800decd
 800de30:	0800decd 	.word	0x0800decd
 800de34:	0800decd 	.word	0x0800decd
 800de38:	0800dead 	.word	0x0800dead
 800de3c:	0800decd 	.word	0x0800decd
 800de40:	0800decd 	.word	0x0800decd
 800de44:	0800decd 	.word	0x0800decd
 800de48:	0800decd 	.word	0x0800decd
 800de4c:	0800decd 	.word	0x0800decd
 800de50:	0800decd 	.word	0x0800decd
 800de54:	0800decd 	.word	0x0800decd
 800de58:	0800deb5 	.word	0x0800deb5
 800de5c:	0800decd 	.word	0x0800decd
 800de60:	0800decd 	.word	0x0800decd
 800de64:	0800decd 	.word	0x0800decd
 800de68:	0800decd 	.word	0x0800decd
 800de6c:	0800decd 	.word	0x0800decd
 800de70:	0800decd 	.word	0x0800decd
 800de74:	0800decd 	.word	0x0800decd
 800de78:	0800debd 	.word	0x0800debd
 800de7c:	0800decd 	.word	0x0800decd
 800de80:	0800decd 	.word	0x0800decd
 800de84:	0800decd 	.word	0x0800decd
 800de88:	0800decd 	.word	0x0800decd
 800de8c:	0800decd 	.word	0x0800decd
 800de90:	0800decd 	.word	0x0800decd
 800de94:	0800decd 	.word	0x0800decd
 800de98:	0800dec5 	.word	0x0800dec5
 800de9c:	2301      	movs	r3, #1
 800de9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dea2:	e1c0      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dea4:	2304      	movs	r3, #4
 800dea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deaa:	e1bc      	b.n	800e226 <UART_SetConfig+0x7ae>
 800deac:	2308      	movs	r3, #8
 800deae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deb2:	e1b8      	b.n	800e226 <UART_SetConfig+0x7ae>
 800deb4:	2310      	movs	r3, #16
 800deb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deba:	e1b4      	b.n	800e226 <UART_SetConfig+0x7ae>
 800debc:	2320      	movs	r3, #32
 800debe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dec2:	e1b0      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dec4:	2340      	movs	r3, #64	@ 0x40
 800dec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deca:	e1ac      	b.n	800e226 <UART_SetConfig+0x7ae>
 800decc:	2380      	movs	r3, #128	@ 0x80
 800dece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ded2:	e1a8      	b.n	800e226 <UART_SetConfig+0x7ae>
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4a75      	ldr	r2, [pc, #468]	@ (800e0b0 <UART_SetConfig+0x638>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d130      	bne.n	800df40 <UART_SetConfig+0x4c8>
 800dede:	4b73      	ldr	r3, [pc, #460]	@ (800e0ac <UART_SetConfig+0x634>)
 800dee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dee2:	f003 0307 	and.w	r3, r3, #7
 800dee6:	2b05      	cmp	r3, #5
 800dee8:	d826      	bhi.n	800df38 <UART_SetConfig+0x4c0>
 800deea:	a201      	add	r2, pc, #4	@ (adr r2, 800def0 <UART_SetConfig+0x478>)
 800deec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800def0:	0800df09 	.word	0x0800df09
 800def4:	0800df11 	.word	0x0800df11
 800def8:	0800df19 	.word	0x0800df19
 800defc:	0800df21 	.word	0x0800df21
 800df00:	0800df29 	.word	0x0800df29
 800df04:	0800df31 	.word	0x0800df31
 800df08:	2300      	movs	r3, #0
 800df0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df0e:	e18a      	b.n	800e226 <UART_SetConfig+0x7ae>
 800df10:	2304      	movs	r3, #4
 800df12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df16:	e186      	b.n	800e226 <UART_SetConfig+0x7ae>
 800df18:	2308      	movs	r3, #8
 800df1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df1e:	e182      	b.n	800e226 <UART_SetConfig+0x7ae>
 800df20:	2310      	movs	r3, #16
 800df22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df26:	e17e      	b.n	800e226 <UART_SetConfig+0x7ae>
 800df28:	2320      	movs	r3, #32
 800df2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df2e:	e17a      	b.n	800e226 <UART_SetConfig+0x7ae>
 800df30:	2340      	movs	r3, #64	@ 0x40
 800df32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df36:	e176      	b.n	800e226 <UART_SetConfig+0x7ae>
 800df38:	2380      	movs	r3, #128	@ 0x80
 800df3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df3e:	e172      	b.n	800e226 <UART_SetConfig+0x7ae>
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	4a5b      	ldr	r2, [pc, #364]	@ (800e0b4 <UART_SetConfig+0x63c>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d130      	bne.n	800dfac <UART_SetConfig+0x534>
 800df4a:	4b58      	ldr	r3, [pc, #352]	@ (800e0ac <UART_SetConfig+0x634>)
 800df4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df4e:	f003 0307 	and.w	r3, r3, #7
 800df52:	2b05      	cmp	r3, #5
 800df54:	d826      	bhi.n	800dfa4 <UART_SetConfig+0x52c>
 800df56:	a201      	add	r2, pc, #4	@ (adr r2, 800df5c <UART_SetConfig+0x4e4>)
 800df58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df5c:	0800df75 	.word	0x0800df75
 800df60:	0800df7d 	.word	0x0800df7d
 800df64:	0800df85 	.word	0x0800df85
 800df68:	0800df8d 	.word	0x0800df8d
 800df6c:	0800df95 	.word	0x0800df95
 800df70:	0800df9d 	.word	0x0800df9d
 800df74:	2300      	movs	r3, #0
 800df76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df7a:	e154      	b.n	800e226 <UART_SetConfig+0x7ae>
 800df7c:	2304      	movs	r3, #4
 800df7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df82:	e150      	b.n	800e226 <UART_SetConfig+0x7ae>
 800df84:	2308      	movs	r3, #8
 800df86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df8a:	e14c      	b.n	800e226 <UART_SetConfig+0x7ae>
 800df8c:	2310      	movs	r3, #16
 800df8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df92:	e148      	b.n	800e226 <UART_SetConfig+0x7ae>
 800df94:	2320      	movs	r3, #32
 800df96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df9a:	e144      	b.n	800e226 <UART_SetConfig+0x7ae>
 800df9c:	2340      	movs	r3, #64	@ 0x40
 800df9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfa2:	e140      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dfa4:	2380      	movs	r3, #128	@ 0x80
 800dfa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfaa:	e13c      	b.n	800e226 <UART_SetConfig+0x7ae>
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	4a41      	ldr	r2, [pc, #260]	@ (800e0b8 <UART_SetConfig+0x640>)
 800dfb2:	4293      	cmp	r3, r2
 800dfb4:	f040 8082 	bne.w	800e0bc <UART_SetConfig+0x644>
 800dfb8:	4b3c      	ldr	r3, [pc, #240]	@ (800e0ac <UART_SetConfig+0x634>)
 800dfba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dfbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dfc0:	2b28      	cmp	r3, #40	@ 0x28
 800dfc2:	d86d      	bhi.n	800e0a0 <UART_SetConfig+0x628>
 800dfc4:	a201      	add	r2, pc, #4	@ (adr r2, 800dfcc <UART_SetConfig+0x554>)
 800dfc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfca:	bf00      	nop
 800dfcc:	0800e071 	.word	0x0800e071
 800dfd0:	0800e0a1 	.word	0x0800e0a1
 800dfd4:	0800e0a1 	.word	0x0800e0a1
 800dfd8:	0800e0a1 	.word	0x0800e0a1
 800dfdc:	0800e0a1 	.word	0x0800e0a1
 800dfe0:	0800e0a1 	.word	0x0800e0a1
 800dfe4:	0800e0a1 	.word	0x0800e0a1
 800dfe8:	0800e0a1 	.word	0x0800e0a1
 800dfec:	0800e079 	.word	0x0800e079
 800dff0:	0800e0a1 	.word	0x0800e0a1
 800dff4:	0800e0a1 	.word	0x0800e0a1
 800dff8:	0800e0a1 	.word	0x0800e0a1
 800dffc:	0800e0a1 	.word	0x0800e0a1
 800e000:	0800e0a1 	.word	0x0800e0a1
 800e004:	0800e0a1 	.word	0x0800e0a1
 800e008:	0800e0a1 	.word	0x0800e0a1
 800e00c:	0800e081 	.word	0x0800e081
 800e010:	0800e0a1 	.word	0x0800e0a1
 800e014:	0800e0a1 	.word	0x0800e0a1
 800e018:	0800e0a1 	.word	0x0800e0a1
 800e01c:	0800e0a1 	.word	0x0800e0a1
 800e020:	0800e0a1 	.word	0x0800e0a1
 800e024:	0800e0a1 	.word	0x0800e0a1
 800e028:	0800e0a1 	.word	0x0800e0a1
 800e02c:	0800e089 	.word	0x0800e089
 800e030:	0800e0a1 	.word	0x0800e0a1
 800e034:	0800e0a1 	.word	0x0800e0a1
 800e038:	0800e0a1 	.word	0x0800e0a1
 800e03c:	0800e0a1 	.word	0x0800e0a1
 800e040:	0800e0a1 	.word	0x0800e0a1
 800e044:	0800e0a1 	.word	0x0800e0a1
 800e048:	0800e0a1 	.word	0x0800e0a1
 800e04c:	0800e091 	.word	0x0800e091
 800e050:	0800e0a1 	.word	0x0800e0a1
 800e054:	0800e0a1 	.word	0x0800e0a1
 800e058:	0800e0a1 	.word	0x0800e0a1
 800e05c:	0800e0a1 	.word	0x0800e0a1
 800e060:	0800e0a1 	.word	0x0800e0a1
 800e064:	0800e0a1 	.word	0x0800e0a1
 800e068:	0800e0a1 	.word	0x0800e0a1
 800e06c:	0800e099 	.word	0x0800e099
 800e070:	2301      	movs	r3, #1
 800e072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e076:	e0d6      	b.n	800e226 <UART_SetConfig+0x7ae>
 800e078:	2304      	movs	r3, #4
 800e07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e07e:	e0d2      	b.n	800e226 <UART_SetConfig+0x7ae>
 800e080:	2308      	movs	r3, #8
 800e082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e086:	e0ce      	b.n	800e226 <UART_SetConfig+0x7ae>
 800e088:	2310      	movs	r3, #16
 800e08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e08e:	e0ca      	b.n	800e226 <UART_SetConfig+0x7ae>
 800e090:	2320      	movs	r3, #32
 800e092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e096:	e0c6      	b.n	800e226 <UART_SetConfig+0x7ae>
 800e098:	2340      	movs	r3, #64	@ 0x40
 800e09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e09e:	e0c2      	b.n	800e226 <UART_SetConfig+0x7ae>
 800e0a0:	2380      	movs	r3, #128	@ 0x80
 800e0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0a6:	e0be      	b.n	800e226 <UART_SetConfig+0x7ae>
 800e0a8:	40011400 	.word	0x40011400
 800e0ac:	58024400 	.word	0x58024400
 800e0b0:	40007800 	.word	0x40007800
 800e0b4:	40007c00 	.word	0x40007c00
 800e0b8:	40011800 	.word	0x40011800
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	4aad      	ldr	r2, [pc, #692]	@ (800e378 <UART_SetConfig+0x900>)
 800e0c2:	4293      	cmp	r3, r2
 800e0c4:	d176      	bne.n	800e1b4 <UART_SetConfig+0x73c>
 800e0c6:	4bad      	ldr	r3, [pc, #692]	@ (800e37c <UART_SetConfig+0x904>)
 800e0c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e0ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e0ce:	2b28      	cmp	r3, #40	@ 0x28
 800e0d0:	d86c      	bhi.n	800e1ac <UART_SetConfig+0x734>
 800e0d2:	a201      	add	r2, pc, #4	@ (adr r2, 800e0d8 <UART_SetConfig+0x660>)
 800e0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0d8:	0800e17d 	.word	0x0800e17d
 800e0dc:	0800e1ad 	.word	0x0800e1ad
 800e0e0:	0800e1ad 	.word	0x0800e1ad
 800e0e4:	0800e1ad 	.word	0x0800e1ad
 800e0e8:	0800e1ad 	.word	0x0800e1ad
 800e0ec:	0800e1ad 	.word	0x0800e1ad
 800e0f0:	0800e1ad 	.word	0x0800e1ad
 800e0f4:	0800e1ad 	.word	0x0800e1ad
 800e0f8:	0800e185 	.word	0x0800e185
 800e0fc:	0800e1ad 	.word	0x0800e1ad
 800e100:	0800e1ad 	.word	0x0800e1ad
 800e104:	0800e1ad 	.word	0x0800e1ad
 800e108:	0800e1ad 	.word	0x0800e1ad
 800e10c:	0800e1ad 	.word	0x0800e1ad
 800e110:	0800e1ad 	.word	0x0800e1ad
 800e114:	0800e1ad 	.word	0x0800e1ad
 800e118:	0800e18d 	.word	0x0800e18d
 800e11c:	0800e1ad 	.word	0x0800e1ad
 800e120:	0800e1ad 	.word	0x0800e1ad
 800e124:	0800e1ad 	.word	0x0800e1ad
 800e128:	0800e1ad 	.word	0x0800e1ad
 800e12c:	0800e1ad 	.word	0x0800e1ad
 800e130:	0800e1ad 	.word	0x0800e1ad
 800e134:	0800e1ad 	.word	0x0800e1ad
 800e138:	0800e195 	.word	0x0800e195
 800e13c:	0800e1ad 	.word	0x0800e1ad
 800e140:	0800e1ad 	.word	0x0800e1ad
 800e144:	0800e1ad 	.word	0x0800e1ad
 800e148:	0800e1ad 	.word	0x0800e1ad
 800e14c:	0800e1ad 	.word	0x0800e1ad
 800e150:	0800e1ad 	.word	0x0800e1ad
 800e154:	0800e1ad 	.word	0x0800e1ad
 800e158:	0800e19d 	.word	0x0800e19d
 800e15c:	0800e1ad 	.word	0x0800e1ad
 800e160:	0800e1ad 	.word	0x0800e1ad
 800e164:	0800e1ad 	.word	0x0800e1ad
 800e168:	0800e1ad 	.word	0x0800e1ad
 800e16c:	0800e1ad 	.word	0x0800e1ad
 800e170:	0800e1ad 	.word	0x0800e1ad
 800e174:	0800e1ad 	.word	0x0800e1ad
 800e178:	0800e1a5 	.word	0x0800e1a5
 800e17c:	2301      	movs	r3, #1
 800e17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e182:	e050      	b.n	800e226 <UART_SetConfig+0x7ae>
 800e184:	2304      	movs	r3, #4
 800e186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e18a:	e04c      	b.n	800e226 <UART_SetConfig+0x7ae>
 800e18c:	2308      	movs	r3, #8
 800e18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e192:	e048      	b.n	800e226 <UART_SetConfig+0x7ae>
 800e194:	2310      	movs	r3, #16
 800e196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e19a:	e044      	b.n	800e226 <UART_SetConfig+0x7ae>
 800e19c:	2320      	movs	r3, #32
 800e19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1a2:	e040      	b.n	800e226 <UART_SetConfig+0x7ae>
 800e1a4:	2340      	movs	r3, #64	@ 0x40
 800e1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1aa:	e03c      	b.n	800e226 <UART_SetConfig+0x7ae>
 800e1ac:	2380      	movs	r3, #128	@ 0x80
 800e1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1b2:	e038      	b.n	800e226 <UART_SetConfig+0x7ae>
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	4a71      	ldr	r2, [pc, #452]	@ (800e380 <UART_SetConfig+0x908>)
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d130      	bne.n	800e220 <UART_SetConfig+0x7a8>
 800e1be:	4b6f      	ldr	r3, [pc, #444]	@ (800e37c <UART_SetConfig+0x904>)
 800e1c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e1c2:	f003 0307 	and.w	r3, r3, #7
 800e1c6:	2b05      	cmp	r3, #5
 800e1c8:	d826      	bhi.n	800e218 <UART_SetConfig+0x7a0>
 800e1ca:	a201      	add	r2, pc, #4	@ (adr r2, 800e1d0 <UART_SetConfig+0x758>)
 800e1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1d0:	0800e1e9 	.word	0x0800e1e9
 800e1d4:	0800e1f1 	.word	0x0800e1f1
 800e1d8:	0800e1f9 	.word	0x0800e1f9
 800e1dc:	0800e201 	.word	0x0800e201
 800e1e0:	0800e209 	.word	0x0800e209
 800e1e4:	0800e211 	.word	0x0800e211
 800e1e8:	2302      	movs	r3, #2
 800e1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1ee:	e01a      	b.n	800e226 <UART_SetConfig+0x7ae>
 800e1f0:	2304      	movs	r3, #4
 800e1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1f6:	e016      	b.n	800e226 <UART_SetConfig+0x7ae>
 800e1f8:	2308      	movs	r3, #8
 800e1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1fe:	e012      	b.n	800e226 <UART_SetConfig+0x7ae>
 800e200:	2310      	movs	r3, #16
 800e202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e206:	e00e      	b.n	800e226 <UART_SetConfig+0x7ae>
 800e208:	2320      	movs	r3, #32
 800e20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e20e:	e00a      	b.n	800e226 <UART_SetConfig+0x7ae>
 800e210:	2340      	movs	r3, #64	@ 0x40
 800e212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e216:	e006      	b.n	800e226 <UART_SetConfig+0x7ae>
 800e218:	2380      	movs	r3, #128	@ 0x80
 800e21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e21e:	e002      	b.n	800e226 <UART_SetConfig+0x7ae>
 800e220:	2380      	movs	r3, #128	@ 0x80
 800e222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4a55      	ldr	r2, [pc, #340]	@ (800e380 <UART_SetConfig+0x908>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	f040 80f8 	bne.w	800e422 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e232:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e236:	2b20      	cmp	r3, #32
 800e238:	dc46      	bgt.n	800e2c8 <UART_SetConfig+0x850>
 800e23a:	2b02      	cmp	r3, #2
 800e23c:	db75      	blt.n	800e32a <UART_SetConfig+0x8b2>
 800e23e:	3b02      	subs	r3, #2
 800e240:	2b1e      	cmp	r3, #30
 800e242:	d872      	bhi.n	800e32a <UART_SetConfig+0x8b2>
 800e244:	a201      	add	r2, pc, #4	@ (adr r2, 800e24c <UART_SetConfig+0x7d4>)
 800e246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e24a:	bf00      	nop
 800e24c:	0800e2cf 	.word	0x0800e2cf
 800e250:	0800e32b 	.word	0x0800e32b
 800e254:	0800e2d7 	.word	0x0800e2d7
 800e258:	0800e32b 	.word	0x0800e32b
 800e25c:	0800e32b 	.word	0x0800e32b
 800e260:	0800e32b 	.word	0x0800e32b
 800e264:	0800e2e7 	.word	0x0800e2e7
 800e268:	0800e32b 	.word	0x0800e32b
 800e26c:	0800e32b 	.word	0x0800e32b
 800e270:	0800e32b 	.word	0x0800e32b
 800e274:	0800e32b 	.word	0x0800e32b
 800e278:	0800e32b 	.word	0x0800e32b
 800e27c:	0800e32b 	.word	0x0800e32b
 800e280:	0800e32b 	.word	0x0800e32b
 800e284:	0800e2f7 	.word	0x0800e2f7
 800e288:	0800e32b 	.word	0x0800e32b
 800e28c:	0800e32b 	.word	0x0800e32b
 800e290:	0800e32b 	.word	0x0800e32b
 800e294:	0800e32b 	.word	0x0800e32b
 800e298:	0800e32b 	.word	0x0800e32b
 800e29c:	0800e32b 	.word	0x0800e32b
 800e2a0:	0800e32b 	.word	0x0800e32b
 800e2a4:	0800e32b 	.word	0x0800e32b
 800e2a8:	0800e32b 	.word	0x0800e32b
 800e2ac:	0800e32b 	.word	0x0800e32b
 800e2b0:	0800e32b 	.word	0x0800e32b
 800e2b4:	0800e32b 	.word	0x0800e32b
 800e2b8:	0800e32b 	.word	0x0800e32b
 800e2bc:	0800e32b 	.word	0x0800e32b
 800e2c0:	0800e32b 	.word	0x0800e32b
 800e2c4:	0800e31d 	.word	0x0800e31d
 800e2c8:	2b40      	cmp	r3, #64	@ 0x40
 800e2ca:	d02a      	beq.n	800e322 <UART_SetConfig+0x8aa>
 800e2cc:	e02d      	b.n	800e32a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e2ce:	f7fc fc5d 	bl	800ab8c <HAL_RCCEx_GetD3PCLK1Freq>
 800e2d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e2d4:	e02f      	b.n	800e336 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e2d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f7fc fc6c 	bl	800abb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e2e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2e4:	e027      	b.n	800e336 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e2e6:	f107 0318 	add.w	r3, r7, #24
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7fc fdb8 	bl	800ae60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e2f0:	69fb      	ldr	r3, [r7, #28]
 800e2f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e2f4:	e01f      	b.n	800e336 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e2f6:	4b21      	ldr	r3, [pc, #132]	@ (800e37c <UART_SetConfig+0x904>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f003 0320 	and.w	r3, r3, #32
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d009      	beq.n	800e316 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e302:	4b1e      	ldr	r3, [pc, #120]	@ (800e37c <UART_SetConfig+0x904>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	08db      	lsrs	r3, r3, #3
 800e308:	f003 0303 	and.w	r3, r3, #3
 800e30c:	4a1d      	ldr	r2, [pc, #116]	@ (800e384 <UART_SetConfig+0x90c>)
 800e30e:	fa22 f303 	lsr.w	r3, r2, r3
 800e312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e314:	e00f      	b.n	800e336 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e316:	4b1b      	ldr	r3, [pc, #108]	@ (800e384 <UART_SetConfig+0x90c>)
 800e318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e31a:	e00c      	b.n	800e336 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e31c:	4b1a      	ldr	r3, [pc, #104]	@ (800e388 <UART_SetConfig+0x910>)
 800e31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e320:	e009      	b.n	800e336 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e322:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e328:	e005      	b.n	800e336 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e32a:	2300      	movs	r3, #0
 800e32c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e32e:	2301      	movs	r3, #1
 800e330:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e334:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e338:	2b00      	cmp	r3, #0
 800e33a:	f000 81ee 	beq.w	800e71a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e342:	4a12      	ldr	r2, [pc, #72]	@ (800e38c <UART_SetConfig+0x914>)
 800e344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e348:	461a      	mov	r2, r3
 800e34a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e34c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e350:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e352:	697b      	ldr	r3, [r7, #20]
 800e354:	685a      	ldr	r2, [r3, #4]
 800e356:	4613      	mov	r3, r2
 800e358:	005b      	lsls	r3, r3, #1
 800e35a:	4413      	add	r3, r2
 800e35c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e35e:	429a      	cmp	r2, r3
 800e360:	d305      	bcc.n	800e36e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e362:	697b      	ldr	r3, [r7, #20]
 800e364:	685b      	ldr	r3, [r3, #4]
 800e366:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d910      	bls.n	800e390 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e36e:	2301      	movs	r3, #1
 800e370:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e374:	e1d1      	b.n	800e71a <UART_SetConfig+0xca2>
 800e376:	bf00      	nop
 800e378:	40011c00 	.word	0x40011c00
 800e37c:	58024400 	.word	0x58024400
 800e380:	58000c00 	.word	0x58000c00
 800e384:	03d09000 	.word	0x03d09000
 800e388:	003d0900 	.word	0x003d0900
 800e38c:	0800fe70 	.word	0x0800fe70
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e392:	2200      	movs	r2, #0
 800e394:	60bb      	str	r3, [r7, #8]
 800e396:	60fa      	str	r2, [r7, #12]
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e39c:	4ac0      	ldr	r2, [pc, #768]	@ (800e6a0 <UART_SetConfig+0xc28>)
 800e39e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e3a2:	b29b      	uxth	r3, r3
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	603b      	str	r3, [r7, #0]
 800e3a8:	607a      	str	r2, [r7, #4]
 800e3aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e3ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e3b2:	f7f1 ffab 	bl	800030c <__aeabi_uldivmod>
 800e3b6:	4602      	mov	r2, r0
 800e3b8:	460b      	mov	r3, r1
 800e3ba:	4610      	mov	r0, r2
 800e3bc:	4619      	mov	r1, r3
 800e3be:	f04f 0200 	mov.w	r2, #0
 800e3c2:	f04f 0300 	mov.w	r3, #0
 800e3c6:	020b      	lsls	r3, r1, #8
 800e3c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e3cc:	0202      	lsls	r2, r0, #8
 800e3ce:	6979      	ldr	r1, [r7, #20]
 800e3d0:	6849      	ldr	r1, [r1, #4]
 800e3d2:	0849      	lsrs	r1, r1, #1
 800e3d4:	2000      	movs	r0, #0
 800e3d6:	460c      	mov	r4, r1
 800e3d8:	4605      	mov	r5, r0
 800e3da:	eb12 0804 	adds.w	r8, r2, r4
 800e3de:	eb43 0905 	adc.w	r9, r3, r5
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	685b      	ldr	r3, [r3, #4]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	469a      	mov	sl, r3
 800e3ea:	4693      	mov	fp, r2
 800e3ec:	4652      	mov	r2, sl
 800e3ee:	465b      	mov	r3, fp
 800e3f0:	4640      	mov	r0, r8
 800e3f2:	4649      	mov	r1, r9
 800e3f4:	f7f1 ff8a 	bl	800030c <__aeabi_uldivmod>
 800e3f8:	4602      	mov	r2, r0
 800e3fa:	460b      	mov	r3, r1
 800e3fc:	4613      	mov	r3, r2
 800e3fe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e402:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e406:	d308      	bcc.n	800e41a <UART_SetConfig+0x9a2>
 800e408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e40a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e40e:	d204      	bcs.n	800e41a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e416:	60da      	str	r2, [r3, #12]
 800e418:	e17f      	b.n	800e71a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e41a:	2301      	movs	r3, #1
 800e41c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e420:	e17b      	b.n	800e71a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	69db      	ldr	r3, [r3, #28]
 800e426:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e42a:	f040 80bd 	bne.w	800e5a8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e42e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e432:	2b20      	cmp	r3, #32
 800e434:	dc48      	bgt.n	800e4c8 <UART_SetConfig+0xa50>
 800e436:	2b00      	cmp	r3, #0
 800e438:	db7b      	blt.n	800e532 <UART_SetConfig+0xaba>
 800e43a:	2b20      	cmp	r3, #32
 800e43c:	d879      	bhi.n	800e532 <UART_SetConfig+0xaba>
 800e43e:	a201      	add	r2, pc, #4	@ (adr r2, 800e444 <UART_SetConfig+0x9cc>)
 800e440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e444:	0800e4cf 	.word	0x0800e4cf
 800e448:	0800e4d7 	.word	0x0800e4d7
 800e44c:	0800e533 	.word	0x0800e533
 800e450:	0800e533 	.word	0x0800e533
 800e454:	0800e4df 	.word	0x0800e4df
 800e458:	0800e533 	.word	0x0800e533
 800e45c:	0800e533 	.word	0x0800e533
 800e460:	0800e533 	.word	0x0800e533
 800e464:	0800e4ef 	.word	0x0800e4ef
 800e468:	0800e533 	.word	0x0800e533
 800e46c:	0800e533 	.word	0x0800e533
 800e470:	0800e533 	.word	0x0800e533
 800e474:	0800e533 	.word	0x0800e533
 800e478:	0800e533 	.word	0x0800e533
 800e47c:	0800e533 	.word	0x0800e533
 800e480:	0800e533 	.word	0x0800e533
 800e484:	0800e4ff 	.word	0x0800e4ff
 800e488:	0800e533 	.word	0x0800e533
 800e48c:	0800e533 	.word	0x0800e533
 800e490:	0800e533 	.word	0x0800e533
 800e494:	0800e533 	.word	0x0800e533
 800e498:	0800e533 	.word	0x0800e533
 800e49c:	0800e533 	.word	0x0800e533
 800e4a0:	0800e533 	.word	0x0800e533
 800e4a4:	0800e533 	.word	0x0800e533
 800e4a8:	0800e533 	.word	0x0800e533
 800e4ac:	0800e533 	.word	0x0800e533
 800e4b0:	0800e533 	.word	0x0800e533
 800e4b4:	0800e533 	.word	0x0800e533
 800e4b8:	0800e533 	.word	0x0800e533
 800e4bc:	0800e533 	.word	0x0800e533
 800e4c0:	0800e533 	.word	0x0800e533
 800e4c4:	0800e525 	.word	0x0800e525
 800e4c8:	2b40      	cmp	r3, #64	@ 0x40
 800e4ca:	d02e      	beq.n	800e52a <UART_SetConfig+0xab2>
 800e4cc:	e031      	b.n	800e532 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e4ce:	f7fa fcbf 	bl	8008e50 <HAL_RCC_GetPCLK1Freq>
 800e4d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e4d4:	e033      	b.n	800e53e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e4d6:	f7fa fcd1 	bl	8008e7c <HAL_RCC_GetPCLK2Freq>
 800e4da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e4dc:	e02f      	b.n	800e53e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f7fc fb68 	bl	800abb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e4e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e4ec:	e027      	b.n	800e53e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e4ee:	f107 0318 	add.w	r3, r7, #24
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7fc fcb4 	bl	800ae60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e4f8:	69fb      	ldr	r3, [r7, #28]
 800e4fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e4fc:	e01f      	b.n	800e53e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e4fe:	4b69      	ldr	r3, [pc, #420]	@ (800e6a4 <UART_SetConfig+0xc2c>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f003 0320 	and.w	r3, r3, #32
 800e506:	2b00      	cmp	r3, #0
 800e508:	d009      	beq.n	800e51e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e50a:	4b66      	ldr	r3, [pc, #408]	@ (800e6a4 <UART_SetConfig+0xc2c>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	08db      	lsrs	r3, r3, #3
 800e510:	f003 0303 	and.w	r3, r3, #3
 800e514:	4a64      	ldr	r2, [pc, #400]	@ (800e6a8 <UART_SetConfig+0xc30>)
 800e516:	fa22 f303 	lsr.w	r3, r2, r3
 800e51a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e51c:	e00f      	b.n	800e53e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e51e:	4b62      	ldr	r3, [pc, #392]	@ (800e6a8 <UART_SetConfig+0xc30>)
 800e520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e522:	e00c      	b.n	800e53e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e524:	4b61      	ldr	r3, [pc, #388]	@ (800e6ac <UART_SetConfig+0xc34>)
 800e526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e528:	e009      	b.n	800e53e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e52a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e52e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e530:	e005      	b.n	800e53e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e532:	2300      	movs	r3, #0
 800e534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e536:	2301      	movs	r3, #1
 800e538:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e53c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e53e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e540:	2b00      	cmp	r3, #0
 800e542:	f000 80ea 	beq.w	800e71a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e546:	697b      	ldr	r3, [r7, #20]
 800e548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e54a:	4a55      	ldr	r2, [pc, #340]	@ (800e6a0 <UART_SetConfig+0xc28>)
 800e54c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e550:	461a      	mov	r2, r3
 800e552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e554:	fbb3 f3f2 	udiv	r3, r3, r2
 800e558:	005a      	lsls	r2, r3, #1
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	685b      	ldr	r3, [r3, #4]
 800e55e:	085b      	lsrs	r3, r3, #1
 800e560:	441a      	add	r2, r3
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	685b      	ldr	r3, [r3, #4]
 800e566:	fbb2 f3f3 	udiv	r3, r2, r3
 800e56a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e56c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e56e:	2b0f      	cmp	r3, #15
 800e570:	d916      	bls.n	800e5a0 <UART_SetConfig+0xb28>
 800e572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e578:	d212      	bcs.n	800e5a0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e57a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e57c:	b29b      	uxth	r3, r3
 800e57e:	f023 030f 	bic.w	r3, r3, #15
 800e582:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e586:	085b      	lsrs	r3, r3, #1
 800e588:	b29b      	uxth	r3, r3
 800e58a:	f003 0307 	and.w	r3, r3, #7
 800e58e:	b29a      	uxth	r2, r3
 800e590:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e592:	4313      	orrs	r3, r2
 800e594:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e59c:	60da      	str	r2, [r3, #12]
 800e59e:	e0bc      	b.n	800e71a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e5a6:	e0b8      	b.n	800e71a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e5a8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e5ac:	2b20      	cmp	r3, #32
 800e5ae:	dc4b      	bgt.n	800e648 <UART_SetConfig+0xbd0>
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	f2c0 8087 	blt.w	800e6c4 <UART_SetConfig+0xc4c>
 800e5b6:	2b20      	cmp	r3, #32
 800e5b8:	f200 8084 	bhi.w	800e6c4 <UART_SetConfig+0xc4c>
 800e5bc:	a201      	add	r2, pc, #4	@ (adr r2, 800e5c4 <UART_SetConfig+0xb4c>)
 800e5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c2:	bf00      	nop
 800e5c4:	0800e64f 	.word	0x0800e64f
 800e5c8:	0800e657 	.word	0x0800e657
 800e5cc:	0800e6c5 	.word	0x0800e6c5
 800e5d0:	0800e6c5 	.word	0x0800e6c5
 800e5d4:	0800e65f 	.word	0x0800e65f
 800e5d8:	0800e6c5 	.word	0x0800e6c5
 800e5dc:	0800e6c5 	.word	0x0800e6c5
 800e5e0:	0800e6c5 	.word	0x0800e6c5
 800e5e4:	0800e66f 	.word	0x0800e66f
 800e5e8:	0800e6c5 	.word	0x0800e6c5
 800e5ec:	0800e6c5 	.word	0x0800e6c5
 800e5f0:	0800e6c5 	.word	0x0800e6c5
 800e5f4:	0800e6c5 	.word	0x0800e6c5
 800e5f8:	0800e6c5 	.word	0x0800e6c5
 800e5fc:	0800e6c5 	.word	0x0800e6c5
 800e600:	0800e6c5 	.word	0x0800e6c5
 800e604:	0800e67f 	.word	0x0800e67f
 800e608:	0800e6c5 	.word	0x0800e6c5
 800e60c:	0800e6c5 	.word	0x0800e6c5
 800e610:	0800e6c5 	.word	0x0800e6c5
 800e614:	0800e6c5 	.word	0x0800e6c5
 800e618:	0800e6c5 	.word	0x0800e6c5
 800e61c:	0800e6c5 	.word	0x0800e6c5
 800e620:	0800e6c5 	.word	0x0800e6c5
 800e624:	0800e6c5 	.word	0x0800e6c5
 800e628:	0800e6c5 	.word	0x0800e6c5
 800e62c:	0800e6c5 	.word	0x0800e6c5
 800e630:	0800e6c5 	.word	0x0800e6c5
 800e634:	0800e6c5 	.word	0x0800e6c5
 800e638:	0800e6c5 	.word	0x0800e6c5
 800e63c:	0800e6c5 	.word	0x0800e6c5
 800e640:	0800e6c5 	.word	0x0800e6c5
 800e644:	0800e6b7 	.word	0x0800e6b7
 800e648:	2b40      	cmp	r3, #64	@ 0x40
 800e64a:	d037      	beq.n	800e6bc <UART_SetConfig+0xc44>
 800e64c:	e03a      	b.n	800e6c4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e64e:	f7fa fbff 	bl	8008e50 <HAL_RCC_GetPCLK1Freq>
 800e652:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e654:	e03c      	b.n	800e6d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e656:	f7fa fc11 	bl	8008e7c <HAL_RCC_GetPCLK2Freq>
 800e65a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e65c:	e038      	b.n	800e6d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e65e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e662:	4618      	mov	r0, r3
 800e664:	f7fc faa8 	bl	800abb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e66c:	e030      	b.n	800e6d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e66e:	f107 0318 	add.w	r3, r7, #24
 800e672:	4618      	mov	r0, r3
 800e674:	f7fc fbf4 	bl	800ae60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e678:	69fb      	ldr	r3, [r7, #28]
 800e67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e67c:	e028      	b.n	800e6d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e67e:	4b09      	ldr	r3, [pc, #36]	@ (800e6a4 <UART_SetConfig+0xc2c>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f003 0320 	and.w	r3, r3, #32
 800e686:	2b00      	cmp	r3, #0
 800e688:	d012      	beq.n	800e6b0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e68a:	4b06      	ldr	r3, [pc, #24]	@ (800e6a4 <UART_SetConfig+0xc2c>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	08db      	lsrs	r3, r3, #3
 800e690:	f003 0303 	and.w	r3, r3, #3
 800e694:	4a04      	ldr	r2, [pc, #16]	@ (800e6a8 <UART_SetConfig+0xc30>)
 800e696:	fa22 f303 	lsr.w	r3, r2, r3
 800e69a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e69c:	e018      	b.n	800e6d0 <UART_SetConfig+0xc58>
 800e69e:	bf00      	nop
 800e6a0:	0800fe70 	.word	0x0800fe70
 800e6a4:	58024400 	.word	0x58024400
 800e6a8:	03d09000 	.word	0x03d09000
 800e6ac:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e6b0:	4b24      	ldr	r3, [pc, #144]	@ (800e744 <UART_SetConfig+0xccc>)
 800e6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e6b4:	e00c      	b.n	800e6d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e6b6:	4b24      	ldr	r3, [pc, #144]	@ (800e748 <UART_SetConfig+0xcd0>)
 800e6b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e6ba:	e009      	b.n	800e6d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e6bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e6c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e6c2:	e005      	b.n	800e6d0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e6ce:	bf00      	nop
    }

    if (pclk != 0U)
 800e6d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d021      	beq.n	800e71a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6da:	4a1c      	ldr	r2, [pc, #112]	@ (800e74c <UART_SetConfig+0xcd4>)
 800e6dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e6e0:	461a      	mov	r2, r3
 800e6e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6e4:	fbb3 f2f2 	udiv	r2, r3, r2
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	685b      	ldr	r3, [r3, #4]
 800e6ec:	085b      	lsrs	r3, r3, #1
 800e6ee:	441a      	add	r2, r3
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	685b      	ldr	r3, [r3, #4]
 800e6f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e6fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6fc:	2b0f      	cmp	r3, #15
 800e6fe:	d909      	bls.n	800e714 <UART_SetConfig+0xc9c>
 800e700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e702:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e706:	d205      	bcs.n	800e714 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e70a:	b29a      	uxth	r2, r3
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	60da      	str	r2, [r3, #12]
 800e712:	e002      	b.n	800e71a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e714:	2301      	movs	r3, #1
 800e716:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	2201      	movs	r2, #1
 800e71e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	2201      	movs	r2, #1
 800e726:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	2200      	movs	r2, #0
 800e72e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	2200      	movs	r2, #0
 800e734:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e736:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3748      	adds	r7, #72	@ 0x48
 800e73e:	46bd      	mov	sp, r7
 800e740:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e744:	03d09000 	.word	0x03d09000
 800e748:	003d0900 	.word	0x003d0900
 800e74c:	0800fe70 	.word	0x0800fe70

0800e750 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e750:	b480      	push	{r7}
 800e752:	b083      	sub	sp, #12
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e75c:	f003 0308 	and.w	r3, r3, #8
 800e760:	2b00      	cmp	r3, #0
 800e762:	d00a      	beq.n	800e77a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	430a      	orrs	r2, r1
 800e778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e77e:	f003 0301 	and.w	r3, r3, #1
 800e782:	2b00      	cmp	r3, #0
 800e784:	d00a      	beq.n	800e79c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	685b      	ldr	r3, [r3, #4]
 800e78c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	430a      	orrs	r2, r1
 800e79a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7a0:	f003 0302 	and.w	r3, r3, #2
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d00a      	beq.n	800e7be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	430a      	orrs	r2, r1
 800e7bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7c2:	f003 0304 	and.w	r3, r3, #4
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d00a      	beq.n	800e7e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	430a      	orrs	r2, r1
 800e7de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7e4:	f003 0310 	and.w	r3, r3, #16
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d00a      	beq.n	800e802 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	689b      	ldr	r3, [r3, #8]
 800e7f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	430a      	orrs	r2, r1
 800e800:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e806:	f003 0320 	and.w	r3, r3, #32
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d00a      	beq.n	800e824 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	689b      	ldr	r3, [r3, #8]
 800e814:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	430a      	orrs	r2, r1
 800e822:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d01a      	beq.n	800e866 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	430a      	orrs	r2, r1
 800e844:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e84a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e84e:	d10a      	bne.n	800e866 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	685b      	ldr	r3, [r3, #4]
 800e856:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	430a      	orrs	r2, r1
 800e864:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e86a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d00a      	beq.n	800e888 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	430a      	orrs	r2, r1
 800e886:	605a      	str	r2, [r3, #4]
  }
}
 800e888:	bf00      	nop
 800e88a:	370c      	adds	r7, #12
 800e88c:	46bd      	mov	sp, r7
 800e88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e892:	4770      	bx	lr

0800e894 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b098      	sub	sp, #96	@ 0x60
 800e898:	af02      	add	r7, sp, #8
 800e89a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e8a4:	f7f4 f934 	bl	8002b10 <HAL_GetTick>
 800e8a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	f003 0308 	and.w	r3, r3, #8
 800e8b4:	2b08      	cmp	r3, #8
 800e8b6:	d12f      	bne.n	800e918 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e8b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e8bc:	9300      	str	r3, [sp, #0]
 800e8be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 f88e 	bl	800e9e8 <UART_WaitOnFlagUntilTimeout>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d022      	beq.n	800e918 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8da:	e853 3f00 	ldrex	r3, [r3]
 800e8de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e8e6:	653b      	str	r3, [r7, #80]	@ 0x50
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	461a      	mov	r2, r3
 800e8ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800e8f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e8f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e8f8:	e841 2300 	strex	r3, r2, [r1]
 800e8fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e8fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e900:	2b00      	cmp	r3, #0
 800e902:	d1e6      	bne.n	800e8d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2220      	movs	r2, #32
 800e908:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2200      	movs	r2, #0
 800e910:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e914:	2303      	movs	r3, #3
 800e916:	e063      	b.n	800e9e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	f003 0304 	and.w	r3, r3, #4
 800e922:	2b04      	cmp	r3, #4
 800e924:	d149      	bne.n	800e9ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e926:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e92a:	9300      	str	r3, [sp, #0]
 800e92c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e92e:	2200      	movs	r2, #0
 800e930:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f000 f857 	bl	800e9e8 <UART_WaitOnFlagUntilTimeout>
 800e93a:	4603      	mov	r3, r0
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d03c      	beq.n	800e9ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e948:	e853 3f00 	ldrex	r3, [r3]
 800e94c:	623b      	str	r3, [r7, #32]
   return(result);
 800e94e:	6a3b      	ldr	r3, [r7, #32]
 800e950:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e954:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	461a      	mov	r2, r3
 800e95c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e95e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e960:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e962:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e964:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e966:	e841 2300 	strex	r3, r2, [r1]
 800e96a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d1e6      	bne.n	800e940 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	3308      	adds	r3, #8
 800e978:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	e853 3f00 	ldrex	r3, [r3]
 800e980:	60fb      	str	r3, [r7, #12]
   return(result);
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	f023 0301 	bic.w	r3, r3, #1
 800e988:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	3308      	adds	r3, #8
 800e990:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e992:	61fa      	str	r2, [r7, #28]
 800e994:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e996:	69b9      	ldr	r1, [r7, #24]
 800e998:	69fa      	ldr	r2, [r7, #28]
 800e99a:	e841 2300 	strex	r3, r2, [r1]
 800e99e:	617b      	str	r3, [r7, #20]
   return(result);
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d1e5      	bne.n	800e972 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2220      	movs	r2, #32
 800e9aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e9b6:	2303      	movs	r3, #3
 800e9b8:	e012      	b.n	800e9e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2220      	movs	r2, #32
 800e9be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2220      	movs	r2, #32
 800e9c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e9de:	2300      	movs	r3, #0
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3758      	adds	r7, #88	@ 0x58
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	60f8      	str	r0, [r7, #12]
 800e9f0:	60b9      	str	r1, [r7, #8]
 800e9f2:	603b      	str	r3, [r7, #0]
 800e9f4:	4613      	mov	r3, r2
 800e9f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e9f8:	e04f      	b.n	800ea9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e9fa:	69bb      	ldr	r3, [r7, #24]
 800e9fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea00:	d04b      	beq.n	800ea9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea02:	f7f4 f885 	bl	8002b10 <HAL_GetTick>
 800ea06:	4602      	mov	r2, r0
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	1ad3      	subs	r3, r2, r3
 800ea0c:	69ba      	ldr	r2, [r7, #24]
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d302      	bcc.n	800ea18 <UART_WaitOnFlagUntilTimeout+0x30>
 800ea12:	69bb      	ldr	r3, [r7, #24]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d101      	bne.n	800ea1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ea18:	2303      	movs	r3, #3
 800ea1a:	e04e      	b.n	800eaba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	f003 0304 	and.w	r3, r3, #4
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d037      	beq.n	800ea9a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	2b80      	cmp	r3, #128	@ 0x80
 800ea2e:	d034      	beq.n	800ea9a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	2b40      	cmp	r3, #64	@ 0x40
 800ea34:	d031      	beq.n	800ea9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	69db      	ldr	r3, [r3, #28]
 800ea3c:	f003 0308 	and.w	r3, r3, #8
 800ea40:	2b08      	cmp	r3, #8
 800ea42:	d110      	bne.n	800ea66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	2208      	movs	r2, #8
 800ea4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ea4c:	68f8      	ldr	r0, [r7, #12]
 800ea4e:	f000 f95b 	bl	800ed08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2208      	movs	r2, #8
 800ea56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ea62:	2301      	movs	r3, #1
 800ea64:	e029      	b.n	800eaba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	69db      	ldr	r3, [r3, #28]
 800ea6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ea70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ea74:	d111      	bne.n	800ea9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ea7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ea80:	68f8      	ldr	r0, [r7, #12]
 800ea82:	f000 f941 	bl	800ed08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	2220      	movs	r2, #32
 800ea8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	2200      	movs	r2, #0
 800ea92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ea96:	2303      	movs	r3, #3
 800ea98:	e00f      	b.n	800eaba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	69da      	ldr	r2, [r3, #28]
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	4013      	ands	r3, r2
 800eaa4:	68ba      	ldr	r2, [r7, #8]
 800eaa6:	429a      	cmp	r2, r3
 800eaa8:	bf0c      	ite	eq
 800eaaa:	2301      	moveq	r3, #1
 800eaac:	2300      	movne	r3, #0
 800eaae:	b2db      	uxtb	r3, r3
 800eab0:	461a      	mov	r2, r3
 800eab2:	79fb      	ldrb	r3, [r7, #7]
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d0a0      	beq.n	800e9fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eab8:	2300      	movs	r3, #0
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	3710      	adds	r7, #16
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
	...

0800eac4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eac4:	b480      	push	{r7}
 800eac6:	b0a3      	sub	sp, #140	@ 0x8c
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	4613      	mov	r3, r2
 800ead0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	68ba      	ldr	r2, [r7, #8]
 800ead6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	88fa      	ldrh	r2, [r7, #6]
 800eadc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	88fa      	ldrh	r2, [r7, #6]
 800eae4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2200      	movs	r2, #0
 800eaec:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	689b      	ldr	r3, [r3, #8]
 800eaf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eaf6:	d10e      	bne.n	800eb16 <UART_Start_Receive_IT+0x52>
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	691b      	ldr	r3, [r3, #16]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d105      	bne.n	800eb0c <UART_Start_Receive_IT+0x48>
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800eb06:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800eb0a:	e02d      	b.n	800eb68 <UART_Start_Receive_IT+0xa4>
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	22ff      	movs	r2, #255	@ 0xff
 800eb10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800eb14:	e028      	b.n	800eb68 <UART_Start_Receive_IT+0xa4>
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	689b      	ldr	r3, [r3, #8]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d10d      	bne.n	800eb3a <UART_Start_Receive_IT+0x76>
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	691b      	ldr	r3, [r3, #16]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d104      	bne.n	800eb30 <UART_Start_Receive_IT+0x6c>
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	22ff      	movs	r2, #255	@ 0xff
 800eb2a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800eb2e:	e01b      	b.n	800eb68 <UART_Start_Receive_IT+0xa4>
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	227f      	movs	r2, #127	@ 0x7f
 800eb34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800eb38:	e016      	b.n	800eb68 <UART_Start_Receive_IT+0xa4>
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	689b      	ldr	r3, [r3, #8]
 800eb3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eb42:	d10d      	bne.n	800eb60 <UART_Start_Receive_IT+0x9c>
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	691b      	ldr	r3, [r3, #16]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d104      	bne.n	800eb56 <UART_Start_Receive_IT+0x92>
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	227f      	movs	r2, #127	@ 0x7f
 800eb50:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800eb54:	e008      	b.n	800eb68 <UART_Start_Receive_IT+0xa4>
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	223f      	movs	r2, #63	@ 0x3f
 800eb5a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800eb5e:	e003      	b.n	800eb68 <UART_Start_Receive_IT+0xa4>
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2200      	movs	r2, #0
 800eb64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2222      	movs	r2, #34	@ 0x22
 800eb74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	3308      	adds	r3, #8
 800eb7e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eb82:	e853 3f00 	ldrex	r3, [r3]
 800eb86:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800eb88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eb8a:	f043 0301 	orr.w	r3, r3, #1
 800eb8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	3308      	adds	r3, #8
 800eb98:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800eb9c:	673a      	str	r2, [r7, #112]	@ 0x70
 800eb9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eba0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800eba2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800eba4:	e841 2300 	strex	r3, r2, [r1]
 800eba8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800ebaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d1e3      	bne.n	800eb78 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ebb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ebb8:	d14f      	bne.n	800ec5a <UART_Start_Receive_IT+0x196>
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ebc0:	88fa      	ldrh	r2, [r7, #6]
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	d349      	bcc.n	800ec5a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	689b      	ldr	r3, [r3, #8]
 800ebca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ebce:	d107      	bne.n	800ebe0 <UART_Start_Receive_IT+0x11c>
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	691b      	ldr	r3, [r3, #16]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d103      	bne.n	800ebe0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	4a47      	ldr	r2, [pc, #284]	@ (800ecf8 <UART_Start_Receive_IT+0x234>)
 800ebdc:	675a      	str	r2, [r3, #116]	@ 0x74
 800ebde:	e002      	b.n	800ebe6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	4a46      	ldr	r2, [pc, #280]	@ (800ecfc <UART_Start_Receive_IT+0x238>)
 800ebe4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	691b      	ldr	r3, [r3, #16]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d01a      	beq.n	800ec24 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ebf6:	e853 3f00 	ldrex	r3, [r3]
 800ebfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ebfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ebfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ec02:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	461a      	mov	r2, r3
 800ec0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ec10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ec12:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec14:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ec16:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ec18:	e841 2300 	strex	r3, r2, [r1]
 800ec1c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800ec1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d1e4      	bne.n	800ebee <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	3308      	adds	r3, #8
 800ec2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec2e:	e853 3f00 	ldrex	r3, [r3]
 800ec32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ec34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ec3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	3308      	adds	r3, #8
 800ec42:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ec44:	64ba      	str	r2, [r7, #72]	@ 0x48
 800ec46:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec48:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ec4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ec4c:	e841 2300 	strex	r3, r2, [r1]
 800ec50:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ec52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d1e5      	bne.n	800ec24 <UART_Start_Receive_IT+0x160>
 800ec58:	e046      	b.n	800ece8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	689b      	ldr	r3, [r3, #8]
 800ec5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ec62:	d107      	bne.n	800ec74 <UART_Start_Receive_IT+0x1b0>
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	691b      	ldr	r3, [r3, #16]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d103      	bne.n	800ec74 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	4a24      	ldr	r2, [pc, #144]	@ (800ed00 <UART_Start_Receive_IT+0x23c>)
 800ec70:	675a      	str	r2, [r3, #116]	@ 0x74
 800ec72:	e002      	b.n	800ec7a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	4a23      	ldr	r2, [pc, #140]	@ (800ed04 <UART_Start_Receive_IT+0x240>)
 800ec78:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	691b      	ldr	r3, [r3, #16]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d019      	beq.n	800ecb6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec8a:	e853 3f00 	ldrex	r3, [r3]
 800ec8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ec90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec92:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ec96:	677b      	str	r3, [r7, #116]	@ 0x74
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	461a      	mov	r2, r3
 800ec9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eca0:	637b      	str	r3, [r7, #52]	@ 0x34
 800eca2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eca4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800eca6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eca8:	e841 2300 	strex	r3, r2, [r1]
 800ecac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ecae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d1e6      	bne.n	800ec82 <UART_Start_Receive_IT+0x1be>
 800ecb4:	e018      	b.n	800ece8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	e853 3f00 	ldrex	r3, [r3]
 800ecc2:	613b      	str	r3, [r7, #16]
   return(result);
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	f043 0320 	orr.w	r3, r3, #32
 800ecca:	67bb      	str	r3, [r7, #120]	@ 0x78
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	461a      	mov	r2, r3
 800ecd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ecd4:	623b      	str	r3, [r7, #32]
 800ecd6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecd8:	69f9      	ldr	r1, [r7, #28]
 800ecda:	6a3a      	ldr	r2, [r7, #32]
 800ecdc:	e841 2300 	strex	r3, r2, [r1]
 800ece0:	61bb      	str	r3, [r7, #24]
   return(result);
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d1e6      	bne.n	800ecb6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ece8:	2300      	movs	r3, #0
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	378c      	adds	r7, #140	@ 0x8c
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf4:	4770      	bx	lr
 800ecf6:	bf00      	nop
 800ecf8:	0800f529 	.word	0x0800f529
 800ecfc:	0800f1c9 	.word	0x0800f1c9
 800ed00:	0800f011 	.word	0x0800f011
 800ed04:	0800ee59 	.word	0x0800ee59

0800ed08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b095      	sub	sp, #84	@ 0x54
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed18:	e853 3f00 	ldrex	r3, [r3]
 800ed1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ed1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ed24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed2e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ed30:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ed34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ed36:	e841 2300 	strex	r3, r2, [r1]
 800ed3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ed3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d1e6      	bne.n	800ed10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	3308      	adds	r3, #8
 800ed48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed4a:	6a3b      	ldr	r3, [r7, #32]
 800ed4c:	e853 3f00 	ldrex	r3, [r3]
 800ed50:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed52:	69fa      	ldr	r2, [r7, #28]
 800ed54:	4b1e      	ldr	r3, [pc, #120]	@ (800edd0 <UART_EndRxTransfer+0xc8>)
 800ed56:	4013      	ands	r3, r2
 800ed58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	3308      	adds	r3, #8
 800ed60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ed62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ed64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ed68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed6a:	e841 2300 	strex	r3, r2, [r1]
 800ed6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ed70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d1e5      	bne.n	800ed42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed7a:	2b01      	cmp	r3, #1
 800ed7c:	d118      	bne.n	800edb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	e853 3f00 	ldrex	r3, [r3]
 800ed8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	f023 0310 	bic.w	r3, r3, #16
 800ed92:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	461a      	mov	r2, r3
 800ed9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed9c:	61bb      	str	r3, [r7, #24]
 800ed9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eda0:	6979      	ldr	r1, [r7, #20]
 800eda2:	69ba      	ldr	r2, [r7, #24]
 800eda4:	e841 2300 	strex	r3, r2, [r1]
 800eda8:	613b      	str	r3, [r7, #16]
   return(result);
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d1e6      	bne.n	800ed7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2220      	movs	r2, #32
 800edb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2200      	movs	r2, #0
 800edbc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2200      	movs	r2, #0
 800edc2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800edc4:	bf00      	nop
 800edc6:	3754      	adds	r7, #84	@ 0x54
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr
 800edd0:	effffffe 	.word	0xeffffffe

0800edd4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b084      	sub	sp, #16
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ede0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	2200      	movs	r2, #0
 800ede6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	2200      	movs	r2, #0
 800edee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800edf2:	68f8      	ldr	r0, [r7, #12]
 800edf4:	f7fe fe36 	bl	800da64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800edf8:	bf00      	nop
 800edfa:	3710      	adds	r7, #16
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}

0800ee00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b088      	sub	sp, #32
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	e853 3f00 	ldrex	r3, [r3]
 800ee14:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ee1c:	61fb      	str	r3, [r7, #28]
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	461a      	mov	r2, r3
 800ee24:	69fb      	ldr	r3, [r7, #28]
 800ee26:	61bb      	str	r3, [r7, #24]
 800ee28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee2a:	6979      	ldr	r1, [r7, #20]
 800ee2c:	69ba      	ldr	r2, [r7, #24]
 800ee2e:	e841 2300 	strex	r3, r2, [r1]
 800ee32:	613b      	str	r3, [r7, #16]
   return(result);
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d1e6      	bne.n	800ee08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2220      	movs	r2, #32
 800ee3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2200      	movs	r2, #0
 800ee46:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f7fe fdf7 	bl	800da3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee4e:	bf00      	nop
 800ee50:	3720      	adds	r7, #32
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
	...

0800ee58 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b09c      	sub	sp, #112	@ 0x70
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ee66:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ee70:	2b22      	cmp	r3, #34	@ 0x22
 800ee72:	f040 80be 	bne.w	800eff2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee7c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ee80:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ee84:	b2d9      	uxtb	r1, r3
 800ee86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ee8a:	b2da      	uxtb	r2, r3
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee90:	400a      	ands	r2, r1
 800ee92:	b2d2      	uxtb	r2, r2
 800ee94:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee9a:	1c5a      	adds	r2, r3, #1
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eea6:	b29b      	uxth	r3, r3
 800eea8:	3b01      	subs	r3, #1
 800eeaa:	b29a      	uxth	r2, r3
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	f040 80a1 	bne.w	800f002 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eec6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eec8:	e853 3f00 	ldrex	r3, [r3]
 800eecc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800eece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eed0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eed4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	461a      	mov	r2, r3
 800eedc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eede:	65bb      	str	r3, [r7, #88]	@ 0x58
 800eee0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eee2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800eee4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eee6:	e841 2300 	strex	r3, r2, [r1]
 800eeea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800eeec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d1e6      	bne.n	800eec0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	3308      	adds	r3, #8
 800eef8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eefa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eefc:	e853 3f00 	ldrex	r3, [r3]
 800ef00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ef02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef04:	f023 0301 	bic.w	r3, r3, #1
 800ef08:	667b      	str	r3, [r7, #100]	@ 0x64
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	3308      	adds	r3, #8
 800ef10:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ef12:	647a      	str	r2, [r7, #68]	@ 0x44
 800ef14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ef18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ef1a:	e841 2300 	strex	r3, r2, [r1]
 800ef1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ef20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d1e5      	bne.n	800eef2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	2220      	movs	r2, #32
 800ef2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2200      	movs	r2, #0
 800ef32:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2200      	movs	r2, #0
 800ef38:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	4a33      	ldr	r2, [pc, #204]	@ (800f00c <UART_RxISR_8BIT+0x1b4>)
 800ef40:	4293      	cmp	r3, r2
 800ef42:	d01f      	beq.n	800ef84 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	685b      	ldr	r3, [r3, #4]
 800ef4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d018      	beq.n	800ef84 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef5a:	e853 3f00 	ldrex	r3, [r3]
 800ef5e:	623b      	str	r3, [r7, #32]
   return(result);
 800ef60:	6a3b      	ldr	r3, [r7, #32]
 800ef62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ef66:	663b      	str	r3, [r7, #96]	@ 0x60
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ef70:	633b      	str	r3, [r7, #48]	@ 0x30
 800ef72:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ef76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef78:	e841 2300 	strex	r3, r2, [r1]
 800ef7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ef7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d1e6      	bne.n	800ef52 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef88:	2b01      	cmp	r3, #1
 800ef8a:	d12e      	bne.n	800efea <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	e853 3f00 	ldrex	r3, [r3]
 800ef9e:	60fb      	str	r3, [r7, #12]
   return(result);
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	f023 0310 	bic.w	r3, r3, #16
 800efa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	461a      	mov	r2, r3
 800efae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800efb0:	61fb      	str	r3, [r7, #28]
 800efb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efb4:	69b9      	ldr	r1, [r7, #24]
 800efb6:	69fa      	ldr	r2, [r7, #28]
 800efb8:	e841 2300 	strex	r3, r2, [r1]
 800efbc:	617b      	str	r3, [r7, #20]
   return(result);
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d1e6      	bne.n	800ef92 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	69db      	ldr	r3, [r3, #28]
 800efca:	f003 0310 	and.w	r3, r3, #16
 800efce:	2b10      	cmp	r3, #16
 800efd0:	d103      	bne.n	800efda <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	2210      	movs	r2, #16
 800efd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800efe0:	4619      	mov	r1, r3
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f7f2 f92c 	bl	8001240 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800efe8:	e00b      	b.n	800f002 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f7fe fd30 	bl	800da50 <HAL_UART_RxCpltCallback>
}
 800eff0:	e007      	b.n	800f002 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	699a      	ldr	r2, [r3, #24]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f042 0208 	orr.w	r2, r2, #8
 800f000:	619a      	str	r2, [r3, #24]
}
 800f002:	bf00      	nop
 800f004:	3770      	adds	r7, #112	@ 0x70
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}
 800f00a:	bf00      	nop
 800f00c:	58000c00 	.word	0x58000c00

0800f010 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b09c      	sub	sp, #112	@ 0x70
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f01e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f028:	2b22      	cmp	r3, #34	@ 0x22
 800f02a:	f040 80be 	bne.w	800f1aa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f034:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f03c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800f03e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800f042:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800f046:	4013      	ands	r3, r2
 800f048:	b29a      	uxth	r2, r3
 800f04a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f04c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f052:	1c9a      	adds	r2, r3, #2
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f05e:	b29b      	uxth	r3, r3
 800f060:	3b01      	subs	r3, #1
 800f062:	b29a      	uxth	r2, r3
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f070:	b29b      	uxth	r3, r3
 800f072:	2b00      	cmp	r3, #0
 800f074:	f040 80a1 	bne.w	800f1ba <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f07e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f080:	e853 3f00 	ldrex	r3, [r3]
 800f084:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f086:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f088:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f08c:	667b      	str	r3, [r7, #100]	@ 0x64
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	461a      	mov	r2, r3
 800f094:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f096:	657b      	str	r3, [r7, #84]	@ 0x54
 800f098:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f09a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f09c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f09e:	e841 2300 	strex	r3, r2, [r1]
 800f0a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f0a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d1e6      	bne.n	800f078 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	3308      	adds	r3, #8
 800f0b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0b4:	e853 3f00 	ldrex	r3, [r3]
 800f0b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0bc:	f023 0301 	bic.w	r3, r3, #1
 800f0c0:	663b      	str	r3, [r7, #96]	@ 0x60
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	3308      	adds	r3, #8
 800f0c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f0ca:	643a      	str	r2, [r7, #64]	@ 0x40
 800f0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f0d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f0d2:	e841 2300 	strex	r3, r2, [r1]
 800f0d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d1e5      	bne.n	800f0aa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2220      	movs	r2, #32
 800f0e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	4a33      	ldr	r2, [pc, #204]	@ (800f1c4 <UART_RxISR_16BIT+0x1b4>)
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	d01f      	beq.n	800f13c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f106:	2b00      	cmp	r3, #0
 800f108:	d018      	beq.n	800f13c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f110:	6a3b      	ldr	r3, [r7, #32]
 800f112:	e853 3f00 	ldrex	r3, [r3]
 800f116:	61fb      	str	r3, [r7, #28]
   return(result);
 800f118:	69fb      	ldr	r3, [r7, #28]
 800f11a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f11e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	461a      	mov	r2, r3
 800f126:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f12a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f12c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f12e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f130:	e841 2300 	strex	r3, r2, [r1]
 800f134:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d1e6      	bne.n	800f10a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f140:	2b01      	cmp	r3, #1
 800f142:	d12e      	bne.n	800f1a2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2200      	movs	r2, #0
 800f148:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	e853 3f00 	ldrex	r3, [r3]
 800f156:	60bb      	str	r3, [r7, #8]
   return(result);
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	f023 0310 	bic.w	r3, r3, #16
 800f15e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	461a      	mov	r2, r3
 800f166:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f168:	61bb      	str	r3, [r7, #24]
 800f16a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f16c:	6979      	ldr	r1, [r7, #20]
 800f16e:	69ba      	ldr	r2, [r7, #24]
 800f170:	e841 2300 	strex	r3, r2, [r1]
 800f174:	613b      	str	r3, [r7, #16]
   return(result);
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d1e6      	bne.n	800f14a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	69db      	ldr	r3, [r3, #28]
 800f182:	f003 0310 	and.w	r3, r3, #16
 800f186:	2b10      	cmp	r3, #16
 800f188:	d103      	bne.n	800f192 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	2210      	movs	r2, #16
 800f190:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f198:	4619      	mov	r1, r3
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f7f2 f850 	bl	8001240 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f1a0:	e00b      	b.n	800f1ba <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f7fe fc54 	bl	800da50 <HAL_UART_RxCpltCallback>
}
 800f1a8:	e007      	b.n	800f1ba <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	699a      	ldr	r2, [r3, #24]
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	f042 0208 	orr.w	r2, r2, #8
 800f1b8:	619a      	str	r2, [r3, #24]
}
 800f1ba:	bf00      	nop
 800f1bc:	3770      	adds	r7, #112	@ 0x70
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}
 800f1c2:	bf00      	nop
 800f1c4:	58000c00 	.word	0x58000c00

0800f1c8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b0ac      	sub	sp, #176	@ 0xb0
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f1d6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	69db      	ldr	r3, [r3, #28]
 800f1e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	689b      	ldr	r3, [r3, #8]
 800f1f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f1fe:	2b22      	cmp	r3, #34	@ 0x22
 800f200:	f040 8180 	bne.w	800f504 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f20a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f20e:	e123      	b.n	800f458 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f216:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f21a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800f21e:	b2d9      	uxtb	r1, r3
 800f220:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800f224:	b2da      	uxtb	r2, r3
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f22a:	400a      	ands	r2, r1
 800f22c:	b2d2      	uxtb	r2, r2
 800f22e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f234:	1c5a      	adds	r2, r3, #1
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f240:	b29b      	uxth	r3, r3
 800f242:	3b01      	subs	r3, #1
 800f244:	b29a      	uxth	r2, r3
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	69db      	ldr	r3, [r3, #28]
 800f252:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f256:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f25a:	f003 0307 	and.w	r3, r3, #7
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d053      	beq.n	800f30a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f266:	f003 0301 	and.w	r3, r3, #1
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d011      	beq.n	800f292 <UART_RxISR_8BIT_FIFOEN+0xca>
 800f26e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f276:	2b00      	cmp	r3, #0
 800f278:	d00b      	beq.n	800f292 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	2201      	movs	r2, #1
 800f280:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f288:	f043 0201 	orr.w	r2, r3, #1
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f296:	f003 0302 	and.w	r3, r3, #2
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d011      	beq.n	800f2c2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f29e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f2a2:	f003 0301 	and.w	r3, r3, #1
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d00b      	beq.n	800f2c2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	2202      	movs	r2, #2
 800f2b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2b8:	f043 0204 	orr.w	r2, r3, #4
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f2c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f2c6:	f003 0304 	and.w	r3, r3, #4
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d011      	beq.n	800f2f2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f2ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f2d2:	f003 0301 	and.w	r3, r3, #1
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d00b      	beq.n	800f2f2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	2204      	movs	r2, #4
 800f2e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2e8:	f043 0202 	orr.w	r2, r3, #2
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d006      	beq.n	800f30a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f7fe fbb1 	bl	800da64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2200      	movs	r2, #0
 800f306:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f310:	b29b      	uxth	r3, r3
 800f312:	2b00      	cmp	r3, #0
 800f314:	f040 80a0 	bne.w	800f458 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f31e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f320:	e853 3f00 	ldrex	r3, [r3]
 800f324:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800f326:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f328:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f32c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	461a      	mov	r2, r3
 800f336:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f33a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f33c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f33e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800f340:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f342:	e841 2300 	strex	r3, r2, [r1]
 800f346:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800f348:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d1e4      	bne.n	800f318 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	3308      	adds	r3, #8
 800f354:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f356:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f358:	e853 3f00 	ldrex	r3, [r3]
 800f35c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800f35e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f360:	4b6e      	ldr	r3, [pc, #440]	@ (800f51c <UART_RxISR_8BIT_FIFOEN+0x354>)
 800f362:	4013      	ands	r3, r2
 800f364:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	3308      	adds	r3, #8
 800f36e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f372:	66ba      	str	r2, [r7, #104]	@ 0x68
 800f374:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f376:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800f378:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f37a:	e841 2300 	strex	r3, r2, [r1]
 800f37e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f380:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f382:	2b00      	cmp	r3, #0
 800f384:	d1e3      	bne.n	800f34e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2220      	movs	r2, #32
 800f38a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2200      	movs	r2, #0
 800f392:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2200      	movs	r2, #0
 800f398:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	4a60      	ldr	r2, [pc, #384]	@ (800f520 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	d021      	beq.n	800f3e8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	685b      	ldr	r3, [r3, #4]
 800f3aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d01a      	beq.n	800f3e8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f3ba:	e853 3f00 	ldrex	r3, [r3]
 800f3be:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f3c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f3c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f3c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	461a      	mov	r2, r3
 800f3d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f3d4:	657b      	str	r3, [r7, #84]	@ 0x54
 800f3d6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3d8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f3da:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f3dc:	e841 2300 	strex	r3, r2, [r1]
 800f3e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f3e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d1e4      	bne.n	800f3b2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f3ec:	2b01      	cmp	r3, #1
 800f3ee:	d130      	bne.n	800f452 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3fe:	e853 3f00 	ldrex	r3, [r3]
 800f402:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f406:	f023 0310 	bic.w	r3, r3, #16
 800f40a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	461a      	mov	r2, r3
 800f414:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f418:	643b      	str	r3, [r7, #64]	@ 0x40
 800f41a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f41c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f41e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f420:	e841 2300 	strex	r3, r2, [r1]
 800f424:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d1e4      	bne.n	800f3f6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	69db      	ldr	r3, [r3, #28]
 800f432:	f003 0310 	and.w	r3, r3, #16
 800f436:	2b10      	cmp	r3, #16
 800f438:	d103      	bne.n	800f442 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	2210      	movs	r2, #16
 800f440:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f448:	4619      	mov	r1, r3
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f7f1 fef8 	bl	8001240 <HAL_UARTEx_RxEventCallback>
 800f450:	e002      	b.n	800f458 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f7fe fafc 	bl	800da50 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f458:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d006      	beq.n	800f46e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800f460:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f464:	f003 0320 	and.w	r3, r3, #32
 800f468:	2b00      	cmp	r3, #0
 800f46a:	f47f aed1 	bne.w	800f210 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f474:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f478:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d049      	beq.n	800f514 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f486:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800f48a:	429a      	cmp	r2, r3
 800f48c:	d242      	bcs.n	800f514 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	3308      	adds	r3, #8
 800f494:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f496:	6a3b      	ldr	r3, [r7, #32]
 800f498:	e853 3f00 	ldrex	r3, [r3]
 800f49c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f49e:	69fb      	ldr	r3, [r7, #28]
 800f4a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f4a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	3308      	adds	r3, #8
 800f4ae:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f4b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f4b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f4b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f4ba:	e841 2300 	strex	r3, r2, [r1]
 800f4be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d1e3      	bne.n	800f48e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	4a16      	ldr	r2, [pc, #88]	@ (800f524 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800f4ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	e853 3f00 	ldrex	r3, [r3]
 800f4d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	f043 0320 	orr.w	r3, r3, #32
 800f4e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	461a      	mov	r2, r3
 800f4ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f4ee:	61bb      	str	r3, [r7, #24]
 800f4f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4f2:	6979      	ldr	r1, [r7, #20]
 800f4f4:	69ba      	ldr	r2, [r7, #24]
 800f4f6:	e841 2300 	strex	r3, r2, [r1]
 800f4fa:	613b      	str	r3, [r7, #16]
   return(result);
 800f4fc:	693b      	ldr	r3, [r7, #16]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d1e4      	bne.n	800f4cc <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f502:	e007      	b.n	800f514 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	699a      	ldr	r2, [r3, #24]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	f042 0208 	orr.w	r2, r2, #8
 800f512:	619a      	str	r2, [r3, #24]
}
 800f514:	bf00      	nop
 800f516:	37b0      	adds	r7, #176	@ 0xb0
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}
 800f51c:	effffffe 	.word	0xeffffffe
 800f520:	58000c00 	.word	0x58000c00
 800f524:	0800ee59 	.word	0x0800ee59

0800f528 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b0ae      	sub	sp, #184	@ 0xb8
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f536:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	69db      	ldr	r3, [r3, #28]
 800f540:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	689b      	ldr	r3, [r3, #8]
 800f554:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f55e:	2b22      	cmp	r3, #34	@ 0x22
 800f560:	f040 8184 	bne.w	800f86c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f56a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f56e:	e127      	b.n	800f7c0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f576:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f57e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f582:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800f586:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800f58a:	4013      	ands	r3, r2
 800f58c:	b29a      	uxth	r2, r3
 800f58e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f592:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f598:	1c9a      	adds	r2, r3, #2
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f5a4:	b29b      	uxth	r3, r3
 800f5a6:	3b01      	subs	r3, #1
 800f5a8:	b29a      	uxth	r2, r3
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	69db      	ldr	r3, [r3, #28]
 800f5b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f5ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f5be:	f003 0307 	and.w	r3, r3, #7
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d053      	beq.n	800f66e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f5c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f5ca:	f003 0301 	and.w	r3, r3, #1
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d011      	beq.n	800f5f6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800f5d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f5d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d00b      	beq.n	800f5f6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f5ec:	f043 0201 	orr.w	r2, r3, #1
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f5f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f5fa:	f003 0302 	and.w	r3, r3, #2
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d011      	beq.n	800f626 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f602:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f606:	f003 0301 	and.w	r3, r3, #1
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d00b      	beq.n	800f626 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	2202      	movs	r2, #2
 800f614:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f61c:	f043 0204 	orr.w	r2, r3, #4
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f626:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f62a:	f003 0304 	and.w	r3, r3, #4
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d011      	beq.n	800f656 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f632:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f636:	f003 0301 	and.w	r3, r3, #1
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d00b      	beq.n	800f656 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	2204      	movs	r2, #4
 800f644:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f64c:	f043 0202 	orr.w	r2, r3, #2
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d006      	beq.n	800f66e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f7fe f9ff 	bl	800da64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	2200      	movs	r2, #0
 800f66a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f674:	b29b      	uxth	r3, r3
 800f676:	2b00      	cmp	r3, #0
 800f678:	f040 80a2 	bne.w	800f7c0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f682:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f684:	e853 3f00 	ldrex	r3, [r3]
 800f688:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f68a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f68c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f690:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	461a      	mov	r2, r3
 800f69a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f69e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f6a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f6a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f6aa:	e841 2300 	strex	r3, r2, [r1]
 800f6ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f6b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d1e2      	bne.n	800f67c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	3308      	adds	r3, #8
 800f6bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f6c0:	e853 3f00 	ldrex	r3, [r3]
 800f6c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f6c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f6c8:	4b6e      	ldr	r3, [pc, #440]	@ (800f884 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800f6ca:	4013      	ands	r3, r2
 800f6cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	3308      	adds	r3, #8
 800f6d6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f6da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f6dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f6e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f6e2:	e841 2300 	strex	r3, r2, [r1]
 800f6e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f6e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d1e3      	bne.n	800f6b6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2220      	movs	r2, #32
 800f6f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2200      	movs	r2, #0
 800f700:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	4a60      	ldr	r2, [pc, #384]	@ (800f888 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800f708:	4293      	cmp	r3, r2
 800f70a:	d021      	beq.n	800f750 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f716:	2b00      	cmp	r3, #0
 800f718:	d01a      	beq.n	800f750 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f722:	e853 3f00 	ldrex	r3, [r3]
 800f726:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f728:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f72a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f72e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	461a      	mov	r2, r3
 800f738:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f73c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f73e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f740:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f742:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f744:	e841 2300 	strex	r3, r2, [r1]
 800f748:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f74a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d1e4      	bne.n	800f71a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f754:	2b01      	cmp	r3, #1
 800f756:	d130      	bne.n	800f7ba <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2200      	movs	r2, #0
 800f75c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f766:	e853 3f00 	ldrex	r3, [r3]
 800f76a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f76c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f76e:	f023 0310 	bic.w	r3, r3, #16
 800f772:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	461a      	mov	r2, r3
 800f77c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f780:	647b      	str	r3, [r7, #68]	@ 0x44
 800f782:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f784:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f786:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f788:	e841 2300 	strex	r3, r2, [r1]
 800f78c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f78e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f790:	2b00      	cmp	r3, #0
 800f792:	d1e4      	bne.n	800f75e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	69db      	ldr	r3, [r3, #28]
 800f79a:	f003 0310 	and.w	r3, r3, #16
 800f79e:	2b10      	cmp	r3, #16
 800f7a0:	d103      	bne.n	800f7aa <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	2210      	movs	r2, #16
 800f7a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f7b0:	4619      	mov	r1, r3
 800f7b2:	6878      	ldr	r0, [r7, #4]
 800f7b4:	f7f1 fd44 	bl	8001240 <HAL_UARTEx_RxEventCallback>
 800f7b8:	e002      	b.n	800f7c0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f7fe f948 	bl	800da50 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f7c0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d006      	beq.n	800f7d6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800f7c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f7cc:	f003 0320 	and.w	r3, r3, #32
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	f47f aecd 	bne.w	800f570 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f7dc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f7e0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d049      	beq.n	800f87c <UART_RxISR_16BIT_FIFOEN+0x354>
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f7ee:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800f7f2:	429a      	cmp	r2, r3
 800f7f4:	d242      	bcs.n	800f87c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	3308      	adds	r3, #8
 800f7fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f800:	e853 3f00 	ldrex	r3, [r3]
 800f804:	623b      	str	r3, [r7, #32]
   return(result);
 800f806:	6a3b      	ldr	r3, [r7, #32]
 800f808:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f80c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	3308      	adds	r3, #8
 800f816:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f81a:	633a      	str	r2, [r7, #48]	@ 0x30
 800f81c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f81e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f820:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f822:	e841 2300 	strex	r3, r2, [r1]
 800f826:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d1e3      	bne.n	800f7f6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	4a16      	ldr	r2, [pc, #88]	@ (800f88c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f832:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	e853 3f00 	ldrex	r3, [r3]
 800f840:	60fb      	str	r3, [r7, #12]
   return(result);
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	f043 0320 	orr.w	r3, r3, #32
 800f848:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	461a      	mov	r2, r3
 800f852:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f856:	61fb      	str	r3, [r7, #28]
 800f858:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f85a:	69b9      	ldr	r1, [r7, #24]
 800f85c:	69fa      	ldr	r2, [r7, #28]
 800f85e:	e841 2300 	strex	r3, r2, [r1]
 800f862:	617b      	str	r3, [r7, #20]
   return(result);
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d1e4      	bne.n	800f834 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f86a:	e007      	b.n	800f87c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	699a      	ldr	r2, [r3, #24]
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	f042 0208 	orr.w	r2, r2, #8
 800f87a:	619a      	str	r2, [r3, #24]
}
 800f87c:	bf00      	nop
 800f87e:	37b8      	adds	r7, #184	@ 0xb8
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}
 800f884:	effffffe 	.word	0xeffffffe
 800f888:	58000c00 	.word	0x58000c00
 800f88c:	0800f011 	.word	0x0800f011

0800f890 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f890:	b480      	push	{r7}
 800f892:	b083      	sub	sp, #12
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f898:	bf00      	nop
 800f89a:	370c      	adds	r7, #12
 800f89c:	46bd      	mov	sp, r7
 800f89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a2:	4770      	bx	lr

0800f8a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b083      	sub	sp, #12
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f8ac:	bf00      	nop
 800f8ae:	370c      	adds	r7, #12
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b6:	4770      	bx	lr

0800f8b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f8b8:	b480      	push	{r7}
 800f8ba:	b083      	sub	sp, #12
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f8c0:	bf00      	nop
 800f8c2:	370c      	adds	r7, #12
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ca:	4770      	bx	lr

0800f8cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	b085      	sub	sp, #20
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f8da:	2b01      	cmp	r3, #1
 800f8dc:	d101      	bne.n	800f8e2 <HAL_UARTEx_DisableFifoMode+0x16>
 800f8de:	2302      	movs	r3, #2
 800f8e0:	e027      	b.n	800f932 <HAL_UARTEx_DisableFifoMode+0x66>
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2201      	movs	r2, #1
 800f8e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2224      	movs	r2, #36	@ 0x24
 800f8ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	681a      	ldr	r2, [r3, #0]
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	f022 0201 	bic.w	r2, r2, #1
 800f908:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f910:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2200      	movs	r2, #0
 800f916:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	68fa      	ldr	r2, [r7, #12]
 800f91e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2220      	movs	r2, #32
 800f924:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2200      	movs	r2, #0
 800f92c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f930:	2300      	movs	r3, #0
}
 800f932:	4618      	mov	r0, r3
 800f934:	3714      	adds	r7, #20
 800f936:	46bd      	mov	sp, r7
 800f938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93c:	4770      	bx	lr

0800f93e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f93e:	b580      	push	{r7, lr}
 800f940:	b084      	sub	sp, #16
 800f942:	af00      	add	r7, sp, #0
 800f944:	6078      	str	r0, [r7, #4]
 800f946:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f94e:	2b01      	cmp	r3, #1
 800f950:	d101      	bne.n	800f956 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f952:	2302      	movs	r3, #2
 800f954:	e02d      	b.n	800f9b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2201      	movs	r2, #1
 800f95a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2224      	movs	r2, #36	@ 0x24
 800f962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	681a      	ldr	r2, [r3, #0]
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	f022 0201 	bic.w	r2, r2, #1
 800f97c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	689b      	ldr	r3, [r3, #8]
 800f984:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	683a      	ldr	r2, [r7, #0]
 800f98e:	430a      	orrs	r2, r1
 800f990:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f000 f8a0 	bl	800fad8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	68fa      	ldr	r2, [r7, #12]
 800f99e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2220      	movs	r2, #32
 800f9a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f9b0:	2300      	movs	r3, #0
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3710      	adds	r7, #16
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}

0800f9ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f9ba:	b580      	push	{r7, lr}
 800f9bc:	b084      	sub	sp, #16
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	6078      	str	r0, [r7, #4]
 800f9c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f9ca:	2b01      	cmp	r3, #1
 800f9cc:	d101      	bne.n	800f9d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f9ce:	2302      	movs	r3, #2
 800f9d0:	e02d      	b.n	800fa2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2201      	movs	r2, #1
 800f9d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2224      	movs	r2, #36	@ 0x24
 800f9de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	681a      	ldr	r2, [r3, #0]
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	f022 0201 	bic.w	r2, r2, #1
 800f9f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	689b      	ldr	r3, [r3, #8]
 800fa00:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	683a      	ldr	r2, [r7, #0]
 800fa0a:	430a      	orrs	r2, r1
 800fa0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f000 f862 	bl	800fad8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	68fa      	ldr	r2, [r7, #12]
 800fa1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2220      	movs	r2, #32
 800fa20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2200      	movs	r2, #0
 800fa28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fa2c:	2300      	movs	r3, #0
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3710      	adds	r7, #16
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}

0800fa36 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fa36:	b580      	push	{r7, lr}
 800fa38:	b08c      	sub	sp, #48	@ 0x30
 800fa3a:	af00      	add	r7, sp, #0
 800fa3c:	60f8      	str	r0, [r7, #12]
 800fa3e:	60b9      	str	r1, [r7, #8]
 800fa40:	4613      	mov	r3, r2
 800fa42:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800fa44:	2300      	movs	r3, #0
 800fa46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fa50:	2b20      	cmp	r3, #32
 800fa52:	d13b      	bne.n	800facc <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d002      	beq.n	800fa60 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800fa5a:	88fb      	ldrh	r3, [r7, #6]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d101      	bne.n	800fa64 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800fa60:	2301      	movs	r3, #1
 800fa62:	e034      	b.n	800face <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	2201      	movs	r2, #1
 800fa68:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800fa70:	88fb      	ldrh	r3, [r7, #6]
 800fa72:	461a      	mov	r2, r3
 800fa74:	68b9      	ldr	r1, [r7, #8]
 800fa76:	68f8      	ldr	r0, [r7, #12]
 800fa78:	f7ff f824 	bl	800eac4 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa80:	2b01      	cmp	r3, #1
 800fa82:	d11d      	bne.n	800fac0 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	2210      	movs	r2, #16
 800fa8a:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa92:	69bb      	ldr	r3, [r7, #24]
 800fa94:	e853 3f00 	ldrex	r3, [r3]
 800fa98:	617b      	str	r3, [r7, #20]
   return(result);
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	f043 0310 	orr.w	r3, r3, #16
 800faa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	461a      	mov	r2, r3
 800faa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faaa:	627b      	str	r3, [r7, #36]	@ 0x24
 800faac:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faae:	6a39      	ldr	r1, [r7, #32]
 800fab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fab2:	e841 2300 	strex	r3, r2, [r1]
 800fab6:	61fb      	str	r3, [r7, #28]
   return(result);
 800fab8:	69fb      	ldr	r3, [r7, #28]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d1e6      	bne.n	800fa8c <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 800fabe:	e002      	b.n	800fac6 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800fac0:	2301      	movs	r3, #1
 800fac2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800fac6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800faca:	e000      	b.n	800face <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 800facc:	2302      	movs	r3, #2
  }
}
 800face:	4618      	mov	r0, r3
 800fad0:	3730      	adds	r7, #48	@ 0x30
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
	...

0800fad8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fad8:	b480      	push	{r7}
 800fada:	b085      	sub	sp, #20
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d108      	bne.n	800fafa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2201      	movs	r2, #1
 800faec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	2201      	movs	r2, #1
 800faf4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800faf8:	e031      	b.n	800fb5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fafa:	2310      	movs	r3, #16
 800fafc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fafe:	2310      	movs	r3, #16
 800fb00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	689b      	ldr	r3, [r3, #8]
 800fb08:	0e5b      	lsrs	r3, r3, #25
 800fb0a:	b2db      	uxtb	r3, r3
 800fb0c:	f003 0307 	and.w	r3, r3, #7
 800fb10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	689b      	ldr	r3, [r3, #8]
 800fb18:	0f5b      	lsrs	r3, r3, #29
 800fb1a:	b2db      	uxtb	r3, r3
 800fb1c:	f003 0307 	and.w	r3, r3, #7
 800fb20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb22:	7bbb      	ldrb	r3, [r7, #14]
 800fb24:	7b3a      	ldrb	r2, [r7, #12]
 800fb26:	4911      	ldr	r1, [pc, #68]	@ (800fb6c <UARTEx_SetNbDataToProcess+0x94>)
 800fb28:	5c8a      	ldrb	r2, [r1, r2]
 800fb2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fb2e:	7b3a      	ldrb	r2, [r7, #12]
 800fb30:	490f      	ldr	r1, [pc, #60]	@ (800fb70 <UARTEx_SetNbDataToProcess+0x98>)
 800fb32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb34:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb38:	b29a      	uxth	r2, r3
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fb40:	7bfb      	ldrb	r3, [r7, #15]
 800fb42:	7b7a      	ldrb	r2, [r7, #13]
 800fb44:	4909      	ldr	r1, [pc, #36]	@ (800fb6c <UARTEx_SetNbDataToProcess+0x94>)
 800fb46:	5c8a      	ldrb	r2, [r1, r2]
 800fb48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fb4c:	7b7a      	ldrb	r2, [r7, #13]
 800fb4e:	4908      	ldr	r1, [pc, #32]	@ (800fb70 <UARTEx_SetNbDataToProcess+0x98>)
 800fb50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fb52:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb56:	b29a      	uxth	r2, r3
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fb5e:	bf00      	nop
 800fb60:	3714      	adds	r7, #20
 800fb62:	46bd      	mov	sp, r7
 800fb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb68:	4770      	bx	lr
 800fb6a:	bf00      	nop
 800fb6c:	0800fe88 	.word	0x0800fe88
 800fb70:	0800fe90 	.word	0x0800fe90

0800fb74 <memset>:
 800fb74:	4402      	add	r2, r0
 800fb76:	4603      	mov	r3, r0
 800fb78:	4293      	cmp	r3, r2
 800fb7a:	d100      	bne.n	800fb7e <memset+0xa>
 800fb7c:	4770      	bx	lr
 800fb7e:	f803 1b01 	strb.w	r1, [r3], #1
 800fb82:	e7f9      	b.n	800fb78 <memset+0x4>

0800fb84 <__libc_init_array>:
 800fb84:	b570      	push	{r4, r5, r6, lr}
 800fb86:	4d0d      	ldr	r5, [pc, #52]	@ (800fbbc <__libc_init_array+0x38>)
 800fb88:	4c0d      	ldr	r4, [pc, #52]	@ (800fbc0 <__libc_init_array+0x3c>)
 800fb8a:	1b64      	subs	r4, r4, r5
 800fb8c:	10a4      	asrs	r4, r4, #2
 800fb8e:	2600      	movs	r6, #0
 800fb90:	42a6      	cmp	r6, r4
 800fb92:	d109      	bne.n	800fba8 <__libc_init_array+0x24>
 800fb94:	4d0b      	ldr	r5, [pc, #44]	@ (800fbc4 <__libc_init_array+0x40>)
 800fb96:	4c0c      	ldr	r4, [pc, #48]	@ (800fbc8 <__libc_init_array+0x44>)
 800fb98:	f000 f826 	bl	800fbe8 <_init>
 800fb9c:	1b64      	subs	r4, r4, r5
 800fb9e:	10a4      	asrs	r4, r4, #2
 800fba0:	2600      	movs	r6, #0
 800fba2:	42a6      	cmp	r6, r4
 800fba4:	d105      	bne.n	800fbb2 <__libc_init_array+0x2e>
 800fba6:	bd70      	pop	{r4, r5, r6, pc}
 800fba8:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbac:	4798      	blx	r3
 800fbae:	3601      	adds	r6, #1
 800fbb0:	e7ee      	b.n	800fb90 <__libc_init_array+0xc>
 800fbb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbb6:	4798      	blx	r3
 800fbb8:	3601      	adds	r6, #1
 800fbba:	e7f2      	b.n	800fba2 <__libc_init_array+0x1e>
 800fbbc:	0800fea0 	.word	0x0800fea0
 800fbc0:	0800fea0 	.word	0x0800fea0
 800fbc4:	0800fea0 	.word	0x0800fea0
 800fbc8:	0800fea4 	.word	0x0800fea4

0800fbcc <memcpy>:
 800fbcc:	440a      	add	r2, r1
 800fbce:	4291      	cmp	r1, r2
 800fbd0:	f100 33ff 	add.w	r3, r0, #4294967295
 800fbd4:	d100      	bne.n	800fbd8 <memcpy+0xc>
 800fbd6:	4770      	bx	lr
 800fbd8:	b510      	push	{r4, lr}
 800fbda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fbde:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fbe2:	4291      	cmp	r1, r2
 800fbe4:	d1f9      	bne.n	800fbda <memcpy+0xe>
 800fbe6:	bd10      	pop	{r4, pc}

0800fbe8 <_init>:
 800fbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbea:	bf00      	nop
 800fbec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbee:	bc08      	pop	{r3}
 800fbf0:	469e      	mov	lr, r3
 800fbf2:	4770      	bx	lr

0800fbf4 <_fini>:
 800fbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbf6:	bf00      	nop
 800fbf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbfa:	bc08      	pop	{r3}
 800fbfc:	469e      	mov	lr, r3
 800fbfe:	4770      	bx	lr
