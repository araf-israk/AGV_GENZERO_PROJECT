
GENZERO_AGV_VH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b80  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08010e50  08010e50  00011e50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010ee8  08010ee8  00011ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010ef0  08010ef0  00011ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010ef4  08010ef4  00011ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08010ef8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000758  24000078  08010f70  00012078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240007d0  08010f70  000127d0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00012078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020075  00000000  00000000  000120a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000033d1  00000000  00000000  0003211b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000018c8  00000000  00000000  000354f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000135f  00000000  00000000  00036db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036284  00000000  00000000  00038117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021eb1  00000000  00000000  0006e39b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167343  00000000  00000000  0009024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f758f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006bb4  00000000  00000000  001f75d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  001fe188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000078 	.word	0x24000078
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08010e34 	.word	0x08010e34

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400007c 	.word	0x2400007c
 8000308:	08010e34 	.word	0x08010e34

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80005fc:	b4b0      	push	{r4, r5, r7}
 80005fe:	b08f      	sub	sp, #60	@ 0x3c
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000604:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000608:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 800060a:	2307      	movs	r3, #7
 800060c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000610:	2307      	movs	r3, #7
 8000612:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000616:	2301      	movs	r3, #1
 8000618:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 800061c:	23ff      	movs	r3, #255	@ 0xff
 800061e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000622:	2364      	movs	r3, #100	@ 0x64
 8000624:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000628:	2308      	movs	r3, #8
 800062a:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	461d      	mov	r5, r3
 8000630:	f107 040c 	add.w	r4, r7, #12
 8000634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800063a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800063c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000640:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	373c      	adds	r7, #60	@ 0x3c
 8000648:	46bd      	mov	sp, r7
 800064a:	bcb0      	pop	{r4, r5, r7}
 800064c:	4770      	bx	lr

0800064e <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800064e:	b580      	push	{r7, lr}
 8000650:	b084      	sub	sp, #16
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000658:	2101      	movs	r1, #1
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f9fd 	bl	8000a5a <LoRa_read>
 8000660:	4603      	mov	r3, r0
 8000662:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000664:	7bbb      	ldrb	r3, [r7, #14]
 8000666:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d107      	bne.n	800067e <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	f023 0307 	bic.w	r3, r3, #7
 8000674:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
 800067c:	e03e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d10c      	bne.n	800069e <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000688:	f023 0307 	bic.w	r3, r3, #7
 800068c:	b25b      	sxtb	r3, r3
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	b25b      	sxtb	r3, r3
 8000694:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2201      	movs	r2, #1
 800069a:	61da      	str	r2, [r3, #28]
 800069c:	e02e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	d10c      	bne.n	80006be <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80006a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006a8:	f023 0307 	bic.w	r3, r3, #7
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	f043 0303 	orr.w	r3, r3, #3
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2203      	movs	r2, #3
 80006ba:	61da      	str	r2, [r3, #28]
 80006bc:	e01e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	2b05      	cmp	r3, #5
 80006c2:	d10c      	bne.n	80006de <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80006c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006c8:	f023 0307 	bic.w	r3, r3, #7
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	f043 0305 	orr.w	r3, r3, #5
 80006d2:	b25b      	sxtb	r3, r3
 80006d4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2205      	movs	r2, #5
 80006da:	61da      	str	r2, [r3, #28]
 80006dc:	e00e      	b.n	80006fc <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	2b06      	cmp	r3, #6
 80006e2:	d10b      	bne.n	80006fc <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80006e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006e8:	f023 0307 	bic.w	r3, r3, #7
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	f043 0306 	orr.w	r3, r3, #6
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2206      	movs	r2, #6
 80006fa:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	461a      	mov	r2, r3
 8000700:	2101      	movs	r1, #1
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f000 f9c3 	bl	8000a8e <LoRa_write>
	//HAL_Delay(10);
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4613      	mov	r3, r2
 800071e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	889b      	ldrh	r3, [r3, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	4619      	mov	r1, r3
 800072c:	f008 f932 	bl	8008994 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	6998      	ldr	r0, [r3, #24]
 8000734:	88fa      	ldrh	r2, [r7, #6]
 8000736:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800073a:	68b9      	ldr	r1, [r7, #8]
 800073c:	f00b fe22 	bl	800c384 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000740:	bf00      	nop
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4618      	mov	r0, r3
 8000748:	f00c fa7c 	bl	800cc44 <HAL_SPI_GetState>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	d1f7      	bne.n	8000742 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6998      	ldr	r0, [r3, #24]
 8000756:	8b3a      	ldrh	r2, [r7, #24]
 8000758:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800075c:	6839      	ldr	r1, [r7, #0]
 800075e:	f00b ffff 	bl	800c760 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000762:	bf00      	nop
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4618      	mov	r0, r3
 800076a:	f00c fa6b 	bl	800cc44 <HAL_SPI_GetState>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d1f7      	bne.n	8000764 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	889b      	ldrh	r3, [r3, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	4619      	mov	r1, r3
 8000780:	f008 f908 	bl	8008994 <HAL_GPIO_WritePin>
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	4613      	mov	r3, r2
 800079a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	889b      	ldrh	r3, [r3, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	f008 f8f4 	bl	8008994 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	6998      	ldr	r0, [r3, #24]
 80007b0:	88fa      	ldrh	r2, [r7, #6]
 80007b2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007b6:	68b9      	ldr	r1, [r7, #8]
 80007b8:	f00b fde4 	bl	800c384 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007bc:	bf00      	nop
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00c fa3e 	bl	800cc44 <HAL_SPI_GetState>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d1f7      	bne.n	80007be <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6998      	ldr	r0, [r3, #24]
 80007d2:	8b3a      	ldrh	r2, [r7, #24]
 80007d4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007d8:	6839      	ldr	r1, [r7, #0]
 80007da:	f00b fdd3 	bl	800c384 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007de:	bf00      	nop
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f00c fa2d 	bl	800cc44 <HAL_SPI_GetState>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d1f7      	bne.n	80007e0 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	889b      	ldrh	r3, [r3, #4]
 80007f8:	2201      	movs	r2, #1
 80007fa:	4619      	mov	r1, r3
 80007fc:	f008 f8ca 	bl	8008994 <HAL_GPIO_WritePin>
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000814:	2126      	movs	r1, #38	@ 0x26
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 f91f 	bl	8000a5a <LoRa_read>
 800081c:	4603      	mov	r3, r0
 800081e:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d004      	beq.n	8000830 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000826:	7bbb      	ldrb	r3, [r7, #14]
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e003      	b.n	8000838 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000830:	7bbb      	ldrb	r3, [r7, #14]
 8000832:	f023 0308 	bic.w	r3, r3, #8
 8000836:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	461a      	mov	r2, r3
 800083c:	2126      	movs	r1, #38	@ 0x26
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f000 f925 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000844:	200a      	movs	r0, #10
 8000846:	f002 fed3 	bl	80035f0 <HAL_Delay>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000854:	b580      	push	{r7, lr}
 8000856:	b096      	sub	sp, #88	@ 0x58
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 800085c:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <LoRa_setAutoLDO+0x64>)
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4611      	mov	r1, r2
 8000864:	2250      	movs	r2, #80	@ 0x50
 8000866:	4618      	mov	r0, r3
 8000868:	f010 fad6 	bl	8010e18 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000872:	461a      	mov	r2, r3
 8000874:	2301      	movs	r3, #1
 8000876:	4093      	lsls	r3, r2
 8000878:	ee07 3a90 	vmov	s15, r3
 800087c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	3358      	adds	r3, #88	@ 0x58
 800088a:	443b      	add	r3, r7
 800088c:	3b50      	subs	r3, #80	@ 0x50
 800088e:	ed93 6b00 	vldr	d6, [r3]
 8000892:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000896:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800089a:	ee17 3a90 	vmov	r3, s15
 800089e:	2b10      	cmp	r3, #16
 80008a0:	bfcc      	ite	gt
 80008a2:	2301      	movgt	r3, #1
 80008a4:	2300      	movle	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	4619      	mov	r1, r3
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffac 	bl	8000808 <LoRa_setLowDaraRateOptimization>
}
 80008b0:	bf00      	nop
 80008b2:	3758      	adds	r7, #88	@ 0x58
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	08010e50 	.word	0x08010e50

080008bc <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	04db      	lsls	r3, r3, #19
 80008ca:	115b      	asrs	r3, r3, #5
 80008cc:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	0c1b      	lsrs	r3, r3, #16
 80008d2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80008d4:	7afb      	ldrb	r3, [r7, #11]
 80008d6:	461a      	mov	r2, r3
 80008d8:	2106      	movs	r1, #6
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 f8d7 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 80008e0:	2005      	movs	r0, #5
 80008e2:	f002 fe85 	bl	80035f0 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80008ec:	7afb      	ldrb	r3, [r7, #11]
 80008ee:	461a      	mov	r2, r3
 80008f0:	2107      	movs	r1, #7
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 f8cb 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 80008f8:	2005      	movs	r0, #5
 80008fa:	f002 fe79 	bl	80035f0 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000902:	7afb      	ldrb	r3, [r7, #11]
 8000904:	461a      	mov	r2, r3
 8000906:	2108      	movs	r1, #8
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 f8c0 	bl	8000a8e <LoRa_write>
	HAL_Delay(5);
 800090e:	2005      	movs	r0, #5
 8000910:	f002 fe6e 	bl	80035f0 <HAL_Delay>
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	2b0c      	cmp	r3, #12
 800092a:	dd01      	ble.n	8000930 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 800092c:	230c      	movs	r3, #12
 800092e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	2b06      	cmp	r3, #6
 8000934:	dc01      	bgt.n	800093a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000936:	2307      	movs	r3, #7
 8000938:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800093a:	211e      	movs	r1, #30
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 f88c 	bl	8000a5a <LoRa_read>
 8000942:	4603      	mov	r3, r0
 8000944:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000946:	200a      	movs	r0, #10
 8000948:	f002 fe52 	bl	80035f0 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	011b      	lsls	r3, r3, #4
 8000952:	b2da      	uxtb	r2, r3
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	b2db      	uxtb	r3, r3
 800095c:	4413      	add	r3, r2
 800095e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000960:	7bbb      	ldrb	r3, [r7, #14]
 8000962:	461a      	mov	r2, r3
 8000964:	211e      	movs	r1, #30
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f891 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 800096c:	200a      	movs	r0, #10
 800096e:	f002 fe3f 	bl	80035f0 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ff6e 	bl	8000854 <LoRa_setAutoLDO>
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	461a      	mov	r2, r3
 8000990:	2109      	movs	r1, #9
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 f87b 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000998:	200a      	movs	r0, #10
 800099a:	f002 fe29 	bl	80035f0 <HAL_Delay>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	2b2c      	cmp	r3, #44	@ 0x2c
 80009bc:	d801      	bhi.n	80009c2 <LoRa_setOCP+0x1a>
		current = 45;
 80009be:	232d      	movs	r3, #45	@ 0x2d
 80009c0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	2bf0      	cmp	r3, #240	@ 0xf0
 80009c6:	d901      	bls.n	80009cc <LoRa_setOCP+0x24>
		current = 240;
 80009c8:	23f0      	movs	r3, #240	@ 0xf0
 80009ca:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	2b78      	cmp	r3, #120	@ 0x78
 80009d0:	d809      	bhi.n	80009e6 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80009d2:	78fb      	ldrb	r3, [r7, #3]
 80009d4:	3b2d      	subs	r3, #45	@ 0x2d
 80009d6:	4a12      	ldr	r2, [pc, #72]	@ (8000a20 <LoRa_setOCP+0x78>)
 80009d8:	fb82 1203 	smull	r1, r2, r2, r3
 80009dc:	1052      	asrs	r2, r2, #1
 80009de:	17db      	asrs	r3, r3, #31
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	73fb      	strb	r3, [r7, #15]
 80009e4:	e00b      	b.n	80009fe <LoRa_setOCP+0x56>
	else if(current <= 240)
 80009e6:	78fb      	ldrb	r3, [r7, #3]
 80009e8:	2bf0      	cmp	r3, #240	@ 0xf0
 80009ea:	d808      	bhi.n	80009fe <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	331e      	adds	r3, #30
 80009f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a20 <LoRa_setOCP+0x78>)
 80009f2:	fb82 1203 	smull	r1, r2, r2, r3
 80009f6:	1092      	asrs	r2, r2, #2
 80009f8:	17db      	asrs	r3, r3, #31
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	3320      	adds	r3, #32
 8000a02:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	461a      	mov	r2, r3
 8000a08:	210b      	movs	r1, #11
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f83f 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000a10:	200a      	movs	r0, #10
 8000a12:	f002 fded 	bl	80035f0 <HAL_Delay>
}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	66666667 	.word	0x66666667

08000a24 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000a2c:	211e      	movs	r1, #30
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f000 f813 	bl	8000a5a <LoRa_read>
 8000a34:	4603      	mov	r3, r0
 8000a36:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	f043 0307 	orr.w	r3, r3, #7
 8000a3e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000a40:	7bbb      	ldrb	r3, [r7, #14]
 8000a42:	461a      	mov	r2, r3
 8000a44:	211e      	movs	r1, #30
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 f821 	bl	8000a8e <LoRa_write>
	HAL_Delay(10);
 8000a4c:	200a      	movs	r0, #10
 8000a4e:	f002 fdcf 	bl	80035f0 <HAL_Delay>
}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af02      	add	r7, sp, #8
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	460b      	mov	r3, r1
 8000a64:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000a66:	78fb      	ldrb	r3, [r7, #3]
 8000a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000a70:	f107 030f 	add.w	r3, r7, #15
 8000a74:	f107 010e 	add.w	r1, r7, #14
 8000a78:	2201      	movs	r2, #1
 8000a7a:	9200      	str	r2, [sp, #0]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff fe46 	bl	8000710 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af02      	add	r7, sp, #8
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	460b      	mov	r3, r1
 8000a98:	70fb      	strb	r3, [r7, #3]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000a9e:	78fb      	ldrb	r3, [r7, #3]
 8000aa0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000aa8:	78bb      	ldrb	r3, [r7, #2]
 8000aaa:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000aac:	f107 030f 	add.w	r3, r7, #15
 8000ab0:	f107 010e 	add.w	r1, r7, #14
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	9200      	str	r2, [sp, #0]
 8000ab8:	2201      	movs	r2, #1
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fe66 	bl	800078c <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

	return 1;
 8000ad0:	2301      	movs	r3, #1
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000ae6:	2105      	movs	r1, #5
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fdb0 	bl	800064e <LoRa_gotoMode>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000af6:	b590      	push	{r4, r7, lr}
 8000af8:	b089      	sub	sp, #36	@ 0x24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	4613      	mov	r3, r2
 8000b02:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
 8000b0c:	e007      	b.n	8000b1e <LoRa_receive+0x28>
		data[i]=0;
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	68ba      	ldr	r2, [r7, #8]
 8000b12:	4413      	add	r3, r2
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	dbf3      	blt.n	8000b0e <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000b26:	2101      	movs	r1, #1
 8000b28:	68f8      	ldr	r0, [r7, #12]
 8000b2a:	f7ff fd90 	bl	800064e <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000b2e:	2112      	movs	r1, #18
 8000b30:	68f8      	ldr	r0, [r7, #12]
 8000b32:	f7ff ff92 	bl	8000a5a <LoRa_read>
 8000b36:	4603      	mov	r3, r0
 8000b38:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000b3a:	7cfb      	ldrb	r3, [r7, #19]
 8000b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d02f      	beq.n	8000ba4 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000b44:	22ff      	movs	r2, #255	@ 0xff
 8000b46:	2112      	movs	r1, #18
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	f7ff ffa0 	bl	8000a8e <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000b4e:	2113      	movs	r1, #19
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f7ff ff82 	bl	8000a5a <LoRa_read>
 8000b56:	4603      	mov	r3, r0
 8000b58:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	68f8      	ldr	r0, [r7, #12]
 8000b5e:	f7ff ff7c 	bl	8000a5a <LoRa_read>
 8000b62:	4603      	mov	r3, r0
 8000b64:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000b66:	7cfb      	ldrb	r3, [r7, #19]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	210d      	movs	r1, #13
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f7ff ff8e 	bl	8000a8e <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000b72:	7cba      	ldrb	r2, [r7, #18]
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4293      	cmp	r3, r2
 8000b78:	bf28      	it	cs
 8000b7a:	4613      	movcs	r3, r2
 8000b7c:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	e00b      	b.n	8000b9c <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	18d4      	adds	r4, r2, r3
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	f7ff ff64 	bl	8000a5a <LoRa_read>
 8000b92:	4603      	mov	r3, r0
 8000b94:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	7ffb      	ldrb	r3, [r7, #31]
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dbef      	blt.n	8000b84 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000ba4:	2105      	movs	r1, #5
 8000ba6:	68f8      	ldr	r0, [r7, #12]
 8000ba8:	f7ff fd51 	bl	800064e <LoRa_gotoMode>
    return min;
 8000bac:	7ffb      	ldrb	r3, [r7, #31]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	@ 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd90      	pop	{r4, r7, pc}

08000bb6 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ff82 	bl	8000ac8 <LoRa_isvalid>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 8096 	beq.w	8000cf8 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff fd3d 	bl	800064e <LoRa_gotoMode>
			HAL_Delay(10);
 8000bd4:	200a      	movs	r0, #10
 8000bd6:	f002 fd0b 	bl	80035f0 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000bda:	2101      	movs	r1, #1
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ff3c 	bl	8000a5a <LoRa_read>
 8000be2:	4603      	mov	r3, r0
 8000be4:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000be6:	200a      	movs	r0, #10
 8000be8:	f002 fd02 	bl	80035f0 <HAL_Delay>
			data = read | 0x80;
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bf2:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000bf4:	7bbb      	ldrb	r3, [r7, #14]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ff47 	bl	8000a8e <LoRa_write>
			HAL_Delay(100);
 8000c00:	2064      	movs	r0, #100	@ 0x64
 8000c02:	f002 fcf5 	bl	80035f0 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a1b      	ldr	r3, [r3, #32]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fe55 	bl	80008bc <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000c18:	4619      	mov	r1, r3
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff feb0 	bl	8000980 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8000c26:	4619      	mov	r1, r3
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff febd 	bl	80009a8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000c2e:	2223      	movs	r2, #35	@ 0x23
 8000c30:	210c      	movs	r1, #12
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ff2b 	bl	8000a8e <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff fef3 	bl	8000a24 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff fe68 	bl	800091c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000c4c:	22ff      	movs	r2, #255	@ 0xff
 8000c4e:	211f      	movs	r1, #31
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff1c 	bl	8000a8e <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c60:	011b      	lsls	r3, r3, #4
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	4413      	add	r3, r2
 8000c70:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000c72:	7bbb      	ldrb	r3, [r7, #14]
 8000c74:	461a      	mov	r2, r3
 8000c76:	211d      	movs	r1, #29
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff08 	bl	8000a8e <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff fde8 	bl	8000854 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	461a      	mov	r2, r3
 8000c90:	2120      	movs	r1, #32
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff fefb 	bl	8000a8e <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	2121      	movs	r1, #33	@ 0x21
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff fef3 	bl	8000a8e <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000ca8:	2140      	movs	r1, #64	@ 0x40
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff fed5 	bl	8000a5a <LoRa_read>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8000cba:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000cbc:	7bbb      	ldrb	r3, [r7, #14]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	2140      	movs	r1, #64	@ 0x40
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fee3 	bl	8000a8e <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000cc8:	2101      	movs	r1, #1
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff fcbf 	bl	800064e <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000cd6:	200a      	movs	r0, #10
 8000cd8:	f002 fc8a 	bl	80035f0 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000cdc:	2142      	movs	r1, #66	@ 0x42
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff febb 	bl	8000a5a <LoRa_read>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	2b12      	cmp	r3, #18
 8000cec:	d101      	bne.n	8000cf2 <LoRa_init+0x13c>
				return LORA_OK;
 8000cee:	23c8      	movs	r3, #200	@ 0xc8
 8000cf0:	e004      	b.n	8000cfc <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8000cf2:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8000cf6:	e001      	b.n	8000cfc <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8000cf8:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ir_array_init>:
                   int      *ir_sen_read_line_old_val,
          volatile uint8_t  *ir_sen_on_line_total_num,
          volatile uint8_t  *ir_sen_on_line_mid_num,
		  volatile uint8_t  *ir_sen_on_line_left_num,
          volatile uint8_t  *ir_sen_on_line_right_num,
             const uint16_t *ir_sen_threshold){
 8000d04:	b480      	push	{r7}
 8000d06:	b087      	sub	sp, #28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	603b      	str	r3, [r7, #0]

    for(uint8_t i = 0; i < 10; i++){
 8000d12:	2300      	movs	r3, #0
 8000d14:	75fb      	strb	r3, [r7, #23]
 8000d16:	e025      	b.n	8000d64 <ir_array_init+0x60>
        //ir_struct->ir_sen_val_dma[i] = ir_sen_val_dma[i];
        ir_struct->ir_sen_val_cal[i] = ir_sen_val_cal[i];
 8000d18:	7dfb      	ldrb	r3, [r7, #23]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	441a      	add	r2, r3
 8000d20:	7dfb      	ldrb	r3, [r7, #23]
 8000d22:	8812      	ldrh	r2, [r2, #0]
 8000d24:	b291      	uxth	r1, r2
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	3308      	adds	r3, #8
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	4413      	add	r3, r2
 8000d2e:	460a      	mov	r2, r1
 8000d30:	809a      	strh	r2, [r3, #4]
        ir_struct->ir_sen_max_val[i] = ir_sen_max_val[i];
 8000d32:	7dfb      	ldrb	r3, [r7, #23]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	7dfa      	ldrb	r2, [r7, #23]
 8000d3c:	8819      	ldrh	r1, [r3, #0]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	3214      	adds	r2, #20
 8000d42:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        ir_struct->ir_sen_min_val[i] = ir_sen_min_val[i];
 8000d46:	7dfb      	ldrb	r3, [r7, #23]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	441a      	add	r2, r3
 8000d4e:	7dfb      	ldrb	r3, [r7, #23]
 8000d50:	8811      	ldrh	r1, [r2, #0]
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	331c      	adds	r3, #28
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4413      	add	r3, r2
 8000d5a:	460a      	mov	r2, r1
 8000d5c:	809a      	strh	r2, [r3, #4]
    for(uint8_t i = 0; i < 10; i++){
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
 8000d60:	3301      	adds	r3, #1
 8000d62:	75fb      	strb	r3, [r7, #23]
 8000d64:	7dfb      	ldrb	r3, [r7, #23]
 8000d66:	2b09      	cmp	r3, #9
 8000d68:	d9d6      	bls.n	8000d18 <ir_array_init+0x14>
    }
    ir_struct->ir_sen_channel_num = *ir_sen_channel_num;
 8000d6a:	6a3b      	ldr	r3, [r7, #32]
 8000d6c:	781a      	ldrb	r2, [r3, #0]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    ir_struct->ir_sen_read_line_val = *ir_sen_read_line_val;
 8000d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    ir_struct->ir_sen_read_line_old_val = *ir_sen_read_line_old_val;
 8000d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	655a      	str	r2, [r3, #84]	@ 0x54
    ir_struct->ir_sen_on_line_total_num = *ir_sen_on_line_total_num;
 8000d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    ir_struct->ir_sen_on_line_mid_num = *ir_sen_on_line_mid_num;
 8000d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    ir_struct->ir_sen_on_line_left_num = *ir_sen_on_line_left_num;
 8000da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
    ir_struct->ir_sen_on_line_right_num = *ir_sen_on_line_right_num;
 8000dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
    ir_struct->ir_sen_threshold = *ir_sen_threshold;
 8000db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dba:	881a      	ldrh	r2, [r3, #0]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

}
 8000dc2:	bf00      	nop
 8000dc4:	371c      	adds	r7, #28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <Line_Sensor_Calculation>:

void Line_Sensor_Calculation(ir_array *ir_struct){
 8000dce:	b480      	push	{r7}
 8000dd0:	b08b      	sub	sp, #44	@ 0x2c
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
    uint8_t i, on_line = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint32_t avg = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
    uint32_t sum = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
    uint16_t value;
    uint8_t on_sensor_total_number = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	76fb      	strb	r3, [r7, #27]

    uint8_t middle_on_line = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	76bb      	strb	r3, [r7, #26]
    uint8_t left_on_line = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	767b      	strb	r3, [r7, #25]
    uint8_t right_on_line = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	763b      	strb	r3, [r7, #24]


    for(i = 0; i < ir_struct->ir_sen_channel_num; i++){
 8000df4:	2300      	movs	r3, #0
 8000df6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000dfa:	e092      	b.n	8000f22 <Line_Sensor_Calculation+0x154>
        uint16_t calmin, calmax;
        uint16_t denominator;
        calmax = ir_struct->ir_sen_max_val[i];
 8000dfc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3214      	adds	r2, #20
 8000e04:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e08:	827b      	strh	r3, [r7, #18]
        calmin = ir_struct->ir_sen_min_val[i];
 8000e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	331c      	adds	r3, #28
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	889b      	ldrh	r3, [r3, #4]
 8000e18:	823b      	strh	r3, [r7, #16]

        denominator = calmax - calmin;
 8000e1a:	8a7a      	ldrh	r2, [r7, #18]
 8000e1c:	8a3b      	ldrh	r3, [r7, #16]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	81fb      	strh	r3, [r7, #14]

        int x = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
        if(denominator != 0){
 8000e26:	89fb      	ldrh	r3, [r7, #14]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d010      	beq.n	8000e4e <Line_Sensor_Calculation+0x80>
            x = (((signed long)ir_struct->ir_sen_val_dma[i]) - calmin) * 1000/denominator;
 8000e2c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	461a      	mov	r2, r3
 8000e3a:	8a3b      	ldrh	r3, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e42:	fb03 f202 	mul.w	r2, r3, r2
 8000e46:	89fb      	ldrh	r3, [r7, #14]
 8000e48:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e4c:	617b      	str	r3, [r7, #20]
        }
        if(x <0){
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	da01      	bge.n	8000e58 <Line_Sensor_Calculation+0x8a>
            x = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
        }
        if(x>1000){
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e5e:	dd02      	ble.n	8000e66 <Line_Sensor_Calculation+0x98>
            x = 1000;
 8000e60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e64:	617b      	str	r3, [r7, #20]
        }
        value = (1000-x);
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8000e6e:	81bb      	strh	r3, [r7, #12]
        ir_struct->ir_sen_val_cal[i] = value;
 8000e70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	3308      	adds	r3, #8
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	89ba      	ldrh	r2, [r7, #12]
 8000e7e:	809a      	strh	r2, [r3, #4]

        // start read line number section
        if(value > 600){
 8000e80:	89bb      	ldrh	r3, [r7, #12]
 8000e82:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000e86:	d902      	bls.n	8000e8e <Line_Sensor_Calculation+0xc0>
            on_line = 1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        }
        if(value > 200){
 8000e8e:	89bb      	ldrh	r3, [r7, #12]
 8000e90:	2bc8      	cmp	r3, #200	@ 0xc8
 8000e92:	d910      	bls.n	8000eb6 <Line_Sensor_Calculation+0xe8>
            avg += (long)(value)*(i*1000);
 8000e94:	89bb      	ldrh	r3, [r7, #12]
 8000e96:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000e9a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e9e:	fb01 f202 	mul.w	r2, r1, r2
 8000ea2:	fb02 f303 	mul.w	r3, r2, r3
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	6a3b      	ldr	r3, [r7, #32]
 8000eaa:	4413      	add	r3, r2
 8000eac:	623b      	str	r3, [r7, #32]
            sum += value;
 8000eae:	89bb      	ldrh	r3, [r7, #12]
 8000eb0:	69fa      	ldr	r2, [r7, #28]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	61fb      	str	r3, [r7, #28]
        }
        // end read line number section

        // start on line sensor calculation
        if(value > ir_struct->ir_sen_threshold){
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8000ebc:	89ba      	ldrh	r2, [r7, #12]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d923      	bls.n	8000f0a <Line_Sensor_Calculation+0x13c>
            on_sensor_total_number++;
 8000ec2:	7efb      	ldrb	r3, [r7, #27]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	76fb      	strb	r3, [r7, #27]
            ir_struct->ir_sen_val_cal_trig[i] = 0xff;
 8000ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	4413      	add	r3, r2
 8000ed0:	22ff      	movs	r2, #255	@ 0xff
 8000ed2:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
            if(i >= 2 && i <= 7){
 8000ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d906      	bls.n	8000eec <Line_Sensor_Calculation+0x11e>
 8000ede:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ee2:	2b07      	cmp	r3, #7
 8000ee4:	d802      	bhi.n	8000eec <Line_Sensor_Calculation+0x11e>
                middle_on_line++;
 8000ee6:	7ebb      	ldrb	r3, [r7, #26]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	76bb      	strb	r3, [r7, #26]
            }
            if(i <= 2){
 8000eec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d802      	bhi.n	8000efa <Line_Sensor_Calculation+0x12c>
            	left_on_line++;
 8000ef4:	7e7b      	ldrb	r3, [r7, #25]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	767b      	strb	r3, [r7, #25]
            }
            if(i >= 7){
 8000efa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	d90a      	bls.n	8000f18 <Line_Sensor_Calculation+0x14a>
            	right_on_line++;
 8000f02:	7e3b      	ldrb	r3, [r7, #24]
 8000f04:	3301      	adds	r3, #1
 8000f06:	763b      	strb	r3, [r7, #24]
 8000f08:	e006      	b.n	8000f18 <Line_Sensor_Calculation+0x14a>
            }
        }
        else{
        	ir_struct->ir_sen_val_cal_trig[i] = 0x00;
 8000f0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
    for(i = 0; i < ir_struct->ir_sen_channel_num; i++){
 8000f18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000f28:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	f4ff af65 	bcc.w	8000dfc <Line_Sensor_Calculation+0x2e>
        }
        // end on line sensor calculation
    }

    // start read line number section
    if(!on_line){
 8000f32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d120      	bne.n	8000f7c <Line_Sensor_Calculation+0x1ae>
        if(ir_struct->ir_sen_read_line_old_val < (ir_struct->ir_sen_channel_num - 1) * 1000/2){
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000f44:	3b01      	subs	r3, #1
 8000f46:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000f4a:	fb01 f303 	mul.w	r3, r1, r3
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	da04      	bge.n	8000f5c <Line_Sensor_Calculation+0x18e>
            ir_struct->ir_sen_read_line_val = 0;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 8000f5a:	e017      	b.n	8000f8c <Line_Sensor_Calculation+0x1be>
        }
        else{
            ir_struct->ir_sen_read_line_val = (ir_struct->ir_sen_channel_num - 1)*1000;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000f62:	3b01      	subs	r3, #1
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	0152      	lsls	r2, r2, #5
 8000f6a:	1ad2      	subs	r2, r2, r3
 8000f6c:	0092      	lsls	r2, r2, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 8000f7a:	e007      	b.n	8000f8c <Line_Sensor_Calculation+0x1be>
        }
    }
    else{
        ir_struct->ir_sen_read_line_val = avg/sum;
 8000f7c:	6a3a      	ldr	r2, [r7, #32]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    }
    ir_struct->ir_sen_read_line_old_val = ir_struct->ir_sen_read_line_val;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	461a      	mov	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	655a      	str	r2, [r3, #84]	@ 0x54
    // end read line number section

    // start on line sensor calculation

    ir_struct->ir_sen_on_line_left_num = left_on_line;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7e7a      	ldrb	r2, [r7, #25]
 8000f9e:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
    ir_struct->ir_sen_on_line_right_num = right_on_line;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	7e3a      	ldrb	r2, [r7, #24]
 8000fa6:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b

    ir_struct->ir_sen_on_line_mid_num = middle_on_line;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	7eba      	ldrb	r2, [r7, #26]
 8000fae:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    ir_struct->ir_sen_on_line_total_num = on_sensor_total_number;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	7efa      	ldrb	r2, [r7, #27]
 8000fb6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    // end on line sensor calculation
    // 0 - 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9

    // 2 - 7 --> mid

}
 8000fba:	bf00      	nop
 8000fbc:	372c      	adds	r7, #44	@ 0x2c
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <PID_control>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PID_control(volatile uint16_t *line_position,
				          uint16_t *motor_orientation){
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]

	pid_error = 4500 - *line_position;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	461a      	mov	r2, r3
 8000fda:	f241 1394 	movw	r3, #4500	@ 0x1194
 8000fde:	1a9b      	subs	r3, r3, r2
 8000fe0:	ee07 3a90 	vmov	s15, r3
 8000fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe8:	4b53      	ldr	r3, [pc, #332]	@ (8001138 <PID_control+0x170>)
 8000fea:	edc3 7a00 	vstr	s15, [r3]

	P = pid_error;
 8000fee:	4b52      	ldr	r3, [pc, #328]	@ (8001138 <PID_control+0x170>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a52      	ldr	r2, [pc, #328]	@ (800113c <PID_control+0x174>)
 8000ff4:	6013      	str	r3, [r2, #0]
	//I = error + I;
	I = 0;
 8000ff6:	4b52      	ldr	r3, [pc, #328]	@ (8001140 <PID_control+0x178>)
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
	D = pid_error - pid_last_error;
 8000ffe:	4b4e      	ldr	r3, [pc, #312]	@ (8001138 <PID_control+0x170>)
 8001000:	ed93 7a00 	vldr	s14, [r3]
 8001004:	4b4f      	ldr	r3, [pc, #316]	@ (8001144 <PID_control+0x17c>)
 8001006:	edd3 7a00 	vldr	s15, [r3]
 800100a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100e:	4b4e      	ldr	r3, [pc, #312]	@ (8001148 <PID_control+0x180>)
 8001010:	edc3 7a00 	vstr	s15, [r3]
	pid_last_error = pid_error;
 8001014:	4b48      	ldr	r3, [pc, #288]	@ (8001138 <PID_control+0x170>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a4a      	ldr	r2, [pc, #296]	@ (8001144 <PID_control+0x17c>)
 800101a:	6013      	str	r3, [r2, #0]

	pid_motor_speed_change = P*Kp + I*Ki + D*Kd;
 800101c:	4b47      	ldr	r3, [pc, #284]	@ (800113c <PID_control+0x174>)
 800101e:	ed93 7a00 	vldr	s14, [r3]
 8001022:	4b4a      	ldr	r3, [pc, #296]	@ (800114c <PID_control+0x184>)
 8001024:	edd3 7a00 	vldr	s15, [r3]
 8001028:	ee27 7a27 	vmul.f32	s14, s14, s15
 800102c:	4b44      	ldr	r3, [pc, #272]	@ (8001140 <PID_control+0x178>)
 800102e:	edd3 6a00 	vldr	s13, [r3]
 8001032:	4b47      	ldr	r3, [pc, #284]	@ (8001150 <PID_control+0x188>)
 8001034:	edd3 7a00 	vldr	s15, [r3]
 8001038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800103c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001040:	4b41      	ldr	r3, [pc, #260]	@ (8001148 <PID_control+0x180>)
 8001042:	edd3 6a00 	vldr	s13, [r3]
 8001046:	4b43      	ldr	r3, [pc, #268]	@ (8001154 <PID_control+0x18c>)
 8001048:	edd3 7a00 	vldr	s15, [r3]
 800104c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001054:	4b40      	ldr	r3, [pc, #256]	@ (8001158 <PID_control+0x190>)
 8001056:	edc3 7a00 	vstr	s15, [r3]

	if(*motor_orientation == 0xF11F){
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 8001062:	4293      	cmp	r3, r2
 8001064:	d123      	bne.n	80010ae <PID_control+0xe6>
		pid_motor_speed_A = pid_motor_base_speed + pid_motor_speed_change;
 8001066:	4b3d      	ldr	r3, [pc, #244]	@ (800115c <PID_control+0x194>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	ee07 3a90 	vmov	s15, r3
 800106e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001072:	4b39      	ldr	r3, [pc, #228]	@ (8001158 <PID_control+0x190>)
 8001074:	edd3 7a00 	vldr	s15, [r3]
 8001078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800107c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001080:	ee17 3a90 	vmov	r3, s15
 8001084:	b29a      	uxth	r2, r3
 8001086:	4b36      	ldr	r3, [pc, #216]	@ (8001160 <PID_control+0x198>)
 8001088:	801a      	strh	r2, [r3, #0]
		pid_motor_speed_B = pid_motor_base_speed - pid_motor_speed_change;
 800108a:	4b34      	ldr	r3, [pc, #208]	@ (800115c <PID_control+0x194>)
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	ee07 3a90 	vmov	s15, r3
 8001092:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001096:	4b30      	ldr	r3, [pc, #192]	@ (8001158 <PID_control+0x190>)
 8001098:	edd3 7a00 	vldr	s15, [r3]
 800109c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010a4:	ee17 3a90 	vmov	r3, s15
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001164 <PID_control+0x19c>)
 80010ac:	801a      	strh	r2, [r3, #0]
	}
	if(*motor_orientation == 0xF00F){
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d123      	bne.n	8001102 <PID_control+0x13a>
		pid_motor_speed_A = pid_motor_base_speed - pid_motor_speed_change;
 80010ba:	4b28      	ldr	r3, [pc, #160]	@ (800115c <PID_control+0x194>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	ee07 3a90 	vmov	s15, r3
 80010c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010c6:	4b24      	ldr	r3, [pc, #144]	@ (8001158 <PID_control+0x190>)
 80010c8:	edd3 7a00 	vldr	s15, [r3]
 80010cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010d4:	ee17 3a90 	vmov	r3, s15
 80010d8:	b29a      	uxth	r2, r3
 80010da:	4b21      	ldr	r3, [pc, #132]	@ (8001160 <PID_control+0x198>)
 80010dc:	801a      	strh	r2, [r3, #0]
		pid_motor_speed_B = pid_motor_base_speed + pid_motor_speed_change;
 80010de:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <PID_control+0x194>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	ee07 3a90 	vmov	s15, r3
 80010e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <PID_control+0x190>)
 80010ec:	edd3 7a00 	vldr	s15, [r3]
 80010f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010f8:	ee17 3a90 	vmov	r3, s15
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	4b19      	ldr	r3, [pc, #100]	@ (8001164 <PID_control+0x19c>)
 8001100:	801a      	strh	r2, [r3, #0]
	}


	if(pid_motor_speed_A > max_rs485_speed){
 8001102:	4b17      	ldr	r3, [pc, #92]	@ (8001160 <PID_control+0x198>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	b29b      	uxth	r3, r3
 8001108:	2b64      	cmp	r3, #100	@ 0x64
 800110a:	d902      	bls.n	8001112 <PID_control+0x14a>
		pid_motor_speed_A = max_rs485_speed;
 800110c:	4b14      	ldr	r3, [pc, #80]	@ (8001160 <PID_control+0x198>)
 800110e:	2264      	movs	r2, #100	@ 0x64
 8001110:	801a      	strh	r2, [r3, #0]
	}
	if(pid_motor_speed_A < 0){
 8001112:	4b13      	ldr	r3, [pc, #76]	@ (8001160 <PID_control+0x198>)
 8001114:	881b      	ldrh	r3, [r3, #0]
		pid_motor_speed_A = 0;
	}
	if(pid_motor_speed_B > max_rs485_speed){
 8001116:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <PID_control+0x19c>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	2b64      	cmp	r3, #100	@ 0x64
 800111e:	d902      	bls.n	8001126 <PID_control+0x15e>
		pid_motor_speed_B = max_rs485_speed;
 8001120:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <PID_control+0x19c>)
 8001122:	2264      	movs	r2, #100	@ 0x64
 8001124:	801a      	strh	r2, [r3, #0]
	}
	if(pid_motor_speed_B < 0){
 8001126:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <PID_control+0x19c>)
 8001128:	881b      	ldrh	r3, [r3, #0]
		pid_motor_speed_B = 0;
	}

}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	24000688 	.word	0x24000688
 800113c:	24000674 	.word	0x24000674
 8001140:	24000678 	.word	0x24000678
 8001144:	24000684 	.word	0x24000684
 8001148:	2400067c 	.word	0x2400067c
 800114c:	24000054 	.word	0x24000054
 8001150:	24000680 	.word	0x24000680
 8001154:	24000058 	.word	0x24000058
 8001158:	2400068c 	.word	0x2400068c
 800115c:	2400005c 	.word	0x2400005c
 8001160:	24000690 	.word	0x24000690
 8001164:	24000692 	.word	0x24000692

08001168 <PID_Forward_Rotation>:
		pid_motor_speed_B = 0;
	}

}

void PID_Forward_Rotation(uint16_t enableA, uint16_t enableB, uint16_t *orientation){
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	603a      	str	r2, [r7, #0]
 8001172:	80fb      	strh	r3, [r7, #6]
 8001174:	460b      	mov	r3, r1
 8001176:	80bb      	strh	r3, [r7, #4]

	if(*orientation == 0xF11F){
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 8001180:	4293      	cmp	r3, r2
 8001182:	d11b      	bne.n	80011bc <PID_Forward_Rotation+0x54>
		//LEFT
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001184:	2201      	movs	r2, #1
 8001186:	2120      	movs	r1, #32
 8001188:	481f      	ldr	r0, [pc, #124]	@ (8001208 <PID_Forward_Rotation+0xa0>)
 800118a:	f007 fc03 	bl	8008994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	2110      	movs	r1, #16
 8001192:	481d      	ldr	r0, [pc, #116]	@ (8001208 <PID_Forward_Rotation+0xa0>)
 8001194:	f007 fbfe 	bl	8008994 <HAL_GPIO_WritePin>

		//RIGHT
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	2104      	movs	r1, #4
 800119c:	481a      	ldr	r0, [pc, #104]	@ (8001208 <PID_Forward_Rotation+0xa0>)
 800119e:	f007 fbf9 	bl	8008994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 80011a2:	2201      	movs	r2, #1
 80011a4:	2108      	movs	r1, #8
 80011a6:	4818      	ldr	r0, [pc, #96]	@ (8001208 <PID_Forward_Rotation+0xa0>)
 80011a8:	f007 fbf4 	bl	8008994 <HAL_GPIO_WritePin>

		//Right
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, enableA);
 80011ac:	4b17      	ldr	r3, [pc, #92]	@ (800120c <PID_Forward_Rotation+0xa4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	88fa      	ldrh	r2, [r7, #6]
 80011b2:	635a      	str	r2, [r3, #52]	@ 0x34

		//Left
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, enableB);
 80011b4:	4b15      	ldr	r3, [pc, #84]	@ (800120c <PID_Forward_Rotation+0xa4>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	88ba      	ldrh	r2, [r7, #4]
 80011ba:	639a      	str	r2, [r3, #56]	@ 0x38

//		set_speed(0x01, enableB, 0);
//		set_speed(0x02, enableA, 1);
	}

	if(*orientation == 0xF00F){
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d11b      	bne.n	8001200 <PID_Forward_Rotation+0x98>

		//LEFT
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2120      	movs	r1, #32
 80011cc:	480e      	ldr	r0, [pc, #56]	@ (8001208 <PID_Forward_Rotation+0xa0>)
 80011ce:	f007 fbe1 	bl	8008994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2110      	movs	r1, #16
 80011d6:	480c      	ldr	r0, [pc, #48]	@ (8001208 <PID_Forward_Rotation+0xa0>)
 80011d8:	f007 fbdc 	bl	8008994 <HAL_GPIO_WritePin>

		//RIGHT
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	2104      	movs	r1, #4
 80011e0:	4809      	ldr	r0, [pc, #36]	@ (8001208 <PID_Forward_Rotation+0xa0>)
 80011e2:	f007 fbd7 	bl	8008994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2108      	movs	r1, #8
 80011ea:	4807      	ldr	r0, [pc, #28]	@ (8001208 <PID_Forward_Rotation+0xa0>)
 80011ec:	f007 fbd2 	bl	8008994 <HAL_GPIO_WritePin>

		//Right
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, enableA);
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <PID_Forward_Rotation+0xa4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	88fa      	ldrh	r2, [r7, #6]
 80011f6:	635a      	str	r2, [r3, #52]	@ 0x34

		//Left
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, enableB);
 80011f8:	4b04      	ldr	r3, [pc, #16]	@ (800120c <PID_Forward_Rotation+0xa4>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	88ba      	ldrh	r2, [r7, #4]
 80011fe:	639a      	str	r2, [r3, #56]	@ 0x38

	}



}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	58020000 	.word	0x58020000
 800120c:	240002ec 	.word	0x240002ec

08001210 <PID_Motor_Turn_Left>:

void PID_Motor_Turn_Left(uint16_t _speed, uint16_t *orientation){
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	80fb      	strh	r3, [r7, #6]
	if(*orientation == 0xF11F){
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 8001224:	4293      	cmp	r3, r2
 8001226:	d11b      	bne.n	8001260 <PID_Motor_Turn_Left+0x50>
		//LEFT
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001228:	2201      	movs	r2, #1
 800122a:	2120      	movs	r1, #32
 800122c:	481f      	ldr	r0, [pc, #124]	@ (80012ac <PID_Motor_Turn_Left+0x9c>)
 800122e:	f007 fbb1 	bl	8008994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	2110      	movs	r1, #16
 8001236:	481d      	ldr	r0, [pc, #116]	@ (80012ac <PID_Motor_Turn_Left+0x9c>)
 8001238:	f007 fbac 	bl	8008994 <HAL_GPIO_WritePin>

		//RIGHT
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 800123c:	2201      	movs	r2, #1
 800123e:	2104      	movs	r1, #4
 8001240:	481a      	ldr	r0, [pc, #104]	@ (80012ac <PID_Motor_Turn_Left+0x9c>)
 8001242:	f007 fba7 	bl	8008994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	2108      	movs	r1, #8
 800124a:	4818      	ldr	r0, [pc, #96]	@ (80012ac <PID_Motor_Turn_Left+0x9c>)
 800124c:	f007 fba2 	bl	8008994 <HAL_GPIO_WritePin>

		//Right
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, _speed);
 8001250:	4b17      	ldr	r3, [pc, #92]	@ (80012b0 <PID_Motor_Turn_Left+0xa0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	88fa      	ldrh	r2, [r7, #6]
 8001256:	635a      	str	r2, [r3, #52]	@ 0x34

		//Left
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, _speed);
 8001258:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <PID_Motor_Turn_Left+0xa0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	88fa      	ldrh	r2, [r7, #6]
 800125e:	639a      	str	r2, [r3, #56]	@ 0x38

//		set_speed(0x01, _speed, 0);
//		set_speed(0x02, _speed, 0);
	}

	if(*orientation == 0xF00F){
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 8001268:	4293      	cmp	r3, r2
 800126a:	d11b      	bne.n	80012a4 <PID_Motor_Turn_Left+0x94>

		//LEFT
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 800126c:	2201      	movs	r2, #1
 800126e:	2120      	movs	r1, #32
 8001270:	480e      	ldr	r0, [pc, #56]	@ (80012ac <PID_Motor_Turn_Left+0x9c>)
 8001272:	f007 fb8f 	bl	8008994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	2110      	movs	r1, #16
 800127a:	480c      	ldr	r0, [pc, #48]	@ (80012ac <PID_Motor_Turn_Left+0x9c>)
 800127c:	f007 fb8a 	bl	8008994 <HAL_GPIO_WritePin>

		//RIGHT
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8001280:	2201      	movs	r2, #1
 8001282:	2104      	movs	r1, #4
 8001284:	4809      	ldr	r0, [pc, #36]	@ (80012ac <PID_Motor_Turn_Left+0x9c>)
 8001286:	f007 fb85 	bl	8008994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	2108      	movs	r1, #8
 800128e:	4807      	ldr	r0, [pc, #28]	@ (80012ac <PID_Motor_Turn_Left+0x9c>)
 8001290:	f007 fb80 	bl	8008994 <HAL_GPIO_WritePin>

		//Right
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, _speed);
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <PID_Motor_Turn_Left+0xa0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	88fa      	ldrh	r2, [r7, #6]
 800129a:	635a      	str	r2, [r3, #52]	@ 0x34

		//Left
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, _speed);
 800129c:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <PID_Motor_Turn_Left+0xa0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	88fa      	ldrh	r2, [r7, #6]
 80012a2:	639a      	str	r2, [r3, #56]	@ 0x38

//		set_speed(0x01, _speed, 0);
//		set_speed(0x02, _speed, 0);

	}
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	58020000 	.word	0x58020000
 80012b0:	240002ec 	.word	0x240002ec

080012b4 <PID_Motor_Turn_Right>:

void PID_Motor_Turn_Right(uint16_t _speed, uint16_t *orientation){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	80fb      	strh	r3, [r7, #6]
	if(*orientation == 0xF11F){
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d11b      	bne.n	8001304 <PID_Motor_Turn_Right+0x50>
		//LEFT
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2120      	movs	r1, #32
 80012d0:	481f      	ldr	r0, [pc, #124]	@ (8001350 <PID_Motor_Turn_Right+0x9c>)
 80012d2:	f007 fb5f 	bl	8008994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 80012d6:	2201      	movs	r2, #1
 80012d8:	2110      	movs	r1, #16
 80012da:	481d      	ldr	r0, [pc, #116]	@ (8001350 <PID_Motor_Turn_Right+0x9c>)
 80012dc:	f007 fb5a 	bl	8008994 <HAL_GPIO_WritePin>

		//RIGHT
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2104      	movs	r1, #4
 80012e4:	481a      	ldr	r0, [pc, #104]	@ (8001350 <PID_Motor_Turn_Right+0x9c>)
 80012e6:	f007 fb55 	bl	8008994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 80012ea:	2201      	movs	r2, #1
 80012ec:	2108      	movs	r1, #8
 80012ee:	4818      	ldr	r0, [pc, #96]	@ (8001350 <PID_Motor_Turn_Right+0x9c>)
 80012f0:	f007 fb50 	bl	8008994 <HAL_GPIO_WritePin>

		//Right
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, _speed);
 80012f4:	4b17      	ldr	r3, [pc, #92]	@ (8001354 <PID_Motor_Turn_Right+0xa0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	88fa      	ldrh	r2, [r7, #6]
 80012fa:	635a      	str	r2, [r3, #52]	@ 0x34

		//Left
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, _speed);
 80012fc:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <PID_Motor_Turn_Right+0xa0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	88fa      	ldrh	r2, [r7, #6]
 8001302:	639a      	str	r2, [r3, #56]	@ 0x38

//		set_speed(0x01, _speed, 1);
//		set_speed(0x02, _speed, 1);
	}

	if(*orientation == 0xF00F){
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 800130c:	4293      	cmp	r3, r2
 800130e:	d11b      	bne.n	8001348 <PID_Motor_Turn_Right+0x94>

		//LEFT
		HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	2120      	movs	r1, #32
 8001314:	480e      	ldr	r0, [pc, #56]	@ (8001350 <PID_Motor_Turn_Right+0x9c>)
 8001316:	f007 fb3d 	bl	8008994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 800131a:	2201      	movs	r2, #1
 800131c:	2110      	movs	r1, #16
 800131e:	480c      	ldr	r0, [pc, #48]	@ (8001350 <PID_Motor_Turn_Right+0x9c>)
 8001320:	f007 fb38 	bl	8008994 <HAL_GPIO_WritePin>

		//RIGHT
		HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	2104      	movs	r1, #4
 8001328:	4809      	ldr	r0, [pc, #36]	@ (8001350 <PID_Motor_Turn_Right+0x9c>)
 800132a:	f007 fb33 	bl	8008994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	2108      	movs	r1, #8
 8001332:	4807      	ldr	r0, [pc, #28]	@ (8001350 <PID_Motor_Turn_Right+0x9c>)
 8001334:	f007 fb2e 	bl	8008994 <HAL_GPIO_WritePin>

		//Right
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, _speed);
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <PID_Motor_Turn_Right+0xa0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	88fa      	ldrh	r2, [r7, #6]
 800133e:	635a      	str	r2, [r3, #52]	@ 0x34

		//Left
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, _speed);
 8001340:	4b04      	ldr	r3, [pc, #16]	@ (8001354 <PID_Motor_Turn_Right+0xa0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	88fa      	ldrh	r2, [r7, #6]
 8001346:	639a      	str	r2, [r3, #56]	@ 0x38
//		set_speed(0x01, _speed, 1);
//		set_speed(0x02, _speed, 1);

	}

}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	58020000 	.word	0x58020000
 8001354:	240002ec 	.word	0x240002ec

08001358 <PID_Motor_All_Break>:


void PID_Motor_All_Break(){
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	//LEFT
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	2120      	movs	r1, #32
 8001360:	480d      	ldr	r0, [pc, #52]	@ (8001398 <PID_Motor_All_Break+0x40>)
 8001362:	f007 fb17 	bl	8008994 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	2110      	movs	r1, #16
 800136a:	480b      	ldr	r0, [pc, #44]	@ (8001398 <PID_Motor_All_Break+0x40>)
 800136c:	f007 fb12 	bl	8008994 <HAL_GPIO_WritePin>

	//RIGHT
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001370:	2200      	movs	r2, #0
 8001372:	2104      	movs	r1, #4
 8001374:	4808      	ldr	r0, [pc, #32]	@ (8001398 <PID_Motor_All_Break+0x40>)
 8001376:	f007 fb0d 	bl	8008994 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	2108      	movs	r1, #8
 800137e:	4806      	ldr	r0, [pc, #24]	@ (8001398 <PID_Motor_All_Break+0x40>)
 8001380:	f007 fb08 	bl	8008994 <HAL_GPIO_WritePin>

	//Right
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001384:	4b05      	ldr	r3, [pc, #20]	@ (800139c <PID_Motor_All_Break+0x44>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2200      	movs	r2, #0
 800138a:	635a      	str	r2, [r3, #52]	@ 0x34

	//Left
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800138c:	4b03      	ldr	r3, [pc, #12]	@ (800139c <PID_Motor_All_Break+0x44>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2200      	movs	r2, #0
 8001392:	639a      	str	r2, [r3, #56]	@ 0x38
//	motor_enable_velocity_mode(0x01);
//	motor_enable_velocity_mode(0x02);
//	set_speed(0x01, 0, 1);
//	set_speed(0x02, 0, 0);

}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	58020000 	.word	0x58020000
 800139c:	240002ec 	.word	0x240002ec

080013a0 <AGV_waiting>:

void AGV_waiting(){
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
	if(Target_Station == Current_Station){
 80013a4:	4b51      	ldr	r3, [pc, #324]	@ (80014ec <AGV_waiting+0x14c>)
 80013a6:	781a      	ldrb	r2, [r3, #0]
 80013a8:	4b51      	ldr	r3, [pc, #324]	@ (80014f0 <AGV_waiting+0x150>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	f040 808d 	bne.w	80014cc <AGV_waiting+0x12c>
		On_Task = 0xF00F;
 80013b2:	4b50      	ldr	r3, [pc, #320]	@ (80014f4 <AGV_waiting+0x154>)
 80013b4:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 80013b8:	801a      	strh	r2, [r3, #0]
		if(Target_Station != Station){
 80013ba:	4b4c      	ldr	r3, [pc, #304]	@ (80014ec <AGV_waiting+0x14c>)
 80013bc:	781a      	ldrb	r2, [r3, #0]
 80013be:	4b4e      	ldr	r3, [pc, #312]	@ (80014f8 <AGV_waiting+0x158>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	f000 8082 	beq.w	80014cc <AGV_waiting+0x12c>
			Target_Station = Station;
 80013c8:	4b4b      	ldr	r3, [pc, #300]	@ (80014f8 <AGV_waiting+0x158>)
 80013ca:	781a      	ldrb	r2, [r3, #0]
 80013cc:	4b47      	ldr	r3, [pc, #284]	@ (80014ec <AGV_waiting+0x14c>)
 80013ce:	701a      	strb	r2, [r3, #0]
			if(Current_Station == 0){
 80013d0:	4b47      	ldr	r3, [pc, #284]	@ (80014f0 <AGV_waiting+0x150>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d125      	bne.n	8001424 <AGV_waiting+0x84>
				if(Target_Station == 1){
 80013d8:	4b44      	ldr	r3, [pc, #272]	@ (80014ec <AGV_waiting+0x14c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d10e      	bne.n	80013fe <AGV_waiting+0x5e>
					on_task_decisions[0] = 'L';
 80013e0:	4b46      	ldr	r3, [pc, #280]	@ (80014fc <AGV_waiting+0x15c>)
 80013e2:	224c      	movs	r2, #76	@ 0x4c
 80013e4:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'L';
 80013e6:	4b45      	ldr	r3, [pc, #276]	@ (80014fc <AGV_waiting+0x15c>)
 80013e8:	224c      	movs	r2, #76	@ 0x4c
 80013ea:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'E';
 80013ec:	4b43      	ldr	r3, [pc, #268]	@ (80014fc <AGV_waiting+0x15c>)
 80013ee:	2245      	movs	r2, #69	@ 0x45
 80013f0:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 80013f2:	4b42      	ldr	r3, [pc, #264]	@ (80014fc <AGV_waiting+0x15c>)
 80013f4:	2245      	movs	r2, #69	@ 0x45
 80013f6:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 80013f8:	4b40      	ldr	r3, [pc, #256]	@ (80014fc <AGV_waiting+0x15c>)
 80013fa:	2245      	movs	r2, #69	@ 0x45
 80013fc:	711a      	strb	r2, [r3, #4]
				}
				if(Target_Station == 2){
 80013fe:	4b3b      	ldr	r3, [pc, #236]	@ (80014ec <AGV_waiting+0x14c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d10e      	bne.n	8001424 <AGV_waiting+0x84>
					on_task_decisions[0] = 'L';
 8001406:	4b3d      	ldr	r3, [pc, #244]	@ (80014fc <AGV_waiting+0x15c>)
 8001408:	224c      	movs	r2, #76	@ 0x4c
 800140a:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'F';
 800140c:	4b3b      	ldr	r3, [pc, #236]	@ (80014fc <AGV_waiting+0x15c>)
 800140e:	2246      	movs	r2, #70	@ 0x46
 8001410:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'L';
 8001412:	4b3a      	ldr	r3, [pc, #232]	@ (80014fc <AGV_waiting+0x15c>)
 8001414:	224c      	movs	r2, #76	@ 0x4c
 8001416:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 8001418:	4b38      	ldr	r3, [pc, #224]	@ (80014fc <AGV_waiting+0x15c>)
 800141a:	2245      	movs	r2, #69	@ 0x45
 800141c:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 800141e:	4b37      	ldr	r3, [pc, #220]	@ (80014fc <AGV_waiting+0x15c>)
 8001420:	2245      	movs	r2, #69	@ 0x45
 8001422:	711a      	strb	r2, [r3, #4]
				}
			}

			if(Current_Station == 1){
 8001424:	4b32      	ldr	r3, [pc, #200]	@ (80014f0 <AGV_waiting+0x150>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d125      	bne.n	8001478 <AGV_waiting+0xd8>
				if(Target_Station == 0){
 800142c:	4b2f      	ldr	r3, [pc, #188]	@ (80014ec <AGV_waiting+0x14c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10e      	bne.n	8001452 <AGV_waiting+0xb2>
					on_task_decisions[0] = 'R';
 8001434:	4b31      	ldr	r3, [pc, #196]	@ (80014fc <AGV_waiting+0x15c>)
 8001436:	2252      	movs	r2, #82	@ 0x52
 8001438:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'R';
 800143a:	4b30      	ldr	r3, [pc, #192]	@ (80014fc <AGV_waiting+0x15c>)
 800143c:	2252      	movs	r2, #82	@ 0x52
 800143e:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'E';
 8001440:	4b2e      	ldr	r3, [pc, #184]	@ (80014fc <AGV_waiting+0x15c>)
 8001442:	2245      	movs	r2, #69	@ 0x45
 8001444:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 8001446:	4b2d      	ldr	r3, [pc, #180]	@ (80014fc <AGV_waiting+0x15c>)
 8001448:	2245      	movs	r2, #69	@ 0x45
 800144a:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 800144c:	4b2b      	ldr	r3, [pc, #172]	@ (80014fc <AGV_waiting+0x15c>)
 800144e:	2245      	movs	r2, #69	@ 0x45
 8001450:	711a      	strb	r2, [r3, #4]
				}
				if(Target_Station == 2){
 8001452:	4b26      	ldr	r3, [pc, #152]	@ (80014ec <AGV_waiting+0x14c>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d10e      	bne.n	8001478 <AGV_waiting+0xd8>
					on_task_decisions[0] = 'L';
 800145a:	4b28      	ldr	r3, [pc, #160]	@ (80014fc <AGV_waiting+0x15c>)
 800145c:	224c      	movs	r2, #76	@ 0x4c
 800145e:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'L';
 8001460:	4b26      	ldr	r3, [pc, #152]	@ (80014fc <AGV_waiting+0x15c>)
 8001462:	224c      	movs	r2, #76	@ 0x4c
 8001464:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'E';
 8001466:	4b25      	ldr	r3, [pc, #148]	@ (80014fc <AGV_waiting+0x15c>)
 8001468:	2245      	movs	r2, #69	@ 0x45
 800146a:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 800146c:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <AGV_waiting+0x15c>)
 800146e:	2245      	movs	r2, #69	@ 0x45
 8001470:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 8001472:	4b22      	ldr	r3, [pc, #136]	@ (80014fc <AGV_waiting+0x15c>)
 8001474:	2245      	movs	r2, #69	@ 0x45
 8001476:	711a      	strb	r2, [r3, #4]
				}
			}

			if(Current_Station == 2){
 8001478:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <AGV_waiting+0x150>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d125      	bne.n	80014cc <AGV_waiting+0x12c>
				if(Target_Station == 0){
 8001480:	4b1a      	ldr	r3, [pc, #104]	@ (80014ec <AGV_waiting+0x14c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10e      	bne.n	80014a6 <AGV_waiting+0x106>
					on_task_decisions[0] = 'R';
 8001488:	4b1c      	ldr	r3, [pc, #112]	@ (80014fc <AGV_waiting+0x15c>)
 800148a:	2252      	movs	r2, #82	@ 0x52
 800148c:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'F';
 800148e:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <AGV_waiting+0x15c>)
 8001490:	2246      	movs	r2, #70	@ 0x46
 8001492:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'R';
 8001494:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <AGV_waiting+0x15c>)
 8001496:	2252      	movs	r2, #82	@ 0x52
 8001498:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 800149a:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <AGV_waiting+0x15c>)
 800149c:	2245      	movs	r2, #69	@ 0x45
 800149e:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 80014a0:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <AGV_waiting+0x15c>)
 80014a2:	2245      	movs	r2, #69	@ 0x45
 80014a4:	711a      	strb	r2, [r3, #4]
				}
				if(Target_Station == 1){
 80014a6:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <AGV_waiting+0x14c>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d10e      	bne.n	80014cc <AGV_waiting+0x12c>
					on_task_decisions[0] = 'R';
 80014ae:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <AGV_waiting+0x15c>)
 80014b0:	2252      	movs	r2, #82	@ 0x52
 80014b2:	701a      	strb	r2, [r3, #0]
					on_task_decisions[1] = 'R';
 80014b4:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <AGV_waiting+0x15c>)
 80014b6:	2252      	movs	r2, #82	@ 0x52
 80014b8:	705a      	strb	r2, [r3, #1]
					on_task_decisions[2] = 'E';
 80014ba:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <AGV_waiting+0x15c>)
 80014bc:	2245      	movs	r2, #69	@ 0x45
 80014be:	709a      	strb	r2, [r3, #2]
					on_task_decisions[3] = 'E';
 80014c0:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <AGV_waiting+0x15c>)
 80014c2:	2245      	movs	r2, #69	@ 0x45
 80014c4:	70da      	strb	r2, [r3, #3]
					on_task_decisions[4] = 'E';
 80014c6:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <AGV_waiting+0x15c>)
 80014c8:	2245      	movs	r2, #69	@ 0x45
 80014ca:	711a      	strb	r2, [r3, #4]
				}
			}

		}
	}
	if(Target_Station != Current_Station){
 80014cc:	4b07      	ldr	r3, [pc, #28]	@ (80014ec <AGV_waiting+0x14c>)
 80014ce:	781a      	ldrb	r2, [r3, #0]
 80014d0:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <AGV_waiting+0x150>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d003      	beq.n	80014e0 <AGV_waiting+0x140>
		On_Task = 0xF11F;
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <AGV_waiting+0x154>)
 80014da:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 80014de:	801a      	strh	r2, [r3, #0]
	}
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	24000697 	.word	0x24000697
 80014f0:	24000696 	.word	0x24000696
 80014f4:	2400005e 	.word	0x2400005e
 80014f8:	24000695 	.word	0x24000695
 80014fc:	24000060 	.word	0x24000060

08001500 <AGV_Turn_Detection_Completion>:

void AGV_Turn_Detection_Completion(volatile uint16_t *sensor_calibrated_values,
								   volatile uint8_t  *sensor_middle_on_line_number,
								   volatile uint8_t  *sensor_total_on_line_number,
								   	   	   	uint8_t  *decision_array,
											uint16_t *orientation){
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
#define first_timer_buffer 800
#define second_timer_buffer 300
#define skip_turn_timer_buffer 200
#define base_speed 50

	uint8_t _turn_decide = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	75fb      	strb	r3, [r7, #23]

	if((((sensor_calibrated_values[8] > black_detection_thresh_hold) && (sensor_calibrated_values[9] > black_detection_thresh_hold)) ||
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	3310      	adds	r3, #16
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	b29b      	uxth	r3, r3
 800151a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800151e:	d906      	bls.n	800152e <AGV_Turn_Detection_Completion+0x2e>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	3312      	adds	r3, #18
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800152c:	d80e      	bhi.n	800154c <AGV_Turn_Detection_Completion+0x4c>
	   ((sensor_calibrated_values[0] > black_detection_thresh_hold) && (sensor_calibrated_values[1] > black_detection_thresh_hold))) && (*sensor_total_on_line_number >= 8)){
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	b29b      	uxth	r3, r3
	if((((sensor_calibrated_values[8] > black_detection_thresh_hold) && (sensor_calibrated_values[9] > black_detection_thresh_hold)) ||
 8001534:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001538:	f240 80b1 	bls.w	800169e <AGV_Turn_Detection_Completion+0x19e>
	   ((sensor_calibrated_values[0] > black_detection_thresh_hold) && (sensor_calibrated_values[1] > black_detection_thresh_hold))) && (*sensor_total_on_line_number >= 8)){
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3302      	adds	r3, #2
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	b29b      	uxth	r3, r3
 8001544:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001548:	f240 80a9 	bls.w	800169e <AGV_Turn_Detection_Completion+0x19e>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b07      	cmp	r3, #7
 8001554:	f240 80a3 	bls.w	800169e <AGV_Turn_Detection_Completion+0x19e>
//		if((*sensor_middle_on_line_number >= 5) || (*sensor_middle_on_line_number == 6)){


			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_7);
 8001558:	2180      	movs	r1, #128	@ 0x80
 800155a:	481e      	ldr	r0, [pc, #120]	@ (80015d4 <AGV_Turn_Detection_Completion+0xd4>)
 800155c:	f007 fa33 	bl	80089c6 <HAL_GPIO_TogglePin>

//			PID_Forward_Rotation(base_speed, base_speed, orientation);
//			HAL_Delay(100);

			agv_turn_count += 1;
 8001560:	4b1d      	ldr	r3, [pc, #116]	@ (80015d8 <AGV_Turn_Detection_Completion+0xd8>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <AGV_Turn_Detection_Completion+0xd8>)
 800156a:	701a      	strb	r2, [r3, #0]

			PID_Motor_All_Break();
 800156c:	f7ff fef4 	bl	8001358 <PID_Motor_All_Break>

			HAL_Delay(2000);
 8001570:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001574:	f002 f83c 	bl	80035f0 <HAL_Delay>

			if(decision_array[agv_turn_count - 1] == 'E'){
 8001578:	4b17      	ldr	r3, [pc, #92]	@ (80015d8 <AGV_Turn_Detection_Completion+0xd8>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	3b01      	subs	r3, #1
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	4413      	add	r3, r2
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b45      	cmp	r3, #69	@ 0x45
 8001586:	d131      	bne.n	80015ec <AGV_Turn_Detection_Completion+0xec>
//								  if(line_sensor_front_on_line_total_number >= 9){
//									  agv_orientation = 0xF11F;
//								  }


								PID_Motor_All_Break();
 8001588:	f7ff fee6 	bl	8001358 <PID_Motor_All_Break>



								Current_Station = Target_Station;
 800158c:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <AGV_Turn_Detection_Completion+0xdc>)
 800158e:	781a      	ldrb	r2, [r3, #0]
 8001590:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <AGV_Turn_Detection_Completion+0xe0>)
 8001592:	701a      	strb	r2, [r3, #0]

								On_Task = 0xF00F;
 8001594:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <AGV_Turn_Detection_Completion+0xe4>)
 8001596:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 800159a:	801a      	strh	r2, [r3, #0]

								if(agv_orientation == 0xF00F){
 800159c:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <AGV_Turn_Detection_Completion+0xe8>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d104      	bne.n	80015b2 <AGV_Turn_Detection_Completion+0xb2>
									agv_orientation = 0xF11F;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <AGV_Turn_Detection_Completion+0xe8>)
 80015aa:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 80015ae:	801a      	strh	r2, [r3, #0]
 80015b0:	e009      	b.n	80015c6 <AGV_Turn_Detection_Completion+0xc6>
								}
								else if(agv_orientation == 0xF11F){
 80015b2:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <AGV_Turn_Detection_Completion+0xe8>)
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d103      	bne.n	80015c6 <AGV_Turn_Detection_Completion+0xc6>
									agv_orientation = 0xF00F;
 80015be:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <AGV_Turn_Detection_Completion+0xe8>)
 80015c0:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 80015c4:	801a      	strh	r2, [r3, #0]
								}

								_turn_decide = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	75fb      	strb	r3, [r7, #23]
								agv_turn_count = 0;
 80015ca:	4b03      	ldr	r3, [pc, #12]	@ (80015d8 <AGV_Turn_Detection_Completion+0xd8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	e065      	b.n	800169e <AGV_Turn_Detection_Completion+0x19e>
 80015d2:	bf00      	nop
 80015d4:	58021800 	.word	0x58021800
 80015d8:	24000694 	.word	0x24000694
 80015dc:	24000697 	.word	0x24000697
 80015e0:	24000696 	.word	0x24000696
 80015e4:	2400005e 	.word	0x2400005e
 80015e8:	24000050 	.word	0x24000050


			}
			else if(decision_array[agv_turn_count - 1] != 'E'){
 80015ec:	4ba6      	ldr	r3, [pc, #664]	@ (8001888 <AGV_Turn_Detection_Completion+0x388>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	4413      	add	r3, r2
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b45      	cmp	r3, #69	@ 0x45
 80015fa:	d050      	beq.n	800169e <AGV_Turn_Detection_Completion+0x19e>

				//line_gap_disable = 1;

				PID_Forward_Rotation(base_speed, base_speed, orientation);
 80015fc:	6a3a      	ldr	r2, [r7, #32]
 80015fe:	2132      	movs	r1, #50	@ 0x32
 8001600:	2032      	movs	r0, #50	@ 0x32
 8001602:	f7ff fdb1 	bl	8001168 <PID_Forward_Rotation>
				HAL_Delay(first_timer_buffer);
 8001606:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800160a:	f001 fff1 	bl	80035f0 <HAL_Delay>
				PID_Motor_All_Break();
 800160e:	f7ff fea3 	bl	8001358 <PID_Motor_All_Break>

				HAL_Delay(1000);
 8001612:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001616:	f001 ffeb 	bl	80035f0 <HAL_Delay>

				if(decision_array[agv_turn_count - 1] == 'R'){
 800161a:	4b9b      	ldr	r3, [pc, #620]	@ (8001888 <AGV_Turn_Detection_Completion+0x388>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	3b01      	subs	r3, #1
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	4413      	add	r3, r2
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b52      	cmp	r3, #82	@ 0x52
 8001628:	d10f      	bne.n	800164a <AGV_Turn_Detection_Completion+0x14a>

					PID_Motor_Turn_Right(base_speed, orientation);
 800162a:	6a39      	ldr	r1, [r7, #32]
 800162c:	2032      	movs	r0, #50	@ 0x32
 800162e:	f7ff fe41 	bl	80012b4 <PID_Motor_Turn_Right>
					HAL_Delay(second_timer_buffer);
 8001632:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001636:	f001 ffdb 	bl	80035f0 <HAL_Delay>
					PID_Motor_All_Break();
 800163a:	f7ff fe8d 	bl	8001358 <PID_Motor_All_Break>

					HAL_Delay(1000);
 800163e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001642:	f001 ffd5 	bl	80035f0 <HAL_Delay>

					_turn_decide = 'R';
 8001646:	2352      	movs	r3, #82	@ 0x52
 8001648:	75fb      	strb	r3, [r7, #23]
				}
				if(decision_array[agv_turn_count - 1] == 'L'){
 800164a:	4b8f      	ldr	r3, [pc, #572]	@ (8001888 <AGV_Turn_Detection_Completion+0x388>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	3b01      	subs	r3, #1
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	4413      	add	r3, r2
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b4c      	cmp	r3, #76	@ 0x4c
 8001658:	d10f      	bne.n	800167a <AGV_Turn_Detection_Completion+0x17a>

					PID_Motor_Turn_Left(base_speed, orientation);
 800165a:	6a39      	ldr	r1, [r7, #32]
 800165c:	2032      	movs	r0, #50	@ 0x32
 800165e:	f7ff fdd7 	bl	8001210 <PID_Motor_Turn_Left>
					HAL_Delay(second_timer_buffer);
 8001662:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001666:	f001 ffc3 	bl	80035f0 <HAL_Delay>
					PID_Motor_All_Break();
 800166a:	f7ff fe75 	bl	8001358 <PID_Motor_All_Break>

					HAL_Delay(1000);
 800166e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001672:	f001 ffbd 	bl	80035f0 <HAL_Delay>

					_turn_decide = 'L';
 8001676:	234c      	movs	r3, #76	@ 0x4c
 8001678:	75fb      	strb	r3, [r7, #23]
				}
				if(decision_array[agv_turn_count - 1] == 'F'){
 800167a:	4b83      	ldr	r3, [pc, #524]	@ (8001888 <AGV_Turn_Detection_Completion+0x388>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	3b01      	subs	r3, #1
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	4413      	add	r3, r2
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b46      	cmp	r3, #70	@ 0x46
 8001688:	d109      	bne.n	800169e <AGV_Turn_Detection_Completion+0x19e>

					PID_Forward_Rotation(base_speed, base_speed, orientation);
 800168a:	6a3a      	ldr	r2, [r7, #32]
 800168c:	2132      	movs	r1, #50	@ 0x32
 800168e:	2032      	movs	r0, #50	@ 0x32
 8001690:	f7ff fd6a 	bl	8001168 <PID_Forward_Rotation>
					HAL_Delay(skip_turn_timer_buffer);
 8001694:	20c8      	movs	r0, #200	@ 0xc8
 8001696:	f001 ffab 	bl	80035f0 <HAL_Delay>
					_turn_decide = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	75fb      	strb	r3, [r7, #23]
				}
			}

	}

	if((sensor_calibrated_values[8] < white_detection_thresh_hold) && (sensor_calibrated_values[9] < white_detection_thresh_hold) &&
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	3310      	adds	r3, #16
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016aa:	d260      	bcs.n	800176e <AGV_Turn_Detection_Completion+0x26e>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3312      	adds	r3, #18
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016b8:	d259      	bcs.n	800176e <AGV_Turn_Detection_Completion+0x26e>
			(sensor_calibrated_values[0] > black_detection_thresh_hold) && (sensor_calibrated_values[1] > black_detection_thresh_hold)){
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	b29b      	uxth	r3, r3
	if((sensor_calibrated_values[8] < white_detection_thresh_hold) && (sensor_calibrated_values[9] < white_detection_thresh_hold) &&
 80016c0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016c4:	d953      	bls.n	800176e <AGV_Turn_Detection_Completion+0x26e>
			(sensor_calibrated_values[0] > black_detection_thresh_hold) && (sensor_calibrated_values[1] > black_detection_thresh_hold)){
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	3302      	adds	r3, #2
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016d2:	d94c      	bls.n	800176e <AGV_Turn_Detection_Completion+0x26e>
			if((*sensor_middle_on_line_number >= 3) && (*sensor_middle_on_line_number < 6)){
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d947      	bls.n	800176e <AGV_Turn_Detection_Completion+0x26e>
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	d842      	bhi.n	800176e <AGV_Turn_Detection_Completion+0x26e>

				//line_gap_disable = 1;

			PID_Forward_Rotation(base_speed, base_speed, orientation);
 80016e8:	6a3a      	ldr	r2, [r7, #32]
 80016ea:	2132      	movs	r1, #50	@ 0x32
 80016ec:	2032      	movs	r0, #50	@ 0x32
 80016ee:	f7ff fd3b 	bl	8001168 <PID_Forward_Rotation>
			HAL_Delay(first_timer_buffer);
 80016f2:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80016f6:	f001 ff7b 	bl	80035f0 <HAL_Delay>
			PID_Motor_All_Break();
 80016fa:	f7ff fe2d 	bl	8001358 <PID_Motor_All_Break>

			HAL_Delay(1000);
 80016fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001702:	f001 ff75 	bl	80035f0 <HAL_Delay>

			agv_turn_count += 1;
 8001706:	4b60      	ldr	r3, [pc, #384]	@ (8001888 <AGV_Turn_Detection_Completion+0x388>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	3301      	adds	r3, #1
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4b5e      	ldr	r3, [pc, #376]	@ (8001888 <AGV_Turn_Detection_Completion+0x388>)
 8001710:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_7);
 8001712:	2180      	movs	r1, #128	@ 0x80
 8001714:	485d      	ldr	r0, [pc, #372]	@ (800188c <AGV_Turn_Detection_Completion+0x38c>)
 8001716:	f007 f956 	bl	80089c6 <HAL_GPIO_TogglePin>

			if(decision_array[agv_turn_count - 1] == 'L'){
 800171a:	4b5b      	ldr	r3, [pc, #364]	@ (8001888 <AGV_Turn_Detection_Completion+0x388>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	3b01      	subs	r3, #1
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	4413      	add	r3, r2
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b4c      	cmp	r3, #76	@ 0x4c
 8001728:	d10f      	bne.n	800174a <AGV_Turn_Detection_Completion+0x24a>

				PID_Motor_Turn_Left(base_speed, orientation);
 800172a:	6a39      	ldr	r1, [r7, #32]
 800172c:	2032      	movs	r0, #50	@ 0x32
 800172e:	f7ff fd6f 	bl	8001210 <PID_Motor_Turn_Left>
				HAL_Delay(second_timer_buffer);
 8001732:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001736:	f001 ff5b 	bl	80035f0 <HAL_Delay>
				PID_Motor_All_Break();
 800173a:	f7ff fe0d 	bl	8001358 <PID_Motor_All_Break>

				HAL_Delay(1000);
 800173e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001742:	f001 ff55 	bl	80035f0 <HAL_Delay>

				_turn_decide = 'L';
 8001746:	234c      	movs	r3, #76	@ 0x4c
 8001748:	75fb      	strb	r3, [r7, #23]
			}
			if(decision_array[agv_turn_count - 1] == 'F'){
 800174a:	4b4f      	ldr	r3, [pc, #316]	@ (8001888 <AGV_Turn_Detection_Completion+0x388>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	3b01      	subs	r3, #1
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	4413      	add	r3, r2
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b46      	cmp	r3, #70	@ 0x46
 8001758:	d109      	bne.n	800176e <AGV_Turn_Detection_Completion+0x26e>

				PID_Forward_Rotation(base_speed, base_speed, orientation);
 800175a:	6a3a      	ldr	r2, [r7, #32]
 800175c:	2132      	movs	r1, #50	@ 0x32
 800175e:	2032      	movs	r0, #50	@ 0x32
 8001760:	f7ff fd02 	bl	8001168 <PID_Forward_Rotation>
				HAL_Delay(skip_turn_timer_buffer);
 8001764:	20c8      	movs	r0, #200	@ 0xc8
 8001766:	f001 ff43 	bl	80035f0 <HAL_Delay>
				_turn_decide = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	75fb      	strb	r3, [r7, #23]
			}

		}

	}
	if((sensor_calibrated_values[8] > black_detection_thresh_hold) && (sensor_calibrated_values[9] > black_detection_thresh_hold) &&
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	3310      	adds	r3, #16
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	b29b      	uxth	r3, r3
 8001776:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800177a:	d960      	bls.n	800183e <AGV_Turn_Detection_Completion+0x33e>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	3312      	adds	r3, #18
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	b29b      	uxth	r3, r3
 8001784:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001788:	d959      	bls.n	800183e <AGV_Turn_Detection_Completion+0x33e>
			(sensor_calibrated_values[0] < white_detection_thresh_hold) && (sensor_calibrated_values[1] < white_detection_thresh_hold)){
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	b29b      	uxth	r3, r3
	if((sensor_calibrated_values[8] > black_detection_thresh_hold) && (sensor_calibrated_values[9] > black_detection_thresh_hold) &&
 8001790:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001794:	d253      	bcs.n	800183e <AGV_Turn_Detection_Completion+0x33e>
			(sensor_calibrated_values[0] < white_detection_thresh_hold) && (sensor_calibrated_values[1] < white_detection_thresh_hold)){
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3302      	adds	r3, #2
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	b29b      	uxth	r3, r3
 800179e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017a2:	d24c      	bcs.n	800183e <AGV_Turn_Detection_Completion+0x33e>
			if((*sensor_middle_on_line_number >= 3) && (*sensor_middle_on_line_number < 6)){
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d947      	bls.n	800183e <AGV_Turn_Detection_Completion+0x33e>
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b05      	cmp	r3, #5
 80017b6:	d842      	bhi.n	800183e <AGV_Turn_Detection_Completion+0x33e>

				//line_gap_disable = 1;

			PID_Forward_Rotation(base_speed, base_speed, orientation);
 80017b8:	6a3a      	ldr	r2, [r7, #32]
 80017ba:	2132      	movs	r1, #50	@ 0x32
 80017bc:	2032      	movs	r0, #50	@ 0x32
 80017be:	f7ff fcd3 	bl	8001168 <PID_Forward_Rotation>
			HAL_Delay(first_timer_buffer);
 80017c2:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80017c6:	f001 ff13 	bl	80035f0 <HAL_Delay>
			PID_Motor_All_Break();
 80017ca:	f7ff fdc5 	bl	8001358 <PID_Motor_All_Break>

			HAL_Delay(1000);
 80017ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017d2:	f001 ff0d 	bl	80035f0 <HAL_Delay>

			agv_turn_count += 1;
 80017d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001888 <AGV_Turn_Detection_Completion+0x388>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	3301      	adds	r3, #1
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	4b2a      	ldr	r3, [pc, #168]	@ (8001888 <AGV_Turn_Detection_Completion+0x388>)
 80017e0:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_7);
 80017e2:	2180      	movs	r1, #128	@ 0x80
 80017e4:	4829      	ldr	r0, [pc, #164]	@ (800188c <AGV_Turn_Detection_Completion+0x38c>)
 80017e6:	f007 f8ee 	bl	80089c6 <HAL_GPIO_TogglePin>

			if(decision_array[agv_turn_count - 1] == 'R'){
 80017ea:	4b27      	ldr	r3, [pc, #156]	@ (8001888 <AGV_Turn_Detection_Completion+0x388>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b52      	cmp	r3, #82	@ 0x52
 80017f8:	d10f      	bne.n	800181a <AGV_Turn_Detection_Completion+0x31a>

				PID_Motor_Turn_Right(base_speed, orientation);
 80017fa:	6a39      	ldr	r1, [r7, #32]
 80017fc:	2032      	movs	r0, #50	@ 0x32
 80017fe:	f7ff fd59 	bl	80012b4 <PID_Motor_Turn_Right>
				HAL_Delay(second_timer_buffer);
 8001802:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001806:	f001 fef3 	bl	80035f0 <HAL_Delay>
				PID_Motor_All_Break();
 800180a:	f7ff fda5 	bl	8001358 <PID_Motor_All_Break>

				HAL_Delay(1000);
 800180e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001812:	f001 feed 	bl	80035f0 <HAL_Delay>

				_turn_decide = 'R';
 8001816:	2352      	movs	r3, #82	@ 0x52
 8001818:	75fb      	strb	r3, [r7, #23]
			}
			if(decision_array[agv_turn_count - 1] == 'F'){
 800181a:	4b1b      	ldr	r3, [pc, #108]	@ (8001888 <AGV_Turn_Detection_Completion+0x388>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	3b01      	subs	r3, #1
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	4413      	add	r3, r2
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b46      	cmp	r3, #70	@ 0x46
 8001828:	d109      	bne.n	800183e <AGV_Turn_Detection_Completion+0x33e>

				PID_Forward_Rotation(base_speed, base_speed, orientation);
 800182a:	6a3a      	ldr	r2, [r7, #32]
 800182c:	2132      	movs	r1, #50	@ 0x32
 800182e:	2032      	movs	r0, #50	@ 0x32
 8001830:	f7ff fc9a 	bl	8001168 <PID_Forward_Rotation>
				HAL_Delay(skip_turn_timer_buffer);
 8001834:	20c8      	movs	r0, #200	@ 0xc8
 8001836:	f001 fedb 	bl	80035f0 <HAL_Delay>
				_turn_decide = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	75fb      	strb	r3, [r7, #23]
	}




	if(_turn_decide == 'L'){
 800183e:	7dfb      	ldrb	r3, [r7, #23]
 8001840:	2b4c      	cmp	r3, #76	@ 0x4c
 8001842:	d11c      	bne.n	800187e <AGV_Turn_Detection_Completion+0x37e>
		while((sensor_calibrated_values[5] < white_detection_thresh_hold) || (sensor_calibrated_values[6] < white_detection_thresh_hold)){
 8001844:	e009      	b.n	800185a <AGV_Turn_Detection_Completion+0x35a>
			  Line_Sensor_Calculation(&front_array);
 8001846:	4812      	ldr	r0, [pc, #72]	@ (8001890 <AGV_Turn_Detection_Completion+0x390>)
 8001848:	f7ff fac1 	bl	8000dce <Line_Sensor_Calculation>
			  Line_Sensor_Calculation(&back_array);
 800184c:	4811      	ldr	r0, [pc, #68]	@ (8001894 <AGV_Turn_Detection_Completion+0x394>)
 800184e:	f7ff fabe 	bl	8000dce <Line_Sensor_Calculation>

			PID_Motor_Turn_Left(base_speed, orientation);
 8001852:	6a39      	ldr	r1, [r7, #32]
 8001854:	2032      	movs	r0, #50	@ 0x32
 8001856:	f7ff fcdb 	bl	8001210 <PID_Motor_Turn_Left>
		while((sensor_calibrated_values[5] < white_detection_thresh_hold) || (sensor_calibrated_values[6] < white_detection_thresh_hold)){
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	330a      	adds	r3, #10
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	b29b      	uxth	r3, r3
 8001862:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001866:	d3ee      	bcc.n	8001846 <AGV_Turn_Detection_Completion+0x346>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	330c      	adds	r3, #12
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	b29b      	uxth	r3, r3
 8001870:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001874:	d3e7      	bcc.n	8001846 <AGV_Turn_Detection_Completion+0x346>
		}
		PID_Motor_All_Break();
 8001876:	f7ff fd6f 	bl	8001358 <PID_Motor_All_Break>
		_turn_decide = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	75fb      	strb	r3, [r7, #23]
//
//
//		}

	}
	if(_turn_decide == 'R'){
 800187e:	7dfb      	ldrb	r3, [r7, #23]
 8001880:	2b52      	cmp	r3, #82	@ 0x52
 8001882:	d125      	bne.n	80018d0 <AGV_Turn_Detection_Completion+0x3d0>
		while((sensor_calibrated_values[6] < white_detection_thresh_hold) || (sensor_calibrated_values[5] < white_detection_thresh_hold)){
 8001884:	e012      	b.n	80018ac <AGV_Turn_Detection_Completion+0x3ac>
 8001886:	bf00      	nop
 8001888:	24000694 	.word	0x24000694
 800188c:	58021800 	.word	0x58021800
 8001890:	240005a4 	.word	0x240005a4
 8001894:	2400060c 	.word	0x2400060c
			  Line_Sensor_Calculation(&front_array);
 8001898:	480f      	ldr	r0, [pc, #60]	@ (80018d8 <AGV_Turn_Detection_Completion+0x3d8>)
 800189a:	f7ff fa98 	bl	8000dce <Line_Sensor_Calculation>
			  Line_Sensor_Calculation(&back_array);
 800189e:	480f      	ldr	r0, [pc, #60]	@ (80018dc <AGV_Turn_Detection_Completion+0x3dc>)
 80018a0:	f7ff fa95 	bl	8000dce <Line_Sensor_Calculation>

			PID_Motor_Turn_Right(base_speed, orientation);
 80018a4:	6a39      	ldr	r1, [r7, #32]
 80018a6:	2032      	movs	r0, #50	@ 0x32
 80018a8:	f7ff fd04 	bl	80012b4 <PID_Motor_Turn_Right>
		while((sensor_calibrated_values[6] < white_detection_thresh_hold) || (sensor_calibrated_values[5] < white_detection_thresh_hold)){
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	330c      	adds	r3, #12
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80018b8:	d3ee      	bcc.n	8001898 <AGV_Turn_Detection_Completion+0x398>
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	330a      	adds	r3, #10
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80018c6:	d3e7      	bcc.n	8001898 <AGV_Turn_Detection_Completion+0x398>
		}
		PID_Motor_All_Break();
 80018c8:	f7ff fd46 	bl	8001358 <PID_Motor_All_Break>
		_turn_decide = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	75fb      	strb	r3, [r7, #23]
//
//		}
	}


}
 80018d0:	bf00      	nop
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	240005a4 	.word	0x240005a4
 80018dc:	2400060c 	.word	0x2400060c

080018e0 <HAL_GPIO_EXTI_Callback>:
//		Station_id[3] = uid[3];
//		Station_id[4] = uid[4];
//	}
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d102      	bne.n	80018f6 <HAL_GPIO_EXTI_Callback+0x16>
		Station = 0;
 80018f0:	4b18      	ldr	r3, [pc, #96]	@ (8001954 <HAL_GPIO_EXTI_Callback+0x74>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_1){
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d102      	bne.n	8001902 <HAL_GPIO_EXTI_Callback+0x22>
		Station = 1;
 80018fc:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <HAL_GPIO_EXTI_Callback+0x74>)
 80018fe:	2201      	movs	r2, #1
 8001900:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_2){
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	2b04      	cmp	r3, #4
 8001906:	d102      	bne.n	800190e <HAL_GPIO_EXTI_Callback+0x2e>
		Station = 2;
 8001908:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <HAL_GPIO_EXTI_Callback+0x74>)
 800190a:	2202      	movs	r2, #2
 800190c:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_3){
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	2b08      	cmp	r3, #8
 8001912:	d102      	bne.n	800191a <HAL_GPIO_EXTI_Callback+0x3a>
		Station = 3;
 8001914:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <HAL_GPIO_EXTI_Callback+0x74>)
 8001916:	2203      	movs	r2, #3
 8001918:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_4){
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	2b10      	cmp	r3, #16
 800191e:	d103      	bne.n	8001928 <HAL_GPIO_EXTI_Callback+0x48>
		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_7);
 8001920:	2180      	movs	r1, #128	@ 0x80
 8001922:	480d      	ldr	r0, [pc, #52]	@ (8001958 <HAL_GPIO_EXTI_Callback+0x78>)
 8001924:	f007 f84f 	bl	80089c6 <HAL_GPIO_TogglePin>
	}

	if(GPIO_Pin == myLoRa.DIO0_pin){
 8001928:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <HAL_GPIO_EXTI_Callback+0x7c>)
 800192a:	8a9b      	ldrh	r3, [r3, #20]
 800192c:	88fa      	ldrh	r2, [r7, #6]
 800192e:	429a      	cmp	r2, r3
 8001930:	d10b      	bne.n	800194a <HAL_GPIO_EXTI_Callback+0x6a>
		LoRa_receive(&myLoRa, LoraRxBuffer, 128);
 8001932:	2280      	movs	r2, #128	@ 0x80
 8001934:	490a      	ldr	r1, [pc, #40]	@ (8001960 <HAL_GPIO_EXTI_Callback+0x80>)
 8001936:	4809      	ldr	r0, [pc, #36]	@ (800195c <HAL_GPIO_EXTI_Callback+0x7c>)
 8001938:	f7ff f8dd 	bl	8000af6 <LoRa_receive>
		HAL_GPIO_TogglePin(LORA_RX_LED_GPIO_Port, LORA_RX_LED_Pin);
 800193c:	2140      	movs	r1, #64	@ 0x40
 800193e:	4809      	ldr	r0, [pc, #36]	@ (8001964 <HAL_GPIO_EXTI_Callback+0x84>)
 8001940:	f007 f841 	bl	80089c6 <HAL_GPIO_TogglePin>
		lora_receive_toggle = 255;
 8001944:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <HAL_GPIO_EXTI_Callback+0x88>)
 8001946:	22ff      	movs	r2, #255	@ 0xff
 8001948:	701a      	strb	r2, [r3, #0]

	}
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	24000695 	.word	0x24000695
 8001958:	58021800 	.word	0x58021800
 800195c:	24000698 	.word	0x24000698
 8001960:	24000748 	.word	0x24000748
 8001964:	58020c00 	.word	0x58020c00
 8001968:	240007c8 	.word	0x240007c8

0800196c <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	807b      	strh	r3, [r7, #2]
	//rs485_time2 = HAL_GetTick();
	//rs485_exc_time = rs485_time2 - rs485_time1;

//	rs485_fail_check = 0;
	if(huart->Instance == USART1){
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a08      	ldr	r2, [pc, #32]	@ (80019a0 <HAL_UARTEx_RxEventCallback+0x34>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d102      	bne.n	8001988 <HAL_UARTEx_RxEventCallback+0x1c>
		rs485_UART_receive_handler(&m1_driver);
 8001982:	4808      	ldr	r0, [pc, #32]	@ (80019a4 <HAL_UARTEx_RxEventCallback+0x38>)
 8001984:	f001 f881 	bl	8002a8a <rs485_UART_receive_handler>
	}
	if(huart->Instance == USART3){
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a06      	ldr	r2, [pc, #24]	@ (80019a8 <HAL_UARTEx_RxEventCallback+0x3c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d102      	bne.n	8001998 <HAL_UARTEx_RxEventCallback+0x2c>
		rs485_UART_receive_handler(&m2_driver);
 8001992:	4806      	ldr	r0, [pc, #24]	@ (80019ac <HAL_UARTEx_RxEventCallback+0x40>)
 8001994:	f001 f879 	bl	8002a8a <rs485_UART_receive_handler>
	}
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40011000 	.word	0x40011000
 80019a4:	240004f8 	.word	0x240004f8
 80019a8:	40004800 	.word	0x40004800
 80019ac:	24000530 	.word	0x24000530

080019b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM3){
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a08      	ldr	r2, [pc, #32]	@ (80019e0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d102      	bne.n	80019c8 <HAL_TIM_PeriodElapsedCallback+0x18>
    	rs485_connection_lost_handler(&m1_driver);
 80019c2:	4808      	ldr	r0, [pc, #32]	@ (80019e4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80019c4:	f001 f886 	bl	8002ad4 <rs485_connection_lost_handler>

    }
    if(htim->Instance == TIM4){
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a06      	ldr	r2, [pc, #24]	@ (80019e8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d102      	bne.n	80019d8 <HAL_TIM_PeriodElapsedCallback+0x28>
    	rs485_connection_lost_handler(&m2_driver);
 80019d2:	4806      	ldr	r0, [pc, #24]	@ (80019ec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80019d4:	f001 f87e 	bl	8002ad4 <rs485_connection_lost_handler>

    }
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40000400 	.word	0x40000400
 80019e4:	240004f8 	.word	0x240004f8
 80019e8:	40000800 	.word	0x40000800
 80019ec:	24000530 	.word	0x24000530

080019f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019f0:	b5b0      	push	{r4, r5, r7, lr}
 80019f2:	b094      	sub	sp, #80	@ 0x50
 80019f4:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f6:	f001 fd69 	bl	80034cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019fa:	f000 f9c5 	bl	8001d88 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80019fe:	f000 fa35 	bl	8001e6c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a02:	f000 fea9 	bl	8002758 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a06:	f000 fe7f 	bl	8002708 <MX_DMA_Init>
  MX_ADC1_Init();
 8001a0a:	f000 fa63 	bl	8001ed4 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001a0e:	f000 fb73 	bl	80020f8 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 8001a12:	f000 fde1 	bl	80025d8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001a16:	f000 fccb 	bl	80023b0 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001a1a:	f000 fc73 	bl	8002304 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001a1e:	f000 fe27 	bl	8002670 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001a22:	f000 fd39 	bl	8002498 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a26:	f000 fd87 	bl	8002538 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  m1_driver.rs485_id = 0x01;
 8001a2a:	4b9e      	ldr	r3, [pc, #632]	@ (8001ca4 <main+0x2b4>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
  m1_driver.rs485_huart = &huart1;
 8001a30:	4b9c      	ldr	r3, [pc, #624]	@ (8001ca4 <main+0x2b4>)
 8001a32:	4a9d      	ldr	r2, [pc, #628]	@ (8001ca8 <main+0x2b8>)
 8001a34:	615a      	str	r2, [r3, #20]
  m1_driver.rs485_timer = &htim3;
 8001a36:	4b9b      	ldr	r3, [pc, #620]	@ (8001ca4 <main+0x2b4>)
 8001a38:	4a9c      	ldr	r2, [pc, #624]	@ (8001cac <main+0x2bc>)
 8001a3a:	619a      	str	r2, [r3, #24]
  m1_driver.rs485_enable_port = RS485_M1_TX_EN_GPIO_Port;
 8001a3c:	4b99      	ldr	r3, [pc, #612]	@ (8001ca4 <main+0x2b4>)
 8001a3e:	4a9c      	ldr	r2, [pc, #624]	@ (8001cb0 <main+0x2c0>)
 8001a40:	605a      	str	r2, [r3, #4]
  m1_driver.rs485_enable_pin = RS485_M1_TX_EN_Pin;
 8001a42:	4b98      	ldr	r3, [pc, #608]	@ (8001ca4 <main+0x2b4>)
 8001a44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a48:	811a      	strh	r2, [r3, #8]
  m1_driver.rs485_rx_led_port = RS485_M1_RX_LED_GPIO_Port;
 8001a4a:	4b96      	ldr	r3, [pc, #600]	@ (8001ca4 <main+0x2b4>)
 8001a4c:	4a99      	ldr	r2, [pc, #612]	@ (8001cb4 <main+0x2c4>)
 8001a4e:	60da      	str	r2, [r3, #12]
  m1_driver.rs485_rx_led_pin = RS485_M1_RX_LED_Pin;
 8001a50:	4b94      	ldr	r3, [pc, #592]	@ (8001ca4 <main+0x2b4>)
 8001a52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a56:	821a      	strh	r2, [r3, #16]

  m2_driver.rs485_id = 0x02;
 8001a58:	4b97      	ldr	r3, [pc, #604]	@ (8001cb8 <main+0x2c8>)
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	701a      	strb	r2, [r3, #0]
  m2_driver.rs485_huart = &huart3;
 8001a5e:	4b96      	ldr	r3, [pc, #600]	@ (8001cb8 <main+0x2c8>)
 8001a60:	4a96      	ldr	r2, [pc, #600]	@ (8001cbc <main+0x2cc>)
 8001a62:	615a      	str	r2, [r3, #20]
  m2_driver.rs485_timer = &htim4;
 8001a64:	4b94      	ldr	r3, [pc, #592]	@ (8001cb8 <main+0x2c8>)
 8001a66:	4a96      	ldr	r2, [pc, #600]	@ (8001cc0 <main+0x2d0>)
 8001a68:	619a      	str	r2, [r3, #24]
  m2_driver.rs485_enable_port = RS485_M2_TX_EN_GPIO_Port;
 8001a6a:	4b93      	ldr	r3, [pc, #588]	@ (8001cb8 <main+0x2c8>)
 8001a6c:	4a95      	ldr	r2, [pc, #596]	@ (8001cc4 <main+0x2d4>)
 8001a6e:	605a      	str	r2, [r3, #4]
  m2_driver.rs485_enable_pin = RS485_M2_TX_EN_Pin;
 8001a70:	4b91      	ldr	r3, [pc, #580]	@ (8001cb8 <main+0x2c8>)
 8001a72:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a76:	811a      	strh	r2, [r3, #8]
  m2_driver.rs485_rx_led_port = RS485_M2_RX_LED_GPIO_Port;
 8001a78:	4b8f      	ldr	r3, [pc, #572]	@ (8001cb8 <main+0x2c8>)
 8001a7a:	4a8d      	ldr	r2, [pc, #564]	@ (8001cb0 <main+0x2c0>)
 8001a7c:	60da      	str	r2, [r3, #12]
  m2_driver.rs485_rx_led_pin = RS485_M2_RX_LED_Pin;
 8001a7e:	4b8e      	ldr	r3, [pc, #568]	@ (8001cb8 <main+0x2c8>)
 8001a80:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a84:	821a      	strh	r2, [r3, #16]

  rs485_init(&m1_driver);
 8001a86:	4887      	ldr	r0, [pc, #540]	@ (8001ca4 <main+0x2b4>)
 8001a88:	f000 ffea 	bl	8002a60 <rs485_init>
  rs485_init(&m2_driver);
 8001a8c:	488a      	ldr	r0, [pc, #552]	@ (8001cb8 <main+0x2c8>)
 8001a8e:	f000 ffe7 	bl	8002a60 <rs485_init>



  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001a92:	2100      	movs	r1, #0
 8001a94:	488c      	ldr	r0, [pc, #560]	@ (8001cc8 <main+0x2d8>)
 8001a96:	f00b fb01 	bl	800d09c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001a9a:	2104      	movs	r1, #4
 8001a9c:	488a      	ldr	r0, [pc, #552]	@ (8001cc8 <main+0x2d8>)
 8001a9e:	f00b fafd 	bl	800d09c <HAL_TIM_PWM_Start>
  //motor_enable_velocity_mode(0x01);
  //motor_enable_velocity_mode(0x02);



  myLoRa = newLoRa();
 8001aa2:	4c8a      	ldr	r4, [pc, #552]	@ (8001ccc <main+0x2dc>)
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fda8 	bl	80005fc <newLoRa>
 8001aac:	4625      	mov	r5, r4
 8001aae:	463c      	mov	r4, r7
 8001ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001abc:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = LORA_NSS_GPIO_Port;
 8001ac0:	4b82      	ldr	r3, [pc, #520]	@ (8001ccc <main+0x2dc>)
 8001ac2:	4a83      	ldr	r2, [pc, #524]	@ (8001cd0 <main+0x2e0>)
 8001ac4:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = LORA_NSS_Pin;
 8001ac6:	4b81      	ldr	r3, [pc, #516]	@ (8001ccc <main+0x2dc>)
 8001ac8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001acc:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = LORA_RST_GPIO_Port;
 8001ace:	4b7f      	ldr	r3, [pc, #508]	@ (8001ccc <main+0x2dc>)
 8001ad0:	4a7f      	ldr	r2, [pc, #508]	@ (8001cd0 <main+0x2e0>)
 8001ad2:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = LORA_RST_Pin;
 8001ad4:	4b7d      	ldr	r3, [pc, #500]	@ (8001ccc <main+0x2dc>)
 8001ad6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ada:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = LORA_DIO0_GPIO_Port;
 8001adc:	4b7b      	ldr	r3, [pc, #492]	@ (8001ccc <main+0x2dc>)
 8001ade:	4a7c      	ldr	r2, [pc, #496]	@ (8001cd0 <main+0x2e0>)
 8001ae0:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = LORA_DIO0_Pin;
 8001ae2:	4b7a      	ldr	r3, [pc, #488]	@ (8001ccc <main+0x2dc>)
 8001ae4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ae8:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8001aea:	4b78      	ldr	r3, [pc, #480]	@ (8001ccc <main+0x2dc>)
 8001aec:	4a79      	ldr	r2, [pc, #484]	@ (8001cd4 <main+0x2e4>)
 8001aee:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 433;             // default = 433 MHz
 8001af0:	4b76      	ldr	r3, [pc, #472]	@ (8001ccc <main+0x2dc>)
 8001af2:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8001af6:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 8001af8:	4b74      	ldr	r3, [pc, #464]	@ (8001ccc <main+0x2dc>)
 8001afa:	2207      	movs	r2, #7
 8001afc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  myLoRa.bandWidth             = BW_125KHz;       // default = BW_125KHz
 8001b00:	4b72      	ldr	r3, [pc, #456]	@ (8001ccc <main+0x2dc>)
 8001b02:	2207      	movs	r2, #7
 8001b04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 8001b08:	4b70      	ldr	r3, [pc, #448]	@ (8001ccc <main+0x2dc>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 8001b10:	4b6e      	ldr	r3, [pc, #440]	@ (8001ccc <main+0x2dc>)
 8001b12:	22ff      	movs	r2, #255	@ 0xff
 8001b14:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  myLoRa.overCurrentProtection = 100;             // default = 100 mA
 8001b18:	4b6c      	ldr	r3, [pc, #432]	@ (8001ccc <main+0x2dc>)
 8001b1a:	2264      	movs	r2, #100	@ 0x64
 8001b1c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  myLoRa.preamble              = 8;              // default = 8;
 8001b20:	4b6a      	ldr	r3, [pc, #424]	@ (8001ccc <main+0x2dc>)
 8001b22:	2208      	movs	r2, #8
 8001b24:	851a      	strh	r2, [r3, #40]	@ 0x28

  if(LoRa_init(&myLoRa) == LORA_OK){
 8001b26:	4869      	ldr	r0, [pc, #420]	@ (8001ccc <main+0x2dc>)
 8001b28:	f7ff f845 	bl	8000bb6 <LoRa_init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2bc8      	cmp	r3, #200	@ 0xc8
 8001b30:	d102      	bne.n	8001b38 <main+0x148>
	  LoRa_stat = 1;
 8001b32:	4b69      	ldr	r3, [pc, #420]	@ (8001cd8 <main+0x2e8>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	801a      	strh	r2, [r3, #0]
  }

  LoRa_startReceiving(&myLoRa);
 8001b38:	4864      	ldr	r0, [pc, #400]	@ (8001ccc <main+0x2dc>)
 8001b3a:	f7fe ffd0 	bl	8000ade <LoRa_startReceiving>

  LoraTxBuffer[0] = 0xAA;
 8001b3e:	4b67      	ldr	r3, [pc, #412]	@ (8001cdc <main+0x2ec>)
 8001b40:	22aa      	movs	r2, #170	@ 0xaa
 8001b42:	701a      	strb	r2, [r3, #0]
  LoraTxBuffer[1] = 0xBB;
 8001b44:	4b65      	ldr	r3, [pc, #404]	@ (8001cdc <main+0x2ec>)
 8001b46:	22bb      	movs	r2, #187	@ 0xbb
 8001b48:	705a      	strb	r2, [r3, #1]
  LoraTxBuffer[2] = 0xCC;
 8001b4a:	4b64      	ldr	r3, [pc, #400]	@ (8001cdc <main+0x2ec>)
 8001b4c:	22cc      	movs	r2, #204	@ 0xcc
 8001b4e:	709a      	strb	r2, [r3, #2]

  //LoRa_transmit(&myLoRa, LoraTxBuffer, 3, 500);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) front_array.ir_sen_val_dma, line_sensor_front_channel_number);
 8001b50:	230a      	movs	r3, #10
 8001b52:	461a      	mov	r2, r3
 8001b54:	4962      	ldr	r1, [pc, #392]	@ (8001ce0 <main+0x2f0>)
 8001b56:	4863      	ldr	r0, [pc, #396]	@ (8001ce4 <main+0x2f4>)
 8001b58:	f002 fa78 	bl	800404c <HAL_ADC_Start_DMA>
  ir_array_init(&front_array,
 8001b5c:	4b62      	ldr	r3, [pc, #392]	@ (8001ce8 <main+0x2f8>)
 8001b5e:	9307      	str	r3, [sp, #28]
 8001b60:	4b62      	ldr	r3, [pc, #392]	@ (8001cec <main+0x2fc>)
 8001b62:	9306      	str	r3, [sp, #24]
 8001b64:	4b62      	ldr	r3, [pc, #392]	@ (8001cf0 <main+0x300>)
 8001b66:	9305      	str	r3, [sp, #20]
 8001b68:	4b62      	ldr	r3, [pc, #392]	@ (8001cf4 <main+0x304>)
 8001b6a:	9304      	str	r3, [sp, #16]
 8001b6c:	4b62      	ldr	r3, [pc, #392]	@ (8001cf8 <main+0x308>)
 8001b6e:	9303      	str	r3, [sp, #12]
 8001b70:	4b62      	ldr	r3, [pc, #392]	@ (8001cfc <main+0x30c>)
 8001b72:	9302      	str	r3, [sp, #8]
 8001b74:	4b62      	ldr	r3, [pc, #392]	@ (8001d00 <main+0x310>)
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	4b62      	ldr	r3, [pc, #392]	@ (8001d04 <main+0x314>)
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	4b62      	ldr	r3, [pc, #392]	@ (8001d08 <main+0x318>)
 8001b7e:	4a63      	ldr	r2, [pc, #396]	@ (8001d0c <main+0x31c>)
 8001b80:	4963      	ldr	r1, [pc, #396]	@ (8001d10 <main+0x320>)
 8001b82:	4857      	ldr	r0, [pc, #348]	@ (8001ce0 <main+0x2f0>)
 8001b84:	f7ff f8be 	bl	8000d04 <ir_array_init>
                &line_sensor_front_on_line_left_number,
                &line_sensor_front_on_line_right_number,
                &line_sensor_front_threshold);


  HAL_ADC_Start_DMA(&hadc3, (uint32_t*) back_array.ir_sen_val_dma, line_sensor_back_channel_number);
 8001b88:	230a      	movs	r3, #10
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4961      	ldr	r1, [pc, #388]	@ (8001d14 <main+0x324>)
 8001b8e:	4862      	ldr	r0, [pc, #392]	@ (8001d18 <main+0x328>)
 8001b90:	f002 fa5c 	bl	800404c <HAL_ADC_Start_DMA>
  ir_array_init(&back_array,
 8001b94:	4b61      	ldr	r3, [pc, #388]	@ (8001d1c <main+0x32c>)
 8001b96:	9307      	str	r3, [sp, #28]
 8001b98:	4b61      	ldr	r3, [pc, #388]	@ (8001d20 <main+0x330>)
 8001b9a:	9306      	str	r3, [sp, #24]
 8001b9c:	4b61      	ldr	r3, [pc, #388]	@ (8001d24 <main+0x334>)
 8001b9e:	9305      	str	r3, [sp, #20]
 8001ba0:	4b61      	ldr	r3, [pc, #388]	@ (8001d28 <main+0x338>)
 8001ba2:	9304      	str	r3, [sp, #16]
 8001ba4:	4b61      	ldr	r3, [pc, #388]	@ (8001d2c <main+0x33c>)
 8001ba6:	9303      	str	r3, [sp, #12]
 8001ba8:	4b61      	ldr	r3, [pc, #388]	@ (8001d30 <main+0x340>)
 8001baa:	9302      	str	r3, [sp, #8]
 8001bac:	4b61      	ldr	r3, [pc, #388]	@ (8001d34 <main+0x344>)
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	4b61      	ldr	r3, [pc, #388]	@ (8001d38 <main+0x348>)
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	4b61      	ldr	r3, [pc, #388]	@ (8001d3c <main+0x34c>)
 8001bb6:	4a62      	ldr	r2, [pc, #392]	@ (8001d40 <main+0x350>)
 8001bb8:	4962      	ldr	r1, [pc, #392]	@ (8001d44 <main+0x354>)
 8001bba:	4856      	ldr	r0, [pc, #344]	@ (8001d14 <main+0x324>)
 8001bbc:	f7ff f8a2 	bl	8000d04 <ir_array_init>
                &line_sensor_back_on_line_middle_number,
                &line_sensor_back_on_line_left_number,
                &line_sensor_back_on_line_right_number,
                &line_sensor_back_threshold);

  Line_Sensor_Calculation(&front_array);
 8001bc0:	4847      	ldr	r0, [pc, #284]	@ (8001ce0 <main+0x2f0>)
 8001bc2:	f7ff f904 	bl	8000dce <Line_Sensor_Calculation>
  Line_Sensor_Calculation(&back_array);
 8001bc6:	4853      	ldr	r0, [pc, #332]	@ (8001d14 <main+0x324>)
 8001bc8:	f7ff f901 	bl	8000dce <Line_Sensor_Calculation>

  if((back_array.ir_sen_on_line_total_num >= 9) &&(front_array.ir_sen_on_line_total_num >= 1)){
 8001bcc:	4b51      	ldr	r3, [pc, #324]	@ (8001d14 <main+0x324>)
 8001bce:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d909      	bls.n	8001bec <main+0x1fc>
 8001bd8:	4b41      	ldr	r3, [pc, #260]	@ (8001ce0 <main+0x2f0>)
 8001bda:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <main+0x1fc>
	  agv_orientation = 0xF00F;
 8001be4:	4b58      	ldr	r3, [pc, #352]	@ (8001d48 <main+0x358>)
 8001be6:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 8001bea:	801a      	strh	r2, [r3, #0]
  }
  if((front_array.ir_sen_on_line_total_num >= 9) && (back_array.ir_sen_on_line_total_num >= 1)){
 8001bec:	4b3c      	ldr	r3, [pc, #240]	@ (8001ce0 <main+0x2f0>)
 8001bee:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d909      	bls.n	8001c0c <main+0x21c>
 8001bf8:	4b46      	ldr	r3, [pc, #280]	@ (8001d14 <main+0x324>)
 8001bfa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <main+0x21c>
	  agv_orientation = 0xF11F;
 8001c04:	4b50      	ldr	r3, [pc, #320]	@ (8001d48 <main+0x358>)
 8001c06:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 8001c0a:	801a      	strh	r2, [r3, #0]
//	  PID_Motor_All_Break();
//	  HAL_Delay(2000);



	  	  if(On_Task == 0xF11F){
 8001c0c:	4b4f      	ldr	r3, [pc, #316]	@ (8001d4c <main+0x35c>)
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d13d      	bne.n	8001c94 <main+0x2a4>
	 		  if(agv_orientation == 0xF00F){
 8001c18:	4b4b      	ldr	r3, [pc, #300]	@ (8001d48 <main+0x358>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d118      	bne.n	8001c56 <main+0x266>

	 			  Line_Sensor_Calculation(&front_array);
 8001c24:	482e      	ldr	r0, [pc, #184]	@ (8001ce0 <main+0x2f0>)
 8001c26:	f7ff f8d2 	bl	8000dce <Line_Sensor_Calculation>

				  AGV_Turn_Detection_Completion(front_array.ir_sen_val_cal,
 8001c2a:	4b47      	ldr	r3, [pc, #284]	@ (8001d48 <main+0x358>)
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	4b48      	ldr	r3, [pc, #288]	@ (8001d50 <main+0x360>)
 8001c30:	4a48      	ldr	r2, [pc, #288]	@ (8001d54 <main+0x364>)
 8001c32:	4949      	ldr	r1, [pc, #292]	@ (8001d58 <main+0x368>)
 8001c34:	4849      	ldr	r0, [pc, #292]	@ (8001d5c <main+0x36c>)
 8001c36:	f7ff fc63 	bl	8001500 <AGV_Turn_Detection_Completion>
											   &front_array.ir_sen_on_line_mid_num,
											   &front_array.ir_sen_on_line_total_num,
												on_task_decisions,
											   &agv_orientation);

				  PID_control(&front_array.ir_sen_read_line_val, &agv_orientation);
 8001c3a:	4943      	ldr	r1, [pc, #268]	@ (8001d48 <main+0x358>)
 8001c3c:	4848      	ldr	r0, [pc, #288]	@ (8001d60 <main+0x370>)
 8001c3e:	f7ff f9c3 	bl	8000fc8 <PID_control>

				  PID_Forward_Rotation(pid_motor_speed_A, pid_motor_speed_B, &agv_orientation);
 8001c42:	4b48      	ldr	r3, [pc, #288]	@ (8001d64 <main+0x374>)
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	4a47      	ldr	r2, [pc, #284]	@ (8001d68 <main+0x378>)
 8001c4a:	8812      	ldrh	r2, [r2, #0]
 8001c4c:	b291      	uxth	r1, r2
 8001c4e:	4a3e      	ldr	r2, [pc, #248]	@ (8001d48 <main+0x358>)
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fa89 	bl	8001168 <PID_Forward_Rotation>


	  		  }
	  		  if(agv_orientation == 0xF11F){
 8001c56:	4b3c      	ldr	r3, [pc, #240]	@ (8001d48 <main+0x358>)
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	f24f 121f 	movw	r2, #61727	@ 0xf11f
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d118      	bne.n	8001c94 <main+0x2a4>

	  			  Line_Sensor_Calculation(&back_array);
 8001c62:	482c      	ldr	r0, [pc, #176]	@ (8001d14 <main+0x324>)
 8001c64:	f7ff f8b3 	bl	8000dce <Line_Sensor_Calculation>

				  AGV_Turn_Detection_Completion(back_array.ir_sen_val_cal,
 8001c68:	4b37      	ldr	r3, [pc, #220]	@ (8001d48 <main+0x358>)
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	4b38      	ldr	r3, [pc, #224]	@ (8001d50 <main+0x360>)
 8001c6e:	4a3f      	ldr	r2, [pc, #252]	@ (8001d6c <main+0x37c>)
 8001c70:	493f      	ldr	r1, [pc, #252]	@ (8001d70 <main+0x380>)
 8001c72:	4840      	ldr	r0, [pc, #256]	@ (8001d74 <main+0x384>)
 8001c74:	f7ff fc44 	bl	8001500 <AGV_Turn_Detection_Completion>
											   &back_array.ir_sen_on_line_mid_num,
											   &back_array.ir_sen_on_line_total_num,
												on_task_decisions,
											   &agv_orientation);

				  PID_control(&back_array.ir_sen_read_line_val, &agv_orientation);
 8001c78:	4933      	ldr	r1, [pc, #204]	@ (8001d48 <main+0x358>)
 8001c7a:	483f      	ldr	r0, [pc, #252]	@ (8001d78 <main+0x388>)
 8001c7c:	f7ff f9a4 	bl	8000fc8 <PID_control>

				  PID_Forward_Rotation(pid_motor_speed_A, pid_motor_speed_B, &agv_orientation);
 8001c80:	4b38      	ldr	r3, [pc, #224]	@ (8001d64 <main+0x374>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	4a38      	ldr	r2, [pc, #224]	@ (8001d68 <main+0x378>)
 8001c88:	8812      	ldrh	r2, [r2, #0]
 8001c8a:	b291      	uxth	r1, r2
 8001c8c:	4a2e      	ldr	r2, [pc, #184]	@ (8001d48 <main+0x358>)
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fa6a 	bl	8001168 <PID_Forward_Rotation>

	  		  }

	  	  }
	  	  if(On_Task == 0xF00F){
 8001c94:	4b2d      	ldr	r3, [pc, #180]	@ (8001d4c <main+0x35c>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	f24f 020f 	movw	r2, #61455	@ 0xf00f
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d1b5      	bne.n	8001c0c <main+0x21c>
 8001ca0:	e06c      	b.n	8001d7c <main+0x38c>
 8001ca2:	bf00      	nop
 8001ca4:	240004f8 	.word	0x240004f8
 8001ca8:	240003d0 	.word	0x240003d0
 8001cac:	24000338 	.word	0x24000338
 8001cb0:	58020400 	.word	0x58020400
 8001cb4:	58020c00 	.word	0x58020c00
 8001cb8:	24000530 	.word	0x24000530
 8001cbc:	24000464 	.word	0x24000464
 8001cc0:	24000384 	.word	0x24000384
 8001cc4:	58021000 	.word	0x58021000
 8001cc8:	240002ec 	.word	0x240002ec
 8001ccc:	24000698 	.word	0x24000698
 8001cd0:	58021800 	.word	0x58021800
 8001cd4:	24000264 	.word	0x24000264
 8001cd8:	240006c4 	.word	0x240006c4
 8001cdc:	240006c8 	.word	0x240006c8
 8001ce0:	240005a4 	.word	0x240005a4
 8001ce4:	24000094 	.word	0x24000094
 8001ce8:	08010ea2 	.word	0x08010ea2
 8001cec:	2400059a 	.word	0x2400059a
 8001cf0:	24000598 	.word	0x24000598
 8001cf4:	24000599 	.word	0x24000599
 8001cf8:	2400059b 	.word	0x2400059b
 8001cfc:	24000568 	.word	0x24000568
 8001d00:	240005a0 	.word	0x240005a0
 8001d04:	08010ea0 	.word	0x08010ea0
 8001d08:	24000014 	.word	0x24000014
 8001d0c:	24000000 	.word	0x24000000
 8001d10:	24000570 	.word	0x24000570
 8001d14:	2400060c 	.word	0x2400060c
 8001d18:	24000104 	.word	0x24000104
 8001d1c:	08010ea4 	.word	0x08010ea4
 8001d20:	2400059e 	.word	0x2400059e
 8001d24:	2400059c 	.word	0x2400059c
 8001d28:	2400059d 	.word	0x2400059d
 8001d2c:	2400059f 	.word	0x2400059f
 8001d30:	2400056c 	.word	0x2400056c
 8001d34:	240005a2 	.word	0x240005a2
 8001d38:	08010ea1 	.word	0x08010ea1
 8001d3c:	2400003c 	.word	0x2400003c
 8001d40:	24000028 	.word	0x24000028
 8001d44:	24000584 	.word	0x24000584
 8001d48:	24000050 	.word	0x24000050
 8001d4c:	2400005e 	.word	0x2400005e
 8001d50:	24000060 	.word	0x24000060
 8001d54:	240005fc 	.word	0x240005fc
 8001d58:	240005fd 	.word	0x240005fd
 8001d5c:	240005b8 	.word	0x240005b8
 8001d60:	240005f6 	.word	0x240005f6
 8001d64:	24000690 	.word	0x24000690
 8001d68:	24000692 	.word	0x24000692
 8001d6c:	24000664 	.word	0x24000664
 8001d70:	24000665 	.word	0x24000665
 8001d74:	24000620 	.word	0x24000620
 8001d78:	2400065e 	.word	0x2400065e
	  		  AGV_waiting();
 8001d7c:	f7ff fb10 	bl	80013a0 <AGV_waiting>
	  		  PID_Motor_All_Break();
 8001d80:	f7ff faea 	bl	8001358 <PID_Motor_All_Break>
	  	  if(On_Task == 0xF11F){
 8001d84:	e742      	b.n	8001c0c <main+0x21c>
 8001d86:	bf00      	nop

08001d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b09c      	sub	sp, #112	@ 0x70
 8001d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d92:	224c      	movs	r2, #76	@ 0x4c
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f00f f812 	bl	8010dc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	2220      	movs	r2, #32
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f00f f80c 	bl	8010dc0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001da8:	2002      	movs	r0, #2
 8001daa:	f006 fe41 	bl	8008a30 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001dae:	2300      	movs	r3, #0
 8001db0:	603b      	str	r3, [r7, #0]
 8001db2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e68 <SystemClock_Config+0xe0>)
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	4a2c      	ldr	r2, [pc, #176]	@ (8001e68 <SystemClock_Config+0xe0>)
 8001db8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001dbc:	6193      	str	r3, [r2, #24]
 8001dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8001e68 <SystemClock_Config+0xe0>)
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001dca:	bf00      	nop
 8001dcc:	4b26      	ldr	r3, [pc, #152]	@ (8001e68 <SystemClock_Config+0xe0>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dd8:	d1f8      	bne.n	8001dcc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001de4:	2301      	movs	r3, #1
 8001de6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001de8:	2340      	movs	r3, #64	@ 0x40
 8001dea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dec:	2302      	movs	r3, #2
 8001dee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001df0:	2302      	movs	r3, #2
 8001df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001df4:	2302      	movs	r3, #2
 8001df6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001df8:	232c      	movs	r3, #44	@ 0x2c
 8001dfa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001e00:	2303      	movs	r3, #3
 8001e02:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e04:	2302      	movs	r3, #2
 8001e06:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001e08:	230c      	movs	r3, #12
 8001e0a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f006 fe43 	bl	8008aa4 <HAL_RCC_OscConfig>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001e24:	f000 fe16 	bl	8002a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e28:	233f      	movs	r3, #63	@ 0x3f
 8001e2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001e34:	2308      	movs	r3, #8
 8001e36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001e38:	2340      	movs	r3, #64	@ 0x40
 8001e3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001e3c:	2340      	movs	r3, #64	@ 0x40
 8001e3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001e40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e44:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001e46:	2340      	movs	r3, #64	@ 0x40
 8001e48:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	2103      	movs	r1, #3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f007 fa02 	bl	8009258 <HAL_RCC_ClockConfig>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001e5a:	f000 fdfb 	bl	8002a54 <Error_Handler>
  }
}
 8001e5e:	bf00      	nop
 8001e60:	3770      	adds	r7, #112	@ 0x70
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	58024800 	.word	0x58024800

08001e6c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b0ae      	sub	sp, #184	@ 0xb8
 8001e70:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e72:	463b      	mov	r3, r7
 8001e74:	22b8      	movs	r2, #184	@ 0xb8
 8001e76:	2100      	movs	r1, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f00e ffa1 	bl	8010dc0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CKPER;
 8001e7e:	4a14      	ldr	r2, [pc, #80]	@ (8001ed0 <PeriphCommonClock_Config+0x64>)
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 8001e8c:	230f      	movs	r3, #15
 8001e8e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001e90:	2302      	movs	r3, #2
 8001e92:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001e94:	2302      	movs	r3, #2
 8001e96:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001e9c:	23c0      	movs	r3, #192	@ 0xc0
 8001e9e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 8001ea4:	f640 3386 	movw	r3, #2950	@ 0xb86
 8001ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eb4:	463b      	mov	r3, r7
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f007 fd5a 	bl	8009970 <HAL_RCCEx_PeriphCLKConfig>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8001ec2:	f000 fdc7 	bl	8002a54 <Error_Handler>
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	37b8      	adds	r7, #184	@ 0xb8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	80080000 	.word	0x80080000

08001ed4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08c      	sub	sp, #48	@ 0x30
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ee6:	463b      	mov	r3, r7
 8001ee8:	2224      	movs	r2, #36	@ 0x24
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f00e ff67 	bl	8010dc0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ef2:	4b75      	ldr	r3, [pc, #468]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8001ef4:	4a75      	ldr	r2, [pc, #468]	@ (80020cc <MX_ADC1_Init+0x1f8>)
 8001ef6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001ef8:	4b73      	ldr	r3, [pc, #460]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001efe:	4b72      	ldr	r3, [pc, #456]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8001f00:	2208      	movs	r2, #8
 8001f02:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f04:	4b70      	ldr	r3, [pc, #448]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f0a:	4b6f      	ldr	r3, [pc, #444]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f10:	4b6d      	ldr	r3, [pc, #436]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f16:	4b6c      	ldr	r3, [pc, #432]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 10;
 8001f1c:	4b6a      	ldr	r3, [pc, #424]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8001f1e:	220a      	movs	r2, #10
 8001f20:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f22:	4b69      	ldr	r3, [pc, #420]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f2a:	4b67      	ldr	r3, [pc, #412]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f30:	4b65      	ldr	r3, [pc, #404]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001f36:	4b64      	ldr	r3, [pc, #400]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8001f38:	2203      	movs	r2, #3
 8001f3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001f3c:	4b62      	ldr	r3, [pc, #392]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8001f3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f42:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001f44:	4b60      	ldr	r3, [pc, #384]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001f4a:	4b5f      	ldr	r3, [pc, #380]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8001f52:	4b5d      	ldr	r3, [pc, #372]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f58:	485b      	ldr	r0, [pc, #364]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8001f5a:	f001 fe6f 	bl	8003c3c <HAL_ADC_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001f64:	f000 fd76 	bl	8002a54 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001f6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f70:	4619      	mov	r1, r3
 8001f72:	4855      	ldr	r0, [pc, #340]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8001f74:	f003 fb3c 	bl	80055f0 <HAL_ADCEx_MultiModeConfigChannel>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001f7e:	f000 fd69 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001f82:	4b53      	ldr	r3, [pc, #332]	@ (80020d0 <MX_ADC1_Init+0x1fc>)
 8001f84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f86:	2306      	movs	r3, #6
 8001f88:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8001f8a:	2305      	movs	r3, #5
 8001f8c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f8e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001f92:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f94:	2304      	movs	r3, #4
 8001f96:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fa2:	463b      	mov	r3, r7
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4848      	ldr	r0, [pc, #288]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8001fa8:	f002 fb8e 	bl	80046c8 <HAL_ADC_ConfigChannel>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001fb2:	f000 fd4f 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001fb6:	4b47      	ldr	r3, [pc, #284]	@ (80020d4 <MX_ADC1_Init+0x200>)
 8001fb8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001fba:	230c      	movs	r3, #12
 8001fbc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fbe:	463b      	mov	r3, r7
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4841      	ldr	r0, [pc, #260]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8001fc4:	f002 fb80 	bl	80046c8 <HAL_ADC_ConfigChannel>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001fce:	f000 fd41 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001fd2:	4b41      	ldr	r3, [pc, #260]	@ (80020d8 <MX_ADC1_Init+0x204>)
 8001fd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001fd6:	2312      	movs	r3, #18
 8001fd8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fda:	463b      	mov	r3, r7
 8001fdc:	4619      	mov	r1, r3
 8001fde:	483a      	ldr	r0, [pc, #232]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8001fe0:	f002 fb72 	bl	80046c8 <HAL_ADC_ConfigChannel>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8001fea:	f000 fd33 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001fee:	4b3b      	ldr	r3, [pc, #236]	@ (80020dc <MX_ADC1_Init+0x208>)
 8001ff0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001ff2:	2318      	movs	r3, #24
 8001ff4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4833      	ldr	r0, [pc, #204]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8001ffc:	f002 fb64 	bl	80046c8 <HAL_ADC_ConfigChannel>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8002006:	f000 fd25 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800200a:	4b35      	ldr	r3, [pc, #212]	@ (80020e0 <MX_ADC1_Init+0x20c>)
 800200c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800200e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002012:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002014:	463b      	mov	r3, r7
 8002016:	4619      	mov	r1, r3
 8002018:	482b      	ldr	r0, [pc, #172]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 800201a:	f002 fb55 	bl	80046c8 <HAL_ADC_ConfigChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002024:	f000 fd16 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002028:	4b2e      	ldr	r3, [pc, #184]	@ (80020e4 <MX_ADC1_Init+0x210>)
 800202a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800202c:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8002030:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002032:	463b      	mov	r3, r7
 8002034:	4619      	mov	r1, r3
 8002036:	4824      	ldr	r0, [pc, #144]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8002038:	f002 fb46 	bl	80046c8 <HAL_ADC_ConfigChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 8002042:	f000 fd07 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002046:	4b28      	ldr	r3, [pc, #160]	@ (80020e8 <MX_ADC1_Init+0x214>)
 8002048:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800204a:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 800204e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002050:	463b      	mov	r3, r7
 8002052:	4619      	mov	r1, r3
 8002054:	481c      	ldr	r0, [pc, #112]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8002056:	f002 fb37 	bl	80046c8 <HAL_ADC_ConfigChannel>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 8002060:	f000 fcf8 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002064:	4b21      	ldr	r3, [pc, #132]	@ (80020ec <MX_ADC1_Init+0x218>)
 8002066:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002068:	f44f 7389 	mov.w	r3, #274	@ 0x112
 800206c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800206e:	463b      	mov	r3, r7
 8002070:	4619      	mov	r1, r3
 8002072:	4815      	ldr	r0, [pc, #84]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8002074:	f002 fb28 	bl	80046c8 <HAL_ADC_ConfigChannel>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 800207e:	f000 fce9 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002082:	4b1b      	ldr	r3, [pc, #108]	@ (80020f0 <MX_ADC1_Init+0x21c>)
 8002084:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8002086:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800208a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800208c:	463b      	mov	r3, r7
 800208e:	4619      	mov	r1, r3
 8002090:	480d      	ldr	r0, [pc, #52]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 8002092:	f002 fb19 	bl	80046c8 <HAL_ADC_ConfigChannel>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_ADC1_Init+0x1cc>
  {
    Error_Handler();
 800209c:	f000 fcda 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80020a0:	4b14      	ldr	r3, [pc, #80]	@ (80020f4 <MX_ADC1_Init+0x220>)
 80020a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80020a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020aa:	463b      	mov	r3, r7
 80020ac:	4619      	mov	r1, r3
 80020ae:	4806      	ldr	r0, [pc, #24]	@ (80020c8 <MX_ADC1_Init+0x1f4>)
 80020b0:	f002 fb0a 	bl	80046c8 <HAL_ADC_ConfigChannel>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_ADC1_Init+0x1ea>
  {
    Error_Handler();
 80020ba:	f000 fccb 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020be:	bf00      	nop
 80020c0:	3730      	adds	r7, #48	@ 0x30
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	24000094 	.word	0x24000094
 80020cc:	40022000 	.word	0x40022000
 80020d0:	08600004 	.word	0x08600004
 80020d4:	0c900008 	.word	0x0c900008
 80020d8:	10c00010 	.word	0x10c00010
 80020dc:	14f00020 	.word	0x14f00020
 80020e0:	19200040 	.word	0x19200040
 80020e4:	1d500080 	.word	0x1d500080
 80020e8:	21800100 	.word	0x21800100
 80020ec:	25b00200 	.word	0x25b00200
 80020f0:	2a000400 	.word	0x2a000400
 80020f4:	2e300800 	.word	0x2e300800

080020f8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	@ 0x28
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	2224      	movs	r2, #36	@ 0x24
 8002102:	2100      	movs	r1, #0
 8002104:	4618      	mov	r0, r3
 8002106:	f00e fe5b 	bl	8010dc0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800210a:	4b73      	ldr	r3, [pc, #460]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 800210c:	4a73      	ldr	r2, [pc, #460]	@ (80022dc <MX_ADC3_Init+0x1e4>)
 800210e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002110:	4b71      	ldr	r3, [pc, #452]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 8002112:	2200      	movs	r2, #0
 8002114:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002116:	4b70      	ldr	r3, [pc, #448]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 8002118:	2208      	movs	r2, #8
 800211a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 800211c:	4b6e      	ldr	r3, [pc, #440]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 800211e:	2200      	movs	r2, #0
 8002120:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002122:	4b6d      	ldr	r3, [pc, #436]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 8002124:	2201      	movs	r2, #1
 8002126:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002128:	4b6b      	ldr	r3, [pc, #428]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 800212a:	2204      	movs	r2, #4
 800212c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800212e:	4b6a      	ldr	r3, [pc, #424]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 8002130:	2200      	movs	r2, #0
 8002132:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002134:	4b68      	ldr	r3, [pc, #416]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 8002136:	2201      	movs	r2, #1
 8002138:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 10;
 800213a:	4b67      	ldr	r3, [pc, #412]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 800213c:	220a      	movs	r2, #10
 800213e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002140:	4b65      	ldr	r3, [pc, #404]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002148:	4b63      	ldr	r3, [pc, #396]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 800214a:	2200      	movs	r2, #0
 800214c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800214e:	4b62      	ldr	r3, [pc, #392]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 8002150:	2200      	movs	r2, #0
 8002152:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8002154:	4b60      	ldr	r3, [pc, #384]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800215c:	4b5e      	ldr	r3, [pc, #376]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 800215e:	2200      	movs	r2, #0
 8002160:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8002162:	4b5d      	ldr	r3, [pc, #372]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 8002164:	2203      	movs	r2, #3
 8002166:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002168:	4b5b      	ldr	r3, [pc, #364]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 800216a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800216e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002170:	4b59      	ldr	r3, [pc, #356]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 8002172:	2200      	movs	r2, #0
 8002174:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8002176:	4b58      	ldr	r3, [pc, #352]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 800217e:	4b56      	ldr	r3, [pc, #344]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 8002180:	2200      	movs	r2, #0
 8002182:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002184:	4854      	ldr	r0, [pc, #336]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 8002186:	f001 fd59 	bl	8003c3c <HAL_ADC_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_ADC3_Init+0x9c>
  {
    Error_Handler();
 8002190:	f000 fc60 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002194:	2301      	movs	r3, #1
 8002196:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002198:	2306      	movs	r3, #6
 800219a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_92CYCLES_5;
 800219c:	2305      	movs	r3, #5
 800219e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80021a0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80021a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80021a6:	2304      	movs	r3, #4
 80021a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	4848      	ldr	r0, [pc, #288]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 80021b8:	f002 fa86 	bl	80046c8 <HAL_ADC_ConfigChannel>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80021c2:	f000 fc47 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80021c6:	4b46      	ldr	r3, [pc, #280]	@ (80022e0 <MX_ADC3_Init+0x1e8>)
 80021c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80021ca:	230c      	movs	r3, #12
 80021cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	4619      	mov	r1, r3
 80021d2:	4841      	ldr	r0, [pc, #260]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 80021d4:	f002 fa78 	bl	80046c8 <HAL_ADC_ConfigChannel>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80021de:	f000 fc39 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80021e2:	4b40      	ldr	r3, [pc, #256]	@ (80022e4 <MX_ADC3_Init+0x1ec>)
 80021e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80021e6:	2312      	movs	r3, #18
 80021e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	4619      	mov	r1, r3
 80021ee:	483a      	ldr	r0, [pc, #232]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 80021f0:	f002 fa6a 	bl	80046c8 <HAL_ADC_ConfigChannel>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80021fa:	f000 fc2b 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80021fe:	4b3a      	ldr	r3, [pc, #232]	@ (80022e8 <MX_ADC3_Init+0x1f0>)
 8002200:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002202:	2318      	movs	r3, #24
 8002204:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002206:	1d3b      	adds	r3, r7, #4
 8002208:	4619      	mov	r1, r3
 800220a:	4833      	ldr	r0, [pc, #204]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 800220c:	f002 fa5c 	bl	80046c8 <HAL_ADC_ConfigChannel>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_ADC3_Init+0x122>
  {
    Error_Handler();
 8002216:	f000 fc1d 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800221a:	4b34      	ldr	r3, [pc, #208]	@ (80022ec <MX_ADC3_Init+0x1f4>)
 800221c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800221e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002222:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002224:	1d3b      	adds	r3, r7, #4
 8002226:	4619      	mov	r1, r3
 8002228:	482b      	ldr	r0, [pc, #172]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 800222a:	f002 fa4d 	bl	80046c8 <HAL_ADC_ConfigChannel>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_ADC3_Init+0x140>
  {
    Error_Handler();
 8002234:	f000 fc0e 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002238:	4b2d      	ldr	r3, [pc, #180]	@ (80022f0 <MX_ADC3_Init+0x1f8>)
 800223a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800223c:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8002240:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	4619      	mov	r1, r3
 8002246:	4824      	ldr	r0, [pc, #144]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 8002248:	f002 fa3e 	bl	80046c8 <HAL_ADC_ConfigChannel>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_ADC3_Init+0x15e>
  {
    Error_Handler();
 8002252:	f000 fbff 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002256:	4b27      	ldr	r3, [pc, #156]	@ (80022f4 <MX_ADC3_Init+0x1fc>)
 8002258:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800225a:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 800225e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	4619      	mov	r1, r3
 8002264:	481c      	ldr	r0, [pc, #112]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 8002266:	f002 fa2f 	bl	80046c8 <HAL_ADC_ConfigChannel>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_ADC3_Init+0x17c>
  {
    Error_Handler();
 8002270:	f000 fbf0 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002274:	4b20      	ldr	r3, [pc, #128]	@ (80022f8 <MX_ADC3_Init+0x200>)
 8002276:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002278:	f44f 7389 	mov.w	r3, #274	@ 0x112
 800227c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800227e:	1d3b      	adds	r3, r7, #4
 8002280:	4619      	mov	r1, r3
 8002282:	4815      	ldr	r0, [pc, #84]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 8002284:	f002 fa20 	bl	80046c8 <HAL_ADC_ConfigChannel>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_ADC3_Init+0x19a>
  {
    Error_Handler();
 800228e:	f000 fbe1 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002292:	4b1a      	ldr	r3, [pc, #104]	@ (80022fc <MX_ADC3_Init+0x204>)
 8002294:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8002296:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800229a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	4619      	mov	r1, r3
 80022a0:	480d      	ldr	r0, [pc, #52]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 80022a2:	f002 fa11 	bl	80046c8 <HAL_ADC_ConfigChannel>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_ADC3_Init+0x1b8>
  {
    Error_Handler();
 80022ac:	f000 fbd2 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80022b0:	4b13      	ldr	r3, [pc, #76]	@ (8002300 <MX_ADC3_Init+0x208>)
 80022b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80022b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	4619      	mov	r1, r3
 80022be:	4806      	ldr	r0, [pc, #24]	@ (80022d8 <MX_ADC3_Init+0x1e0>)
 80022c0:	f002 fa02 	bl	80046c8 <HAL_ADC_ConfigChannel>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_ADC3_Init+0x1d6>
  {
    Error_Handler();
 80022ca:	f000 fbc3 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80022ce:	bf00      	nop
 80022d0:	3728      	adds	r7, #40	@ 0x28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	24000104 	.word	0x24000104
 80022dc:	58026000 	.word	0x58026000
 80022e0:	04300002 	.word	0x04300002
 80022e4:	08600004 	.word	0x08600004
 80022e8:	0c900008 	.word	0x0c900008
 80022ec:	10c00010 	.word	0x10c00010
 80022f0:	14f00020 	.word	0x14f00020
 80022f4:	19200040 	.word	0x19200040
 80022f8:	1d500080 	.word	0x1d500080
 80022fc:	21800100 	.word	0x21800100
 8002300:	25b00200 	.word	0x25b00200

08002304 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002308:	4b27      	ldr	r3, [pc, #156]	@ (80023a8 <MX_SPI1_Init+0xa4>)
 800230a:	4a28      	ldr	r2, [pc, #160]	@ (80023ac <MX_SPI1_Init+0xa8>)
 800230c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800230e:	4b26      	ldr	r3, [pc, #152]	@ (80023a8 <MX_SPI1_Init+0xa4>)
 8002310:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002314:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002316:	4b24      	ldr	r3, [pc, #144]	@ (80023a8 <MX_SPI1_Init+0xa4>)
 8002318:	2200      	movs	r2, #0
 800231a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800231c:	4b22      	ldr	r3, [pc, #136]	@ (80023a8 <MX_SPI1_Init+0xa4>)
 800231e:	2207      	movs	r2, #7
 8002320:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002322:	4b21      	ldr	r3, [pc, #132]	@ (80023a8 <MX_SPI1_Init+0xa4>)
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002328:	4b1f      	ldr	r3, [pc, #124]	@ (80023a8 <MX_SPI1_Init+0xa4>)
 800232a:	2200      	movs	r2, #0
 800232c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800232e:	4b1e      	ldr	r3, [pc, #120]	@ (80023a8 <MX_SPI1_Init+0xa4>)
 8002330:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002334:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002336:	4b1c      	ldr	r3, [pc, #112]	@ (80023a8 <MX_SPI1_Init+0xa4>)
 8002338:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800233c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800233e:	4b1a      	ldr	r3, [pc, #104]	@ (80023a8 <MX_SPI1_Init+0xa4>)
 8002340:	2200      	movs	r2, #0
 8002342:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002344:	4b18      	ldr	r3, [pc, #96]	@ (80023a8 <MX_SPI1_Init+0xa4>)
 8002346:	2200      	movs	r2, #0
 8002348:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800234a:	4b17      	ldr	r3, [pc, #92]	@ (80023a8 <MX_SPI1_Init+0xa4>)
 800234c:	2200      	movs	r2, #0
 800234e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002350:	4b15      	ldr	r3, [pc, #84]	@ (80023a8 <MX_SPI1_Init+0xa4>)
 8002352:	2200      	movs	r2, #0
 8002354:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002356:	4b14      	ldr	r3, [pc, #80]	@ (80023a8 <MX_SPI1_Init+0xa4>)
 8002358:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800235c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800235e:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <MX_SPI1_Init+0xa4>)
 8002360:	2200      	movs	r2, #0
 8002362:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002364:	4b10      	ldr	r3, [pc, #64]	@ (80023a8 <MX_SPI1_Init+0xa4>)
 8002366:	2200      	movs	r2, #0
 8002368:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800236a:	4b0f      	ldr	r3, [pc, #60]	@ (80023a8 <MX_SPI1_Init+0xa4>)
 800236c:	2200      	movs	r2, #0
 800236e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002370:	4b0d      	ldr	r3, [pc, #52]	@ (80023a8 <MX_SPI1_Init+0xa4>)
 8002372:	2200      	movs	r2, #0
 8002374:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002376:	4b0c      	ldr	r3, [pc, #48]	@ (80023a8 <MX_SPI1_Init+0xa4>)
 8002378:	2200      	movs	r2, #0
 800237a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800237c:	4b0a      	ldr	r3, [pc, #40]	@ (80023a8 <MX_SPI1_Init+0xa4>)
 800237e:	2200      	movs	r2, #0
 8002380:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002382:	4b09      	ldr	r3, [pc, #36]	@ (80023a8 <MX_SPI1_Init+0xa4>)
 8002384:	2200      	movs	r2, #0
 8002386:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002388:	4b07      	ldr	r3, [pc, #28]	@ (80023a8 <MX_SPI1_Init+0xa4>)
 800238a:	2200      	movs	r2, #0
 800238c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800238e:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <MX_SPI1_Init+0xa4>)
 8002390:	2200      	movs	r2, #0
 8002392:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002394:	4804      	ldr	r0, [pc, #16]	@ (80023a8 <MX_SPI1_Init+0xa4>)
 8002396:	f009 fed1 	bl	800c13c <HAL_SPI_Init>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80023a0:	f000 fb58 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023a4:	bf00      	nop
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	24000264 	.word	0x24000264
 80023ac:	40013000 	.word	0x40013000

080023b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	@ 0x28
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b6:	f107 031c 	add.w	r3, r7, #28
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	605a      	str	r2, [r3, #4]
 80023c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023c2:	463b      	mov	r3, r7
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
 80023d0:	615a      	str	r2, [r3, #20]
 80023d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002494 <MX_TIM2_Init+0xe4>)
 80023d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80023da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1360;
 80023dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002494 <MX_TIM2_Init+0xe4>)
 80023de:	f44f 62aa 	mov.w	r2, #1360	@ 0x550
 80023e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002494 <MX_TIM2_Init+0xe4>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80023ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002494 <MX_TIM2_Init+0xe4>)
 80023ec:	2264      	movs	r2, #100	@ 0x64
 80023ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f0:	4b28      	ldr	r3, [pc, #160]	@ (8002494 <MX_TIM2_Init+0xe4>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023f6:	4b27      	ldr	r3, [pc, #156]	@ (8002494 <MX_TIM2_Init+0xe4>)
 80023f8:	2280      	movs	r2, #128	@ 0x80
 80023fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80023fc:	4825      	ldr	r0, [pc, #148]	@ (8002494 <MX_TIM2_Init+0xe4>)
 80023fe:	f00a fdf5 	bl	800cfec <HAL_TIM_PWM_Init>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002408:	f000 fb24 	bl	8002a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800240c:	2300      	movs	r3, #0
 800240e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002410:	2300      	movs	r3, #0
 8002412:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002414:	f107 031c 	add.w	r3, r7, #28
 8002418:	4619      	mov	r1, r3
 800241a:	481e      	ldr	r0, [pc, #120]	@ (8002494 <MX_TIM2_Init+0xe4>)
 800241c:	f00b fee2 	bl	800e1e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002426:	f000 fb15 	bl	8002a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800242a:	2360      	movs	r3, #96	@ 0x60
 800242c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002432:	2300      	movs	r3, #0
 8002434:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002436:	2300      	movs	r3, #0
 8002438:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800243a:	463b      	mov	r3, r7
 800243c:	2200      	movs	r2, #0
 800243e:	4619      	mov	r1, r3
 8002440:	4814      	ldr	r0, [pc, #80]	@ (8002494 <MX_TIM2_Init+0xe4>)
 8002442:	f00b f84f 	bl	800d4e4 <HAL_TIM_PWM_ConfigChannel>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800244c:	f000 fb02 	bl	8002a54 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8002450:	4b10      	ldr	r3, [pc, #64]	@ (8002494 <MX_TIM2_Init+0xe4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699a      	ldr	r2, [r3, #24]
 8002456:	4b0f      	ldr	r3, [pc, #60]	@ (8002494 <MX_TIM2_Init+0xe4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0208 	bic.w	r2, r2, #8
 800245e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002460:	463b      	mov	r3, r7
 8002462:	2204      	movs	r2, #4
 8002464:	4619      	mov	r1, r3
 8002466:	480b      	ldr	r0, [pc, #44]	@ (8002494 <MX_TIM2_Init+0xe4>)
 8002468:	f00b f83c 	bl	800d4e4 <HAL_TIM_PWM_ConfigChannel>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8002472:	f000 faef 	bl	8002a54 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8002476:	4b07      	ldr	r3, [pc, #28]	@ (8002494 <MX_TIM2_Init+0xe4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	699a      	ldr	r2, [r3, #24]
 800247c:	4b05      	ldr	r3, [pc, #20]	@ (8002494 <MX_TIM2_Init+0xe4>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002484:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002486:	4803      	ldr	r0, [pc, #12]	@ (8002494 <MX_TIM2_Init+0xe4>)
 8002488:	f000 fdd0 	bl	800302c <HAL_TIM_MspPostInit>

}
 800248c:	bf00      	nop
 800248e:	3728      	adds	r7, #40	@ 0x28
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	240002ec 	.word	0x240002ec

08002498 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800249e:	f107 0310 	add.w	r3, r7, #16
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	609a      	str	r2, [r3, #8]
 80024aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002530 <MX_TIM3_Init+0x98>)
 80024b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002534 <MX_TIM3_Init+0x9c>)
 80024ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500-1;
 80024bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002530 <MX_TIM3_Init+0x98>)
 80024be:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80024c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002530 <MX_TIM3_Init+0x98>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 55000-1;
 80024ca:	4b19      	ldr	r3, [pc, #100]	@ (8002530 <MX_TIM3_Init+0x98>)
 80024cc:	f24d 62d7 	movw	r2, #54999	@ 0xd6d7
 80024d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d2:	4b17      	ldr	r3, [pc, #92]	@ (8002530 <MX_TIM3_Init+0x98>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024d8:	4b15      	ldr	r3, [pc, #84]	@ (8002530 <MX_TIM3_Init+0x98>)
 80024da:	2280      	movs	r2, #128	@ 0x80
 80024dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024de:	4814      	ldr	r0, [pc, #80]	@ (8002530 <MX_TIM3_Init+0x98>)
 80024e0:	f00a fca7 	bl	800ce32 <HAL_TIM_Base_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80024ea:	f000 fab3 	bl	8002a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024f4:	f107 0310 	add.w	r3, r7, #16
 80024f8:	4619      	mov	r1, r3
 80024fa:	480d      	ldr	r0, [pc, #52]	@ (8002530 <MX_TIM3_Init+0x98>)
 80024fc:	f00b f906 	bl	800d70c <HAL_TIM_ConfigClockSource>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002506:	f000 faa5 	bl	8002a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002512:	1d3b      	adds	r3, r7, #4
 8002514:	4619      	mov	r1, r3
 8002516:	4806      	ldr	r0, [pc, #24]	@ (8002530 <MX_TIM3_Init+0x98>)
 8002518:	f00b fe64 	bl	800e1e4 <HAL_TIMEx_MasterConfigSynchronization>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8002522:	f000 fa97 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002526:	bf00      	nop
 8002528:	3720      	adds	r7, #32
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	24000338 	.word	0x24000338
 8002534:	40000400 	.word	0x40000400

08002538 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800253e:	f107 0310 	add.w	r3, r7, #16
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800254c:	1d3b      	adds	r3, r7, #4
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002556:	4b1e      	ldr	r3, [pc, #120]	@ (80025d0 <MX_TIM4_Init+0x98>)
 8002558:	4a1e      	ldr	r2, [pc, #120]	@ (80025d4 <MX_TIM4_Init+0x9c>)
 800255a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 500-1;
 800255c:	4b1c      	ldr	r3, [pc, #112]	@ (80025d0 <MX_TIM4_Init+0x98>)
 800255e:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002562:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002564:	4b1a      	ldr	r3, [pc, #104]	@ (80025d0 <MX_TIM4_Init+0x98>)
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 55000-1;
 800256a:	4b19      	ldr	r3, [pc, #100]	@ (80025d0 <MX_TIM4_Init+0x98>)
 800256c:	f24d 62d7 	movw	r2, #54999	@ 0xd6d7
 8002570:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002572:	4b17      	ldr	r3, [pc, #92]	@ (80025d0 <MX_TIM4_Init+0x98>)
 8002574:	2200      	movs	r2, #0
 8002576:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002578:	4b15      	ldr	r3, [pc, #84]	@ (80025d0 <MX_TIM4_Init+0x98>)
 800257a:	2280      	movs	r2, #128	@ 0x80
 800257c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800257e:	4814      	ldr	r0, [pc, #80]	@ (80025d0 <MX_TIM4_Init+0x98>)
 8002580:	f00a fc57 	bl	800ce32 <HAL_TIM_Base_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800258a:	f000 fa63 	bl	8002a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800258e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002592:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002594:	f107 0310 	add.w	r3, r7, #16
 8002598:	4619      	mov	r1, r3
 800259a:	480d      	ldr	r0, [pc, #52]	@ (80025d0 <MX_TIM4_Init+0x98>)
 800259c:	f00b f8b6 	bl	800d70c <HAL_TIM_ConfigClockSource>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80025a6:	f000 fa55 	bl	8002a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	4619      	mov	r1, r3
 80025b6:	4806      	ldr	r0, [pc, #24]	@ (80025d0 <MX_TIM4_Init+0x98>)
 80025b8:	f00b fe14 	bl	800e1e4 <HAL_TIMEx_MasterConfigSynchronization>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80025c2:	f000 fa47 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80025c6:	bf00      	nop
 80025c8:	3720      	adds	r7, #32
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	24000384 	.word	0x24000384
 80025d4:	40000800 	.word	0x40000800

080025d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025dc:	4b22      	ldr	r3, [pc, #136]	@ (8002668 <MX_USART1_UART_Init+0x90>)
 80025de:	4a23      	ldr	r2, [pc, #140]	@ (800266c <MX_USART1_UART_Init+0x94>)
 80025e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025e2:	4b21      	ldr	r3, [pc, #132]	@ (8002668 <MX_USART1_UART_Init+0x90>)
 80025e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002668 <MX_USART1_UART_Init+0x90>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002668 <MX_USART1_UART_Init+0x90>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002668 <MX_USART1_UART_Init+0x90>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002668 <MX_USART1_UART_Init+0x90>)
 80025fe:	220c      	movs	r2, #12
 8002600:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002602:	4b19      	ldr	r3, [pc, #100]	@ (8002668 <MX_USART1_UART_Init+0x90>)
 8002604:	2200      	movs	r2, #0
 8002606:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002608:	4b17      	ldr	r3, [pc, #92]	@ (8002668 <MX_USART1_UART_Init+0x90>)
 800260a:	2200      	movs	r2, #0
 800260c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800260e:	4b16      	ldr	r3, [pc, #88]	@ (8002668 <MX_USART1_UART_Init+0x90>)
 8002610:	2200      	movs	r2, #0
 8002612:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002614:	4b14      	ldr	r3, [pc, #80]	@ (8002668 <MX_USART1_UART_Init+0x90>)
 8002616:	2200      	movs	r2, #0
 8002618:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800261a:	4b13      	ldr	r3, [pc, #76]	@ (8002668 <MX_USART1_UART_Init+0x90>)
 800261c:	2200      	movs	r2, #0
 800261e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002620:	4811      	ldr	r0, [pc, #68]	@ (8002668 <MX_USART1_UART_Init+0x90>)
 8002622:	f00b fe99 	bl	800e358 <HAL_UART_Init>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800262c:	f000 fa12 	bl	8002a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002630:	2100      	movs	r1, #0
 8002632:	480d      	ldr	r0, [pc, #52]	@ (8002668 <MX_USART1_UART_Init+0x90>)
 8002634:	f00e faa9 	bl	8010b8a <HAL_UARTEx_SetTxFifoThreshold>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800263e:	f000 fa09 	bl	8002a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002642:	2100      	movs	r1, #0
 8002644:	4808      	ldr	r0, [pc, #32]	@ (8002668 <MX_USART1_UART_Init+0x90>)
 8002646:	f00e fade 	bl	8010c06 <HAL_UARTEx_SetRxFifoThreshold>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002650:	f000 fa00 	bl	8002a54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002654:	4804      	ldr	r0, [pc, #16]	@ (8002668 <MX_USART1_UART_Init+0x90>)
 8002656:	f00e fa5f 	bl	8010b18 <HAL_UARTEx_DisableFifoMode>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002660:	f000 f9f8 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002664:	bf00      	nop
 8002666:	bd80      	pop	{r7, pc}
 8002668:	240003d0 	.word	0x240003d0
 800266c:	40011000 	.word	0x40011000

08002670 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002674:	4b22      	ldr	r3, [pc, #136]	@ (8002700 <MX_USART3_UART_Init+0x90>)
 8002676:	4a23      	ldr	r2, [pc, #140]	@ (8002704 <MX_USART3_UART_Init+0x94>)
 8002678:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800267a:	4b21      	ldr	r3, [pc, #132]	@ (8002700 <MX_USART3_UART_Init+0x90>)
 800267c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002680:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002682:	4b1f      	ldr	r3, [pc, #124]	@ (8002700 <MX_USART3_UART_Init+0x90>)
 8002684:	2200      	movs	r2, #0
 8002686:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002688:	4b1d      	ldr	r3, [pc, #116]	@ (8002700 <MX_USART3_UART_Init+0x90>)
 800268a:	2200      	movs	r2, #0
 800268c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800268e:	4b1c      	ldr	r3, [pc, #112]	@ (8002700 <MX_USART3_UART_Init+0x90>)
 8002690:	2200      	movs	r2, #0
 8002692:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002694:	4b1a      	ldr	r3, [pc, #104]	@ (8002700 <MX_USART3_UART_Init+0x90>)
 8002696:	220c      	movs	r2, #12
 8002698:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800269a:	4b19      	ldr	r3, [pc, #100]	@ (8002700 <MX_USART3_UART_Init+0x90>)
 800269c:	2200      	movs	r2, #0
 800269e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026a0:	4b17      	ldr	r3, [pc, #92]	@ (8002700 <MX_USART3_UART_Init+0x90>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026a6:	4b16      	ldr	r3, [pc, #88]	@ (8002700 <MX_USART3_UART_Init+0x90>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026ac:	4b14      	ldr	r3, [pc, #80]	@ (8002700 <MX_USART3_UART_Init+0x90>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026b2:	4b13      	ldr	r3, [pc, #76]	@ (8002700 <MX_USART3_UART_Init+0x90>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026b8:	4811      	ldr	r0, [pc, #68]	@ (8002700 <MX_USART3_UART_Init+0x90>)
 80026ba:	f00b fe4d 	bl	800e358 <HAL_UART_Init>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80026c4:	f000 f9c6 	bl	8002a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026c8:	2100      	movs	r1, #0
 80026ca:	480d      	ldr	r0, [pc, #52]	@ (8002700 <MX_USART3_UART_Init+0x90>)
 80026cc:	f00e fa5d 	bl	8010b8a <HAL_UARTEx_SetTxFifoThreshold>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80026d6:	f000 f9bd 	bl	8002a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026da:	2100      	movs	r1, #0
 80026dc:	4808      	ldr	r0, [pc, #32]	@ (8002700 <MX_USART3_UART_Init+0x90>)
 80026de:	f00e fa92 	bl	8010c06 <HAL_UARTEx_SetRxFifoThreshold>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80026e8:	f000 f9b4 	bl	8002a54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80026ec:	4804      	ldr	r0, [pc, #16]	@ (8002700 <MX_USART3_UART_Init+0x90>)
 80026ee:	f00e fa13 	bl	8010b18 <HAL_UARTEx_DisableFifoMode>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80026f8:	f000 f9ac 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	24000464 	.word	0x24000464
 8002704:	40004800 	.word	0x40004800

08002708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800270e:	4b11      	ldr	r3, [pc, #68]	@ (8002754 <MX_DMA_Init+0x4c>)
 8002710:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002714:	4a0f      	ldr	r2, [pc, #60]	@ (8002754 <MX_DMA_Init+0x4c>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800271e:	4b0d      	ldr	r3, [pc, #52]	@ (8002754 <MX_DMA_Init+0x4c>)
 8002720:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800272c:	2200      	movs	r2, #0
 800272e:	2100      	movs	r1, #0
 8002730:	200b      	movs	r0, #11
 8002732:	f003 f91a 	bl	800596a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002736:	200b      	movs	r0, #11
 8002738:	f003 f931 	bl	800599e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800273c:	2200      	movs	r2, #0
 800273e:	2100      	movs	r1, #0
 8002740:	200c      	movs	r0, #12
 8002742:	f003 f912 	bl	800596a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002746:	200c      	movs	r0, #12
 8002748:	f003 f929 	bl	800599e <HAL_NVIC_EnableIRQ>

}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	58024400 	.word	0x58024400

08002758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08e      	sub	sp, #56	@ 0x38
 800275c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	605a      	str	r2, [r3, #4]
 8002768:	609a      	str	r2, [r3, #8]
 800276a:	60da      	str	r2, [r3, #12]
 800276c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800276e:	4bb2      	ldr	r3, [pc, #712]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 8002770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002774:	4ab0      	ldr	r2, [pc, #704]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 8002776:	f043 0310 	orr.w	r3, r3, #16
 800277a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800277e:	4bae      	ldr	r3, [pc, #696]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 8002780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	623b      	str	r3, [r7, #32]
 800278a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800278c:	4baa      	ldr	r3, [pc, #680]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 800278e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002792:	4aa9      	ldr	r2, [pc, #676]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 8002794:	f043 0304 	orr.w	r3, r3, #4
 8002798:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800279c:	4ba6      	ldr	r3, [pc, #664]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 800279e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	61fb      	str	r3, [r7, #28]
 80027a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027aa:	4ba3      	ldr	r3, [pc, #652]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 80027ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027b0:	4aa1      	ldr	r2, [pc, #644]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 80027b2:	f043 0320 	orr.w	r3, r3, #32
 80027b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027ba:	4b9f      	ldr	r3, [pc, #636]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 80027bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	61bb      	str	r3, [r7, #24]
 80027c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027c8:	4b9b      	ldr	r3, [pc, #620]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 80027ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ce:	4a9a      	ldr	r2, [pc, #616]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 80027d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027d8:	4b97      	ldr	r3, [pc, #604]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 80027da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	4b94      	ldr	r3, [pc, #592]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 80027e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ec:	4a92      	ldr	r2, [pc, #584]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027f6:	4b90      	ldr	r3, [pc, #576]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 80027f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002804:	4b8c      	ldr	r3, [pc, #560]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 8002806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800280a:	4a8b      	ldr	r2, [pc, #556]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002814:	4b88      	ldr	r3, [pc, #544]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 8002816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002822:	4b85      	ldr	r3, [pc, #532]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 8002824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002828:	4a83      	ldr	r2, [pc, #524]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 800282a:	f043 0308 	orr.w	r3, r3, #8
 800282e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002832:	4b81      	ldr	r3, [pc, #516]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 8002834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002840:	4b7d      	ldr	r3, [pc, #500]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 8002842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002846:	4a7c      	ldr	r2, [pc, #496]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 8002848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800284c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002850:	4b79      	ldr	r3, [pc, #484]	@ (8002a38 <MX_GPIO_Init+0x2e0>)
 8002852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800285e:	2200      	movs	r2, #0
 8002860:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002864:	4875      	ldr	r0, [pc, #468]	@ (8002a3c <MX_GPIO_Init+0x2e4>)
 8002866:	f006 f895 	bl	8008994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN3_Pin|IN4_Pin|IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 800286a:	2200      	movs	r2, #0
 800286c:	213c      	movs	r1, #60	@ 0x3c
 800286e:	4874      	ldr	r0, [pc, #464]	@ (8002a40 <MX_GPIO_Init+0x2e8>)
 8002870:	f006 f890 	bl	8008994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TRIG_Pin|RS485_M2_TX_EN_Pin, GPIO_PIN_RESET);
 8002874:	2200      	movs	r2, #0
 8002876:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 800287a:	4872      	ldr	r0, [pc, #456]	@ (8002a44 <MX_GPIO_Init+0x2ec>)
 800287c:	f006 f88a 	bl	8008994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS485_M2_RX_LED_Pin|RS485_M1_TX_EN_Pin, GPIO_PIN_RESET);
 8002880:	2200      	movs	r2, #0
 8002882:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002886:	4870      	ldr	r0, [pc, #448]	@ (8002a48 <MX_GPIO_Init+0x2f0>)
 8002888:	f006 f884 	bl	8008994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_M1_RX_LED_GPIO_Port, RS485_M1_RX_LED_Pin, GPIO_PIN_RESET);
 800288c:	2200      	movs	r2, #0
 800288e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002892:	486e      	ldr	r0, [pc, #440]	@ (8002a4c <MX_GPIO_Init+0x2f4>)
 8002894:	f006 f87e 	bl	8008994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|LORA_TX_LED_Pin, GPIO_PIN_RESET);
 8002898:	2200      	movs	r2, #0
 800289a:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 800289e:	486c      	ldr	r0, [pc, #432]	@ (8002a50 <MX_GPIO_Init+0x2f8>)
 80028a0:	f006 f878 	bl	8008994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RX_LED_GPIO_Port, LORA_RX_LED_Pin, GPIO_PIN_SET);
 80028a4:	2201      	movs	r2, #1
 80028a6:	2140      	movs	r1, #64	@ 0x40
 80028a8:	4868      	ldr	r0, [pc, #416]	@ (8002a4c <MX_GPIO_Init+0x2f4>)
 80028aa:	f006 f873 	bl	8008994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LORA_NSS_Pin|LORA_RST_Pin, GPIO_PIN_SET);
 80028ae:	2201      	movs	r2, #1
 80028b0:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 80028b4:	4866      	ldr	r0, [pc, #408]	@ (8002a50 <MX_GPIO_Init+0x2f8>)
 80028b6:	f006 f86d 	bl	8008994 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_0
 80028ba:	231f      	movs	r3, #31
 80028bc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80028c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028cc:	4619      	mov	r1, r3
 80028ce:	485d      	ldr	r0, [pc, #372]	@ (8002a44 <MX_GPIO_Init+0x2ec>)
 80028d0:	f005 feb8 	bl	8008644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80028d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028da:	2301      	movs	r3, #1
 80028dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e2:	2300      	movs	r3, #0
 80028e4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ea:	4619      	mov	r1, r3
 80028ec:	4853      	ldr	r0, [pc, #332]	@ (8002a3c <MX_GPIO_Init+0x2e4>)
 80028ee:	f005 fea9 	bl	8008644 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN3_Pin IN4_Pin IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN3_Pin|IN4_Pin|IN2_Pin|IN1_Pin;
 80028f2:	233c      	movs	r3, #60	@ 0x3c
 80028f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f6:	2301      	movs	r3, #1
 80028f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fe:	2300      	movs	r3, #0
 8002900:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002906:	4619      	mov	r1, r3
 8002908:	484d      	ldr	r0, [pc, #308]	@ (8002a40 <MX_GPIO_Init+0x2e8>)
 800290a:	f005 fe9b 	bl	8008644 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 800290e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002914:	2301      	movs	r3, #1
 8002916:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002918:	2302      	movs	r3, #2
 800291a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800291c:	2302      	movs	r3, #2
 800291e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8002920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002924:	4619      	mov	r1, r3
 8002926:	4847      	ldr	r0, [pc, #284]	@ (8002a44 <MX_GPIO_Init+0x2ec>)
 8002928:	f005 fe8c 	bl	8008644 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_M2_TX_EN_Pin */
  GPIO_InitStruct.Pin = RS485_M2_TX_EN_Pin;
 800292c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002930:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002932:	2301      	movs	r3, #1
 8002934:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800293a:	2302      	movs	r3, #2
 800293c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RS485_M2_TX_EN_GPIO_Port, &GPIO_InitStruct);
 800293e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002942:	4619      	mov	r1, r3
 8002944:	483f      	ldr	r0, [pc, #252]	@ (8002a44 <MX_GPIO_Init+0x2ec>)
 8002946:	f005 fe7d 	bl	8008644 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_M2_RX_LED_Pin */
  GPIO_InitStruct.Pin = RS485_M2_RX_LED_Pin;
 800294a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002950:	2301      	movs	r3, #1
 8002952:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002958:	2300      	movs	r3, #0
 800295a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RS485_M2_RX_LED_GPIO_Port, &GPIO_InitStruct);
 800295c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002960:	4619      	mov	r1, r3
 8002962:	4839      	ldr	r0, [pc, #228]	@ (8002a48 <MX_GPIO_Init+0x2f0>)
 8002964:	f005 fe6e 	bl	8008644 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_M1_TX_EN_Pin */
  GPIO_InitStruct.Pin = RS485_M1_TX_EN_Pin;
 8002968:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800296c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800296e:	2301      	movs	r3, #1
 8002970:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002972:	2300      	movs	r3, #0
 8002974:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002976:	2302      	movs	r3, #2
 8002978:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RS485_M1_TX_EN_GPIO_Port, &GPIO_InitStruct);
 800297a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800297e:	4619      	mov	r1, r3
 8002980:	4831      	ldr	r0, [pc, #196]	@ (8002a48 <MX_GPIO_Init+0x2f0>)
 8002982:	f005 fe5f 	bl	8008644 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS485_M1_RX_LED_Pin LORA_RX_LED_Pin */
  GPIO_InitStruct.Pin = RS485_M1_RX_LED_Pin|LORA_RX_LED_Pin;
 8002986:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800298a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800298c:	2301      	movs	r3, #1
 800298e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002994:	2300      	movs	r3, #0
 8002996:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002998:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800299c:	4619      	mov	r1, r3
 800299e:	482b      	ldr	r0, [pc, #172]	@ (8002a4c <MX_GPIO_Init+0x2f4>)
 80029a0:	f005 fe50 	bl	8008644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 LORA_NSS_Pin LORA_RST_Pin LORA_TX_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_7|LORA_NSS_Pin|LORA_RST_Pin|LORA_TX_LED_Pin;
 80029a4:	f44f 43a9 	mov.w	r3, #21632	@ 0x5480
 80029a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029aa:	2301      	movs	r3, #1
 80029ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b2:	2300      	movs	r3, #0
 80029b4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029ba:	4619      	mov	r1, r3
 80029bc:	4824      	ldr	r0, [pc, #144]	@ (8002a50 <MX_GPIO_Init+0x2f8>)
 80029be:	f005 fe41 	bl	8008644 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO0_Pin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin;
 80029c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(LORA_DIO0_GPIO_Port, &GPIO_InitStruct);
 80029d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029d6:	4619      	mov	r1, r3
 80029d8:	481d      	ldr	r0, [pc, #116]	@ (8002a50 <MX_GPIO_Init+0x2f8>)
 80029da:	f005 fe33 	bl	8008644 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80029de:	2200      	movs	r2, #0
 80029e0:	2100      	movs	r1, #0
 80029e2:	2006      	movs	r0, #6
 80029e4:	f002 ffc1 	bl	800596a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80029e8:	2006      	movs	r0, #6
 80029ea:	f002 ffd8 	bl	800599e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80029ee:	2200      	movs	r2, #0
 80029f0:	2100      	movs	r1, #0
 80029f2:	2007      	movs	r0, #7
 80029f4:	f002 ffb9 	bl	800596a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80029f8:	2007      	movs	r0, #7
 80029fa:	f002 ffd0 	bl	800599e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2100      	movs	r1, #0
 8002a02:	2008      	movs	r0, #8
 8002a04:	f002 ffb1 	bl	800596a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002a08:	2008      	movs	r0, #8
 8002a0a:	f002 ffc8 	bl	800599e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2100      	movs	r1, #0
 8002a12:	2009      	movs	r0, #9
 8002a14:	f002 ffa9 	bl	800596a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002a18:	2009      	movs	r0, #9
 8002a1a:	f002 ffc0 	bl	800599e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2100      	movs	r1, #0
 8002a22:	2028      	movs	r0, #40	@ 0x28
 8002a24:	f002 ffa1 	bl	800596a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a28:	2028      	movs	r0, #40	@ 0x28
 8002a2a:	f002 ffb8 	bl	800599e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a2e:	bf00      	nop
 8002a30:	3738      	adds	r7, #56	@ 0x38
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	58024400 	.word	0x58024400
 8002a3c:	58020800 	.word	0x58020800
 8002a40:	58020000 	.word	0x58020000
 8002a44:	58021000 	.word	0x58021000
 8002a48:	58020400 	.word	0x58020400
 8002a4c:	58020c00 	.word	0x58020c00
 8002a50:	58021800 	.word	0x58021800

08002a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a58:	b672      	cpsid	i
}
 8002a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a5c:	bf00      	nop
 8002a5e:	e7fd      	b.n	8002a5c <Error_Handler+0x8>

08002a60 <rs485_init>:
 */


#include "rs485_driver.h"

void rs485_init(rs485_driver *driver){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(driver->rs485_timer);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f00a fa37 	bl	800cee0 <HAL_TIM_Base_Start_IT>
	HAL_UARTEx_ReceiveToIdle_IT(driver->rs485_huart, driver->rs485_RxData, 16);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6958      	ldr	r0, [r3, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	331c      	adds	r3, #28
 8002a7a:	2210      	movs	r2, #16
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	f00e f900 	bl	8010c82 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <rs485_UART_receive_handler>:
	driver->rs485_TxData[6] = crc&0xFF;
	driver->rs485_TxData[7] = (crc>>8)&0xFF;
	rs485_send_data(driver, driver->rs485_TxData);
}

void rs485_UART_receive_handler(rs485_driver *driver){
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
	driver->rs485_isbusy = 0;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	driver->rs485_timer->Instance->CNT = 0;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	625a      	str	r2, [r3, #36]	@ 0x24
	driver->rs485_connectivity = 255;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	22ff      	movs	r2, #255	@ 0xff
 8002aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	HAL_GPIO_WritePin(driver->rs485_rx_led_port, driver->rs485_rx_led_pin, GPIO_PIN_SET);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68d8      	ldr	r0, [r3, #12]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	8a1b      	ldrh	r3, [r3, #16]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f005 ff6c 	bl	8008994 <HAL_GPIO_WritePin>
	HAL_UARTEx_ReceiveToIdle_IT(driver->rs485_huart, driver->rs485_RxData, 16);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6958      	ldr	r0, [r3, #20]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	331c      	adds	r3, #28
 8002ac4:	2210      	movs	r2, #16
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f00e f8db 	bl	8010c82 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8002acc:	bf00      	nop
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <rs485_connection_lost_handler>:

void rs485_connection_lost_handler(rs485_driver *driver){
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
	driver->rs485_connectivity= 0;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	HAL_GPIO_WritePin(driver->rs485_enable_port, driver->rs485_enable_pin, GPIO_PIN_SET);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6858      	ldr	r0, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	891b      	ldrh	r3, [r3, #8]
 8002aec:	2201      	movs	r2, #1
 8002aee:	4619      	mov	r1, r3
 8002af0:	f005 ff50 	bl	8008994 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(driver->rs485_huart, driver->rs485_TxData, 8, 500);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6958      	ldr	r0, [r3, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8002afe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002b02:	2208      	movs	r2, #8
 8002b04:	f00b fc78 	bl	800e3f8 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(driver->rs485_enable_port, driver->rs485_enable_pin, GPIO_PIN_RESET);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6858      	ldr	r0, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	891b      	ldrh	r3, [r3, #8]
 8002b10:	2200      	movs	r2, #0
 8002b12:	4619      	mov	r1, r3
 8002b14:	f005 ff3e 	bl	8008994 <HAL_GPIO_WritePin>
	HAL_UARTEx_ReceiveToIdle_IT(driver->rs485_huart, driver->rs485_RxData, 16);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6958      	ldr	r0, [r3, #20]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	331c      	adds	r3, #28
 8002b20:	2210      	movs	r2, #16
 8002b22:	4619      	mov	r1, r3
 8002b24:	f00e f8ad 	bl	8010c82 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b36:	4b0a      	ldr	r3, [pc, #40]	@ (8002b60 <HAL_MspInit+0x30>)
 8002b38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002b3c:	4a08      	ldr	r2, [pc, #32]	@ (8002b60 <HAL_MspInit+0x30>)
 8002b3e:	f043 0302 	orr.w	r3, r3, #2
 8002b42:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002b46:	4b06      	ldr	r3, [pc, #24]	@ (8002b60 <HAL_MspInit+0x30>)
 8002b48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	607b      	str	r3, [r7, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	58024400 	.word	0x58024400

08002b64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b090      	sub	sp, #64	@ 0x40
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	60da      	str	r2, [r3, #12]
 8002b7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4aa0      	ldr	r2, [pc, #640]	@ (8002e04 <HAL_ADC_MspInit+0x2a0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	f040 80b6 	bne.w	8002cf4 <HAL_ADC_MspInit+0x190>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002b88:	4b9f      	ldr	r3, [pc, #636]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002b8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002b8e:	4a9e      	ldr	r2, [pc, #632]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002b90:	f043 0320 	orr.w	r3, r3, #32
 8002b94:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002b98:	4b9b      	ldr	r3, [pc, #620]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002b9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba6:	4b98      	ldr	r3, [pc, #608]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bac:	4a96      	ldr	r2, [pc, #600]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002bae:	f043 0304 	orr.w	r3, r3, #4
 8002bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bb6:	4b94      	ldr	r3, [pc, #592]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc4:	4b90      	ldr	r3, [pc, #576]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bca:	4a8f      	ldr	r2, [pc, #572]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bd4:	4b8c      	ldr	r3, [pc, #560]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	623b      	str	r3, [r7, #32]
 8002be0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be2:	4b89      	ldr	r3, [pc, #548]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002be8:	4a87      	ldr	r2, [pc, #540]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002bea:	f043 0302 	orr.w	r3, r3, #2
 8002bee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bf2:	4b85      	ldr	r3, [pc, #532]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c00:	4b81      	ldr	r3, [pc, #516]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c06:	4a80      	ldr	r2, [pc, #512]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002c08:	f043 0320 	orr.w	r3, r3, #32
 8002c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c10:	4b7d      	ldr	r3, [pc, #500]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c16:	f003 0320 	and.w	r3, r3, #32
 8002c1a:	61bb      	str	r3, [r7, #24]
 8002c1c:	69bb      	ldr	r3, [r7, #24]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002c1e:	2333      	movs	r3, #51	@ 0x33
 8002c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c22:	2303      	movs	r3, #3
 8002c24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4876      	ldr	r0, [pc, #472]	@ (8002e0c <HAL_ADC_MspInit+0x2a8>)
 8002c32:	f005 fd07 	bl	8008644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c36:	23c0      	movs	r3, #192	@ 0xc0
 8002c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c46:	4619      	mov	r1, r3
 8002c48:	4871      	ldr	r0, [pc, #452]	@ (8002e10 <HAL_ADC_MspInit+0x2ac>)
 8002c4a:	f005 fcfb 	bl	8008644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c52:	2303      	movs	r3, #3
 8002c54:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c5e:	4619      	mov	r1, r3
 8002c60:	486c      	ldr	r0, [pc, #432]	@ (8002e14 <HAL_ADC_MspInit+0x2b0>)
 8002c62:	f005 fcef 	bl	8008644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002c66:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4867      	ldr	r0, [pc, #412]	@ (8002e18 <HAL_ADC_MspInit+0x2b4>)
 8002c7c:	f005 fce2 	bl	8008644 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002c80:	4b66      	ldr	r3, [pc, #408]	@ (8002e1c <HAL_ADC_MspInit+0x2b8>)
 8002c82:	4a67      	ldr	r2, [pc, #412]	@ (8002e20 <HAL_ADC_MspInit+0x2bc>)
 8002c84:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002c86:	4b65      	ldr	r3, [pc, #404]	@ (8002e1c <HAL_ADC_MspInit+0x2b8>)
 8002c88:	2209      	movs	r2, #9
 8002c8a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c8c:	4b63      	ldr	r3, [pc, #396]	@ (8002e1c <HAL_ADC_MspInit+0x2b8>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c92:	4b62      	ldr	r3, [pc, #392]	@ (8002e1c <HAL_ADC_MspInit+0x2b8>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002c98:	4b60      	ldr	r3, [pc, #384]	@ (8002e1c <HAL_ADC_MspInit+0x2b8>)
 8002c9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c9e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e1c <HAL_ADC_MspInit+0x2b8>)
 8002ca2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ca6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ca8:	4b5c      	ldr	r3, [pc, #368]	@ (8002e1c <HAL_ADC_MspInit+0x2b8>)
 8002caa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002cb0:	4b5a      	ldr	r3, [pc, #360]	@ (8002e1c <HAL_ADC_MspInit+0x2b8>)
 8002cb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cb6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002cb8:	4b58      	ldr	r3, [pc, #352]	@ (8002e1c <HAL_ADC_MspInit+0x2b8>)
 8002cba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002cbe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cc0:	4b56      	ldr	r3, [pc, #344]	@ (8002e1c <HAL_ADC_MspInit+0x2b8>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002cc6:	4855      	ldr	r0, [pc, #340]	@ (8002e1c <HAL_ADC_MspInit+0x2b8>)
 8002cc8:	f002 fe84 	bl	80059d4 <HAL_DMA_Init>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_ADC_MspInit+0x172>
    {
      Error_Handler();
 8002cd2:	f7ff febf 	bl	8002a54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a50      	ldr	r2, [pc, #320]	@ (8002e1c <HAL_ADC_MspInit+0x2b8>)
 8002cda:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cdc:	4a4f      	ldr	r2, [pc, #316]	@ (8002e1c <HAL_ADC_MspInit+0x2b8>)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	2012      	movs	r0, #18
 8002ce8:	f002 fe3f 	bl	800596a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002cec:	2012      	movs	r0, #18
 8002cee:	f002 fe56 	bl	800599e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002cf2:	e083      	b.n	8002dfc <HAL_ADC_MspInit+0x298>
  else if(hadc->Instance==ADC3)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a4a      	ldr	r2, [pc, #296]	@ (8002e24 <HAL_ADC_MspInit+0x2c0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d17e      	bne.n	8002dfc <HAL_ADC_MspInit+0x298>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002cfe:	4b42      	ldr	r3, [pc, #264]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d04:	4a40      	ldr	r2, [pc, #256]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002d06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d1c:	4b3a      	ldr	r3, [pc, #232]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d22:	4a39      	ldr	r2, [pc, #228]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002d24:	f043 0320 	orr.w	r3, r3, #32
 8002d28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d2c:	4b36      	ldr	r3, [pc, #216]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d3a:	4b33      	ldr	r3, [pc, #204]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d40:	4a31      	ldr	r2, [pc, #196]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002d42:	f043 0304 	orr.w	r3, r3, #4
 8002d46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002e08 <HAL_ADC_MspInit+0x2a4>)
 8002d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002d58:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 8002d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	482a      	ldr	r0, [pc, #168]	@ (8002e18 <HAL_ADC_MspInit+0x2b4>)
 8002d6e:	f005 fc69 	bl	8008644 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002d72:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8002d76:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002d7a:	f000 fc5d 	bl	8003638 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002d7e:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8002d82:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8002d86:	f000 fc57 	bl	8003638 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002d8a:	4b27      	ldr	r3, [pc, #156]	@ (8002e28 <HAL_ADC_MspInit+0x2c4>)
 8002d8c:	4a27      	ldr	r2, [pc, #156]	@ (8002e2c <HAL_ADC_MspInit+0x2c8>)
 8002d8e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002d90:	4b25      	ldr	r3, [pc, #148]	@ (8002e28 <HAL_ADC_MspInit+0x2c4>)
 8002d92:	2273      	movs	r2, #115	@ 0x73
 8002d94:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d96:	4b24      	ldr	r3, [pc, #144]	@ (8002e28 <HAL_ADC_MspInit+0x2c4>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d9c:	4b22      	ldr	r3, [pc, #136]	@ (8002e28 <HAL_ADC_MspInit+0x2c4>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002da2:	4b21      	ldr	r3, [pc, #132]	@ (8002e28 <HAL_ADC_MspInit+0x2c4>)
 8002da4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002da8:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002daa:	4b1f      	ldr	r3, [pc, #124]	@ (8002e28 <HAL_ADC_MspInit+0x2c4>)
 8002dac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002db0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002db2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e28 <HAL_ADC_MspInit+0x2c4>)
 8002db4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002db8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002dba:	4b1b      	ldr	r3, [pc, #108]	@ (8002e28 <HAL_ADC_MspInit+0x2c4>)
 8002dbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002dc0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8002dc2:	4b19      	ldr	r3, [pc, #100]	@ (8002e28 <HAL_ADC_MspInit+0x2c4>)
 8002dc4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002dc8:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dca:	4b17      	ldr	r3, [pc, #92]	@ (8002e28 <HAL_ADC_MspInit+0x2c4>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002dd0:	4815      	ldr	r0, [pc, #84]	@ (8002e28 <HAL_ADC_MspInit+0x2c4>)
 8002dd2:	f002 fdff 	bl	80059d4 <HAL_DMA_Init>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <HAL_ADC_MspInit+0x27c>
      Error_Handler();
 8002ddc:	f7ff fe3a 	bl	8002a54 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a11      	ldr	r2, [pc, #68]	@ (8002e28 <HAL_ADC_MspInit+0x2c4>)
 8002de4:	659a      	str	r2, [r3, #88]	@ 0x58
 8002de6:	4a10      	ldr	r2, [pc, #64]	@ (8002e28 <HAL_ADC_MspInit+0x2c4>)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8002dec:	2200      	movs	r2, #0
 8002dee:	2100      	movs	r1, #0
 8002df0:	207f      	movs	r0, #127	@ 0x7f
 8002df2:	f002 fdba 	bl	800596a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002df6:	207f      	movs	r0, #127	@ 0x7f
 8002df8:	f002 fdd1 	bl	800599e <HAL_NVIC_EnableIRQ>
}
 8002dfc:	bf00      	nop
 8002dfe:	3740      	adds	r7, #64	@ 0x40
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40022000 	.word	0x40022000
 8002e08:	58024400 	.word	0x58024400
 8002e0c:	58020800 	.word	0x58020800
 8002e10:	58020000 	.word	0x58020000
 8002e14:	58020400 	.word	0x58020400
 8002e18:	58021400 	.word	0x58021400
 8002e1c:	24000174 	.word	0x24000174
 8002e20:	40020010 	.word	0x40020010
 8002e24:	58026000 	.word	0x58026000
 8002e28:	240001ec 	.word	0x240001ec
 8002e2c:	40020028 	.word	0x40020028

08002e30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b0ba      	sub	sp, #232	@ 0xe8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e38:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e48:	f107 0318 	add.w	r3, r7, #24
 8002e4c:	22b8      	movs	r2, #184	@ 0xb8
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f00d ffb5 	bl	8010dc0 <memset>
  if(hspi->Instance==SPI1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a39      	ldr	r2, [pc, #228]	@ (8002f40 <HAL_SPI_MspInit+0x110>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d16a      	bne.n	8002f36 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002e60:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002e6c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e70:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e72:	f107 0318 	add.w	r3, r7, #24
 8002e76:	4618      	mov	r0, r3
 8002e78:	f006 fd7a 	bl	8009970 <HAL_RCCEx_PeriphCLKConfig>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002e82:	f7ff fde7 	bl	8002a54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e86:	4b2f      	ldr	r3, [pc, #188]	@ (8002f44 <HAL_SPI_MspInit+0x114>)
 8002e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e8c:	4a2d      	ldr	r2, [pc, #180]	@ (8002f44 <HAL_SPI_MspInit+0x114>)
 8002e8e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e96:	4b2b      	ldr	r3, [pc, #172]	@ (8002f44 <HAL_SPI_MspInit+0x114>)
 8002e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ea4:	4b27      	ldr	r3, [pc, #156]	@ (8002f44 <HAL_SPI_MspInit+0x114>)
 8002ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eaa:	4a26      	ldr	r2, [pc, #152]	@ (8002f44 <HAL_SPI_MspInit+0x114>)
 8002eac:	f043 0308 	orr.w	r3, r3, #8
 8002eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002eb4:	4b23      	ldr	r3, [pc, #140]	@ (8002f44 <HAL_SPI_MspInit+0x114>)
 8002eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ec2:	4b20      	ldr	r3, [pc, #128]	@ (8002f44 <HAL_SPI_MspInit+0x114>)
 8002ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8002f44 <HAL_SPI_MspInit+0x114>)
 8002eca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ece:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8002f44 <HAL_SPI_MspInit+0x114>)
 8002ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002ee0:	2380      	movs	r3, #128	@ 0x80
 8002ee2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ef8:	2305      	movs	r3, #5
 8002efa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002efe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002f02:	4619      	mov	r1, r3
 8002f04:	4810      	ldr	r0, [pc, #64]	@ (8002f48 <HAL_SPI_MspInit+0x118>)
 8002f06:	f005 fb9d 	bl	8008644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002f0a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f12:	2302      	movs	r3, #2
 8002f14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f24:	2305      	movs	r3, #5
 8002f26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f2a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4806      	ldr	r0, [pc, #24]	@ (8002f4c <HAL_SPI_MspInit+0x11c>)
 8002f32:	f005 fb87 	bl	8008644 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002f36:	bf00      	nop
 8002f38:	37e8      	adds	r7, #232	@ 0xe8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40013000 	.word	0x40013000
 8002f44:	58024400 	.word	0x58024400
 8002f48:	58020c00 	.word	0x58020c00
 8002f4c:	58021800 	.word	0x58021800

08002f50 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f60:	d116      	bne.n	8002f90 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f62:	4b0d      	ldr	r3, [pc, #52]	@ (8002f98 <HAL_TIM_PWM_MspInit+0x48>)
 8002f64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f68:	4a0b      	ldr	r2, [pc, #44]	@ (8002f98 <HAL_TIM_PWM_MspInit+0x48>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002f72:	4b09      	ldr	r3, [pc, #36]	@ (8002f98 <HAL_TIM_PWM_MspInit+0x48>)
 8002f74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f80:	2200      	movs	r2, #0
 8002f82:	2100      	movs	r1, #0
 8002f84:	201c      	movs	r0, #28
 8002f86:	f002 fcf0 	bl	800596a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f8a:	201c      	movs	r0, #28
 8002f8c:	f002 fd07 	bl	800599e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002f90:	bf00      	nop
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	58024400 	.word	0x58024400

08002f9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8003020 <HAL_TIM_Base_MspInit+0x84>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d117      	bne.n	8002fde <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fae:	4b1d      	ldr	r3, [pc, #116]	@ (8003024 <HAL_TIM_Base_MspInit+0x88>)
 8002fb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8003024 <HAL_TIM_Base_MspInit+0x88>)
 8002fb6:	f043 0302 	orr.w	r3, r3, #2
 8002fba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002fbe:	4b19      	ldr	r3, [pc, #100]	@ (8003024 <HAL_TIM_Base_MspInit+0x88>)
 8002fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2100      	movs	r1, #0
 8002fd0:	201d      	movs	r0, #29
 8002fd2:	f002 fcca 	bl	800596a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002fd6:	201d      	movs	r0, #29
 8002fd8:	f002 fce1 	bl	800599e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002fdc:	e01b      	b.n	8003016 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM4)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a11      	ldr	r2, [pc, #68]	@ (8003028 <HAL_TIM_Base_MspInit+0x8c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d116      	bne.n	8003016 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8003024 <HAL_TIM_Base_MspInit+0x88>)
 8002fea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fee:	4a0d      	ldr	r2, [pc, #52]	@ (8003024 <HAL_TIM_Base_MspInit+0x88>)
 8002ff0:	f043 0304 	orr.w	r3, r3, #4
 8002ff4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8003024 <HAL_TIM_Base_MspInit+0x88>)
 8002ffa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003006:	2200      	movs	r2, #0
 8003008:	2100      	movs	r1, #0
 800300a:	201e      	movs	r0, #30
 800300c:	f002 fcad 	bl	800596a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003010:	201e      	movs	r0, #30
 8003012:	f002 fcc4 	bl	800599e <HAL_NVIC_EnableIRQ>
}
 8003016:	bf00      	nop
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40000400 	.word	0x40000400
 8003024:	58024400 	.word	0x58024400
 8003028:	40000800 	.word	0x40000800

0800302c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003034:	f107 030c 	add.w	r3, r7, #12
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	60da      	str	r2, [r3, #12]
 8003042:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800304c:	d11e      	bne.n	800308c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800304e:	4b11      	ldr	r3, [pc, #68]	@ (8003094 <HAL_TIM_MspPostInit+0x68>)
 8003050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003054:	4a0f      	ldr	r2, [pc, #60]	@ (8003094 <HAL_TIM_MspPostInit+0x68>)
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800305e:	4b0d      	ldr	r3, [pc, #52]	@ (8003094 <HAL_TIM_MspPostInit+0x68>)
 8003060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800306c:	2303      	movs	r3, #3
 800306e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003070:	2302      	movs	r3, #2
 8003072:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003078:	2300      	movs	r3, #0
 800307a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800307c:	2301      	movs	r3, #1
 800307e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003080:	f107 030c 	add.w	r3, r7, #12
 8003084:	4619      	mov	r1, r3
 8003086:	4804      	ldr	r0, [pc, #16]	@ (8003098 <HAL_TIM_MspPostInit+0x6c>)
 8003088:	f005 fadc 	bl	8008644 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800308c:	bf00      	nop
 800308e:	3720      	adds	r7, #32
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	58024400 	.word	0x58024400
 8003098:	58020000 	.word	0x58020000

0800309c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b0ba      	sub	sp, #232	@ 0xe8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	60da      	str	r2, [r3, #12]
 80030b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030b4:	f107 0318 	add.w	r3, r7, #24
 80030b8:	22b8      	movs	r2, #184	@ 0xb8
 80030ba:	2100      	movs	r1, #0
 80030bc:	4618      	mov	r0, r3
 80030be:	f00d fe7f 	bl	8010dc0 <memset>
  if(huart->Instance==USART1)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a55      	ldr	r2, [pc, #340]	@ (800321c <HAL_UART_MspInit+0x180>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d14f      	bne.n	800316c <HAL_UART_MspInit+0xd0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80030cc:	f04f 0201 	mov.w	r2, #1
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80030d8:	2300      	movs	r3, #0
 80030da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030de:	f107 0318 	add.w	r3, r7, #24
 80030e2:	4618      	mov	r0, r3
 80030e4:	f006 fc44 	bl	8009970 <HAL_RCCEx_PeriphCLKConfig>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80030ee:	f7ff fcb1 	bl	8002a54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030f2:	4b4b      	ldr	r3, [pc, #300]	@ (8003220 <HAL_UART_MspInit+0x184>)
 80030f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030f8:	4a49      	ldr	r2, [pc, #292]	@ (8003220 <HAL_UART_MspInit+0x184>)
 80030fa:	f043 0310 	orr.w	r3, r3, #16
 80030fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003102:	4b47      	ldr	r3, [pc, #284]	@ (8003220 <HAL_UART_MspInit+0x184>)
 8003104:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003110:	4b43      	ldr	r3, [pc, #268]	@ (8003220 <HAL_UART_MspInit+0x184>)
 8003112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003116:	4a42      	ldr	r2, [pc, #264]	@ (8003220 <HAL_UART_MspInit+0x184>)
 8003118:	f043 0302 	orr.w	r3, r3, #2
 800311c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003120:	4b3f      	ldr	r3, [pc, #252]	@ (8003220 <HAL_UART_MspInit+0x184>)
 8003122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800312e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003132:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003136:	2302      	movs	r3, #2
 8003138:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	2300      	movs	r3, #0
 800313e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003142:	2303      	movs	r3, #3
 8003144:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003148:	2304      	movs	r3, #4
 800314a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800314e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003152:	4619      	mov	r1, r3
 8003154:	4833      	ldr	r0, [pc, #204]	@ (8003224 <HAL_UART_MspInit+0x188>)
 8003156:	f005 fa75 	bl	8008644 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800315a:	2200      	movs	r2, #0
 800315c:	2100      	movs	r1, #0
 800315e:	2025      	movs	r0, #37	@ 0x25
 8003160:	f002 fc03 	bl	800596a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003164:	2025      	movs	r0, #37	@ 0x25
 8003166:	f002 fc1a 	bl	800599e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800316a:	e053      	b.n	8003214 <HAL_UART_MspInit+0x178>
  else if(huart->Instance==USART3)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a2d      	ldr	r2, [pc, #180]	@ (8003228 <HAL_UART_MspInit+0x18c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d14e      	bne.n	8003214 <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003176:	f04f 0202 	mov.w	r2, #2
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003182:	2300      	movs	r3, #0
 8003184:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003188:	f107 0318 	add.w	r3, r7, #24
 800318c:	4618      	mov	r0, r3
 800318e:	f006 fbef 	bl	8009970 <HAL_RCCEx_PeriphCLKConfig>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_UART_MspInit+0x100>
      Error_Handler();
 8003198:	f7ff fc5c 	bl	8002a54 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800319c:	4b20      	ldr	r3, [pc, #128]	@ (8003220 <HAL_UART_MspInit+0x184>)
 800319e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031a2:	4a1f      	ldr	r2, [pc, #124]	@ (8003220 <HAL_UART_MspInit+0x184>)
 80031a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003220 <HAL_UART_MspInit+0x184>)
 80031ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ba:	4b19      	ldr	r3, [pc, #100]	@ (8003220 <HAL_UART_MspInit+0x184>)
 80031bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031c0:	4a17      	ldr	r2, [pc, #92]	@ (8003220 <HAL_UART_MspInit+0x184>)
 80031c2:	f043 0302 	orr.w	r3, r3, #2
 80031c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031ca:	4b15      	ldr	r3, [pc, #84]	@ (8003220 <HAL_UART_MspInit+0x184>)
 80031cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80031d8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80031dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e0:	2302      	movs	r3, #2
 80031e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ec:	2300      	movs	r3, #0
 80031ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031f2:	2307      	movs	r3, #7
 80031f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80031fc:	4619      	mov	r1, r3
 80031fe:	4809      	ldr	r0, [pc, #36]	@ (8003224 <HAL_UART_MspInit+0x188>)
 8003200:	f005 fa20 	bl	8008644 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003204:	2200      	movs	r2, #0
 8003206:	2100      	movs	r1, #0
 8003208:	2027      	movs	r0, #39	@ 0x27
 800320a:	f002 fbae 	bl	800596a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800320e:	2027      	movs	r0, #39	@ 0x27
 8003210:	f002 fbc5 	bl	800599e <HAL_NVIC_EnableIRQ>
}
 8003214:	bf00      	nop
 8003216:	37e8      	adds	r7, #232	@ 0xe8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40011000 	.word	0x40011000
 8003220:	58024400 	.word	0x58024400
 8003224:	58020400 	.word	0x58020400
 8003228:	40004800 	.word	0x40004800

0800322c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003230:	bf00      	nop
 8003232:	e7fd      	b.n	8003230 <NMI_Handler+0x4>

08003234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003238:	bf00      	nop
 800323a:	e7fd      	b.n	8003238 <HardFault_Handler+0x4>

0800323c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003240:	bf00      	nop
 8003242:	e7fd      	b.n	8003240 <MemManage_Handler+0x4>

08003244 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003248:	bf00      	nop
 800324a:	e7fd      	b.n	8003248 <BusFault_Handler+0x4>

0800324c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003250:	bf00      	nop
 8003252:	e7fd      	b.n	8003250 <UsageFault_Handler+0x4>

08003254 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003262:	b480      	push	{r7}
 8003264:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003266:	bf00      	nop
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003274:	bf00      	nop
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003282:	f000 f995 	bl	80035b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003286:	bf00      	nop
 8003288:	bd80      	pop	{r7, pc}

0800328a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800328e:	2001      	movs	r0, #1
 8003290:	f005 fbb3 	bl	80089fa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003294:	bf00      	nop
 8003296:	bd80      	pop	{r7, pc}

08003298 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800329c:	2002      	movs	r0, #2
 800329e:	f005 fbac 	bl	80089fa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80032a2:	bf00      	nop
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80032aa:	2004      	movs	r0, #4
 80032ac:	f005 fba5 	bl	80089fa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80032b0:	bf00      	nop
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80032b8:	2008      	movs	r0, #8
 80032ba:	f005 fb9e 	bl	80089fa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80032c8:	4802      	ldr	r0, [pc, #8]	@ (80032d4 <DMA1_Stream0_IRQHandler+0x10>)
 80032ca:	f003 fea9 	bl	8007020 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80032ce:	bf00      	nop
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	24000174 	.word	0x24000174

080032d8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80032dc:	4802      	ldr	r0, [pc, #8]	@ (80032e8 <DMA1_Stream1_IRQHandler+0x10>)
 80032de:	f003 fe9f 	bl	8007020 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	240001ec 	.word	0x240001ec

080032ec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80032f0:	4802      	ldr	r0, [pc, #8]	@ (80032fc <ADC_IRQHandler+0x10>)
 80032f2:	f000 ff87 	bl	8004204 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	24000094 	.word	0x24000094

08003300 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003304:	4802      	ldr	r0, [pc, #8]	@ (8003310 <TIM2_IRQHandler+0x10>)
 8003306:	f009 ffe5 	bl	800d2d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800330a:	bf00      	nop
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	240002ec 	.word	0x240002ec

08003314 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003318:	4802      	ldr	r0, [pc, #8]	@ (8003324 <TIM3_IRQHandler+0x10>)
 800331a:	f009 ffdb 	bl	800d2d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	24000338 	.word	0x24000338

08003328 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800332c:	4802      	ldr	r0, [pc, #8]	@ (8003338 <TIM4_IRQHandler+0x10>)
 800332e:	f009 ffd1 	bl	800d2d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003332:	bf00      	nop
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	24000384 	.word	0x24000384

0800333c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003340:	4802      	ldr	r0, [pc, #8]	@ (800334c <USART1_IRQHandler+0x10>)
 8003342:	f00b f8e7 	bl	800e514 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	240003d0 	.word	0x240003d0

08003350 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003354:	4802      	ldr	r0, [pc, #8]	@ (8003360 <USART3_IRQHandler+0x10>)
 8003356:	f00b f8dd 	bl	800e514 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	24000464 	.word	0x24000464

08003364 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_DIO0_Pin);
 8003368:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800336c:	f005 fb45 	bl	80089fa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003370:	bf00      	nop
 8003372:	bd80      	pop	{r7, pc}

08003374 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003378:	4802      	ldr	r0, [pc, #8]	@ (8003384 <ADC3_IRQHandler+0x10>)
 800337a:	f000 ff43 	bl	8004204 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	24000104 	.word	0x24000104

08003388 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800338c:	4b32      	ldr	r3, [pc, #200]	@ (8003458 <SystemInit+0xd0>)
 800338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003392:	4a31      	ldr	r2, [pc, #196]	@ (8003458 <SystemInit+0xd0>)
 8003394:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003398:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800339c:	4b2f      	ldr	r3, [pc, #188]	@ (800345c <SystemInit+0xd4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	2b06      	cmp	r3, #6
 80033a6:	d807      	bhi.n	80033b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80033a8:	4b2c      	ldr	r3, [pc, #176]	@ (800345c <SystemInit+0xd4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f023 030f 	bic.w	r3, r3, #15
 80033b0:	4a2a      	ldr	r2, [pc, #168]	@ (800345c <SystemInit+0xd4>)
 80033b2:	f043 0307 	orr.w	r3, r3, #7
 80033b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80033b8:	4b29      	ldr	r3, [pc, #164]	@ (8003460 <SystemInit+0xd8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a28      	ldr	r2, [pc, #160]	@ (8003460 <SystemInit+0xd8>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80033c4:	4b26      	ldr	r3, [pc, #152]	@ (8003460 <SystemInit+0xd8>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80033ca:	4b25      	ldr	r3, [pc, #148]	@ (8003460 <SystemInit+0xd8>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4924      	ldr	r1, [pc, #144]	@ (8003460 <SystemInit+0xd8>)
 80033d0:	4b24      	ldr	r3, [pc, #144]	@ (8003464 <SystemInit+0xdc>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80033d6:	4b21      	ldr	r3, [pc, #132]	@ (800345c <SystemInit+0xd4>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80033e2:	4b1e      	ldr	r3, [pc, #120]	@ (800345c <SystemInit+0xd4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f023 030f 	bic.w	r3, r3, #15
 80033ea:	4a1c      	ldr	r2, [pc, #112]	@ (800345c <SystemInit+0xd4>)
 80033ec:	f043 0307 	orr.w	r3, r3, #7
 80033f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80033f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003460 <SystemInit+0xd8>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80033f8:	4b19      	ldr	r3, [pc, #100]	@ (8003460 <SystemInit+0xd8>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80033fe:	4b18      	ldr	r3, [pc, #96]	@ (8003460 <SystemInit+0xd8>)
 8003400:	2200      	movs	r2, #0
 8003402:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003404:	4b16      	ldr	r3, [pc, #88]	@ (8003460 <SystemInit+0xd8>)
 8003406:	4a18      	ldr	r2, [pc, #96]	@ (8003468 <SystemInit+0xe0>)
 8003408:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800340a:	4b15      	ldr	r3, [pc, #84]	@ (8003460 <SystemInit+0xd8>)
 800340c:	4a17      	ldr	r2, [pc, #92]	@ (800346c <SystemInit+0xe4>)
 800340e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003410:	4b13      	ldr	r3, [pc, #76]	@ (8003460 <SystemInit+0xd8>)
 8003412:	4a17      	ldr	r2, [pc, #92]	@ (8003470 <SystemInit+0xe8>)
 8003414:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003416:	4b12      	ldr	r3, [pc, #72]	@ (8003460 <SystemInit+0xd8>)
 8003418:	2200      	movs	r2, #0
 800341a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800341c:	4b10      	ldr	r3, [pc, #64]	@ (8003460 <SystemInit+0xd8>)
 800341e:	4a14      	ldr	r2, [pc, #80]	@ (8003470 <SystemInit+0xe8>)
 8003420:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003422:	4b0f      	ldr	r3, [pc, #60]	@ (8003460 <SystemInit+0xd8>)
 8003424:	2200      	movs	r2, #0
 8003426:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003428:	4b0d      	ldr	r3, [pc, #52]	@ (8003460 <SystemInit+0xd8>)
 800342a:	4a11      	ldr	r2, [pc, #68]	@ (8003470 <SystemInit+0xe8>)
 800342c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800342e:	4b0c      	ldr	r3, [pc, #48]	@ (8003460 <SystemInit+0xd8>)
 8003430:	2200      	movs	r2, #0
 8003432:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003434:	4b0a      	ldr	r3, [pc, #40]	@ (8003460 <SystemInit+0xd8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a09      	ldr	r2, [pc, #36]	@ (8003460 <SystemInit+0xd8>)
 800343a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800343e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003440:	4b07      	ldr	r3, [pc, #28]	@ (8003460 <SystemInit+0xd8>)
 8003442:	2200      	movs	r2, #0
 8003444:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003446:	4b0b      	ldr	r3, [pc, #44]	@ (8003474 <SystemInit+0xec>)
 8003448:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800344c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800344e:	bf00      	nop
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	e000ed00 	.word	0xe000ed00
 800345c:	52002000 	.word	0x52002000
 8003460:	58024400 	.word	0x58024400
 8003464:	eaf6ed7f 	.word	0xeaf6ed7f
 8003468:	02020200 	.word	0x02020200
 800346c:	01ff0000 	.word	0x01ff0000
 8003470:	01010280 	.word	0x01010280
 8003474:	52004000 	.word	0x52004000

08003478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003478:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80034b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800347c:	f7ff ff84 	bl	8003388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003480:	480c      	ldr	r0, [pc, #48]	@ (80034b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003482:	490d      	ldr	r1, [pc, #52]	@ (80034b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003484:	4a0d      	ldr	r2, [pc, #52]	@ (80034bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003488:	e002      	b.n	8003490 <LoopCopyDataInit>

0800348a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800348a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800348c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800348e:	3304      	adds	r3, #4

08003490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003494:	d3f9      	bcc.n	800348a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003496:	4a0a      	ldr	r2, [pc, #40]	@ (80034c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003498:	4c0a      	ldr	r4, [pc, #40]	@ (80034c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800349a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800349c:	e001      	b.n	80034a2 <LoopFillZerobss>

0800349e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800349e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034a0:	3204      	adds	r2, #4

080034a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034a4:	d3fb      	bcc.n	800349e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034a6:	f00d fc93 	bl	8010dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034aa:	f7fe faa1 	bl	80019f0 <main>
  bx  lr
 80034ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034b0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80034b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80034b8:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80034bc:	08010ef8 	.word	0x08010ef8
  ldr r2, =_sbss
 80034c0:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80034c4:	240007d0 	.word	0x240007d0

080034c8 <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034c8:	e7fe      	b.n	80034c8 <BDMA_Channel0_IRQHandler>
	...

080034cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034d2:	2003      	movs	r0, #3
 80034d4:	f002 fa3e 	bl	8005954 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034d8:	f006 f874 	bl	80095c4 <HAL_RCC_GetSysClockFreq>
 80034dc:	4602      	mov	r2, r0
 80034de:	4b15      	ldr	r3, [pc, #84]	@ (8003534 <HAL_Init+0x68>)
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	0a1b      	lsrs	r3, r3, #8
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	4913      	ldr	r1, [pc, #76]	@ (8003538 <HAL_Init+0x6c>)
 80034ea:	5ccb      	ldrb	r3, [r1, r3]
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	fa22 f303 	lsr.w	r3, r2, r3
 80034f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003534 <HAL_Init+0x68>)
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	4a0e      	ldr	r2, [pc, #56]	@ (8003538 <HAL_Init+0x6c>)
 8003500:	5cd3      	ldrb	r3, [r2, r3]
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	fa22 f303 	lsr.w	r3, r2, r3
 800350c:	4a0b      	ldr	r2, [pc, #44]	@ (800353c <HAL_Init+0x70>)
 800350e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003510:	4a0b      	ldr	r2, [pc, #44]	@ (8003540 <HAL_Init+0x74>)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003516:	200f      	movs	r0, #15
 8003518:	f000 f814 	bl	8003544 <HAL_InitTick>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e002      	b.n	800352c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003526:	f7ff fb03 	bl	8002b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	58024400 	.word	0x58024400
 8003538:	08010ea8 	.word	0x08010ea8
 800353c:	2400006c 	.word	0x2400006c
 8003540:	24000068 	.word	0x24000068

08003544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800354c:	4b15      	ldr	r3, [pc, #84]	@ (80035a4 <HAL_InitTick+0x60>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e021      	b.n	800359c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003558:	4b13      	ldr	r3, [pc, #76]	@ (80035a8 <HAL_InitTick+0x64>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4b11      	ldr	r3, [pc, #68]	@ (80035a4 <HAL_InitTick+0x60>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	4619      	mov	r1, r3
 8003562:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003566:	fbb3 f3f1 	udiv	r3, r3, r1
 800356a:	fbb2 f3f3 	udiv	r3, r2, r3
 800356e:	4618      	mov	r0, r3
 8003570:	f002 fa23 	bl	80059ba <HAL_SYSTICK_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e00e      	b.n	800359c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b0f      	cmp	r3, #15
 8003582:	d80a      	bhi.n	800359a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003584:	2200      	movs	r2, #0
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	f04f 30ff 	mov.w	r0, #4294967295
 800358c:	f002 f9ed 	bl	800596a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003590:	4a06      	ldr	r2, [pc, #24]	@ (80035ac <HAL_InitTick+0x68>)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	e000      	b.n	800359c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
}
 800359c:	4618      	mov	r0, r3
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	24000074 	.word	0x24000074
 80035a8:	24000068 	.word	0x24000068
 80035ac:	24000070 	.word	0x24000070

080035b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035b4:	4b06      	ldr	r3, [pc, #24]	@ (80035d0 <HAL_IncTick+0x20>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	461a      	mov	r2, r3
 80035ba:	4b06      	ldr	r3, [pc, #24]	@ (80035d4 <HAL_IncTick+0x24>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4413      	add	r3, r2
 80035c0:	4a04      	ldr	r2, [pc, #16]	@ (80035d4 <HAL_IncTick+0x24>)
 80035c2:	6013      	str	r3, [r2, #0]
}
 80035c4:	bf00      	nop
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	24000074 	.word	0x24000074
 80035d4:	240007cc 	.word	0x240007cc

080035d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  return uwTick;
 80035dc:	4b03      	ldr	r3, [pc, #12]	@ (80035ec <HAL_GetTick+0x14>)
 80035de:	681b      	ldr	r3, [r3, #0]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	240007cc 	.word	0x240007cc

080035f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035f8:	f7ff ffee 	bl	80035d8 <HAL_GetTick>
 80035fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003608:	d005      	beq.n	8003616 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800360a:	4b0a      	ldr	r3, [pc, #40]	@ (8003634 <HAL_Delay+0x44>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4413      	add	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003616:	bf00      	nop
 8003618:	f7ff ffde 	bl	80035d8 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	429a      	cmp	r2, r3
 8003626:	d8f7      	bhi.n	8003618 <HAL_Delay+0x28>
  {
  }
}
 8003628:	bf00      	nop
 800362a:	bf00      	nop
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	24000074 	.word	0x24000074

08003638 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003642:	4b07      	ldr	r3, [pc, #28]	@ (8003660 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	43db      	mvns	r3, r3
 800364a:	401a      	ands	r2, r3
 800364c:	4904      	ldr	r1, [pc, #16]	@ (8003660 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	58000400 	.word	0x58000400

08003664 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	609a      	str	r2, [r3, #8]
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	609a      	str	r2, [r3, #8]
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	3360      	adds	r3, #96	@ 0x60
 80036de:	461a      	mov	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4a10      	ldr	r2, [pc, #64]	@ (800372c <LL_ADC_SetOffset+0x60>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d10b      	bne.n	8003708 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003706:	e00b      	b.n	8003720 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	430b      	orrs	r3, r1
 800371a:	431a      	orrs	r2, r3
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	601a      	str	r2, [r3, #0]
}
 8003720:	bf00      	nop
 8003722:	371c      	adds	r7, #28
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	58026000 	.word	0x58026000

08003730 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3360      	adds	r3, #96	@ 0x60
 800373e:	461a      	mov	r2, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003750:	4618      	mov	r0, r3
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	fa01 f303 	lsl.w	r3, r1, r3
 800377c:	431a      	orrs	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	611a      	str	r2, [r3, #16]
}
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4a0c      	ldr	r2, [pc, #48]	@ (80037d0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00e      	beq.n	80037c2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	3360      	adds	r3, #96	@ 0x60
 80037a8:	461a      	mov	r2, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	431a      	orrs	r2, r3
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	601a      	str	r2, [r3, #0]
  }
}
 80037c2:	bf00      	nop
 80037c4:	371c      	adds	r7, #28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	58026000 	.word	0x58026000

080037d4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4a0c      	ldr	r2, [pc, #48]	@ (8003814 <LL_ADC_SetOffsetSaturation+0x40>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d10e      	bne.n	8003806 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	3360      	adds	r3, #96	@ 0x60
 80037ec:	461a      	mov	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	431a      	orrs	r2, r3
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003806:	bf00      	nop
 8003808:	371c      	adds	r7, #28
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	58026000 	.word	0x58026000

08003818 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4a0c      	ldr	r2, [pc, #48]	@ (8003858 <LL_ADC_SetOffsetSign+0x40>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d10e      	bne.n	800384a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	3360      	adds	r3, #96	@ 0x60
 8003830:	461a      	mov	r2, r3
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	431a      	orrs	r2, r3
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800384a:	bf00      	nop
 800384c:	371c      	adds	r7, #28
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	58026000 	.word	0x58026000

0800385c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	3360      	adds	r3, #96	@ 0x60
 800386c:	461a      	mov	r2, r3
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4a0c      	ldr	r2, [pc, #48]	@ (80038ac <LL_ADC_SetOffsetState+0x50>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d108      	bne.n	8003890 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	431a      	orrs	r2, r3
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800388e:	e007      	b.n	80038a0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	431a      	orrs	r2, r3
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	601a      	str	r2, [r3, #0]
}
 80038a0:	bf00      	nop
 80038a2:	371c      	adds	r7, #28
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	58026000 	.word	0x58026000

080038b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b087      	sub	sp, #28
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3330      	adds	r3, #48	@ 0x30
 80038e6:	461a      	mov	r2, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	0a1b      	lsrs	r3, r3, #8
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	4413      	add	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f003 031f 	and.w	r3, r3, #31
 8003900:	211f      	movs	r1, #31
 8003902:	fa01 f303 	lsl.w	r3, r1, r3
 8003906:	43db      	mvns	r3, r3
 8003908:	401a      	ands	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	0e9b      	lsrs	r3, r3, #26
 800390e:	f003 011f 	and.w	r1, r3, #31
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	f003 031f 	and.w	r3, r3, #31
 8003918:	fa01 f303 	lsl.w	r3, r1, r3
 800391c:	431a      	orrs	r2, r3
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f023 0203 	bic.w	r2, r3, #3
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	60da      	str	r2, [r3, #12]
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f043 0201 	orr.w	r2, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	60da      	str	r2, [r3, #12]
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a08      	ldr	r2, [pc, #32]	@ (80039a4 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d107      	bne.n	8003996 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f023 0203 	bic.w	r2, r3, #3
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	431a      	orrs	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	60da      	str	r2, [r3, #12]
  }
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	58026000 	.word	0x58026000

080039a8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b087      	sub	sp, #28
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	3314      	adds	r3, #20
 80039de:	461a      	mov	r2, r3
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	0e5b      	lsrs	r3, r3, #25
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	4413      	add	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	0d1b      	lsrs	r3, r3, #20
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	2107      	movs	r1, #7
 80039fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003a00:	43db      	mvns	r3, r3
 8003a02:	401a      	ands	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	0d1b      	lsrs	r3, r3, #20
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a12:	431a      	orrs	r2, r3
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a18:	bf00      	nop
 8003a1a:	371c      	adds	r7, #28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4a1a      	ldr	r2, [pc, #104]	@ (8003a9c <LL_ADC_SetChannelSingleDiff+0x78>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d115      	bne.n	8003a64 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a44:	43db      	mvns	r3, r3
 8003a46:	401a      	ands	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f003 0318 	and.w	r3, r3, #24
 8003a4e:	4914      	ldr	r1, [pc, #80]	@ (8003aa0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003a50:	40d9      	lsrs	r1, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	400b      	ands	r3, r1
 8003a56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003a62:	e014      	b.n	8003a8e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a70:	43db      	mvns	r3, r3
 8003a72:	401a      	ands	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f003 0318 	and.w	r3, r3, #24
 8003a7a:	4909      	ldr	r1, [pc, #36]	@ (8003aa0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003a7c:	40d9      	lsrs	r1, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	400b      	ands	r3, r1
 8003a82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a86:	431a      	orrs	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003a8e:	bf00      	nop
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	58026000 	.word	0x58026000
 8003aa0:	000fffff 	.word	0x000fffff

08003aa4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 031f 	and.w	r3, r3, #31
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	4b04      	ldr	r3, [pc, #16]	@ (8003afc <LL_ADC_DisableDeepPowerDown+0x20>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6093      	str	r3, [r2, #8]
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	5fffffc0 	.word	0x5fffffc0

08003b00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b14:	d101      	bne.n	8003b1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	4b05      	ldr	r3, [pc, #20]	@ (8003b4c <LL_ADC_EnableInternalRegulator+0x24>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	6fffffc0 	.word	0x6fffffc0

08003b50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b64:	d101      	bne.n	8003b6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	4b05      	ldr	r3, [pc, #20]	@ (8003b9c <LL_ADC_Enable+0x24>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	f043 0201 	orr.w	r2, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	7fffffc0 	.word	0x7fffffc0

08003ba0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <LL_ADC_IsEnabled+0x18>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <LL_ADC_IsEnabled+0x1a>
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	4b05      	ldr	r3, [pc, #20]	@ (8003bec <LL_ADC_REG_StartConversion+0x24>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	f043 0204 	orr.w	r2, r3, #4
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	7fffffc0 	.word	0x7fffffc0

08003bf0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d101      	bne.n	8003c08 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d101      	bne.n	8003c2e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c3c:	b590      	push	{r4, r7, lr}
 8003c3e:	b089      	sub	sp, #36	@ 0x24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e1ee      	b.n	8004034 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d109      	bne.n	8003c78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7fe ff7d 	bl	8002b64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff ff3f 	bl	8003b00 <LL_ADC_IsDeepPowerDownEnabled>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d004      	beq.n	8003c92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff ff25 	bl	8003adc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7ff ff5a 	bl	8003b50 <LL_ADC_IsInternalRegulatorEnabled>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d114      	bne.n	8003ccc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff ff3e 	bl	8003b28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cac:	4b8e      	ldr	r3, [pc, #568]	@ (8003ee8 <HAL_ADC_Init+0x2ac>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	099b      	lsrs	r3, r3, #6
 8003cb2:	4a8e      	ldr	r2, [pc, #568]	@ (8003eec <HAL_ADC_Init+0x2b0>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	099b      	lsrs	r3, r3, #6
 8003cba:	3301      	adds	r3, #1
 8003cbc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003cbe:	e002      	b.n	8003cc6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1f9      	bne.n	8003cc0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff ff3d 	bl	8003b50 <LL_ADC_IsInternalRegulatorEnabled>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10d      	bne.n	8003cf8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ce0:	f043 0210 	orr.w	r2, r3, #16
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cec:	f043 0201 	orr.w	r2, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff ff77 	bl	8003bf0 <LL_ADC_REG_IsConversionOngoing>
 8003d02:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d08:	f003 0310 	and.w	r3, r3, #16
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f040 8188 	bne.w	8004022 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f040 8184 	bne.w	8004022 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d1e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003d22:	f043 0202 	orr.w	r2, r3, #2
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff ff36 	bl	8003ba0 <LL_ADC_IsEnabled>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d136      	bne.n	8003da8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a6c      	ldr	r2, [pc, #432]	@ (8003ef0 <HAL_ADC_Init+0x2b4>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d004      	beq.n	8003d4e <HAL_ADC_Init+0x112>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a6a      	ldr	r2, [pc, #424]	@ (8003ef4 <HAL_ADC_Init+0x2b8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d10e      	bne.n	8003d6c <HAL_ADC_Init+0x130>
 8003d4e:	4868      	ldr	r0, [pc, #416]	@ (8003ef0 <HAL_ADC_Init+0x2b4>)
 8003d50:	f7ff ff26 	bl	8003ba0 <LL_ADC_IsEnabled>
 8003d54:	4604      	mov	r4, r0
 8003d56:	4867      	ldr	r0, [pc, #412]	@ (8003ef4 <HAL_ADC_Init+0x2b8>)
 8003d58:	f7ff ff22 	bl	8003ba0 <LL_ADC_IsEnabled>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	4323      	orrs	r3, r4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bf0c      	ite	eq
 8003d64:	2301      	moveq	r3, #1
 8003d66:	2300      	movne	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	e008      	b.n	8003d7e <HAL_ADC_Init+0x142>
 8003d6c:	4862      	ldr	r0, [pc, #392]	@ (8003ef8 <HAL_ADC_Init+0x2bc>)
 8003d6e:	f7ff ff17 	bl	8003ba0 <LL_ADC_IsEnabled>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bf0c      	ite	eq
 8003d78:	2301      	moveq	r3, #1
 8003d7a:	2300      	movne	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d012      	beq.n	8003da8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a5a      	ldr	r2, [pc, #360]	@ (8003ef0 <HAL_ADC_Init+0x2b4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d004      	beq.n	8003d96 <HAL_ADC_Init+0x15a>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a58      	ldr	r2, [pc, #352]	@ (8003ef4 <HAL_ADC_Init+0x2b8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d101      	bne.n	8003d9a <HAL_ADC_Init+0x15e>
 8003d96:	4a59      	ldr	r2, [pc, #356]	@ (8003efc <HAL_ADC_Init+0x2c0>)
 8003d98:	e000      	b.n	8003d9c <HAL_ADC_Init+0x160>
 8003d9a:	4a59      	ldr	r2, [pc, #356]	@ (8003f00 <HAL_ADC_Init+0x2c4>)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	4619      	mov	r1, r3
 8003da2:	4610      	mov	r0, r2
 8003da4:	f7ff fc5e 	bl	8003664 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a52      	ldr	r2, [pc, #328]	@ (8003ef8 <HAL_ADC_Init+0x2bc>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d129      	bne.n	8003e06 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	7e5b      	ldrb	r3, [r3, #25]
 8003db6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003dbc:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003dc2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d013      	beq.n	8003df4 <HAL_ADC_Init+0x1b8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2b0c      	cmp	r3, #12
 8003dd2:	d00d      	beq.n	8003df0 <HAL_ADC_Init+0x1b4>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b1c      	cmp	r3, #28
 8003dda:	d007      	beq.n	8003dec <HAL_ADC_Init+0x1b0>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	2b18      	cmp	r3, #24
 8003de2:	d101      	bne.n	8003de8 <HAL_ADC_Init+0x1ac>
 8003de4:	2318      	movs	r3, #24
 8003de6:	e006      	b.n	8003df6 <HAL_ADC_Init+0x1ba>
 8003de8:	2300      	movs	r3, #0
 8003dea:	e004      	b.n	8003df6 <HAL_ADC_Init+0x1ba>
 8003dec:	2310      	movs	r3, #16
 8003dee:	e002      	b.n	8003df6 <HAL_ADC_Init+0x1ba>
 8003df0:	2308      	movs	r3, #8
 8003df2:	e000      	b.n	8003df6 <HAL_ADC_Init+0x1ba>
 8003df4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003df6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dfe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003e00:	4313      	orrs	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
 8003e04:	e00e      	b.n	8003e24 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	7e5b      	ldrb	r3, [r3, #25]
 8003e0a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e10:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003e16:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e1e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003e20:	4313      	orrs	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d106      	bne.n	8003e3c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e32:	3b01      	subs	r3, #1
 8003e34:	045b      	lsls	r3, r3, #17
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d009      	beq.n	8003e58 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e48:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e50:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a26      	ldr	r2, [pc, #152]	@ (8003ef8 <HAL_ADC_Init+0x2bc>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d115      	bne.n	8003e8e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	4b26      	ldr	r3, [pc, #152]	@ (8003f04 <HAL_ADC_Init+0x2c8>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6812      	ldr	r2, [r2, #0]
 8003e70:	69b9      	ldr	r1, [r7, #24]
 8003e72:	430b      	orrs	r3, r1
 8003e74:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	611a      	str	r2, [r3, #16]
 8003e8c:	e009      	b.n	8003ea2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	4b1c      	ldr	r3, [pc, #112]	@ (8003f08 <HAL_ADC_Init+0x2cc>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	69b9      	ldr	r1, [r7, #24]
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff fea2 	bl	8003bf0 <LL_ADC_REG_IsConversionOngoing>
 8003eac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff feaf 	bl	8003c16 <LL_ADC_INJ_IsConversionOngoing>
 8003eb8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f040 808e 	bne.w	8003fde <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f040 808a 	bne.w	8003fde <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef8 <HAL_ADC_Init+0x2bc>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d11b      	bne.n	8003f0c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	7e1b      	ldrb	r3, [r3, #24]
 8003ed8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003ee0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
 8003ee6:	e018      	b.n	8003f1a <HAL_ADC_Init+0x2de>
 8003ee8:	24000068 	.word	0x24000068
 8003eec:	053e2d63 	.word	0x053e2d63
 8003ef0:	40022000 	.word	0x40022000
 8003ef4:	40022100 	.word	0x40022100
 8003ef8:	58026000 	.word	0x58026000
 8003efc:	40022300 	.word	0x40022300
 8003f00:	58026300 	.word	0x58026300
 8003f04:	fff04007 	.word	0xfff04007
 8003f08:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	7e1b      	ldrb	r3, [r3, #24]
 8003f10:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	4b46      	ldr	r3, [pc, #280]	@ (800403c <HAL_ADC_Init+0x400>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	69b9      	ldr	r1, [r7, #24]
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d137      	bne.n	8003fa8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a3f      	ldr	r2, [pc, #252]	@ (8004040 <HAL_ADC_Init+0x404>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d116      	bne.n	8003f76 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	691a      	ldr	r2, [r3, #16]
 8003f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8004044 <HAL_ADC_Init+0x408>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003f5a:	4311      	orrs	r1, r2
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f60:	4311      	orrs	r1, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003f66:	430a      	orrs	r2, r1
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	611a      	str	r2, [r3, #16]
 8003f74:	e020      	b.n	8003fb8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	691a      	ldr	r2, [r3, #16]
 8003f7c:	4b32      	ldr	r3, [pc, #200]	@ (8004048 <HAL_ADC_Init+0x40c>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f84:	3a01      	subs	r2, #1
 8003f86:	0411      	lsls	r1, r2, #16
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003f8c:	4311      	orrs	r1, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f92:	4311      	orrs	r1, r2
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0201 	orr.w	r2, r2, #1
 8003fa4:	611a      	str	r2, [r3, #16]
 8003fa6:	e007      	b.n	8003fb8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0201 	bic.w	r2, r2, #1
 8003fb6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1b      	ldr	r2, [pc, #108]	@ (8004040 <HAL_ADC_Init+0x404>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d002      	beq.n	8003fde <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f001 f9c3 	bl	8005364 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d10c      	bne.n	8004000 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fec:	f023 010f 	bic.w	r1, r3, #15
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	1e5a      	subs	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ffe:	e007      	b.n	8004010 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 020f 	bic.w	r2, r2, #15
 800400e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004014:	f023 0303 	bic.w	r3, r3, #3
 8004018:	f043 0201 	orr.w	r2, r3, #1
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	661a      	str	r2, [r3, #96]	@ 0x60
 8004020:	e007      	b.n	8004032 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004026:	f043 0210 	orr.w	r2, r3, #16
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004032:	7ffb      	ldrb	r3, [r7, #31]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3724      	adds	r7, #36	@ 0x24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd90      	pop	{r4, r7, pc}
 800403c:	ffffbffc 	.word	0xffffbffc
 8004040:	58026000 	.word	0x58026000
 8004044:	fc00f81f 	.word	0xfc00f81f
 8004048:	fc00f81e 	.word	0xfc00f81e

0800404c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a60      	ldr	r2, [pc, #384]	@ (80041e0 <HAL_ADC_Start_DMA+0x194>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d004      	beq.n	800406c <HAL_ADC_Start_DMA+0x20>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a5f      	ldr	r2, [pc, #380]	@ (80041e4 <HAL_ADC_Start_DMA+0x198>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d101      	bne.n	8004070 <HAL_ADC_Start_DMA+0x24>
 800406c:	4b5e      	ldr	r3, [pc, #376]	@ (80041e8 <HAL_ADC_Start_DMA+0x19c>)
 800406e:	e000      	b.n	8004072 <HAL_ADC_Start_DMA+0x26>
 8004070:	4b5e      	ldr	r3, [pc, #376]	@ (80041ec <HAL_ADC_Start_DMA+0x1a0>)
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff fd16 	bl	8003aa4 <LL_ADC_GetMultimode>
 8004078:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff fdb6 	bl	8003bf0 <LL_ADC_REG_IsConversionOngoing>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	f040 80a2 	bne.w	80041d0 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_ADC_Start_DMA+0x4e>
 8004096:	2302      	movs	r3, #2
 8004098:	e09d      	b.n	80041d6 <HAL_ADC_Start_DMA+0x18a>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d006      	beq.n	80040b6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	2b05      	cmp	r3, #5
 80040ac:	d003      	beq.n	80040b6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	2b09      	cmp	r3, #9
 80040b2:	f040 8086 	bne.w	80041c2 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f001 f836 	bl	8005128 <ADC_Enable>
 80040bc:	4603      	mov	r3, r0
 80040be:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d178      	bne.n	80041b8 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80040ca:	4b49      	ldr	r3, [pc, #292]	@ (80041f0 <HAL_ADC_Start_DMA+0x1a4>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a42      	ldr	r2, [pc, #264]	@ (80041e4 <HAL_ADC_Start_DMA+0x198>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d002      	beq.n	80040e6 <HAL_ADC_Start_DMA+0x9a>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	e000      	b.n	80040e8 <HAL_ADC_Start_DMA+0x9c>
 80040e6:	4b3e      	ldr	r3, [pc, #248]	@ (80041e0 <HAL_ADC_Start_DMA+0x194>)
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	6812      	ldr	r2, [r2, #0]
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d002      	beq.n	80040f6 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d105      	bne.n	8004102 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040fa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004106:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d006      	beq.n	800411c <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004112:	f023 0206 	bic.w	r2, r3, #6
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	665a      	str	r2, [r3, #100]	@ 0x64
 800411a:	e002      	b.n	8004122 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004126:	4a33      	ldr	r2, [pc, #204]	@ (80041f4 <HAL_ADC_Start_DMA+0x1a8>)
 8004128:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800412e:	4a32      	ldr	r2, [pc, #200]	@ (80041f8 <HAL_ADC_Start_DMA+0x1ac>)
 8004130:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004136:	4a31      	ldr	r2, [pc, #196]	@ (80041fc <HAL_ADC_Start_DMA+0x1b0>)
 8004138:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	221c      	movs	r2, #28
 8004140:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f042 0210 	orr.w	r2, r2, #16
 8004158:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a28      	ldr	r2, [pc, #160]	@ (8004200 <HAL_ADC_Start_DMA+0x1b4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d10f      	bne.n	8004184 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	4619      	mov	r1, r3
 8004172:	4610      	mov	r0, r2
 8004174:	f7ff fbfe 	bl	8003974 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff fbe9 	bl	8003954 <LL_ADC_EnableDMAReq>
 8004182:	e007      	b.n	8004194 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418c:	4619      	mov	r1, r3
 800418e:	4610      	mov	r0, r2
 8004190:	f7ff fbcd 	bl	800392e <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3340      	adds	r3, #64	@ 0x40
 800419e:	4619      	mov	r1, r3
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f001 ff6e 	bl	8006084 <HAL_DMA_Start_IT>
 80041a8:	4603      	mov	r3, r0
 80041aa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff fd09 	bl	8003bc8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80041b6:	e00d      	b.n	80041d4 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 80041c0:	e008      	b.n	80041d4 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80041ce:	e001      	b.n	80041d4 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80041d0:	2302      	movs	r3, #2
 80041d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80041d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40022000 	.word	0x40022000
 80041e4:	40022100 	.word	0x40022100
 80041e8:	40022300 	.word	0x40022300
 80041ec:	58026300 	.word	0x58026300
 80041f0:	fffff0fe 	.word	0xfffff0fe
 80041f4:	0800523d 	.word	0x0800523d
 80041f8:	08005315 	.word	0x08005315
 80041fc:	08005331 	.word	0x08005331
 8004200:	58026000 	.word	0x58026000

08004204 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	@ 0x28
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800420c:	2300      	movs	r3, #0
 800420e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a87      	ldr	r2, [pc, #540]	@ (8004444 <HAL_ADC_IRQHandler+0x240>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d004      	beq.n	8004234 <HAL_ADC_IRQHandler+0x30>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a86      	ldr	r2, [pc, #536]	@ (8004448 <HAL_ADC_IRQHandler+0x244>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d101      	bne.n	8004238 <HAL_ADC_IRQHandler+0x34>
 8004234:	4b85      	ldr	r3, [pc, #532]	@ (800444c <HAL_ADC_IRQHandler+0x248>)
 8004236:	e000      	b.n	800423a <HAL_ADC_IRQHandler+0x36>
 8004238:	4b85      	ldr	r3, [pc, #532]	@ (8004450 <HAL_ADC_IRQHandler+0x24c>)
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff fc32 	bl	8003aa4 <LL_ADC_GetMultimode>
 8004240:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d017      	beq.n	800427c <HAL_ADC_IRQHandler+0x78>
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d012      	beq.n	800427c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800425a:	f003 0310 	and.w	r3, r3, #16
 800425e:	2b00      	cmp	r3, #0
 8004260:	d105      	bne.n	800426e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004266:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f001 f9b4 	bl	80055dc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2202      	movs	r2, #2
 800427a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b00      	cmp	r3, #0
 8004284:	d004      	beq.n	8004290 <HAL_ADC_IRQHandler+0x8c>
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10a      	bne.n	80042a6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 8083 	beq.w	80043a2 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d07d      	beq.n	80043a2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042aa:	f003 0310 	and.w	r3, r3, #16
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d105      	bne.n	80042be <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042b6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff faf4 	bl	80038b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d062      	beq.n	8004394 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a5d      	ldr	r2, [pc, #372]	@ (8004448 <HAL_ADC_IRQHandler+0x244>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d002      	beq.n	80042de <HAL_ADC_IRQHandler+0xda>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	e000      	b.n	80042e0 <HAL_ADC_IRQHandler+0xdc>
 80042de:	4b59      	ldr	r3, [pc, #356]	@ (8004444 <HAL_ADC_IRQHandler+0x240>)
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6812      	ldr	r2, [r2, #0]
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d008      	beq.n	80042fa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2b05      	cmp	r3, #5
 80042f2:	d002      	beq.n	80042fa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2b09      	cmp	r3, #9
 80042f8:	d104      	bne.n	8004304 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	623b      	str	r3, [r7, #32]
 8004302:	e00c      	b.n	800431e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a4f      	ldr	r2, [pc, #316]	@ (8004448 <HAL_ADC_IRQHandler+0x244>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d002      	beq.n	8004314 <HAL_ADC_IRQHandler+0x110>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	e000      	b.n	8004316 <HAL_ADC_IRQHandler+0x112>
 8004314:	4b4b      	ldr	r3, [pc, #300]	@ (8004444 <HAL_ADC_IRQHandler+0x240>)
 8004316:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d135      	bne.n	8004394 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b08      	cmp	r3, #8
 8004334:	d12e      	bne.n	8004394 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fc58 	bl	8003bf0 <LL_ADC_REG_IsConversionOngoing>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d11a      	bne.n	800437c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 020c 	bic.w	r2, r2, #12
 8004354:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800435a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004366:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d112      	bne.n	8004394 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004372:	f043 0201 	orr.w	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	661a      	str	r2, [r3, #96]	@ 0x60
 800437a:	e00b      	b.n	8004394 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004380:	f043 0210 	orr.w	r2, r3, #16
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800438c:	f043 0201 	orr.w	r2, r3, #1
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f96f 	bl	8004678 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	220c      	movs	r2, #12
 80043a0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d004      	beq.n	80043b6 <HAL_ADC_IRQHandler+0x1b2>
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10b      	bne.n	80043ce <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80a0 	beq.w	8004502 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 809a 	beq.w	8004502 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d105      	bne.n	80043e6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043de:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff fadc 	bl	80039a8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80043f0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff fa5a 	bl	80038b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80043fc:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a11      	ldr	r2, [pc, #68]	@ (8004448 <HAL_ADC_IRQHandler+0x244>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d002      	beq.n	800440e <HAL_ADC_IRQHandler+0x20a>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	e000      	b.n	8004410 <HAL_ADC_IRQHandler+0x20c>
 800440e:	4b0d      	ldr	r3, [pc, #52]	@ (8004444 <HAL_ADC_IRQHandler+0x240>)
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	4293      	cmp	r3, r2
 8004416:	d008      	beq.n	800442a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2b06      	cmp	r3, #6
 8004422:	d002      	beq.n	800442a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	2b07      	cmp	r3, #7
 8004428:	d104      	bne.n	8004434 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	623b      	str	r3, [r7, #32]
 8004432:	e014      	b.n	800445e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a03      	ldr	r2, [pc, #12]	@ (8004448 <HAL_ADC_IRQHandler+0x244>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00a      	beq.n	8004454 <HAL_ADC_IRQHandler+0x250>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	e008      	b.n	8004456 <HAL_ADC_IRQHandler+0x252>
 8004444:	40022000 	.word	0x40022000
 8004448:	40022100 	.word	0x40022100
 800444c:	40022300 	.word	0x40022300
 8004450:	58026300 	.word	0x58026300
 8004454:	4b84      	ldr	r3, [pc, #528]	@ (8004668 <HAL_ADC_IRQHandler+0x464>)
 8004456:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d047      	beq.n	80044f4 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d007      	beq.n	800447e <HAL_ADC_IRQHandler+0x27a>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d03f      	beq.n	80044f4 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800447a:	2b00      	cmp	r3, #0
 800447c:	d13a      	bne.n	80044f4 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004488:	2b40      	cmp	r3, #64	@ 0x40
 800448a:	d133      	bne.n	80044f4 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d12e      	bne.n	80044f4 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff fbbb 	bl	8003c16 <LL_ADC_INJ_IsConversionOngoing>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d11a      	bne.n	80044dc <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80044b4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d112      	bne.n	80044f4 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d2:	f043 0201 	orr.w	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	661a      	str	r2, [r3, #96]	@ 0x60
 80044da:	e00b      	b.n	80044f4 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e0:	f043 0210 	orr.w	r2, r3, #16
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044ec:	f043 0201 	orr.w	r2, r3, #1
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f001 f849 	bl	800558c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2260      	movs	r2, #96	@ 0x60
 8004500:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004508:	2b00      	cmp	r3, #0
 800450a:	d011      	beq.n	8004530 <HAL_ADC_IRQHandler+0x32c>
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00c      	beq.n	8004530 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800451a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f8bc 	bl	80046a0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2280      	movs	r2, #128	@ 0x80
 800452e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004536:	2b00      	cmp	r3, #0
 8004538:	d012      	beq.n	8004560 <HAL_ADC_IRQHandler+0x35c>
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00d      	beq.n	8004560 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004548:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f001 f82f 	bl	80055b4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800455e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004566:	2b00      	cmp	r3, #0
 8004568:	d012      	beq.n	8004590 <HAL_ADC_IRQHandler+0x38c>
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00d      	beq.n	8004590 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004578:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f001 f821 	bl	80055c8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800458e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b00      	cmp	r3, #0
 8004598:	d043      	beq.n	8004622 <HAL_ADC_IRQHandler+0x41e>
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d03e      	beq.n	8004622 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d102      	bne.n	80045b2 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80045ac:	2301      	movs	r3, #1
 80045ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80045b0:	e021      	b.n	80045f6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d015      	beq.n	80045e4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a2a      	ldr	r2, [pc, #168]	@ (8004668 <HAL_ADC_IRQHandler+0x464>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d004      	beq.n	80045cc <HAL_ADC_IRQHandler+0x3c8>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a29      	ldr	r2, [pc, #164]	@ (800466c <HAL_ADC_IRQHandler+0x468>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d101      	bne.n	80045d0 <HAL_ADC_IRQHandler+0x3cc>
 80045cc:	4b28      	ldr	r3, [pc, #160]	@ (8004670 <HAL_ADC_IRQHandler+0x46c>)
 80045ce:	e000      	b.n	80045d2 <HAL_ADC_IRQHandler+0x3ce>
 80045d0:	4b28      	ldr	r3, [pc, #160]	@ (8004674 <HAL_ADC_IRQHandler+0x470>)
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff fa74 	bl	8003ac0 <LL_ADC_GetMultiDMATransfer>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00b      	beq.n	80045f6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80045de:	2301      	movs	r3, #1
 80045e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045e2:	e008      	b.n	80045f6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80045f2:	2301      	movs	r3, #1
 80045f4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d10e      	bne.n	800461a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004600:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800460c:	f043 0202 	orr.w	r2, r3, #2
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f84d 	bl	80046b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2210      	movs	r2, #16
 8004620:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004628:	2b00      	cmp	r3, #0
 800462a:	d018      	beq.n	800465e <HAL_ADC_IRQHandler+0x45a>
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004632:	2b00      	cmp	r3, #0
 8004634:	d013      	beq.n	800465e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800463a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004646:	f043 0208 	orr.w	r2, r3, #8
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004656:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 ffa1 	bl	80055a0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800465e:	bf00      	nop
 8004660:	3728      	adds	r7, #40	@ 0x28
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40022000 	.word	0x40022000
 800466c:	40022100 	.word	0x40022100
 8004670:	40022300 	.word	0x40022300
 8004674:	58026300 	.word	0x58026300

08004678 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80046c8:	b590      	push	{r4, r7, lr}
 80046ca:	b0b9      	sub	sp, #228	@ 0xe4
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046e2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4aab      	ldr	r2, [pc, #684]	@ (8004998 <HAL_ADC_ConfigChannel+0x2d0>)
 80046ea:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d102      	bne.n	80046fc <HAL_ADC_ConfigChannel+0x34>
 80046f6:	2302      	movs	r3, #2
 80046f8:	f000 bcfe 	b.w	80050f8 <HAL_ADC_ConfigChannel+0xa30>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff fa71 	bl	8003bf0 <LL_ADC_REG_IsConversionOngoing>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	f040 84e2 	bne.w	80050da <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	db38      	blt.n	8004790 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a9e      	ldr	r2, [pc, #632]	@ (800499c <HAL_ADC_ConfigChannel+0x2d4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d033      	beq.n	8004790 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004730:	2b00      	cmp	r3, #0
 8004732:	d108      	bne.n	8004746 <HAL_ADC_ConfigChannel+0x7e>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	0e9b      	lsrs	r3, r3, #26
 800473a:	f003 031f 	and.w	r3, r3, #31
 800473e:	2201      	movs	r2, #1
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	e01d      	b.n	8004782 <HAL_ADC_ConfigChannel+0xba>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004752:	fa93 f3a3 	rbit	r3, r3
 8004756:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800475a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800475e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004762:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 800476a:	2320      	movs	r3, #32
 800476c:	e004      	b.n	8004778 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 800476e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004772:	fab3 f383 	clz	r3, r3
 8004776:	b2db      	uxtb	r3, r3
 8004778:	f003 031f 	and.w	r3, r3, #31
 800477c:	2201      	movs	r2, #1
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6812      	ldr	r2, [r2, #0]
 8004786:	69d1      	ldr	r1, [r2, #28]
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6812      	ldr	r2, [r2, #0]
 800478c:	430b      	orrs	r3, r1
 800478e:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6818      	ldr	r0, [r3, #0]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	6859      	ldr	r1, [r3, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	f7ff f89a 	bl	80038d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff fa22 	bl	8003bf0 <LL_ADC_REG_IsConversionOngoing>
 80047ac:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff fa2e 	bl	8003c16 <LL_ADC_INJ_IsConversionOngoing>
 80047ba:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f040 8270 	bne.w	8004ca8 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f040 826b 	bne.w	8004ca8 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	6819      	ldr	r1, [r3, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	461a      	mov	r2, r3
 80047e0:	f7ff f8f5 	bl	80039ce <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a6c      	ldr	r2, [pc, #432]	@ (800499c <HAL_ADC_ConfigChannel+0x2d4>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d10d      	bne.n	800480a <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	695a      	ldr	r2, [r3, #20]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	08db      	lsrs	r3, r3, #3
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004808:	e032      	b.n	8004870 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800480a:	4b65      	ldr	r3, [pc, #404]	@ (80049a0 <HAL_ADC_ConfigChannel+0x2d8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004812:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004816:	d10b      	bne.n	8004830 <HAL_ADC_ConfigChannel+0x168>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	695a      	ldr	r2, [r3, #20]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	089b      	lsrs	r3, r3, #2
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	e01d      	b.n	800486c <HAL_ADC_ConfigChannel+0x1a4>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f003 0310 	and.w	r3, r3, #16
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10b      	bne.n	8004856 <HAL_ADC_ConfigChannel+0x18e>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	695a      	ldr	r2, [r3, #20]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	089b      	lsrs	r3, r3, #2
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	e00a      	b.n	800486c <HAL_ADC_ConfigChannel+0x1a4>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	089b      	lsrs	r3, r3, #2
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	2b04      	cmp	r3, #4
 8004876:	d048      	beq.n	800490a <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6818      	ldr	r0, [r3, #0]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	6919      	ldr	r1, [r3, #16]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004888:	f7fe ff20 	bl	80036cc <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a42      	ldr	r2, [pc, #264]	@ (800499c <HAL_ADC_ConfigChannel+0x2d4>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d119      	bne.n	80048ca <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	6919      	ldr	r1, [r3, #16]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	461a      	mov	r2, r3
 80048a4:	f7fe ffb8 	bl	8003818 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6818      	ldr	r0, [r3, #0]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	6919      	ldr	r1, [r3, #16]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d102      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x1f8>
 80048ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048be:	e000      	b.n	80048c2 <HAL_ADC_ConfigChannel+0x1fa>
 80048c0:	2300      	movs	r3, #0
 80048c2:	461a      	mov	r2, r3
 80048c4:	f7fe ff86 	bl	80037d4 <LL_ADC_SetOffsetSaturation>
 80048c8:	e1ee      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6818      	ldr	r0, [r3, #0]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	6919      	ldr	r1, [r3, #16]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d102      	bne.n	80048e2 <HAL_ADC_ConfigChannel+0x21a>
 80048dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80048e0:	e000      	b.n	80048e4 <HAL_ADC_ConfigChannel+0x21c>
 80048e2:	2300      	movs	r3, #0
 80048e4:	461a      	mov	r2, r3
 80048e6:	f7fe ff53 	bl	8003790 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6818      	ldr	r0, [r3, #0]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	6919      	ldr	r1, [r3, #16]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	7e1b      	ldrb	r3, [r3, #24]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d102      	bne.n	8004900 <HAL_ADC_ConfigChannel+0x238>
 80048fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80048fe:	e000      	b.n	8004902 <HAL_ADC_ConfigChannel+0x23a>
 8004900:	2300      	movs	r3, #0
 8004902:	461a      	mov	r2, r3
 8004904:	f7fe ff2a 	bl	800375c <LL_ADC_SetDataRightShift>
 8004908:	e1ce      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a23      	ldr	r2, [pc, #140]	@ (800499c <HAL_ADC_ConfigChannel+0x2d4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	f040 8181 	bne.w	8004c18 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2100      	movs	r1, #0
 800491c:	4618      	mov	r0, r3
 800491e:	f7fe ff07 	bl	8003730 <LL_ADC_GetOffsetChannel>
 8004922:	4603      	mov	r3, r0
 8004924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10a      	bne.n	8004942 <HAL_ADC_ConfigChannel+0x27a>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2100      	movs	r1, #0
 8004932:	4618      	mov	r0, r3
 8004934:	f7fe fefc 	bl	8003730 <LL_ADC_GetOffsetChannel>
 8004938:	4603      	mov	r3, r0
 800493a:	0e9b      	lsrs	r3, r3, #26
 800493c:	f003 021f 	and.w	r2, r3, #31
 8004940:	e01e      	b.n	8004980 <HAL_ADC_ConfigChannel+0x2b8>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2100      	movs	r1, #0
 8004948:	4618      	mov	r0, r3
 800494a:	f7fe fef1 	bl	8003730 <LL_ADC_GetOffsetChannel>
 800494e:	4603      	mov	r3, r0
 8004950:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004954:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004958:	fa93 f3a3 	rbit	r3, r3
 800495c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004960:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004964:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8004968:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8004970:	2320      	movs	r3, #32
 8004972:	e004      	b.n	800497e <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8004974:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004978:	fab3 f383 	clz	r3, r3
 800497c:	b2db      	uxtb	r3, r3
 800497e:	461a      	mov	r2, r3
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10b      	bne.n	80049a4 <HAL_ADC_ConfigChannel+0x2dc>
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	0e9b      	lsrs	r3, r3, #26
 8004992:	f003 031f 	and.w	r3, r3, #31
 8004996:	e01e      	b.n	80049d6 <HAL_ADC_ConfigChannel+0x30e>
 8004998:	47ff0000 	.word	0x47ff0000
 800499c:	58026000 	.word	0x58026000
 80049a0:	5c001000 	.word	0x5c001000
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049b0:	fa93 f3a3 	rbit	r3, r3
 80049b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80049b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80049bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80049c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80049c8:	2320      	movs	r3, #32
 80049ca:	e004      	b.n	80049d6 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80049cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80049d0:	fab3 f383 	clz	r3, r3
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d106      	bne.n	80049e8 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2200      	movs	r2, #0
 80049e0:	2100      	movs	r1, #0
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe ff3a 	bl	800385c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2101      	movs	r1, #1
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fe fe9e 	bl	8003730 <LL_ADC_GetOffsetChannel>
 80049f4:	4603      	mov	r3, r0
 80049f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10a      	bne.n	8004a14 <HAL_ADC_ConfigChannel+0x34c>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2101      	movs	r1, #1
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fe fe93 	bl	8003730 <LL_ADC_GetOffsetChannel>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	0e9b      	lsrs	r3, r3, #26
 8004a0e:	f003 021f 	and.w	r2, r3, #31
 8004a12:	e01e      	b.n	8004a52 <HAL_ADC_ConfigChannel+0x38a>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2101      	movs	r1, #1
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fe fe88 	bl	8003730 <LL_ADC_GetOffsetChannel>
 8004a20:	4603      	mov	r3, r0
 8004a22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a2a:	fa93 f3a3 	rbit	r3, r3
 8004a2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004a32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004a3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8004a42:	2320      	movs	r3, #32
 8004a44:	e004      	b.n	8004a50 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8004a46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004a4a:	fab3 f383 	clz	r3, r3
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	461a      	mov	r2, r3
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d105      	bne.n	8004a6a <HAL_ADC_ConfigChannel+0x3a2>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	0e9b      	lsrs	r3, r3, #26
 8004a64:	f003 031f 	and.w	r3, r3, #31
 8004a68:	e018      	b.n	8004a9c <HAL_ADC_ConfigChannel+0x3d4>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a76:	fa93 f3a3 	rbit	r3, r3
 8004a7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004a7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a82:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004a86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8004a8e:	2320      	movs	r3, #32
 8004a90:	e004      	b.n	8004a9c <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8004a92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a96:	fab3 f383 	clz	r3, r3
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d106      	bne.n	8004aae <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fe fed7 	bl	800385c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2102      	movs	r1, #2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fe fe3b 	bl	8003730 <LL_ADC_GetOffsetChannel>
 8004aba:	4603      	mov	r3, r0
 8004abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10a      	bne.n	8004ada <HAL_ADC_ConfigChannel+0x412>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2102      	movs	r1, #2
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe fe30 	bl	8003730 <LL_ADC_GetOffsetChannel>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	0e9b      	lsrs	r3, r3, #26
 8004ad4:	f003 021f 	and.w	r2, r3, #31
 8004ad8:	e01e      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x450>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2102      	movs	r1, #2
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fe fe25 	bl	8003730 <LL_ADC_GetOffsetChannel>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004af0:	fa93 f3a3 	rbit	r3, r3
 8004af4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004af8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004afc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004b00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8004b08:	2320      	movs	r3, #32
 8004b0a:	e004      	b.n	8004b16 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8004b0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b10:	fab3 f383 	clz	r3, r3
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	461a      	mov	r2, r3
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d105      	bne.n	8004b30 <HAL_ADC_ConfigChannel+0x468>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	0e9b      	lsrs	r3, r3, #26
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	e014      	b.n	8004b5a <HAL_ADC_ConfigChannel+0x492>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b38:	fa93 f3a3 	rbit	r3, r3
 8004b3c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004b3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004b44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004b4c:	2320      	movs	r3, #32
 8004b4e:	e004      	b.n	8004b5a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004b50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b54:	fab3 f383 	clz	r3, r3
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d106      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2200      	movs	r2, #0
 8004b64:	2102      	movs	r1, #2
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fe fe78 	bl	800385c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2103      	movs	r1, #3
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fe fddc 	bl	8003730 <LL_ADC_GetOffsetChannel>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10a      	bne.n	8004b98 <HAL_ADC_ConfigChannel+0x4d0>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2103      	movs	r1, #3
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7fe fdd1 	bl	8003730 <LL_ADC_GetOffsetChannel>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	0e9b      	lsrs	r3, r3, #26
 8004b92:	f003 021f 	and.w	r2, r3, #31
 8004b96:	e017      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0x500>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2103      	movs	r1, #3
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fe fdc6 	bl	8003730 <LL_ADC_GetOffsetChannel>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004baa:	fa93 f3a3 	rbit	r3, r3
 8004bae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004bb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bb2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004bb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8004bba:	2320      	movs	r3, #32
 8004bbc:	e003      	b.n	8004bc6 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8004bbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bc0:	fab3 f383 	clz	r3, r3
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d105      	bne.n	8004be0 <HAL_ADC_ConfigChannel+0x518>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	0e9b      	lsrs	r3, r3, #26
 8004bda:	f003 031f 	and.w	r3, r3, #31
 8004bde:	e011      	b.n	8004c04 <HAL_ADC_ConfigChannel+0x53c>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004be8:	fa93 f3a3 	rbit	r3, r3
 8004bec:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004bee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bf0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004bf2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8004bf8:	2320      	movs	r3, #32
 8004bfa:	e003      	b.n	8004c04 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8004bfc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bfe:	fab3 f383 	clz	r3, r3
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d14f      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2103      	movs	r1, #3
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fe fe23 	bl	800385c <LL_ADC_SetOffsetState>
 8004c16:	e047      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	069b      	lsls	r3, r3, #26
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d107      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004c3a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	069b      	lsls	r3, r3, #26
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d107      	bne.n	8004c60 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004c5e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	069b      	lsls	r3, r3, #26
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d107      	bne.n	8004c84 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004c82:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	069b      	lsls	r3, r3, #26
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d107      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004ca6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fe ff77 	bl	8003ba0 <LL_ADC_IsEnabled>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f040 8219 	bne.w	80050ec <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6818      	ldr	r0, [r3, #0]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	6819      	ldr	r1, [r3, #0]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	f7fe feac 	bl	8003a24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	4aa1      	ldr	r2, [pc, #644]	@ (8004f58 <HAL_ADC_ConfigChannel+0x890>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	f040 812e 	bne.w	8004f34 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10b      	bne.n	8004d00 <HAL_ADC_ConfigChannel+0x638>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	0e9b      	lsrs	r3, r3, #26
 8004cee:	3301      	adds	r3, #1
 8004cf0:	f003 031f 	and.w	r3, r3, #31
 8004cf4:	2b09      	cmp	r3, #9
 8004cf6:	bf94      	ite	ls
 8004cf8:	2301      	movls	r3, #1
 8004cfa:	2300      	movhi	r3, #0
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	e019      	b.n	8004d34 <HAL_ADC_ConfigChannel+0x66c>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d08:	fa93 f3a3 	rbit	r3, r3
 8004d0c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004d12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004d18:	2320      	movs	r3, #32
 8004d1a:	e003      	b.n	8004d24 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004d1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d1e:	fab3 f383 	clz	r3, r3
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	3301      	adds	r3, #1
 8004d26:	f003 031f 	and.w	r3, r3, #31
 8004d2a:	2b09      	cmp	r3, #9
 8004d2c:	bf94      	ite	ls
 8004d2e:	2301      	movls	r3, #1
 8004d30:	2300      	movhi	r3, #0
 8004d32:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d079      	beq.n	8004e2c <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d107      	bne.n	8004d54 <HAL_ADC_ConfigChannel+0x68c>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	0e9b      	lsrs	r3, r3, #26
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	069b      	lsls	r3, r3, #26
 8004d4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d52:	e015      	b.n	8004d80 <HAL_ADC_ConfigChannel+0x6b8>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d5c:	fa93 f3a3 	rbit	r3, r3
 8004d60:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004d62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d64:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8004d6c:	2320      	movs	r3, #32
 8004d6e:	e003      	b.n	8004d78 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8004d70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d72:	fab3 f383 	clz	r3, r3
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	3301      	adds	r3, #1
 8004d7a:	069b      	lsls	r3, r3, #26
 8004d7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d109      	bne.n	8004da0 <HAL_ADC_ConfigChannel+0x6d8>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	0e9b      	lsrs	r3, r3, #26
 8004d92:	3301      	adds	r3, #1
 8004d94:	f003 031f 	and.w	r3, r3, #31
 8004d98:	2101      	movs	r1, #1
 8004d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9e:	e017      	b.n	8004dd0 <HAL_ADC_ConfigChannel+0x708>
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004da8:	fa93 f3a3 	rbit	r3, r3
 8004dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004db0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004db2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004db8:	2320      	movs	r3, #32
 8004dba:	e003      	b.n	8004dc4 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8004dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dbe:	fab3 f383 	clz	r3, r3
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	f003 031f 	and.w	r3, r3, #31
 8004dca:	2101      	movs	r1, #1
 8004dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd0:	ea42 0103 	orr.w	r1, r2, r3
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10a      	bne.n	8004df6 <HAL_ADC_ConfigChannel+0x72e>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	0e9b      	lsrs	r3, r3, #26
 8004de6:	3301      	adds	r3, #1
 8004de8:	f003 021f 	and.w	r2, r3, #31
 8004dec:	4613      	mov	r3, r2
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	4413      	add	r3, r2
 8004df2:	051b      	lsls	r3, r3, #20
 8004df4:	e018      	b.n	8004e28 <HAL_ADC_ConfigChannel+0x760>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dfe:	fa93 f3a3 	rbit	r3, r3
 8004e02:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e06:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8004e0e:	2320      	movs	r3, #32
 8004e10:	e003      	b.n	8004e1a <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8004e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e14:	fab3 f383 	clz	r3, r3
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	f003 021f 	and.w	r2, r3, #31
 8004e20:	4613      	mov	r3, r2
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	4413      	add	r3, r2
 8004e26:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	e07e      	b.n	8004f2a <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d107      	bne.n	8004e48 <HAL_ADC_ConfigChannel+0x780>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	0e9b      	lsrs	r3, r3, #26
 8004e3e:	3301      	adds	r3, #1
 8004e40:	069b      	lsls	r3, r3, #26
 8004e42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e46:	e015      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x7ac>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e50:	fa93 f3a3 	rbit	r3, r3
 8004e54:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8004e60:	2320      	movs	r3, #32
 8004e62:	e003      	b.n	8004e6c <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8004e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e66:	fab3 f383 	clz	r3, r3
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	069b      	lsls	r3, r3, #26
 8004e70:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d109      	bne.n	8004e94 <HAL_ADC_ConfigChannel+0x7cc>
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	0e9b      	lsrs	r3, r3, #26
 8004e86:	3301      	adds	r3, #1
 8004e88:	f003 031f 	and.w	r3, r3, #31
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e92:	e017      	b.n	8004ec4 <HAL_ADC_ConfigChannel+0x7fc>
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	fa93 f3a3 	rbit	r3, r3
 8004ea0:	61bb      	str	r3, [r7, #24]
  return result;
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8004eac:	2320      	movs	r3, #32
 8004eae:	e003      	b.n	8004eb8 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	fab3 f383 	clz	r3, r3
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	3301      	adds	r3, #1
 8004eba:	f003 031f 	and.w	r3, r3, #31
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec4:	ea42 0103 	orr.w	r1, r2, r3
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10d      	bne.n	8004ef0 <HAL_ADC_ConfigChannel+0x828>
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	0e9b      	lsrs	r3, r3, #26
 8004eda:	3301      	adds	r3, #1
 8004edc:	f003 021f 	and.w	r2, r3, #31
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3b1e      	subs	r3, #30
 8004ee8:	051b      	lsls	r3, r3, #20
 8004eea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004eee:	e01b      	b.n	8004f28 <HAL_ADC_ConfigChannel+0x860>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	fa93 f3a3 	rbit	r3, r3
 8004efc:	60fb      	str	r3, [r7, #12]
  return result;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8004f08:	2320      	movs	r3, #32
 8004f0a:	e003      	b.n	8004f14 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	fab3 f383 	clz	r3, r3
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	3301      	adds	r3, #1
 8004f16:	f003 021f 	and.w	r2, r3, #31
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	4413      	add	r3, r2
 8004f20:	3b1e      	subs	r3, #30
 8004f22:	051b      	lsls	r3, r3, #20
 8004f24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	6892      	ldr	r2, [r2, #8]
 8004f2e:	4619      	mov	r1, r3
 8004f30:	f7fe fd4d 	bl	80039ce <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f280 80d7 	bge.w	80050ec <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a06      	ldr	r2, [pc, #24]	@ (8004f5c <HAL_ADC_ConfigChannel+0x894>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d004      	beq.n	8004f52 <HAL_ADC_ConfigChannel+0x88a>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a04      	ldr	r2, [pc, #16]	@ (8004f60 <HAL_ADC_ConfigChannel+0x898>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d10a      	bne.n	8004f68 <HAL_ADC_ConfigChannel+0x8a0>
 8004f52:	4b04      	ldr	r3, [pc, #16]	@ (8004f64 <HAL_ADC_ConfigChannel+0x89c>)
 8004f54:	e009      	b.n	8004f6a <HAL_ADC_ConfigChannel+0x8a2>
 8004f56:	bf00      	nop
 8004f58:	47ff0000 	.word	0x47ff0000
 8004f5c:	40022000 	.word	0x40022000
 8004f60:	40022100 	.word	0x40022100
 8004f64:	40022300 	.word	0x40022300
 8004f68:	4b65      	ldr	r3, [pc, #404]	@ (8005100 <HAL_ADC_ConfigChannel+0xa38>)
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fe fba0 	bl	80036b0 <LL_ADC_GetCommonPathInternalCh>
 8004f70:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a62      	ldr	r2, [pc, #392]	@ (8005104 <HAL_ADC_ConfigChannel+0xa3c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d004      	beq.n	8004f88 <HAL_ADC_ConfigChannel+0x8c0>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a61      	ldr	r2, [pc, #388]	@ (8005108 <HAL_ADC_ConfigChannel+0xa40>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d10e      	bne.n	8004fa6 <HAL_ADC_ConfigChannel+0x8de>
 8004f88:	485e      	ldr	r0, [pc, #376]	@ (8005104 <HAL_ADC_ConfigChannel+0xa3c>)
 8004f8a:	f7fe fe09 	bl	8003ba0 <LL_ADC_IsEnabled>
 8004f8e:	4604      	mov	r4, r0
 8004f90:	485d      	ldr	r0, [pc, #372]	@ (8005108 <HAL_ADC_ConfigChannel+0xa40>)
 8004f92:	f7fe fe05 	bl	8003ba0 <LL_ADC_IsEnabled>
 8004f96:	4603      	mov	r3, r0
 8004f98:	4323      	orrs	r3, r4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	bf0c      	ite	eq
 8004f9e:	2301      	moveq	r3, #1
 8004fa0:	2300      	movne	r3, #0
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	e008      	b.n	8004fb8 <HAL_ADC_ConfigChannel+0x8f0>
 8004fa6:	4859      	ldr	r0, [pc, #356]	@ (800510c <HAL_ADC_ConfigChannel+0xa44>)
 8004fa8:	f7fe fdfa 	bl	8003ba0 <LL_ADC_IsEnabled>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	bf0c      	ite	eq
 8004fb2:	2301      	moveq	r3, #1
 8004fb4:	2300      	movne	r3, #0
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 8084 	beq.w	80050c6 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a53      	ldr	r2, [pc, #332]	@ (8005110 <HAL_ADC_ConfigChannel+0xa48>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d132      	bne.n	800502e <HAL_ADC_ConfigChannel+0x966>
 8004fc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d12c      	bne.n	800502e <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a4c      	ldr	r2, [pc, #304]	@ (800510c <HAL_ADC_ConfigChannel+0xa44>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	f040 8086 	bne.w	80050ec <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a47      	ldr	r2, [pc, #284]	@ (8005104 <HAL_ADC_ConfigChannel+0xa3c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d004      	beq.n	8004ff4 <HAL_ADC_ConfigChannel+0x92c>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a46      	ldr	r2, [pc, #280]	@ (8005108 <HAL_ADC_ConfigChannel+0xa40>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d101      	bne.n	8004ff8 <HAL_ADC_ConfigChannel+0x930>
 8004ff4:	4a47      	ldr	r2, [pc, #284]	@ (8005114 <HAL_ADC_ConfigChannel+0xa4c>)
 8004ff6:	e000      	b.n	8004ffa <HAL_ADC_ConfigChannel+0x932>
 8004ff8:	4a41      	ldr	r2, [pc, #260]	@ (8005100 <HAL_ADC_ConfigChannel+0xa38>)
 8004ffa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ffe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005002:	4619      	mov	r1, r3
 8005004:	4610      	mov	r0, r2
 8005006:	f7fe fb40 	bl	800368a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800500a:	4b43      	ldr	r3, [pc, #268]	@ (8005118 <HAL_ADC_ConfigChannel+0xa50>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	099b      	lsrs	r3, r3, #6
 8005010:	4a42      	ldr	r2, [pc, #264]	@ (800511c <HAL_ADC_ConfigChannel+0xa54>)
 8005012:	fba2 2303 	umull	r2, r3, r2, r3
 8005016:	099b      	lsrs	r3, r3, #6
 8005018:	3301      	adds	r3, #1
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800501e:	e002      	b.n	8005026 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	3b01      	subs	r3, #1
 8005024:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1f9      	bne.n	8005020 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800502c:	e05e      	b.n	80050ec <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a3b      	ldr	r2, [pc, #236]	@ (8005120 <HAL_ADC_ConfigChannel+0xa58>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d120      	bne.n	800507a <HAL_ADC_ConfigChannel+0x9b2>
 8005038:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800503c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d11a      	bne.n	800507a <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a30      	ldr	r2, [pc, #192]	@ (800510c <HAL_ADC_ConfigChannel+0xa44>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d14e      	bne.n	80050ec <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a2c      	ldr	r2, [pc, #176]	@ (8005104 <HAL_ADC_ConfigChannel+0xa3c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d004      	beq.n	8005062 <HAL_ADC_ConfigChannel+0x99a>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a2a      	ldr	r2, [pc, #168]	@ (8005108 <HAL_ADC_ConfigChannel+0xa40>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d101      	bne.n	8005066 <HAL_ADC_ConfigChannel+0x99e>
 8005062:	4a2c      	ldr	r2, [pc, #176]	@ (8005114 <HAL_ADC_ConfigChannel+0xa4c>)
 8005064:	e000      	b.n	8005068 <HAL_ADC_ConfigChannel+0x9a0>
 8005066:	4a26      	ldr	r2, [pc, #152]	@ (8005100 <HAL_ADC_ConfigChannel+0xa38>)
 8005068:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800506c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005070:	4619      	mov	r1, r3
 8005072:	4610      	mov	r0, r2
 8005074:	f7fe fb09 	bl	800368a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005078:	e038      	b.n	80050ec <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a29      	ldr	r2, [pc, #164]	@ (8005124 <HAL_ADC_ConfigChannel+0xa5c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d133      	bne.n	80050ec <HAL_ADC_ConfigChannel+0xa24>
 8005084:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005088:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d12d      	bne.n	80050ec <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1d      	ldr	r2, [pc, #116]	@ (800510c <HAL_ADC_ConfigChannel+0xa44>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d128      	bne.n	80050ec <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a19      	ldr	r2, [pc, #100]	@ (8005104 <HAL_ADC_ConfigChannel+0xa3c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d004      	beq.n	80050ae <HAL_ADC_ConfigChannel+0x9e6>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a17      	ldr	r2, [pc, #92]	@ (8005108 <HAL_ADC_ConfigChannel+0xa40>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d101      	bne.n	80050b2 <HAL_ADC_ConfigChannel+0x9ea>
 80050ae:	4a19      	ldr	r2, [pc, #100]	@ (8005114 <HAL_ADC_ConfigChannel+0xa4c>)
 80050b0:	e000      	b.n	80050b4 <HAL_ADC_ConfigChannel+0x9ec>
 80050b2:	4a13      	ldr	r2, [pc, #76]	@ (8005100 <HAL_ADC_ConfigChannel+0xa38>)
 80050b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80050b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80050bc:	4619      	mov	r1, r3
 80050be:	4610      	mov	r0, r2
 80050c0:	f7fe fae3 	bl	800368a <LL_ADC_SetCommonPathInternalCh>
 80050c4:	e012      	b.n	80050ec <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ca:	f043 0220 	orr.w	r2, r3, #32
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80050d8:	e008      	b.n	80050ec <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050de:	f043 0220 	orr.w	r2, r3, #32
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80050f4:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	37e4      	adds	r7, #228	@ 0xe4
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd90      	pop	{r4, r7, pc}
 8005100:	58026300 	.word	0x58026300
 8005104:	40022000 	.word	0x40022000
 8005108:	40022100 	.word	0x40022100
 800510c:	58026000 	.word	0x58026000
 8005110:	c7520000 	.word	0xc7520000
 8005114:	40022300 	.word	0x40022300
 8005118:	24000068 	.word	0x24000068
 800511c:	053e2d63 	.word	0x053e2d63
 8005120:	c3210000 	.word	0xc3210000
 8005124:	cb840000 	.word	0xcb840000

08005128 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4618      	mov	r0, r3
 8005136:	f7fe fd33 	bl	8003ba0 <LL_ADC_IsEnabled>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d16e      	bne.n	800521e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	4b38      	ldr	r3, [pc, #224]	@ (8005228 <ADC_Enable+0x100>)
 8005148:	4013      	ands	r3, r2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00d      	beq.n	800516a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005152:	f043 0210 	orr.w	r2, r3, #16
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800515e:	f043 0201 	orr.w	r2, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e05a      	b.n	8005220 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f7fe fd02 	bl	8003b78 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005174:	f7fe fa30 	bl	80035d8 <HAL_GetTick>
 8005178:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a2b      	ldr	r2, [pc, #172]	@ (800522c <ADC_Enable+0x104>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d004      	beq.n	800518e <ADC_Enable+0x66>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a29      	ldr	r2, [pc, #164]	@ (8005230 <ADC_Enable+0x108>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d101      	bne.n	8005192 <ADC_Enable+0x6a>
 800518e:	4b29      	ldr	r3, [pc, #164]	@ (8005234 <ADC_Enable+0x10c>)
 8005190:	e000      	b.n	8005194 <ADC_Enable+0x6c>
 8005192:	4b29      	ldr	r3, [pc, #164]	@ (8005238 <ADC_Enable+0x110>)
 8005194:	4618      	mov	r0, r3
 8005196:	f7fe fc85 	bl	8003aa4 <LL_ADC_GetMultimode>
 800519a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a23      	ldr	r2, [pc, #140]	@ (8005230 <ADC_Enable+0x108>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d002      	beq.n	80051ac <ADC_Enable+0x84>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	e000      	b.n	80051ae <ADC_Enable+0x86>
 80051ac:	4b1f      	ldr	r3, [pc, #124]	@ (800522c <ADC_Enable+0x104>)
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d02c      	beq.n	8005210 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d130      	bne.n	800521e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051bc:	e028      	b.n	8005210 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fe fcec 	bl	8003ba0 <LL_ADC_IsEnabled>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d104      	bne.n	80051d8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fe fcd0 	bl	8003b78 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80051d8:	f7fe f9fe 	bl	80035d8 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d914      	bls.n	8005210 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d00d      	beq.n	8005210 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051f8:	f043 0210 	orr.w	r2, r3, #16
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005204:	f043 0201 	orr.w	r2, r3, #1
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e007      	b.n	8005220 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b01      	cmp	r3, #1
 800521c:	d1cf      	bne.n	80051be <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	8000003f 	.word	0x8000003f
 800522c:	40022000 	.word	0x40022000
 8005230:	40022100 	.word	0x40022100
 8005234:	40022300 	.word	0x40022300
 8005238:	58026300 	.word	0x58026300

0800523c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005248:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800524e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005252:	2b00      	cmp	r3, #0
 8005254:	d14b      	bne.n	80052ee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800525a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0308 	and.w	r3, r3, #8
 800526c:	2b00      	cmp	r3, #0
 800526e:	d021      	beq.n	80052b4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f7fe fb1b 	bl	80038b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d032      	beq.n	80052e6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d12b      	bne.n	80052e6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005292:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800529e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d11f      	bne.n	80052e6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052aa:	f043 0201 	orr.w	r2, r3, #1
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	661a      	str	r2, [r3, #96]	@ 0x60
 80052b2:	e018      	b.n	80052e6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d111      	bne.n	80052e6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d105      	bne.n	80052e6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052de:	f043 0201 	orr.w	r2, r3, #1
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f7ff f9c6 	bl	8004678 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80052ec:	e00e      	b.n	800530c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052f2:	f003 0310 	and.w	r3, r3, #16
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f7ff f9da 	bl	80046b4 <HAL_ADC_ErrorCallback>
}
 8005300:	e004      	b.n	800530c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	4798      	blx	r3
}
 800530c:	bf00      	nop
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005320:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f7ff f9b2 	bl	800468c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005328:	bf00      	nop
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005342:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800534e:	f043 0204 	orr.w	r2, r3, #4
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f7ff f9ac 	bl	80046b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800535c:	bf00      	nop
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a6c      	ldr	r2, [pc, #432]	@ (8005524 <ADC_ConfigureBoostMode+0x1c0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d004      	beq.n	8005380 <ADC_ConfigureBoostMode+0x1c>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a6b      	ldr	r2, [pc, #428]	@ (8005528 <ADC_ConfigureBoostMode+0x1c4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d109      	bne.n	8005394 <ADC_ConfigureBoostMode+0x30>
 8005380:	4b6a      	ldr	r3, [pc, #424]	@ (800552c <ADC_ConfigureBoostMode+0x1c8>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005388:	2b00      	cmp	r3, #0
 800538a:	bf14      	ite	ne
 800538c:	2301      	movne	r3, #1
 800538e:	2300      	moveq	r3, #0
 8005390:	b2db      	uxtb	r3, r3
 8005392:	e008      	b.n	80053a6 <ADC_ConfigureBoostMode+0x42>
 8005394:	4b66      	ldr	r3, [pc, #408]	@ (8005530 <ADC_ConfigureBoostMode+0x1cc>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800539c:	2b00      	cmp	r3, #0
 800539e:	bf14      	ite	ne
 80053a0:	2301      	movne	r3, #1
 80053a2:	2300      	moveq	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d01c      	beq.n	80053e4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80053aa:	f004 fa85 	bl	80098b8 <HAL_RCC_GetHCLKFreq>
 80053ae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80053b8:	d010      	beq.n	80053dc <ADC_ConfigureBoostMode+0x78>
 80053ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80053be:	d873      	bhi.n	80054a8 <ADC_ConfigureBoostMode+0x144>
 80053c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053c4:	d002      	beq.n	80053cc <ADC_ConfigureBoostMode+0x68>
 80053c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053ca:	d16d      	bne.n	80054a8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	0c1b      	lsrs	r3, r3, #16
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d8:	60fb      	str	r3, [r7, #12]
        break;
 80053da:	e068      	b.n	80054ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	089b      	lsrs	r3, r3, #2
 80053e0:	60fb      	str	r3, [r7, #12]
        break;
 80053e2:	e064      	b.n	80054ae <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80053e4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80053e8:	f04f 0100 	mov.w	r1, #0
 80053ec:	f005 fc60 	bl	800acb0 <HAL_RCCEx_GetPeriphCLKFreq>
 80053f0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80053fa:	d051      	beq.n	80054a0 <ADC_ConfigureBoostMode+0x13c>
 80053fc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005400:	d854      	bhi.n	80054ac <ADC_ConfigureBoostMode+0x148>
 8005402:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005406:	d047      	beq.n	8005498 <ADC_ConfigureBoostMode+0x134>
 8005408:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800540c:	d84e      	bhi.n	80054ac <ADC_ConfigureBoostMode+0x148>
 800540e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005412:	d03d      	beq.n	8005490 <ADC_ConfigureBoostMode+0x12c>
 8005414:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005418:	d848      	bhi.n	80054ac <ADC_ConfigureBoostMode+0x148>
 800541a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800541e:	d033      	beq.n	8005488 <ADC_ConfigureBoostMode+0x124>
 8005420:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005424:	d842      	bhi.n	80054ac <ADC_ConfigureBoostMode+0x148>
 8005426:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800542a:	d029      	beq.n	8005480 <ADC_ConfigureBoostMode+0x11c>
 800542c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005430:	d83c      	bhi.n	80054ac <ADC_ConfigureBoostMode+0x148>
 8005432:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005436:	d01a      	beq.n	800546e <ADC_ConfigureBoostMode+0x10a>
 8005438:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800543c:	d836      	bhi.n	80054ac <ADC_ConfigureBoostMode+0x148>
 800543e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005442:	d014      	beq.n	800546e <ADC_ConfigureBoostMode+0x10a>
 8005444:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005448:	d830      	bhi.n	80054ac <ADC_ConfigureBoostMode+0x148>
 800544a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800544e:	d00e      	beq.n	800546e <ADC_ConfigureBoostMode+0x10a>
 8005450:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005454:	d82a      	bhi.n	80054ac <ADC_ConfigureBoostMode+0x148>
 8005456:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800545a:	d008      	beq.n	800546e <ADC_ConfigureBoostMode+0x10a>
 800545c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005460:	d824      	bhi.n	80054ac <ADC_ConfigureBoostMode+0x148>
 8005462:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005466:	d002      	beq.n	800546e <ADC_ConfigureBoostMode+0x10a>
 8005468:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800546c:	d11e      	bne.n	80054ac <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	0c9b      	lsrs	r3, r3, #18
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	fbb2 f3f3 	udiv	r3, r2, r3
 800547c:	60fb      	str	r3, [r7, #12]
        break;
 800547e:	e016      	b.n	80054ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	091b      	lsrs	r3, r3, #4
 8005484:	60fb      	str	r3, [r7, #12]
        break;
 8005486:	e012      	b.n	80054ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	095b      	lsrs	r3, r3, #5
 800548c:	60fb      	str	r3, [r7, #12]
        break;
 800548e:	e00e      	b.n	80054ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	099b      	lsrs	r3, r3, #6
 8005494:	60fb      	str	r3, [r7, #12]
        break;
 8005496:	e00a      	b.n	80054ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	09db      	lsrs	r3, r3, #7
 800549c:	60fb      	str	r3, [r7, #12]
        break;
 800549e:	e006      	b.n	80054ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	0a1b      	lsrs	r3, r3, #8
 80054a4:	60fb      	str	r3, [r7, #12]
        break;
 80054a6:	e002      	b.n	80054ae <ADC_ConfigureBoostMode+0x14a>
        break;
 80054a8:	bf00      	nop
 80054aa:	e000      	b.n	80054ae <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80054ac:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	085b      	lsrs	r3, r3, #1
 80054b2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005534 <ADC_ConfigureBoostMode+0x1d0>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d808      	bhi.n	80054ce <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80054ca:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80054cc:	e025      	b.n	800551a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	4a19      	ldr	r2, [pc, #100]	@ (8005538 <ADC_ConfigureBoostMode+0x1d4>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d80a      	bhi.n	80054ec <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054e8:	609a      	str	r2, [r3, #8]
}
 80054ea:	e016      	b.n	800551a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4a13      	ldr	r2, [pc, #76]	@ (800553c <ADC_ConfigureBoostMode+0x1d8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d80a      	bhi.n	800550a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005506:	609a      	str	r2, [r3, #8]
}
 8005508:	e007      	b.n	800551a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005518:	609a      	str	r2, [r3, #8]
}
 800551a:	bf00      	nop
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	40022000 	.word	0x40022000
 8005528:	40022100 	.word	0x40022100
 800552c:	40022300 	.word	0x40022300
 8005530:	58026300 	.word	0x58026300
 8005534:	005f5e10 	.word	0x005f5e10
 8005538:	00bebc20 	.word	0x00bebc20
 800553c:	017d7840 	.word	0x017d7840

08005540 <LL_ADC_IsEnabled>:
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b01      	cmp	r3, #1
 8005552:	d101      	bne.n	8005558 <LL_ADC_IsEnabled+0x18>
 8005554:	2301      	movs	r3, #1
 8005556:	e000      	b.n	800555a <LL_ADC_IsEnabled+0x1a>
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <LL_ADC_REG_IsConversionOngoing>:
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	2b04      	cmp	r3, #4
 8005578:	d101      	bne.n	800557e <LL_ADC_REG_IsConversionOngoing+0x18>
 800557a:	2301      	movs	r3, #1
 800557c:	e000      	b.n	8005580 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80055f0:	b590      	push	{r4, r7, lr}
 80055f2:	b0a3      	sub	sp, #140	@ 0x8c
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005606:	2b01      	cmp	r3, #1
 8005608:	d101      	bne.n	800560e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800560a:	2302      	movs	r3, #2
 800560c:	e0c1      	b.n	8005792 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005616:	2300      	movs	r3, #0
 8005618:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800561a:	2300      	movs	r3, #0
 800561c:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a5e      	ldr	r2, [pc, #376]	@ (800579c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d102      	bne.n	800562e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005628:	4b5d      	ldr	r3, [pc, #372]	@ (80057a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	e001      	b.n	8005632 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800562e:	2300      	movs	r3, #0
 8005630:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10b      	bne.n	8005650 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800563c:	f043 0220 	orr.w	r2, r3, #32
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e0a0      	b.n	8005792 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff ff87 	bl	8005566 <LL_ADC_REG_IsConversionOngoing>
 8005658:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4618      	mov	r0, r3
 8005662:	f7ff ff80 	bl	8005566 <LL_ADC_REG_IsConversionOngoing>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	f040 8081 	bne.w	8005770 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800566e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005672:	2b00      	cmp	r3, #0
 8005674:	d17c      	bne.n	8005770 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a48      	ldr	r2, [pc, #288]	@ (800579c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d004      	beq.n	800568a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a46      	ldr	r2, [pc, #280]	@ (80057a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d101      	bne.n	800568e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800568a:	4b46      	ldr	r3, [pc, #280]	@ (80057a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800568c:	e000      	b.n	8005690 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800568e:	4b46      	ldr	r3, [pc, #280]	@ (80057a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005690:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d039      	beq.n	800570e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800569a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	431a      	orrs	r2, r3
 80056a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a3a      	ldr	r2, [pc, #232]	@ (800579c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d004      	beq.n	80056c0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a39      	ldr	r2, [pc, #228]	@ (80057a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d10e      	bne.n	80056de <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80056c0:	4836      	ldr	r0, [pc, #216]	@ (800579c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80056c2:	f7ff ff3d 	bl	8005540 <LL_ADC_IsEnabled>
 80056c6:	4604      	mov	r4, r0
 80056c8:	4835      	ldr	r0, [pc, #212]	@ (80057a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80056ca:	f7ff ff39 	bl	8005540 <LL_ADC_IsEnabled>
 80056ce:	4603      	mov	r3, r0
 80056d0:	4323      	orrs	r3, r4
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	bf0c      	ite	eq
 80056d6:	2301      	moveq	r3, #1
 80056d8:	2300      	movne	r3, #0
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	e008      	b.n	80056f0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80056de:	4833      	ldr	r0, [pc, #204]	@ (80057ac <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80056e0:	f7ff ff2e 	bl	8005540 <LL_ADC_IsEnabled>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	bf0c      	ite	eq
 80056ea:	2301      	moveq	r3, #1
 80056ec:	2300      	movne	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d047      	beq.n	8005784 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80056f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	4b2d      	ldr	r3, [pc, #180]	@ (80057b0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80056fa:	4013      	ands	r3, r2
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	6811      	ldr	r1, [r2, #0]
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	6892      	ldr	r2, [r2, #8]
 8005704:	430a      	orrs	r2, r1
 8005706:	431a      	orrs	r2, r3
 8005708:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800570a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800570c:	e03a      	b.n	8005784 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800570e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005716:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005718:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a1f      	ldr	r2, [pc, #124]	@ (800579c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d004      	beq.n	800572e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a1d      	ldr	r2, [pc, #116]	@ (80057a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d10e      	bne.n	800574c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800572e:	481b      	ldr	r0, [pc, #108]	@ (800579c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005730:	f7ff ff06 	bl	8005540 <LL_ADC_IsEnabled>
 8005734:	4604      	mov	r4, r0
 8005736:	481a      	ldr	r0, [pc, #104]	@ (80057a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005738:	f7ff ff02 	bl	8005540 <LL_ADC_IsEnabled>
 800573c:	4603      	mov	r3, r0
 800573e:	4323      	orrs	r3, r4
 8005740:	2b00      	cmp	r3, #0
 8005742:	bf0c      	ite	eq
 8005744:	2301      	moveq	r3, #1
 8005746:	2300      	movne	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	e008      	b.n	800575e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800574c:	4817      	ldr	r0, [pc, #92]	@ (80057ac <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800574e:	f7ff fef7 	bl	8005540 <LL_ADC_IsEnabled>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	bf0c      	ite	eq
 8005758:	2301      	moveq	r3, #1
 800575a:	2300      	movne	r3, #0
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d010      	beq.n	8005784 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005762:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005764:	689a      	ldr	r2, [r3, #8]
 8005766:	4b12      	ldr	r3, [pc, #72]	@ (80057b0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005768:	4013      	ands	r3, r2
 800576a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800576c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800576e:	e009      	b.n	8005784 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005774:	f043 0220 	orr.w	r2, r3, #32
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8005782:	e000      	b.n	8005786 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005784:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800578e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8005792:	4618      	mov	r0, r3
 8005794:	378c      	adds	r7, #140	@ 0x8c
 8005796:	46bd      	mov	sp, r7
 8005798:	bd90      	pop	{r4, r7, pc}
 800579a:	bf00      	nop
 800579c:	40022000 	.word	0x40022000
 80057a0:	40022100 	.word	0x40022100
 80057a4:	40022300 	.word	0x40022300
 80057a8:	58026300 	.word	0x58026300
 80057ac:	58026000 	.word	0x58026000
 80057b0:	fffff0e0 	.word	0xfffff0e0

080057b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057c4:	4b0b      	ldr	r3, [pc, #44]	@ (80057f4 <__NVIC_SetPriorityGrouping+0x40>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80057d0:	4013      	ands	r3, r2
 80057d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80057dc:	4b06      	ldr	r3, [pc, #24]	@ (80057f8 <__NVIC_SetPriorityGrouping+0x44>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057e2:	4a04      	ldr	r2, [pc, #16]	@ (80057f4 <__NVIC_SetPriorityGrouping+0x40>)
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	60d3      	str	r3, [r2, #12]
}
 80057e8:	bf00      	nop
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	e000ed00 	.word	0xe000ed00
 80057f8:	05fa0000 	.word	0x05fa0000

080057fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005800:	4b04      	ldr	r3, [pc, #16]	@ (8005814 <__NVIC_GetPriorityGrouping+0x18>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	0a1b      	lsrs	r3, r3, #8
 8005806:	f003 0307 	and.w	r3, r3, #7
}
 800580a:	4618      	mov	r0, r3
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	e000ed00 	.word	0xe000ed00

08005818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005826:	2b00      	cmp	r3, #0
 8005828:	db0b      	blt.n	8005842 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800582a:	88fb      	ldrh	r3, [r7, #6]
 800582c:	f003 021f 	and.w	r2, r3, #31
 8005830:	4907      	ldr	r1, [pc, #28]	@ (8005850 <__NVIC_EnableIRQ+0x38>)
 8005832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	2001      	movs	r0, #1
 800583a:	fa00 f202 	lsl.w	r2, r0, r2
 800583e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005842:	bf00      	nop
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	e000e100 	.word	0xe000e100

08005854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	6039      	str	r1, [r7, #0]
 800585e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005860:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005864:	2b00      	cmp	r3, #0
 8005866:	db0a      	blt.n	800587e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	b2da      	uxtb	r2, r3
 800586c:	490c      	ldr	r1, [pc, #48]	@ (80058a0 <__NVIC_SetPriority+0x4c>)
 800586e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005872:	0112      	lsls	r2, r2, #4
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	440b      	add	r3, r1
 8005878:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800587c:	e00a      	b.n	8005894 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	b2da      	uxtb	r2, r3
 8005882:	4908      	ldr	r1, [pc, #32]	@ (80058a4 <__NVIC_SetPriority+0x50>)
 8005884:	88fb      	ldrh	r3, [r7, #6]
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	3b04      	subs	r3, #4
 800588c:	0112      	lsls	r2, r2, #4
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	440b      	add	r3, r1
 8005892:	761a      	strb	r2, [r3, #24]
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	e000e100 	.word	0xe000e100
 80058a4:	e000ed00 	.word	0xe000ed00

080058a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b089      	sub	sp, #36	@ 0x24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f1c3 0307 	rsb	r3, r3, #7
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	bf28      	it	cs
 80058c6:	2304      	movcs	r3, #4
 80058c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	3304      	adds	r3, #4
 80058ce:	2b06      	cmp	r3, #6
 80058d0:	d902      	bls.n	80058d8 <NVIC_EncodePriority+0x30>
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	3b03      	subs	r3, #3
 80058d6:	e000      	b.n	80058da <NVIC_EncodePriority+0x32>
 80058d8:	2300      	movs	r3, #0
 80058da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058dc:	f04f 32ff 	mov.w	r2, #4294967295
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	fa02 f303 	lsl.w	r3, r2, r3
 80058e6:	43da      	mvns	r2, r3
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	401a      	ands	r2, r3
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058f0:	f04f 31ff 	mov.w	r1, #4294967295
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	fa01 f303 	lsl.w	r3, r1, r3
 80058fa:	43d9      	mvns	r1, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005900:	4313      	orrs	r3, r2
         );
}
 8005902:	4618      	mov	r0, r3
 8005904:	3724      	adds	r7, #36	@ 0x24
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
	...

08005910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	3b01      	subs	r3, #1
 800591c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005920:	d301      	bcc.n	8005926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005922:	2301      	movs	r3, #1
 8005924:	e00f      	b.n	8005946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005926:	4a0a      	ldr	r2, [pc, #40]	@ (8005950 <SysTick_Config+0x40>)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3b01      	subs	r3, #1
 800592c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800592e:	210f      	movs	r1, #15
 8005930:	f04f 30ff 	mov.w	r0, #4294967295
 8005934:	f7ff ff8e 	bl	8005854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005938:	4b05      	ldr	r3, [pc, #20]	@ (8005950 <SysTick_Config+0x40>)
 800593a:	2200      	movs	r2, #0
 800593c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800593e:	4b04      	ldr	r3, [pc, #16]	@ (8005950 <SysTick_Config+0x40>)
 8005940:	2207      	movs	r2, #7
 8005942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	e000e010 	.word	0xe000e010

08005954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff ff29 	bl	80057b4 <__NVIC_SetPriorityGrouping>
}
 8005962:	bf00      	nop
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b086      	sub	sp, #24
 800596e:	af00      	add	r7, sp, #0
 8005970:	4603      	mov	r3, r0
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	607a      	str	r2, [r7, #4]
 8005976:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005978:	f7ff ff40 	bl	80057fc <__NVIC_GetPriorityGrouping>
 800597c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	68b9      	ldr	r1, [r7, #8]
 8005982:	6978      	ldr	r0, [r7, #20]
 8005984:	f7ff ff90 	bl	80058a8 <NVIC_EncodePriority>
 8005988:	4602      	mov	r2, r0
 800598a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800598e:	4611      	mov	r1, r2
 8005990:	4618      	mov	r0, r3
 8005992:	f7ff ff5f 	bl	8005854 <__NVIC_SetPriority>
}
 8005996:	bf00      	nop
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b082      	sub	sp, #8
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	4603      	mov	r3, r0
 80059a6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff ff33 	bl	8005818 <__NVIC_EnableIRQ>
}
 80059b2:	bf00      	nop
 80059b4:	3708      	adds	r7, #8
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b082      	sub	sp, #8
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7ff ffa4 	bl	8005910 <SysTick_Config>
 80059c8:	4603      	mov	r3, r0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
	...

080059d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80059dc:	f7fd fdfc 	bl	80035d8 <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e312      	b.n	8006012 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a66      	ldr	r2, [pc, #408]	@ (8005b8c <HAL_DMA_Init+0x1b8>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d04a      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a65      	ldr	r2, [pc, #404]	@ (8005b90 <HAL_DMA_Init+0x1bc>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d045      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a63      	ldr	r2, [pc, #396]	@ (8005b94 <HAL_DMA_Init+0x1c0>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d040      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a62      	ldr	r2, [pc, #392]	@ (8005b98 <HAL_DMA_Init+0x1c4>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d03b      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a60      	ldr	r2, [pc, #384]	@ (8005b9c <HAL_DMA_Init+0x1c8>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d036      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a5f      	ldr	r2, [pc, #380]	@ (8005ba0 <HAL_DMA_Init+0x1cc>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d031      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a5d      	ldr	r2, [pc, #372]	@ (8005ba4 <HAL_DMA_Init+0x1d0>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d02c      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a5c      	ldr	r2, [pc, #368]	@ (8005ba8 <HAL_DMA_Init+0x1d4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d027      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a5a      	ldr	r2, [pc, #360]	@ (8005bac <HAL_DMA_Init+0x1d8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d022      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a59      	ldr	r2, [pc, #356]	@ (8005bb0 <HAL_DMA_Init+0x1dc>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d01d      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a57      	ldr	r2, [pc, #348]	@ (8005bb4 <HAL_DMA_Init+0x1e0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d018      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a56      	ldr	r2, [pc, #344]	@ (8005bb8 <HAL_DMA_Init+0x1e4>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d013      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a54      	ldr	r2, [pc, #336]	@ (8005bbc <HAL_DMA_Init+0x1e8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00e      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a53      	ldr	r2, [pc, #332]	@ (8005bc0 <HAL_DMA_Init+0x1ec>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d009      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a51      	ldr	r2, [pc, #324]	@ (8005bc4 <HAL_DMA_Init+0x1f0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d004      	beq.n	8005a8c <HAL_DMA_Init+0xb8>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a50      	ldr	r2, [pc, #320]	@ (8005bc8 <HAL_DMA_Init+0x1f4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d101      	bne.n	8005a90 <HAL_DMA_Init+0xbc>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e000      	b.n	8005a92 <HAL_DMA_Init+0xbe>
 8005a90:	2300      	movs	r3, #0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 813c 	beq.w	8005d10 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a37      	ldr	r2, [pc, #220]	@ (8005b8c <HAL_DMA_Init+0x1b8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d04a      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a36      	ldr	r2, [pc, #216]	@ (8005b90 <HAL_DMA_Init+0x1bc>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d045      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a34      	ldr	r2, [pc, #208]	@ (8005b94 <HAL_DMA_Init+0x1c0>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d040      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a33      	ldr	r2, [pc, #204]	@ (8005b98 <HAL_DMA_Init+0x1c4>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d03b      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a31      	ldr	r2, [pc, #196]	@ (8005b9c <HAL_DMA_Init+0x1c8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d036      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a30      	ldr	r2, [pc, #192]	@ (8005ba0 <HAL_DMA_Init+0x1cc>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d031      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a2e      	ldr	r2, [pc, #184]	@ (8005ba4 <HAL_DMA_Init+0x1d0>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d02c      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a2d      	ldr	r2, [pc, #180]	@ (8005ba8 <HAL_DMA_Init+0x1d4>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d027      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a2b      	ldr	r2, [pc, #172]	@ (8005bac <HAL_DMA_Init+0x1d8>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d022      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a2a      	ldr	r2, [pc, #168]	@ (8005bb0 <HAL_DMA_Init+0x1dc>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d01d      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a28      	ldr	r2, [pc, #160]	@ (8005bb4 <HAL_DMA_Init+0x1e0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d018      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a27      	ldr	r2, [pc, #156]	@ (8005bb8 <HAL_DMA_Init+0x1e4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d013      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a25      	ldr	r2, [pc, #148]	@ (8005bbc <HAL_DMA_Init+0x1e8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00e      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a24      	ldr	r2, [pc, #144]	@ (8005bc0 <HAL_DMA_Init+0x1ec>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d009      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a22      	ldr	r2, [pc, #136]	@ (8005bc4 <HAL_DMA_Init+0x1f0>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d004      	beq.n	8005b48 <HAL_DMA_Init+0x174>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a21      	ldr	r2, [pc, #132]	@ (8005bc8 <HAL_DMA_Init+0x1f4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d108      	bne.n	8005b5a <HAL_DMA_Init+0x186>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0201 	bic.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	e007      	b.n	8005b6a <HAL_DMA_Init+0x196>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0201 	bic.w	r2, r2, #1
 8005b68:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b6a:	e02f      	b.n	8005bcc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b6c:	f7fd fd34 	bl	80035d8 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b05      	cmp	r3, #5
 8005b78:	d928      	bls.n	8005bcc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2203      	movs	r2, #3
 8005b84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e242      	b.n	8006012 <HAL_DMA_Init+0x63e>
 8005b8c:	40020010 	.word	0x40020010
 8005b90:	40020028 	.word	0x40020028
 8005b94:	40020040 	.word	0x40020040
 8005b98:	40020058 	.word	0x40020058
 8005b9c:	40020070 	.word	0x40020070
 8005ba0:	40020088 	.word	0x40020088
 8005ba4:	400200a0 	.word	0x400200a0
 8005ba8:	400200b8 	.word	0x400200b8
 8005bac:	40020410 	.word	0x40020410
 8005bb0:	40020428 	.word	0x40020428
 8005bb4:	40020440 	.word	0x40020440
 8005bb8:	40020458 	.word	0x40020458
 8005bbc:	40020470 	.word	0x40020470
 8005bc0:	40020488 	.word	0x40020488
 8005bc4:	400204a0 	.word	0x400204a0
 8005bc8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1c8      	bne.n	8005b6c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4b83      	ldr	r3, [pc, #524]	@ (8005df4 <HAL_DMA_Init+0x420>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005bf2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bfe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c0a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1c:	2b04      	cmp	r3, #4
 8005c1e:	d107      	bne.n	8005c30 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b28      	cmp	r3, #40	@ 0x28
 8005c36:	d903      	bls.n	8005c40 <HAL_DMA_Init+0x26c>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c3e:	d91f      	bls.n	8005c80 <HAL_DMA_Init+0x2ac>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c46:	d903      	bls.n	8005c50 <HAL_DMA_Init+0x27c>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b42      	cmp	r3, #66	@ 0x42
 8005c4e:	d917      	bls.n	8005c80 <HAL_DMA_Init+0x2ac>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2b46      	cmp	r3, #70	@ 0x46
 8005c56:	d903      	bls.n	8005c60 <HAL_DMA_Init+0x28c>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	2b48      	cmp	r3, #72	@ 0x48
 8005c5e:	d90f      	bls.n	8005c80 <HAL_DMA_Init+0x2ac>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	2b4e      	cmp	r3, #78	@ 0x4e
 8005c66:	d903      	bls.n	8005c70 <HAL_DMA_Init+0x29c>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	2b52      	cmp	r3, #82	@ 0x52
 8005c6e:	d907      	bls.n	8005c80 <HAL_DMA_Init+0x2ac>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	2b73      	cmp	r3, #115	@ 0x73
 8005c76:	d905      	bls.n	8005c84 <HAL_DMA_Init+0x2b0>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2b77      	cmp	r3, #119	@ 0x77
 8005c7e:	d801      	bhi.n	8005c84 <HAL_DMA_Init+0x2b0>
 8005c80:	2301      	movs	r3, #1
 8005c82:	e000      	b.n	8005c86 <HAL_DMA_Init+0x2b2>
 8005c84:	2300      	movs	r3, #0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c90:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f023 0307 	bic.w	r3, r3, #7
 8005ca8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d117      	bne.n	8005cec <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00e      	beq.n	8005cec <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f002 fb2e 	bl	8008330 <DMA_CheckFifoParam>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d008      	beq.n	8005cec <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2240      	movs	r2, #64	@ 0x40
 8005cde:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e192      	b.n	8006012 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f002 fa69 	bl	80081cc <DMA_CalcBaseAndBitshift>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d02:	f003 031f 	and.w	r3, r3, #31
 8005d06:	223f      	movs	r2, #63	@ 0x3f
 8005d08:	409a      	lsls	r2, r3
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	609a      	str	r2, [r3, #8]
 8005d0e:	e0c8      	b.n	8005ea2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a38      	ldr	r2, [pc, #224]	@ (8005df8 <HAL_DMA_Init+0x424>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d022      	beq.n	8005d60 <HAL_DMA_Init+0x38c>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a37      	ldr	r2, [pc, #220]	@ (8005dfc <HAL_DMA_Init+0x428>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d01d      	beq.n	8005d60 <HAL_DMA_Init+0x38c>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a35      	ldr	r2, [pc, #212]	@ (8005e00 <HAL_DMA_Init+0x42c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d018      	beq.n	8005d60 <HAL_DMA_Init+0x38c>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a34      	ldr	r2, [pc, #208]	@ (8005e04 <HAL_DMA_Init+0x430>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d013      	beq.n	8005d60 <HAL_DMA_Init+0x38c>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a32      	ldr	r2, [pc, #200]	@ (8005e08 <HAL_DMA_Init+0x434>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00e      	beq.n	8005d60 <HAL_DMA_Init+0x38c>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a31      	ldr	r2, [pc, #196]	@ (8005e0c <HAL_DMA_Init+0x438>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d009      	beq.n	8005d60 <HAL_DMA_Init+0x38c>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a2f      	ldr	r2, [pc, #188]	@ (8005e10 <HAL_DMA_Init+0x43c>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d004      	beq.n	8005d60 <HAL_DMA_Init+0x38c>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a2e      	ldr	r2, [pc, #184]	@ (8005e14 <HAL_DMA_Init+0x440>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d101      	bne.n	8005d64 <HAL_DMA_Init+0x390>
 8005d60:	2301      	movs	r3, #1
 8005d62:	e000      	b.n	8005d66 <HAL_DMA_Init+0x392>
 8005d64:	2300      	movs	r3, #0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 8092 	beq.w	8005e90 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a21      	ldr	r2, [pc, #132]	@ (8005df8 <HAL_DMA_Init+0x424>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d021      	beq.n	8005dba <HAL_DMA_Init+0x3e6>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a20      	ldr	r2, [pc, #128]	@ (8005dfc <HAL_DMA_Init+0x428>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d01c      	beq.n	8005dba <HAL_DMA_Init+0x3e6>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a1e      	ldr	r2, [pc, #120]	@ (8005e00 <HAL_DMA_Init+0x42c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d017      	beq.n	8005dba <HAL_DMA_Init+0x3e6>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a1d      	ldr	r2, [pc, #116]	@ (8005e04 <HAL_DMA_Init+0x430>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d012      	beq.n	8005dba <HAL_DMA_Init+0x3e6>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a1b      	ldr	r2, [pc, #108]	@ (8005e08 <HAL_DMA_Init+0x434>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d00d      	beq.n	8005dba <HAL_DMA_Init+0x3e6>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a1a      	ldr	r2, [pc, #104]	@ (8005e0c <HAL_DMA_Init+0x438>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d008      	beq.n	8005dba <HAL_DMA_Init+0x3e6>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a18      	ldr	r2, [pc, #96]	@ (8005e10 <HAL_DMA_Init+0x43c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d003      	beq.n	8005dba <HAL_DMA_Init+0x3e6>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a17      	ldr	r2, [pc, #92]	@ (8005e14 <HAL_DMA_Init+0x440>)
 8005db8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4b10      	ldr	r3, [pc, #64]	@ (8005e18 <HAL_DMA_Init+0x444>)
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	2b40      	cmp	r3, #64	@ 0x40
 8005de0:	d01c      	beq.n	8005e1c <HAL_DMA_Init+0x448>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b80      	cmp	r3, #128	@ 0x80
 8005de8:	d102      	bne.n	8005df0 <HAL_DMA_Init+0x41c>
 8005dea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005dee:	e016      	b.n	8005e1e <HAL_DMA_Init+0x44a>
 8005df0:	2300      	movs	r3, #0
 8005df2:	e014      	b.n	8005e1e <HAL_DMA_Init+0x44a>
 8005df4:	fe10803f 	.word	0xfe10803f
 8005df8:	58025408 	.word	0x58025408
 8005dfc:	5802541c 	.word	0x5802541c
 8005e00:	58025430 	.word	0x58025430
 8005e04:	58025444 	.word	0x58025444
 8005e08:	58025458 	.word	0x58025458
 8005e0c:	5802546c 	.word	0x5802546c
 8005e10:	58025480 	.word	0x58025480
 8005e14:	58025494 	.word	0x58025494
 8005e18:	fffe000f 	.word	0xfffe000f
 8005e1c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	68d2      	ldr	r2, [r2, #12]
 8005e22:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005e2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005e34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005e3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005e44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005e4c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	461a      	mov	r2, r3
 8005e62:	4b6e      	ldr	r3, [pc, #440]	@ (800601c <HAL_DMA_Init+0x648>)
 8005e64:	4413      	add	r3, r2
 8005e66:	4a6e      	ldr	r2, [pc, #440]	@ (8006020 <HAL_DMA_Init+0x64c>)
 8005e68:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6c:	091b      	lsrs	r3, r3, #4
 8005e6e:	009a      	lsls	r2, r3, #2
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f002 f9a9 	bl	80081cc <DMA_CalcBaseAndBitshift>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e82:	f003 031f 	and.w	r3, r3, #31
 8005e86:	2201      	movs	r2, #1
 8005e88:	409a      	lsls	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	605a      	str	r2, [r3, #4]
 8005e8e:	e008      	b.n	8005ea2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2240      	movs	r2, #64	@ 0x40
 8005e94:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2203      	movs	r2, #3
 8005e9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e0b7      	b.n	8006012 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a5f      	ldr	r2, [pc, #380]	@ (8006024 <HAL_DMA_Init+0x650>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d072      	beq.n	8005f92 <HAL_DMA_Init+0x5be>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a5d      	ldr	r2, [pc, #372]	@ (8006028 <HAL_DMA_Init+0x654>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d06d      	beq.n	8005f92 <HAL_DMA_Init+0x5be>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a5c      	ldr	r2, [pc, #368]	@ (800602c <HAL_DMA_Init+0x658>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d068      	beq.n	8005f92 <HAL_DMA_Init+0x5be>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a5a      	ldr	r2, [pc, #360]	@ (8006030 <HAL_DMA_Init+0x65c>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d063      	beq.n	8005f92 <HAL_DMA_Init+0x5be>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a59      	ldr	r2, [pc, #356]	@ (8006034 <HAL_DMA_Init+0x660>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d05e      	beq.n	8005f92 <HAL_DMA_Init+0x5be>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a57      	ldr	r2, [pc, #348]	@ (8006038 <HAL_DMA_Init+0x664>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d059      	beq.n	8005f92 <HAL_DMA_Init+0x5be>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a56      	ldr	r2, [pc, #344]	@ (800603c <HAL_DMA_Init+0x668>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d054      	beq.n	8005f92 <HAL_DMA_Init+0x5be>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a54      	ldr	r2, [pc, #336]	@ (8006040 <HAL_DMA_Init+0x66c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d04f      	beq.n	8005f92 <HAL_DMA_Init+0x5be>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a53      	ldr	r2, [pc, #332]	@ (8006044 <HAL_DMA_Init+0x670>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d04a      	beq.n	8005f92 <HAL_DMA_Init+0x5be>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a51      	ldr	r2, [pc, #324]	@ (8006048 <HAL_DMA_Init+0x674>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d045      	beq.n	8005f92 <HAL_DMA_Init+0x5be>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a50      	ldr	r2, [pc, #320]	@ (800604c <HAL_DMA_Init+0x678>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d040      	beq.n	8005f92 <HAL_DMA_Init+0x5be>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a4e      	ldr	r2, [pc, #312]	@ (8006050 <HAL_DMA_Init+0x67c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d03b      	beq.n	8005f92 <HAL_DMA_Init+0x5be>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a4d      	ldr	r2, [pc, #308]	@ (8006054 <HAL_DMA_Init+0x680>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d036      	beq.n	8005f92 <HAL_DMA_Init+0x5be>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a4b      	ldr	r2, [pc, #300]	@ (8006058 <HAL_DMA_Init+0x684>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d031      	beq.n	8005f92 <HAL_DMA_Init+0x5be>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a4a      	ldr	r2, [pc, #296]	@ (800605c <HAL_DMA_Init+0x688>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d02c      	beq.n	8005f92 <HAL_DMA_Init+0x5be>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a48      	ldr	r2, [pc, #288]	@ (8006060 <HAL_DMA_Init+0x68c>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d027      	beq.n	8005f92 <HAL_DMA_Init+0x5be>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a47      	ldr	r2, [pc, #284]	@ (8006064 <HAL_DMA_Init+0x690>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d022      	beq.n	8005f92 <HAL_DMA_Init+0x5be>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a45      	ldr	r2, [pc, #276]	@ (8006068 <HAL_DMA_Init+0x694>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d01d      	beq.n	8005f92 <HAL_DMA_Init+0x5be>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a44      	ldr	r2, [pc, #272]	@ (800606c <HAL_DMA_Init+0x698>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d018      	beq.n	8005f92 <HAL_DMA_Init+0x5be>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a42      	ldr	r2, [pc, #264]	@ (8006070 <HAL_DMA_Init+0x69c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d013      	beq.n	8005f92 <HAL_DMA_Init+0x5be>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a41      	ldr	r2, [pc, #260]	@ (8006074 <HAL_DMA_Init+0x6a0>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d00e      	beq.n	8005f92 <HAL_DMA_Init+0x5be>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a3f      	ldr	r2, [pc, #252]	@ (8006078 <HAL_DMA_Init+0x6a4>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d009      	beq.n	8005f92 <HAL_DMA_Init+0x5be>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a3e      	ldr	r2, [pc, #248]	@ (800607c <HAL_DMA_Init+0x6a8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d004      	beq.n	8005f92 <HAL_DMA_Init+0x5be>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a3c      	ldr	r2, [pc, #240]	@ (8006080 <HAL_DMA_Init+0x6ac>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d101      	bne.n	8005f96 <HAL_DMA_Init+0x5c2>
 8005f92:	2301      	movs	r3, #1
 8005f94:	e000      	b.n	8005f98 <HAL_DMA_Init+0x5c4>
 8005f96:	2300      	movs	r3, #0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d032      	beq.n	8006002 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f002 fa43 	bl	8008428 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	2b80      	cmp	r3, #128	@ 0x80
 8005fa8:	d102      	bne.n	8005fb0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fb8:	b2d2      	uxtb	r2, r2
 8005fba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005fc4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d010      	beq.n	8005ff0 <HAL_DMA_Init+0x61c>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	2b08      	cmp	r3, #8
 8005fd4:	d80c      	bhi.n	8005ff0 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f002 fac0 	bl	800855c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005fec:	605a      	str	r2, [r3, #4]
 8005fee:	e008      	b.n	8006002 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	a7fdabf8 	.word	0xa7fdabf8
 8006020:	cccccccd 	.word	0xcccccccd
 8006024:	40020010 	.word	0x40020010
 8006028:	40020028 	.word	0x40020028
 800602c:	40020040 	.word	0x40020040
 8006030:	40020058 	.word	0x40020058
 8006034:	40020070 	.word	0x40020070
 8006038:	40020088 	.word	0x40020088
 800603c:	400200a0 	.word	0x400200a0
 8006040:	400200b8 	.word	0x400200b8
 8006044:	40020410 	.word	0x40020410
 8006048:	40020428 	.word	0x40020428
 800604c:	40020440 	.word	0x40020440
 8006050:	40020458 	.word	0x40020458
 8006054:	40020470 	.word	0x40020470
 8006058:	40020488 	.word	0x40020488
 800605c:	400204a0 	.word	0x400204a0
 8006060:	400204b8 	.word	0x400204b8
 8006064:	58025408 	.word	0x58025408
 8006068:	5802541c 	.word	0x5802541c
 800606c:	58025430 	.word	0x58025430
 8006070:	58025444 	.word	0x58025444
 8006074:	58025458 	.word	0x58025458
 8006078:	5802546c 	.word	0x5802546c
 800607c:	58025480 	.word	0x58025480
 8006080:	58025494 	.word	0x58025494

08006084 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
 8006090:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e226      	b.n	80064ee <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d101      	bne.n	80060ae <HAL_DMA_Start_IT+0x2a>
 80060aa:	2302      	movs	r3, #2
 80060ac:	e21f      	b.n	80064ee <HAL_DMA_Start_IT+0x46a>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b01      	cmp	r3, #1
 80060c0:	f040 820a 	bne.w	80064d8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a68      	ldr	r2, [pc, #416]	@ (8006278 <HAL_DMA_Start_IT+0x1f4>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d04a      	beq.n	8006172 <HAL_DMA_Start_IT+0xee>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a66      	ldr	r2, [pc, #408]	@ (800627c <HAL_DMA_Start_IT+0x1f8>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d045      	beq.n	8006172 <HAL_DMA_Start_IT+0xee>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a65      	ldr	r2, [pc, #404]	@ (8006280 <HAL_DMA_Start_IT+0x1fc>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d040      	beq.n	8006172 <HAL_DMA_Start_IT+0xee>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a63      	ldr	r2, [pc, #396]	@ (8006284 <HAL_DMA_Start_IT+0x200>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d03b      	beq.n	8006172 <HAL_DMA_Start_IT+0xee>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a62      	ldr	r2, [pc, #392]	@ (8006288 <HAL_DMA_Start_IT+0x204>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d036      	beq.n	8006172 <HAL_DMA_Start_IT+0xee>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a60      	ldr	r2, [pc, #384]	@ (800628c <HAL_DMA_Start_IT+0x208>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d031      	beq.n	8006172 <HAL_DMA_Start_IT+0xee>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a5f      	ldr	r2, [pc, #380]	@ (8006290 <HAL_DMA_Start_IT+0x20c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d02c      	beq.n	8006172 <HAL_DMA_Start_IT+0xee>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a5d      	ldr	r2, [pc, #372]	@ (8006294 <HAL_DMA_Start_IT+0x210>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d027      	beq.n	8006172 <HAL_DMA_Start_IT+0xee>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a5c      	ldr	r2, [pc, #368]	@ (8006298 <HAL_DMA_Start_IT+0x214>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d022      	beq.n	8006172 <HAL_DMA_Start_IT+0xee>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a5a      	ldr	r2, [pc, #360]	@ (800629c <HAL_DMA_Start_IT+0x218>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d01d      	beq.n	8006172 <HAL_DMA_Start_IT+0xee>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a59      	ldr	r2, [pc, #356]	@ (80062a0 <HAL_DMA_Start_IT+0x21c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d018      	beq.n	8006172 <HAL_DMA_Start_IT+0xee>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a57      	ldr	r2, [pc, #348]	@ (80062a4 <HAL_DMA_Start_IT+0x220>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d013      	beq.n	8006172 <HAL_DMA_Start_IT+0xee>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a56      	ldr	r2, [pc, #344]	@ (80062a8 <HAL_DMA_Start_IT+0x224>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d00e      	beq.n	8006172 <HAL_DMA_Start_IT+0xee>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a54      	ldr	r2, [pc, #336]	@ (80062ac <HAL_DMA_Start_IT+0x228>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d009      	beq.n	8006172 <HAL_DMA_Start_IT+0xee>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a53      	ldr	r2, [pc, #332]	@ (80062b0 <HAL_DMA_Start_IT+0x22c>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d004      	beq.n	8006172 <HAL_DMA_Start_IT+0xee>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a51      	ldr	r2, [pc, #324]	@ (80062b4 <HAL_DMA_Start_IT+0x230>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d108      	bne.n	8006184 <HAL_DMA_Start_IT+0x100>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0201 	bic.w	r2, r2, #1
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	e007      	b.n	8006194 <HAL_DMA_Start_IT+0x110>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 0201 	bic.w	r2, r2, #1
 8006192:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	68b9      	ldr	r1, [r7, #8]
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f001 fe6a 	bl	8007e74 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a34      	ldr	r2, [pc, #208]	@ (8006278 <HAL_DMA_Start_IT+0x1f4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d04a      	beq.n	8006240 <HAL_DMA_Start_IT+0x1bc>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a33      	ldr	r2, [pc, #204]	@ (800627c <HAL_DMA_Start_IT+0x1f8>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d045      	beq.n	8006240 <HAL_DMA_Start_IT+0x1bc>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a31      	ldr	r2, [pc, #196]	@ (8006280 <HAL_DMA_Start_IT+0x1fc>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d040      	beq.n	8006240 <HAL_DMA_Start_IT+0x1bc>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a30      	ldr	r2, [pc, #192]	@ (8006284 <HAL_DMA_Start_IT+0x200>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d03b      	beq.n	8006240 <HAL_DMA_Start_IT+0x1bc>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a2e      	ldr	r2, [pc, #184]	@ (8006288 <HAL_DMA_Start_IT+0x204>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d036      	beq.n	8006240 <HAL_DMA_Start_IT+0x1bc>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a2d      	ldr	r2, [pc, #180]	@ (800628c <HAL_DMA_Start_IT+0x208>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d031      	beq.n	8006240 <HAL_DMA_Start_IT+0x1bc>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a2b      	ldr	r2, [pc, #172]	@ (8006290 <HAL_DMA_Start_IT+0x20c>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d02c      	beq.n	8006240 <HAL_DMA_Start_IT+0x1bc>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a2a      	ldr	r2, [pc, #168]	@ (8006294 <HAL_DMA_Start_IT+0x210>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d027      	beq.n	8006240 <HAL_DMA_Start_IT+0x1bc>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a28      	ldr	r2, [pc, #160]	@ (8006298 <HAL_DMA_Start_IT+0x214>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d022      	beq.n	8006240 <HAL_DMA_Start_IT+0x1bc>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a27      	ldr	r2, [pc, #156]	@ (800629c <HAL_DMA_Start_IT+0x218>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d01d      	beq.n	8006240 <HAL_DMA_Start_IT+0x1bc>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a25      	ldr	r2, [pc, #148]	@ (80062a0 <HAL_DMA_Start_IT+0x21c>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d018      	beq.n	8006240 <HAL_DMA_Start_IT+0x1bc>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a24      	ldr	r2, [pc, #144]	@ (80062a4 <HAL_DMA_Start_IT+0x220>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d013      	beq.n	8006240 <HAL_DMA_Start_IT+0x1bc>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a22      	ldr	r2, [pc, #136]	@ (80062a8 <HAL_DMA_Start_IT+0x224>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d00e      	beq.n	8006240 <HAL_DMA_Start_IT+0x1bc>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a21      	ldr	r2, [pc, #132]	@ (80062ac <HAL_DMA_Start_IT+0x228>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d009      	beq.n	8006240 <HAL_DMA_Start_IT+0x1bc>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a1f      	ldr	r2, [pc, #124]	@ (80062b0 <HAL_DMA_Start_IT+0x22c>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d004      	beq.n	8006240 <HAL_DMA_Start_IT+0x1bc>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a1e      	ldr	r2, [pc, #120]	@ (80062b4 <HAL_DMA_Start_IT+0x230>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d101      	bne.n	8006244 <HAL_DMA_Start_IT+0x1c0>
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <HAL_DMA_Start_IT+0x1c2>
 8006244:	2300      	movs	r3, #0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d036      	beq.n	80062b8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f023 021e 	bic.w	r2, r3, #30
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f042 0216 	orr.w	r2, r2, #22
 800625c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	d03e      	beq.n	80062e4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f042 0208 	orr.w	r2, r2, #8
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	e035      	b.n	80062e4 <HAL_DMA_Start_IT+0x260>
 8006278:	40020010 	.word	0x40020010
 800627c:	40020028 	.word	0x40020028
 8006280:	40020040 	.word	0x40020040
 8006284:	40020058 	.word	0x40020058
 8006288:	40020070 	.word	0x40020070
 800628c:	40020088 	.word	0x40020088
 8006290:	400200a0 	.word	0x400200a0
 8006294:	400200b8 	.word	0x400200b8
 8006298:	40020410 	.word	0x40020410
 800629c:	40020428 	.word	0x40020428
 80062a0:	40020440 	.word	0x40020440
 80062a4:	40020458 	.word	0x40020458
 80062a8:	40020470 	.word	0x40020470
 80062ac:	40020488 	.word	0x40020488
 80062b0:	400204a0 	.word	0x400204a0
 80062b4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f023 020e 	bic.w	r2, r3, #14
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f042 020a 	orr.w	r2, r2, #10
 80062ca:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d007      	beq.n	80062e4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f042 0204 	orr.w	r2, r2, #4
 80062e2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a83      	ldr	r2, [pc, #524]	@ (80064f8 <HAL_DMA_Start_IT+0x474>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d072      	beq.n	80063d4 <HAL_DMA_Start_IT+0x350>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a82      	ldr	r2, [pc, #520]	@ (80064fc <HAL_DMA_Start_IT+0x478>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d06d      	beq.n	80063d4 <HAL_DMA_Start_IT+0x350>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a80      	ldr	r2, [pc, #512]	@ (8006500 <HAL_DMA_Start_IT+0x47c>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d068      	beq.n	80063d4 <HAL_DMA_Start_IT+0x350>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a7f      	ldr	r2, [pc, #508]	@ (8006504 <HAL_DMA_Start_IT+0x480>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d063      	beq.n	80063d4 <HAL_DMA_Start_IT+0x350>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a7d      	ldr	r2, [pc, #500]	@ (8006508 <HAL_DMA_Start_IT+0x484>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d05e      	beq.n	80063d4 <HAL_DMA_Start_IT+0x350>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a7c      	ldr	r2, [pc, #496]	@ (800650c <HAL_DMA_Start_IT+0x488>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d059      	beq.n	80063d4 <HAL_DMA_Start_IT+0x350>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a7a      	ldr	r2, [pc, #488]	@ (8006510 <HAL_DMA_Start_IT+0x48c>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d054      	beq.n	80063d4 <HAL_DMA_Start_IT+0x350>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a79      	ldr	r2, [pc, #484]	@ (8006514 <HAL_DMA_Start_IT+0x490>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d04f      	beq.n	80063d4 <HAL_DMA_Start_IT+0x350>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a77      	ldr	r2, [pc, #476]	@ (8006518 <HAL_DMA_Start_IT+0x494>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d04a      	beq.n	80063d4 <HAL_DMA_Start_IT+0x350>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a76      	ldr	r2, [pc, #472]	@ (800651c <HAL_DMA_Start_IT+0x498>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d045      	beq.n	80063d4 <HAL_DMA_Start_IT+0x350>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a74      	ldr	r2, [pc, #464]	@ (8006520 <HAL_DMA_Start_IT+0x49c>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d040      	beq.n	80063d4 <HAL_DMA_Start_IT+0x350>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a73      	ldr	r2, [pc, #460]	@ (8006524 <HAL_DMA_Start_IT+0x4a0>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d03b      	beq.n	80063d4 <HAL_DMA_Start_IT+0x350>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a71      	ldr	r2, [pc, #452]	@ (8006528 <HAL_DMA_Start_IT+0x4a4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d036      	beq.n	80063d4 <HAL_DMA_Start_IT+0x350>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a70      	ldr	r2, [pc, #448]	@ (800652c <HAL_DMA_Start_IT+0x4a8>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d031      	beq.n	80063d4 <HAL_DMA_Start_IT+0x350>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a6e      	ldr	r2, [pc, #440]	@ (8006530 <HAL_DMA_Start_IT+0x4ac>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d02c      	beq.n	80063d4 <HAL_DMA_Start_IT+0x350>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a6d      	ldr	r2, [pc, #436]	@ (8006534 <HAL_DMA_Start_IT+0x4b0>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d027      	beq.n	80063d4 <HAL_DMA_Start_IT+0x350>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a6b      	ldr	r2, [pc, #428]	@ (8006538 <HAL_DMA_Start_IT+0x4b4>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d022      	beq.n	80063d4 <HAL_DMA_Start_IT+0x350>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a6a      	ldr	r2, [pc, #424]	@ (800653c <HAL_DMA_Start_IT+0x4b8>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d01d      	beq.n	80063d4 <HAL_DMA_Start_IT+0x350>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a68      	ldr	r2, [pc, #416]	@ (8006540 <HAL_DMA_Start_IT+0x4bc>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d018      	beq.n	80063d4 <HAL_DMA_Start_IT+0x350>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a67      	ldr	r2, [pc, #412]	@ (8006544 <HAL_DMA_Start_IT+0x4c0>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d013      	beq.n	80063d4 <HAL_DMA_Start_IT+0x350>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a65      	ldr	r2, [pc, #404]	@ (8006548 <HAL_DMA_Start_IT+0x4c4>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d00e      	beq.n	80063d4 <HAL_DMA_Start_IT+0x350>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a64      	ldr	r2, [pc, #400]	@ (800654c <HAL_DMA_Start_IT+0x4c8>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d009      	beq.n	80063d4 <HAL_DMA_Start_IT+0x350>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a62      	ldr	r2, [pc, #392]	@ (8006550 <HAL_DMA_Start_IT+0x4cc>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d004      	beq.n	80063d4 <HAL_DMA_Start_IT+0x350>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a61      	ldr	r2, [pc, #388]	@ (8006554 <HAL_DMA_Start_IT+0x4d0>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d101      	bne.n	80063d8 <HAL_DMA_Start_IT+0x354>
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <HAL_DMA_Start_IT+0x356>
 80063d8:	2300      	movs	r3, #0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d01a      	beq.n	8006414 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d007      	beq.n	80063fc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063fa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006400:	2b00      	cmp	r3, #0
 8006402:	d007      	beq.n	8006414 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800640e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006412:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a37      	ldr	r2, [pc, #220]	@ (80064f8 <HAL_DMA_Start_IT+0x474>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d04a      	beq.n	80064b4 <HAL_DMA_Start_IT+0x430>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a36      	ldr	r2, [pc, #216]	@ (80064fc <HAL_DMA_Start_IT+0x478>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d045      	beq.n	80064b4 <HAL_DMA_Start_IT+0x430>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a34      	ldr	r2, [pc, #208]	@ (8006500 <HAL_DMA_Start_IT+0x47c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d040      	beq.n	80064b4 <HAL_DMA_Start_IT+0x430>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a33      	ldr	r2, [pc, #204]	@ (8006504 <HAL_DMA_Start_IT+0x480>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d03b      	beq.n	80064b4 <HAL_DMA_Start_IT+0x430>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a31      	ldr	r2, [pc, #196]	@ (8006508 <HAL_DMA_Start_IT+0x484>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d036      	beq.n	80064b4 <HAL_DMA_Start_IT+0x430>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a30      	ldr	r2, [pc, #192]	@ (800650c <HAL_DMA_Start_IT+0x488>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d031      	beq.n	80064b4 <HAL_DMA_Start_IT+0x430>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a2e      	ldr	r2, [pc, #184]	@ (8006510 <HAL_DMA_Start_IT+0x48c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d02c      	beq.n	80064b4 <HAL_DMA_Start_IT+0x430>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a2d      	ldr	r2, [pc, #180]	@ (8006514 <HAL_DMA_Start_IT+0x490>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d027      	beq.n	80064b4 <HAL_DMA_Start_IT+0x430>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a2b      	ldr	r2, [pc, #172]	@ (8006518 <HAL_DMA_Start_IT+0x494>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d022      	beq.n	80064b4 <HAL_DMA_Start_IT+0x430>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a2a      	ldr	r2, [pc, #168]	@ (800651c <HAL_DMA_Start_IT+0x498>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d01d      	beq.n	80064b4 <HAL_DMA_Start_IT+0x430>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a28      	ldr	r2, [pc, #160]	@ (8006520 <HAL_DMA_Start_IT+0x49c>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d018      	beq.n	80064b4 <HAL_DMA_Start_IT+0x430>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a27      	ldr	r2, [pc, #156]	@ (8006524 <HAL_DMA_Start_IT+0x4a0>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d013      	beq.n	80064b4 <HAL_DMA_Start_IT+0x430>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a25      	ldr	r2, [pc, #148]	@ (8006528 <HAL_DMA_Start_IT+0x4a4>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d00e      	beq.n	80064b4 <HAL_DMA_Start_IT+0x430>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a24      	ldr	r2, [pc, #144]	@ (800652c <HAL_DMA_Start_IT+0x4a8>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d009      	beq.n	80064b4 <HAL_DMA_Start_IT+0x430>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a22      	ldr	r2, [pc, #136]	@ (8006530 <HAL_DMA_Start_IT+0x4ac>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d004      	beq.n	80064b4 <HAL_DMA_Start_IT+0x430>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a21      	ldr	r2, [pc, #132]	@ (8006534 <HAL_DMA_Start_IT+0x4b0>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d108      	bne.n	80064c6 <HAL_DMA_Start_IT+0x442>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0201 	orr.w	r2, r2, #1
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	e012      	b.n	80064ec <HAL_DMA_Start_IT+0x468>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 0201 	orr.w	r2, r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	e009      	b.n	80064ec <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064de:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80064ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	40020010 	.word	0x40020010
 80064fc:	40020028 	.word	0x40020028
 8006500:	40020040 	.word	0x40020040
 8006504:	40020058 	.word	0x40020058
 8006508:	40020070 	.word	0x40020070
 800650c:	40020088 	.word	0x40020088
 8006510:	400200a0 	.word	0x400200a0
 8006514:	400200b8 	.word	0x400200b8
 8006518:	40020410 	.word	0x40020410
 800651c:	40020428 	.word	0x40020428
 8006520:	40020440 	.word	0x40020440
 8006524:	40020458 	.word	0x40020458
 8006528:	40020470 	.word	0x40020470
 800652c:	40020488 	.word	0x40020488
 8006530:	400204a0 	.word	0x400204a0
 8006534:	400204b8 	.word	0x400204b8
 8006538:	58025408 	.word	0x58025408
 800653c:	5802541c 	.word	0x5802541c
 8006540:	58025430 	.word	0x58025430
 8006544:	58025444 	.word	0x58025444
 8006548:	58025458 	.word	0x58025458
 800654c:	5802546c 	.word	0x5802546c
 8006550:	58025480 	.word	0x58025480
 8006554:	58025494 	.word	0x58025494

08006558 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006560:	f7fd f83a 	bl	80035d8 <HAL_GetTick>
 8006564:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e2dc      	b.n	8006b2a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d008      	beq.n	800658e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2280      	movs	r2, #128	@ 0x80
 8006580:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e2cd      	b.n	8006b2a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a76      	ldr	r2, [pc, #472]	@ (800676c <HAL_DMA_Abort+0x214>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d04a      	beq.n	800662e <HAL_DMA_Abort+0xd6>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a74      	ldr	r2, [pc, #464]	@ (8006770 <HAL_DMA_Abort+0x218>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d045      	beq.n	800662e <HAL_DMA_Abort+0xd6>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a73      	ldr	r2, [pc, #460]	@ (8006774 <HAL_DMA_Abort+0x21c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d040      	beq.n	800662e <HAL_DMA_Abort+0xd6>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a71      	ldr	r2, [pc, #452]	@ (8006778 <HAL_DMA_Abort+0x220>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d03b      	beq.n	800662e <HAL_DMA_Abort+0xd6>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a70      	ldr	r2, [pc, #448]	@ (800677c <HAL_DMA_Abort+0x224>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d036      	beq.n	800662e <HAL_DMA_Abort+0xd6>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a6e      	ldr	r2, [pc, #440]	@ (8006780 <HAL_DMA_Abort+0x228>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d031      	beq.n	800662e <HAL_DMA_Abort+0xd6>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a6d      	ldr	r2, [pc, #436]	@ (8006784 <HAL_DMA_Abort+0x22c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d02c      	beq.n	800662e <HAL_DMA_Abort+0xd6>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a6b      	ldr	r2, [pc, #428]	@ (8006788 <HAL_DMA_Abort+0x230>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d027      	beq.n	800662e <HAL_DMA_Abort+0xd6>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a6a      	ldr	r2, [pc, #424]	@ (800678c <HAL_DMA_Abort+0x234>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d022      	beq.n	800662e <HAL_DMA_Abort+0xd6>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a68      	ldr	r2, [pc, #416]	@ (8006790 <HAL_DMA_Abort+0x238>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d01d      	beq.n	800662e <HAL_DMA_Abort+0xd6>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a67      	ldr	r2, [pc, #412]	@ (8006794 <HAL_DMA_Abort+0x23c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d018      	beq.n	800662e <HAL_DMA_Abort+0xd6>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a65      	ldr	r2, [pc, #404]	@ (8006798 <HAL_DMA_Abort+0x240>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d013      	beq.n	800662e <HAL_DMA_Abort+0xd6>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a64      	ldr	r2, [pc, #400]	@ (800679c <HAL_DMA_Abort+0x244>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d00e      	beq.n	800662e <HAL_DMA_Abort+0xd6>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a62      	ldr	r2, [pc, #392]	@ (80067a0 <HAL_DMA_Abort+0x248>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d009      	beq.n	800662e <HAL_DMA_Abort+0xd6>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a61      	ldr	r2, [pc, #388]	@ (80067a4 <HAL_DMA_Abort+0x24c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d004      	beq.n	800662e <HAL_DMA_Abort+0xd6>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a5f      	ldr	r2, [pc, #380]	@ (80067a8 <HAL_DMA_Abort+0x250>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d101      	bne.n	8006632 <HAL_DMA_Abort+0xda>
 800662e:	2301      	movs	r3, #1
 8006630:	e000      	b.n	8006634 <HAL_DMA_Abort+0xdc>
 8006632:	2300      	movs	r3, #0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d013      	beq.n	8006660 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 021e 	bic.w	r2, r2, #30
 8006646:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	695a      	ldr	r2, [r3, #20]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006656:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	617b      	str	r3, [r7, #20]
 800665e:	e00a      	b.n	8006676 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 020e 	bic.w	r2, r2, #14
 800666e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a3c      	ldr	r2, [pc, #240]	@ (800676c <HAL_DMA_Abort+0x214>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d072      	beq.n	8006766 <HAL_DMA_Abort+0x20e>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a3a      	ldr	r2, [pc, #232]	@ (8006770 <HAL_DMA_Abort+0x218>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d06d      	beq.n	8006766 <HAL_DMA_Abort+0x20e>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a39      	ldr	r2, [pc, #228]	@ (8006774 <HAL_DMA_Abort+0x21c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d068      	beq.n	8006766 <HAL_DMA_Abort+0x20e>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a37      	ldr	r2, [pc, #220]	@ (8006778 <HAL_DMA_Abort+0x220>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d063      	beq.n	8006766 <HAL_DMA_Abort+0x20e>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a36      	ldr	r2, [pc, #216]	@ (800677c <HAL_DMA_Abort+0x224>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d05e      	beq.n	8006766 <HAL_DMA_Abort+0x20e>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a34      	ldr	r2, [pc, #208]	@ (8006780 <HAL_DMA_Abort+0x228>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d059      	beq.n	8006766 <HAL_DMA_Abort+0x20e>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a33      	ldr	r2, [pc, #204]	@ (8006784 <HAL_DMA_Abort+0x22c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d054      	beq.n	8006766 <HAL_DMA_Abort+0x20e>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a31      	ldr	r2, [pc, #196]	@ (8006788 <HAL_DMA_Abort+0x230>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d04f      	beq.n	8006766 <HAL_DMA_Abort+0x20e>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a30      	ldr	r2, [pc, #192]	@ (800678c <HAL_DMA_Abort+0x234>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d04a      	beq.n	8006766 <HAL_DMA_Abort+0x20e>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006790 <HAL_DMA_Abort+0x238>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d045      	beq.n	8006766 <HAL_DMA_Abort+0x20e>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a2d      	ldr	r2, [pc, #180]	@ (8006794 <HAL_DMA_Abort+0x23c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d040      	beq.n	8006766 <HAL_DMA_Abort+0x20e>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a2b      	ldr	r2, [pc, #172]	@ (8006798 <HAL_DMA_Abort+0x240>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d03b      	beq.n	8006766 <HAL_DMA_Abort+0x20e>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a2a      	ldr	r2, [pc, #168]	@ (800679c <HAL_DMA_Abort+0x244>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d036      	beq.n	8006766 <HAL_DMA_Abort+0x20e>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a28      	ldr	r2, [pc, #160]	@ (80067a0 <HAL_DMA_Abort+0x248>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d031      	beq.n	8006766 <HAL_DMA_Abort+0x20e>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a27      	ldr	r2, [pc, #156]	@ (80067a4 <HAL_DMA_Abort+0x24c>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d02c      	beq.n	8006766 <HAL_DMA_Abort+0x20e>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a25      	ldr	r2, [pc, #148]	@ (80067a8 <HAL_DMA_Abort+0x250>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d027      	beq.n	8006766 <HAL_DMA_Abort+0x20e>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a24      	ldr	r2, [pc, #144]	@ (80067ac <HAL_DMA_Abort+0x254>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d022      	beq.n	8006766 <HAL_DMA_Abort+0x20e>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a22      	ldr	r2, [pc, #136]	@ (80067b0 <HAL_DMA_Abort+0x258>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d01d      	beq.n	8006766 <HAL_DMA_Abort+0x20e>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a21      	ldr	r2, [pc, #132]	@ (80067b4 <HAL_DMA_Abort+0x25c>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d018      	beq.n	8006766 <HAL_DMA_Abort+0x20e>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a1f      	ldr	r2, [pc, #124]	@ (80067b8 <HAL_DMA_Abort+0x260>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d013      	beq.n	8006766 <HAL_DMA_Abort+0x20e>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a1e      	ldr	r2, [pc, #120]	@ (80067bc <HAL_DMA_Abort+0x264>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d00e      	beq.n	8006766 <HAL_DMA_Abort+0x20e>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a1c      	ldr	r2, [pc, #112]	@ (80067c0 <HAL_DMA_Abort+0x268>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d009      	beq.n	8006766 <HAL_DMA_Abort+0x20e>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a1b      	ldr	r2, [pc, #108]	@ (80067c4 <HAL_DMA_Abort+0x26c>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d004      	beq.n	8006766 <HAL_DMA_Abort+0x20e>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a19      	ldr	r2, [pc, #100]	@ (80067c8 <HAL_DMA_Abort+0x270>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d132      	bne.n	80067cc <HAL_DMA_Abort+0x274>
 8006766:	2301      	movs	r3, #1
 8006768:	e031      	b.n	80067ce <HAL_DMA_Abort+0x276>
 800676a:	bf00      	nop
 800676c:	40020010 	.word	0x40020010
 8006770:	40020028 	.word	0x40020028
 8006774:	40020040 	.word	0x40020040
 8006778:	40020058 	.word	0x40020058
 800677c:	40020070 	.word	0x40020070
 8006780:	40020088 	.word	0x40020088
 8006784:	400200a0 	.word	0x400200a0
 8006788:	400200b8 	.word	0x400200b8
 800678c:	40020410 	.word	0x40020410
 8006790:	40020428 	.word	0x40020428
 8006794:	40020440 	.word	0x40020440
 8006798:	40020458 	.word	0x40020458
 800679c:	40020470 	.word	0x40020470
 80067a0:	40020488 	.word	0x40020488
 80067a4:	400204a0 	.word	0x400204a0
 80067a8:	400204b8 	.word	0x400204b8
 80067ac:	58025408 	.word	0x58025408
 80067b0:	5802541c 	.word	0x5802541c
 80067b4:	58025430 	.word	0x58025430
 80067b8:	58025444 	.word	0x58025444
 80067bc:	58025458 	.word	0x58025458
 80067c0:	5802546c 	.word	0x5802546c
 80067c4:	58025480 	.word	0x58025480
 80067c8:	58025494 	.word	0x58025494
 80067cc:	2300      	movs	r3, #0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d007      	beq.n	80067e2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a6d      	ldr	r2, [pc, #436]	@ (800699c <HAL_DMA_Abort+0x444>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d04a      	beq.n	8006882 <HAL_DMA_Abort+0x32a>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a6b      	ldr	r2, [pc, #428]	@ (80069a0 <HAL_DMA_Abort+0x448>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d045      	beq.n	8006882 <HAL_DMA_Abort+0x32a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a6a      	ldr	r2, [pc, #424]	@ (80069a4 <HAL_DMA_Abort+0x44c>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d040      	beq.n	8006882 <HAL_DMA_Abort+0x32a>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a68      	ldr	r2, [pc, #416]	@ (80069a8 <HAL_DMA_Abort+0x450>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d03b      	beq.n	8006882 <HAL_DMA_Abort+0x32a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a67      	ldr	r2, [pc, #412]	@ (80069ac <HAL_DMA_Abort+0x454>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d036      	beq.n	8006882 <HAL_DMA_Abort+0x32a>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a65      	ldr	r2, [pc, #404]	@ (80069b0 <HAL_DMA_Abort+0x458>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d031      	beq.n	8006882 <HAL_DMA_Abort+0x32a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a64      	ldr	r2, [pc, #400]	@ (80069b4 <HAL_DMA_Abort+0x45c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d02c      	beq.n	8006882 <HAL_DMA_Abort+0x32a>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a62      	ldr	r2, [pc, #392]	@ (80069b8 <HAL_DMA_Abort+0x460>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d027      	beq.n	8006882 <HAL_DMA_Abort+0x32a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a61      	ldr	r2, [pc, #388]	@ (80069bc <HAL_DMA_Abort+0x464>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d022      	beq.n	8006882 <HAL_DMA_Abort+0x32a>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a5f      	ldr	r2, [pc, #380]	@ (80069c0 <HAL_DMA_Abort+0x468>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d01d      	beq.n	8006882 <HAL_DMA_Abort+0x32a>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a5e      	ldr	r2, [pc, #376]	@ (80069c4 <HAL_DMA_Abort+0x46c>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d018      	beq.n	8006882 <HAL_DMA_Abort+0x32a>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a5c      	ldr	r2, [pc, #368]	@ (80069c8 <HAL_DMA_Abort+0x470>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d013      	beq.n	8006882 <HAL_DMA_Abort+0x32a>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a5b      	ldr	r2, [pc, #364]	@ (80069cc <HAL_DMA_Abort+0x474>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d00e      	beq.n	8006882 <HAL_DMA_Abort+0x32a>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a59      	ldr	r2, [pc, #356]	@ (80069d0 <HAL_DMA_Abort+0x478>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d009      	beq.n	8006882 <HAL_DMA_Abort+0x32a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a58      	ldr	r2, [pc, #352]	@ (80069d4 <HAL_DMA_Abort+0x47c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d004      	beq.n	8006882 <HAL_DMA_Abort+0x32a>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a56      	ldr	r2, [pc, #344]	@ (80069d8 <HAL_DMA_Abort+0x480>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d108      	bne.n	8006894 <HAL_DMA_Abort+0x33c>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0201 	bic.w	r2, r2, #1
 8006890:	601a      	str	r2, [r3, #0]
 8006892:	e007      	b.n	80068a4 <HAL_DMA_Abort+0x34c>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0201 	bic.w	r2, r2, #1
 80068a2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80068a4:	e013      	b.n	80068ce <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80068a6:	f7fc fe97 	bl	80035d8 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	2b05      	cmp	r3, #5
 80068b2:	d90c      	bls.n	80068ce <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2220      	movs	r2, #32
 80068b8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2203      	movs	r2, #3
 80068be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e12d      	b.n	8006b2a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e5      	bne.n	80068a6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a2f      	ldr	r2, [pc, #188]	@ (800699c <HAL_DMA_Abort+0x444>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d04a      	beq.n	800697a <HAL_DMA_Abort+0x422>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a2d      	ldr	r2, [pc, #180]	@ (80069a0 <HAL_DMA_Abort+0x448>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d045      	beq.n	800697a <HAL_DMA_Abort+0x422>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a2c      	ldr	r2, [pc, #176]	@ (80069a4 <HAL_DMA_Abort+0x44c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d040      	beq.n	800697a <HAL_DMA_Abort+0x422>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a2a      	ldr	r2, [pc, #168]	@ (80069a8 <HAL_DMA_Abort+0x450>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d03b      	beq.n	800697a <HAL_DMA_Abort+0x422>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a29      	ldr	r2, [pc, #164]	@ (80069ac <HAL_DMA_Abort+0x454>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d036      	beq.n	800697a <HAL_DMA_Abort+0x422>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a27      	ldr	r2, [pc, #156]	@ (80069b0 <HAL_DMA_Abort+0x458>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d031      	beq.n	800697a <HAL_DMA_Abort+0x422>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a26      	ldr	r2, [pc, #152]	@ (80069b4 <HAL_DMA_Abort+0x45c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d02c      	beq.n	800697a <HAL_DMA_Abort+0x422>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a24      	ldr	r2, [pc, #144]	@ (80069b8 <HAL_DMA_Abort+0x460>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d027      	beq.n	800697a <HAL_DMA_Abort+0x422>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a23      	ldr	r2, [pc, #140]	@ (80069bc <HAL_DMA_Abort+0x464>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d022      	beq.n	800697a <HAL_DMA_Abort+0x422>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a21      	ldr	r2, [pc, #132]	@ (80069c0 <HAL_DMA_Abort+0x468>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d01d      	beq.n	800697a <HAL_DMA_Abort+0x422>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a20      	ldr	r2, [pc, #128]	@ (80069c4 <HAL_DMA_Abort+0x46c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d018      	beq.n	800697a <HAL_DMA_Abort+0x422>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1e      	ldr	r2, [pc, #120]	@ (80069c8 <HAL_DMA_Abort+0x470>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d013      	beq.n	800697a <HAL_DMA_Abort+0x422>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a1d      	ldr	r2, [pc, #116]	@ (80069cc <HAL_DMA_Abort+0x474>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d00e      	beq.n	800697a <HAL_DMA_Abort+0x422>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a1b      	ldr	r2, [pc, #108]	@ (80069d0 <HAL_DMA_Abort+0x478>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d009      	beq.n	800697a <HAL_DMA_Abort+0x422>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a1a      	ldr	r2, [pc, #104]	@ (80069d4 <HAL_DMA_Abort+0x47c>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d004      	beq.n	800697a <HAL_DMA_Abort+0x422>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a18      	ldr	r2, [pc, #96]	@ (80069d8 <HAL_DMA_Abort+0x480>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d101      	bne.n	800697e <HAL_DMA_Abort+0x426>
 800697a:	2301      	movs	r3, #1
 800697c:	e000      	b.n	8006980 <HAL_DMA_Abort+0x428>
 800697e:	2300      	movs	r3, #0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d02b      	beq.n	80069dc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006988:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800698e:	f003 031f 	and.w	r3, r3, #31
 8006992:	223f      	movs	r2, #63	@ 0x3f
 8006994:	409a      	lsls	r2, r3
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	609a      	str	r2, [r3, #8]
 800699a:	e02a      	b.n	80069f2 <HAL_DMA_Abort+0x49a>
 800699c:	40020010 	.word	0x40020010
 80069a0:	40020028 	.word	0x40020028
 80069a4:	40020040 	.word	0x40020040
 80069a8:	40020058 	.word	0x40020058
 80069ac:	40020070 	.word	0x40020070
 80069b0:	40020088 	.word	0x40020088
 80069b4:	400200a0 	.word	0x400200a0
 80069b8:	400200b8 	.word	0x400200b8
 80069bc:	40020410 	.word	0x40020410
 80069c0:	40020428 	.word	0x40020428
 80069c4:	40020440 	.word	0x40020440
 80069c8:	40020458 	.word	0x40020458
 80069cc:	40020470 	.word	0x40020470
 80069d0:	40020488 	.word	0x40020488
 80069d4:	400204a0 	.word	0x400204a0
 80069d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069e0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069e6:	f003 031f 	and.w	r3, r3, #31
 80069ea:	2201      	movs	r2, #1
 80069ec:	409a      	lsls	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a4f      	ldr	r2, [pc, #316]	@ (8006b34 <HAL_DMA_Abort+0x5dc>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d072      	beq.n	8006ae2 <HAL_DMA_Abort+0x58a>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a4d      	ldr	r2, [pc, #308]	@ (8006b38 <HAL_DMA_Abort+0x5e0>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d06d      	beq.n	8006ae2 <HAL_DMA_Abort+0x58a>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a4c      	ldr	r2, [pc, #304]	@ (8006b3c <HAL_DMA_Abort+0x5e4>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d068      	beq.n	8006ae2 <HAL_DMA_Abort+0x58a>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a4a      	ldr	r2, [pc, #296]	@ (8006b40 <HAL_DMA_Abort+0x5e8>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d063      	beq.n	8006ae2 <HAL_DMA_Abort+0x58a>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a49      	ldr	r2, [pc, #292]	@ (8006b44 <HAL_DMA_Abort+0x5ec>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d05e      	beq.n	8006ae2 <HAL_DMA_Abort+0x58a>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a47      	ldr	r2, [pc, #284]	@ (8006b48 <HAL_DMA_Abort+0x5f0>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d059      	beq.n	8006ae2 <HAL_DMA_Abort+0x58a>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a46      	ldr	r2, [pc, #280]	@ (8006b4c <HAL_DMA_Abort+0x5f4>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d054      	beq.n	8006ae2 <HAL_DMA_Abort+0x58a>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a44      	ldr	r2, [pc, #272]	@ (8006b50 <HAL_DMA_Abort+0x5f8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d04f      	beq.n	8006ae2 <HAL_DMA_Abort+0x58a>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a43      	ldr	r2, [pc, #268]	@ (8006b54 <HAL_DMA_Abort+0x5fc>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d04a      	beq.n	8006ae2 <HAL_DMA_Abort+0x58a>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a41      	ldr	r2, [pc, #260]	@ (8006b58 <HAL_DMA_Abort+0x600>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d045      	beq.n	8006ae2 <HAL_DMA_Abort+0x58a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a40      	ldr	r2, [pc, #256]	@ (8006b5c <HAL_DMA_Abort+0x604>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d040      	beq.n	8006ae2 <HAL_DMA_Abort+0x58a>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a3e      	ldr	r2, [pc, #248]	@ (8006b60 <HAL_DMA_Abort+0x608>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d03b      	beq.n	8006ae2 <HAL_DMA_Abort+0x58a>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a3d      	ldr	r2, [pc, #244]	@ (8006b64 <HAL_DMA_Abort+0x60c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d036      	beq.n	8006ae2 <HAL_DMA_Abort+0x58a>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a3b      	ldr	r2, [pc, #236]	@ (8006b68 <HAL_DMA_Abort+0x610>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d031      	beq.n	8006ae2 <HAL_DMA_Abort+0x58a>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a3a      	ldr	r2, [pc, #232]	@ (8006b6c <HAL_DMA_Abort+0x614>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d02c      	beq.n	8006ae2 <HAL_DMA_Abort+0x58a>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a38      	ldr	r2, [pc, #224]	@ (8006b70 <HAL_DMA_Abort+0x618>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d027      	beq.n	8006ae2 <HAL_DMA_Abort+0x58a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a37      	ldr	r2, [pc, #220]	@ (8006b74 <HAL_DMA_Abort+0x61c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d022      	beq.n	8006ae2 <HAL_DMA_Abort+0x58a>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a35      	ldr	r2, [pc, #212]	@ (8006b78 <HAL_DMA_Abort+0x620>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d01d      	beq.n	8006ae2 <HAL_DMA_Abort+0x58a>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a34      	ldr	r2, [pc, #208]	@ (8006b7c <HAL_DMA_Abort+0x624>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d018      	beq.n	8006ae2 <HAL_DMA_Abort+0x58a>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a32      	ldr	r2, [pc, #200]	@ (8006b80 <HAL_DMA_Abort+0x628>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d013      	beq.n	8006ae2 <HAL_DMA_Abort+0x58a>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a31      	ldr	r2, [pc, #196]	@ (8006b84 <HAL_DMA_Abort+0x62c>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d00e      	beq.n	8006ae2 <HAL_DMA_Abort+0x58a>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a2f      	ldr	r2, [pc, #188]	@ (8006b88 <HAL_DMA_Abort+0x630>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d009      	beq.n	8006ae2 <HAL_DMA_Abort+0x58a>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a2e      	ldr	r2, [pc, #184]	@ (8006b8c <HAL_DMA_Abort+0x634>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d004      	beq.n	8006ae2 <HAL_DMA_Abort+0x58a>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a2c      	ldr	r2, [pc, #176]	@ (8006b90 <HAL_DMA_Abort+0x638>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d101      	bne.n	8006ae6 <HAL_DMA_Abort+0x58e>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e000      	b.n	8006ae8 <HAL_DMA_Abort+0x590>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d015      	beq.n	8006b18 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006af4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00c      	beq.n	8006b18 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b0c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006b16:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3718      	adds	r7, #24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	40020010 	.word	0x40020010
 8006b38:	40020028 	.word	0x40020028
 8006b3c:	40020040 	.word	0x40020040
 8006b40:	40020058 	.word	0x40020058
 8006b44:	40020070 	.word	0x40020070
 8006b48:	40020088 	.word	0x40020088
 8006b4c:	400200a0 	.word	0x400200a0
 8006b50:	400200b8 	.word	0x400200b8
 8006b54:	40020410 	.word	0x40020410
 8006b58:	40020428 	.word	0x40020428
 8006b5c:	40020440 	.word	0x40020440
 8006b60:	40020458 	.word	0x40020458
 8006b64:	40020470 	.word	0x40020470
 8006b68:	40020488 	.word	0x40020488
 8006b6c:	400204a0 	.word	0x400204a0
 8006b70:	400204b8 	.word	0x400204b8
 8006b74:	58025408 	.word	0x58025408
 8006b78:	5802541c 	.word	0x5802541c
 8006b7c:	58025430 	.word	0x58025430
 8006b80:	58025444 	.word	0x58025444
 8006b84:	58025458 	.word	0x58025458
 8006b88:	5802546c 	.word	0x5802546c
 8006b8c:	58025480 	.word	0x58025480
 8006b90:	58025494 	.word	0x58025494

08006b94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e237      	b.n	8007016 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d004      	beq.n	8006bbc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2280      	movs	r2, #128	@ 0x80
 8006bb6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e22c      	b.n	8007016 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a5c      	ldr	r2, [pc, #368]	@ (8006d34 <HAL_DMA_Abort_IT+0x1a0>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d04a      	beq.n	8006c5c <HAL_DMA_Abort_IT+0xc8>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a5b      	ldr	r2, [pc, #364]	@ (8006d38 <HAL_DMA_Abort_IT+0x1a4>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d045      	beq.n	8006c5c <HAL_DMA_Abort_IT+0xc8>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a59      	ldr	r2, [pc, #356]	@ (8006d3c <HAL_DMA_Abort_IT+0x1a8>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d040      	beq.n	8006c5c <HAL_DMA_Abort_IT+0xc8>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a58      	ldr	r2, [pc, #352]	@ (8006d40 <HAL_DMA_Abort_IT+0x1ac>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d03b      	beq.n	8006c5c <HAL_DMA_Abort_IT+0xc8>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a56      	ldr	r2, [pc, #344]	@ (8006d44 <HAL_DMA_Abort_IT+0x1b0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d036      	beq.n	8006c5c <HAL_DMA_Abort_IT+0xc8>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a55      	ldr	r2, [pc, #340]	@ (8006d48 <HAL_DMA_Abort_IT+0x1b4>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d031      	beq.n	8006c5c <HAL_DMA_Abort_IT+0xc8>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a53      	ldr	r2, [pc, #332]	@ (8006d4c <HAL_DMA_Abort_IT+0x1b8>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d02c      	beq.n	8006c5c <HAL_DMA_Abort_IT+0xc8>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a52      	ldr	r2, [pc, #328]	@ (8006d50 <HAL_DMA_Abort_IT+0x1bc>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d027      	beq.n	8006c5c <HAL_DMA_Abort_IT+0xc8>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a50      	ldr	r2, [pc, #320]	@ (8006d54 <HAL_DMA_Abort_IT+0x1c0>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d022      	beq.n	8006c5c <HAL_DMA_Abort_IT+0xc8>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a4f      	ldr	r2, [pc, #316]	@ (8006d58 <HAL_DMA_Abort_IT+0x1c4>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d01d      	beq.n	8006c5c <HAL_DMA_Abort_IT+0xc8>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a4d      	ldr	r2, [pc, #308]	@ (8006d5c <HAL_DMA_Abort_IT+0x1c8>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d018      	beq.n	8006c5c <HAL_DMA_Abort_IT+0xc8>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a4c      	ldr	r2, [pc, #304]	@ (8006d60 <HAL_DMA_Abort_IT+0x1cc>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d013      	beq.n	8006c5c <HAL_DMA_Abort_IT+0xc8>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a4a      	ldr	r2, [pc, #296]	@ (8006d64 <HAL_DMA_Abort_IT+0x1d0>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d00e      	beq.n	8006c5c <HAL_DMA_Abort_IT+0xc8>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a49      	ldr	r2, [pc, #292]	@ (8006d68 <HAL_DMA_Abort_IT+0x1d4>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d009      	beq.n	8006c5c <HAL_DMA_Abort_IT+0xc8>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a47      	ldr	r2, [pc, #284]	@ (8006d6c <HAL_DMA_Abort_IT+0x1d8>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d004      	beq.n	8006c5c <HAL_DMA_Abort_IT+0xc8>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a46      	ldr	r2, [pc, #280]	@ (8006d70 <HAL_DMA_Abort_IT+0x1dc>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d101      	bne.n	8006c60 <HAL_DMA_Abort_IT+0xcc>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e000      	b.n	8006c62 <HAL_DMA_Abort_IT+0xce>
 8006c60:	2300      	movs	r3, #0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f000 8086 	beq.w	8006d74 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2204      	movs	r2, #4
 8006c6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a2f      	ldr	r2, [pc, #188]	@ (8006d34 <HAL_DMA_Abort_IT+0x1a0>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d04a      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x17c>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a2e      	ldr	r2, [pc, #184]	@ (8006d38 <HAL_DMA_Abort_IT+0x1a4>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d045      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x17c>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a2c      	ldr	r2, [pc, #176]	@ (8006d3c <HAL_DMA_Abort_IT+0x1a8>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d040      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x17c>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a2b      	ldr	r2, [pc, #172]	@ (8006d40 <HAL_DMA_Abort_IT+0x1ac>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d03b      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x17c>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a29      	ldr	r2, [pc, #164]	@ (8006d44 <HAL_DMA_Abort_IT+0x1b0>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d036      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x17c>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a28      	ldr	r2, [pc, #160]	@ (8006d48 <HAL_DMA_Abort_IT+0x1b4>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d031      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x17c>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a26      	ldr	r2, [pc, #152]	@ (8006d4c <HAL_DMA_Abort_IT+0x1b8>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d02c      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x17c>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a25      	ldr	r2, [pc, #148]	@ (8006d50 <HAL_DMA_Abort_IT+0x1bc>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d027      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x17c>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a23      	ldr	r2, [pc, #140]	@ (8006d54 <HAL_DMA_Abort_IT+0x1c0>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d022      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x17c>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a22      	ldr	r2, [pc, #136]	@ (8006d58 <HAL_DMA_Abort_IT+0x1c4>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d01d      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x17c>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a20      	ldr	r2, [pc, #128]	@ (8006d5c <HAL_DMA_Abort_IT+0x1c8>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d018      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x17c>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a1f      	ldr	r2, [pc, #124]	@ (8006d60 <HAL_DMA_Abort_IT+0x1cc>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d013      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x17c>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a1d      	ldr	r2, [pc, #116]	@ (8006d64 <HAL_DMA_Abort_IT+0x1d0>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00e      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x17c>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8006d68 <HAL_DMA_Abort_IT+0x1d4>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d009      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x17c>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a1a      	ldr	r2, [pc, #104]	@ (8006d6c <HAL_DMA_Abort_IT+0x1d8>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d004      	beq.n	8006d10 <HAL_DMA_Abort_IT+0x17c>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a19      	ldr	r2, [pc, #100]	@ (8006d70 <HAL_DMA_Abort_IT+0x1dc>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d108      	bne.n	8006d22 <HAL_DMA_Abort_IT+0x18e>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f022 0201 	bic.w	r2, r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]
 8006d20:	e178      	b.n	8007014 <HAL_DMA_Abort_IT+0x480>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 0201 	bic.w	r2, r2, #1
 8006d30:	601a      	str	r2, [r3, #0]
 8006d32:	e16f      	b.n	8007014 <HAL_DMA_Abort_IT+0x480>
 8006d34:	40020010 	.word	0x40020010
 8006d38:	40020028 	.word	0x40020028
 8006d3c:	40020040 	.word	0x40020040
 8006d40:	40020058 	.word	0x40020058
 8006d44:	40020070 	.word	0x40020070
 8006d48:	40020088 	.word	0x40020088
 8006d4c:	400200a0 	.word	0x400200a0
 8006d50:	400200b8 	.word	0x400200b8
 8006d54:	40020410 	.word	0x40020410
 8006d58:	40020428 	.word	0x40020428
 8006d5c:	40020440 	.word	0x40020440
 8006d60:	40020458 	.word	0x40020458
 8006d64:	40020470 	.word	0x40020470
 8006d68:	40020488 	.word	0x40020488
 8006d6c:	400204a0 	.word	0x400204a0
 8006d70:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f022 020e 	bic.w	r2, r2, #14
 8006d82:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a6c      	ldr	r2, [pc, #432]	@ (8006f3c <HAL_DMA_Abort_IT+0x3a8>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d04a      	beq.n	8006e24 <HAL_DMA_Abort_IT+0x290>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a6b      	ldr	r2, [pc, #428]	@ (8006f40 <HAL_DMA_Abort_IT+0x3ac>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d045      	beq.n	8006e24 <HAL_DMA_Abort_IT+0x290>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a69      	ldr	r2, [pc, #420]	@ (8006f44 <HAL_DMA_Abort_IT+0x3b0>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d040      	beq.n	8006e24 <HAL_DMA_Abort_IT+0x290>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a68      	ldr	r2, [pc, #416]	@ (8006f48 <HAL_DMA_Abort_IT+0x3b4>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d03b      	beq.n	8006e24 <HAL_DMA_Abort_IT+0x290>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a66      	ldr	r2, [pc, #408]	@ (8006f4c <HAL_DMA_Abort_IT+0x3b8>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d036      	beq.n	8006e24 <HAL_DMA_Abort_IT+0x290>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a65      	ldr	r2, [pc, #404]	@ (8006f50 <HAL_DMA_Abort_IT+0x3bc>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d031      	beq.n	8006e24 <HAL_DMA_Abort_IT+0x290>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a63      	ldr	r2, [pc, #396]	@ (8006f54 <HAL_DMA_Abort_IT+0x3c0>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d02c      	beq.n	8006e24 <HAL_DMA_Abort_IT+0x290>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a62      	ldr	r2, [pc, #392]	@ (8006f58 <HAL_DMA_Abort_IT+0x3c4>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d027      	beq.n	8006e24 <HAL_DMA_Abort_IT+0x290>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a60      	ldr	r2, [pc, #384]	@ (8006f5c <HAL_DMA_Abort_IT+0x3c8>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d022      	beq.n	8006e24 <HAL_DMA_Abort_IT+0x290>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a5f      	ldr	r2, [pc, #380]	@ (8006f60 <HAL_DMA_Abort_IT+0x3cc>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d01d      	beq.n	8006e24 <HAL_DMA_Abort_IT+0x290>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a5d      	ldr	r2, [pc, #372]	@ (8006f64 <HAL_DMA_Abort_IT+0x3d0>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d018      	beq.n	8006e24 <HAL_DMA_Abort_IT+0x290>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a5c      	ldr	r2, [pc, #368]	@ (8006f68 <HAL_DMA_Abort_IT+0x3d4>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d013      	beq.n	8006e24 <HAL_DMA_Abort_IT+0x290>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a5a      	ldr	r2, [pc, #360]	@ (8006f6c <HAL_DMA_Abort_IT+0x3d8>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d00e      	beq.n	8006e24 <HAL_DMA_Abort_IT+0x290>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a59      	ldr	r2, [pc, #356]	@ (8006f70 <HAL_DMA_Abort_IT+0x3dc>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d009      	beq.n	8006e24 <HAL_DMA_Abort_IT+0x290>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a57      	ldr	r2, [pc, #348]	@ (8006f74 <HAL_DMA_Abort_IT+0x3e0>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d004      	beq.n	8006e24 <HAL_DMA_Abort_IT+0x290>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a56      	ldr	r2, [pc, #344]	@ (8006f78 <HAL_DMA_Abort_IT+0x3e4>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d108      	bne.n	8006e36 <HAL_DMA_Abort_IT+0x2a2>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 0201 	bic.w	r2, r2, #1
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	e007      	b.n	8006e46 <HAL_DMA_Abort_IT+0x2b2>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f022 0201 	bic.w	r2, r2, #1
 8006e44:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a3c      	ldr	r2, [pc, #240]	@ (8006f3c <HAL_DMA_Abort_IT+0x3a8>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d072      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x3a2>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a3a      	ldr	r2, [pc, #232]	@ (8006f40 <HAL_DMA_Abort_IT+0x3ac>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d06d      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x3a2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a39      	ldr	r2, [pc, #228]	@ (8006f44 <HAL_DMA_Abort_IT+0x3b0>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d068      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x3a2>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a37      	ldr	r2, [pc, #220]	@ (8006f48 <HAL_DMA_Abort_IT+0x3b4>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d063      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x3a2>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a36      	ldr	r2, [pc, #216]	@ (8006f4c <HAL_DMA_Abort_IT+0x3b8>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d05e      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x3a2>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a34      	ldr	r2, [pc, #208]	@ (8006f50 <HAL_DMA_Abort_IT+0x3bc>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d059      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x3a2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a33      	ldr	r2, [pc, #204]	@ (8006f54 <HAL_DMA_Abort_IT+0x3c0>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d054      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x3a2>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a31      	ldr	r2, [pc, #196]	@ (8006f58 <HAL_DMA_Abort_IT+0x3c4>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d04f      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x3a2>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a30      	ldr	r2, [pc, #192]	@ (8006f5c <HAL_DMA_Abort_IT+0x3c8>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d04a      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x3a2>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a2e      	ldr	r2, [pc, #184]	@ (8006f60 <HAL_DMA_Abort_IT+0x3cc>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d045      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x3a2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a2d      	ldr	r2, [pc, #180]	@ (8006f64 <HAL_DMA_Abort_IT+0x3d0>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d040      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x3a2>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a2b      	ldr	r2, [pc, #172]	@ (8006f68 <HAL_DMA_Abort_IT+0x3d4>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d03b      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x3a2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a2a      	ldr	r2, [pc, #168]	@ (8006f6c <HAL_DMA_Abort_IT+0x3d8>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d036      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x3a2>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a28      	ldr	r2, [pc, #160]	@ (8006f70 <HAL_DMA_Abort_IT+0x3dc>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d031      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x3a2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a27      	ldr	r2, [pc, #156]	@ (8006f74 <HAL_DMA_Abort_IT+0x3e0>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d02c      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x3a2>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a25      	ldr	r2, [pc, #148]	@ (8006f78 <HAL_DMA_Abort_IT+0x3e4>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d027      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x3a2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a24      	ldr	r2, [pc, #144]	@ (8006f7c <HAL_DMA_Abort_IT+0x3e8>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d022      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x3a2>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a22      	ldr	r2, [pc, #136]	@ (8006f80 <HAL_DMA_Abort_IT+0x3ec>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d01d      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x3a2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a21      	ldr	r2, [pc, #132]	@ (8006f84 <HAL_DMA_Abort_IT+0x3f0>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d018      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x3a2>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a1f      	ldr	r2, [pc, #124]	@ (8006f88 <HAL_DMA_Abort_IT+0x3f4>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d013      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x3a2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a1e      	ldr	r2, [pc, #120]	@ (8006f8c <HAL_DMA_Abort_IT+0x3f8>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d00e      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x3a2>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8006f90 <HAL_DMA_Abort_IT+0x3fc>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d009      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x3a2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a1b      	ldr	r2, [pc, #108]	@ (8006f94 <HAL_DMA_Abort_IT+0x400>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d004      	beq.n	8006f36 <HAL_DMA_Abort_IT+0x3a2>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a19      	ldr	r2, [pc, #100]	@ (8006f98 <HAL_DMA_Abort_IT+0x404>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d132      	bne.n	8006f9c <HAL_DMA_Abort_IT+0x408>
 8006f36:	2301      	movs	r3, #1
 8006f38:	e031      	b.n	8006f9e <HAL_DMA_Abort_IT+0x40a>
 8006f3a:	bf00      	nop
 8006f3c:	40020010 	.word	0x40020010
 8006f40:	40020028 	.word	0x40020028
 8006f44:	40020040 	.word	0x40020040
 8006f48:	40020058 	.word	0x40020058
 8006f4c:	40020070 	.word	0x40020070
 8006f50:	40020088 	.word	0x40020088
 8006f54:	400200a0 	.word	0x400200a0
 8006f58:	400200b8 	.word	0x400200b8
 8006f5c:	40020410 	.word	0x40020410
 8006f60:	40020428 	.word	0x40020428
 8006f64:	40020440 	.word	0x40020440
 8006f68:	40020458 	.word	0x40020458
 8006f6c:	40020470 	.word	0x40020470
 8006f70:	40020488 	.word	0x40020488
 8006f74:	400204a0 	.word	0x400204a0
 8006f78:	400204b8 	.word	0x400204b8
 8006f7c:	58025408 	.word	0x58025408
 8006f80:	5802541c 	.word	0x5802541c
 8006f84:	58025430 	.word	0x58025430
 8006f88:	58025444 	.word	0x58025444
 8006f8c:	58025458 	.word	0x58025458
 8006f90:	5802546c 	.word	0x5802546c
 8006f94:	58025480 	.word	0x58025480
 8006f98:	58025494 	.word	0x58025494
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d028      	beq.n	8006ff4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006fb0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fbc:	f003 031f 	and.w	r3, r3, #31
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	409a      	lsls	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006fd0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00c      	beq.n	8006ff4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fe4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006fe8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006ff2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007008:	2b00      	cmp	r3, #0
 800700a:	d003      	beq.n	8007014 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop

08007020 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b08a      	sub	sp, #40	@ 0x28
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800702c:	4b67      	ldr	r3, [pc, #412]	@ (80071cc <HAL_DMA_IRQHandler+0x1ac>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a67      	ldr	r2, [pc, #412]	@ (80071d0 <HAL_DMA_IRQHandler+0x1b0>)
 8007032:	fba2 2303 	umull	r2, r3, r2, r3
 8007036:	0a9b      	lsrs	r3, r3, #10
 8007038:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800703e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007044:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007046:	6a3b      	ldr	r3, [r7, #32]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a5f      	ldr	r2, [pc, #380]	@ (80071d4 <HAL_DMA_IRQHandler+0x1b4>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d04a      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xd2>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a5d      	ldr	r2, [pc, #372]	@ (80071d8 <HAL_DMA_IRQHandler+0x1b8>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d045      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xd2>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a5c      	ldr	r2, [pc, #368]	@ (80071dc <HAL_DMA_IRQHandler+0x1bc>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d040      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xd2>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a5a      	ldr	r2, [pc, #360]	@ (80071e0 <HAL_DMA_IRQHandler+0x1c0>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d03b      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xd2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a59      	ldr	r2, [pc, #356]	@ (80071e4 <HAL_DMA_IRQHandler+0x1c4>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d036      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xd2>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a57      	ldr	r2, [pc, #348]	@ (80071e8 <HAL_DMA_IRQHandler+0x1c8>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d031      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xd2>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a56      	ldr	r2, [pc, #344]	@ (80071ec <HAL_DMA_IRQHandler+0x1cc>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d02c      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xd2>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a54      	ldr	r2, [pc, #336]	@ (80071f0 <HAL_DMA_IRQHandler+0x1d0>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d027      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xd2>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a53      	ldr	r2, [pc, #332]	@ (80071f4 <HAL_DMA_IRQHandler+0x1d4>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d022      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xd2>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a51      	ldr	r2, [pc, #324]	@ (80071f8 <HAL_DMA_IRQHandler+0x1d8>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d01d      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xd2>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a50      	ldr	r2, [pc, #320]	@ (80071fc <HAL_DMA_IRQHandler+0x1dc>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d018      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xd2>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a4e      	ldr	r2, [pc, #312]	@ (8007200 <HAL_DMA_IRQHandler+0x1e0>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d013      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xd2>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a4d      	ldr	r2, [pc, #308]	@ (8007204 <HAL_DMA_IRQHandler+0x1e4>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d00e      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xd2>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a4b      	ldr	r2, [pc, #300]	@ (8007208 <HAL_DMA_IRQHandler+0x1e8>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d009      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xd2>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a4a      	ldr	r2, [pc, #296]	@ (800720c <HAL_DMA_IRQHandler+0x1ec>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d004      	beq.n	80070f2 <HAL_DMA_IRQHandler+0xd2>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a48      	ldr	r2, [pc, #288]	@ (8007210 <HAL_DMA_IRQHandler+0x1f0>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d101      	bne.n	80070f6 <HAL_DMA_IRQHandler+0xd6>
 80070f2:	2301      	movs	r3, #1
 80070f4:	e000      	b.n	80070f8 <HAL_DMA_IRQHandler+0xd8>
 80070f6:	2300      	movs	r3, #0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 842b 	beq.w	8007954 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007102:	f003 031f 	and.w	r3, r3, #31
 8007106:	2208      	movs	r2, #8
 8007108:	409a      	lsls	r2, r3
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	4013      	ands	r3, r2
 800710e:	2b00      	cmp	r3, #0
 8007110:	f000 80a2 	beq.w	8007258 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a2e      	ldr	r2, [pc, #184]	@ (80071d4 <HAL_DMA_IRQHandler+0x1b4>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d04a      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x194>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a2d      	ldr	r2, [pc, #180]	@ (80071d8 <HAL_DMA_IRQHandler+0x1b8>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d045      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x194>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a2b      	ldr	r2, [pc, #172]	@ (80071dc <HAL_DMA_IRQHandler+0x1bc>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d040      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x194>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a2a      	ldr	r2, [pc, #168]	@ (80071e0 <HAL_DMA_IRQHandler+0x1c0>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d03b      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x194>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a28      	ldr	r2, [pc, #160]	@ (80071e4 <HAL_DMA_IRQHandler+0x1c4>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d036      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x194>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a27      	ldr	r2, [pc, #156]	@ (80071e8 <HAL_DMA_IRQHandler+0x1c8>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d031      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x194>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a25      	ldr	r2, [pc, #148]	@ (80071ec <HAL_DMA_IRQHandler+0x1cc>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d02c      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x194>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a24      	ldr	r2, [pc, #144]	@ (80071f0 <HAL_DMA_IRQHandler+0x1d0>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d027      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x194>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a22      	ldr	r2, [pc, #136]	@ (80071f4 <HAL_DMA_IRQHandler+0x1d4>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d022      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x194>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a21      	ldr	r2, [pc, #132]	@ (80071f8 <HAL_DMA_IRQHandler+0x1d8>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d01d      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x194>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a1f      	ldr	r2, [pc, #124]	@ (80071fc <HAL_DMA_IRQHandler+0x1dc>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d018      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x194>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a1e      	ldr	r2, [pc, #120]	@ (8007200 <HAL_DMA_IRQHandler+0x1e0>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d013      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x194>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a1c      	ldr	r2, [pc, #112]	@ (8007204 <HAL_DMA_IRQHandler+0x1e4>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d00e      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x194>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a1b      	ldr	r2, [pc, #108]	@ (8007208 <HAL_DMA_IRQHandler+0x1e8>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d009      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x194>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a19      	ldr	r2, [pc, #100]	@ (800720c <HAL_DMA_IRQHandler+0x1ec>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d004      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x194>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a18      	ldr	r2, [pc, #96]	@ (8007210 <HAL_DMA_IRQHandler+0x1f0>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d12f      	bne.n	8007214 <HAL_DMA_IRQHandler+0x1f4>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0304 	and.w	r3, r3, #4
 80071be:	2b00      	cmp	r3, #0
 80071c0:	bf14      	ite	ne
 80071c2:	2301      	movne	r3, #1
 80071c4:	2300      	moveq	r3, #0
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	e02e      	b.n	8007228 <HAL_DMA_IRQHandler+0x208>
 80071ca:	bf00      	nop
 80071cc:	24000068 	.word	0x24000068
 80071d0:	1b4e81b5 	.word	0x1b4e81b5
 80071d4:	40020010 	.word	0x40020010
 80071d8:	40020028 	.word	0x40020028
 80071dc:	40020040 	.word	0x40020040
 80071e0:	40020058 	.word	0x40020058
 80071e4:	40020070 	.word	0x40020070
 80071e8:	40020088 	.word	0x40020088
 80071ec:	400200a0 	.word	0x400200a0
 80071f0:	400200b8 	.word	0x400200b8
 80071f4:	40020410 	.word	0x40020410
 80071f8:	40020428 	.word	0x40020428
 80071fc:	40020440 	.word	0x40020440
 8007200:	40020458 	.word	0x40020458
 8007204:	40020470 	.word	0x40020470
 8007208:	40020488 	.word	0x40020488
 800720c:	400204a0 	.word	0x400204a0
 8007210:	400204b8 	.word	0x400204b8
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0308 	and.w	r3, r3, #8
 800721e:	2b00      	cmp	r3, #0
 8007220:	bf14      	ite	ne
 8007222:	2301      	movne	r3, #1
 8007224:	2300      	moveq	r3, #0
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b00      	cmp	r3, #0
 800722a:	d015      	beq.n	8007258 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 0204 	bic.w	r2, r2, #4
 800723a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007240:	f003 031f 	and.w	r3, r3, #31
 8007244:	2208      	movs	r2, #8
 8007246:	409a      	lsls	r2, r3
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007250:	f043 0201 	orr.w	r2, r3, #1
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800725c:	f003 031f 	and.w	r3, r3, #31
 8007260:	69ba      	ldr	r2, [r7, #24]
 8007262:	fa22 f303 	lsr.w	r3, r2, r3
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b00      	cmp	r3, #0
 800726c:	d06e      	beq.n	800734c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a69      	ldr	r2, [pc, #420]	@ (8007418 <HAL_DMA_IRQHandler+0x3f8>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d04a      	beq.n	800730e <HAL_DMA_IRQHandler+0x2ee>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a67      	ldr	r2, [pc, #412]	@ (800741c <HAL_DMA_IRQHandler+0x3fc>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d045      	beq.n	800730e <HAL_DMA_IRQHandler+0x2ee>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a66      	ldr	r2, [pc, #408]	@ (8007420 <HAL_DMA_IRQHandler+0x400>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d040      	beq.n	800730e <HAL_DMA_IRQHandler+0x2ee>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a64      	ldr	r2, [pc, #400]	@ (8007424 <HAL_DMA_IRQHandler+0x404>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d03b      	beq.n	800730e <HAL_DMA_IRQHandler+0x2ee>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a63      	ldr	r2, [pc, #396]	@ (8007428 <HAL_DMA_IRQHandler+0x408>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d036      	beq.n	800730e <HAL_DMA_IRQHandler+0x2ee>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a61      	ldr	r2, [pc, #388]	@ (800742c <HAL_DMA_IRQHandler+0x40c>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d031      	beq.n	800730e <HAL_DMA_IRQHandler+0x2ee>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a60      	ldr	r2, [pc, #384]	@ (8007430 <HAL_DMA_IRQHandler+0x410>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d02c      	beq.n	800730e <HAL_DMA_IRQHandler+0x2ee>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a5e      	ldr	r2, [pc, #376]	@ (8007434 <HAL_DMA_IRQHandler+0x414>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d027      	beq.n	800730e <HAL_DMA_IRQHandler+0x2ee>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a5d      	ldr	r2, [pc, #372]	@ (8007438 <HAL_DMA_IRQHandler+0x418>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d022      	beq.n	800730e <HAL_DMA_IRQHandler+0x2ee>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a5b      	ldr	r2, [pc, #364]	@ (800743c <HAL_DMA_IRQHandler+0x41c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d01d      	beq.n	800730e <HAL_DMA_IRQHandler+0x2ee>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a5a      	ldr	r2, [pc, #360]	@ (8007440 <HAL_DMA_IRQHandler+0x420>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d018      	beq.n	800730e <HAL_DMA_IRQHandler+0x2ee>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a58      	ldr	r2, [pc, #352]	@ (8007444 <HAL_DMA_IRQHandler+0x424>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d013      	beq.n	800730e <HAL_DMA_IRQHandler+0x2ee>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a57      	ldr	r2, [pc, #348]	@ (8007448 <HAL_DMA_IRQHandler+0x428>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d00e      	beq.n	800730e <HAL_DMA_IRQHandler+0x2ee>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a55      	ldr	r2, [pc, #340]	@ (800744c <HAL_DMA_IRQHandler+0x42c>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d009      	beq.n	800730e <HAL_DMA_IRQHandler+0x2ee>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a54      	ldr	r2, [pc, #336]	@ (8007450 <HAL_DMA_IRQHandler+0x430>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d004      	beq.n	800730e <HAL_DMA_IRQHandler+0x2ee>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a52      	ldr	r2, [pc, #328]	@ (8007454 <HAL_DMA_IRQHandler+0x434>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d10a      	bne.n	8007324 <HAL_DMA_IRQHandler+0x304>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007318:	2b00      	cmp	r3, #0
 800731a:	bf14      	ite	ne
 800731c:	2301      	movne	r3, #1
 800731e:	2300      	moveq	r3, #0
 8007320:	b2db      	uxtb	r3, r3
 8007322:	e003      	b.n	800732c <HAL_DMA_IRQHandler+0x30c>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2300      	movs	r3, #0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00d      	beq.n	800734c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007334:	f003 031f 	and.w	r3, r3, #31
 8007338:	2201      	movs	r2, #1
 800733a:	409a      	lsls	r2, r3
 800733c:	6a3b      	ldr	r3, [r7, #32]
 800733e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007344:	f043 0202 	orr.w	r2, r3, #2
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007350:	f003 031f 	and.w	r3, r3, #31
 8007354:	2204      	movs	r2, #4
 8007356:	409a      	lsls	r2, r3
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	4013      	ands	r3, r2
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 808f 	beq.w	8007480 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a2c      	ldr	r2, [pc, #176]	@ (8007418 <HAL_DMA_IRQHandler+0x3f8>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d04a      	beq.n	8007402 <HAL_DMA_IRQHandler+0x3e2>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a2a      	ldr	r2, [pc, #168]	@ (800741c <HAL_DMA_IRQHandler+0x3fc>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d045      	beq.n	8007402 <HAL_DMA_IRQHandler+0x3e2>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a29      	ldr	r2, [pc, #164]	@ (8007420 <HAL_DMA_IRQHandler+0x400>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d040      	beq.n	8007402 <HAL_DMA_IRQHandler+0x3e2>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a27      	ldr	r2, [pc, #156]	@ (8007424 <HAL_DMA_IRQHandler+0x404>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d03b      	beq.n	8007402 <HAL_DMA_IRQHandler+0x3e2>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a26      	ldr	r2, [pc, #152]	@ (8007428 <HAL_DMA_IRQHandler+0x408>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d036      	beq.n	8007402 <HAL_DMA_IRQHandler+0x3e2>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a24      	ldr	r2, [pc, #144]	@ (800742c <HAL_DMA_IRQHandler+0x40c>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d031      	beq.n	8007402 <HAL_DMA_IRQHandler+0x3e2>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a23      	ldr	r2, [pc, #140]	@ (8007430 <HAL_DMA_IRQHandler+0x410>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d02c      	beq.n	8007402 <HAL_DMA_IRQHandler+0x3e2>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a21      	ldr	r2, [pc, #132]	@ (8007434 <HAL_DMA_IRQHandler+0x414>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d027      	beq.n	8007402 <HAL_DMA_IRQHandler+0x3e2>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a20      	ldr	r2, [pc, #128]	@ (8007438 <HAL_DMA_IRQHandler+0x418>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d022      	beq.n	8007402 <HAL_DMA_IRQHandler+0x3e2>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a1e      	ldr	r2, [pc, #120]	@ (800743c <HAL_DMA_IRQHandler+0x41c>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d01d      	beq.n	8007402 <HAL_DMA_IRQHandler+0x3e2>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a1d      	ldr	r2, [pc, #116]	@ (8007440 <HAL_DMA_IRQHandler+0x420>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d018      	beq.n	8007402 <HAL_DMA_IRQHandler+0x3e2>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a1b      	ldr	r2, [pc, #108]	@ (8007444 <HAL_DMA_IRQHandler+0x424>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d013      	beq.n	8007402 <HAL_DMA_IRQHandler+0x3e2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a1a      	ldr	r2, [pc, #104]	@ (8007448 <HAL_DMA_IRQHandler+0x428>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d00e      	beq.n	8007402 <HAL_DMA_IRQHandler+0x3e2>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a18      	ldr	r2, [pc, #96]	@ (800744c <HAL_DMA_IRQHandler+0x42c>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d009      	beq.n	8007402 <HAL_DMA_IRQHandler+0x3e2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a17      	ldr	r2, [pc, #92]	@ (8007450 <HAL_DMA_IRQHandler+0x430>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d004      	beq.n	8007402 <HAL_DMA_IRQHandler+0x3e2>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a15      	ldr	r2, [pc, #84]	@ (8007454 <HAL_DMA_IRQHandler+0x434>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d12a      	bne.n	8007458 <HAL_DMA_IRQHandler+0x438>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	2b00      	cmp	r3, #0
 800740e:	bf14      	ite	ne
 8007410:	2301      	movne	r3, #1
 8007412:	2300      	moveq	r3, #0
 8007414:	b2db      	uxtb	r3, r3
 8007416:	e023      	b.n	8007460 <HAL_DMA_IRQHandler+0x440>
 8007418:	40020010 	.word	0x40020010
 800741c:	40020028 	.word	0x40020028
 8007420:	40020040 	.word	0x40020040
 8007424:	40020058 	.word	0x40020058
 8007428:	40020070 	.word	0x40020070
 800742c:	40020088 	.word	0x40020088
 8007430:	400200a0 	.word	0x400200a0
 8007434:	400200b8 	.word	0x400200b8
 8007438:	40020410 	.word	0x40020410
 800743c:	40020428 	.word	0x40020428
 8007440:	40020440 	.word	0x40020440
 8007444:	40020458 	.word	0x40020458
 8007448:	40020470 	.word	0x40020470
 800744c:	40020488 	.word	0x40020488
 8007450:	400204a0 	.word	0x400204a0
 8007454:	400204b8 	.word	0x400204b8
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2300      	movs	r3, #0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00d      	beq.n	8007480 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007468:	f003 031f 	and.w	r3, r3, #31
 800746c:	2204      	movs	r2, #4
 800746e:	409a      	lsls	r2, r3
 8007470:	6a3b      	ldr	r3, [r7, #32]
 8007472:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007478:	f043 0204 	orr.w	r2, r3, #4
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007484:	f003 031f 	and.w	r3, r3, #31
 8007488:	2210      	movs	r2, #16
 800748a:	409a      	lsls	r2, r3
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	4013      	ands	r3, r2
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 80a6 	beq.w	80075e2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a85      	ldr	r2, [pc, #532]	@ (80076b0 <HAL_DMA_IRQHandler+0x690>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d04a      	beq.n	8007536 <HAL_DMA_IRQHandler+0x516>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a83      	ldr	r2, [pc, #524]	@ (80076b4 <HAL_DMA_IRQHandler+0x694>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d045      	beq.n	8007536 <HAL_DMA_IRQHandler+0x516>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a82      	ldr	r2, [pc, #520]	@ (80076b8 <HAL_DMA_IRQHandler+0x698>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d040      	beq.n	8007536 <HAL_DMA_IRQHandler+0x516>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a80      	ldr	r2, [pc, #512]	@ (80076bc <HAL_DMA_IRQHandler+0x69c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d03b      	beq.n	8007536 <HAL_DMA_IRQHandler+0x516>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a7f      	ldr	r2, [pc, #508]	@ (80076c0 <HAL_DMA_IRQHandler+0x6a0>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d036      	beq.n	8007536 <HAL_DMA_IRQHandler+0x516>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a7d      	ldr	r2, [pc, #500]	@ (80076c4 <HAL_DMA_IRQHandler+0x6a4>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d031      	beq.n	8007536 <HAL_DMA_IRQHandler+0x516>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a7c      	ldr	r2, [pc, #496]	@ (80076c8 <HAL_DMA_IRQHandler+0x6a8>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d02c      	beq.n	8007536 <HAL_DMA_IRQHandler+0x516>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a7a      	ldr	r2, [pc, #488]	@ (80076cc <HAL_DMA_IRQHandler+0x6ac>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d027      	beq.n	8007536 <HAL_DMA_IRQHandler+0x516>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a79      	ldr	r2, [pc, #484]	@ (80076d0 <HAL_DMA_IRQHandler+0x6b0>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d022      	beq.n	8007536 <HAL_DMA_IRQHandler+0x516>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a77      	ldr	r2, [pc, #476]	@ (80076d4 <HAL_DMA_IRQHandler+0x6b4>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d01d      	beq.n	8007536 <HAL_DMA_IRQHandler+0x516>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a76      	ldr	r2, [pc, #472]	@ (80076d8 <HAL_DMA_IRQHandler+0x6b8>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d018      	beq.n	8007536 <HAL_DMA_IRQHandler+0x516>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a74      	ldr	r2, [pc, #464]	@ (80076dc <HAL_DMA_IRQHandler+0x6bc>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d013      	beq.n	8007536 <HAL_DMA_IRQHandler+0x516>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a73      	ldr	r2, [pc, #460]	@ (80076e0 <HAL_DMA_IRQHandler+0x6c0>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d00e      	beq.n	8007536 <HAL_DMA_IRQHandler+0x516>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a71      	ldr	r2, [pc, #452]	@ (80076e4 <HAL_DMA_IRQHandler+0x6c4>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d009      	beq.n	8007536 <HAL_DMA_IRQHandler+0x516>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a70      	ldr	r2, [pc, #448]	@ (80076e8 <HAL_DMA_IRQHandler+0x6c8>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d004      	beq.n	8007536 <HAL_DMA_IRQHandler+0x516>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a6e      	ldr	r2, [pc, #440]	@ (80076ec <HAL_DMA_IRQHandler+0x6cc>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d10a      	bne.n	800754c <HAL_DMA_IRQHandler+0x52c>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0308 	and.w	r3, r3, #8
 8007540:	2b00      	cmp	r3, #0
 8007542:	bf14      	ite	ne
 8007544:	2301      	movne	r3, #1
 8007546:	2300      	moveq	r3, #0
 8007548:	b2db      	uxtb	r3, r3
 800754a:	e009      	b.n	8007560 <HAL_DMA_IRQHandler+0x540>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0304 	and.w	r3, r3, #4
 8007556:	2b00      	cmp	r3, #0
 8007558:	bf14      	ite	ne
 800755a:	2301      	movne	r3, #1
 800755c:	2300      	moveq	r3, #0
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b00      	cmp	r3, #0
 8007562:	d03e      	beq.n	80075e2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007568:	f003 031f 	and.w	r3, r3, #31
 800756c:	2210      	movs	r2, #16
 800756e:	409a      	lsls	r2, r3
 8007570:	6a3b      	ldr	r3, [r7, #32]
 8007572:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d018      	beq.n	80075b4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d108      	bne.n	80075a2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007594:	2b00      	cmp	r3, #0
 8007596:	d024      	beq.n	80075e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	4798      	blx	r3
 80075a0:	e01f      	b.n	80075e2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d01b      	beq.n	80075e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	4798      	blx	r3
 80075b2:	e016      	b.n	80075e2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d107      	bne.n	80075d2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 0208 	bic.w	r2, r2, #8
 80075d0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075e6:	f003 031f 	and.w	r3, r3, #31
 80075ea:	2220      	movs	r2, #32
 80075ec:	409a      	lsls	r2, r3
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	4013      	ands	r3, r2
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 8110 	beq.w	8007818 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a2c      	ldr	r2, [pc, #176]	@ (80076b0 <HAL_DMA_IRQHandler+0x690>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d04a      	beq.n	8007698 <HAL_DMA_IRQHandler+0x678>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a2b      	ldr	r2, [pc, #172]	@ (80076b4 <HAL_DMA_IRQHandler+0x694>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d045      	beq.n	8007698 <HAL_DMA_IRQHandler+0x678>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a29      	ldr	r2, [pc, #164]	@ (80076b8 <HAL_DMA_IRQHandler+0x698>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d040      	beq.n	8007698 <HAL_DMA_IRQHandler+0x678>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a28      	ldr	r2, [pc, #160]	@ (80076bc <HAL_DMA_IRQHandler+0x69c>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d03b      	beq.n	8007698 <HAL_DMA_IRQHandler+0x678>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a26      	ldr	r2, [pc, #152]	@ (80076c0 <HAL_DMA_IRQHandler+0x6a0>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d036      	beq.n	8007698 <HAL_DMA_IRQHandler+0x678>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a25      	ldr	r2, [pc, #148]	@ (80076c4 <HAL_DMA_IRQHandler+0x6a4>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d031      	beq.n	8007698 <HAL_DMA_IRQHandler+0x678>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a23      	ldr	r2, [pc, #140]	@ (80076c8 <HAL_DMA_IRQHandler+0x6a8>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d02c      	beq.n	8007698 <HAL_DMA_IRQHandler+0x678>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a22      	ldr	r2, [pc, #136]	@ (80076cc <HAL_DMA_IRQHandler+0x6ac>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d027      	beq.n	8007698 <HAL_DMA_IRQHandler+0x678>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a20      	ldr	r2, [pc, #128]	@ (80076d0 <HAL_DMA_IRQHandler+0x6b0>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d022      	beq.n	8007698 <HAL_DMA_IRQHandler+0x678>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a1f      	ldr	r2, [pc, #124]	@ (80076d4 <HAL_DMA_IRQHandler+0x6b4>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d01d      	beq.n	8007698 <HAL_DMA_IRQHandler+0x678>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a1d      	ldr	r2, [pc, #116]	@ (80076d8 <HAL_DMA_IRQHandler+0x6b8>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d018      	beq.n	8007698 <HAL_DMA_IRQHandler+0x678>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a1c      	ldr	r2, [pc, #112]	@ (80076dc <HAL_DMA_IRQHandler+0x6bc>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d013      	beq.n	8007698 <HAL_DMA_IRQHandler+0x678>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a1a      	ldr	r2, [pc, #104]	@ (80076e0 <HAL_DMA_IRQHandler+0x6c0>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d00e      	beq.n	8007698 <HAL_DMA_IRQHandler+0x678>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a19      	ldr	r2, [pc, #100]	@ (80076e4 <HAL_DMA_IRQHandler+0x6c4>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d009      	beq.n	8007698 <HAL_DMA_IRQHandler+0x678>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a17      	ldr	r2, [pc, #92]	@ (80076e8 <HAL_DMA_IRQHandler+0x6c8>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d004      	beq.n	8007698 <HAL_DMA_IRQHandler+0x678>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a16      	ldr	r2, [pc, #88]	@ (80076ec <HAL_DMA_IRQHandler+0x6cc>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d12b      	bne.n	80076f0 <HAL_DMA_IRQHandler+0x6d0>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0310 	and.w	r3, r3, #16
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	bf14      	ite	ne
 80076a6:	2301      	movne	r3, #1
 80076a8:	2300      	moveq	r3, #0
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	e02a      	b.n	8007704 <HAL_DMA_IRQHandler+0x6e4>
 80076ae:	bf00      	nop
 80076b0:	40020010 	.word	0x40020010
 80076b4:	40020028 	.word	0x40020028
 80076b8:	40020040 	.word	0x40020040
 80076bc:	40020058 	.word	0x40020058
 80076c0:	40020070 	.word	0x40020070
 80076c4:	40020088 	.word	0x40020088
 80076c8:	400200a0 	.word	0x400200a0
 80076cc:	400200b8 	.word	0x400200b8
 80076d0:	40020410 	.word	0x40020410
 80076d4:	40020428 	.word	0x40020428
 80076d8:	40020440 	.word	0x40020440
 80076dc:	40020458 	.word	0x40020458
 80076e0:	40020470 	.word	0x40020470
 80076e4:	40020488 	.word	0x40020488
 80076e8:	400204a0 	.word	0x400204a0
 80076ec:	400204b8 	.word	0x400204b8
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0302 	and.w	r3, r3, #2
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	bf14      	ite	ne
 80076fe:	2301      	movne	r3, #1
 8007700:	2300      	moveq	r3, #0
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 8087 	beq.w	8007818 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800770e:	f003 031f 	and.w	r3, r3, #31
 8007712:	2220      	movs	r2, #32
 8007714:	409a      	lsls	r2, r3
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b04      	cmp	r3, #4
 8007724:	d139      	bne.n	800779a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f022 0216 	bic.w	r2, r2, #22
 8007734:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	695a      	ldr	r2, [r3, #20]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007744:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800774a:	2b00      	cmp	r3, #0
 800774c:	d103      	bne.n	8007756 <HAL_DMA_IRQHandler+0x736>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007752:	2b00      	cmp	r3, #0
 8007754:	d007      	beq.n	8007766 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 0208 	bic.w	r2, r2, #8
 8007764:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800776a:	f003 031f 	and.w	r3, r3, #31
 800776e:	223f      	movs	r2, #63	@ 0x3f
 8007770:	409a      	lsls	r2, r3
 8007772:	6a3b      	ldr	r3, [r7, #32]
 8007774:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 834a 	beq.w	8007e24 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	4798      	blx	r3
          }
          return;
 8007798:	e344      	b.n	8007e24 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d018      	beq.n	80077da <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d108      	bne.n	80077c8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d02c      	beq.n	8007818 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	4798      	blx	r3
 80077c6:	e027      	b.n	8007818 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d023      	beq.n	8007818 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	4798      	blx	r3
 80077d8:	e01e      	b.n	8007818 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10f      	bne.n	8007808 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 0210 	bic.w	r2, r2, #16
 80077f6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800780c:	2b00      	cmp	r3, #0
 800780e:	d003      	beq.n	8007818 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 8306 	beq.w	8007e2e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	f000 8088 	beq.w	8007940 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2204      	movs	r2, #4
 8007834:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a7a      	ldr	r2, [pc, #488]	@ (8007a28 <HAL_DMA_IRQHandler+0xa08>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d04a      	beq.n	80078d8 <HAL_DMA_IRQHandler+0x8b8>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a79      	ldr	r2, [pc, #484]	@ (8007a2c <HAL_DMA_IRQHandler+0xa0c>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d045      	beq.n	80078d8 <HAL_DMA_IRQHandler+0x8b8>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a77      	ldr	r2, [pc, #476]	@ (8007a30 <HAL_DMA_IRQHandler+0xa10>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d040      	beq.n	80078d8 <HAL_DMA_IRQHandler+0x8b8>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a76      	ldr	r2, [pc, #472]	@ (8007a34 <HAL_DMA_IRQHandler+0xa14>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d03b      	beq.n	80078d8 <HAL_DMA_IRQHandler+0x8b8>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a74      	ldr	r2, [pc, #464]	@ (8007a38 <HAL_DMA_IRQHandler+0xa18>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d036      	beq.n	80078d8 <HAL_DMA_IRQHandler+0x8b8>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a73      	ldr	r2, [pc, #460]	@ (8007a3c <HAL_DMA_IRQHandler+0xa1c>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d031      	beq.n	80078d8 <HAL_DMA_IRQHandler+0x8b8>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a71      	ldr	r2, [pc, #452]	@ (8007a40 <HAL_DMA_IRQHandler+0xa20>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d02c      	beq.n	80078d8 <HAL_DMA_IRQHandler+0x8b8>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a70      	ldr	r2, [pc, #448]	@ (8007a44 <HAL_DMA_IRQHandler+0xa24>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d027      	beq.n	80078d8 <HAL_DMA_IRQHandler+0x8b8>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a6e      	ldr	r2, [pc, #440]	@ (8007a48 <HAL_DMA_IRQHandler+0xa28>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d022      	beq.n	80078d8 <HAL_DMA_IRQHandler+0x8b8>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a6d      	ldr	r2, [pc, #436]	@ (8007a4c <HAL_DMA_IRQHandler+0xa2c>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d01d      	beq.n	80078d8 <HAL_DMA_IRQHandler+0x8b8>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a6b      	ldr	r2, [pc, #428]	@ (8007a50 <HAL_DMA_IRQHandler+0xa30>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d018      	beq.n	80078d8 <HAL_DMA_IRQHandler+0x8b8>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a6a      	ldr	r2, [pc, #424]	@ (8007a54 <HAL_DMA_IRQHandler+0xa34>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d013      	beq.n	80078d8 <HAL_DMA_IRQHandler+0x8b8>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a68      	ldr	r2, [pc, #416]	@ (8007a58 <HAL_DMA_IRQHandler+0xa38>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d00e      	beq.n	80078d8 <HAL_DMA_IRQHandler+0x8b8>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a67      	ldr	r2, [pc, #412]	@ (8007a5c <HAL_DMA_IRQHandler+0xa3c>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d009      	beq.n	80078d8 <HAL_DMA_IRQHandler+0x8b8>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a65      	ldr	r2, [pc, #404]	@ (8007a60 <HAL_DMA_IRQHandler+0xa40>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d004      	beq.n	80078d8 <HAL_DMA_IRQHandler+0x8b8>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a64      	ldr	r2, [pc, #400]	@ (8007a64 <HAL_DMA_IRQHandler+0xa44>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d108      	bne.n	80078ea <HAL_DMA_IRQHandler+0x8ca>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f022 0201 	bic.w	r2, r2, #1
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	e007      	b.n	80078fa <HAL_DMA_IRQHandler+0x8da>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f022 0201 	bic.w	r2, r2, #1
 80078f8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	3301      	adds	r3, #1
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007902:	429a      	cmp	r2, r3
 8007904:	d307      	bcc.n	8007916 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1f2      	bne.n	80078fa <HAL_DMA_IRQHandler+0x8da>
 8007914:	e000      	b.n	8007918 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007916:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b00      	cmp	r3, #0
 8007924:	d004      	beq.n	8007930 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2203      	movs	r2, #3
 800792a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800792e:	e003      	b.n	8007938 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 8272 	beq.w	8007e2e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	4798      	blx	r3
 8007952:	e26c      	b.n	8007e2e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a43      	ldr	r2, [pc, #268]	@ (8007a68 <HAL_DMA_IRQHandler+0xa48>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d022      	beq.n	80079a4 <HAL_DMA_IRQHandler+0x984>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a42      	ldr	r2, [pc, #264]	@ (8007a6c <HAL_DMA_IRQHandler+0xa4c>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d01d      	beq.n	80079a4 <HAL_DMA_IRQHandler+0x984>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a40      	ldr	r2, [pc, #256]	@ (8007a70 <HAL_DMA_IRQHandler+0xa50>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d018      	beq.n	80079a4 <HAL_DMA_IRQHandler+0x984>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a3f      	ldr	r2, [pc, #252]	@ (8007a74 <HAL_DMA_IRQHandler+0xa54>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d013      	beq.n	80079a4 <HAL_DMA_IRQHandler+0x984>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a3d      	ldr	r2, [pc, #244]	@ (8007a78 <HAL_DMA_IRQHandler+0xa58>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d00e      	beq.n	80079a4 <HAL_DMA_IRQHandler+0x984>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a3c      	ldr	r2, [pc, #240]	@ (8007a7c <HAL_DMA_IRQHandler+0xa5c>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d009      	beq.n	80079a4 <HAL_DMA_IRQHandler+0x984>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a3a      	ldr	r2, [pc, #232]	@ (8007a80 <HAL_DMA_IRQHandler+0xa60>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d004      	beq.n	80079a4 <HAL_DMA_IRQHandler+0x984>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a39      	ldr	r2, [pc, #228]	@ (8007a84 <HAL_DMA_IRQHandler+0xa64>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d101      	bne.n	80079a8 <HAL_DMA_IRQHandler+0x988>
 80079a4:	2301      	movs	r3, #1
 80079a6:	e000      	b.n	80079aa <HAL_DMA_IRQHandler+0x98a>
 80079a8:	2300      	movs	r3, #0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 823f 	beq.w	8007e2e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079bc:	f003 031f 	and.w	r3, r3, #31
 80079c0:	2204      	movs	r2, #4
 80079c2:	409a      	lsls	r2, r3
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	4013      	ands	r3, r2
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 80cd 	beq.w	8007b68 <HAL_DMA_IRQHandler+0xb48>
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	f003 0304 	and.w	r3, r3, #4
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 80c7 	beq.w	8007b68 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079de:	f003 031f 	and.w	r3, r3, #31
 80079e2:	2204      	movs	r2, #4
 80079e4:	409a      	lsls	r2, r3
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d049      	beq.n	8007a88 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d109      	bne.n	8007a12 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 8210 	beq.w	8007e28 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a10:	e20a      	b.n	8007e28 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 8206 	beq.w	8007e28 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a24:	e200      	b.n	8007e28 <HAL_DMA_IRQHandler+0xe08>
 8007a26:	bf00      	nop
 8007a28:	40020010 	.word	0x40020010
 8007a2c:	40020028 	.word	0x40020028
 8007a30:	40020040 	.word	0x40020040
 8007a34:	40020058 	.word	0x40020058
 8007a38:	40020070 	.word	0x40020070
 8007a3c:	40020088 	.word	0x40020088
 8007a40:	400200a0 	.word	0x400200a0
 8007a44:	400200b8 	.word	0x400200b8
 8007a48:	40020410 	.word	0x40020410
 8007a4c:	40020428 	.word	0x40020428
 8007a50:	40020440 	.word	0x40020440
 8007a54:	40020458 	.word	0x40020458
 8007a58:	40020470 	.word	0x40020470
 8007a5c:	40020488 	.word	0x40020488
 8007a60:	400204a0 	.word	0x400204a0
 8007a64:	400204b8 	.word	0x400204b8
 8007a68:	58025408 	.word	0x58025408
 8007a6c:	5802541c 	.word	0x5802541c
 8007a70:	58025430 	.word	0x58025430
 8007a74:	58025444 	.word	0x58025444
 8007a78:	58025458 	.word	0x58025458
 8007a7c:	5802546c 	.word	0x5802546c
 8007a80:	58025480 	.word	0x58025480
 8007a84:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	f003 0320 	and.w	r3, r3, #32
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d160      	bne.n	8007b54 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a7f      	ldr	r2, [pc, #508]	@ (8007c94 <HAL_DMA_IRQHandler+0xc74>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d04a      	beq.n	8007b32 <HAL_DMA_IRQHandler+0xb12>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a7d      	ldr	r2, [pc, #500]	@ (8007c98 <HAL_DMA_IRQHandler+0xc78>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d045      	beq.n	8007b32 <HAL_DMA_IRQHandler+0xb12>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a7c      	ldr	r2, [pc, #496]	@ (8007c9c <HAL_DMA_IRQHandler+0xc7c>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d040      	beq.n	8007b32 <HAL_DMA_IRQHandler+0xb12>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a7a      	ldr	r2, [pc, #488]	@ (8007ca0 <HAL_DMA_IRQHandler+0xc80>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d03b      	beq.n	8007b32 <HAL_DMA_IRQHandler+0xb12>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a79      	ldr	r2, [pc, #484]	@ (8007ca4 <HAL_DMA_IRQHandler+0xc84>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d036      	beq.n	8007b32 <HAL_DMA_IRQHandler+0xb12>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a77      	ldr	r2, [pc, #476]	@ (8007ca8 <HAL_DMA_IRQHandler+0xc88>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d031      	beq.n	8007b32 <HAL_DMA_IRQHandler+0xb12>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a76      	ldr	r2, [pc, #472]	@ (8007cac <HAL_DMA_IRQHandler+0xc8c>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d02c      	beq.n	8007b32 <HAL_DMA_IRQHandler+0xb12>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a74      	ldr	r2, [pc, #464]	@ (8007cb0 <HAL_DMA_IRQHandler+0xc90>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d027      	beq.n	8007b32 <HAL_DMA_IRQHandler+0xb12>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a73      	ldr	r2, [pc, #460]	@ (8007cb4 <HAL_DMA_IRQHandler+0xc94>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d022      	beq.n	8007b32 <HAL_DMA_IRQHandler+0xb12>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a71      	ldr	r2, [pc, #452]	@ (8007cb8 <HAL_DMA_IRQHandler+0xc98>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d01d      	beq.n	8007b32 <HAL_DMA_IRQHandler+0xb12>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a70      	ldr	r2, [pc, #448]	@ (8007cbc <HAL_DMA_IRQHandler+0xc9c>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d018      	beq.n	8007b32 <HAL_DMA_IRQHandler+0xb12>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a6e      	ldr	r2, [pc, #440]	@ (8007cc0 <HAL_DMA_IRQHandler+0xca0>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d013      	beq.n	8007b32 <HAL_DMA_IRQHandler+0xb12>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a6d      	ldr	r2, [pc, #436]	@ (8007cc4 <HAL_DMA_IRQHandler+0xca4>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d00e      	beq.n	8007b32 <HAL_DMA_IRQHandler+0xb12>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a6b      	ldr	r2, [pc, #428]	@ (8007cc8 <HAL_DMA_IRQHandler+0xca8>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d009      	beq.n	8007b32 <HAL_DMA_IRQHandler+0xb12>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a6a      	ldr	r2, [pc, #424]	@ (8007ccc <HAL_DMA_IRQHandler+0xcac>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d004      	beq.n	8007b32 <HAL_DMA_IRQHandler+0xb12>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a68      	ldr	r2, [pc, #416]	@ (8007cd0 <HAL_DMA_IRQHandler+0xcb0>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d108      	bne.n	8007b44 <HAL_DMA_IRQHandler+0xb24>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f022 0208 	bic.w	r2, r2, #8
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	e007      	b.n	8007b54 <HAL_DMA_IRQHandler+0xb34>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 0204 	bic.w	r2, r2, #4
 8007b52:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 8165 	beq.w	8007e28 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b66:	e15f      	b.n	8007e28 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b6c:	f003 031f 	and.w	r3, r3, #31
 8007b70:	2202      	movs	r2, #2
 8007b72:	409a      	lsls	r2, r3
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	4013      	ands	r3, r2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 80c5 	beq.w	8007d08 <HAL_DMA_IRQHandler+0xce8>
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	f003 0302 	and.w	r3, r3, #2
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 80bf 	beq.w	8007d08 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b8e:	f003 031f 	and.w	r3, r3, #31
 8007b92:	2202      	movs	r2, #2
 8007b94:	409a      	lsls	r2, r3
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d018      	beq.n	8007bd6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d109      	bne.n	8007bc2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 813a 	beq.w	8007e2c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bc0:	e134      	b.n	8007e2c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 8130 	beq.w	8007e2c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bd4:	e12a      	b.n	8007e2c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	f003 0320 	and.w	r3, r3, #32
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f040 8089 	bne.w	8007cf4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a2b      	ldr	r2, [pc, #172]	@ (8007c94 <HAL_DMA_IRQHandler+0xc74>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d04a      	beq.n	8007c82 <HAL_DMA_IRQHandler+0xc62>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a29      	ldr	r2, [pc, #164]	@ (8007c98 <HAL_DMA_IRQHandler+0xc78>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d045      	beq.n	8007c82 <HAL_DMA_IRQHandler+0xc62>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a28      	ldr	r2, [pc, #160]	@ (8007c9c <HAL_DMA_IRQHandler+0xc7c>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d040      	beq.n	8007c82 <HAL_DMA_IRQHandler+0xc62>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a26      	ldr	r2, [pc, #152]	@ (8007ca0 <HAL_DMA_IRQHandler+0xc80>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d03b      	beq.n	8007c82 <HAL_DMA_IRQHandler+0xc62>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a25      	ldr	r2, [pc, #148]	@ (8007ca4 <HAL_DMA_IRQHandler+0xc84>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d036      	beq.n	8007c82 <HAL_DMA_IRQHandler+0xc62>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a23      	ldr	r2, [pc, #140]	@ (8007ca8 <HAL_DMA_IRQHandler+0xc88>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d031      	beq.n	8007c82 <HAL_DMA_IRQHandler+0xc62>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a22      	ldr	r2, [pc, #136]	@ (8007cac <HAL_DMA_IRQHandler+0xc8c>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d02c      	beq.n	8007c82 <HAL_DMA_IRQHandler+0xc62>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a20      	ldr	r2, [pc, #128]	@ (8007cb0 <HAL_DMA_IRQHandler+0xc90>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d027      	beq.n	8007c82 <HAL_DMA_IRQHandler+0xc62>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a1f      	ldr	r2, [pc, #124]	@ (8007cb4 <HAL_DMA_IRQHandler+0xc94>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d022      	beq.n	8007c82 <HAL_DMA_IRQHandler+0xc62>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a1d      	ldr	r2, [pc, #116]	@ (8007cb8 <HAL_DMA_IRQHandler+0xc98>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d01d      	beq.n	8007c82 <HAL_DMA_IRQHandler+0xc62>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8007cbc <HAL_DMA_IRQHandler+0xc9c>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d018      	beq.n	8007c82 <HAL_DMA_IRQHandler+0xc62>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a1a      	ldr	r2, [pc, #104]	@ (8007cc0 <HAL_DMA_IRQHandler+0xca0>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d013      	beq.n	8007c82 <HAL_DMA_IRQHandler+0xc62>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a19      	ldr	r2, [pc, #100]	@ (8007cc4 <HAL_DMA_IRQHandler+0xca4>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d00e      	beq.n	8007c82 <HAL_DMA_IRQHandler+0xc62>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a17      	ldr	r2, [pc, #92]	@ (8007cc8 <HAL_DMA_IRQHandler+0xca8>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d009      	beq.n	8007c82 <HAL_DMA_IRQHandler+0xc62>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a16      	ldr	r2, [pc, #88]	@ (8007ccc <HAL_DMA_IRQHandler+0xcac>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d004      	beq.n	8007c82 <HAL_DMA_IRQHandler+0xc62>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a14      	ldr	r2, [pc, #80]	@ (8007cd0 <HAL_DMA_IRQHandler+0xcb0>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d128      	bne.n	8007cd4 <HAL_DMA_IRQHandler+0xcb4>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f022 0214 	bic.w	r2, r2, #20
 8007c90:	601a      	str	r2, [r3, #0]
 8007c92:	e027      	b.n	8007ce4 <HAL_DMA_IRQHandler+0xcc4>
 8007c94:	40020010 	.word	0x40020010
 8007c98:	40020028 	.word	0x40020028
 8007c9c:	40020040 	.word	0x40020040
 8007ca0:	40020058 	.word	0x40020058
 8007ca4:	40020070 	.word	0x40020070
 8007ca8:	40020088 	.word	0x40020088
 8007cac:	400200a0 	.word	0x400200a0
 8007cb0:	400200b8 	.word	0x400200b8
 8007cb4:	40020410 	.word	0x40020410
 8007cb8:	40020428 	.word	0x40020428
 8007cbc:	40020440 	.word	0x40020440
 8007cc0:	40020458 	.word	0x40020458
 8007cc4:	40020470 	.word	0x40020470
 8007cc8:	40020488 	.word	0x40020488
 8007ccc:	400204a0 	.word	0x400204a0
 8007cd0:	400204b8 	.word	0x400204b8
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 020a 	bic.w	r2, r2, #10
 8007ce2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 8097 	beq.w	8007e2c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d06:	e091      	b.n	8007e2c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d0c:	f003 031f 	and.w	r3, r3, #31
 8007d10:	2208      	movs	r2, #8
 8007d12:	409a      	lsls	r2, r3
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	4013      	ands	r3, r2
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 8088 	beq.w	8007e2e <HAL_DMA_IRQHandler+0xe0e>
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	f003 0308 	and.w	r3, r3, #8
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 8082 	beq.w	8007e2e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a41      	ldr	r2, [pc, #260]	@ (8007e34 <HAL_DMA_IRQHandler+0xe14>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d04a      	beq.n	8007dca <HAL_DMA_IRQHandler+0xdaa>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a3f      	ldr	r2, [pc, #252]	@ (8007e38 <HAL_DMA_IRQHandler+0xe18>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d045      	beq.n	8007dca <HAL_DMA_IRQHandler+0xdaa>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a3e      	ldr	r2, [pc, #248]	@ (8007e3c <HAL_DMA_IRQHandler+0xe1c>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d040      	beq.n	8007dca <HAL_DMA_IRQHandler+0xdaa>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a3c      	ldr	r2, [pc, #240]	@ (8007e40 <HAL_DMA_IRQHandler+0xe20>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d03b      	beq.n	8007dca <HAL_DMA_IRQHandler+0xdaa>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a3b      	ldr	r2, [pc, #236]	@ (8007e44 <HAL_DMA_IRQHandler+0xe24>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d036      	beq.n	8007dca <HAL_DMA_IRQHandler+0xdaa>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a39      	ldr	r2, [pc, #228]	@ (8007e48 <HAL_DMA_IRQHandler+0xe28>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d031      	beq.n	8007dca <HAL_DMA_IRQHandler+0xdaa>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a38      	ldr	r2, [pc, #224]	@ (8007e4c <HAL_DMA_IRQHandler+0xe2c>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d02c      	beq.n	8007dca <HAL_DMA_IRQHandler+0xdaa>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a36      	ldr	r2, [pc, #216]	@ (8007e50 <HAL_DMA_IRQHandler+0xe30>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d027      	beq.n	8007dca <HAL_DMA_IRQHandler+0xdaa>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a35      	ldr	r2, [pc, #212]	@ (8007e54 <HAL_DMA_IRQHandler+0xe34>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d022      	beq.n	8007dca <HAL_DMA_IRQHandler+0xdaa>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a33      	ldr	r2, [pc, #204]	@ (8007e58 <HAL_DMA_IRQHandler+0xe38>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d01d      	beq.n	8007dca <HAL_DMA_IRQHandler+0xdaa>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a32      	ldr	r2, [pc, #200]	@ (8007e5c <HAL_DMA_IRQHandler+0xe3c>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d018      	beq.n	8007dca <HAL_DMA_IRQHandler+0xdaa>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a30      	ldr	r2, [pc, #192]	@ (8007e60 <HAL_DMA_IRQHandler+0xe40>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d013      	beq.n	8007dca <HAL_DMA_IRQHandler+0xdaa>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a2f      	ldr	r2, [pc, #188]	@ (8007e64 <HAL_DMA_IRQHandler+0xe44>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d00e      	beq.n	8007dca <HAL_DMA_IRQHandler+0xdaa>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a2d      	ldr	r2, [pc, #180]	@ (8007e68 <HAL_DMA_IRQHandler+0xe48>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d009      	beq.n	8007dca <HAL_DMA_IRQHandler+0xdaa>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a2c      	ldr	r2, [pc, #176]	@ (8007e6c <HAL_DMA_IRQHandler+0xe4c>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d004      	beq.n	8007dca <HAL_DMA_IRQHandler+0xdaa>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a2a      	ldr	r2, [pc, #168]	@ (8007e70 <HAL_DMA_IRQHandler+0xe50>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d108      	bne.n	8007ddc <HAL_DMA_IRQHandler+0xdbc>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f022 021c 	bic.w	r2, r2, #28
 8007dd8:	601a      	str	r2, [r3, #0]
 8007dda:	e007      	b.n	8007dec <HAL_DMA_IRQHandler+0xdcc>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f022 020e 	bic.w	r2, r2, #14
 8007dea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007df0:	f003 031f 	and.w	r3, r3, #31
 8007df4:	2201      	movs	r2, #1
 8007df6:	409a      	lsls	r2, r3
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d009      	beq.n	8007e2e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	4798      	blx	r3
 8007e22:	e004      	b.n	8007e2e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007e24:	bf00      	nop
 8007e26:	e002      	b.n	8007e2e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e28:	bf00      	nop
 8007e2a:	e000      	b.n	8007e2e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e2c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007e2e:	3728      	adds	r7, #40	@ 0x28
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	40020010 	.word	0x40020010
 8007e38:	40020028 	.word	0x40020028
 8007e3c:	40020040 	.word	0x40020040
 8007e40:	40020058 	.word	0x40020058
 8007e44:	40020070 	.word	0x40020070
 8007e48:	40020088 	.word	0x40020088
 8007e4c:	400200a0 	.word	0x400200a0
 8007e50:	400200b8 	.word	0x400200b8
 8007e54:	40020410 	.word	0x40020410
 8007e58:	40020428 	.word	0x40020428
 8007e5c:	40020440 	.word	0x40020440
 8007e60:	40020458 	.word	0x40020458
 8007e64:	40020470 	.word	0x40020470
 8007e68:	40020488 	.word	0x40020488
 8007e6c:	400204a0 	.word	0x400204a0
 8007e70:	400204b8 	.word	0x400204b8

08007e74 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b087      	sub	sp, #28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	607a      	str	r2, [r7, #4]
 8007e80:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e86:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e8c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a7f      	ldr	r2, [pc, #508]	@ (8008090 <DMA_SetConfig+0x21c>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d072      	beq.n	8007f7e <DMA_SetConfig+0x10a>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a7d      	ldr	r2, [pc, #500]	@ (8008094 <DMA_SetConfig+0x220>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d06d      	beq.n	8007f7e <DMA_SetConfig+0x10a>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a7c      	ldr	r2, [pc, #496]	@ (8008098 <DMA_SetConfig+0x224>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d068      	beq.n	8007f7e <DMA_SetConfig+0x10a>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a7a      	ldr	r2, [pc, #488]	@ (800809c <DMA_SetConfig+0x228>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d063      	beq.n	8007f7e <DMA_SetConfig+0x10a>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a79      	ldr	r2, [pc, #484]	@ (80080a0 <DMA_SetConfig+0x22c>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d05e      	beq.n	8007f7e <DMA_SetConfig+0x10a>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a77      	ldr	r2, [pc, #476]	@ (80080a4 <DMA_SetConfig+0x230>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d059      	beq.n	8007f7e <DMA_SetConfig+0x10a>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a76      	ldr	r2, [pc, #472]	@ (80080a8 <DMA_SetConfig+0x234>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d054      	beq.n	8007f7e <DMA_SetConfig+0x10a>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a74      	ldr	r2, [pc, #464]	@ (80080ac <DMA_SetConfig+0x238>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d04f      	beq.n	8007f7e <DMA_SetConfig+0x10a>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a73      	ldr	r2, [pc, #460]	@ (80080b0 <DMA_SetConfig+0x23c>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d04a      	beq.n	8007f7e <DMA_SetConfig+0x10a>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a71      	ldr	r2, [pc, #452]	@ (80080b4 <DMA_SetConfig+0x240>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d045      	beq.n	8007f7e <DMA_SetConfig+0x10a>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a70      	ldr	r2, [pc, #448]	@ (80080b8 <DMA_SetConfig+0x244>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d040      	beq.n	8007f7e <DMA_SetConfig+0x10a>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a6e      	ldr	r2, [pc, #440]	@ (80080bc <DMA_SetConfig+0x248>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d03b      	beq.n	8007f7e <DMA_SetConfig+0x10a>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a6d      	ldr	r2, [pc, #436]	@ (80080c0 <DMA_SetConfig+0x24c>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d036      	beq.n	8007f7e <DMA_SetConfig+0x10a>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a6b      	ldr	r2, [pc, #428]	@ (80080c4 <DMA_SetConfig+0x250>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d031      	beq.n	8007f7e <DMA_SetConfig+0x10a>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a6a      	ldr	r2, [pc, #424]	@ (80080c8 <DMA_SetConfig+0x254>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d02c      	beq.n	8007f7e <DMA_SetConfig+0x10a>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a68      	ldr	r2, [pc, #416]	@ (80080cc <DMA_SetConfig+0x258>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d027      	beq.n	8007f7e <DMA_SetConfig+0x10a>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a67      	ldr	r2, [pc, #412]	@ (80080d0 <DMA_SetConfig+0x25c>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d022      	beq.n	8007f7e <DMA_SetConfig+0x10a>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a65      	ldr	r2, [pc, #404]	@ (80080d4 <DMA_SetConfig+0x260>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d01d      	beq.n	8007f7e <DMA_SetConfig+0x10a>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a64      	ldr	r2, [pc, #400]	@ (80080d8 <DMA_SetConfig+0x264>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d018      	beq.n	8007f7e <DMA_SetConfig+0x10a>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a62      	ldr	r2, [pc, #392]	@ (80080dc <DMA_SetConfig+0x268>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d013      	beq.n	8007f7e <DMA_SetConfig+0x10a>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a61      	ldr	r2, [pc, #388]	@ (80080e0 <DMA_SetConfig+0x26c>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d00e      	beq.n	8007f7e <DMA_SetConfig+0x10a>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a5f      	ldr	r2, [pc, #380]	@ (80080e4 <DMA_SetConfig+0x270>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d009      	beq.n	8007f7e <DMA_SetConfig+0x10a>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a5e      	ldr	r2, [pc, #376]	@ (80080e8 <DMA_SetConfig+0x274>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d004      	beq.n	8007f7e <DMA_SetConfig+0x10a>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a5c      	ldr	r2, [pc, #368]	@ (80080ec <DMA_SetConfig+0x278>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d101      	bne.n	8007f82 <DMA_SetConfig+0x10e>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e000      	b.n	8007f84 <DMA_SetConfig+0x110>
 8007f82:	2300      	movs	r3, #0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00d      	beq.n	8007fa4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007f90:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d004      	beq.n	8007fa4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007fa2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a39      	ldr	r2, [pc, #228]	@ (8008090 <DMA_SetConfig+0x21c>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d04a      	beq.n	8008044 <DMA_SetConfig+0x1d0>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a38      	ldr	r2, [pc, #224]	@ (8008094 <DMA_SetConfig+0x220>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d045      	beq.n	8008044 <DMA_SetConfig+0x1d0>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a36      	ldr	r2, [pc, #216]	@ (8008098 <DMA_SetConfig+0x224>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d040      	beq.n	8008044 <DMA_SetConfig+0x1d0>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a35      	ldr	r2, [pc, #212]	@ (800809c <DMA_SetConfig+0x228>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d03b      	beq.n	8008044 <DMA_SetConfig+0x1d0>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a33      	ldr	r2, [pc, #204]	@ (80080a0 <DMA_SetConfig+0x22c>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d036      	beq.n	8008044 <DMA_SetConfig+0x1d0>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a32      	ldr	r2, [pc, #200]	@ (80080a4 <DMA_SetConfig+0x230>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d031      	beq.n	8008044 <DMA_SetConfig+0x1d0>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a30      	ldr	r2, [pc, #192]	@ (80080a8 <DMA_SetConfig+0x234>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d02c      	beq.n	8008044 <DMA_SetConfig+0x1d0>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a2f      	ldr	r2, [pc, #188]	@ (80080ac <DMA_SetConfig+0x238>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d027      	beq.n	8008044 <DMA_SetConfig+0x1d0>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a2d      	ldr	r2, [pc, #180]	@ (80080b0 <DMA_SetConfig+0x23c>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d022      	beq.n	8008044 <DMA_SetConfig+0x1d0>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a2c      	ldr	r2, [pc, #176]	@ (80080b4 <DMA_SetConfig+0x240>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d01d      	beq.n	8008044 <DMA_SetConfig+0x1d0>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a2a      	ldr	r2, [pc, #168]	@ (80080b8 <DMA_SetConfig+0x244>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d018      	beq.n	8008044 <DMA_SetConfig+0x1d0>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a29      	ldr	r2, [pc, #164]	@ (80080bc <DMA_SetConfig+0x248>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d013      	beq.n	8008044 <DMA_SetConfig+0x1d0>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a27      	ldr	r2, [pc, #156]	@ (80080c0 <DMA_SetConfig+0x24c>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d00e      	beq.n	8008044 <DMA_SetConfig+0x1d0>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a26      	ldr	r2, [pc, #152]	@ (80080c4 <DMA_SetConfig+0x250>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d009      	beq.n	8008044 <DMA_SetConfig+0x1d0>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a24      	ldr	r2, [pc, #144]	@ (80080c8 <DMA_SetConfig+0x254>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d004      	beq.n	8008044 <DMA_SetConfig+0x1d0>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a23      	ldr	r2, [pc, #140]	@ (80080cc <DMA_SetConfig+0x258>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d101      	bne.n	8008048 <DMA_SetConfig+0x1d4>
 8008044:	2301      	movs	r3, #1
 8008046:	e000      	b.n	800804a <DMA_SetConfig+0x1d6>
 8008048:	2300      	movs	r3, #0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d059      	beq.n	8008102 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008052:	f003 031f 	and.w	r3, r3, #31
 8008056:	223f      	movs	r2, #63	@ 0x3f
 8008058:	409a      	lsls	r2, r3
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800806c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	2b40      	cmp	r3, #64	@ 0x40
 800807c:	d138      	bne.n	80080f0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800808e:	e086      	b.n	800819e <DMA_SetConfig+0x32a>
 8008090:	40020010 	.word	0x40020010
 8008094:	40020028 	.word	0x40020028
 8008098:	40020040 	.word	0x40020040
 800809c:	40020058 	.word	0x40020058
 80080a0:	40020070 	.word	0x40020070
 80080a4:	40020088 	.word	0x40020088
 80080a8:	400200a0 	.word	0x400200a0
 80080ac:	400200b8 	.word	0x400200b8
 80080b0:	40020410 	.word	0x40020410
 80080b4:	40020428 	.word	0x40020428
 80080b8:	40020440 	.word	0x40020440
 80080bc:	40020458 	.word	0x40020458
 80080c0:	40020470 	.word	0x40020470
 80080c4:	40020488 	.word	0x40020488
 80080c8:	400204a0 	.word	0x400204a0
 80080cc:	400204b8 	.word	0x400204b8
 80080d0:	58025408 	.word	0x58025408
 80080d4:	5802541c 	.word	0x5802541c
 80080d8:	58025430 	.word	0x58025430
 80080dc:	58025444 	.word	0x58025444
 80080e0:	58025458 	.word	0x58025458
 80080e4:	5802546c 	.word	0x5802546c
 80080e8:	58025480 	.word	0x58025480
 80080ec:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	60da      	str	r2, [r3, #12]
}
 8008100:	e04d      	b.n	800819e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a29      	ldr	r2, [pc, #164]	@ (80081ac <DMA_SetConfig+0x338>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d022      	beq.n	8008152 <DMA_SetConfig+0x2de>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a27      	ldr	r2, [pc, #156]	@ (80081b0 <DMA_SetConfig+0x33c>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d01d      	beq.n	8008152 <DMA_SetConfig+0x2de>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a26      	ldr	r2, [pc, #152]	@ (80081b4 <DMA_SetConfig+0x340>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d018      	beq.n	8008152 <DMA_SetConfig+0x2de>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a24      	ldr	r2, [pc, #144]	@ (80081b8 <DMA_SetConfig+0x344>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d013      	beq.n	8008152 <DMA_SetConfig+0x2de>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a23      	ldr	r2, [pc, #140]	@ (80081bc <DMA_SetConfig+0x348>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d00e      	beq.n	8008152 <DMA_SetConfig+0x2de>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a21      	ldr	r2, [pc, #132]	@ (80081c0 <DMA_SetConfig+0x34c>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d009      	beq.n	8008152 <DMA_SetConfig+0x2de>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a20      	ldr	r2, [pc, #128]	@ (80081c4 <DMA_SetConfig+0x350>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d004      	beq.n	8008152 <DMA_SetConfig+0x2de>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a1e      	ldr	r2, [pc, #120]	@ (80081c8 <DMA_SetConfig+0x354>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d101      	bne.n	8008156 <DMA_SetConfig+0x2e2>
 8008152:	2301      	movs	r3, #1
 8008154:	e000      	b.n	8008158 <DMA_SetConfig+0x2e4>
 8008156:	2300      	movs	r3, #0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d020      	beq.n	800819e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008160:	f003 031f 	and.w	r3, r3, #31
 8008164:	2201      	movs	r2, #1
 8008166:	409a      	lsls	r2, r3
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	683a      	ldr	r2, [r7, #0]
 8008172:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	2b40      	cmp	r3, #64	@ 0x40
 800817a:	d108      	bne.n	800818e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	60da      	str	r2, [r3, #12]
}
 800818c:	e007      	b.n	800819e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	60da      	str	r2, [r3, #12]
}
 800819e:	bf00      	nop
 80081a0:	371c      	adds	r7, #28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	58025408 	.word	0x58025408
 80081b0:	5802541c 	.word	0x5802541c
 80081b4:	58025430 	.word	0x58025430
 80081b8:	58025444 	.word	0x58025444
 80081bc:	58025458 	.word	0x58025458
 80081c0:	5802546c 	.word	0x5802546c
 80081c4:	58025480 	.word	0x58025480
 80081c8:	58025494 	.word	0x58025494

080081cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a42      	ldr	r2, [pc, #264]	@ (80082e4 <DMA_CalcBaseAndBitshift+0x118>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d04a      	beq.n	8008274 <DMA_CalcBaseAndBitshift+0xa8>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a41      	ldr	r2, [pc, #260]	@ (80082e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d045      	beq.n	8008274 <DMA_CalcBaseAndBitshift+0xa8>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a3f      	ldr	r2, [pc, #252]	@ (80082ec <DMA_CalcBaseAndBitshift+0x120>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d040      	beq.n	8008274 <DMA_CalcBaseAndBitshift+0xa8>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a3e      	ldr	r2, [pc, #248]	@ (80082f0 <DMA_CalcBaseAndBitshift+0x124>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d03b      	beq.n	8008274 <DMA_CalcBaseAndBitshift+0xa8>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a3c      	ldr	r2, [pc, #240]	@ (80082f4 <DMA_CalcBaseAndBitshift+0x128>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d036      	beq.n	8008274 <DMA_CalcBaseAndBitshift+0xa8>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a3b      	ldr	r2, [pc, #236]	@ (80082f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d031      	beq.n	8008274 <DMA_CalcBaseAndBitshift+0xa8>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a39      	ldr	r2, [pc, #228]	@ (80082fc <DMA_CalcBaseAndBitshift+0x130>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d02c      	beq.n	8008274 <DMA_CalcBaseAndBitshift+0xa8>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a38      	ldr	r2, [pc, #224]	@ (8008300 <DMA_CalcBaseAndBitshift+0x134>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d027      	beq.n	8008274 <DMA_CalcBaseAndBitshift+0xa8>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a36      	ldr	r2, [pc, #216]	@ (8008304 <DMA_CalcBaseAndBitshift+0x138>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d022      	beq.n	8008274 <DMA_CalcBaseAndBitshift+0xa8>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a35      	ldr	r2, [pc, #212]	@ (8008308 <DMA_CalcBaseAndBitshift+0x13c>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d01d      	beq.n	8008274 <DMA_CalcBaseAndBitshift+0xa8>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a33      	ldr	r2, [pc, #204]	@ (800830c <DMA_CalcBaseAndBitshift+0x140>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d018      	beq.n	8008274 <DMA_CalcBaseAndBitshift+0xa8>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a32      	ldr	r2, [pc, #200]	@ (8008310 <DMA_CalcBaseAndBitshift+0x144>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d013      	beq.n	8008274 <DMA_CalcBaseAndBitshift+0xa8>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a30      	ldr	r2, [pc, #192]	@ (8008314 <DMA_CalcBaseAndBitshift+0x148>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d00e      	beq.n	8008274 <DMA_CalcBaseAndBitshift+0xa8>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a2f      	ldr	r2, [pc, #188]	@ (8008318 <DMA_CalcBaseAndBitshift+0x14c>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d009      	beq.n	8008274 <DMA_CalcBaseAndBitshift+0xa8>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a2d      	ldr	r2, [pc, #180]	@ (800831c <DMA_CalcBaseAndBitshift+0x150>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d004      	beq.n	8008274 <DMA_CalcBaseAndBitshift+0xa8>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a2c      	ldr	r2, [pc, #176]	@ (8008320 <DMA_CalcBaseAndBitshift+0x154>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d101      	bne.n	8008278 <DMA_CalcBaseAndBitshift+0xac>
 8008274:	2301      	movs	r3, #1
 8008276:	e000      	b.n	800827a <DMA_CalcBaseAndBitshift+0xae>
 8008278:	2300      	movs	r3, #0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d024      	beq.n	80082c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	b2db      	uxtb	r3, r3
 8008284:	3b10      	subs	r3, #16
 8008286:	4a27      	ldr	r2, [pc, #156]	@ (8008324 <DMA_CalcBaseAndBitshift+0x158>)
 8008288:	fba2 2303 	umull	r2, r3, r2, r3
 800828c:	091b      	lsrs	r3, r3, #4
 800828e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f003 0307 	and.w	r3, r3, #7
 8008296:	4a24      	ldr	r2, [pc, #144]	@ (8008328 <DMA_CalcBaseAndBitshift+0x15c>)
 8008298:	5cd3      	ldrb	r3, [r2, r3]
 800829a:	461a      	mov	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	d908      	bls.n	80082b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	461a      	mov	r2, r3
 80082ac:	4b1f      	ldr	r3, [pc, #124]	@ (800832c <DMA_CalcBaseAndBitshift+0x160>)
 80082ae:	4013      	ands	r3, r2
 80082b0:	1d1a      	adds	r2, r3, #4
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80082b6:	e00d      	b.n	80082d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	461a      	mov	r2, r3
 80082be:	4b1b      	ldr	r3, [pc, #108]	@ (800832c <DMA_CalcBaseAndBitshift+0x160>)
 80082c0:	4013      	ands	r3, r2
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80082c6:	e005      	b.n	80082d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	40020010 	.word	0x40020010
 80082e8:	40020028 	.word	0x40020028
 80082ec:	40020040 	.word	0x40020040
 80082f0:	40020058 	.word	0x40020058
 80082f4:	40020070 	.word	0x40020070
 80082f8:	40020088 	.word	0x40020088
 80082fc:	400200a0 	.word	0x400200a0
 8008300:	400200b8 	.word	0x400200b8
 8008304:	40020410 	.word	0x40020410
 8008308:	40020428 	.word	0x40020428
 800830c:	40020440 	.word	0x40020440
 8008310:	40020458 	.word	0x40020458
 8008314:	40020470 	.word	0x40020470
 8008318:	40020488 	.word	0x40020488
 800831c:	400204a0 	.word	0x400204a0
 8008320:	400204b8 	.word	0x400204b8
 8008324:	aaaaaaab 	.word	0xaaaaaaab
 8008328:	08010eb8 	.word	0x08010eb8
 800832c:	fffffc00 	.word	0xfffffc00

08008330 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008338:	2300      	movs	r3, #0
 800833a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d120      	bne.n	8008386 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008348:	2b03      	cmp	r3, #3
 800834a:	d858      	bhi.n	80083fe <DMA_CheckFifoParam+0xce>
 800834c:	a201      	add	r2, pc, #4	@ (adr r2, 8008354 <DMA_CheckFifoParam+0x24>)
 800834e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008352:	bf00      	nop
 8008354:	08008365 	.word	0x08008365
 8008358:	08008377 	.word	0x08008377
 800835c:	08008365 	.word	0x08008365
 8008360:	080083ff 	.word	0x080083ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008368:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d048      	beq.n	8008402 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008374:	e045      	b.n	8008402 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800837a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800837e:	d142      	bne.n	8008406 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008384:	e03f      	b.n	8008406 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800838e:	d123      	bne.n	80083d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008394:	2b03      	cmp	r3, #3
 8008396:	d838      	bhi.n	800840a <DMA_CheckFifoParam+0xda>
 8008398:	a201      	add	r2, pc, #4	@ (adr r2, 80083a0 <DMA_CheckFifoParam+0x70>)
 800839a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839e:	bf00      	nop
 80083a0:	080083b1 	.word	0x080083b1
 80083a4:	080083b7 	.word	0x080083b7
 80083a8:	080083b1 	.word	0x080083b1
 80083ac:	080083c9 	.word	0x080083c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	73fb      	strb	r3, [r7, #15]
        break;
 80083b4:	e030      	b.n	8008418 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d025      	beq.n	800840e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083c6:	e022      	b.n	800840e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80083d0:	d11f      	bne.n	8008412 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083d6:	e01c      	b.n	8008412 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d902      	bls.n	80083e6 <DMA_CheckFifoParam+0xb6>
 80083e0:	2b03      	cmp	r3, #3
 80083e2:	d003      	beq.n	80083ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80083e4:	e018      	b.n	8008418 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	73fb      	strb	r3, [r7, #15]
        break;
 80083ea:	e015      	b.n	8008418 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00e      	beq.n	8008416 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	73fb      	strb	r3, [r7, #15]
    break;
 80083fc:	e00b      	b.n	8008416 <DMA_CheckFifoParam+0xe6>
        break;
 80083fe:	bf00      	nop
 8008400:	e00a      	b.n	8008418 <DMA_CheckFifoParam+0xe8>
        break;
 8008402:	bf00      	nop
 8008404:	e008      	b.n	8008418 <DMA_CheckFifoParam+0xe8>
        break;
 8008406:	bf00      	nop
 8008408:	e006      	b.n	8008418 <DMA_CheckFifoParam+0xe8>
        break;
 800840a:	bf00      	nop
 800840c:	e004      	b.n	8008418 <DMA_CheckFifoParam+0xe8>
        break;
 800840e:	bf00      	nop
 8008410:	e002      	b.n	8008418 <DMA_CheckFifoParam+0xe8>
        break;
 8008412:	bf00      	nop
 8008414:	e000      	b.n	8008418 <DMA_CheckFifoParam+0xe8>
    break;
 8008416:	bf00      	nop
    }
  }

  return status;
 8008418:	7bfb      	ldrb	r3, [r7, #15]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop

08008428 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a38      	ldr	r2, [pc, #224]	@ (800851c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d022      	beq.n	8008486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a36      	ldr	r2, [pc, #216]	@ (8008520 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d01d      	beq.n	8008486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a35      	ldr	r2, [pc, #212]	@ (8008524 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d018      	beq.n	8008486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a33      	ldr	r2, [pc, #204]	@ (8008528 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d013      	beq.n	8008486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a32      	ldr	r2, [pc, #200]	@ (800852c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d00e      	beq.n	8008486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a30      	ldr	r2, [pc, #192]	@ (8008530 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d009      	beq.n	8008486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a2f      	ldr	r2, [pc, #188]	@ (8008534 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d004      	beq.n	8008486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a2d      	ldr	r2, [pc, #180]	@ (8008538 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d101      	bne.n	800848a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008486:	2301      	movs	r3, #1
 8008488:	e000      	b.n	800848c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800848a:	2300      	movs	r3, #0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d01a      	beq.n	80084c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	b2db      	uxtb	r3, r3
 8008496:	3b08      	subs	r3, #8
 8008498:	4a28      	ldr	r2, [pc, #160]	@ (800853c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800849a:	fba2 2303 	umull	r2, r3, r2, r3
 800849e:	091b      	lsrs	r3, r3, #4
 80084a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	4b26      	ldr	r3, [pc, #152]	@ (8008540 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80084a6:	4413      	add	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	461a      	mov	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a24      	ldr	r2, [pc, #144]	@ (8008544 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80084b4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f003 031f 	and.w	r3, r3, #31
 80084bc:	2201      	movs	r2, #1
 80084be:	409a      	lsls	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80084c4:	e024      	b.n	8008510 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	3b10      	subs	r3, #16
 80084ce:	4a1e      	ldr	r2, [pc, #120]	@ (8008548 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80084d0:	fba2 2303 	umull	r2, r3, r2, r3
 80084d4:	091b      	lsrs	r3, r3, #4
 80084d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	4a1c      	ldr	r2, [pc, #112]	@ (800854c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d806      	bhi.n	80084ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	4a1b      	ldr	r2, [pc, #108]	@ (8008550 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d902      	bls.n	80084ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	3308      	adds	r3, #8
 80084ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	4b18      	ldr	r3, [pc, #96]	@ (8008554 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80084f2:	4413      	add	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	461a      	mov	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a16      	ldr	r2, [pc, #88]	@ (8008558 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008500:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f003 031f 	and.w	r3, r3, #31
 8008508:	2201      	movs	r2, #1
 800850a:	409a      	lsls	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008510:	bf00      	nop
 8008512:	3714      	adds	r7, #20
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr
 800851c:	58025408 	.word	0x58025408
 8008520:	5802541c 	.word	0x5802541c
 8008524:	58025430 	.word	0x58025430
 8008528:	58025444 	.word	0x58025444
 800852c:	58025458 	.word	0x58025458
 8008530:	5802546c 	.word	0x5802546c
 8008534:	58025480 	.word	0x58025480
 8008538:	58025494 	.word	0x58025494
 800853c:	cccccccd 	.word	0xcccccccd
 8008540:	16009600 	.word	0x16009600
 8008544:	58025880 	.word	0x58025880
 8008548:	aaaaaaab 	.word	0xaaaaaaab
 800854c:	400204b8 	.word	0x400204b8
 8008550:	4002040f 	.word	0x4002040f
 8008554:	10008200 	.word	0x10008200
 8008558:	40020880 	.word	0x40020880

0800855c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	b2db      	uxtb	r3, r3
 800856a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d04a      	beq.n	8008608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2b08      	cmp	r3, #8
 8008576:	d847      	bhi.n	8008608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a25      	ldr	r2, [pc, #148]	@ (8008614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d022      	beq.n	80085c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a24      	ldr	r2, [pc, #144]	@ (8008618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d01d      	beq.n	80085c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a22      	ldr	r2, [pc, #136]	@ (800861c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d018      	beq.n	80085c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a21      	ldr	r2, [pc, #132]	@ (8008620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d013      	beq.n	80085c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a1f      	ldr	r2, [pc, #124]	@ (8008624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d00e      	beq.n	80085c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d009      	beq.n	80085c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a1c      	ldr	r2, [pc, #112]	@ (800862c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d004      	beq.n	80085c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a1b      	ldr	r2, [pc, #108]	@ (8008630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d101      	bne.n	80085cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80085c8:	2301      	movs	r3, #1
 80085ca:	e000      	b.n	80085ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80085cc:	2300      	movs	r3, #0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00a      	beq.n	80085e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	4b17      	ldr	r3, [pc, #92]	@ (8008634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80085d6:	4413      	add	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	461a      	mov	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a15      	ldr	r2, [pc, #84]	@ (8008638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80085e4:	671a      	str	r2, [r3, #112]	@ 0x70
 80085e6:	e009      	b.n	80085fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	4b14      	ldr	r3, [pc, #80]	@ (800863c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80085ec:	4413      	add	r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	461a      	mov	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a11      	ldr	r2, [pc, #68]	@ (8008640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80085fa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	3b01      	subs	r3, #1
 8008600:	2201      	movs	r2, #1
 8008602:	409a      	lsls	r2, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008608:	bf00      	nop
 800860a:	3714      	adds	r7, #20
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr
 8008614:	58025408 	.word	0x58025408
 8008618:	5802541c 	.word	0x5802541c
 800861c:	58025430 	.word	0x58025430
 8008620:	58025444 	.word	0x58025444
 8008624:	58025458 	.word	0x58025458
 8008628:	5802546c 	.word	0x5802546c
 800862c:	58025480 	.word	0x58025480
 8008630:	58025494 	.word	0x58025494
 8008634:	1600963f 	.word	0x1600963f
 8008638:	58025940 	.word	0x58025940
 800863c:	1000823f 	.word	0x1000823f
 8008640:	40020940 	.word	0x40020940

08008644 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008644:	b480      	push	{r7}
 8008646:	b089      	sub	sp, #36	@ 0x24
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800864e:	2300      	movs	r3, #0
 8008650:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008652:	4b86      	ldr	r3, [pc, #536]	@ (800886c <HAL_GPIO_Init+0x228>)
 8008654:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008656:	e18c      	b.n	8008972 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	2101      	movs	r1, #1
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	fa01 f303 	lsl.w	r3, r1, r3
 8008664:	4013      	ands	r3, r2
 8008666:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	f000 817e 	beq.w	800896c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	f003 0303 	and.w	r3, r3, #3
 8008678:	2b01      	cmp	r3, #1
 800867a:	d005      	beq.n	8008688 <HAL_GPIO_Init+0x44>
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	f003 0303 	and.w	r3, r3, #3
 8008684:	2b02      	cmp	r3, #2
 8008686:	d130      	bne.n	80086ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	005b      	lsls	r3, r3, #1
 8008692:	2203      	movs	r2, #3
 8008694:	fa02 f303 	lsl.w	r3, r2, r3
 8008698:	43db      	mvns	r3, r3
 800869a:	69ba      	ldr	r2, [r7, #24]
 800869c:	4013      	ands	r3, r2
 800869e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	68da      	ldr	r2, [r3, #12]
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	005b      	lsls	r3, r3, #1
 80086a8:	fa02 f303 	lsl.w	r3, r2, r3
 80086ac:	69ba      	ldr	r2, [r7, #24]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	69ba      	ldr	r2, [r7, #24]
 80086b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80086be:	2201      	movs	r2, #1
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	fa02 f303 	lsl.w	r3, r2, r3
 80086c6:	43db      	mvns	r3, r3
 80086c8:	69ba      	ldr	r2, [r7, #24]
 80086ca:	4013      	ands	r3, r2
 80086cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	091b      	lsrs	r3, r3, #4
 80086d4:	f003 0201 	and.w	r2, r3, #1
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	fa02 f303 	lsl.w	r3, r2, r3
 80086de:	69ba      	ldr	r2, [r7, #24]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	69ba      	ldr	r2, [r7, #24]
 80086e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	f003 0303 	and.w	r3, r3, #3
 80086f2:	2b03      	cmp	r3, #3
 80086f4:	d017      	beq.n	8008726 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	005b      	lsls	r3, r3, #1
 8008700:	2203      	movs	r2, #3
 8008702:	fa02 f303 	lsl.w	r3, r2, r3
 8008706:	43db      	mvns	r3, r3
 8008708:	69ba      	ldr	r2, [r7, #24]
 800870a:	4013      	ands	r3, r2
 800870c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	689a      	ldr	r2, [r3, #8]
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	fa02 f303 	lsl.w	r3, r2, r3
 800871a:	69ba      	ldr	r2, [r7, #24]
 800871c:	4313      	orrs	r3, r2
 800871e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	69ba      	ldr	r2, [r7, #24]
 8008724:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f003 0303 	and.w	r3, r3, #3
 800872e:	2b02      	cmp	r3, #2
 8008730:	d123      	bne.n	800877a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	08da      	lsrs	r2, r3, #3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	3208      	adds	r2, #8
 800873a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800873e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	f003 0307 	and.w	r3, r3, #7
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	220f      	movs	r2, #15
 800874a:	fa02 f303 	lsl.w	r3, r2, r3
 800874e:	43db      	mvns	r3, r3
 8008750:	69ba      	ldr	r2, [r7, #24]
 8008752:	4013      	ands	r3, r2
 8008754:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	691a      	ldr	r2, [r3, #16]
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	f003 0307 	and.w	r3, r3, #7
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	fa02 f303 	lsl.w	r3, r2, r3
 8008766:	69ba      	ldr	r2, [r7, #24]
 8008768:	4313      	orrs	r3, r2
 800876a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	08da      	lsrs	r2, r3, #3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	3208      	adds	r2, #8
 8008774:	69b9      	ldr	r1, [r7, #24]
 8008776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	005b      	lsls	r3, r3, #1
 8008784:	2203      	movs	r2, #3
 8008786:	fa02 f303 	lsl.w	r3, r2, r3
 800878a:	43db      	mvns	r3, r3
 800878c:	69ba      	ldr	r2, [r7, #24]
 800878e:	4013      	ands	r3, r2
 8008790:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	f003 0203 	and.w	r2, r3, #3
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	005b      	lsls	r3, r3, #1
 800879e:	fa02 f303 	lsl.w	r3, r2, r3
 80087a2:	69ba      	ldr	r2, [r7, #24]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	69ba      	ldr	r2, [r7, #24]
 80087ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 80d8 	beq.w	800896c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087bc:	4b2c      	ldr	r3, [pc, #176]	@ (8008870 <HAL_GPIO_Init+0x22c>)
 80087be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80087c2:	4a2b      	ldr	r2, [pc, #172]	@ (8008870 <HAL_GPIO_Init+0x22c>)
 80087c4:	f043 0302 	orr.w	r3, r3, #2
 80087c8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80087cc:	4b28      	ldr	r3, [pc, #160]	@ (8008870 <HAL_GPIO_Init+0x22c>)
 80087ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80087d2:	f003 0302 	and.w	r3, r3, #2
 80087d6:	60fb      	str	r3, [r7, #12]
 80087d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80087da:	4a26      	ldr	r2, [pc, #152]	@ (8008874 <HAL_GPIO_Init+0x230>)
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	089b      	lsrs	r3, r3, #2
 80087e0:	3302      	adds	r3, #2
 80087e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	f003 0303 	and.w	r3, r3, #3
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	220f      	movs	r2, #15
 80087f2:	fa02 f303 	lsl.w	r3, r2, r3
 80087f6:	43db      	mvns	r3, r3
 80087f8:	69ba      	ldr	r2, [r7, #24]
 80087fa:	4013      	ands	r3, r2
 80087fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a1d      	ldr	r2, [pc, #116]	@ (8008878 <HAL_GPIO_Init+0x234>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d04a      	beq.n	800889c <HAL_GPIO_Init+0x258>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a1c      	ldr	r2, [pc, #112]	@ (800887c <HAL_GPIO_Init+0x238>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d02b      	beq.n	8008866 <HAL_GPIO_Init+0x222>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a1b      	ldr	r2, [pc, #108]	@ (8008880 <HAL_GPIO_Init+0x23c>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d025      	beq.n	8008862 <HAL_GPIO_Init+0x21e>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a1a      	ldr	r2, [pc, #104]	@ (8008884 <HAL_GPIO_Init+0x240>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d01f      	beq.n	800885e <HAL_GPIO_Init+0x21a>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a19      	ldr	r2, [pc, #100]	@ (8008888 <HAL_GPIO_Init+0x244>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d019      	beq.n	800885a <HAL_GPIO_Init+0x216>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a18      	ldr	r2, [pc, #96]	@ (800888c <HAL_GPIO_Init+0x248>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d013      	beq.n	8008856 <HAL_GPIO_Init+0x212>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a17      	ldr	r2, [pc, #92]	@ (8008890 <HAL_GPIO_Init+0x24c>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d00d      	beq.n	8008852 <HAL_GPIO_Init+0x20e>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a16      	ldr	r2, [pc, #88]	@ (8008894 <HAL_GPIO_Init+0x250>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d007      	beq.n	800884e <HAL_GPIO_Init+0x20a>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a15      	ldr	r2, [pc, #84]	@ (8008898 <HAL_GPIO_Init+0x254>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d101      	bne.n	800884a <HAL_GPIO_Init+0x206>
 8008846:	2309      	movs	r3, #9
 8008848:	e029      	b.n	800889e <HAL_GPIO_Init+0x25a>
 800884a:	230a      	movs	r3, #10
 800884c:	e027      	b.n	800889e <HAL_GPIO_Init+0x25a>
 800884e:	2307      	movs	r3, #7
 8008850:	e025      	b.n	800889e <HAL_GPIO_Init+0x25a>
 8008852:	2306      	movs	r3, #6
 8008854:	e023      	b.n	800889e <HAL_GPIO_Init+0x25a>
 8008856:	2305      	movs	r3, #5
 8008858:	e021      	b.n	800889e <HAL_GPIO_Init+0x25a>
 800885a:	2304      	movs	r3, #4
 800885c:	e01f      	b.n	800889e <HAL_GPIO_Init+0x25a>
 800885e:	2303      	movs	r3, #3
 8008860:	e01d      	b.n	800889e <HAL_GPIO_Init+0x25a>
 8008862:	2302      	movs	r3, #2
 8008864:	e01b      	b.n	800889e <HAL_GPIO_Init+0x25a>
 8008866:	2301      	movs	r3, #1
 8008868:	e019      	b.n	800889e <HAL_GPIO_Init+0x25a>
 800886a:	bf00      	nop
 800886c:	58000080 	.word	0x58000080
 8008870:	58024400 	.word	0x58024400
 8008874:	58000400 	.word	0x58000400
 8008878:	58020000 	.word	0x58020000
 800887c:	58020400 	.word	0x58020400
 8008880:	58020800 	.word	0x58020800
 8008884:	58020c00 	.word	0x58020c00
 8008888:	58021000 	.word	0x58021000
 800888c:	58021400 	.word	0x58021400
 8008890:	58021800 	.word	0x58021800
 8008894:	58021c00 	.word	0x58021c00
 8008898:	58022400 	.word	0x58022400
 800889c:	2300      	movs	r3, #0
 800889e:	69fa      	ldr	r2, [r7, #28]
 80088a0:	f002 0203 	and.w	r2, r2, #3
 80088a4:	0092      	lsls	r2, r2, #2
 80088a6:	4093      	lsls	r3, r2
 80088a8:	69ba      	ldr	r2, [r7, #24]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80088ae:	4938      	ldr	r1, [pc, #224]	@ (8008990 <HAL_GPIO_Init+0x34c>)
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	089b      	lsrs	r3, r3, #2
 80088b4:	3302      	adds	r3, #2
 80088b6:	69ba      	ldr	r2, [r7, #24]
 80088b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80088bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	43db      	mvns	r3, r3
 80088c8:	69ba      	ldr	r2, [r7, #24]
 80088ca:	4013      	ands	r3, r2
 80088cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d003      	beq.n	80088e2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80088da:	69ba      	ldr	r2, [r7, #24]
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	4313      	orrs	r3, r2
 80088e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80088e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80088ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	43db      	mvns	r3, r3
 80088f6:	69ba      	ldr	r2, [r7, #24]
 80088f8:	4013      	ands	r3, r2
 80088fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d003      	beq.n	8008910 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008908:	69ba      	ldr	r2, [r7, #24]
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	4313      	orrs	r3, r2
 800890e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008910:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	43db      	mvns	r3, r3
 8008922:	69ba      	ldr	r2, [r7, #24]
 8008924:	4013      	ands	r3, r2
 8008926:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d003      	beq.n	800893c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008934:	69ba      	ldr	r2, [r7, #24]
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	4313      	orrs	r3, r2
 800893a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	69ba      	ldr	r2, [r7, #24]
 8008940:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	43db      	mvns	r3, r3
 800894c:	69ba      	ldr	r2, [r7, #24]
 800894e:	4013      	ands	r3, r2
 8008950:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800895a:	2b00      	cmp	r3, #0
 800895c:	d003      	beq.n	8008966 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800895e:	69ba      	ldr	r2, [r7, #24]
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	4313      	orrs	r3, r2
 8008964:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	69ba      	ldr	r2, [r7, #24]
 800896a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	3301      	adds	r3, #1
 8008970:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	fa22 f303 	lsr.w	r3, r2, r3
 800897c:	2b00      	cmp	r3, #0
 800897e:	f47f ae6b 	bne.w	8008658 <HAL_GPIO_Init+0x14>
  }
}
 8008982:	bf00      	nop
 8008984:	bf00      	nop
 8008986:	3724      	adds	r7, #36	@ 0x24
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr
 8008990:	58000400 	.word	0x58000400

08008994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	460b      	mov	r3, r1
 800899e:	807b      	strh	r3, [r7, #2]
 80089a0:	4613      	mov	r3, r2
 80089a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80089a4:	787b      	ldrb	r3, [r7, #1]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d003      	beq.n	80089b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80089aa:	887a      	ldrh	r2, [r7, #2]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80089b0:	e003      	b.n	80089ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80089b2:	887b      	ldrh	r3, [r7, #2]
 80089b4:	041a      	lsls	r2, r3, #16
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	619a      	str	r2, [r3, #24]
}
 80089ba:	bf00      	nop
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80089c6:	b480      	push	{r7}
 80089c8:	b085      	sub	sp, #20
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
 80089ce:	460b      	mov	r3, r1
 80089d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80089d8:	887a      	ldrh	r2, [r7, #2]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	4013      	ands	r3, r2
 80089de:	041a      	lsls	r2, r3, #16
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	43d9      	mvns	r1, r3
 80089e4:	887b      	ldrh	r3, [r7, #2]
 80089e6:	400b      	ands	r3, r1
 80089e8:	431a      	orrs	r2, r3
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	619a      	str	r2, [r3, #24]
}
 80089ee:	bf00      	nop
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b082      	sub	sp, #8
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	4603      	mov	r3, r0
 8008a02:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008a04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a08:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008a0c:	88fb      	ldrh	r3, [r7, #6]
 8008a0e:	4013      	ands	r3, r2
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d008      	beq.n	8008a26 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008a14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008a18:	88fb      	ldrh	r3, [r7, #6]
 8008a1a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008a1e:	88fb      	ldrh	r3, [r7, #6]
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7f8 ff5d 	bl	80018e0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008a26:	bf00      	nop
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
	...

08008a30 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008a38:	4b19      	ldr	r3, [pc, #100]	@ (8008aa0 <HAL_PWREx_ConfigSupply+0x70>)
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	f003 0304 	and.w	r3, r3, #4
 8008a40:	2b04      	cmp	r3, #4
 8008a42:	d00a      	beq.n	8008a5a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008a44:	4b16      	ldr	r3, [pc, #88]	@ (8008aa0 <HAL_PWREx_ConfigSupply+0x70>)
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	f003 0307 	and.w	r3, r3, #7
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d001      	beq.n	8008a56 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	e01f      	b.n	8008a96 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	e01d      	b.n	8008a96 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008a5a:	4b11      	ldr	r3, [pc, #68]	@ (8008aa0 <HAL_PWREx_ConfigSupply+0x70>)
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	f023 0207 	bic.w	r2, r3, #7
 8008a62:	490f      	ldr	r1, [pc, #60]	@ (8008aa0 <HAL_PWREx_ConfigSupply+0x70>)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008a6a:	f7fa fdb5 	bl	80035d8 <HAL_GetTick>
 8008a6e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008a70:	e009      	b.n	8008a86 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008a72:	f7fa fdb1 	bl	80035d8 <HAL_GetTick>
 8008a76:	4602      	mov	r2, r0
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008a80:	d901      	bls.n	8008a86 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e007      	b.n	8008a96 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008a86:	4b06      	ldr	r3, [pc, #24]	@ (8008aa0 <HAL_PWREx_ConfigSupply+0x70>)
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a92:	d1ee      	bne.n	8008a72 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	58024800 	.word	0x58024800

08008aa4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b08c      	sub	sp, #48	@ 0x30
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d101      	bne.n	8008ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e3c8      	b.n	8009248 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	f000 8087 	beq.w	8008bd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ac4:	4b88      	ldr	r3, [pc, #544]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ace:	4b86      	ldr	r3, [pc, #536]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad6:	2b10      	cmp	r3, #16
 8008ad8:	d007      	beq.n	8008aea <HAL_RCC_OscConfig+0x46>
 8008ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008adc:	2b18      	cmp	r3, #24
 8008ade:	d110      	bne.n	8008b02 <HAL_RCC_OscConfig+0x5e>
 8008ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae2:	f003 0303 	and.w	r3, r3, #3
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d10b      	bne.n	8008b02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008aea:	4b7f      	ldr	r3, [pc, #508]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d06c      	beq.n	8008bd0 <HAL_RCC_OscConfig+0x12c>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d168      	bne.n	8008bd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e3a2      	b.n	8009248 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b0a:	d106      	bne.n	8008b1a <HAL_RCC_OscConfig+0x76>
 8008b0c:	4b76      	ldr	r3, [pc, #472]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a75      	ldr	r2, [pc, #468]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008b12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b16:	6013      	str	r3, [r2, #0]
 8008b18:	e02e      	b.n	8008b78 <HAL_RCC_OscConfig+0xd4>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10c      	bne.n	8008b3c <HAL_RCC_OscConfig+0x98>
 8008b22:	4b71      	ldr	r3, [pc, #452]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a70      	ldr	r2, [pc, #448]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008b28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b2c:	6013      	str	r3, [r2, #0]
 8008b2e:	4b6e      	ldr	r3, [pc, #440]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a6d      	ldr	r2, [pc, #436]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008b34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b38:	6013      	str	r3, [r2, #0]
 8008b3a:	e01d      	b.n	8008b78 <HAL_RCC_OscConfig+0xd4>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b44:	d10c      	bne.n	8008b60 <HAL_RCC_OscConfig+0xbc>
 8008b46:	4b68      	ldr	r3, [pc, #416]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a67      	ldr	r2, [pc, #412]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008b4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b50:	6013      	str	r3, [r2, #0]
 8008b52:	4b65      	ldr	r3, [pc, #404]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a64      	ldr	r2, [pc, #400]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b5c:	6013      	str	r3, [r2, #0]
 8008b5e:	e00b      	b.n	8008b78 <HAL_RCC_OscConfig+0xd4>
 8008b60:	4b61      	ldr	r3, [pc, #388]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a60      	ldr	r2, [pc, #384]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008b66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b6a:	6013      	str	r3, [r2, #0]
 8008b6c:	4b5e      	ldr	r3, [pc, #376]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a5d      	ldr	r2, [pc, #372]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008b72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d013      	beq.n	8008ba8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b80:	f7fa fd2a 	bl	80035d8 <HAL_GetTick>
 8008b84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b86:	e008      	b.n	8008b9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b88:	f7fa fd26 	bl	80035d8 <HAL_GetTick>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	2b64      	cmp	r3, #100	@ 0x64
 8008b94:	d901      	bls.n	8008b9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e356      	b.n	8009248 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b9a:	4b53      	ldr	r3, [pc, #332]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d0f0      	beq.n	8008b88 <HAL_RCC_OscConfig+0xe4>
 8008ba6:	e014      	b.n	8008bd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ba8:	f7fa fd16 	bl	80035d8 <HAL_GetTick>
 8008bac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008bae:	e008      	b.n	8008bc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bb0:	f7fa fd12 	bl	80035d8 <HAL_GetTick>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	2b64      	cmp	r3, #100	@ 0x64
 8008bbc:	d901      	bls.n	8008bc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e342      	b.n	8009248 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008bc2:	4b49      	ldr	r3, [pc, #292]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1f0      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x10c>
 8008bce:	e000      	b.n	8008bd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 0302 	and.w	r3, r3, #2
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f000 808c 	beq.w	8008cf8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008be0:	4b41      	ldr	r3, [pc, #260]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008be8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008bea:	4b3f      	ldr	r3, [pc, #252]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008bf0:	6a3b      	ldr	r3, [r7, #32]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d007      	beq.n	8008c06 <HAL_RCC_OscConfig+0x162>
 8008bf6:	6a3b      	ldr	r3, [r7, #32]
 8008bf8:	2b18      	cmp	r3, #24
 8008bfa:	d137      	bne.n	8008c6c <HAL_RCC_OscConfig+0x1c8>
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	f003 0303 	and.w	r3, r3, #3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d132      	bne.n	8008c6c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c06:	4b38      	ldr	r3, [pc, #224]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0304 	and.w	r3, r3, #4
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d005      	beq.n	8008c1e <HAL_RCC_OscConfig+0x17a>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d101      	bne.n	8008c1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e314      	b.n	8009248 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008c1e:	4b32      	ldr	r3, [pc, #200]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f023 0219 	bic.w	r2, r3, #25
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	492f      	ldr	r1, [pc, #188]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c30:	f7fa fcd2 	bl	80035d8 <HAL_GetTick>
 8008c34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c36:	e008      	b.n	8008c4a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c38:	f7fa fcce 	bl	80035d8 <HAL_GetTick>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c40:	1ad3      	subs	r3, r2, r3
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d901      	bls.n	8008c4a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	e2fe      	b.n	8009248 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c4a:	4b27      	ldr	r3, [pc, #156]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 0304 	and.w	r3, r3, #4
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d0f0      	beq.n	8008c38 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c56:	4b24      	ldr	r3, [pc, #144]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	061b      	lsls	r3, r3, #24
 8008c64:	4920      	ldr	r1, [pc, #128]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008c66:	4313      	orrs	r3, r2
 8008c68:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c6a:	e045      	b.n	8008cf8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d026      	beq.n	8008cc2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008c74:	4b1c      	ldr	r3, [pc, #112]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f023 0219 	bic.w	r2, r3, #25
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	4919      	ldr	r1, [pc, #100]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008c82:	4313      	orrs	r3, r2
 8008c84:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c86:	f7fa fca7 	bl	80035d8 <HAL_GetTick>
 8008c8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c8c:	e008      	b.n	8008ca0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c8e:	f7fa fca3 	bl	80035d8 <HAL_GetTick>
 8008c92:	4602      	mov	r2, r0
 8008c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c96:	1ad3      	subs	r3, r2, r3
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d901      	bls.n	8008ca0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e2d3      	b.n	8009248 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ca0:	4b11      	ldr	r3, [pc, #68]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 0304 	and.w	r3, r3, #4
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d0f0      	beq.n	8008c8e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cac:	4b0e      	ldr	r3, [pc, #56]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	061b      	lsls	r3, r3, #24
 8008cba:	490b      	ldr	r1, [pc, #44]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	604b      	str	r3, [r1, #4]
 8008cc0:	e01a      	b.n	8008cf8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cc2:	4b09      	ldr	r3, [pc, #36]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a08      	ldr	r2, [pc, #32]	@ (8008ce8 <HAL_RCC_OscConfig+0x244>)
 8008cc8:	f023 0301 	bic.w	r3, r3, #1
 8008ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cce:	f7fa fc83 	bl	80035d8 <HAL_GetTick>
 8008cd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008cd4:	e00a      	b.n	8008cec <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008cd6:	f7fa fc7f 	bl	80035d8 <HAL_GetTick>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d903      	bls.n	8008cec <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e2af      	b.n	8009248 <HAL_RCC_OscConfig+0x7a4>
 8008ce8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008cec:	4b96      	ldr	r3, [pc, #600]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0304 	and.w	r3, r3, #4
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1ee      	bne.n	8008cd6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0310 	and.w	r3, r3, #16
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d06a      	beq.n	8008dda <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d04:	4b90      	ldr	r3, [pc, #576]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d0c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d0e:	4b8e      	ldr	r3, [pc, #568]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d12:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	2b08      	cmp	r3, #8
 8008d18:	d007      	beq.n	8008d2a <HAL_RCC_OscConfig+0x286>
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	2b18      	cmp	r3, #24
 8008d1e:	d11b      	bne.n	8008d58 <HAL_RCC_OscConfig+0x2b4>
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	f003 0303 	and.w	r3, r3, #3
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d116      	bne.n	8008d58 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008d2a:	4b87      	ldr	r3, [pc, #540]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d005      	beq.n	8008d42 <HAL_RCC_OscConfig+0x29e>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	69db      	ldr	r3, [r3, #28]
 8008d3a:	2b80      	cmp	r3, #128	@ 0x80
 8008d3c:	d001      	beq.n	8008d42 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e282      	b.n	8009248 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d42:	4b81      	ldr	r3, [pc, #516]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a1b      	ldr	r3, [r3, #32]
 8008d4e:	061b      	lsls	r3, r3, #24
 8008d50:	497d      	ldr	r1, [pc, #500]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008d56:	e040      	b.n	8008dda <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	69db      	ldr	r3, [r3, #28]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d023      	beq.n	8008da8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008d60:	4b79      	ldr	r3, [pc, #484]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a78      	ldr	r2, [pc, #480]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d6c:	f7fa fc34 	bl	80035d8 <HAL_GetTick>
 8008d70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d72:	e008      	b.n	8008d86 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008d74:	f7fa fc30 	bl	80035d8 <HAL_GetTick>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	d901      	bls.n	8008d86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008d82:	2303      	movs	r3, #3
 8008d84:	e260      	b.n	8009248 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d86:	4b70      	ldr	r3, [pc, #448]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d0f0      	beq.n	8008d74 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d92:	4b6d      	ldr	r3, [pc, #436]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	061b      	lsls	r3, r3, #24
 8008da0:	4969      	ldr	r1, [pc, #420]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008da2:	4313      	orrs	r3, r2
 8008da4:	60cb      	str	r3, [r1, #12]
 8008da6:	e018      	b.n	8008dda <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008da8:	4b67      	ldr	r3, [pc, #412]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a66      	ldr	r2, [pc, #408]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008dae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db4:	f7fa fc10 	bl	80035d8 <HAL_GetTick>
 8008db8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008dba:	e008      	b.n	8008dce <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008dbc:	f7fa fc0c 	bl	80035d8 <HAL_GetTick>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d901      	bls.n	8008dce <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e23c      	b.n	8009248 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008dce:	4b5e      	ldr	r3, [pc, #376]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1f0      	bne.n	8008dbc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0308 	and.w	r3, r3, #8
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d036      	beq.n	8008e54 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d019      	beq.n	8008e22 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008dee:	4b56      	ldr	r3, [pc, #344]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008df2:	4a55      	ldr	r2, [pc, #340]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008df4:	f043 0301 	orr.w	r3, r3, #1
 8008df8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dfa:	f7fa fbed 	bl	80035d8 <HAL_GetTick>
 8008dfe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008e00:	e008      	b.n	8008e14 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e02:	f7fa fbe9 	bl	80035d8 <HAL_GetTick>
 8008e06:	4602      	mov	r2, r0
 8008e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0a:	1ad3      	subs	r3, r2, r3
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d901      	bls.n	8008e14 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008e10:	2303      	movs	r3, #3
 8008e12:	e219      	b.n	8009248 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008e14:	4b4c      	ldr	r3, [pc, #304]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e18:	f003 0302 	and.w	r3, r3, #2
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d0f0      	beq.n	8008e02 <HAL_RCC_OscConfig+0x35e>
 8008e20:	e018      	b.n	8008e54 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e22:	4b49      	ldr	r3, [pc, #292]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e26:	4a48      	ldr	r2, [pc, #288]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008e28:	f023 0301 	bic.w	r3, r3, #1
 8008e2c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e2e:	f7fa fbd3 	bl	80035d8 <HAL_GetTick>
 8008e32:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008e34:	e008      	b.n	8008e48 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e36:	f7fa fbcf 	bl	80035d8 <HAL_GetTick>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	d901      	bls.n	8008e48 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e1ff      	b.n	8009248 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008e48:	4b3f      	ldr	r3, [pc, #252]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008e4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e4c:	f003 0302 	and.w	r3, r3, #2
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1f0      	bne.n	8008e36 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 0320 	and.w	r3, r3, #32
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d036      	beq.n	8008ece <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d019      	beq.n	8008e9c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008e68:	4b37      	ldr	r3, [pc, #220]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a36      	ldr	r2, [pc, #216]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008e6e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008e72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008e74:	f7fa fbb0 	bl	80035d8 <HAL_GetTick>
 8008e78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008e7a:	e008      	b.n	8008e8e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e7c:	f7fa fbac 	bl	80035d8 <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d901      	bls.n	8008e8e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e1dc      	b.n	8009248 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008e8e:	4b2e      	ldr	r3, [pc, #184]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d0f0      	beq.n	8008e7c <HAL_RCC_OscConfig+0x3d8>
 8008e9a:	e018      	b.n	8008ece <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a29      	ldr	r2, [pc, #164]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008ea2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ea6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ea8:	f7fa fb96 	bl	80035d8 <HAL_GetTick>
 8008eac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008eae:	e008      	b.n	8008ec2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008eb0:	f7fa fb92 	bl	80035d8 <HAL_GetTick>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d901      	bls.n	8008ec2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e1c2      	b.n	8009248 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ec2:	4b21      	ldr	r3, [pc, #132]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1f0      	bne.n	8008eb0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 0304 	and.w	r3, r3, #4
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f000 8086 	beq.w	8008fe8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008edc:	4b1b      	ldr	r3, [pc, #108]	@ (8008f4c <HAL_RCC_OscConfig+0x4a8>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8008f4c <HAL_RCC_OscConfig+0x4a8>)
 8008ee2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ee6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ee8:	f7fa fb76 	bl	80035d8 <HAL_GetTick>
 8008eec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008eee:	e008      	b.n	8008f02 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ef0:	f7fa fb72 	bl	80035d8 <HAL_GetTick>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	2b64      	cmp	r3, #100	@ 0x64
 8008efc:	d901      	bls.n	8008f02 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008efe:	2303      	movs	r3, #3
 8008f00:	e1a2      	b.n	8009248 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f02:	4b12      	ldr	r3, [pc, #72]	@ (8008f4c <HAL_RCC_OscConfig+0x4a8>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d0f0      	beq.n	8008ef0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d106      	bne.n	8008f24 <HAL_RCC_OscConfig+0x480>
 8008f16:	4b0c      	ldr	r3, [pc, #48]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f1a:	4a0b      	ldr	r2, [pc, #44]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008f1c:	f043 0301 	orr.w	r3, r3, #1
 8008f20:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f22:	e032      	b.n	8008f8a <HAL_RCC_OscConfig+0x4e6>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d111      	bne.n	8008f50 <HAL_RCC_OscConfig+0x4ac>
 8008f2c:	4b06      	ldr	r3, [pc, #24]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f30:	4a05      	ldr	r2, [pc, #20]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008f32:	f023 0301 	bic.w	r3, r3, #1
 8008f36:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f38:	4b03      	ldr	r3, [pc, #12]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f3c:	4a02      	ldr	r2, [pc, #8]	@ (8008f48 <HAL_RCC_OscConfig+0x4a4>)
 8008f3e:	f023 0304 	bic.w	r3, r3, #4
 8008f42:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f44:	e021      	b.n	8008f8a <HAL_RCC_OscConfig+0x4e6>
 8008f46:	bf00      	nop
 8008f48:	58024400 	.word	0x58024400
 8008f4c:	58024800 	.word	0x58024800
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	2b05      	cmp	r3, #5
 8008f56:	d10c      	bne.n	8008f72 <HAL_RCC_OscConfig+0x4ce>
 8008f58:	4b83      	ldr	r3, [pc, #524]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 8008f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f5c:	4a82      	ldr	r2, [pc, #520]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 8008f5e:	f043 0304 	orr.w	r3, r3, #4
 8008f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f64:	4b80      	ldr	r3, [pc, #512]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 8008f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f68:	4a7f      	ldr	r2, [pc, #508]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 8008f6a:	f043 0301 	orr.w	r3, r3, #1
 8008f6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f70:	e00b      	b.n	8008f8a <HAL_RCC_OscConfig+0x4e6>
 8008f72:	4b7d      	ldr	r3, [pc, #500]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 8008f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f76:	4a7c      	ldr	r2, [pc, #496]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 8008f78:	f023 0301 	bic.w	r3, r3, #1
 8008f7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008f7e:	4b7a      	ldr	r3, [pc, #488]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 8008f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f82:	4a79      	ldr	r2, [pc, #484]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 8008f84:	f023 0304 	bic.w	r3, r3, #4
 8008f88:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d015      	beq.n	8008fbe <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f92:	f7fa fb21 	bl	80035d8 <HAL_GetTick>
 8008f96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f98:	e00a      	b.n	8008fb0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f9a:	f7fa fb1d 	bl	80035d8 <HAL_GetTick>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa2:	1ad3      	subs	r3, r2, r3
 8008fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d901      	bls.n	8008fb0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008fac:	2303      	movs	r3, #3
 8008fae:	e14b      	b.n	8009248 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fb0:	4b6d      	ldr	r3, [pc, #436]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 8008fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fb4:	f003 0302 	and.w	r3, r3, #2
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d0ee      	beq.n	8008f9a <HAL_RCC_OscConfig+0x4f6>
 8008fbc:	e014      	b.n	8008fe8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fbe:	f7fa fb0b 	bl	80035d8 <HAL_GetTick>
 8008fc2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008fc4:	e00a      	b.n	8008fdc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fc6:	f7fa fb07 	bl	80035d8 <HAL_GetTick>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fce:	1ad3      	subs	r3, r2, r3
 8008fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d901      	bls.n	8008fdc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e135      	b.n	8009248 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008fdc:	4b62      	ldr	r3, [pc, #392]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 8008fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fe0:	f003 0302 	and.w	r3, r3, #2
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d1ee      	bne.n	8008fc6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f000 812a 	beq.w	8009246 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008ff2:	4b5d      	ldr	r3, [pc, #372]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ffa:	2b18      	cmp	r3, #24
 8008ffc:	f000 80ba 	beq.w	8009174 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009004:	2b02      	cmp	r3, #2
 8009006:	f040 8095 	bne.w	8009134 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800900a:	4b57      	ldr	r3, [pc, #348]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a56      	ldr	r2, [pc, #344]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 8009010:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009016:	f7fa fadf 	bl	80035d8 <HAL_GetTick>
 800901a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800901c:	e008      	b.n	8009030 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800901e:	f7fa fadb 	bl	80035d8 <HAL_GetTick>
 8009022:	4602      	mov	r2, r0
 8009024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	2b02      	cmp	r3, #2
 800902a:	d901      	bls.n	8009030 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800902c:	2303      	movs	r3, #3
 800902e:	e10b      	b.n	8009248 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009030:	4b4d      	ldr	r3, [pc, #308]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1f0      	bne.n	800901e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800903c:	4b4a      	ldr	r3, [pc, #296]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 800903e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009040:	4b4a      	ldr	r3, [pc, #296]	@ (800916c <HAL_RCC_OscConfig+0x6c8>)
 8009042:	4013      	ands	r3, r2
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800904c:	0112      	lsls	r2, r2, #4
 800904e:	430a      	orrs	r2, r1
 8009050:	4945      	ldr	r1, [pc, #276]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 8009052:	4313      	orrs	r3, r2
 8009054:	628b      	str	r3, [r1, #40]	@ 0x28
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800905a:	3b01      	subs	r3, #1
 800905c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009064:	3b01      	subs	r3, #1
 8009066:	025b      	lsls	r3, r3, #9
 8009068:	b29b      	uxth	r3, r3
 800906a:	431a      	orrs	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009070:	3b01      	subs	r3, #1
 8009072:	041b      	lsls	r3, r3, #16
 8009074:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009078:	431a      	orrs	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800907e:	3b01      	subs	r3, #1
 8009080:	061b      	lsls	r3, r3, #24
 8009082:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009086:	4938      	ldr	r1, [pc, #224]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 8009088:	4313      	orrs	r3, r2
 800908a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800908c:	4b36      	ldr	r3, [pc, #216]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 800908e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009090:	4a35      	ldr	r2, [pc, #212]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 8009092:	f023 0301 	bic.w	r3, r3, #1
 8009096:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009098:	4b33      	ldr	r3, [pc, #204]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 800909a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800909c:	4b34      	ldr	r3, [pc, #208]	@ (8009170 <HAL_RCC_OscConfig+0x6cc>)
 800909e:	4013      	ands	r3, r2
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80090a4:	00d2      	lsls	r2, r2, #3
 80090a6:	4930      	ldr	r1, [pc, #192]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 80090a8:	4313      	orrs	r3, r2
 80090aa:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80090ac:	4b2e      	ldr	r3, [pc, #184]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 80090ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b0:	f023 020c 	bic.w	r2, r3, #12
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b8:	492b      	ldr	r1, [pc, #172]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 80090ba:	4313      	orrs	r3, r2
 80090bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80090be:	4b2a      	ldr	r3, [pc, #168]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 80090c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c2:	f023 0202 	bic.w	r2, r3, #2
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090ca:	4927      	ldr	r1, [pc, #156]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 80090cc:	4313      	orrs	r3, r2
 80090ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80090d0:	4b25      	ldr	r3, [pc, #148]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 80090d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d4:	4a24      	ldr	r2, [pc, #144]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 80090d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090dc:	4b22      	ldr	r3, [pc, #136]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 80090de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e0:	4a21      	ldr	r2, [pc, #132]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 80090e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80090e8:	4b1f      	ldr	r3, [pc, #124]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 80090ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ec:	4a1e      	ldr	r2, [pc, #120]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 80090ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80090f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80090f4:	4b1c      	ldr	r3, [pc, #112]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 80090f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f8:	4a1b      	ldr	r2, [pc, #108]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 80090fa:	f043 0301 	orr.w	r3, r3, #1
 80090fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009100:	4b19      	ldr	r3, [pc, #100]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a18      	ldr	r2, [pc, #96]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 8009106:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800910a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800910c:	f7fa fa64 	bl	80035d8 <HAL_GetTick>
 8009110:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009112:	e008      	b.n	8009126 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009114:	f7fa fa60 	bl	80035d8 <HAL_GetTick>
 8009118:	4602      	mov	r2, r0
 800911a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	2b02      	cmp	r3, #2
 8009120:	d901      	bls.n	8009126 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e090      	b.n	8009248 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009126:	4b10      	ldr	r3, [pc, #64]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d0f0      	beq.n	8009114 <HAL_RCC_OscConfig+0x670>
 8009132:	e088      	b.n	8009246 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009134:	4b0c      	ldr	r3, [pc, #48]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a0b      	ldr	r2, [pc, #44]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 800913a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800913e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009140:	f7fa fa4a 	bl	80035d8 <HAL_GetTick>
 8009144:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009146:	e008      	b.n	800915a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009148:	f7fa fa46 	bl	80035d8 <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	2b02      	cmp	r3, #2
 8009154:	d901      	bls.n	800915a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009156:	2303      	movs	r3, #3
 8009158:	e076      	b.n	8009248 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800915a:	4b03      	ldr	r3, [pc, #12]	@ (8009168 <HAL_RCC_OscConfig+0x6c4>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1f0      	bne.n	8009148 <HAL_RCC_OscConfig+0x6a4>
 8009166:	e06e      	b.n	8009246 <HAL_RCC_OscConfig+0x7a2>
 8009168:	58024400 	.word	0x58024400
 800916c:	fffffc0c 	.word	0xfffffc0c
 8009170:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009174:	4b36      	ldr	r3, [pc, #216]	@ (8009250 <HAL_RCC_OscConfig+0x7ac>)
 8009176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009178:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800917a:	4b35      	ldr	r3, [pc, #212]	@ (8009250 <HAL_RCC_OscConfig+0x7ac>)
 800917c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800917e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009184:	2b01      	cmp	r3, #1
 8009186:	d031      	beq.n	80091ec <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	f003 0203 	and.w	r2, r3, #3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009192:	429a      	cmp	r2, r3
 8009194:	d12a      	bne.n	80091ec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	091b      	lsrs	r3, r3, #4
 800919a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d122      	bne.n	80091ec <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d11a      	bne.n	80091ec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	0a5b      	lsrs	r3, r3, #9
 80091ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d111      	bne.n	80091ec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	0c1b      	lsrs	r3, r3, #16
 80091cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d108      	bne.n	80091ec <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	0e1b      	lsrs	r3, r3, #24
 80091de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d001      	beq.n	80091f0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	e02b      	b.n	8009248 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80091f0:	4b17      	ldr	r3, [pc, #92]	@ (8009250 <HAL_RCC_OscConfig+0x7ac>)
 80091f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091f4:	08db      	lsrs	r3, r3, #3
 80091f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091fa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009200:	693a      	ldr	r2, [r7, #16]
 8009202:	429a      	cmp	r2, r3
 8009204:	d01f      	beq.n	8009246 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009206:	4b12      	ldr	r3, [pc, #72]	@ (8009250 <HAL_RCC_OscConfig+0x7ac>)
 8009208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800920a:	4a11      	ldr	r2, [pc, #68]	@ (8009250 <HAL_RCC_OscConfig+0x7ac>)
 800920c:	f023 0301 	bic.w	r3, r3, #1
 8009210:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009212:	f7fa f9e1 	bl	80035d8 <HAL_GetTick>
 8009216:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009218:	bf00      	nop
 800921a:	f7fa f9dd 	bl	80035d8 <HAL_GetTick>
 800921e:	4602      	mov	r2, r0
 8009220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009222:	4293      	cmp	r3, r2
 8009224:	d0f9      	beq.n	800921a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009226:	4b0a      	ldr	r3, [pc, #40]	@ (8009250 <HAL_RCC_OscConfig+0x7ac>)
 8009228:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800922a:	4b0a      	ldr	r3, [pc, #40]	@ (8009254 <HAL_RCC_OscConfig+0x7b0>)
 800922c:	4013      	ands	r3, r2
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009232:	00d2      	lsls	r2, r2, #3
 8009234:	4906      	ldr	r1, [pc, #24]	@ (8009250 <HAL_RCC_OscConfig+0x7ac>)
 8009236:	4313      	orrs	r3, r2
 8009238:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800923a:	4b05      	ldr	r3, [pc, #20]	@ (8009250 <HAL_RCC_OscConfig+0x7ac>)
 800923c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800923e:	4a04      	ldr	r2, [pc, #16]	@ (8009250 <HAL_RCC_OscConfig+0x7ac>)
 8009240:	f043 0301 	orr.w	r3, r3, #1
 8009244:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3730      	adds	r7, #48	@ 0x30
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	58024400 	.word	0x58024400
 8009254:	ffff0007 	.word	0xffff0007

08009258 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d101      	bne.n	800926c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e19c      	b.n	80095a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800926c:	4b8a      	ldr	r3, [pc, #552]	@ (8009498 <HAL_RCC_ClockConfig+0x240>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 030f 	and.w	r3, r3, #15
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	429a      	cmp	r2, r3
 8009278:	d910      	bls.n	800929c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800927a:	4b87      	ldr	r3, [pc, #540]	@ (8009498 <HAL_RCC_ClockConfig+0x240>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f023 020f 	bic.w	r2, r3, #15
 8009282:	4985      	ldr	r1, [pc, #532]	@ (8009498 <HAL_RCC_ClockConfig+0x240>)
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	4313      	orrs	r3, r2
 8009288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800928a:	4b83      	ldr	r3, [pc, #524]	@ (8009498 <HAL_RCC_ClockConfig+0x240>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f003 030f 	and.w	r3, r3, #15
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	429a      	cmp	r2, r3
 8009296:	d001      	beq.n	800929c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	e184      	b.n	80095a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 0304 	and.w	r3, r3, #4
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d010      	beq.n	80092ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	691a      	ldr	r2, [r3, #16]
 80092ac:	4b7b      	ldr	r3, [pc, #492]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d908      	bls.n	80092ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80092b8:	4b78      	ldr	r3, [pc, #480]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	4975      	ldr	r1, [pc, #468]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 80092c6:	4313      	orrs	r3, r2
 80092c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 0308 	and.w	r3, r3, #8
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d010      	beq.n	80092f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	695a      	ldr	r2, [r3, #20]
 80092da:	4b70      	ldr	r3, [pc, #448]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 80092dc:	69db      	ldr	r3, [r3, #28]
 80092de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d908      	bls.n	80092f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80092e6:	4b6d      	ldr	r3, [pc, #436]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 80092e8:	69db      	ldr	r3, [r3, #28]
 80092ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	695b      	ldr	r3, [r3, #20]
 80092f2:	496a      	ldr	r1, [pc, #424]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 80092f4:	4313      	orrs	r3, r2
 80092f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 0310 	and.w	r3, r3, #16
 8009300:	2b00      	cmp	r3, #0
 8009302:	d010      	beq.n	8009326 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	699a      	ldr	r2, [r3, #24]
 8009308:	4b64      	ldr	r3, [pc, #400]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 800930a:	69db      	ldr	r3, [r3, #28]
 800930c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009310:	429a      	cmp	r2, r3
 8009312:	d908      	bls.n	8009326 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009314:	4b61      	ldr	r3, [pc, #388]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 8009316:	69db      	ldr	r3, [r3, #28]
 8009318:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	699b      	ldr	r3, [r3, #24]
 8009320:	495e      	ldr	r1, [pc, #376]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 8009322:	4313      	orrs	r3, r2
 8009324:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f003 0320 	and.w	r3, r3, #32
 800932e:	2b00      	cmp	r3, #0
 8009330:	d010      	beq.n	8009354 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	69da      	ldr	r2, [r3, #28]
 8009336:	4b59      	ldr	r3, [pc, #356]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 8009338:	6a1b      	ldr	r3, [r3, #32]
 800933a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800933e:	429a      	cmp	r2, r3
 8009340:	d908      	bls.n	8009354 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009342:	4b56      	ldr	r3, [pc, #344]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	69db      	ldr	r3, [r3, #28]
 800934e:	4953      	ldr	r1, [pc, #332]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 8009350:	4313      	orrs	r3, r2
 8009352:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 0302 	and.w	r3, r3, #2
 800935c:	2b00      	cmp	r3, #0
 800935e:	d010      	beq.n	8009382 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	68da      	ldr	r2, [r3, #12]
 8009364:	4b4d      	ldr	r3, [pc, #308]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	f003 030f 	and.w	r3, r3, #15
 800936c:	429a      	cmp	r2, r3
 800936e:	d908      	bls.n	8009382 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009370:	4b4a      	ldr	r3, [pc, #296]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	f023 020f 	bic.w	r2, r3, #15
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	4947      	ldr	r1, [pc, #284]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 800937e:	4313      	orrs	r3, r2
 8009380:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	2b00      	cmp	r3, #0
 800938c:	d055      	beq.n	800943a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800938e:	4b43      	ldr	r3, [pc, #268]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 8009390:	699b      	ldr	r3, [r3, #24]
 8009392:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	4940      	ldr	r1, [pc, #256]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 800939c:	4313      	orrs	r3, r2
 800939e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	d107      	bne.n	80093b8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80093a8:	4b3c      	ldr	r3, [pc, #240]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d121      	bne.n	80093f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e0f6      	b.n	80095a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	2b03      	cmp	r3, #3
 80093be:	d107      	bne.n	80093d0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80093c0:	4b36      	ldr	r3, [pc, #216]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d115      	bne.n	80093f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80093cc:	2301      	movs	r3, #1
 80093ce:	e0ea      	b.n	80095a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d107      	bne.n	80093e8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80093d8:	4b30      	ldr	r3, [pc, #192]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d109      	bne.n	80093f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e0de      	b.n	80095a6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093e8:	4b2c      	ldr	r3, [pc, #176]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0304 	and.w	r3, r3, #4
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d101      	bne.n	80093f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e0d6      	b.n	80095a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80093f8:	4b28      	ldr	r3, [pc, #160]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	f023 0207 	bic.w	r2, r3, #7
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	4925      	ldr	r1, [pc, #148]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 8009406:	4313      	orrs	r3, r2
 8009408:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800940a:	f7fa f8e5 	bl	80035d8 <HAL_GetTick>
 800940e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009410:	e00a      	b.n	8009428 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009412:	f7fa f8e1 	bl	80035d8 <HAL_GetTick>
 8009416:	4602      	mov	r2, r0
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009420:	4293      	cmp	r3, r2
 8009422:	d901      	bls.n	8009428 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	e0be      	b.n	80095a6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009428:	4b1c      	ldr	r3, [pc, #112]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	00db      	lsls	r3, r3, #3
 8009436:	429a      	cmp	r2, r3
 8009438:	d1eb      	bne.n	8009412 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 0302 	and.w	r3, r3, #2
 8009442:	2b00      	cmp	r3, #0
 8009444:	d010      	beq.n	8009468 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	68da      	ldr	r2, [r3, #12]
 800944a:	4b14      	ldr	r3, [pc, #80]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 800944c:	699b      	ldr	r3, [r3, #24]
 800944e:	f003 030f 	and.w	r3, r3, #15
 8009452:	429a      	cmp	r2, r3
 8009454:	d208      	bcs.n	8009468 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009456:	4b11      	ldr	r3, [pc, #68]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	f023 020f 	bic.w	r2, r3, #15
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	490e      	ldr	r1, [pc, #56]	@ (800949c <HAL_RCC_ClockConfig+0x244>)
 8009464:	4313      	orrs	r3, r2
 8009466:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009468:	4b0b      	ldr	r3, [pc, #44]	@ (8009498 <HAL_RCC_ClockConfig+0x240>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 030f 	and.w	r3, r3, #15
 8009470:	683a      	ldr	r2, [r7, #0]
 8009472:	429a      	cmp	r2, r3
 8009474:	d214      	bcs.n	80094a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009476:	4b08      	ldr	r3, [pc, #32]	@ (8009498 <HAL_RCC_ClockConfig+0x240>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f023 020f 	bic.w	r2, r3, #15
 800947e:	4906      	ldr	r1, [pc, #24]	@ (8009498 <HAL_RCC_ClockConfig+0x240>)
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	4313      	orrs	r3, r2
 8009484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009486:	4b04      	ldr	r3, [pc, #16]	@ (8009498 <HAL_RCC_ClockConfig+0x240>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f003 030f 	and.w	r3, r3, #15
 800948e:	683a      	ldr	r2, [r7, #0]
 8009490:	429a      	cmp	r2, r3
 8009492:	d005      	beq.n	80094a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	e086      	b.n	80095a6 <HAL_RCC_ClockConfig+0x34e>
 8009498:	52002000 	.word	0x52002000
 800949c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f003 0304 	and.w	r3, r3, #4
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d010      	beq.n	80094ce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	691a      	ldr	r2, [r3, #16]
 80094b0:	4b3f      	ldr	r3, [pc, #252]	@ (80095b0 <HAL_RCC_ClockConfig+0x358>)
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d208      	bcs.n	80094ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80094bc:	4b3c      	ldr	r3, [pc, #240]	@ (80095b0 <HAL_RCC_ClockConfig+0x358>)
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	4939      	ldr	r1, [pc, #228]	@ (80095b0 <HAL_RCC_ClockConfig+0x358>)
 80094ca:	4313      	orrs	r3, r2
 80094cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 0308 	and.w	r3, r3, #8
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d010      	beq.n	80094fc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	695a      	ldr	r2, [r3, #20]
 80094de:	4b34      	ldr	r3, [pc, #208]	@ (80095b0 <HAL_RCC_ClockConfig+0x358>)
 80094e0:	69db      	ldr	r3, [r3, #28]
 80094e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d208      	bcs.n	80094fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80094ea:	4b31      	ldr	r3, [pc, #196]	@ (80095b0 <HAL_RCC_ClockConfig+0x358>)
 80094ec:	69db      	ldr	r3, [r3, #28]
 80094ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	695b      	ldr	r3, [r3, #20]
 80094f6:	492e      	ldr	r1, [pc, #184]	@ (80095b0 <HAL_RCC_ClockConfig+0x358>)
 80094f8:	4313      	orrs	r3, r2
 80094fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 0310 	and.w	r3, r3, #16
 8009504:	2b00      	cmp	r3, #0
 8009506:	d010      	beq.n	800952a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	699a      	ldr	r2, [r3, #24]
 800950c:	4b28      	ldr	r3, [pc, #160]	@ (80095b0 <HAL_RCC_ClockConfig+0x358>)
 800950e:	69db      	ldr	r3, [r3, #28]
 8009510:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009514:	429a      	cmp	r2, r3
 8009516:	d208      	bcs.n	800952a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009518:	4b25      	ldr	r3, [pc, #148]	@ (80095b0 <HAL_RCC_ClockConfig+0x358>)
 800951a:	69db      	ldr	r3, [r3, #28]
 800951c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	699b      	ldr	r3, [r3, #24]
 8009524:	4922      	ldr	r1, [pc, #136]	@ (80095b0 <HAL_RCC_ClockConfig+0x358>)
 8009526:	4313      	orrs	r3, r2
 8009528:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f003 0320 	and.w	r3, r3, #32
 8009532:	2b00      	cmp	r3, #0
 8009534:	d010      	beq.n	8009558 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	69da      	ldr	r2, [r3, #28]
 800953a:	4b1d      	ldr	r3, [pc, #116]	@ (80095b0 <HAL_RCC_ClockConfig+0x358>)
 800953c:	6a1b      	ldr	r3, [r3, #32]
 800953e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009542:	429a      	cmp	r2, r3
 8009544:	d208      	bcs.n	8009558 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009546:	4b1a      	ldr	r3, [pc, #104]	@ (80095b0 <HAL_RCC_ClockConfig+0x358>)
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	69db      	ldr	r3, [r3, #28]
 8009552:	4917      	ldr	r1, [pc, #92]	@ (80095b0 <HAL_RCC_ClockConfig+0x358>)
 8009554:	4313      	orrs	r3, r2
 8009556:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009558:	f000 f834 	bl	80095c4 <HAL_RCC_GetSysClockFreq>
 800955c:	4602      	mov	r2, r0
 800955e:	4b14      	ldr	r3, [pc, #80]	@ (80095b0 <HAL_RCC_ClockConfig+0x358>)
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	0a1b      	lsrs	r3, r3, #8
 8009564:	f003 030f 	and.w	r3, r3, #15
 8009568:	4912      	ldr	r1, [pc, #72]	@ (80095b4 <HAL_RCC_ClockConfig+0x35c>)
 800956a:	5ccb      	ldrb	r3, [r1, r3]
 800956c:	f003 031f 	and.w	r3, r3, #31
 8009570:	fa22 f303 	lsr.w	r3, r2, r3
 8009574:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009576:	4b0e      	ldr	r3, [pc, #56]	@ (80095b0 <HAL_RCC_ClockConfig+0x358>)
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	f003 030f 	and.w	r3, r3, #15
 800957e:	4a0d      	ldr	r2, [pc, #52]	@ (80095b4 <HAL_RCC_ClockConfig+0x35c>)
 8009580:	5cd3      	ldrb	r3, [r2, r3]
 8009582:	f003 031f 	and.w	r3, r3, #31
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	fa22 f303 	lsr.w	r3, r2, r3
 800958c:	4a0a      	ldr	r2, [pc, #40]	@ (80095b8 <HAL_RCC_ClockConfig+0x360>)
 800958e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009590:	4a0a      	ldr	r2, [pc, #40]	@ (80095bc <HAL_RCC_ClockConfig+0x364>)
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009596:	4b0a      	ldr	r3, [pc, #40]	@ (80095c0 <HAL_RCC_ClockConfig+0x368>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4618      	mov	r0, r3
 800959c:	f7f9 ffd2 	bl	8003544 <HAL_InitTick>
 80095a0:	4603      	mov	r3, r0
 80095a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80095a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3718      	adds	r7, #24
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	58024400 	.word	0x58024400
 80095b4:	08010ea8 	.word	0x08010ea8
 80095b8:	2400006c 	.word	0x2400006c
 80095bc:	24000068 	.word	0x24000068
 80095c0:	24000070 	.word	0x24000070

080095c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b089      	sub	sp, #36	@ 0x24
 80095c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80095ca:	4bb3      	ldr	r3, [pc, #716]	@ (8009898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80095d2:	2b18      	cmp	r3, #24
 80095d4:	f200 8155 	bhi.w	8009882 <HAL_RCC_GetSysClockFreq+0x2be>
 80095d8:	a201      	add	r2, pc, #4	@ (adr r2, 80095e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80095da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095de:	bf00      	nop
 80095e0:	08009645 	.word	0x08009645
 80095e4:	08009883 	.word	0x08009883
 80095e8:	08009883 	.word	0x08009883
 80095ec:	08009883 	.word	0x08009883
 80095f0:	08009883 	.word	0x08009883
 80095f4:	08009883 	.word	0x08009883
 80095f8:	08009883 	.word	0x08009883
 80095fc:	08009883 	.word	0x08009883
 8009600:	0800966b 	.word	0x0800966b
 8009604:	08009883 	.word	0x08009883
 8009608:	08009883 	.word	0x08009883
 800960c:	08009883 	.word	0x08009883
 8009610:	08009883 	.word	0x08009883
 8009614:	08009883 	.word	0x08009883
 8009618:	08009883 	.word	0x08009883
 800961c:	08009883 	.word	0x08009883
 8009620:	08009671 	.word	0x08009671
 8009624:	08009883 	.word	0x08009883
 8009628:	08009883 	.word	0x08009883
 800962c:	08009883 	.word	0x08009883
 8009630:	08009883 	.word	0x08009883
 8009634:	08009883 	.word	0x08009883
 8009638:	08009883 	.word	0x08009883
 800963c:	08009883 	.word	0x08009883
 8009640:	08009677 	.word	0x08009677
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009644:	4b94      	ldr	r3, [pc, #592]	@ (8009898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 0320 	and.w	r3, r3, #32
 800964c:	2b00      	cmp	r3, #0
 800964e:	d009      	beq.n	8009664 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009650:	4b91      	ldr	r3, [pc, #580]	@ (8009898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	08db      	lsrs	r3, r3, #3
 8009656:	f003 0303 	and.w	r3, r3, #3
 800965a:	4a90      	ldr	r2, [pc, #576]	@ (800989c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800965c:	fa22 f303 	lsr.w	r3, r2, r3
 8009660:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009662:	e111      	b.n	8009888 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009664:	4b8d      	ldr	r3, [pc, #564]	@ (800989c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009666:	61bb      	str	r3, [r7, #24]
      break;
 8009668:	e10e      	b.n	8009888 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800966a:	4b8d      	ldr	r3, [pc, #564]	@ (80098a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800966c:	61bb      	str	r3, [r7, #24]
      break;
 800966e:	e10b      	b.n	8009888 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009670:	4b8c      	ldr	r3, [pc, #560]	@ (80098a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009672:	61bb      	str	r3, [r7, #24]
      break;
 8009674:	e108      	b.n	8009888 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009676:	4b88      	ldr	r3, [pc, #544]	@ (8009898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800967a:	f003 0303 	and.w	r3, r3, #3
 800967e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009680:	4b85      	ldr	r3, [pc, #532]	@ (8009898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009684:	091b      	lsrs	r3, r3, #4
 8009686:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800968a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800968c:	4b82      	ldr	r3, [pc, #520]	@ (8009898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800968e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009696:	4b80      	ldr	r3, [pc, #512]	@ (8009898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800969a:	08db      	lsrs	r3, r3, #3
 800969c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	fb02 f303 	mul.w	r3, r2, r3
 80096a6:	ee07 3a90 	vmov	s15, r3
 80096aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f000 80e1 	beq.w	800987c <HAL_RCC_GetSysClockFreq+0x2b8>
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	2b02      	cmp	r3, #2
 80096be:	f000 8083 	beq.w	80097c8 <HAL_RCC_GetSysClockFreq+0x204>
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	f200 80a1 	bhi.w	800980c <HAL_RCC_GetSysClockFreq+0x248>
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d003      	beq.n	80096d8 <HAL_RCC_GetSysClockFreq+0x114>
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d056      	beq.n	8009784 <HAL_RCC_GetSysClockFreq+0x1c0>
 80096d6:	e099      	b.n	800980c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096d8:	4b6f      	ldr	r3, [pc, #444]	@ (8009898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 0320 	and.w	r3, r3, #32
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d02d      	beq.n	8009740 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096e4:	4b6c      	ldr	r3, [pc, #432]	@ (8009898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	08db      	lsrs	r3, r3, #3
 80096ea:	f003 0303 	and.w	r3, r3, #3
 80096ee:	4a6b      	ldr	r2, [pc, #428]	@ (800989c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80096f0:	fa22 f303 	lsr.w	r3, r2, r3
 80096f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	ee07 3a90 	vmov	s15, r3
 80096fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	ee07 3a90 	vmov	s15, r3
 8009706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800970a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800970e:	4b62      	ldr	r3, [pc, #392]	@ (8009898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009716:	ee07 3a90 	vmov	s15, r3
 800971a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800971e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009722:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80098a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800972a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800972e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800973a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800973e:	e087      	b.n	8009850 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	ee07 3a90 	vmov	s15, r3
 8009746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800974a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80098ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800974e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009752:	4b51      	ldr	r3, [pc, #324]	@ (8009898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800975a:	ee07 3a90 	vmov	s15, r3
 800975e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009762:	ed97 6a02 	vldr	s12, [r7, #8]
 8009766:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80098a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800976a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800976e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800977a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800977e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009782:	e065      	b.n	8009850 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	ee07 3a90 	vmov	s15, r3
 800978a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800978e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80098b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009796:	4b40      	ldr	r3, [pc, #256]	@ (8009898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800979a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800979e:	ee07 3a90 	vmov	s15, r3
 80097a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80097aa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80098a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80097ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80097c6:	e043      	b.n	8009850 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	ee07 3a90 	vmov	s15, r3
 80097ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80098b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80097d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097da:	4b2f      	ldr	r3, [pc, #188]	@ (8009898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097e2:	ee07 3a90 	vmov	s15, r3
 80097e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80097ee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80098a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80097f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009806:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800980a:	e021      	b.n	8009850 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	ee07 3a90 	vmov	s15, r3
 8009812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009816:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80098b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800981a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800981e:	4b1e      	ldr	r3, [pc, #120]	@ (8009898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009826:	ee07 3a90 	vmov	s15, r3
 800982a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800982e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009832:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80098a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800983a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800983e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800984a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800984e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009850:	4b11      	ldr	r3, [pc, #68]	@ (8009898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009854:	0a5b      	lsrs	r3, r3, #9
 8009856:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800985a:	3301      	adds	r3, #1
 800985c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	ee07 3a90 	vmov	s15, r3
 8009864:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009868:	edd7 6a07 	vldr	s13, [r7, #28]
 800986c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009874:	ee17 3a90 	vmov	r3, s15
 8009878:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800987a:	e005      	b.n	8009888 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800987c:	2300      	movs	r3, #0
 800987e:	61bb      	str	r3, [r7, #24]
      break;
 8009880:	e002      	b.n	8009888 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009882:	4b07      	ldr	r3, [pc, #28]	@ (80098a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009884:	61bb      	str	r3, [r7, #24]
      break;
 8009886:	bf00      	nop
  }

  return sysclockfreq;
 8009888:	69bb      	ldr	r3, [r7, #24]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3724      	adds	r7, #36	@ 0x24
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop
 8009898:	58024400 	.word	0x58024400
 800989c:	03d09000 	.word	0x03d09000
 80098a0:	003d0900 	.word	0x003d0900
 80098a4:	017d7840 	.word	0x017d7840
 80098a8:	46000000 	.word	0x46000000
 80098ac:	4c742400 	.word	0x4c742400
 80098b0:	4a742400 	.word	0x4a742400
 80098b4:	4bbebc20 	.word	0x4bbebc20

080098b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80098be:	f7ff fe81 	bl	80095c4 <HAL_RCC_GetSysClockFreq>
 80098c2:	4602      	mov	r2, r0
 80098c4:	4b10      	ldr	r3, [pc, #64]	@ (8009908 <HAL_RCC_GetHCLKFreq+0x50>)
 80098c6:	699b      	ldr	r3, [r3, #24]
 80098c8:	0a1b      	lsrs	r3, r3, #8
 80098ca:	f003 030f 	and.w	r3, r3, #15
 80098ce:	490f      	ldr	r1, [pc, #60]	@ (800990c <HAL_RCC_GetHCLKFreq+0x54>)
 80098d0:	5ccb      	ldrb	r3, [r1, r3]
 80098d2:	f003 031f 	and.w	r3, r3, #31
 80098d6:	fa22 f303 	lsr.w	r3, r2, r3
 80098da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80098dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009908 <HAL_RCC_GetHCLKFreq+0x50>)
 80098de:	699b      	ldr	r3, [r3, #24]
 80098e0:	f003 030f 	and.w	r3, r3, #15
 80098e4:	4a09      	ldr	r2, [pc, #36]	@ (800990c <HAL_RCC_GetHCLKFreq+0x54>)
 80098e6:	5cd3      	ldrb	r3, [r2, r3]
 80098e8:	f003 031f 	and.w	r3, r3, #31
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	fa22 f303 	lsr.w	r3, r2, r3
 80098f2:	4a07      	ldr	r2, [pc, #28]	@ (8009910 <HAL_RCC_GetHCLKFreq+0x58>)
 80098f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80098f6:	4a07      	ldr	r2, [pc, #28]	@ (8009914 <HAL_RCC_GetHCLKFreq+0x5c>)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80098fc:	4b04      	ldr	r3, [pc, #16]	@ (8009910 <HAL_RCC_GetHCLKFreq+0x58>)
 80098fe:	681b      	ldr	r3, [r3, #0]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	58024400 	.word	0x58024400
 800990c:	08010ea8 	.word	0x08010ea8
 8009910:	2400006c 	.word	0x2400006c
 8009914:	24000068 	.word	0x24000068

08009918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800991c:	f7ff ffcc 	bl	80098b8 <HAL_RCC_GetHCLKFreq>
 8009920:	4602      	mov	r2, r0
 8009922:	4b06      	ldr	r3, [pc, #24]	@ (800993c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009924:	69db      	ldr	r3, [r3, #28]
 8009926:	091b      	lsrs	r3, r3, #4
 8009928:	f003 0307 	and.w	r3, r3, #7
 800992c:	4904      	ldr	r1, [pc, #16]	@ (8009940 <HAL_RCC_GetPCLK1Freq+0x28>)
 800992e:	5ccb      	ldrb	r3, [r1, r3]
 8009930:	f003 031f 	and.w	r3, r3, #31
 8009934:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009938:	4618      	mov	r0, r3
 800993a:	bd80      	pop	{r7, pc}
 800993c:	58024400 	.word	0x58024400
 8009940:	08010ea8 	.word	0x08010ea8

08009944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009948:	f7ff ffb6 	bl	80098b8 <HAL_RCC_GetHCLKFreq>
 800994c:	4602      	mov	r2, r0
 800994e:	4b06      	ldr	r3, [pc, #24]	@ (8009968 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009950:	69db      	ldr	r3, [r3, #28]
 8009952:	0a1b      	lsrs	r3, r3, #8
 8009954:	f003 0307 	and.w	r3, r3, #7
 8009958:	4904      	ldr	r1, [pc, #16]	@ (800996c <HAL_RCC_GetPCLK2Freq+0x28>)
 800995a:	5ccb      	ldrb	r3, [r1, r3]
 800995c:	f003 031f 	and.w	r3, r3, #31
 8009960:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009964:	4618      	mov	r0, r3
 8009966:	bd80      	pop	{r7, pc}
 8009968:	58024400 	.word	0x58024400
 800996c:	08010ea8 	.word	0x08010ea8

08009970 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009974:	b0c6      	sub	sp, #280	@ 0x118
 8009976:	af00      	add	r7, sp, #0
 8009978:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800997c:	2300      	movs	r3, #0
 800997e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009982:	2300      	movs	r3, #0
 8009984:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800998c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009990:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009994:	2500      	movs	r5, #0
 8009996:	ea54 0305 	orrs.w	r3, r4, r5
 800999a:	d049      	beq.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800999c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80099a6:	d02f      	beq.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80099a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80099ac:	d828      	bhi.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80099ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099b2:	d01a      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80099b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099b8:	d822      	bhi.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d003      	beq.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80099be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099c2:	d007      	beq.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80099c4:	e01c      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099c6:	4bab      	ldr	r3, [pc, #684]	@ (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80099c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ca:	4aaa      	ldr	r2, [pc, #680]	@ (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80099cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80099d2:	e01a      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80099d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099d8:	3308      	adds	r3, #8
 80099da:	2102      	movs	r1, #2
 80099dc:	4618      	mov	r0, r3
 80099de:	f002 fa49 	bl	800be74 <RCCEx_PLL2_Config>
 80099e2:	4603      	mov	r3, r0
 80099e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80099e8:	e00f      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ee:	3328      	adds	r3, #40	@ 0x28
 80099f0:	2102      	movs	r1, #2
 80099f2:	4618      	mov	r0, r3
 80099f4:	f002 faf0 	bl	800bfd8 <RCCEx_PLL3_Config>
 80099f8:	4603      	mov	r3, r0
 80099fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80099fe:	e004      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a00:	2301      	movs	r3, #1
 8009a02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a06:	e000      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10a      	bne.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009a12:	4b98      	ldr	r3, [pc, #608]	@ (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a16:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a20:	4a94      	ldr	r2, [pc, #592]	@ (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a22:	430b      	orrs	r3, r1
 8009a24:	6513      	str	r3, [r2, #80]	@ 0x50
 8009a26:	e003      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a38:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009a3c:	f04f 0900 	mov.w	r9, #0
 8009a40:	ea58 0309 	orrs.w	r3, r8, r9
 8009a44:	d047      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a4c:	2b04      	cmp	r3, #4
 8009a4e:	d82a      	bhi.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009a50:	a201      	add	r2, pc, #4	@ (adr r2, 8009a58 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a56:	bf00      	nop
 8009a58:	08009a6d 	.word	0x08009a6d
 8009a5c:	08009a7b 	.word	0x08009a7b
 8009a60:	08009a91 	.word	0x08009a91
 8009a64:	08009aaf 	.word	0x08009aaf
 8009a68:	08009aaf 	.word	0x08009aaf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a6c:	4b81      	ldr	r3, [pc, #516]	@ (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a70:	4a80      	ldr	r2, [pc, #512]	@ (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a78:	e01a      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a7e:	3308      	adds	r3, #8
 8009a80:	2100      	movs	r1, #0
 8009a82:	4618      	mov	r0, r3
 8009a84:	f002 f9f6 	bl	800be74 <RCCEx_PLL2_Config>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a8e:	e00f      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a94:	3328      	adds	r3, #40	@ 0x28
 8009a96:	2100      	movs	r1, #0
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f002 fa9d 	bl	800bfd8 <RCCEx_PLL3_Config>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009aa4:	e004      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009aac:	e000      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ab0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10a      	bne.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009ab8:	4b6e      	ldr	r3, [pc, #440]	@ (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009abc:	f023 0107 	bic.w	r1, r3, #7
 8009ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ac6:	4a6b      	ldr	r2, [pc, #428]	@ (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ac8:	430b      	orrs	r3, r1
 8009aca:	6513      	str	r3, [r2, #80]	@ 0x50
 8009acc:	e003      	b.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ace:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ad2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ade:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8009ae2:	f04f 0b00 	mov.w	fp, #0
 8009ae6:	ea5a 030b 	orrs.w	r3, sl, fp
 8009aea:	d05b      	beq.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009af0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009af4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009af8:	d03b      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009afa:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009afe:	d834      	bhi.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009b00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009b04:	d037      	beq.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009b06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009b0a:	d82e      	bhi.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009b0c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009b10:	d033      	beq.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009b12:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009b16:	d828      	bhi.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009b18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b1c:	d01a      	beq.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009b1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b22:	d822      	bhi.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d003      	beq.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009b28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009b2c:	d007      	beq.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009b2e:	e01c      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b30:	4b50      	ldr	r3, [pc, #320]	@ (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b34:	4a4f      	ldr	r2, [pc, #316]	@ (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b3c:	e01e      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b42:	3308      	adds	r3, #8
 8009b44:	2100      	movs	r1, #0
 8009b46:	4618      	mov	r0, r3
 8009b48:	f002 f994 	bl	800be74 <RCCEx_PLL2_Config>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009b52:	e013      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b58:	3328      	adds	r3, #40	@ 0x28
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f002 fa3b 	bl	800bfd8 <RCCEx_PLL3_Config>
 8009b62:	4603      	mov	r3, r0
 8009b64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b68:	e008      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b70:	e004      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009b72:	bf00      	nop
 8009b74:	e002      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009b76:	bf00      	nop
 8009b78:	e000      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009b7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10b      	bne.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009b84:	4b3b      	ldr	r3, [pc, #236]	@ (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b88:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009b94:	4a37      	ldr	r2, [pc, #220]	@ (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009b96:	430b      	orrs	r3, r1
 8009b98:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b9a:	e003      	b.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ba0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bac:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009bb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009bba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	d05d      	beq.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bc8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009bcc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009bd0:	d03b      	beq.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009bd2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009bd6:	d834      	bhi.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009bd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009bdc:	d037      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009bde:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009be2:	d82e      	bhi.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009be4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009be8:	d033      	beq.n	8009c52 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009bea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009bee:	d828      	bhi.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009bf0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009bf4:	d01a      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009bf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009bfa:	d822      	bhi.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d003      	beq.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009c00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c04:	d007      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009c06:	e01c      	b.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c08:	4b1a      	ldr	r3, [pc, #104]	@ (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c0c:	4a19      	ldr	r2, [pc, #100]	@ (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c14:	e01e      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c1a:	3308      	adds	r3, #8
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f002 f928 	bl	800be74 <RCCEx_PLL2_Config>
 8009c24:	4603      	mov	r3, r0
 8009c26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009c2a:	e013      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c30:	3328      	adds	r3, #40	@ 0x28
 8009c32:	2100      	movs	r1, #0
 8009c34:	4618      	mov	r0, r3
 8009c36:	f002 f9cf 	bl	800bfd8 <RCCEx_PLL3_Config>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009c40:	e008      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c48:	e004      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009c4a:	bf00      	nop
 8009c4c:	e002      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009c4e:	bf00      	nop
 8009c50:	e000      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009c52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10d      	bne.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009c5c:	4b05      	ldr	r3, [pc, #20]	@ (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c60:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009c6c:	4a01      	ldr	r2, [pc, #4]	@ (8009c74 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009c6e:	430b      	orrs	r3, r1
 8009c70:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c72:	e005      	b.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009c74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c88:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009c8c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009c90:	2300      	movs	r3, #0
 8009c92:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009c96:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	d03a      	beq.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ca6:	2b30      	cmp	r3, #48	@ 0x30
 8009ca8:	d01f      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009caa:	2b30      	cmp	r3, #48	@ 0x30
 8009cac:	d819      	bhi.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009cae:	2b20      	cmp	r3, #32
 8009cb0:	d00c      	beq.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009cb2:	2b20      	cmp	r3, #32
 8009cb4:	d815      	bhi.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d019      	beq.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009cba:	2b10      	cmp	r3, #16
 8009cbc:	d111      	bne.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cbe:	4baa      	ldr	r3, [pc, #680]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc2:	4aa9      	ldr	r2, [pc, #676]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009cca:	e011      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cd0:	3308      	adds	r3, #8
 8009cd2:	2102      	movs	r1, #2
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f002 f8cd 	bl	800be74 <RCCEx_PLL2_Config>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009ce0:	e006      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009ce8:	e002      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009cea:	bf00      	nop
 8009cec:	e000      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009cee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cf0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10a      	bne.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009cf8:	4b9b      	ldr	r3, [pc, #620]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cfc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d06:	4a98      	ldr	r2, [pc, #608]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009d08:	430b      	orrs	r3, r1
 8009d0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009d0c:	e003      	b.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009d22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009d26:	2300      	movs	r3, #0
 8009d28:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009d2c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009d30:	460b      	mov	r3, r1
 8009d32:	4313      	orrs	r3, r2
 8009d34:	d051      	beq.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d40:	d035      	beq.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009d42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d46:	d82e      	bhi.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009d48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009d4c:	d031      	beq.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009d4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009d52:	d828      	bhi.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009d54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d58:	d01a      	beq.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009d5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d5e:	d822      	bhi.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d003      	beq.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d68:	d007      	beq.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009d6a:	e01c      	b.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d6c:	4b7e      	ldr	r3, [pc, #504]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d70:	4a7d      	ldr	r2, [pc, #500]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009d72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009d78:	e01c      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d7e:	3308      	adds	r3, #8
 8009d80:	2100      	movs	r1, #0
 8009d82:	4618      	mov	r0, r3
 8009d84:	f002 f876 	bl	800be74 <RCCEx_PLL2_Config>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009d8e:	e011      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d94:	3328      	adds	r3, #40	@ 0x28
 8009d96:	2100      	movs	r1, #0
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f002 f91d 	bl	800bfd8 <RCCEx_PLL3_Config>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009da4:	e006      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009dac:	e002      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009dae:	bf00      	nop
 8009db0:	e000      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009db4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10a      	bne.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009dbc:	4b6a      	ldr	r3, [pc, #424]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dc0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009dca:	4a67      	ldr	r2, [pc, #412]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009dcc:	430b      	orrs	r3, r1
 8009dce:	6513      	str	r3, [r2, #80]	@ 0x50
 8009dd0:	e003      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009dd6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009de6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009dea:	2300      	movs	r3, #0
 8009dec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009df0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009df4:	460b      	mov	r3, r1
 8009df6:	4313      	orrs	r3, r2
 8009df8:	d053      	beq.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009e04:	d033      	beq.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009e06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009e0a:	d82c      	bhi.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009e0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e10:	d02f      	beq.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009e12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e16:	d826      	bhi.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009e18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009e1c:	d02b      	beq.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009e1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009e22:	d820      	bhi.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009e24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e28:	d012      	beq.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009e2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e2e:	d81a      	bhi.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d022      	beq.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e38:	d115      	bne.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e3e:	3308      	adds	r3, #8
 8009e40:	2101      	movs	r1, #1
 8009e42:	4618      	mov	r0, r3
 8009e44:	f002 f816 	bl	800be74 <RCCEx_PLL2_Config>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009e4e:	e015      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e54:	3328      	adds	r3, #40	@ 0x28
 8009e56:	2101      	movs	r1, #1
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f002 f8bd 	bl	800bfd8 <RCCEx_PLL3_Config>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009e64:	e00a      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e6c:	e006      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009e6e:	bf00      	nop
 8009e70:	e004      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009e72:	bf00      	nop
 8009e74:	e002      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009e76:	bf00      	nop
 8009e78:	e000      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009e7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d10a      	bne.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009e84:	4b38      	ldr	r3, [pc, #224]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e88:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e92:	4a35      	ldr	r2, [pc, #212]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009e94:	430b      	orrs	r3, r1
 8009e96:	6513      	str	r3, [r2, #80]	@ 0x50
 8009e98:	e003      	b.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eaa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009eae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009eb8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	d058      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ec6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ece:	d033      	beq.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ed4:	d82c      	bhi.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eda:	d02f      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ee0:	d826      	bhi.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009ee2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ee6:	d02b      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009ee8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009eec:	d820      	bhi.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009eee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ef2:	d012      	beq.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009ef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ef8:	d81a      	bhi.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d022      	beq.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009efe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f02:	d115      	bne.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f08:	3308      	adds	r3, #8
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f001 ffb1 	bl	800be74 <RCCEx_PLL2_Config>
 8009f12:	4603      	mov	r3, r0
 8009f14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009f18:	e015      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f1e:	3328      	adds	r3, #40	@ 0x28
 8009f20:	2101      	movs	r1, #1
 8009f22:	4618      	mov	r0, r3
 8009f24:	f002 f858 	bl	800bfd8 <RCCEx_PLL3_Config>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009f2e:	e00a      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f36:	e006      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009f38:	bf00      	nop
 8009f3a:	e004      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009f3c:	bf00      	nop
 8009f3e:	e002      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009f40:	bf00      	nop
 8009f42:	e000      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d10e      	bne.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009f4e:	4b06      	ldr	r3, [pc, #24]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f52:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009f5e:	4a02      	ldr	r2, [pc, #8]	@ (8009f68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009f60:	430b      	orrs	r3, r1
 8009f62:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f64:	e006      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009f66:	bf00      	nop
 8009f68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009f80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009f84:	2300      	movs	r3, #0
 8009f86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009f8a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009f8e:	460b      	mov	r3, r1
 8009f90:	4313      	orrs	r3, r2
 8009f92:	d037      	beq.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f9e:	d00e      	beq.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009fa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fa4:	d816      	bhi.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d018      	beq.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009faa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fae:	d111      	bne.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fb0:	4bc4      	ldr	r3, [pc, #784]	@ (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fb4:	4ac3      	ldr	r2, [pc, #780]	@ (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009fb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009fbc:	e00f      	b.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fc2:	3308      	adds	r3, #8
 8009fc4:	2101      	movs	r1, #1
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f001 ff54 	bl	800be74 <RCCEx_PLL2_Config>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009fd2:	e004      	b.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009fda:	e000      	b.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d10a      	bne.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009fe6:	4bb7      	ldr	r3, [pc, #732]	@ (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009fe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ff4:	4ab3      	ldr	r2, [pc, #716]	@ (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ff6:	430b      	orrs	r3, r1
 8009ff8:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ffa:	e003      	b.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ffc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a000:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a010:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a014:	2300      	movs	r3, #0
 800a016:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a01a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a01e:	460b      	mov	r3, r1
 800a020:	4313      	orrs	r3, r2
 800a022:	d039      	beq.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a02a:	2b03      	cmp	r3, #3
 800a02c:	d81c      	bhi.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a02e:	a201      	add	r2, pc, #4	@ (adr r2, 800a034 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a034:	0800a071 	.word	0x0800a071
 800a038:	0800a045 	.word	0x0800a045
 800a03c:	0800a053 	.word	0x0800a053
 800a040:	0800a071 	.word	0x0800a071
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a044:	4b9f      	ldr	r3, [pc, #636]	@ (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a048:	4a9e      	ldr	r2, [pc, #632]	@ (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a04a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a04e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a050:	e00f      	b.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a056:	3308      	adds	r3, #8
 800a058:	2102      	movs	r1, #2
 800a05a:	4618      	mov	r0, r3
 800a05c:	f001 ff0a 	bl	800be74 <RCCEx_PLL2_Config>
 800a060:	4603      	mov	r3, r0
 800a062:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a066:	e004      	b.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a06e:	e000      	b.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a070:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a072:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10a      	bne.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a07a:	4b92      	ldr	r3, [pc, #584]	@ (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a07c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a07e:	f023 0103 	bic.w	r1, r3, #3
 800a082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a088:	4a8e      	ldr	r2, [pc, #568]	@ (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a08a:	430b      	orrs	r3, r1
 800a08c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a08e:	e003      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a090:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a094:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a0a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a0ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	f000 8099 	beq.w	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a0ba:	4b83      	ldr	r3, [pc, #524]	@ (800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a82      	ldr	r2, [pc, #520]	@ (800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a0c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a0c6:	f7f9 fa87 	bl	80035d8 <HAL_GetTick>
 800a0ca:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a0ce:	e00b      	b.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0d0:	f7f9 fa82 	bl	80035d8 <HAL_GetTick>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a0da:	1ad3      	subs	r3, r2, r3
 800a0dc:	2b64      	cmp	r3, #100	@ 0x64
 800a0de:	d903      	bls.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a0e6:	e005      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a0e8:	4b77      	ldr	r3, [pc, #476]	@ (800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d0ed      	beq.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a0f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d173      	bne.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a0fc:	4b71      	ldr	r3, [pc, #452]	@ (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a0fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a104:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a108:	4053      	eors	r3, r2
 800a10a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d015      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a112:	4b6c      	ldr	r3, [pc, #432]	@ (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a116:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a11a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a11e:	4b69      	ldr	r3, [pc, #420]	@ (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a122:	4a68      	ldr	r2, [pc, #416]	@ (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a128:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a12a:	4b66      	ldr	r3, [pc, #408]	@ (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a12c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a12e:	4a65      	ldr	r2, [pc, #404]	@ (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a130:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a134:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a136:	4a63      	ldr	r2, [pc, #396]	@ (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a138:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a13c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a13e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a142:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a146:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a14a:	d118      	bne.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a14c:	f7f9 fa44 	bl	80035d8 <HAL_GetTick>
 800a150:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a154:	e00d      	b.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a156:	f7f9 fa3f 	bl	80035d8 <HAL_GetTick>
 800a15a:	4602      	mov	r2, r0
 800a15c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a160:	1ad2      	subs	r2, r2, r3
 800a162:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a166:	429a      	cmp	r2, r3
 800a168:	d903      	bls.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a16a:	2303      	movs	r3, #3
 800a16c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800a170:	e005      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a172:	4b54      	ldr	r3, [pc, #336]	@ (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a176:	f003 0302 	and.w	r3, r3, #2
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d0eb      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a17e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a182:	2b00      	cmp	r3, #0
 800a184:	d129      	bne.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a18a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a18e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a192:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a196:	d10e      	bne.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a198:	4b4a      	ldr	r3, [pc, #296]	@ (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a1a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a1a8:	091a      	lsrs	r2, r3, #4
 800a1aa:	4b48      	ldr	r3, [pc, #288]	@ (800a2cc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a1ac:	4013      	ands	r3, r2
 800a1ae:	4a45      	ldr	r2, [pc, #276]	@ (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a1b0:	430b      	orrs	r3, r1
 800a1b2:	6113      	str	r3, [r2, #16]
 800a1b4:	e005      	b.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a1b6:	4b43      	ldr	r3, [pc, #268]	@ (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	4a42      	ldr	r2, [pc, #264]	@ (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a1bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a1c0:	6113      	str	r3, [r2, #16]
 800a1c2:	4b40      	ldr	r3, [pc, #256]	@ (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a1c4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a1c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a1ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1d2:	4a3c      	ldr	r2, [pc, #240]	@ (800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a1d4:	430b      	orrs	r3, r1
 800a1d6:	6713      	str	r3, [r2, #112]	@ 0x70
 800a1d8:	e008      	b.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a1da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800a1e2:	e003      	b.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a1ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f4:	f002 0301 	and.w	r3, r2, #1
 800a1f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a202:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a206:	460b      	mov	r3, r1
 800a208:	4313      	orrs	r3, r2
 800a20a:	f000 808f 	beq.w	800a32c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a20e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a212:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a214:	2b28      	cmp	r3, #40	@ 0x28
 800a216:	d871      	bhi.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a218:	a201      	add	r2, pc, #4	@ (adr r2, 800a220 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21e:	bf00      	nop
 800a220:	0800a305 	.word	0x0800a305
 800a224:	0800a2fd 	.word	0x0800a2fd
 800a228:	0800a2fd 	.word	0x0800a2fd
 800a22c:	0800a2fd 	.word	0x0800a2fd
 800a230:	0800a2fd 	.word	0x0800a2fd
 800a234:	0800a2fd 	.word	0x0800a2fd
 800a238:	0800a2fd 	.word	0x0800a2fd
 800a23c:	0800a2fd 	.word	0x0800a2fd
 800a240:	0800a2d1 	.word	0x0800a2d1
 800a244:	0800a2fd 	.word	0x0800a2fd
 800a248:	0800a2fd 	.word	0x0800a2fd
 800a24c:	0800a2fd 	.word	0x0800a2fd
 800a250:	0800a2fd 	.word	0x0800a2fd
 800a254:	0800a2fd 	.word	0x0800a2fd
 800a258:	0800a2fd 	.word	0x0800a2fd
 800a25c:	0800a2fd 	.word	0x0800a2fd
 800a260:	0800a2e7 	.word	0x0800a2e7
 800a264:	0800a2fd 	.word	0x0800a2fd
 800a268:	0800a2fd 	.word	0x0800a2fd
 800a26c:	0800a2fd 	.word	0x0800a2fd
 800a270:	0800a2fd 	.word	0x0800a2fd
 800a274:	0800a2fd 	.word	0x0800a2fd
 800a278:	0800a2fd 	.word	0x0800a2fd
 800a27c:	0800a2fd 	.word	0x0800a2fd
 800a280:	0800a305 	.word	0x0800a305
 800a284:	0800a2fd 	.word	0x0800a2fd
 800a288:	0800a2fd 	.word	0x0800a2fd
 800a28c:	0800a2fd 	.word	0x0800a2fd
 800a290:	0800a2fd 	.word	0x0800a2fd
 800a294:	0800a2fd 	.word	0x0800a2fd
 800a298:	0800a2fd 	.word	0x0800a2fd
 800a29c:	0800a2fd 	.word	0x0800a2fd
 800a2a0:	0800a305 	.word	0x0800a305
 800a2a4:	0800a2fd 	.word	0x0800a2fd
 800a2a8:	0800a2fd 	.word	0x0800a2fd
 800a2ac:	0800a2fd 	.word	0x0800a2fd
 800a2b0:	0800a2fd 	.word	0x0800a2fd
 800a2b4:	0800a2fd 	.word	0x0800a2fd
 800a2b8:	0800a2fd 	.word	0x0800a2fd
 800a2bc:	0800a2fd 	.word	0x0800a2fd
 800a2c0:	0800a305 	.word	0x0800a305
 800a2c4:	58024400 	.word	0x58024400
 800a2c8:	58024800 	.word	0x58024800
 800a2cc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2d4:	3308      	adds	r3, #8
 800a2d6:	2101      	movs	r1, #1
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f001 fdcb 	bl	800be74 <RCCEx_PLL2_Config>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a2e4:	e00f      	b.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ea:	3328      	adds	r3, #40	@ 0x28
 800a2ec:	2101      	movs	r1, #1
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f001 fe72 	bl	800bfd8 <RCCEx_PLL3_Config>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a2fa:	e004      	b.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a302:	e000      	b.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a304:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a306:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d10a      	bne.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a30e:	4bbf      	ldr	r3, [pc, #764]	@ (800a60c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a312:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a31a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a31c:	4abb      	ldr	r2, [pc, #748]	@ (800a60c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a31e:	430b      	orrs	r3, r1
 800a320:	6553      	str	r3, [r2, #84]	@ 0x54
 800a322:	e003      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a324:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a328:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a32c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a334:	f002 0302 	and.w	r3, r2, #2
 800a338:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a33c:	2300      	movs	r3, #0
 800a33e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a342:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a346:	460b      	mov	r3, r1
 800a348:	4313      	orrs	r3, r2
 800a34a:	d041      	beq.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a34c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a352:	2b05      	cmp	r3, #5
 800a354:	d824      	bhi.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a356:	a201      	add	r2, pc, #4	@ (adr r2, 800a35c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a35c:	0800a3a9 	.word	0x0800a3a9
 800a360:	0800a375 	.word	0x0800a375
 800a364:	0800a38b 	.word	0x0800a38b
 800a368:	0800a3a9 	.word	0x0800a3a9
 800a36c:	0800a3a9 	.word	0x0800a3a9
 800a370:	0800a3a9 	.word	0x0800a3a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a378:	3308      	adds	r3, #8
 800a37a:	2101      	movs	r1, #1
 800a37c:	4618      	mov	r0, r3
 800a37e:	f001 fd79 	bl	800be74 <RCCEx_PLL2_Config>
 800a382:	4603      	mov	r3, r0
 800a384:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a388:	e00f      	b.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a38a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a38e:	3328      	adds	r3, #40	@ 0x28
 800a390:	2101      	movs	r1, #1
 800a392:	4618      	mov	r0, r3
 800a394:	f001 fe20 	bl	800bfd8 <RCCEx_PLL3_Config>
 800a398:	4603      	mov	r3, r0
 800a39a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a39e:	e004      	b.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a3a6:	e000      	b.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a3a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d10a      	bne.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a3b2:	4b96      	ldr	r3, [pc, #600]	@ (800a60c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a3b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3b6:	f023 0107 	bic.w	r1, r3, #7
 800a3ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3c0:	4a92      	ldr	r2, [pc, #584]	@ (800a60c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a3c2:	430b      	orrs	r3, r1
 800a3c4:	6553      	str	r3, [r2, #84]	@ 0x54
 800a3c6:	e003      	b.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a3d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d8:	f002 0304 	and.w	r3, r2, #4
 800a3dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a3e6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	d044      	beq.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a3f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3f8:	2b05      	cmp	r3, #5
 800a3fa:	d825      	bhi.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a3fc:	a201      	add	r2, pc, #4	@ (adr r2, 800a404 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a3fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a402:	bf00      	nop
 800a404:	0800a451 	.word	0x0800a451
 800a408:	0800a41d 	.word	0x0800a41d
 800a40c:	0800a433 	.word	0x0800a433
 800a410:	0800a451 	.word	0x0800a451
 800a414:	0800a451 	.word	0x0800a451
 800a418:	0800a451 	.word	0x0800a451
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a41c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a420:	3308      	adds	r3, #8
 800a422:	2101      	movs	r1, #1
 800a424:	4618      	mov	r0, r3
 800a426:	f001 fd25 	bl	800be74 <RCCEx_PLL2_Config>
 800a42a:	4603      	mov	r3, r0
 800a42c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a430:	e00f      	b.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a436:	3328      	adds	r3, #40	@ 0x28
 800a438:	2101      	movs	r1, #1
 800a43a:	4618      	mov	r0, r3
 800a43c:	f001 fdcc 	bl	800bfd8 <RCCEx_PLL3_Config>
 800a440:	4603      	mov	r3, r0
 800a442:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a446:	e004      	b.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a44e:	e000      	b.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a450:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a452:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a456:	2b00      	cmp	r3, #0
 800a458:	d10b      	bne.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a45a:	4b6c      	ldr	r3, [pc, #432]	@ (800a60c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a45c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a45e:	f023 0107 	bic.w	r1, r3, #7
 800a462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a46a:	4a68      	ldr	r2, [pc, #416]	@ (800a60c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a46c:	430b      	orrs	r3, r1
 800a46e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a470:	e003      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a472:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a476:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a47a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a482:	f002 0320 	and.w	r3, r2, #32
 800a486:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a48a:	2300      	movs	r3, #0
 800a48c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a490:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a494:	460b      	mov	r3, r1
 800a496:	4313      	orrs	r3, r2
 800a498:	d055      	beq.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a49a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a49e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a4a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a4a6:	d033      	beq.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a4a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a4ac:	d82c      	bhi.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a4ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4b2:	d02f      	beq.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a4b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4b8:	d826      	bhi.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a4ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a4be:	d02b      	beq.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a4c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a4c4:	d820      	bhi.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a4c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4ca:	d012      	beq.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a4cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4d0:	d81a      	bhi.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d022      	beq.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a4d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4da:	d115      	bne.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4e0:	3308      	adds	r3, #8
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f001 fcc5 	bl	800be74 <RCCEx_PLL2_Config>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a4f0:	e015      	b.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a4f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4f6:	3328      	adds	r3, #40	@ 0x28
 800a4f8:	2102      	movs	r1, #2
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f001 fd6c 	bl	800bfd8 <RCCEx_PLL3_Config>
 800a500:	4603      	mov	r3, r0
 800a502:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a506:	e00a      	b.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a508:	2301      	movs	r3, #1
 800a50a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a50e:	e006      	b.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a510:	bf00      	nop
 800a512:	e004      	b.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a514:	bf00      	nop
 800a516:	e002      	b.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a518:	bf00      	nop
 800a51a:	e000      	b.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a51c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a51e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a522:	2b00      	cmp	r3, #0
 800a524:	d10b      	bne.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a526:	4b39      	ldr	r3, [pc, #228]	@ (800a60c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a52a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a52e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a532:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a536:	4a35      	ldr	r2, [pc, #212]	@ (800a60c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a538:	430b      	orrs	r3, r1
 800a53a:	6553      	str	r3, [r2, #84]	@ 0x54
 800a53c:	e003      	b.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a53e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a542:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a552:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a556:	2300      	movs	r3, #0
 800a558:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a55c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a560:	460b      	mov	r3, r1
 800a562:	4313      	orrs	r3, r2
 800a564:	d058      	beq.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a56a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a56e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a572:	d033      	beq.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a574:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a578:	d82c      	bhi.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a57a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a57e:	d02f      	beq.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a580:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a584:	d826      	bhi.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a586:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a58a:	d02b      	beq.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a58c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a590:	d820      	bhi.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a592:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a596:	d012      	beq.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a598:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a59c:	d81a      	bhi.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d022      	beq.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a5a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5a6:	d115      	bne.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ac:	3308      	adds	r3, #8
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f001 fc5f 	bl	800be74 <RCCEx_PLL2_Config>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a5bc:	e015      	b.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a5be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5c2:	3328      	adds	r3, #40	@ 0x28
 800a5c4:	2102      	movs	r1, #2
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f001 fd06 	bl	800bfd8 <RCCEx_PLL3_Config>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a5d2:	e00a      	b.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a5da:	e006      	b.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a5dc:	bf00      	nop
 800a5de:	e004      	b.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a5e0:	bf00      	nop
 800a5e2:	e002      	b.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a5e4:	bf00      	nop
 800a5e6:	e000      	b.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a5e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d10e      	bne.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a5f2:	4b06      	ldr	r3, [pc, #24]	@ (800a60c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a5f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5f6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a5fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a602:	4a02      	ldr	r2, [pc, #8]	@ (800a60c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a604:	430b      	orrs	r3, r1
 800a606:	6593      	str	r3, [r2, #88]	@ 0x58
 800a608:	e006      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a60a:	bf00      	nop
 800a60c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a610:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a614:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a620:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a624:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a628:	2300      	movs	r3, #0
 800a62a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a62e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a632:	460b      	mov	r3, r1
 800a634:	4313      	orrs	r3, r2
 800a636:	d055      	beq.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a63c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a640:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a644:	d033      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a646:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a64a:	d82c      	bhi.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a64c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a650:	d02f      	beq.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a652:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a656:	d826      	bhi.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a658:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a65c:	d02b      	beq.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a65e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a662:	d820      	bhi.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a664:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a668:	d012      	beq.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a66a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a66e:	d81a      	bhi.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a670:	2b00      	cmp	r3, #0
 800a672:	d022      	beq.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a674:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a678:	d115      	bne.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a67e:	3308      	adds	r3, #8
 800a680:	2100      	movs	r1, #0
 800a682:	4618      	mov	r0, r3
 800a684:	f001 fbf6 	bl	800be74 <RCCEx_PLL2_Config>
 800a688:	4603      	mov	r3, r0
 800a68a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a68e:	e015      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a694:	3328      	adds	r3, #40	@ 0x28
 800a696:	2102      	movs	r1, #2
 800a698:	4618      	mov	r0, r3
 800a69a:	f001 fc9d 	bl	800bfd8 <RCCEx_PLL3_Config>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a6a4:	e00a      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a6ac:	e006      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a6ae:	bf00      	nop
 800a6b0:	e004      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a6b2:	bf00      	nop
 800a6b4:	e002      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a6b6:	bf00      	nop
 800a6b8:	e000      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a6ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10b      	bne.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a6c4:	4ba0      	ldr	r3, [pc, #640]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a6c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6c8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a6cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a6d4:	4a9c      	ldr	r2, [pc, #624]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a6d6:	430b      	orrs	r3, r1
 800a6d8:	6593      	str	r3, [r2, #88]	@ 0x58
 800a6da:	e003      	b.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a6e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ec:	f002 0308 	and.w	r3, r2, #8
 800a6f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a6fa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a6fe:	460b      	mov	r3, r1
 800a700:	4313      	orrs	r3, r2
 800a702:	d01e      	beq.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a708:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a70c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a710:	d10c      	bne.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a716:	3328      	adds	r3, #40	@ 0x28
 800a718:	2102      	movs	r1, #2
 800a71a:	4618      	mov	r0, r3
 800a71c:	f001 fc5c 	bl	800bfd8 <RCCEx_PLL3_Config>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d002      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a72c:	4b86      	ldr	r3, [pc, #536]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a72e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a730:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a738:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a73c:	4a82      	ldr	r2, [pc, #520]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a73e:	430b      	orrs	r3, r1
 800a740:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74a:	f002 0310 	and.w	r3, r2, #16
 800a74e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a752:	2300      	movs	r3, #0
 800a754:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a758:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a75c:	460b      	mov	r3, r1
 800a75e:	4313      	orrs	r3, r2
 800a760:	d01e      	beq.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a76a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a76e:	d10c      	bne.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a774:	3328      	adds	r3, #40	@ 0x28
 800a776:	2102      	movs	r1, #2
 800a778:	4618      	mov	r0, r3
 800a77a:	f001 fc2d 	bl	800bfd8 <RCCEx_PLL3_Config>
 800a77e:	4603      	mov	r3, r0
 800a780:	2b00      	cmp	r3, #0
 800a782:	d002      	beq.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a78a:	4b6f      	ldr	r3, [pc, #444]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a78c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a78e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a796:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a79a:	4a6b      	ldr	r2, [pc, #428]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a79c:	430b      	orrs	r3, r1
 800a79e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a7ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a7b2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	d03e      	beq.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a7c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7c8:	d022      	beq.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a7ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7ce:	d81b      	bhi.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d003      	beq.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a7d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7d8:	d00b      	beq.n	800a7f2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a7da:	e015      	b.n	800a808 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7e0:	3308      	adds	r3, #8
 800a7e2:	2100      	movs	r1, #0
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f001 fb45 	bl	800be74 <RCCEx_PLL2_Config>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a7f0:	e00f      	b.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7f6:	3328      	adds	r3, #40	@ 0x28
 800a7f8:	2102      	movs	r1, #2
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f001 fbec 	bl	800bfd8 <RCCEx_PLL3_Config>
 800a800:	4603      	mov	r3, r0
 800a802:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a806:	e004      	b.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a80e:	e000      	b.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a810:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a812:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a816:	2b00      	cmp	r3, #0
 800a818:	d10b      	bne.n	800a832 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a81a:	4b4b      	ldr	r3, [pc, #300]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a81c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a81e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a826:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a82a:	4a47      	ldr	r2, [pc, #284]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a82c:	430b      	orrs	r3, r1
 800a82e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a830:	e003      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a832:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a836:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a83a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a842:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a846:	673b      	str	r3, [r7, #112]	@ 0x70
 800a848:	2300      	movs	r3, #0
 800a84a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a84c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a850:	460b      	mov	r3, r1
 800a852:	4313      	orrs	r3, r2
 800a854:	d03b      	beq.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a85a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a85e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a862:	d01f      	beq.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a864:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a868:	d818      	bhi.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a86a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a86e:	d003      	beq.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a870:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a874:	d007      	beq.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a876:	e011      	b.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a878:	4b33      	ldr	r3, [pc, #204]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a87a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a87c:	4a32      	ldr	r2, [pc, #200]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a87e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a882:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a884:	e00f      	b.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a88a:	3328      	adds	r3, #40	@ 0x28
 800a88c:	2101      	movs	r1, #1
 800a88e:	4618      	mov	r0, r3
 800a890:	f001 fba2 	bl	800bfd8 <RCCEx_PLL3_Config>
 800a894:	4603      	mov	r3, r0
 800a896:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a89a:	e004      	b.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a8a2:	e000      	b.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a8a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d10b      	bne.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a8ae:	4b26      	ldr	r3, [pc, #152]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a8b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a8b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8be:	4a22      	ldr	r2, [pc, #136]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a8c0:	430b      	orrs	r3, r1
 800a8c2:	6553      	str	r3, [r2, #84]	@ 0x54
 800a8c4:	e003      	b.n	800a8ce <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a8ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a8da:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a8dc:	2300      	movs	r3, #0
 800a8de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a8e0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	d034      	beq.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d003      	beq.n	800a8fc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a8f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8f8:	d007      	beq.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a8fa:	e011      	b.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8fc:	4b12      	ldr	r3, [pc, #72]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a8fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a900:	4a11      	ldr	r2, [pc, #68]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a902:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a906:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a908:	e00e      	b.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a90a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a90e:	3308      	adds	r3, #8
 800a910:	2102      	movs	r1, #2
 800a912:	4618      	mov	r0, r3
 800a914:	f001 faae 	bl	800be74 <RCCEx_PLL2_Config>
 800a918:	4603      	mov	r3, r0
 800a91a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a91e:	e003      	b.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a926:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a928:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d10d      	bne.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a930:	4b05      	ldr	r3, [pc, #20]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a934:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a93c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a93e:	4a02      	ldr	r2, [pc, #8]	@ (800a948 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a940:	430b      	orrs	r3, r1
 800a942:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a944:	e006      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a946:	bf00      	nop
 800a948:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a94c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a950:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a960:	663b      	str	r3, [r7, #96]	@ 0x60
 800a962:	2300      	movs	r3, #0
 800a964:	667b      	str	r3, [r7, #100]	@ 0x64
 800a966:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a96a:	460b      	mov	r3, r1
 800a96c:	4313      	orrs	r3, r2
 800a96e:	d00c      	beq.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a974:	3328      	adds	r3, #40	@ 0x28
 800a976:	2102      	movs	r1, #2
 800a978:	4618      	mov	r0, r3
 800a97a:	f001 fb2d 	bl	800bfd8 <RCCEx_PLL3_Config>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d002      	beq.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a98a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a992:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a996:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a998:	2300      	movs	r3, #0
 800a99a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a99c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	d036      	beq.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a9a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a9ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a9b0:	d018      	beq.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a9b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a9b6:	d811      	bhi.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a9b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9bc:	d014      	beq.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a9be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9c2:	d80b      	bhi.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d011      	beq.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a9c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9cc:	d106      	bne.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9ce:	4bb7      	ldr	r3, [pc, #732]	@ (800acac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a9d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9d2:	4ab6      	ldr	r2, [pc, #728]	@ (800acac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a9d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a9d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a9da:	e008      	b.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a9e2:	e004      	b.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a9e4:	bf00      	nop
 800a9e6:	e002      	b.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a9e8:	bf00      	nop
 800a9ea:	e000      	b.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a9ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10a      	bne.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a9f6:	4bad      	ldr	r3, [pc, #692]	@ (800acac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a9f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a9fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa04:	4aa9      	ldr	r2, [pc, #676]	@ (800acac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aa06:	430b      	orrs	r3, r1
 800aa08:	6553      	str	r3, [r2, #84]	@ 0x54
 800aa0a:	e003      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800aa14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800aa20:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa22:	2300      	movs	r3, #0
 800aa24:	657b      	str	r3, [r7, #84]	@ 0x54
 800aa26:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	d009      	beq.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800aa30:	4b9e      	ldr	r3, [pc, #632]	@ (800acac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aa32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa34:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800aa38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa3e:	4a9b      	ldr	r2, [pc, #620]	@ (800acac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aa40:	430b      	orrs	r3, r1
 800aa42:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800aa44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800aa50:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa52:	2300      	movs	r3, #0
 800aa54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa56:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	d009      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800aa60:	4b92      	ldr	r3, [pc, #584]	@ (800acac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aa62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa64:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800aa68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa6e:	4a8f      	ldr	r2, [pc, #572]	@ (800acac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aa70:	430b      	orrs	r3, r1
 800aa72:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800aa74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800aa80:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa82:	2300      	movs	r3, #0
 800aa84:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa86:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	d00e      	beq.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aa90:	4b86      	ldr	r3, [pc, #536]	@ (800acac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aa92:	691b      	ldr	r3, [r3, #16]
 800aa94:	4a85      	ldr	r2, [pc, #532]	@ (800acac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aa96:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800aa9a:	6113      	str	r3, [r2, #16]
 800aa9c:	4b83      	ldr	r3, [pc, #524]	@ (800acac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aa9e:	6919      	ldr	r1, [r3, #16]
 800aaa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaa4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800aaa8:	4a80      	ldr	r2, [pc, #512]	@ (800acac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aaaa:	430b      	orrs	r3, r1
 800aaac:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800aaae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800aaba:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aabc:	2300      	movs	r3, #0
 800aabe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aac0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800aac4:	460b      	mov	r3, r1
 800aac6:	4313      	orrs	r3, r2
 800aac8:	d009      	beq.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800aaca:	4b78      	ldr	r3, [pc, #480]	@ (800acac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aacc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aace:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800aad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aad8:	4a74      	ldr	r2, [pc, #464]	@ (800acac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aada:	430b      	orrs	r3, r1
 800aadc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800aaea:	633b      	str	r3, [r7, #48]	@ 0x30
 800aaec:	2300      	movs	r3, #0
 800aaee:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaf0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	d00a      	beq.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aafa:	4b6c      	ldr	r3, [pc, #432]	@ (800acac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aafc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aafe:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800ab02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab0a:	4a68      	ldr	r2, [pc, #416]	@ (800acac <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ab0c:	430b      	orrs	r3, r1
 800ab0e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ab10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	2100      	movs	r1, #0
 800ab1a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ab1c:	f003 0301 	and.w	r3, r3, #1
 800ab20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab22:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ab26:	460b      	mov	r3, r1
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	d011      	beq.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab30:	3308      	adds	r3, #8
 800ab32:	2100      	movs	r1, #0
 800ab34:	4618      	mov	r0, r3
 800ab36:	f001 f99d 	bl	800be74 <RCCEx_PLL2_Config>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ab40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d003      	beq.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ab50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab58:	2100      	movs	r1, #0
 800ab5a:	6239      	str	r1, [r7, #32]
 800ab5c:	f003 0302 	and.w	r3, r3, #2
 800ab60:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab62:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ab66:	460b      	mov	r3, r1
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	d011      	beq.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ab6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab70:	3308      	adds	r3, #8
 800ab72:	2101      	movs	r1, #1
 800ab74:	4618      	mov	r0, r3
 800ab76:	f001 f97d 	bl	800be74 <RCCEx_PLL2_Config>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ab80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d003      	beq.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ab90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab98:	2100      	movs	r1, #0
 800ab9a:	61b9      	str	r1, [r7, #24]
 800ab9c:	f003 0304 	and.w	r3, r3, #4
 800aba0:	61fb      	str	r3, [r7, #28]
 800aba2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800aba6:	460b      	mov	r3, r1
 800aba8:	4313      	orrs	r3, r2
 800abaa:	d011      	beq.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800abac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abb0:	3308      	adds	r3, #8
 800abb2:	2102      	movs	r1, #2
 800abb4:	4618      	mov	r0, r3
 800abb6:	f001 f95d 	bl	800be74 <RCCEx_PLL2_Config>
 800abba:	4603      	mov	r3, r0
 800abbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800abc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d003      	beq.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800abcc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800abd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd8:	2100      	movs	r1, #0
 800abda:	6139      	str	r1, [r7, #16]
 800abdc:	f003 0308 	and.w	r3, r3, #8
 800abe0:	617b      	str	r3, [r7, #20]
 800abe2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800abe6:	460b      	mov	r3, r1
 800abe8:	4313      	orrs	r3, r2
 800abea:	d011      	beq.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800abec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abf0:	3328      	adds	r3, #40	@ 0x28
 800abf2:	2100      	movs	r1, #0
 800abf4:	4618      	mov	r0, r3
 800abf6:	f001 f9ef 	bl	800bfd8 <RCCEx_PLL3_Config>
 800abfa:	4603      	mov	r3, r0
 800abfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800ac00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d003      	beq.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ac10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac18:	2100      	movs	r1, #0
 800ac1a:	60b9      	str	r1, [r7, #8]
 800ac1c:	f003 0310 	and.w	r3, r3, #16
 800ac20:	60fb      	str	r3, [r7, #12]
 800ac22:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ac26:	460b      	mov	r3, r1
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	d011      	beq.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac30:	3328      	adds	r3, #40	@ 0x28
 800ac32:	2101      	movs	r1, #1
 800ac34:	4618      	mov	r0, r3
 800ac36:	f001 f9cf 	bl	800bfd8 <RCCEx_PLL3_Config>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ac40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d003      	beq.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ac50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac58:	2100      	movs	r1, #0
 800ac5a:	6039      	str	r1, [r7, #0]
 800ac5c:	f003 0320 	and.w	r3, r3, #32
 800ac60:	607b      	str	r3, [r7, #4]
 800ac62:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ac66:	460b      	mov	r3, r1
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	d011      	beq.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac70:	3328      	adds	r3, #40	@ 0x28
 800ac72:	2102      	movs	r1, #2
 800ac74:	4618      	mov	r0, r3
 800ac76:	f001 f9af 	bl	800bfd8 <RCCEx_PLL3_Config>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ac80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d003      	beq.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800ac90:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d101      	bne.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	e000      	b.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800ac9c:	2301      	movs	r3, #1
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800aca4:	46bd      	mov	sp, r7
 800aca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800acaa:	bf00      	nop
 800acac:	58024400 	.word	0x58024400

0800acb0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b090      	sub	sp, #64	@ 0x40
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800acba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acbe:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800acc2:	430b      	orrs	r3, r1
 800acc4:	f040 8094 	bne.w	800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800acc8:	4b9b      	ldr	r3, [pc, #620]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800acca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800accc:	f003 0307 	and.w	r3, r3, #7
 800acd0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800acd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd4:	2b04      	cmp	r3, #4
 800acd6:	f200 8087 	bhi.w	800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800acda:	a201      	add	r2, pc, #4	@ (adr r2, 800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800acdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace0:	0800acf5 	.word	0x0800acf5
 800ace4:	0800ad1d 	.word	0x0800ad1d
 800ace8:	0800ad45 	.word	0x0800ad45
 800acec:	0800ade1 	.word	0x0800ade1
 800acf0:	0800ad6d 	.word	0x0800ad6d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800acf4:	4b90      	ldr	r3, [pc, #576]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800acfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad00:	d108      	bne.n	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad06:	4618      	mov	r0, r3
 800ad08:	f000 ff62 	bl	800bbd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad10:	f000 bc93 	b.w	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad14:	2300      	movs	r3, #0
 800ad16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad18:	f000 bc8f 	b.w	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad1c:	4b86      	ldr	r3, [pc, #536]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad28:	d108      	bne.n	800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad2a:	f107 0318 	add.w	r3, r7, #24
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f000 fca6 	bl	800b680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad38:	f000 bc7f 	b.w	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad40:	f000 bc7b 	b.w	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad44:	4b7c      	ldr	r3, [pc, #496]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad50:	d108      	bne.n	800ad64 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad52:	f107 030c 	add.w	r3, r7, #12
 800ad56:	4618      	mov	r0, r3
 800ad58:	f000 fde6 	bl	800b928 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad60:	f000 bc6b 	b.w	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad64:	2300      	movs	r3, #0
 800ad66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad68:	f000 bc67 	b.w	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad6c:	4b72      	ldr	r3, [pc, #456]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ad74:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad76:	4b70      	ldr	r3, [pc, #448]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f003 0304 	and.w	r3, r3, #4
 800ad7e:	2b04      	cmp	r3, #4
 800ad80:	d10c      	bne.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ad82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d109      	bne.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad88:	4b6b      	ldr	r3, [pc, #428]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	08db      	lsrs	r3, r3, #3
 800ad8e:	f003 0303 	and.w	r3, r3, #3
 800ad92:	4a6a      	ldr	r2, [pc, #424]	@ (800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ad94:	fa22 f303 	lsr.w	r3, r2, r3
 800ad98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad9a:	e01f      	b.n	800addc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad9c:	4b66      	ldr	r3, [pc, #408]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ada4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ada8:	d106      	bne.n	800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800adaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800adb0:	d102      	bne.n	800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800adb2:	4b63      	ldr	r3, [pc, #396]	@ (800af40 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800adb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800adb6:	e011      	b.n	800addc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800adb8:	4b5f      	ldr	r3, [pc, #380]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800adc4:	d106      	bne.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800adc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adcc:	d102      	bne.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800adce:	4b5d      	ldr	r3, [pc, #372]	@ (800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800add0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800add2:	e003      	b.n	800addc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800add4:	2300      	movs	r3, #0
 800add6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800add8:	f000 bc2f 	b.w	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800addc:	f000 bc2d 	b.w	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ade0:	4b59      	ldr	r3, [pc, #356]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ade2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ade4:	f000 bc29 	b.w	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ade8:	2300      	movs	r3, #0
 800adea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adec:	f000 bc25 	b.w	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800adf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adf4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800adf8:	430b      	orrs	r3, r1
 800adfa:	f040 80a7 	bne.w	800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800adfe:	4b4e      	ldr	r3, [pc, #312]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ae00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae02:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800ae06:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ae08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ae0e:	d054      	beq.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800ae10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ae16:	f200 808b 	bhi.w	800af30 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae1c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ae20:	f000 8083 	beq.w	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800ae24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae26:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ae2a:	f200 8081 	bhi.w	800af30 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae34:	d02f      	beq.n	800ae96 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ae36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae3c:	d878      	bhi.n	800af30 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d004      	beq.n	800ae4e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800ae44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae4a:	d012      	beq.n	800ae72 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800ae4c:	e070      	b.n	800af30 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae4e:	4b3a      	ldr	r3, [pc, #232]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae5a:	d107      	bne.n	800ae6c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae60:	4618      	mov	r0, r3
 800ae62:	f000 feb5 	bl	800bbd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae6a:	e3e6      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae70:	e3e3      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae72:	4b31      	ldr	r3, [pc, #196]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae7e:	d107      	bne.n	800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae80:	f107 0318 	add.w	r3, r7, #24
 800ae84:	4618      	mov	r0, r3
 800ae86:	f000 fbfb 	bl	800b680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae8a:	69bb      	ldr	r3, [r7, #24]
 800ae8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae8e:	e3d4      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae90:	2300      	movs	r3, #0
 800ae92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae94:	e3d1      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae96:	4b28      	ldr	r3, [pc, #160]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aea2:	d107      	bne.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aea4:	f107 030c 	add.w	r3, r7, #12
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f000 fd3d 	bl	800b928 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeb2:	e3c2      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeb8:	e3bf      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aeba:	4b1f      	ldr	r3, [pc, #124]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aebe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aec2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aec4:	4b1c      	ldr	r3, [pc, #112]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f003 0304 	and.w	r3, r3, #4
 800aecc:	2b04      	cmp	r3, #4
 800aece:	d10c      	bne.n	800aeea <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800aed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d109      	bne.n	800aeea <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aed6:	4b18      	ldr	r3, [pc, #96]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	08db      	lsrs	r3, r3, #3
 800aedc:	f003 0303 	and.w	r3, r3, #3
 800aee0:	4a16      	ldr	r2, [pc, #88]	@ (800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800aee2:	fa22 f303 	lsr.w	r3, r2, r3
 800aee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aee8:	e01e      	b.n	800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aeea:	4b13      	ldr	r3, [pc, #76]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aef6:	d106      	bne.n	800af06 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800aef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aefa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aefe:	d102      	bne.n	800af06 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800af00:	4b0f      	ldr	r3, [pc, #60]	@ (800af40 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800af02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af04:	e010      	b.n	800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af06:	4b0c      	ldr	r3, [pc, #48]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af12:	d106      	bne.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800af14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af1a:	d102      	bne.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800af1c:	4b09      	ldr	r3, [pc, #36]	@ (800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af20:	e002      	b.n	800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800af22:	2300      	movs	r3, #0
 800af24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800af26:	e388      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800af28:	e387      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800af2a:	4b07      	ldr	r3, [pc, #28]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800af2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af2e:	e384      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800af30:	2300      	movs	r3, #0
 800af32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af34:	e381      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800af36:	bf00      	nop
 800af38:	58024400 	.word	0x58024400
 800af3c:	03d09000 	.word	0x03d09000
 800af40:	003d0900 	.word	0x003d0900
 800af44:	017d7840 	.word	0x017d7840
 800af48:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800af4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af50:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800af54:	430b      	orrs	r3, r1
 800af56:	f040 809c 	bne.w	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800af5a:	4b9e      	ldr	r3, [pc, #632]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800af5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af5e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800af62:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800af64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800af6a:	d054      	beq.n	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800af6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800af72:	f200 808b 	bhi.w	800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800af76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800af7c:	f000 8083 	beq.w	800b086 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800af80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800af86:	f200 8081 	bhi.w	800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800af8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af90:	d02f      	beq.n	800aff2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800af92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af98:	d878      	bhi.n	800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800af9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d004      	beq.n	800afaa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800afa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800afa6:	d012      	beq.n	800afce <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800afa8:	e070      	b.n	800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800afaa:	4b8a      	ldr	r3, [pc, #552]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800afb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800afb6:	d107      	bne.n	800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800afbc:	4618      	mov	r0, r3
 800afbe:	f000 fe07 	bl	800bbd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afc6:	e338      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afc8:	2300      	movs	r3, #0
 800afca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afcc:	e335      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afce:	4b81      	ldr	r3, [pc, #516]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800afd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800afda:	d107      	bne.n	800afec <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afdc:	f107 0318 	add.w	r3, r7, #24
 800afe0:	4618      	mov	r0, r3
 800afe2:	f000 fb4d 	bl	800b680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afea:	e326      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afec:	2300      	movs	r3, #0
 800afee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aff0:	e323      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aff2:	4b78      	ldr	r3, [pc, #480]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800affa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800affe:	d107      	bne.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b000:	f107 030c 	add.w	r3, r7, #12
 800b004:	4618      	mov	r0, r3
 800b006:	f000 fc8f 	bl	800b928 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b00e:	e314      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b010:	2300      	movs	r3, #0
 800b012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b014:	e311      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b016:	4b6f      	ldr	r3, [pc, #444]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b01a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b01e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b020:	4b6c      	ldr	r3, [pc, #432]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f003 0304 	and.w	r3, r3, #4
 800b028:	2b04      	cmp	r3, #4
 800b02a:	d10c      	bne.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b02c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d109      	bne.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b032:	4b68      	ldr	r3, [pc, #416]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	08db      	lsrs	r3, r3, #3
 800b038:	f003 0303 	and.w	r3, r3, #3
 800b03c:	4a66      	ldr	r2, [pc, #408]	@ (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b03e:	fa22 f303 	lsr.w	r3, r2, r3
 800b042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b044:	e01e      	b.n	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b046:	4b63      	ldr	r3, [pc, #396]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b04e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b052:	d106      	bne.n	800b062 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b056:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b05a:	d102      	bne.n	800b062 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b05c:	4b5f      	ldr	r3, [pc, #380]	@ (800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b05e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b060:	e010      	b.n	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b062:	4b5c      	ldr	r3, [pc, #368]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b06a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b06e:	d106      	bne.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b072:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b076:	d102      	bne.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b078:	4b59      	ldr	r3, [pc, #356]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b07c:	e002      	b.n	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b07e:	2300      	movs	r3, #0
 800b080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b082:	e2da      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b084:	e2d9      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b086:	4b57      	ldr	r3, [pc, #348]	@ (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b08a:	e2d6      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b08c:	2300      	movs	r3, #0
 800b08e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b090:	e2d3      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b092:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b096:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b09a:	430b      	orrs	r3, r1
 800b09c:	f040 80a7 	bne.w	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b0a0:	4b4c      	ldr	r3, [pc, #304]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b0a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0a4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b0a8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b0b0:	d055      	beq.n	800b15e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b0b8:	f200 8096 	bhi.w	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b0c2:	f000 8084 	beq.w	800b1ce <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b0c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b0cc:	f200 808c 	bhi.w	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b0d6:	d030      	beq.n	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b0de:	f200 8083 	bhi.w	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d004      	beq.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0ee:	d012      	beq.n	800b116 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b0f0:	e07a      	b.n	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0f2:	4b38      	ldr	r3, [pc, #224]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b0fe:	d107      	bne.n	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b100:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b104:	4618      	mov	r0, r3
 800b106:	f000 fd63 	bl	800bbd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b10a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b10c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b10e:	e294      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b110:	2300      	movs	r3, #0
 800b112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b114:	e291      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b116:	4b2f      	ldr	r3, [pc, #188]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b11e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b122:	d107      	bne.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b124:	f107 0318 	add.w	r3, r7, #24
 800b128:	4618      	mov	r0, r3
 800b12a:	f000 faa9 	bl	800b680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b12e:	69bb      	ldr	r3, [r7, #24]
 800b130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b132:	e282      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b134:	2300      	movs	r3, #0
 800b136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b138:	e27f      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b13a:	4b26      	ldr	r3, [pc, #152]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b142:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b146:	d107      	bne.n	800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b148:	f107 030c 	add.w	r3, r7, #12
 800b14c:	4618      	mov	r0, r3
 800b14e:	f000 fbeb 	bl	800b928 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b156:	e270      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b158:	2300      	movs	r3, #0
 800b15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b15c:	e26d      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b15e:	4b1d      	ldr	r3, [pc, #116]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b162:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b166:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b168:	4b1a      	ldr	r3, [pc, #104]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f003 0304 	and.w	r3, r3, #4
 800b170:	2b04      	cmp	r3, #4
 800b172:	d10c      	bne.n	800b18e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b176:	2b00      	cmp	r3, #0
 800b178:	d109      	bne.n	800b18e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b17a:	4b16      	ldr	r3, [pc, #88]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	08db      	lsrs	r3, r3, #3
 800b180:	f003 0303 	and.w	r3, r3, #3
 800b184:	4a14      	ldr	r2, [pc, #80]	@ (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b186:	fa22 f303 	lsr.w	r3, r2, r3
 800b18a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b18c:	e01e      	b.n	800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b18e:	4b11      	ldr	r3, [pc, #68]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b19a:	d106      	bne.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b19c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b19e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1a2:	d102      	bne.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b1a4:	4b0d      	ldr	r3, [pc, #52]	@ (800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1a8:	e010      	b.n	800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1aa:	4b0a      	ldr	r3, [pc, #40]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1b6:	d106      	bne.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b1b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1be:	d102      	bne.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b1c0:	4b07      	ldr	r3, [pc, #28]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1c4:	e002      	b.n	800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b1ca:	e236      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b1cc:	e235      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b1ce:	4b05      	ldr	r3, [pc, #20]	@ (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b1d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1d2:	e232      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b1d4:	58024400 	.word	0x58024400
 800b1d8:	03d09000 	.word	0x03d09000
 800b1dc:	003d0900 	.word	0x003d0900
 800b1e0:	017d7840 	.word	0x017d7840
 800b1e4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1ec:	e225      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b1ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1f2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b1f6:	430b      	orrs	r3, r1
 800b1f8:	f040 8085 	bne.w	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b1fc:	4b9c      	ldr	r3, [pc, #624]	@ (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b1fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b200:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b204:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b208:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b20c:	d06b      	beq.n	800b2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b210:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b214:	d874      	bhi.n	800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b218:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b21c:	d056      	beq.n	800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b220:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b224:	d86c      	bhi.n	800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b228:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b22c:	d03b      	beq.n	800b2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b230:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b234:	d864      	bhi.n	800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b238:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b23c:	d021      	beq.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b240:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b244:	d85c      	bhi.n	800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d004      	beq.n	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b24e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b252:	d004      	beq.n	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b254:	e054      	b.n	800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b256:	f7fe fb5f 	bl	8009918 <HAL_RCC_GetPCLK1Freq>
 800b25a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b25c:	e1ed      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b25e:	4b84      	ldr	r3, [pc, #528]	@ (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b266:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b26a:	d107      	bne.n	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b26c:	f107 0318 	add.w	r3, r7, #24
 800b270:	4618      	mov	r0, r3
 800b272:	f000 fa05 	bl	800b680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b27a:	e1de      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b27c:	2300      	movs	r3, #0
 800b27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b280:	e1db      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b282:	4b7b      	ldr	r3, [pc, #492]	@ (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b28a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b28e:	d107      	bne.n	800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b290:	f107 030c 	add.w	r3, r7, #12
 800b294:	4618      	mov	r0, r3
 800b296:	f000 fb47 	bl	800b928 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b29e:	e1cc      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2a4:	e1c9      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b2a6:	4b72      	ldr	r3, [pc, #456]	@ (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f003 0304 	and.w	r3, r3, #4
 800b2ae:	2b04      	cmp	r3, #4
 800b2b0:	d109      	bne.n	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2b2:	4b6f      	ldr	r3, [pc, #444]	@ (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	08db      	lsrs	r3, r3, #3
 800b2b8:	f003 0303 	and.w	r3, r3, #3
 800b2bc:	4a6d      	ldr	r2, [pc, #436]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b2be:	fa22 f303 	lsr.w	r3, r2, r3
 800b2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2c4:	e1b9      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2ca:	e1b6      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b2cc:	4b68      	ldr	r3, [pc, #416]	@ (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2d8:	d102      	bne.n	800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b2da:	4b67      	ldr	r3, [pc, #412]	@ (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b2dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2de:	e1ac      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2e4:	e1a9      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b2e6:	4b62      	ldr	r3, [pc, #392]	@ (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b2f2:	d102      	bne.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b2f4:	4b61      	ldr	r3, [pc, #388]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2f8:	e19f      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2fe:	e19c      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b300:	2300      	movs	r3, #0
 800b302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b304:	e199      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b30a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b30e:	430b      	orrs	r3, r1
 800b310:	d173      	bne.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b312:	4b57      	ldr	r3, [pc, #348]	@ (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b316:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b31a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b31e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b322:	d02f      	beq.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b326:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b32a:	d863      	bhi.n	800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d004      	beq.n	800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b338:	d012      	beq.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b33a:	e05b      	b.n	800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b33c:	4b4c      	ldr	r3, [pc, #304]	@ (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b344:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b348:	d107      	bne.n	800b35a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b34a:	f107 0318 	add.w	r3, r7, #24
 800b34e:	4618      	mov	r0, r3
 800b350:	f000 f996 	bl	800b680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b354:	69bb      	ldr	r3, [r7, #24]
 800b356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b358:	e16f      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b35a:	2300      	movs	r3, #0
 800b35c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b35e:	e16c      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b360:	4b43      	ldr	r3, [pc, #268]	@ (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b368:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b36c:	d107      	bne.n	800b37e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b36e:	f107 030c 	add.w	r3, r7, #12
 800b372:	4618      	mov	r0, r3
 800b374:	f000 fad8 	bl	800b928 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b37c:	e15d      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b37e:	2300      	movs	r3, #0
 800b380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b382:	e15a      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b384:	4b3a      	ldr	r3, [pc, #232]	@ (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b388:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b38c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b38e:	4b38      	ldr	r3, [pc, #224]	@ (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f003 0304 	and.w	r3, r3, #4
 800b396:	2b04      	cmp	r3, #4
 800b398:	d10c      	bne.n	800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b39a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d109      	bne.n	800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3a0:	4b33      	ldr	r3, [pc, #204]	@ (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	08db      	lsrs	r3, r3, #3
 800b3a6:	f003 0303 	and.w	r3, r3, #3
 800b3aa:	4a32      	ldr	r2, [pc, #200]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b3ac:	fa22 f303 	lsr.w	r3, r2, r3
 800b3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3b2:	e01e      	b.n	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3b4:	4b2e      	ldr	r3, [pc, #184]	@ (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3c0:	d106      	bne.n	800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b3c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3c8:	d102      	bne.n	800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b3ca:	4b2b      	ldr	r3, [pc, #172]	@ (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b3cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3ce:	e010      	b.n	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b3d0:	4b27      	ldr	r3, [pc, #156]	@ (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b3dc:	d106      	bne.n	800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b3de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3e4:	d102      	bne.n	800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b3e6:	4b25      	ldr	r3, [pc, #148]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3ea:	e002      	b.n	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b3f0:	e123      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b3f2:	e122      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3f8:	e11f      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b3fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3fe:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b402:	430b      	orrs	r3, r1
 800b404:	d13c      	bne.n	800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b406:	4b1a      	ldr	r3, [pc, #104]	@ (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b40a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b40e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b412:	2b00      	cmp	r3, #0
 800b414:	d004      	beq.n	800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b41c:	d012      	beq.n	800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b41e:	e023      	b.n	800b468 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b420:	4b13      	ldr	r3, [pc, #76]	@ (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b428:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b42c:	d107      	bne.n	800b43e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b42e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b432:	4618      	mov	r0, r3
 800b434:	f000 fbcc 	bl	800bbd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b43c:	e0fd      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b43e:	2300      	movs	r3, #0
 800b440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b442:	e0fa      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b444:	4b0a      	ldr	r3, [pc, #40]	@ (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b44c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b450:	d107      	bne.n	800b462 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b452:	f107 0318 	add.w	r3, r7, #24
 800b456:	4618      	mov	r0, r3
 800b458:	f000 f912 	bl	800b680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b45c:	6a3b      	ldr	r3, [r7, #32]
 800b45e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b460:	e0eb      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b462:	2300      	movs	r3, #0
 800b464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b466:	e0e8      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b468:	2300      	movs	r3, #0
 800b46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b46c:	e0e5      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b46e:	bf00      	nop
 800b470:	58024400 	.word	0x58024400
 800b474:	03d09000 	.word	0x03d09000
 800b478:	003d0900 	.word	0x003d0900
 800b47c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b480:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b484:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b488:	430b      	orrs	r3, r1
 800b48a:	f040 8085 	bne.w	800b598 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b48e:	4b6d      	ldr	r3, [pc, #436]	@ (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b492:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b496:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b49a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b49e:	d06b      	beq.n	800b578 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b4a6:	d874      	bhi.n	800b592 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4ae:	d056      	beq.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4b6:	d86c      	bhi.n	800b592 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b4b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b4be:	d03b      	beq.n	800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b4c6:	d864      	bhi.n	800b592 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b4c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4ce:	d021      	beq.n	800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4d6:	d85c      	bhi.n	800b592 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d004      	beq.n	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b4de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4e4:	d004      	beq.n	800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b4e6:	e054      	b.n	800b592 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b4e8:	f000 f8b4 	bl	800b654 <HAL_RCCEx_GetD3PCLK1Freq>
 800b4ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b4ee:	e0a4      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4f0:	4b54      	ldr	r3, [pc, #336]	@ (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b4fc:	d107      	bne.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4fe:	f107 0318 	add.w	r3, r7, #24
 800b502:	4618      	mov	r0, r3
 800b504:	f000 f8bc 	bl	800b680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b508:	69fb      	ldr	r3, [r7, #28]
 800b50a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b50c:	e095      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b50e:	2300      	movs	r3, #0
 800b510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b512:	e092      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b514:	4b4b      	ldr	r3, [pc, #300]	@ (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b51c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b520:	d107      	bne.n	800b532 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b522:	f107 030c 	add.w	r3, r7, #12
 800b526:	4618      	mov	r0, r3
 800b528:	f000 f9fe 	bl	800b928 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b530:	e083      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b532:	2300      	movs	r3, #0
 800b534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b536:	e080      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b538:	4b42      	ldr	r3, [pc, #264]	@ (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f003 0304 	and.w	r3, r3, #4
 800b540:	2b04      	cmp	r3, #4
 800b542:	d109      	bne.n	800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b544:	4b3f      	ldr	r3, [pc, #252]	@ (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	08db      	lsrs	r3, r3, #3
 800b54a:	f003 0303 	and.w	r3, r3, #3
 800b54e:	4a3e      	ldr	r2, [pc, #248]	@ (800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b550:	fa22 f303 	lsr.w	r3, r2, r3
 800b554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b556:	e070      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b558:	2300      	movs	r3, #0
 800b55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b55c:	e06d      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b55e:	4b39      	ldr	r3, [pc, #228]	@ (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b56a:	d102      	bne.n	800b572 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b56c:	4b37      	ldr	r3, [pc, #220]	@ (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b570:	e063      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b572:	2300      	movs	r3, #0
 800b574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b576:	e060      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b578:	4b32      	ldr	r3, [pc, #200]	@ (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b580:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b584:	d102      	bne.n	800b58c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b586:	4b32      	ldr	r3, [pc, #200]	@ (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b58a:	e056      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b58c:	2300      	movs	r3, #0
 800b58e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b590:	e053      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b592:	2300      	movs	r3, #0
 800b594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b596:	e050      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b59c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b5a0:	430b      	orrs	r3, r1
 800b5a2:	d148      	bne.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b5a4:	4b27      	ldr	r3, [pc, #156]	@ (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b5a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b5ac:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b5ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5b4:	d02a      	beq.n	800b60c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5bc:	d838      	bhi.n	800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b5be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d004      	beq.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5ca:	d00d      	beq.n	800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b5cc:	e030      	b.n	800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b5ce:	4b1d      	ldr	r3, [pc, #116]	@ (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5da:	d102      	bne.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b5dc:	4b1c      	ldr	r3, [pc, #112]	@ (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5e0:	e02b      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5e6:	e028      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b5e8:	4b16      	ldr	r3, [pc, #88]	@ (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b5f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b5f4:	d107      	bne.n	800b606 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f000 fae8 	bl	800bbd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b604:	e019      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b606:	2300      	movs	r3, #0
 800b608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b60a:	e016      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b60c:	4b0d      	ldr	r3, [pc, #52]	@ (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b614:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b618:	d107      	bne.n	800b62a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b61a:	f107 0318 	add.w	r3, r7, #24
 800b61e:	4618      	mov	r0, r3
 800b620:	f000 f82e 	bl	800b680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b624:	69fb      	ldr	r3, [r7, #28]
 800b626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b628:	e007      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b62a:	2300      	movs	r3, #0
 800b62c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b62e:	e004      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b630:	2300      	movs	r3, #0
 800b632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b634:	e001      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b636:	2300      	movs	r3, #0
 800b638:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b63a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3740      	adds	r7, #64	@ 0x40
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	58024400 	.word	0x58024400
 800b648:	03d09000 	.word	0x03d09000
 800b64c:	003d0900 	.word	0x003d0900
 800b650:	017d7840 	.word	0x017d7840

0800b654 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b658:	f7fe f92e 	bl	80098b8 <HAL_RCC_GetHCLKFreq>
 800b65c:	4602      	mov	r2, r0
 800b65e:	4b06      	ldr	r3, [pc, #24]	@ (800b678 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b660:	6a1b      	ldr	r3, [r3, #32]
 800b662:	091b      	lsrs	r3, r3, #4
 800b664:	f003 0307 	and.w	r3, r3, #7
 800b668:	4904      	ldr	r1, [pc, #16]	@ (800b67c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b66a:	5ccb      	ldrb	r3, [r1, r3]
 800b66c:	f003 031f 	and.w	r3, r3, #31
 800b670:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b674:	4618      	mov	r0, r3
 800b676:	bd80      	pop	{r7, pc}
 800b678:	58024400 	.word	0x58024400
 800b67c:	08010ea8 	.word	0x08010ea8

0800b680 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b680:	b480      	push	{r7}
 800b682:	b089      	sub	sp, #36	@ 0x24
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b688:	4ba1      	ldr	r3, [pc, #644]	@ (800b910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b68a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b68c:	f003 0303 	and.w	r3, r3, #3
 800b690:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b692:	4b9f      	ldr	r3, [pc, #636]	@ (800b910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b696:	0b1b      	lsrs	r3, r3, #12
 800b698:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b69c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b69e:	4b9c      	ldr	r3, [pc, #624]	@ (800b910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6a2:	091b      	lsrs	r3, r3, #4
 800b6a4:	f003 0301 	and.w	r3, r3, #1
 800b6a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b6aa:	4b99      	ldr	r3, [pc, #612]	@ (800b910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6ae:	08db      	lsrs	r3, r3, #3
 800b6b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b6b4:	693a      	ldr	r2, [r7, #16]
 800b6b6:	fb02 f303 	mul.w	r3, r2, r3
 800b6ba:	ee07 3a90 	vmov	s15, r3
 800b6be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	f000 8111 	beq.w	800b8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	f000 8083 	beq.w	800b7dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	2b02      	cmp	r3, #2
 800b6da:	f200 80a1 	bhi.w	800b820 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b6de:	69bb      	ldr	r3, [r7, #24]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d003      	beq.n	800b6ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b6e4:	69bb      	ldr	r3, [r7, #24]
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d056      	beq.n	800b798 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b6ea:	e099      	b.n	800b820 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6ec:	4b88      	ldr	r3, [pc, #544]	@ (800b910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f003 0320 	and.w	r3, r3, #32
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d02d      	beq.n	800b754 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6f8:	4b85      	ldr	r3, [pc, #532]	@ (800b910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	08db      	lsrs	r3, r3, #3
 800b6fe:	f003 0303 	and.w	r3, r3, #3
 800b702:	4a84      	ldr	r2, [pc, #528]	@ (800b914 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b704:	fa22 f303 	lsr.w	r3, r2, r3
 800b708:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	ee07 3a90 	vmov	s15, r3
 800b710:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	ee07 3a90 	vmov	s15, r3
 800b71a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b71e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b722:	4b7b      	ldr	r3, [pc, #492]	@ (800b910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b72a:	ee07 3a90 	vmov	s15, r3
 800b72e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b732:	ed97 6a03 	vldr	s12, [r7, #12]
 800b736:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b918 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b73a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b73e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b74a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b74e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b752:	e087      	b.n	800b864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	ee07 3a90 	vmov	s15, r3
 800b75a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b75e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b91c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b766:	4b6a      	ldr	r3, [pc, #424]	@ (800b910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b76a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b76e:	ee07 3a90 	vmov	s15, r3
 800b772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b776:	ed97 6a03 	vldr	s12, [r7, #12]
 800b77a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b918 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b77e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b78a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b78e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b796:	e065      	b.n	800b864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	ee07 3a90 	vmov	s15, r3
 800b79e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b920 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b7a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7aa:	4b59      	ldr	r3, [pc, #356]	@ (800b910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7b2:	ee07 3a90 	vmov	s15, r3
 800b7b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b918 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7da:	e043      	b.n	800b864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	ee07 3a90 	vmov	s15, r3
 800b7e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b924 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b7ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7ee:	4b48      	ldr	r3, [pc, #288]	@ (800b910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7f6:	ee07 3a90 	vmov	s15, r3
 800b7fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b802:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b918 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b80a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b80e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b81a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b81e:	e021      	b.n	800b864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	ee07 3a90 	vmov	s15, r3
 800b826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b82a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b920 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b82e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b832:	4b37      	ldr	r3, [pc, #220]	@ (800b910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b83a:	ee07 3a90 	vmov	s15, r3
 800b83e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b842:	ed97 6a03 	vldr	s12, [r7, #12]
 800b846:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b918 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b84a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b84e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b852:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b85a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b85e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b862:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b864:	4b2a      	ldr	r3, [pc, #168]	@ (800b910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b868:	0a5b      	lsrs	r3, r3, #9
 800b86a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b86e:	ee07 3a90 	vmov	s15, r3
 800b872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b876:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b87a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b87e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b88a:	ee17 2a90 	vmov	r2, s15
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b892:	4b1f      	ldr	r3, [pc, #124]	@ (800b910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b896:	0c1b      	lsrs	r3, r3, #16
 800b898:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b89c:	ee07 3a90 	vmov	s15, r3
 800b8a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b8a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8b8:	ee17 2a90 	vmov	r2, s15
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b8c0:	4b13      	ldr	r3, [pc, #76]	@ (800b910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8c4:	0e1b      	lsrs	r3, r3, #24
 800b8c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8ca:	ee07 3a90 	vmov	s15, r3
 800b8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b8d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8da:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8e6:	ee17 2a90 	vmov	r2, s15
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b8ee:	e008      	b.n	800b902 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	609a      	str	r2, [r3, #8]
}
 800b902:	bf00      	nop
 800b904:	3724      	adds	r7, #36	@ 0x24
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	58024400 	.word	0x58024400
 800b914:	03d09000 	.word	0x03d09000
 800b918:	46000000 	.word	0x46000000
 800b91c:	4c742400 	.word	0x4c742400
 800b920:	4a742400 	.word	0x4a742400
 800b924:	4bbebc20 	.word	0x4bbebc20

0800b928 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b928:	b480      	push	{r7}
 800b92a:	b089      	sub	sp, #36	@ 0x24
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b930:	4ba1      	ldr	r3, [pc, #644]	@ (800bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b934:	f003 0303 	and.w	r3, r3, #3
 800b938:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b93a:	4b9f      	ldr	r3, [pc, #636]	@ (800bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b93c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b93e:	0d1b      	lsrs	r3, r3, #20
 800b940:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b944:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b946:	4b9c      	ldr	r3, [pc, #624]	@ (800bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b94a:	0a1b      	lsrs	r3, r3, #8
 800b94c:	f003 0301 	and.w	r3, r3, #1
 800b950:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b952:	4b99      	ldr	r3, [pc, #612]	@ (800bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b956:	08db      	lsrs	r3, r3, #3
 800b958:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b95c:	693a      	ldr	r2, [r7, #16]
 800b95e:	fb02 f303 	mul.w	r3, r2, r3
 800b962:	ee07 3a90 	vmov	s15, r3
 800b966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b96a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	2b00      	cmp	r3, #0
 800b972:	f000 8111 	beq.w	800bb98 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	2b02      	cmp	r3, #2
 800b97a:	f000 8083 	beq.w	800ba84 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	2b02      	cmp	r3, #2
 800b982:	f200 80a1 	bhi.w	800bac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d003      	beq.n	800b994 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d056      	beq.n	800ba40 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b992:	e099      	b.n	800bac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b994:	4b88      	ldr	r3, [pc, #544]	@ (800bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f003 0320 	and.w	r3, r3, #32
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d02d      	beq.n	800b9fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9a0:	4b85      	ldr	r3, [pc, #532]	@ (800bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	08db      	lsrs	r3, r3, #3
 800b9a6:	f003 0303 	and.w	r3, r3, #3
 800b9aa:	4a84      	ldr	r2, [pc, #528]	@ (800bbbc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b9ac:	fa22 f303 	lsr.w	r3, r2, r3
 800b9b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	ee07 3a90 	vmov	s15, r3
 800b9b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	ee07 3a90 	vmov	s15, r3
 800b9c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9ca:	4b7b      	ldr	r3, [pc, #492]	@ (800bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9d2:	ee07 3a90 	vmov	s15, r3
 800b9d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9da:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bbc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b9fa:	e087      	b.n	800bb0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	ee07 3a90 	vmov	s15, r3
 800ba02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba06:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ba0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba0e:	4b6a      	ldr	r3, [pc, #424]	@ (800bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba16:	ee07 3a90 	vmov	s15, r3
 800ba1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba22:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bbc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba3e:	e065      	b.n	800bb0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	ee07 3a90 	vmov	s15, r3
 800ba46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba4a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ba4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba52:	4b59      	ldr	r3, [pc, #356]	@ (800bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba5a:	ee07 3a90 	vmov	s15, r3
 800ba5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba66:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bbc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba82:	e043      	b.n	800bb0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	ee07 3a90 	vmov	s15, r3
 800ba8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba8e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bbcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ba92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba96:	4b48      	ldr	r3, [pc, #288]	@ (800bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba9e:	ee07 3a90 	vmov	s15, r3
 800baa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baa6:	ed97 6a03 	vldr	s12, [r7, #12]
 800baaa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bbc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800baae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800baba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800babe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bac6:	e021      	b.n	800bb0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	ee07 3a90 	vmov	s15, r3
 800bace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bad2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bada:	4b37      	ldr	r3, [pc, #220]	@ (800bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800badc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bae2:	ee07 3a90 	vmov	s15, r3
 800bae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baea:	ed97 6a03 	vldr	s12, [r7, #12]
 800baee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bbc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800baf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bafa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bafe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb0a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bb0c:	4b2a      	ldr	r3, [pc, #168]	@ (800bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb10:	0a5b      	lsrs	r3, r3, #9
 800bb12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb16:	ee07 3a90 	vmov	s15, r3
 800bb1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb22:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb26:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb32:	ee17 2a90 	vmov	r2, s15
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bb3a:	4b1f      	ldr	r3, [pc, #124]	@ (800bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb3e:	0c1b      	lsrs	r3, r3, #16
 800bb40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb44:	ee07 3a90 	vmov	s15, r3
 800bb48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb50:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb54:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb60:	ee17 2a90 	vmov	r2, s15
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bb68:	4b13      	ldr	r3, [pc, #76]	@ (800bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb6c:	0e1b      	lsrs	r3, r3, #24
 800bb6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb72:	ee07 3a90 	vmov	s15, r3
 800bb76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb82:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb8e:	ee17 2a90 	vmov	r2, s15
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bb96:	e008      	b.n	800bbaa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	609a      	str	r2, [r3, #8]
}
 800bbaa:	bf00      	nop
 800bbac:	3724      	adds	r7, #36	@ 0x24
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop
 800bbb8:	58024400 	.word	0x58024400
 800bbbc:	03d09000 	.word	0x03d09000
 800bbc0:	46000000 	.word	0x46000000
 800bbc4:	4c742400 	.word	0x4c742400
 800bbc8:	4a742400 	.word	0x4a742400
 800bbcc:	4bbebc20 	.word	0x4bbebc20

0800bbd0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b089      	sub	sp, #36	@ 0x24
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbd8:	4ba0      	ldr	r3, [pc, #640]	@ (800be5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbdc:	f003 0303 	and.w	r3, r3, #3
 800bbe0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bbe2:	4b9e      	ldr	r3, [pc, #632]	@ (800be5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbe6:	091b      	lsrs	r3, r3, #4
 800bbe8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bbec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bbee:	4b9b      	ldr	r3, [pc, #620]	@ (800be5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf2:	f003 0301 	and.w	r3, r3, #1
 800bbf6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bbf8:	4b98      	ldr	r3, [pc, #608]	@ (800be5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbfc:	08db      	lsrs	r3, r3, #3
 800bbfe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc02:	693a      	ldr	r2, [r7, #16]
 800bc04:	fb02 f303 	mul.w	r3, r2, r3
 800bc08:	ee07 3a90 	vmov	s15, r3
 800bc0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc10:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	f000 8111 	beq.w	800be3e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bc1c:	69bb      	ldr	r3, [r7, #24]
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	f000 8083 	beq.w	800bd2a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bc24:	69bb      	ldr	r3, [r7, #24]
 800bc26:	2b02      	cmp	r3, #2
 800bc28:	f200 80a1 	bhi.w	800bd6e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d003      	beq.n	800bc3a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bc32:	69bb      	ldr	r3, [r7, #24]
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d056      	beq.n	800bce6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bc38:	e099      	b.n	800bd6e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc3a:	4b88      	ldr	r3, [pc, #544]	@ (800be5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f003 0320 	and.w	r3, r3, #32
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d02d      	beq.n	800bca2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc46:	4b85      	ldr	r3, [pc, #532]	@ (800be5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	08db      	lsrs	r3, r3, #3
 800bc4c:	f003 0303 	and.w	r3, r3, #3
 800bc50:	4a83      	ldr	r2, [pc, #524]	@ (800be60 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bc52:	fa22 f303 	lsr.w	r3, r2, r3
 800bc56:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	ee07 3a90 	vmov	s15, r3
 800bc5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	ee07 3a90 	vmov	s15, r3
 800bc68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc70:	4b7a      	ldr	r3, [pc, #488]	@ (800be5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc78:	ee07 3a90 	vmov	s15, r3
 800bc7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc80:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc84:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800be64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc9c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bca0:	e087      	b.n	800bdb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	ee07 3a90 	vmov	s15, r3
 800bca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcac:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800be68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bcb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcb4:	4b69      	ldr	r3, [pc, #420]	@ (800be5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcbc:	ee07 3a90 	vmov	s15, r3
 800bcc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcc4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcc8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800be64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bccc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bce0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bce4:	e065      	b.n	800bdb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	ee07 3a90 	vmov	s15, r3
 800bcec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcf0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800be6c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bcf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcf8:	4b58      	ldr	r3, [pc, #352]	@ (800be5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd00:	ee07 3a90 	vmov	s15, r3
 800bd04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd08:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd0c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800be64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd28:	e043      	b.n	800bdb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	ee07 3a90 	vmov	s15, r3
 800bd30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd34:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800be70 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bd38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd3c:	4b47      	ldr	r3, [pc, #284]	@ (800be5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd44:	ee07 3a90 	vmov	s15, r3
 800bd48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd4c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd50:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800be64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd6c:	e021      	b.n	800bdb2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	ee07 3a90 	vmov	s15, r3
 800bd74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd78:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800be68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bd7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd80:	4b36      	ldr	r3, [pc, #216]	@ (800be5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd88:	ee07 3a90 	vmov	s15, r3
 800bd8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd90:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd94:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800be64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bda0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bda4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bda8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdb0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bdb2:	4b2a      	ldr	r3, [pc, #168]	@ (800be5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdb6:	0a5b      	lsrs	r3, r3, #9
 800bdb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdbc:	ee07 3a90 	vmov	s15, r3
 800bdc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bdc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdcc:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdd8:	ee17 2a90 	vmov	r2, s15
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bde0:	4b1e      	ldr	r3, [pc, #120]	@ (800be5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bde2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bde4:	0c1b      	lsrs	r3, r3, #16
 800bde6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdea:	ee07 3a90 	vmov	s15, r3
 800bdee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bdf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdfa:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be06:	ee17 2a90 	vmov	r2, s15
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800be0e:	4b13      	ldr	r3, [pc, #76]	@ (800be5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be12:	0e1b      	lsrs	r3, r3, #24
 800be14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be18:	ee07 3a90 	vmov	s15, r3
 800be1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be24:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be28:	edd7 6a07 	vldr	s13, [r7, #28]
 800be2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be34:	ee17 2a90 	vmov	r2, s15
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800be3c:	e008      	b.n	800be50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2200      	movs	r2, #0
 800be42:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2200      	movs	r2, #0
 800be48:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	609a      	str	r2, [r3, #8]
}
 800be50:	bf00      	nop
 800be52:	3724      	adds	r7, #36	@ 0x24
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr
 800be5c:	58024400 	.word	0x58024400
 800be60:	03d09000 	.word	0x03d09000
 800be64:	46000000 	.word	0x46000000
 800be68:	4c742400 	.word	0x4c742400
 800be6c:	4a742400 	.word	0x4a742400
 800be70:	4bbebc20 	.word	0x4bbebc20

0800be74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b084      	sub	sp, #16
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800be7e:	2300      	movs	r3, #0
 800be80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be82:	4b53      	ldr	r3, [pc, #332]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800be84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be86:	f003 0303 	and.w	r3, r3, #3
 800be8a:	2b03      	cmp	r3, #3
 800be8c:	d101      	bne.n	800be92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800be8e:	2301      	movs	r3, #1
 800be90:	e099      	b.n	800bfc6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800be92:	4b4f      	ldr	r3, [pc, #316]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	4a4e      	ldr	r2, [pc, #312]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800be98:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800be9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be9e:	f7f7 fb9b 	bl	80035d8 <HAL_GetTick>
 800bea2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bea4:	e008      	b.n	800beb8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bea6:	f7f7 fb97 	bl	80035d8 <HAL_GetTick>
 800beaa:	4602      	mov	r2, r0
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	1ad3      	subs	r3, r2, r3
 800beb0:	2b02      	cmp	r3, #2
 800beb2:	d901      	bls.n	800beb8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800beb4:	2303      	movs	r3, #3
 800beb6:	e086      	b.n	800bfc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800beb8:	4b45      	ldr	r3, [pc, #276]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d1f0      	bne.n	800bea6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bec4:	4b42      	ldr	r3, [pc, #264]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800bec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bec8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	031b      	lsls	r3, r3, #12
 800bed2:	493f      	ldr	r1, [pc, #252]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800bed4:	4313      	orrs	r3, r2
 800bed6:	628b      	str	r3, [r1, #40]	@ 0x28
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	3b01      	subs	r3, #1
 800bede:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	3b01      	subs	r3, #1
 800bee8:	025b      	lsls	r3, r3, #9
 800beea:	b29b      	uxth	r3, r3
 800beec:	431a      	orrs	r2, r3
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	3b01      	subs	r3, #1
 800bef4:	041b      	lsls	r3, r3, #16
 800bef6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800befa:	431a      	orrs	r2, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	691b      	ldr	r3, [r3, #16]
 800bf00:	3b01      	subs	r3, #1
 800bf02:	061b      	lsls	r3, r3, #24
 800bf04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bf08:	4931      	ldr	r1, [pc, #196]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bf0e:	4b30      	ldr	r3, [pc, #192]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800bf10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	695b      	ldr	r3, [r3, #20]
 800bf1a:	492d      	ldr	r1, [pc, #180]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bf20:	4b2b      	ldr	r3, [pc, #172]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800bf22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf24:	f023 0220 	bic.w	r2, r3, #32
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	699b      	ldr	r3, [r3, #24]
 800bf2c:	4928      	ldr	r1, [pc, #160]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bf32:	4b27      	ldr	r3, [pc, #156]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800bf34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf36:	4a26      	ldr	r2, [pc, #152]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800bf38:	f023 0310 	bic.w	r3, r3, #16
 800bf3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bf3e:	4b24      	ldr	r3, [pc, #144]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800bf40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf42:	4b24      	ldr	r3, [pc, #144]	@ (800bfd4 <RCCEx_PLL2_Config+0x160>)
 800bf44:	4013      	ands	r3, r2
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	69d2      	ldr	r2, [r2, #28]
 800bf4a:	00d2      	lsls	r2, r2, #3
 800bf4c:	4920      	ldr	r1, [pc, #128]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bf52:	4b1f      	ldr	r3, [pc, #124]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800bf54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf56:	4a1e      	ldr	r2, [pc, #120]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800bf58:	f043 0310 	orr.w	r3, r3, #16
 800bf5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d106      	bne.n	800bf72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bf64:	4b1a      	ldr	r3, [pc, #104]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800bf66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf68:	4a19      	ldr	r2, [pc, #100]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800bf6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bf6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bf70:	e00f      	b.n	800bf92 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d106      	bne.n	800bf86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bf78:	4b15      	ldr	r3, [pc, #84]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800bf7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf7c:	4a14      	ldr	r2, [pc, #80]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800bf7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bf84:	e005      	b.n	800bf92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bf86:	4b12      	ldr	r3, [pc, #72]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800bf88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf8a:	4a11      	ldr	r2, [pc, #68]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800bf8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bf90:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bf92:	4b0f      	ldr	r3, [pc, #60]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4a0e      	ldr	r2, [pc, #56]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800bf98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bf9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf9e:	f7f7 fb1b 	bl	80035d8 <HAL_GetTick>
 800bfa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bfa4:	e008      	b.n	800bfb8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bfa6:	f7f7 fb17 	bl	80035d8 <HAL_GetTick>
 800bfaa:	4602      	mov	r2, r0
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	1ad3      	subs	r3, r2, r3
 800bfb0:	2b02      	cmp	r3, #2
 800bfb2:	d901      	bls.n	800bfb8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bfb4:	2303      	movs	r3, #3
 800bfb6:	e006      	b.n	800bfc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bfb8:	4b05      	ldr	r3, [pc, #20]	@ (800bfd0 <RCCEx_PLL2_Config+0x15c>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d0f0      	beq.n	800bfa6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bfc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3710      	adds	r7, #16
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	58024400 	.word	0x58024400
 800bfd4:	ffff0007 	.word	0xffff0007

0800bfd8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bfe6:	4b53      	ldr	r3, [pc, #332]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800bfe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfea:	f003 0303 	and.w	r3, r3, #3
 800bfee:	2b03      	cmp	r3, #3
 800bff0:	d101      	bne.n	800bff6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bff2:	2301      	movs	r3, #1
 800bff4:	e099      	b.n	800c12a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bff6:	4b4f      	ldr	r3, [pc, #316]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4a4e      	ldr	r2, [pc, #312]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800bffc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c002:	f7f7 fae9 	bl	80035d8 <HAL_GetTick>
 800c006:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c008:	e008      	b.n	800c01c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c00a:	f7f7 fae5 	bl	80035d8 <HAL_GetTick>
 800c00e:	4602      	mov	r2, r0
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	1ad3      	subs	r3, r2, r3
 800c014:	2b02      	cmp	r3, #2
 800c016:	d901      	bls.n	800c01c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c018:	2303      	movs	r3, #3
 800c01a:	e086      	b.n	800c12a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c01c:	4b45      	ldr	r3, [pc, #276]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c024:	2b00      	cmp	r3, #0
 800c026:	d1f0      	bne.n	800c00a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c028:	4b42      	ldr	r3, [pc, #264]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800c02a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c02c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	051b      	lsls	r3, r3, #20
 800c036:	493f      	ldr	r1, [pc, #252]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800c038:	4313      	orrs	r3, r2
 800c03a:	628b      	str	r3, [r1, #40]	@ 0x28
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	3b01      	subs	r3, #1
 800c042:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	689b      	ldr	r3, [r3, #8]
 800c04a:	3b01      	subs	r3, #1
 800c04c:	025b      	lsls	r3, r3, #9
 800c04e:	b29b      	uxth	r3, r3
 800c050:	431a      	orrs	r2, r3
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	68db      	ldr	r3, [r3, #12]
 800c056:	3b01      	subs	r3, #1
 800c058:	041b      	lsls	r3, r3, #16
 800c05a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c05e:	431a      	orrs	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	691b      	ldr	r3, [r3, #16]
 800c064:	3b01      	subs	r3, #1
 800c066:	061b      	lsls	r3, r3, #24
 800c068:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c06c:	4931      	ldr	r1, [pc, #196]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800c06e:	4313      	orrs	r3, r2
 800c070:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c072:	4b30      	ldr	r3, [pc, #192]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800c074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c076:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	695b      	ldr	r3, [r3, #20]
 800c07e:	492d      	ldr	r1, [pc, #180]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800c080:	4313      	orrs	r3, r2
 800c082:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c084:	4b2b      	ldr	r3, [pc, #172]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800c086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c088:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	699b      	ldr	r3, [r3, #24]
 800c090:	4928      	ldr	r1, [pc, #160]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800c092:	4313      	orrs	r3, r2
 800c094:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c096:	4b27      	ldr	r3, [pc, #156]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800c098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c09a:	4a26      	ldr	r2, [pc, #152]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800c09c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c0a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c0a2:	4b24      	ldr	r3, [pc, #144]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800c0a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c0a6:	4b24      	ldr	r3, [pc, #144]	@ (800c138 <RCCEx_PLL3_Config+0x160>)
 800c0a8:	4013      	ands	r3, r2
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	69d2      	ldr	r2, [r2, #28]
 800c0ae:	00d2      	lsls	r2, r2, #3
 800c0b0:	4920      	ldr	r1, [pc, #128]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c0b6:	4b1f      	ldr	r3, [pc, #124]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800c0b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0ba:	4a1e      	ldr	r2, [pc, #120]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800c0bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c0c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d106      	bne.n	800c0d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c0c8:	4b1a      	ldr	r3, [pc, #104]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800c0ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0cc:	4a19      	ldr	r2, [pc, #100]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800c0ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c0d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c0d4:	e00f      	b.n	800c0f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d106      	bne.n	800c0ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c0dc:	4b15      	ldr	r3, [pc, #84]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800c0de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0e0:	4a14      	ldr	r2, [pc, #80]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800c0e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c0e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c0e8:	e005      	b.n	800c0f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c0ea:	4b12      	ldr	r3, [pc, #72]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800c0ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0ee:	4a11      	ldr	r2, [pc, #68]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800c0f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c0f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c0f6:	4b0f      	ldr	r3, [pc, #60]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a0e      	ldr	r2, [pc, #56]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800c0fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c102:	f7f7 fa69 	bl	80035d8 <HAL_GetTick>
 800c106:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c108:	e008      	b.n	800c11c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c10a:	f7f7 fa65 	bl	80035d8 <HAL_GetTick>
 800c10e:	4602      	mov	r2, r0
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	1ad3      	subs	r3, r2, r3
 800c114:	2b02      	cmp	r3, #2
 800c116:	d901      	bls.n	800c11c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c118:	2303      	movs	r3, #3
 800c11a:	e006      	b.n	800c12a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c11c:	4b05      	ldr	r3, [pc, #20]	@ (800c134 <RCCEx_PLL3_Config+0x15c>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c124:	2b00      	cmp	r3, #0
 800c126:	d0f0      	beq.n	800c10a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c128:	7bfb      	ldrb	r3, [r7, #15]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3710      	adds	r7, #16
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	58024400 	.word	0x58024400
 800c138:	ffff0007 	.word	0xffff0007

0800c13c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d101      	bne.n	800c14e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c14a:	2301      	movs	r3, #1
 800c14c:	e10f      	b.n	800c36e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2200      	movs	r2, #0
 800c152:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a87      	ldr	r2, [pc, #540]	@ (800c378 <HAL_SPI_Init+0x23c>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d00f      	beq.n	800c17e <HAL_SPI_Init+0x42>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a86      	ldr	r2, [pc, #536]	@ (800c37c <HAL_SPI_Init+0x240>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d00a      	beq.n	800c17e <HAL_SPI_Init+0x42>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4a84      	ldr	r2, [pc, #528]	@ (800c380 <HAL_SPI_Init+0x244>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d005      	beq.n	800c17e <HAL_SPI_Init+0x42>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	68db      	ldr	r3, [r3, #12]
 800c176:	2b0f      	cmp	r3, #15
 800c178:	d901      	bls.n	800c17e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c17a:	2301      	movs	r3, #1
 800c17c:	e0f7      	b.n	800c36e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 fe3c 	bl	800cdfc <SPI_GetPacketSize>
 800c184:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4a7b      	ldr	r2, [pc, #492]	@ (800c378 <HAL_SPI_Init+0x23c>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d00c      	beq.n	800c1aa <HAL_SPI_Init+0x6e>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4a79      	ldr	r2, [pc, #484]	@ (800c37c <HAL_SPI_Init+0x240>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d007      	beq.n	800c1aa <HAL_SPI_Init+0x6e>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4a78      	ldr	r2, [pc, #480]	@ (800c380 <HAL_SPI_Init+0x244>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d002      	beq.n	800c1aa <HAL_SPI_Init+0x6e>
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2b08      	cmp	r3, #8
 800c1a8:	d811      	bhi.n	800c1ce <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c1ae:	4a72      	ldr	r2, [pc, #456]	@ (800c378 <HAL_SPI_Init+0x23c>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d009      	beq.n	800c1c8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4a70      	ldr	r2, [pc, #448]	@ (800c37c <HAL_SPI_Init+0x240>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d004      	beq.n	800c1c8 <HAL_SPI_Init+0x8c>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4a6f      	ldr	r2, [pc, #444]	@ (800c380 <HAL_SPI_Init+0x244>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d104      	bne.n	800c1d2 <HAL_SPI_Init+0x96>
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2b10      	cmp	r3, #16
 800c1cc:	d901      	bls.n	800c1d2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e0cd      	b.n	800c36e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d106      	bne.n	800c1ec <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f7f6 fe22 	bl	8002e30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2202      	movs	r2, #2
 800c1f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f022 0201 	bic.w	r2, r2, #1
 800c202:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c20e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	699b      	ldr	r3, [r3, #24]
 800c214:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c218:	d119      	bne.n	800c24e <HAL_SPI_Init+0x112>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c222:	d103      	bne.n	800c22c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d008      	beq.n	800c23e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c230:	2b00      	cmp	r3, #0
 800c232:	d10c      	bne.n	800c24e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c238:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c23c:	d107      	bne.n	800c24e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c24c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c256:	2b00      	cmp	r3, #0
 800c258:	d00f      	beq.n	800c27a <HAL_SPI_Init+0x13e>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	68db      	ldr	r3, [r3, #12]
 800c25e:	2b06      	cmp	r3, #6
 800c260:	d90b      	bls.n	800c27a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	430a      	orrs	r2, r1
 800c276:	601a      	str	r2, [r3, #0]
 800c278:	e007      	b.n	800c28a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c288:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	69da      	ldr	r2, [r3, #28]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c292:	431a      	orrs	r2, r3
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	431a      	orrs	r2, r3
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c29c:	ea42 0103 	orr.w	r1, r2, r3
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	68da      	ldr	r2, [r3, #12]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	430a      	orrs	r2, r1
 800c2aa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2b4:	431a      	orrs	r2, r3
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2ba:	431a      	orrs	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	699b      	ldr	r3, [r3, #24]
 800c2c0:	431a      	orrs	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	691b      	ldr	r3, [r3, #16]
 800c2c6:	431a      	orrs	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	695b      	ldr	r3, [r3, #20]
 800c2cc:	431a      	orrs	r2, r3
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6a1b      	ldr	r3, [r3, #32]
 800c2d2:	431a      	orrs	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	431a      	orrs	r2, r3
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2de:	431a      	orrs	r2, r3
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	689b      	ldr	r3, [r3, #8]
 800c2e4:	431a      	orrs	r2, r3
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2ea:	ea42 0103 	orr.w	r1, r2, r3
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	430a      	orrs	r2, r1
 800c2f8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d113      	bne.n	800c32a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	689b      	ldr	r3, [r3, #8]
 800c308:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c314:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	689b      	ldr	r3, [r3, #8]
 800c31c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c328:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f022 0201 	bic.w	r2, r2, #1
 800c338:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00a      	beq.n	800c35c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	68db      	ldr	r3, [r3, #12]
 800c34c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	430a      	orrs	r2, r1
 800c35a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2200      	movs	r2, #0
 800c360:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2201      	movs	r2, #1
 800c368:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800c36c:	2300      	movs	r3, #0
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3710      	adds	r7, #16
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	40013000 	.word	0x40013000
 800c37c:	40003800 	.word	0x40003800
 800c380:	40003c00 	.word	0x40003c00

0800c384 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b088      	sub	sp, #32
 800c388:	af02      	add	r7, sp, #8
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	603b      	str	r3, [r7, #0]
 800c390:	4613      	mov	r3, r2
 800c392:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	3320      	adds	r3, #32
 800c39a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c39c:	f7f7 f91c 	bl	80035d8 <HAL_GetTick>
 800c3a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d001      	beq.n	800c3b2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800c3ae:	2302      	movs	r3, #2
 800c3b0:	e1d1      	b.n	800c756 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d002      	beq.n	800c3be <HAL_SPI_Transmit+0x3a>
 800c3b8:	88fb      	ldrh	r3, [r7, #6]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d101      	bne.n	800c3c2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800c3be:	2301      	movs	r3, #1
 800c3c0:	e1c9      	b.n	800c756 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d101      	bne.n	800c3d0 <HAL_SPI_Transmit+0x4c>
 800c3cc:	2302      	movs	r3, #2
 800c3ce:	e1c2      	b.n	800c756 <HAL_SPI_Transmit+0x3d2>
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2203      	movs	r2, #3
 800c3dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	68ba      	ldr	r2, [r7, #8]
 800c3ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	88fa      	ldrh	r2, [r7, #6]
 800c3f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	88fa      	ldrh	r2, [r7, #6]
 800c3fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2200      	movs	r2, #0
 800c402:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2200      	movs	r2, #0
 800c408:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2200      	movs	r2, #0
 800c410:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2200      	movs	r2, #0
 800c418:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	2200      	movs	r2, #0
 800c41e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	689b      	ldr	r3, [r3, #8]
 800c424:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c428:	d108      	bne.n	800c43c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c438:	601a      	str	r2, [r3, #0]
 800c43a:	e009      	b.n	800c450 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c44e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	685a      	ldr	r2, [r3, #4]
 800c456:	4b96      	ldr	r3, [pc, #600]	@ (800c6b0 <HAL_SPI_Transmit+0x32c>)
 800c458:	4013      	ands	r3, r2
 800c45a:	88f9      	ldrh	r1, [r7, #6]
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	6812      	ldr	r2, [r2, #0]
 800c460:	430b      	orrs	r3, r1
 800c462:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	681a      	ldr	r2, [r3, #0]
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f042 0201 	orr.w	r2, r2, #1
 800c472:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c47c:	d107      	bne.n	800c48e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	681a      	ldr	r2, [r3, #0]
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c48c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	2b0f      	cmp	r3, #15
 800c494:	d947      	bls.n	800c526 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c496:	e03f      	b.n	800c518 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	695b      	ldr	r3, [r3, #20]
 800c49e:	f003 0302 	and.w	r3, r3, #2
 800c4a2:	2b02      	cmp	r3, #2
 800c4a4:	d114      	bne.n	800c4d0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	6812      	ldr	r2, [r2, #0]
 800c4b0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4b6:	1d1a      	adds	r2, r3, #4
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	3b01      	subs	r3, #1
 800c4c6:	b29a      	uxth	r2, r3
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c4ce:	e023      	b.n	800c518 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c4d0:	f7f7 f882 	bl	80035d8 <HAL_GetTick>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	1ad3      	subs	r3, r2, r3
 800c4da:	683a      	ldr	r2, [r7, #0]
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	d803      	bhi.n	800c4e8 <HAL_SPI_Transmit+0x164>
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4e6:	d102      	bne.n	800c4ee <HAL_SPI_Transmit+0x16a>
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d114      	bne.n	800c518 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	f000 fbb6 	bl	800cc60 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c4fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2201      	movs	r2, #1
 800c508:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2200      	movs	r2, #0
 800c510:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c514:	2303      	movs	r3, #3
 800c516:	e11e      	b.n	800c756 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c51e:	b29b      	uxth	r3, r3
 800c520:	2b00      	cmp	r3, #0
 800c522:	d1b9      	bne.n	800c498 <HAL_SPI_Transmit+0x114>
 800c524:	e0f1      	b.n	800c70a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	68db      	ldr	r3, [r3, #12]
 800c52a:	2b07      	cmp	r3, #7
 800c52c:	f240 80e6 	bls.w	800c6fc <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c530:	e05d      	b.n	800c5ee <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	695b      	ldr	r3, [r3, #20]
 800c538:	f003 0302 	and.w	r3, r3, #2
 800c53c:	2b02      	cmp	r3, #2
 800c53e:	d132      	bne.n	800c5a6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c546:	b29b      	uxth	r3, r3
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d918      	bls.n	800c57e <HAL_SPI_Transmit+0x1fa>
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c550:	2b00      	cmp	r3, #0
 800c552:	d014      	beq.n	800c57e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	6812      	ldr	r2, [r2, #0]
 800c55e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c564:	1d1a      	adds	r2, r3, #4
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c570:	b29b      	uxth	r3, r3
 800c572:	3b02      	subs	r3, #2
 800c574:	b29a      	uxth	r2, r3
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c57c:	e037      	b.n	800c5ee <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c582:	881a      	ldrh	r2, [r3, #0]
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c58c:	1c9a      	adds	r2, r3, #2
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c598:	b29b      	uxth	r3, r3
 800c59a:	3b01      	subs	r3, #1
 800c59c:	b29a      	uxth	r2, r3
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c5a4:	e023      	b.n	800c5ee <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c5a6:	f7f7 f817 	bl	80035d8 <HAL_GetTick>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	1ad3      	subs	r3, r2, r3
 800c5b0:	683a      	ldr	r2, [r7, #0]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d803      	bhi.n	800c5be <HAL_SPI_Transmit+0x23a>
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5bc:	d102      	bne.n	800c5c4 <HAL_SPI_Transmit+0x240>
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d114      	bne.n	800c5ee <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c5c4:	68f8      	ldr	r0, [r7, #12]
 800c5c6:	f000 fb4b 	bl	800cc60 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c5d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2201      	movs	r2, #1
 800c5de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c5ea:	2303      	movs	r3, #3
 800c5ec:	e0b3      	b.n	800c756 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c5f4:	b29b      	uxth	r3, r3
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d19b      	bne.n	800c532 <HAL_SPI_Transmit+0x1ae>
 800c5fa:	e086      	b.n	800c70a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	695b      	ldr	r3, [r3, #20]
 800c602:	f003 0302 	and.w	r3, r3, #2
 800c606:	2b02      	cmp	r3, #2
 800c608:	d154      	bne.n	800c6b4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c610:	b29b      	uxth	r3, r3
 800c612:	2b03      	cmp	r3, #3
 800c614:	d918      	bls.n	800c648 <HAL_SPI_Transmit+0x2c4>
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c61a:	2b40      	cmp	r3, #64	@ 0x40
 800c61c:	d914      	bls.n	800c648 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	6812      	ldr	r2, [r2, #0]
 800c628:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c62e:	1d1a      	adds	r2, r3, #4
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	3b04      	subs	r3, #4
 800c63e:	b29a      	uxth	r2, r3
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c646:	e059      	b.n	800c6fc <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c64e:	b29b      	uxth	r3, r3
 800c650:	2b01      	cmp	r3, #1
 800c652:	d917      	bls.n	800c684 <HAL_SPI_Transmit+0x300>
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d013      	beq.n	800c684 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c660:	881a      	ldrh	r2, [r3, #0]
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c66a:	1c9a      	adds	r2, r3, #2
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c676:	b29b      	uxth	r3, r3
 800c678:	3b02      	subs	r3, #2
 800c67a:	b29a      	uxth	r2, r3
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c682:	e03b      	b.n	800c6fc <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	3320      	adds	r3, #32
 800c68e:	7812      	ldrb	r2, [r2, #0]
 800c690:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c696:	1c5a      	adds	r2, r3, #1
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	3b01      	subs	r3, #1
 800c6a6:	b29a      	uxth	r2, r3
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c6ae:	e025      	b.n	800c6fc <HAL_SPI_Transmit+0x378>
 800c6b0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c6b4:	f7f6 ff90 	bl	80035d8 <HAL_GetTick>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	1ad3      	subs	r3, r2, r3
 800c6be:	683a      	ldr	r2, [r7, #0]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d803      	bhi.n	800c6cc <HAL_SPI_Transmit+0x348>
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ca:	d102      	bne.n	800c6d2 <HAL_SPI_Transmit+0x34e>
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d114      	bne.n	800c6fc <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c6d2:	68f8      	ldr	r0, [r7, #12]
 800c6d4:	f000 fac4 	bl	800cc60 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c6de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c6f8:	2303      	movs	r3, #3
 800c6fa:	e02c      	b.n	800c756 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c702:	b29b      	uxth	r3, r3
 800c704:	2b00      	cmp	r3, #0
 800c706:	f47f af79 	bne.w	800c5fc <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	9300      	str	r3, [sp, #0]
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	2200      	movs	r2, #0
 800c712:	2108      	movs	r1, #8
 800c714:	68f8      	ldr	r0, [r7, #12]
 800c716:	f000 fb43 	bl	800cda0 <SPI_WaitOnFlagUntilTimeout>
 800c71a:	4603      	mov	r3, r0
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d007      	beq.n	800c730 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c726:	f043 0220 	orr.w	r2, r3, #32
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c730:	68f8      	ldr	r0, [r7, #12]
 800c732:	f000 fa95 	bl	800cc60 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	2201      	movs	r2, #1
 800c73a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2200      	movs	r2, #0
 800c742:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d001      	beq.n	800c754 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800c750:	2301      	movs	r3, #1
 800c752:	e000      	b.n	800c756 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800c754:	2300      	movs	r3, #0
  }
}
 800c756:	4618      	mov	r0, r3
 800c758:	3718      	adds	r7, #24
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop

0800c760 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b088      	sub	sp, #32
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	603b      	str	r3, [r7, #0]
 800c76c:	4613      	mov	r3, r2
 800c76e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c774:	095b      	lsrs	r3, r3, #5
 800c776:	b29b      	uxth	r3, r3
 800c778:	3301      	adds	r3, #1
 800c77a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	3330      	adds	r3, #48	@ 0x30
 800c782:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c784:	f7f6 ff28 	bl	80035d8 <HAL_GetTick>
 800c788:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c790:	b2db      	uxtb	r3, r3
 800c792:	2b01      	cmp	r3, #1
 800c794:	d001      	beq.n	800c79a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800c796:	2302      	movs	r3, #2
 800c798:	e250      	b.n	800cc3c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d002      	beq.n	800c7a6 <HAL_SPI_Receive+0x46>
 800c7a0:	88fb      	ldrh	r3, [r7, #6]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d101      	bne.n	800c7aa <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	e248      	b.n	800cc3c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d101      	bne.n	800c7b8 <HAL_SPI_Receive+0x58>
 800c7b4:	2302      	movs	r3, #2
 800c7b6:	e241      	b.n	800cc3c <HAL_SPI_Receive+0x4dc>
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2204      	movs	r2, #4
 800c7c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	68ba      	ldr	r2, [r7, #8]
 800c7d4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	88fa      	ldrh	r2, [r7, #6]
 800c7da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	88fa      	ldrh	r2, [r7, #6]
 800c7e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2200      	movs	r2, #0
 800c800:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2200      	movs	r2, #0
 800c806:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	689b      	ldr	r3, [r3, #8]
 800c80c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c810:	d108      	bne.n	800c824 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	681a      	ldr	r2, [r3, #0]
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c820:	601a      	str	r2, [r3, #0]
 800c822:	e009      	b.n	800c838 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c836:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	685a      	ldr	r2, [r3, #4]
 800c83e:	4b95      	ldr	r3, [pc, #596]	@ (800ca94 <HAL_SPI_Receive+0x334>)
 800c840:	4013      	ands	r3, r2
 800c842:	88f9      	ldrh	r1, [r7, #6]
 800c844:	68fa      	ldr	r2, [r7, #12]
 800c846:	6812      	ldr	r2, [r2, #0]
 800c848:	430b      	orrs	r3, r1
 800c84a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f042 0201 	orr.w	r2, r2, #1
 800c85a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c864:	d107      	bne.n	800c876 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c874:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	68db      	ldr	r3, [r3, #12]
 800c87a:	2b0f      	cmp	r3, #15
 800c87c:	d96c      	bls.n	800c958 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c87e:	e064      	b.n	800c94a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	695b      	ldr	r3, [r3, #20]
 800c886:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	695b      	ldr	r3, [r3, #20]
 800c88e:	f003 0301 	and.w	r3, r3, #1
 800c892:	2b01      	cmp	r3, #1
 800c894:	d114      	bne.n	800c8c0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681a      	ldr	r2, [r3, #0]
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c89e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c8a0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8a6:	1d1a      	adds	r2, r3, #4
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	3b01      	subs	r3, #1
 800c8b6:	b29a      	uxth	r2, r3
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c8be:	e044      	b.n	800c94a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	8bfa      	ldrh	r2, [r7, #30]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d919      	bls.n	800c902 <HAL_SPI_Receive+0x1a2>
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d014      	beq.n	800c902 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c8e2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8e8:	1d1a      	adds	r2, r3, #4
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	b29a      	uxth	r2, r3
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c900:	e023      	b.n	800c94a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c902:	f7f6 fe69 	bl	80035d8 <HAL_GetTick>
 800c906:	4602      	mov	r2, r0
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	1ad3      	subs	r3, r2, r3
 800c90c:	683a      	ldr	r2, [r7, #0]
 800c90e:	429a      	cmp	r2, r3
 800c910:	d803      	bhi.n	800c91a <HAL_SPI_Receive+0x1ba>
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c918:	d102      	bne.n	800c920 <HAL_SPI_Receive+0x1c0>
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d114      	bne.n	800c94a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c920:	68f8      	ldr	r0, [r7, #12]
 800c922:	f000 f99d 	bl	800cc60 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c92c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2201      	movs	r2, #1
 800c93a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2200      	movs	r2, #0
 800c942:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c946:	2303      	movs	r3, #3
 800c948:	e178      	b.n	800cc3c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c950:	b29b      	uxth	r3, r3
 800c952:	2b00      	cmp	r3, #0
 800c954:	d194      	bne.n	800c880 <HAL_SPI_Receive+0x120>
 800c956:	e15e      	b.n	800cc16 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	2b07      	cmp	r3, #7
 800c95e:	f240 8153 	bls.w	800cc08 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c962:	e08f      	b.n	800ca84 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	695b      	ldr	r3, [r3, #20]
 800c96a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	695b      	ldr	r3, [r3, #20]
 800c972:	f003 0301 	and.w	r3, r3, #1
 800c976:	2b01      	cmp	r3, #1
 800c978:	d114      	bne.n	800c9a4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c97e:	69ba      	ldr	r2, [r7, #24]
 800c980:	8812      	ldrh	r2, [r2, #0]
 800c982:	b292      	uxth	r2, r2
 800c984:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c98a:	1c9a      	adds	r2, r3, #2
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c996:	b29b      	uxth	r3, r3
 800c998:	3b01      	subs	r3, #1
 800c99a:	b29a      	uxth	r2, r3
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c9a2:	e06f      	b.n	800ca84 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	8bfa      	ldrh	r2, [r7, #30]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d924      	bls.n	800c9fc <HAL_SPI_Receive+0x29c>
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d01f      	beq.n	800c9fc <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9c0:	69ba      	ldr	r2, [r7, #24]
 800c9c2:	8812      	ldrh	r2, [r2, #0]
 800c9c4:	b292      	uxth	r2, r2
 800c9c6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9cc:	1c9a      	adds	r2, r3, #2
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9d6:	69ba      	ldr	r2, [r7, #24]
 800c9d8:	8812      	ldrh	r2, [r2, #0]
 800c9da:	b292      	uxth	r2, r2
 800c9dc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9e2:	1c9a      	adds	r2, r3, #2
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	3b02      	subs	r3, #2
 800c9f2:	b29a      	uxth	r2, r3
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c9fa:	e043      	b.n	800ca84 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d119      	bne.n	800ca3c <HAL_SPI_Receive+0x2dc>
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d014      	beq.n	800ca3c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca16:	69ba      	ldr	r2, [r7, #24]
 800ca18:	8812      	ldrh	r2, [r2, #0]
 800ca1a:	b292      	uxth	r2, r2
 800ca1c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca22:	1c9a      	adds	r2, r3, #2
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	3b01      	subs	r3, #1
 800ca32:	b29a      	uxth	r2, r3
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ca3a:	e023      	b.n	800ca84 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ca3c:	f7f6 fdcc 	bl	80035d8 <HAL_GetTick>
 800ca40:	4602      	mov	r2, r0
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	1ad3      	subs	r3, r2, r3
 800ca46:	683a      	ldr	r2, [r7, #0]
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d803      	bhi.n	800ca54 <HAL_SPI_Receive+0x2f4>
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca52:	d102      	bne.n	800ca5a <HAL_SPI_Receive+0x2fa>
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d114      	bne.n	800ca84 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ca5a:	68f8      	ldr	r0, [r7, #12]
 800ca5c:	f000 f900 	bl	800cc60 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca66:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2201      	movs	r2, #1
 800ca74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ca80:	2303      	movs	r3, #3
 800ca82:	e0db      	b.n	800cc3c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	f47f af69 	bne.w	800c964 <HAL_SPI_Receive+0x204>
 800ca92:	e0c0      	b.n	800cc16 <HAL_SPI_Receive+0x4b6>
 800ca94:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	695b      	ldr	r3, [r3, #20]
 800ca9e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	695b      	ldr	r3, [r3, #20]
 800caa6:	f003 0301 	and.w	r3, r3, #1
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d117      	bne.n	800cade <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800caba:	7812      	ldrb	r2, [r2, #0]
 800cabc:	b2d2      	uxtb	r2, r2
 800cabe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cac4:	1c5a      	adds	r2, r3, #1
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	3b01      	subs	r3, #1
 800cad4:	b29a      	uxth	r2, r3
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cadc:	e094      	b.n	800cc08 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	8bfa      	ldrh	r2, [r7, #30]
 800cae8:	429a      	cmp	r2, r3
 800caea:	d946      	bls.n	800cb7a <HAL_SPI_Receive+0x41a>
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d041      	beq.n	800cb7a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb02:	7812      	ldrb	r2, [r2, #0]
 800cb04:	b2d2      	uxtb	r2, r2
 800cb06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb0c:	1c5a      	adds	r2, r3, #1
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb1e:	7812      	ldrb	r2, [r2, #0]
 800cb20:	b2d2      	uxtb	r2, r2
 800cb22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb28:	1c5a      	adds	r2, r3, #1
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb3a:	7812      	ldrb	r2, [r2, #0]
 800cb3c:	b2d2      	uxtb	r2, r2
 800cb3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb44:	1c5a      	adds	r2, r3, #1
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb56:	7812      	ldrb	r2, [r2, #0]
 800cb58:	b2d2      	uxtb	r2, r2
 800cb5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb60:	1c5a      	adds	r2, r3, #1
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	3b04      	subs	r3, #4
 800cb70:	b29a      	uxth	r2, r3
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cb78:	e046      	b.n	800cc08 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	2b03      	cmp	r3, #3
 800cb84:	d81c      	bhi.n	800cbc0 <HAL_SPI_Receive+0x460>
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d017      	beq.n	800cbc0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb9c:	7812      	ldrb	r2, [r2, #0]
 800cb9e:	b2d2      	uxtb	r2, r2
 800cba0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cba6:	1c5a      	adds	r2, r3, #1
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cbb2:	b29b      	uxth	r3, r3
 800cbb4:	3b01      	subs	r3, #1
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cbbe:	e023      	b.n	800cc08 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cbc0:	f7f6 fd0a 	bl	80035d8 <HAL_GetTick>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	1ad3      	subs	r3, r2, r3
 800cbca:	683a      	ldr	r2, [r7, #0]
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d803      	bhi.n	800cbd8 <HAL_SPI_Receive+0x478>
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbd6:	d102      	bne.n	800cbde <HAL_SPI_Receive+0x47e>
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d114      	bne.n	800cc08 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cbde:	68f8      	ldr	r0, [r7, #12]
 800cbe0:	f000 f83e 	bl	800cc60 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cbea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cc04:	2303      	movs	r3, #3
 800cc06:	e019      	b.n	800cc3c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	f47f af41 	bne.w	800ca98 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cc16:	68f8      	ldr	r0, [r7, #12]
 800cc18:	f000 f822 	bl	800cc60 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	2201      	movs	r2, #1
 800cc20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2200      	movs	r2, #0
 800cc28:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d001      	beq.n	800cc3a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800cc36:	2301      	movs	r3, #1
 800cc38:	e000      	b.n	800cc3c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800cc3a:	2300      	movs	r3, #0
  }
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3720      	adds	r7, #32
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cc52:	b2db      	uxtb	r3, r3
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	370c      	adds	r7, #12
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr

0800cc60 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b085      	sub	sp, #20
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	695b      	ldr	r3, [r3, #20]
 800cc6e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	699a      	ldr	r2, [r3, #24]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f042 0208 	orr.w	r2, r2, #8
 800cc7e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	699a      	ldr	r2, [r3, #24]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f042 0210 	orr.w	r2, r2, #16
 800cc8e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f022 0201 	bic.w	r2, r2, #1
 800cc9e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	6919      	ldr	r1, [r3, #16]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681a      	ldr	r2, [r3, #0]
 800ccaa:	4b3c      	ldr	r3, [pc, #240]	@ (800cd9c <SPI_CloseTransfer+0x13c>)
 800ccac:	400b      	ands	r3, r1
 800ccae:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	689a      	ldr	r2, [r3, #8]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ccbe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ccc6:	b2db      	uxtb	r3, r3
 800ccc8:	2b04      	cmp	r3, #4
 800ccca:	d014      	beq.n	800ccf6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f003 0320 	and.w	r3, r3, #32
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d00f      	beq.n	800ccf6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ccdc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	699a      	ldr	r2, [r3, #24]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f042 0220 	orr.w	r2, r2, #32
 800ccf4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	2b03      	cmp	r3, #3
 800cd00:	d014      	beq.n	800cd2c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d00f      	beq.n	800cd2c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd12:	f043 0204 	orr.w	r2, r3, #4
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	699a      	ldr	r2, [r3, #24]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cd2a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d00f      	beq.n	800cd56 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd3c:	f043 0201 	orr.w	r2, r3, #1
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	699a      	ldr	r2, [r3, #24]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cd54:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d00f      	beq.n	800cd80 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd66:	f043 0208 	orr.w	r2, r3, #8
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	699a      	ldr	r2, [r3, #24]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cd7e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2200      	movs	r2, #0
 800cd84:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800cd90:	bf00      	nop
 800cd92:	3714      	adds	r7, #20
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr
 800cd9c:	fffffc90 	.word	0xfffffc90

0800cda0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b084      	sub	sp, #16
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	603b      	str	r3, [r7, #0]
 800cdac:	4613      	mov	r3, r2
 800cdae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cdb0:	e010      	b.n	800cdd4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cdb2:	f7f6 fc11 	bl	80035d8 <HAL_GetTick>
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	69bb      	ldr	r3, [r7, #24]
 800cdba:	1ad3      	subs	r3, r2, r3
 800cdbc:	683a      	ldr	r2, [r7, #0]
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d803      	bhi.n	800cdca <SPI_WaitOnFlagUntilTimeout+0x2a>
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdc8:	d102      	bne.n	800cdd0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d101      	bne.n	800cdd4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800cdd0:	2303      	movs	r3, #3
 800cdd2:	e00f      	b.n	800cdf4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	695a      	ldr	r2, [r3, #20]
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	4013      	ands	r3, r2
 800cdde:	68ba      	ldr	r2, [r7, #8]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	bf0c      	ite	eq
 800cde4:	2301      	moveq	r3, #1
 800cde6:	2300      	movne	r3, #0
 800cde8:	b2db      	uxtb	r3, r3
 800cdea:	461a      	mov	r2, r3
 800cdec:	79fb      	ldrb	r3, [r7, #7]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d0df      	beq.n	800cdb2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800cdf2:	2300      	movs	r3, #0
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3710      	adds	r7, #16
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b085      	sub	sp, #20
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce08:	095b      	lsrs	r3, r3, #5
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	68db      	ldr	r3, [r3, #12]
 800ce12:	3301      	adds	r3, #1
 800ce14:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	3307      	adds	r3, #7
 800ce1a:	08db      	lsrs	r3, r3, #3
 800ce1c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	68fa      	ldr	r2, [r7, #12]
 800ce22:	fb02 f303 	mul.w	r3, r2, r3
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3714      	adds	r7, #20
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr

0800ce32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ce32:	b580      	push	{r7, lr}
 800ce34:	b082      	sub	sp, #8
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d101      	bne.n	800ce44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ce40:	2301      	movs	r3, #1
 800ce42:	e049      	b.n	800ced8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ce4a:	b2db      	uxtb	r3, r3
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d106      	bne.n	800ce5e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2200      	movs	r2, #0
 800ce54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f7f6 f89f 	bl	8002f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2202      	movs	r2, #2
 800ce62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	3304      	adds	r3, #4
 800ce6e:	4619      	mov	r1, r3
 800ce70:	4610      	mov	r0, r2
 800ce72:	f000 fd6b 	bl	800d94c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2201      	movs	r2, #1
 800ce7a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2201      	movs	r2, #1
 800ce82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2201      	movs	r2, #1
 800ce8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2201      	movs	r2, #1
 800ce92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2201      	movs	r2, #1
 800ce9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2201      	movs	r2, #1
 800cea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2201      	movs	r2, #1
 800ceaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2201      	movs	r2, #1
 800ceba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2201      	movs	r2, #1
 800cec2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2201      	movs	r2, #1
 800ceca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2201      	movs	r2, #1
 800ced2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ced6:	2300      	movs	r3, #0
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3708      	adds	r7, #8
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b085      	sub	sp, #20
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ceee:	b2db      	uxtb	r3, r3
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d001      	beq.n	800cef8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cef4:	2301      	movs	r3, #1
 800cef6:	e05e      	b.n	800cfb6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2202      	movs	r2, #2
 800cefc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	68da      	ldr	r2, [r3, #12]
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f042 0201 	orr.w	r2, r2, #1
 800cf0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a2b      	ldr	r2, [pc, #172]	@ (800cfc4 <HAL_TIM_Base_Start_IT+0xe4>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d02c      	beq.n	800cf74 <HAL_TIM_Base_Start_IT+0x94>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf22:	d027      	beq.n	800cf74 <HAL_TIM_Base_Start_IT+0x94>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4a27      	ldr	r2, [pc, #156]	@ (800cfc8 <HAL_TIM_Base_Start_IT+0xe8>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d022      	beq.n	800cf74 <HAL_TIM_Base_Start_IT+0x94>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4a26      	ldr	r2, [pc, #152]	@ (800cfcc <HAL_TIM_Base_Start_IT+0xec>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d01d      	beq.n	800cf74 <HAL_TIM_Base_Start_IT+0x94>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a24      	ldr	r2, [pc, #144]	@ (800cfd0 <HAL_TIM_Base_Start_IT+0xf0>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d018      	beq.n	800cf74 <HAL_TIM_Base_Start_IT+0x94>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4a23      	ldr	r2, [pc, #140]	@ (800cfd4 <HAL_TIM_Base_Start_IT+0xf4>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d013      	beq.n	800cf74 <HAL_TIM_Base_Start_IT+0x94>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a21      	ldr	r2, [pc, #132]	@ (800cfd8 <HAL_TIM_Base_Start_IT+0xf8>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d00e      	beq.n	800cf74 <HAL_TIM_Base_Start_IT+0x94>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4a20      	ldr	r2, [pc, #128]	@ (800cfdc <HAL_TIM_Base_Start_IT+0xfc>)
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d009      	beq.n	800cf74 <HAL_TIM_Base_Start_IT+0x94>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a1e      	ldr	r2, [pc, #120]	@ (800cfe0 <HAL_TIM_Base_Start_IT+0x100>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d004      	beq.n	800cf74 <HAL_TIM_Base_Start_IT+0x94>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4a1d      	ldr	r2, [pc, #116]	@ (800cfe4 <HAL_TIM_Base_Start_IT+0x104>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d115      	bne.n	800cfa0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	689a      	ldr	r2, [r3, #8]
 800cf7a:	4b1b      	ldr	r3, [pc, #108]	@ (800cfe8 <HAL_TIM_Base_Start_IT+0x108>)
 800cf7c:	4013      	ands	r3, r2
 800cf7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	2b06      	cmp	r3, #6
 800cf84:	d015      	beq.n	800cfb2 <HAL_TIM_Base_Start_IT+0xd2>
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf8c:	d011      	beq.n	800cfb2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	681a      	ldr	r2, [r3, #0]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f042 0201 	orr.w	r2, r2, #1
 800cf9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf9e:	e008      	b.n	800cfb2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f042 0201 	orr.w	r2, r2, #1
 800cfae:	601a      	str	r2, [r3, #0]
 800cfb0:	e000      	b.n	800cfb4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cfb4:	2300      	movs	r3, #0
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3714      	adds	r7, #20
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr
 800cfc2:	bf00      	nop
 800cfc4:	40010000 	.word	0x40010000
 800cfc8:	40000400 	.word	0x40000400
 800cfcc:	40000800 	.word	0x40000800
 800cfd0:	40000c00 	.word	0x40000c00
 800cfd4:	40010400 	.word	0x40010400
 800cfd8:	40001800 	.word	0x40001800
 800cfdc:	40014000 	.word	0x40014000
 800cfe0:	4000e000 	.word	0x4000e000
 800cfe4:	4000e400 	.word	0x4000e400
 800cfe8:	00010007 	.word	0x00010007

0800cfec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d101      	bne.n	800cffe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cffa:	2301      	movs	r3, #1
 800cffc:	e049      	b.n	800d092 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d004:	b2db      	uxtb	r3, r3
 800d006:	2b00      	cmp	r3, #0
 800d008:	d106      	bne.n	800d018 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2200      	movs	r2, #0
 800d00e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f7f5 ff9c 	bl	8002f50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2202      	movs	r2, #2
 800d01c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681a      	ldr	r2, [r3, #0]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	3304      	adds	r3, #4
 800d028:	4619      	mov	r1, r3
 800d02a:	4610      	mov	r0, r2
 800d02c:	f000 fc8e 	bl	800d94c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2201      	movs	r2, #1
 800d034:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2201      	movs	r2, #1
 800d03c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2201      	movs	r2, #1
 800d044:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2201      	movs	r2, #1
 800d04c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2201      	movs	r2, #1
 800d054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2201      	movs	r2, #1
 800d05c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2201      	movs	r2, #1
 800d064:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2201      	movs	r2, #1
 800d06c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2201      	movs	r2, #1
 800d074:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2201      	movs	r2, #1
 800d07c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2201      	movs	r2, #1
 800d084:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2201      	movs	r2, #1
 800d08c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d090:	2300      	movs	r3, #0
}
 800d092:	4618      	mov	r0, r3
 800d094:	3708      	adds	r7, #8
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
	...

0800d09c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d109      	bne.n	800d0c0 <HAL_TIM_PWM_Start+0x24>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	2b01      	cmp	r3, #1
 800d0b6:	bf14      	ite	ne
 800d0b8:	2301      	movne	r3, #1
 800d0ba:	2300      	moveq	r3, #0
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	e03c      	b.n	800d13a <HAL_TIM_PWM_Start+0x9e>
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	2b04      	cmp	r3, #4
 800d0c4:	d109      	bne.n	800d0da <HAL_TIM_PWM_Start+0x3e>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d0cc:	b2db      	uxtb	r3, r3
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	bf14      	ite	ne
 800d0d2:	2301      	movne	r3, #1
 800d0d4:	2300      	moveq	r3, #0
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	e02f      	b.n	800d13a <HAL_TIM_PWM_Start+0x9e>
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	2b08      	cmp	r3, #8
 800d0de:	d109      	bne.n	800d0f4 <HAL_TIM_PWM_Start+0x58>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d0e6:	b2db      	uxtb	r3, r3
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	bf14      	ite	ne
 800d0ec:	2301      	movne	r3, #1
 800d0ee:	2300      	moveq	r3, #0
 800d0f0:	b2db      	uxtb	r3, r3
 800d0f2:	e022      	b.n	800d13a <HAL_TIM_PWM_Start+0x9e>
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	2b0c      	cmp	r3, #12
 800d0f8:	d109      	bne.n	800d10e <HAL_TIM_PWM_Start+0x72>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d100:	b2db      	uxtb	r3, r3
 800d102:	2b01      	cmp	r3, #1
 800d104:	bf14      	ite	ne
 800d106:	2301      	movne	r3, #1
 800d108:	2300      	moveq	r3, #0
 800d10a:	b2db      	uxtb	r3, r3
 800d10c:	e015      	b.n	800d13a <HAL_TIM_PWM_Start+0x9e>
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	2b10      	cmp	r3, #16
 800d112:	d109      	bne.n	800d128 <HAL_TIM_PWM_Start+0x8c>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d11a:	b2db      	uxtb	r3, r3
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	bf14      	ite	ne
 800d120:	2301      	movne	r3, #1
 800d122:	2300      	moveq	r3, #0
 800d124:	b2db      	uxtb	r3, r3
 800d126:	e008      	b.n	800d13a <HAL_TIM_PWM_Start+0x9e>
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d12e:	b2db      	uxtb	r3, r3
 800d130:	2b01      	cmp	r3, #1
 800d132:	bf14      	ite	ne
 800d134:	2301      	movne	r3, #1
 800d136:	2300      	moveq	r3, #0
 800d138:	b2db      	uxtb	r3, r3
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d001      	beq.n	800d142 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d13e:	2301      	movs	r3, #1
 800d140:	e0ab      	b.n	800d29a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d104      	bne.n	800d152 <HAL_TIM_PWM_Start+0xb6>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2202      	movs	r2, #2
 800d14c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d150:	e023      	b.n	800d19a <HAL_TIM_PWM_Start+0xfe>
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	2b04      	cmp	r3, #4
 800d156:	d104      	bne.n	800d162 <HAL_TIM_PWM_Start+0xc6>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2202      	movs	r2, #2
 800d15c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d160:	e01b      	b.n	800d19a <HAL_TIM_PWM_Start+0xfe>
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	2b08      	cmp	r3, #8
 800d166:	d104      	bne.n	800d172 <HAL_TIM_PWM_Start+0xd6>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2202      	movs	r2, #2
 800d16c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d170:	e013      	b.n	800d19a <HAL_TIM_PWM_Start+0xfe>
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	2b0c      	cmp	r3, #12
 800d176:	d104      	bne.n	800d182 <HAL_TIM_PWM_Start+0xe6>
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2202      	movs	r2, #2
 800d17c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d180:	e00b      	b.n	800d19a <HAL_TIM_PWM_Start+0xfe>
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	2b10      	cmp	r3, #16
 800d186:	d104      	bne.n	800d192 <HAL_TIM_PWM_Start+0xf6>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2202      	movs	r2, #2
 800d18c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d190:	e003      	b.n	800d19a <HAL_TIM_PWM_Start+0xfe>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2202      	movs	r2, #2
 800d196:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	2201      	movs	r2, #1
 800d1a0:	6839      	ldr	r1, [r7, #0]
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f000 fff8 	bl	800e198 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a3d      	ldr	r2, [pc, #244]	@ (800d2a4 <HAL_TIM_PWM_Start+0x208>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d013      	beq.n	800d1da <HAL_TIM_PWM_Start+0x13e>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	4a3c      	ldr	r2, [pc, #240]	@ (800d2a8 <HAL_TIM_PWM_Start+0x20c>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d00e      	beq.n	800d1da <HAL_TIM_PWM_Start+0x13e>
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a3a      	ldr	r2, [pc, #232]	@ (800d2ac <HAL_TIM_PWM_Start+0x210>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d009      	beq.n	800d1da <HAL_TIM_PWM_Start+0x13e>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4a39      	ldr	r2, [pc, #228]	@ (800d2b0 <HAL_TIM_PWM_Start+0x214>)
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	d004      	beq.n	800d1da <HAL_TIM_PWM_Start+0x13e>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4a37      	ldr	r2, [pc, #220]	@ (800d2b4 <HAL_TIM_PWM_Start+0x218>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d101      	bne.n	800d1de <HAL_TIM_PWM_Start+0x142>
 800d1da:	2301      	movs	r3, #1
 800d1dc:	e000      	b.n	800d1e0 <HAL_TIM_PWM_Start+0x144>
 800d1de:	2300      	movs	r3, #0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d007      	beq.n	800d1f4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d1f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a2a      	ldr	r2, [pc, #168]	@ (800d2a4 <HAL_TIM_PWM_Start+0x208>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d02c      	beq.n	800d258 <HAL_TIM_PWM_Start+0x1bc>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d206:	d027      	beq.n	800d258 <HAL_TIM_PWM_Start+0x1bc>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a2a      	ldr	r2, [pc, #168]	@ (800d2b8 <HAL_TIM_PWM_Start+0x21c>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d022      	beq.n	800d258 <HAL_TIM_PWM_Start+0x1bc>
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4a29      	ldr	r2, [pc, #164]	@ (800d2bc <HAL_TIM_PWM_Start+0x220>)
 800d218:	4293      	cmp	r3, r2
 800d21a:	d01d      	beq.n	800d258 <HAL_TIM_PWM_Start+0x1bc>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4a27      	ldr	r2, [pc, #156]	@ (800d2c0 <HAL_TIM_PWM_Start+0x224>)
 800d222:	4293      	cmp	r3, r2
 800d224:	d018      	beq.n	800d258 <HAL_TIM_PWM_Start+0x1bc>
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	4a1f      	ldr	r2, [pc, #124]	@ (800d2a8 <HAL_TIM_PWM_Start+0x20c>)
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d013      	beq.n	800d258 <HAL_TIM_PWM_Start+0x1bc>
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	4a23      	ldr	r2, [pc, #140]	@ (800d2c4 <HAL_TIM_PWM_Start+0x228>)
 800d236:	4293      	cmp	r3, r2
 800d238:	d00e      	beq.n	800d258 <HAL_TIM_PWM_Start+0x1bc>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	4a1b      	ldr	r2, [pc, #108]	@ (800d2ac <HAL_TIM_PWM_Start+0x210>)
 800d240:	4293      	cmp	r3, r2
 800d242:	d009      	beq.n	800d258 <HAL_TIM_PWM_Start+0x1bc>
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4a1f      	ldr	r2, [pc, #124]	@ (800d2c8 <HAL_TIM_PWM_Start+0x22c>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d004      	beq.n	800d258 <HAL_TIM_PWM_Start+0x1bc>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	4a1e      	ldr	r2, [pc, #120]	@ (800d2cc <HAL_TIM_PWM_Start+0x230>)
 800d254:	4293      	cmp	r3, r2
 800d256:	d115      	bne.n	800d284 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	689a      	ldr	r2, [r3, #8]
 800d25e:	4b1c      	ldr	r3, [pc, #112]	@ (800d2d0 <HAL_TIM_PWM_Start+0x234>)
 800d260:	4013      	ands	r3, r2
 800d262:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2b06      	cmp	r3, #6
 800d268:	d015      	beq.n	800d296 <HAL_TIM_PWM_Start+0x1fa>
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d270:	d011      	beq.n	800d296 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	681a      	ldr	r2, [r3, #0]
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f042 0201 	orr.w	r2, r2, #1
 800d280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d282:	e008      	b.n	800d296 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	681a      	ldr	r2, [r3, #0]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f042 0201 	orr.w	r2, r2, #1
 800d292:	601a      	str	r2, [r3, #0]
 800d294:	e000      	b.n	800d298 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d296:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d298:	2300      	movs	r3, #0
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3710      	adds	r7, #16
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	40010000 	.word	0x40010000
 800d2a8:	40010400 	.word	0x40010400
 800d2ac:	40014000 	.word	0x40014000
 800d2b0:	40014400 	.word	0x40014400
 800d2b4:	40014800 	.word	0x40014800
 800d2b8:	40000400 	.word	0x40000400
 800d2bc:	40000800 	.word	0x40000800
 800d2c0:	40000c00 	.word	0x40000c00
 800d2c4:	40001800 	.word	0x40001800
 800d2c8:	4000e000 	.word	0x4000e000
 800d2cc:	4000e400 	.word	0x4000e400
 800d2d0:	00010007 	.word	0x00010007

0800d2d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	68db      	ldr	r3, [r3, #12]
 800d2e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	691b      	ldr	r3, [r3, #16]
 800d2ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	f003 0302 	and.w	r3, r3, #2
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d020      	beq.n	800d338 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	f003 0302 	and.w	r3, r3, #2
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d01b      	beq.n	800d338 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f06f 0202 	mvn.w	r2, #2
 800d308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2201      	movs	r2, #1
 800d30e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	699b      	ldr	r3, [r3, #24]
 800d316:	f003 0303 	and.w	r3, r3, #3
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d003      	beq.n	800d326 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f000 faf6 	bl	800d910 <HAL_TIM_IC_CaptureCallback>
 800d324:	e005      	b.n	800d332 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f000 fae8 	bl	800d8fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f000 faf9 	bl	800d924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2200      	movs	r2, #0
 800d336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	f003 0304 	and.w	r3, r3, #4
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d020      	beq.n	800d384 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	f003 0304 	and.w	r3, r3, #4
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d01b      	beq.n	800d384 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f06f 0204 	mvn.w	r2, #4
 800d354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2202      	movs	r2, #2
 800d35a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	699b      	ldr	r3, [r3, #24]
 800d362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d366:	2b00      	cmp	r3, #0
 800d368:	d003      	beq.n	800d372 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 fad0 	bl	800d910 <HAL_TIM_IC_CaptureCallback>
 800d370:	e005      	b.n	800d37e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f000 fac2 	bl	800d8fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f000 fad3 	bl	800d924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2200      	movs	r2, #0
 800d382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	f003 0308 	and.w	r3, r3, #8
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d020      	beq.n	800d3d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	f003 0308 	and.w	r3, r3, #8
 800d394:	2b00      	cmp	r3, #0
 800d396:	d01b      	beq.n	800d3d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f06f 0208 	mvn.w	r2, #8
 800d3a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2204      	movs	r2, #4
 800d3a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	69db      	ldr	r3, [r3, #28]
 800d3ae:	f003 0303 	and.w	r3, r3, #3
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d003      	beq.n	800d3be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 faaa 	bl	800d910 <HAL_TIM_IC_CaptureCallback>
 800d3bc:	e005      	b.n	800d3ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f000 fa9c 	bl	800d8fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f000 faad 	bl	800d924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	f003 0310 	and.w	r3, r3, #16
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d020      	beq.n	800d41c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f003 0310 	and.w	r3, r3, #16
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d01b      	beq.n	800d41c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f06f 0210 	mvn.w	r2, #16
 800d3ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2208      	movs	r2, #8
 800d3f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	69db      	ldr	r3, [r3, #28]
 800d3fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d003      	beq.n	800d40a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f000 fa84 	bl	800d910 <HAL_TIM_IC_CaptureCallback>
 800d408:	e005      	b.n	800d416 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f000 fa76 	bl	800d8fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f000 fa87 	bl	800d924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2200      	movs	r2, #0
 800d41a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	f003 0301 	and.w	r3, r3, #1
 800d422:	2b00      	cmp	r3, #0
 800d424:	d00c      	beq.n	800d440 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	f003 0301 	and.w	r3, r3, #1
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d007      	beq.n	800d440 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f06f 0201 	mvn.w	r2, #1
 800d438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f7f4 fab8 	bl	80019b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d446:	2b00      	cmp	r3, #0
 800d448:	d104      	bne.n	800d454 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d450:	2b00      	cmp	r3, #0
 800d452:	d00c      	beq.n	800d46e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d007      	beq.n	800d46e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f000 ff61 	bl	800e330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d474:	2b00      	cmp	r3, #0
 800d476:	d00c      	beq.n	800d492 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d007      	beq.n	800d492 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d48a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 ff59 	bl	800e344 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d00c      	beq.n	800d4b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d007      	beq.n	800d4b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d4ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f000 fa41 	bl	800d938 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	f003 0320 	and.w	r3, r3, #32
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d00c      	beq.n	800d4da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	f003 0320 	and.w	r3, r3, #32
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d007      	beq.n	800d4da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f06f 0220 	mvn.w	r2, #32
 800d4d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f000 ff21 	bl	800e31c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d4da:	bf00      	nop
 800d4dc:	3710      	adds	r7, #16
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
	...

0800d4e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b086      	sub	sp, #24
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	60b9      	str	r1, [r7, #8]
 800d4ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	d101      	bne.n	800d502 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d4fe:	2302      	movs	r3, #2
 800d500:	e0ff      	b.n	800d702 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	2201      	movs	r2, #1
 800d506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2b14      	cmp	r3, #20
 800d50e:	f200 80f0 	bhi.w	800d6f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d512:	a201      	add	r2, pc, #4	@ (adr r2, 800d518 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d518:	0800d56d 	.word	0x0800d56d
 800d51c:	0800d6f3 	.word	0x0800d6f3
 800d520:	0800d6f3 	.word	0x0800d6f3
 800d524:	0800d6f3 	.word	0x0800d6f3
 800d528:	0800d5ad 	.word	0x0800d5ad
 800d52c:	0800d6f3 	.word	0x0800d6f3
 800d530:	0800d6f3 	.word	0x0800d6f3
 800d534:	0800d6f3 	.word	0x0800d6f3
 800d538:	0800d5ef 	.word	0x0800d5ef
 800d53c:	0800d6f3 	.word	0x0800d6f3
 800d540:	0800d6f3 	.word	0x0800d6f3
 800d544:	0800d6f3 	.word	0x0800d6f3
 800d548:	0800d62f 	.word	0x0800d62f
 800d54c:	0800d6f3 	.word	0x0800d6f3
 800d550:	0800d6f3 	.word	0x0800d6f3
 800d554:	0800d6f3 	.word	0x0800d6f3
 800d558:	0800d671 	.word	0x0800d671
 800d55c:	0800d6f3 	.word	0x0800d6f3
 800d560:	0800d6f3 	.word	0x0800d6f3
 800d564:	0800d6f3 	.word	0x0800d6f3
 800d568:	0800d6b1 	.word	0x0800d6b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	68b9      	ldr	r1, [r7, #8]
 800d572:	4618      	mov	r0, r3
 800d574:	f000 fa9c 	bl	800dab0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	699a      	ldr	r2, [r3, #24]
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f042 0208 	orr.w	r2, r2, #8
 800d586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	699a      	ldr	r2, [r3, #24]
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f022 0204 	bic.w	r2, r2, #4
 800d596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	6999      	ldr	r1, [r3, #24]
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	691a      	ldr	r2, [r3, #16]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	430a      	orrs	r2, r1
 800d5a8:	619a      	str	r2, [r3, #24]
      break;
 800d5aa:	e0a5      	b.n	800d6f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	68b9      	ldr	r1, [r7, #8]
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f000 fb0c 	bl	800dbd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	699a      	ldr	r2, [r3, #24]
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d5c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	699a      	ldr	r2, [r3, #24]
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d5d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	6999      	ldr	r1, [r3, #24]
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	691b      	ldr	r3, [r3, #16]
 800d5e2:	021a      	lsls	r2, r3, #8
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	430a      	orrs	r2, r1
 800d5ea:	619a      	str	r2, [r3, #24]
      break;
 800d5ec:	e084      	b.n	800d6f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	68b9      	ldr	r1, [r7, #8]
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f000 fb75 	bl	800dce4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	69da      	ldr	r2, [r3, #28]
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f042 0208 	orr.w	r2, r2, #8
 800d608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	69da      	ldr	r2, [r3, #28]
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f022 0204 	bic.w	r2, r2, #4
 800d618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	69d9      	ldr	r1, [r3, #28]
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	691a      	ldr	r2, [r3, #16]
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	430a      	orrs	r2, r1
 800d62a:	61da      	str	r2, [r3, #28]
      break;
 800d62c:	e064      	b.n	800d6f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	68b9      	ldr	r1, [r7, #8]
 800d634:	4618      	mov	r0, r3
 800d636:	f000 fbdd 	bl	800ddf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	69da      	ldr	r2, [r3, #28]
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	69da      	ldr	r2, [r3, #28]
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	69d9      	ldr	r1, [r3, #28]
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	691b      	ldr	r3, [r3, #16]
 800d664:	021a      	lsls	r2, r3, #8
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	430a      	orrs	r2, r1
 800d66c:	61da      	str	r2, [r3, #28]
      break;
 800d66e:	e043      	b.n	800d6f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	68b9      	ldr	r1, [r7, #8]
 800d676:	4618      	mov	r0, r3
 800d678:	f000 fc26 	bl	800dec8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f042 0208 	orr.w	r2, r2, #8
 800d68a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	f022 0204 	bic.w	r2, r2, #4
 800d69a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	691a      	ldr	r2, [r3, #16]
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	430a      	orrs	r2, r1
 800d6ac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d6ae:	e023      	b.n	800d6f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	68b9      	ldr	r1, [r7, #8]
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f000 fc6a 	bl	800df90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d6ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d6da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	691b      	ldr	r3, [r3, #16]
 800d6e6:	021a      	lsls	r2, r3, #8
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	430a      	orrs	r2, r1
 800d6ee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d6f0:	e002      	b.n	800d6f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	75fb      	strb	r3, [r7, #23]
      break;
 800d6f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d700:	7dfb      	ldrb	r3, [r7, #23]
}
 800d702:	4618      	mov	r0, r3
 800d704:	3718      	adds	r7, #24
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	bf00      	nop

0800d70c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d716:	2300      	movs	r3, #0
 800d718:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d720:	2b01      	cmp	r3, #1
 800d722:	d101      	bne.n	800d728 <HAL_TIM_ConfigClockSource+0x1c>
 800d724:	2302      	movs	r3, #2
 800d726:	e0dc      	b.n	800d8e2 <HAL_TIM_ConfigClockSource+0x1d6>
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2201      	movs	r2, #1
 800d72c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2202      	movs	r2, #2
 800d734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	689b      	ldr	r3, [r3, #8]
 800d73e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d740:	68ba      	ldr	r2, [r7, #8]
 800d742:	4b6a      	ldr	r3, [pc, #424]	@ (800d8ec <HAL_TIM_ConfigClockSource+0x1e0>)
 800d744:	4013      	ands	r3, r2
 800d746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d74e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	68ba      	ldr	r2, [r7, #8]
 800d756:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a64      	ldr	r2, [pc, #400]	@ (800d8f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	f000 80a9 	beq.w	800d8b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d764:	4a62      	ldr	r2, [pc, #392]	@ (800d8f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d766:	4293      	cmp	r3, r2
 800d768:	f200 80ae 	bhi.w	800d8c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d76c:	4a61      	ldr	r2, [pc, #388]	@ (800d8f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	f000 80a1 	beq.w	800d8b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d774:	4a5f      	ldr	r2, [pc, #380]	@ (800d8f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d776:	4293      	cmp	r3, r2
 800d778:	f200 80a6 	bhi.w	800d8c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d77c:	4a5e      	ldr	r2, [pc, #376]	@ (800d8f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d77e:	4293      	cmp	r3, r2
 800d780:	f000 8099 	beq.w	800d8b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d784:	4a5c      	ldr	r2, [pc, #368]	@ (800d8f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d786:	4293      	cmp	r3, r2
 800d788:	f200 809e 	bhi.w	800d8c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d78c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d790:	f000 8091 	beq.w	800d8b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d794:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d798:	f200 8096 	bhi.w	800d8c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d79c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d7a0:	f000 8089 	beq.w	800d8b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d7a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d7a8:	f200 808e 	bhi.w	800d8c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d7b0:	d03e      	beq.n	800d830 <HAL_TIM_ConfigClockSource+0x124>
 800d7b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d7b6:	f200 8087 	bhi.w	800d8c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d7be:	f000 8086 	beq.w	800d8ce <HAL_TIM_ConfigClockSource+0x1c2>
 800d7c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d7c6:	d87f      	bhi.n	800d8c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7c8:	2b70      	cmp	r3, #112	@ 0x70
 800d7ca:	d01a      	beq.n	800d802 <HAL_TIM_ConfigClockSource+0xf6>
 800d7cc:	2b70      	cmp	r3, #112	@ 0x70
 800d7ce:	d87b      	bhi.n	800d8c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7d0:	2b60      	cmp	r3, #96	@ 0x60
 800d7d2:	d050      	beq.n	800d876 <HAL_TIM_ConfigClockSource+0x16a>
 800d7d4:	2b60      	cmp	r3, #96	@ 0x60
 800d7d6:	d877      	bhi.n	800d8c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7d8:	2b50      	cmp	r3, #80	@ 0x50
 800d7da:	d03c      	beq.n	800d856 <HAL_TIM_ConfigClockSource+0x14a>
 800d7dc:	2b50      	cmp	r3, #80	@ 0x50
 800d7de:	d873      	bhi.n	800d8c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7e0:	2b40      	cmp	r3, #64	@ 0x40
 800d7e2:	d058      	beq.n	800d896 <HAL_TIM_ConfigClockSource+0x18a>
 800d7e4:	2b40      	cmp	r3, #64	@ 0x40
 800d7e6:	d86f      	bhi.n	800d8c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7e8:	2b30      	cmp	r3, #48	@ 0x30
 800d7ea:	d064      	beq.n	800d8b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d7ec:	2b30      	cmp	r3, #48	@ 0x30
 800d7ee:	d86b      	bhi.n	800d8c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7f0:	2b20      	cmp	r3, #32
 800d7f2:	d060      	beq.n	800d8b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d7f4:	2b20      	cmp	r3, #32
 800d7f6:	d867      	bhi.n	800d8c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d05c      	beq.n	800d8b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d7fc:	2b10      	cmp	r3, #16
 800d7fe:	d05a      	beq.n	800d8b6 <HAL_TIM_ConfigClockSource+0x1aa>
 800d800:	e062      	b.n	800d8c8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d812:	f000 fca1 	bl	800e158 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	689b      	ldr	r3, [r3, #8]
 800d81c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d824:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	68ba      	ldr	r2, [r7, #8]
 800d82c:	609a      	str	r2, [r3, #8]
      break;
 800d82e:	e04f      	b.n	800d8d0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d840:	f000 fc8a 	bl	800e158 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	689a      	ldr	r2, [r3, #8]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d852:	609a      	str	r2, [r3, #8]
      break;
 800d854:	e03c      	b.n	800d8d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d862:	461a      	mov	r2, r3
 800d864:	f000 fbfa 	bl	800e05c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	2150      	movs	r1, #80	@ 0x50
 800d86e:	4618      	mov	r0, r3
 800d870:	f000 fc54 	bl	800e11c <TIM_ITRx_SetConfig>
      break;
 800d874:	e02c      	b.n	800d8d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d882:	461a      	mov	r2, r3
 800d884:	f000 fc19 	bl	800e0ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	2160      	movs	r1, #96	@ 0x60
 800d88e:	4618      	mov	r0, r3
 800d890:	f000 fc44 	bl	800e11c <TIM_ITRx_SetConfig>
      break;
 800d894:	e01c      	b.n	800d8d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	f000 fbda 	bl	800e05c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	2140      	movs	r1, #64	@ 0x40
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f000 fc34 	bl	800e11c <TIM_ITRx_SetConfig>
      break;
 800d8b4:	e00c      	b.n	800d8d0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	4619      	mov	r1, r3
 800d8c0:	4610      	mov	r0, r2
 800d8c2:	f000 fc2b 	bl	800e11c <TIM_ITRx_SetConfig>
      break;
 800d8c6:	e003      	b.n	800d8d0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	73fb      	strb	r3, [r7, #15]
      break;
 800d8cc:	e000      	b.n	800d8d0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d8ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3710      	adds	r7, #16
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	ffceff88 	.word	0xffceff88
 800d8f0:	00100040 	.word	0x00100040
 800d8f4:	00100030 	.word	0x00100030
 800d8f8:	00100020 	.word	0x00100020

0800d8fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b083      	sub	sp, #12
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d904:	bf00      	nop
 800d906:	370c      	adds	r7, #12
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr

0800d910 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d910:	b480      	push	{r7}
 800d912:	b083      	sub	sp, #12
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d918:	bf00      	nop
 800d91a:	370c      	adds	r7, #12
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr

0800d924 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d92c:	bf00      	nop
 800d92e:	370c      	adds	r7, #12
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr

0800d938 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d938:	b480      	push	{r7}
 800d93a:	b083      	sub	sp, #12
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d940:	bf00      	nop
 800d942:	370c      	adds	r7, #12
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr

0800d94c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b085      	sub	sp, #20
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	4a4a      	ldr	r2, [pc, #296]	@ (800da88 <TIM_Base_SetConfig+0x13c>)
 800d960:	4293      	cmp	r3, r2
 800d962:	d013      	beq.n	800d98c <TIM_Base_SetConfig+0x40>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d96a:	d00f      	beq.n	800d98c <TIM_Base_SetConfig+0x40>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	4a47      	ldr	r2, [pc, #284]	@ (800da8c <TIM_Base_SetConfig+0x140>)
 800d970:	4293      	cmp	r3, r2
 800d972:	d00b      	beq.n	800d98c <TIM_Base_SetConfig+0x40>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	4a46      	ldr	r2, [pc, #280]	@ (800da90 <TIM_Base_SetConfig+0x144>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d007      	beq.n	800d98c <TIM_Base_SetConfig+0x40>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	4a45      	ldr	r2, [pc, #276]	@ (800da94 <TIM_Base_SetConfig+0x148>)
 800d980:	4293      	cmp	r3, r2
 800d982:	d003      	beq.n	800d98c <TIM_Base_SetConfig+0x40>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	4a44      	ldr	r2, [pc, #272]	@ (800da98 <TIM_Base_SetConfig+0x14c>)
 800d988:	4293      	cmp	r3, r2
 800d98a:	d108      	bne.n	800d99e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	68fa      	ldr	r2, [r7, #12]
 800d99a:	4313      	orrs	r3, r2
 800d99c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	4a39      	ldr	r2, [pc, #228]	@ (800da88 <TIM_Base_SetConfig+0x13c>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d027      	beq.n	800d9f6 <TIM_Base_SetConfig+0xaa>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d9ac:	d023      	beq.n	800d9f6 <TIM_Base_SetConfig+0xaa>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	4a36      	ldr	r2, [pc, #216]	@ (800da8c <TIM_Base_SetConfig+0x140>)
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d01f      	beq.n	800d9f6 <TIM_Base_SetConfig+0xaa>
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	4a35      	ldr	r2, [pc, #212]	@ (800da90 <TIM_Base_SetConfig+0x144>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d01b      	beq.n	800d9f6 <TIM_Base_SetConfig+0xaa>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	4a34      	ldr	r2, [pc, #208]	@ (800da94 <TIM_Base_SetConfig+0x148>)
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d017      	beq.n	800d9f6 <TIM_Base_SetConfig+0xaa>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	4a33      	ldr	r2, [pc, #204]	@ (800da98 <TIM_Base_SetConfig+0x14c>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d013      	beq.n	800d9f6 <TIM_Base_SetConfig+0xaa>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	4a32      	ldr	r2, [pc, #200]	@ (800da9c <TIM_Base_SetConfig+0x150>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d00f      	beq.n	800d9f6 <TIM_Base_SetConfig+0xaa>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	4a31      	ldr	r2, [pc, #196]	@ (800daa0 <TIM_Base_SetConfig+0x154>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d00b      	beq.n	800d9f6 <TIM_Base_SetConfig+0xaa>
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	4a30      	ldr	r2, [pc, #192]	@ (800daa4 <TIM_Base_SetConfig+0x158>)
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	d007      	beq.n	800d9f6 <TIM_Base_SetConfig+0xaa>
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	4a2f      	ldr	r2, [pc, #188]	@ (800daa8 <TIM_Base_SetConfig+0x15c>)
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	d003      	beq.n	800d9f6 <TIM_Base_SetConfig+0xaa>
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	4a2e      	ldr	r2, [pc, #184]	@ (800daac <TIM_Base_SetConfig+0x160>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d108      	bne.n	800da08 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d9fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	68db      	ldr	r3, [r3, #12]
 800da02:	68fa      	ldr	r2, [r7, #12]
 800da04:	4313      	orrs	r3, r2
 800da06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	695b      	ldr	r3, [r3, #20]
 800da12:	4313      	orrs	r3, r2
 800da14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	68fa      	ldr	r2, [r7, #12]
 800da1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	689a      	ldr	r2, [r3, #8]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	681a      	ldr	r2, [r3, #0]
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	4a16      	ldr	r2, [pc, #88]	@ (800da88 <TIM_Base_SetConfig+0x13c>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d00f      	beq.n	800da54 <TIM_Base_SetConfig+0x108>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	4a18      	ldr	r2, [pc, #96]	@ (800da98 <TIM_Base_SetConfig+0x14c>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d00b      	beq.n	800da54 <TIM_Base_SetConfig+0x108>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	4a17      	ldr	r2, [pc, #92]	@ (800da9c <TIM_Base_SetConfig+0x150>)
 800da40:	4293      	cmp	r3, r2
 800da42:	d007      	beq.n	800da54 <TIM_Base_SetConfig+0x108>
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	4a16      	ldr	r2, [pc, #88]	@ (800daa0 <TIM_Base_SetConfig+0x154>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d003      	beq.n	800da54 <TIM_Base_SetConfig+0x108>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	4a15      	ldr	r2, [pc, #84]	@ (800daa4 <TIM_Base_SetConfig+0x158>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d103      	bne.n	800da5c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	691a      	ldr	r2, [r3, #16]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2201      	movs	r2, #1
 800da60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	691b      	ldr	r3, [r3, #16]
 800da66:	f003 0301 	and.w	r3, r3, #1
 800da6a:	2b01      	cmp	r3, #1
 800da6c:	d105      	bne.n	800da7a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	691b      	ldr	r3, [r3, #16]
 800da72:	f023 0201 	bic.w	r2, r3, #1
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	611a      	str	r2, [r3, #16]
  }
}
 800da7a:	bf00      	nop
 800da7c:	3714      	adds	r7, #20
 800da7e:	46bd      	mov	sp, r7
 800da80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da84:	4770      	bx	lr
 800da86:	bf00      	nop
 800da88:	40010000 	.word	0x40010000
 800da8c:	40000400 	.word	0x40000400
 800da90:	40000800 	.word	0x40000800
 800da94:	40000c00 	.word	0x40000c00
 800da98:	40010400 	.word	0x40010400
 800da9c:	40014000 	.word	0x40014000
 800daa0:	40014400 	.word	0x40014400
 800daa4:	40014800 	.word	0x40014800
 800daa8:	4000e000 	.word	0x4000e000
 800daac:	4000e400 	.word	0x4000e400

0800dab0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dab0:	b480      	push	{r7}
 800dab2:	b087      	sub	sp, #28
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6a1b      	ldr	r3, [r3, #32]
 800dabe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6a1b      	ldr	r3, [r3, #32]
 800dac4:	f023 0201 	bic.w	r2, r3, #1
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	699b      	ldr	r3, [r3, #24]
 800dad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dad8:	68fa      	ldr	r2, [r7, #12]
 800dada:	4b37      	ldr	r3, [pc, #220]	@ (800dbb8 <TIM_OC1_SetConfig+0x108>)
 800dadc:	4013      	ands	r3, r2
 800dade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	f023 0303 	bic.w	r3, r3, #3
 800dae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	68fa      	ldr	r2, [r7, #12]
 800daee:	4313      	orrs	r3, r2
 800daf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	f023 0302 	bic.w	r3, r3, #2
 800daf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	689b      	ldr	r3, [r3, #8]
 800dafe:	697a      	ldr	r2, [r7, #20]
 800db00:	4313      	orrs	r3, r2
 800db02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	4a2d      	ldr	r2, [pc, #180]	@ (800dbbc <TIM_OC1_SetConfig+0x10c>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d00f      	beq.n	800db2c <TIM_OC1_SetConfig+0x7c>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	4a2c      	ldr	r2, [pc, #176]	@ (800dbc0 <TIM_OC1_SetConfig+0x110>)
 800db10:	4293      	cmp	r3, r2
 800db12:	d00b      	beq.n	800db2c <TIM_OC1_SetConfig+0x7c>
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	4a2b      	ldr	r2, [pc, #172]	@ (800dbc4 <TIM_OC1_SetConfig+0x114>)
 800db18:	4293      	cmp	r3, r2
 800db1a:	d007      	beq.n	800db2c <TIM_OC1_SetConfig+0x7c>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	4a2a      	ldr	r2, [pc, #168]	@ (800dbc8 <TIM_OC1_SetConfig+0x118>)
 800db20:	4293      	cmp	r3, r2
 800db22:	d003      	beq.n	800db2c <TIM_OC1_SetConfig+0x7c>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	4a29      	ldr	r2, [pc, #164]	@ (800dbcc <TIM_OC1_SetConfig+0x11c>)
 800db28:	4293      	cmp	r3, r2
 800db2a:	d10c      	bne.n	800db46 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	f023 0308 	bic.w	r3, r3, #8
 800db32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	68db      	ldr	r3, [r3, #12]
 800db38:	697a      	ldr	r2, [r7, #20]
 800db3a:	4313      	orrs	r3, r2
 800db3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	f023 0304 	bic.w	r3, r3, #4
 800db44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	4a1c      	ldr	r2, [pc, #112]	@ (800dbbc <TIM_OC1_SetConfig+0x10c>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d00f      	beq.n	800db6e <TIM_OC1_SetConfig+0xbe>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	4a1b      	ldr	r2, [pc, #108]	@ (800dbc0 <TIM_OC1_SetConfig+0x110>)
 800db52:	4293      	cmp	r3, r2
 800db54:	d00b      	beq.n	800db6e <TIM_OC1_SetConfig+0xbe>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	4a1a      	ldr	r2, [pc, #104]	@ (800dbc4 <TIM_OC1_SetConfig+0x114>)
 800db5a:	4293      	cmp	r3, r2
 800db5c:	d007      	beq.n	800db6e <TIM_OC1_SetConfig+0xbe>
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	4a19      	ldr	r2, [pc, #100]	@ (800dbc8 <TIM_OC1_SetConfig+0x118>)
 800db62:	4293      	cmp	r3, r2
 800db64:	d003      	beq.n	800db6e <TIM_OC1_SetConfig+0xbe>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	4a18      	ldr	r2, [pc, #96]	@ (800dbcc <TIM_OC1_SetConfig+0x11c>)
 800db6a:	4293      	cmp	r3, r2
 800db6c:	d111      	bne.n	800db92 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800db74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800db7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	695b      	ldr	r3, [r3, #20]
 800db82:	693a      	ldr	r2, [r7, #16]
 800db84:	4313      	orrs	r3, r2
 800db86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	699b      	ldr	r3, [r3, #24]
 800db8c:	693a      	ldr	r2, [r7, #16]
 800db8e:	4313      	orrs	r3, r2
 800db90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	693a      	ldr	r2, [r7, #16]
 800db96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	68fa      	ldr	r2, [r7, #12]
 800db9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	685a      	ldr	r2, [r3, #4]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	697a      	ldr	r2, [r7, #20]
 800dbaa:	621a      	str	r2, [r3, #32]
}
 800dbac:	bf00      	nop
 800dbae:	371c      	adds	r7, #28
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr
 800dbb8:	fffeff8f 	.word	0xfffeff8f
 800dbbc:	40010000 	.word	0x40010000
 800dbc0:	40010400 	.word	0x40010400
 800dbc4:	40014000 	.word	0x40014000
 800dbc8:	40014400 	.word	0x40014400
 800dbcc:	40014800 	.word	0x40014800

0800dbd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b087      	sub	sp, #28
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6a1b      	ldr	r3, [r3, #32]
 800dbde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6a1b      	ldr	r3, [r3, #32]
 800dbe4:	f023 0210 	bic.w	r2, r3, #16
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	685b      	ldr	r3, [r3, #4]
 800dbf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	699b      	ldr	r3, [r3, #24]
 800dbf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dbf8:	68fa      	ldr	r2, [r7, #12]
 800dbfa:	4b34      	ldr	r3, [pc, #208]	@ (800dccc <TIM_OC2_SetConfig+0xfc>)
 800dbfc:	4013      	ands	r3, r2
 800dbfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dc06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	021b      	lsls	r3, r3, #8
 800dc0e:	68fa      	ldr	r2, [r7, #12]
 800dc10:	4313      	orrs	r3, r2
 800dc12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	f023 0320 	bic.w	r3, r3, #32
 800dc1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	689b      	ldr	r3, [r3, #8]
 800dc20:	011b      	lsls	r3, r3, #4
 800dc22:	697a      	ldr	r2, [r7, #20]
 800dc24:	4313      	orrs	r3, r2
 800dc26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	4a29      	ldr	r2, [pc, #164]	@ (800dcd0 <TIM_OC2_SetConfig+0x100>)
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	d003      	beq.n	800dc38 <TIM_OC2_SetConfig+0x68>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	4a28      	ldr	r2, [pc, #160]	@ (800dcd4 <TIM_OC2_SetConfig+0x104>)
 800dc34:	4293      	cmp	r3, r2
 800dc36:	d10d      	bne.n	800dc54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dc3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	68db      	ldr	r3, [r3, #12]
 800dc44:	011b      	lsls	r3, r3, #4
 800dc46:	697a      	ldr	r2, [r7, #20]
 800dc48:	4313      	orrs	r3, r2
 800dc4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	4a1e      	ldr	r2, [pc, #120]	@ (800dcd0 <TIM_OC2_SetConfig+0x100>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d00f      	beq.n	800dc7c <TIM_OC2_SetConfig+0xac>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	4a1d      	ldr	r2, [pc, #116]	@ (800dcd4 <TIM_OC2_SetConfig+0x104>)
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d00b      	beq.n	800dc7c <TIM_OC2_SetConfig+0xac>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	4a1c      	ldr	r2, [pc, #112]	@ (800dcd8 <TIM_OC2_SetConfig+0x108>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d007      	beq.n	800dc7c <TIM_OC2_SetConfig+0xac>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	4a1b      	ldr	r2, [pc, #108]	@ (800dcdc <TIM_OC2_SetConfig+0x10c>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d003      	beq.n	800dc7c <TIM_OC2_SetConfig+0xac>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	4a1a      	ldr	r2, [pc, #104]	@ (800dce0 <TIM_OC2_SetConfig+0x110>)
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d113      	bne.n	800dca4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dc82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dc8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	695b      	ldr	r3, [r3, #20]
 800dc90:	009b      	lsls	r3, r3, #2
 800dc92:	693a      	ldr	r2, [r7, #16]
 800dc94:	4313      	orrs	r3, r2
 800dc96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	699b      	ldr	r3, [r3, #24]
 800dc9c:	009b      	lsls	r3, r3, #2
 800dc9e:	693a      	ldr	r2, [r7, #16]
 800dca0:	4313      	orrs	r3, r2
 800dca2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	693a      	ldr	r2, [r7, #16]
 800dca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	68fa      	ldr	r2, [r7, #12]
 800dcae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	685a      	ldr	r2, [r3, #4]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	697a      	ldr	r2, [r7, #20]
 800dcbc:	621a      	str	r2, [r3, #32]
}
 800dcbe:	bf00      	nop
 800dcc0:	371c      	adds	r7, #28
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc8:	4770      	bx	lr
 800dcca:	bf00      	nop
 800dccc:	feff8fff 	.word	0xfeff8fff
 800dcd0:	40010000 	.word	0x40010000
 800dcd4:	40010400 	.word	0x40010400
 800dcd8:	40014000 	.word	0x40014000
 800dcdc:	40014400 	.word	0x40014400
 800dce0:	40014800 	.word	0x40014800

0800dce4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b087      	sub	sp, #28
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6a1b      	ldr	r3, [r3, #32]
 800dcf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6a1b      	ldr	r3, [r3, #32]
 800dcf8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	69db      	ldr	r3, [r3, #28]
 800dd0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dd0c:	68fa      	ldr	r2, [r7, #12]
 800dd0e:	4b33      	ldr	r3, [pc, #204]	@ (800dddc <TIM_OC3_SetConfig+0xf8>)
 800dd10:	4013      	ands	r3, r2
 800dd12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	f023 0303 	bic.w	r3, r3, #3
 800dd1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	68fa      	ldr	r2, [r7, #12]
 800dd22:	4313      	orrs	r3, r2
 800dd24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dd2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	689b      	ldr	r3, [r3, #8]
 800dd32:	021b      	lsls	r3, r3, #8
 800dd34:	697a      	ldr	r2, [r7, #20]
 800dd36:	4313      	orrs	r3, r2
 800dd38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	4a28      	ldr	r2, [pc, #160]	@ (800dde0 <TIM_OC3_SetConfig+0xfc>)
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d003      	beq.n	800dd4a <TIM_OC3_SetConfig+0x66>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	4a27      	ldr	r2, [pc, #156]	@ (800dde4 <TIM_OC3_SetConfig+0x100>)
 800dd46:	4293      	cmp	r3, r2
 800dd48:	d10d      	bne.n	800dd66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dd50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	68db      	ldr	r3, [r3, #12]
 800dd56:	021b      	lsls	r3, r3, #8
 800dd58:	697a      	ldr	r2, [r7, #20]
 800dd5a:	4313      	orrs	r3, r2
 800dd5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dd64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	4a1d      	ldr	r2, [pc, #116]	@ (800dde0 <TIM_OC3_SetConfig+0xfc>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d00f      	beq.n	800dd8e <TIM_OC3_SetConfig+0xaa>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	4a1c      	ldr	r2, [pc, #112]	@ (800dde4 <TIM_OC3_SetConfig+0x100>)
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d00b      	beq.n	800dd8e <TIM_OC3_SetConfig+0xaa>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	4a1b      	ldr	r2, [pc, #108]	@ (800dde8 <TIM_OC3_SetConfig+0x104>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d007      	beq.n	800dd8e <TIM_OC3_SetConfig+0xaa>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	4a1a      	ldr	r2, [pc, #104]	@ (800ddec <TIM_OC3_SetConfig+0x108>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d003      	beq.n	800dd8e <TIM_OC3_SetConfig+0xaa>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	4a19      	ldr	r2, [pc, #100]	@ (800ddf0 <TIM_OC3_SetConfig+0x10c>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d113      	bne.n	800ddb6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dd94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dd9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	695b      	ldr	r3, [r3, #20]
 800dda2:	011b      	lsls	r3, r3, #4
 800dda4:	693a      	ldr	r2, [r7, #16]
 800dda6:	4313      	orrs	r3, r2
 800dda8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	699b      	ldr	r3, [r3, #24]
 800ddae:	011b      	lsls	r3, r3, #4
 800ddb0:	693a      	ldr	r2, [r7, #16]
 800ddb2:	4313      	orrs	r3, r2
 800ddb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	693a      	ldr	r2, [r7, #16]
 800ddba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	68fa      	ldr	r2, [r7, #12]
 800ddc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	685a      	ldr	r2, [r3, #4]
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	697a      	ldr	r2, [r7, #20]
 800ddce:	621a      	str	r2, [r3, #32]
}
 800ddd0:	bf00      	nop
 800ddd2:	371c      	adds	r7, #28
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr
 800dddc:	fffeff8f 	.word	0xfffeff8f
 800dde0:	40010000 	.word	0x40010000
 800dde4:	40010400 	.word	0x40010400
 800dde8:	40014000 	.word	0x40014000
 800ddec:	40014400 	.word	0x40014400
 800ddf0:	40014800 	.word	0x40014800

0800ddf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b087      	sub	sp, #28
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6a1b      	ldr	r3, [r3, #32]
 800de02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6a1b      	ldr	r3, [r3, #32]
 800de08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	685b      	ldr	r3, [r3, #4]
 800de14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	69db      	ldr	r3, [r3, #28]
 800de1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800de1c:	68fa      	ldr	r2, [r7, #12]
 800de1e:	4b24      	ldr	r3, [pc, #144]	@ (800deb0 <TIM_OC4_SetConfig+0xbc>)
 800de20:	4013      	ands	r3, r2
 800de22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800de2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	021b      	lsls	r3, r3, #8
 800de32:	68fa      	ldr	r2, [r7, #12]
 800de34:	4313      	orrs	r3, r2
 800de36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800de3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	689b      	ldr	r3, [r3, #8]
 800de44:	031b      	lsls	r3, r3, #12
 800de46:	693a      	ldr	r2, [r7, #16]
 800de48:	4313      	orrs	r3, r2
 800de4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	4a19      	ldr	r2, [pc, #100]	@ (800deb4 <TIM_OC4_SetConfig+0xc0>)
 800de50:	4293      	cmp	r3, r2
 800de52:	d00f      	beq.n	800de74 <TIM_OC4_SetConfig+0x80>
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	4a18      	ldr	r2, [pc, #96]	@ (800deb8 <TIM_OC4_SetConfig+0xc4>)
 800de58:	4293      	cmp	r3, r2
 800de5a:	d00b      	beq.n	800de74 <TIM_OC4_SetConfig+0x80>
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	4a17      	ldr	r2, [pc, #92]	@ (800debc <TIM_OC4_SetConfig+0xc8>)
 800de60:	4293      	cmp	r3, r2
 800de62:	d007      	beq.n	800de74 <TIM_OC4_SetConfig+0x80>
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	4a16      	ldr	r2, [pc, #88]	@ (800dec0 <TIM_OC4_SetConfig+0xcc>)
 800de68:	4293      	cmp	r3, r2
 800de6a:	d003      	beq.n	800de74 <TIM_OC4_SetConfig+0x80>
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	4a15      	ldr	r2, [pc, #84]	@ (800dec4 <TIM_OC4_SetConfig+0xd0>)
 800de70:	4293      	cmp	r3, r2
 800de72:	d109      	bne.n	800de88 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800de7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	695b      	ldr	r3, [r3, #20]
 800de80:	019b      	lsls	r3, r3, #6
 800de82:	697a      	ldr	r2, [r7, #20]
 800de84:	4313      	orrs	r3, r2
 800de86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	697a      	ldr	r2, [r7, #20]
 800de8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	68fa      	ldr	r2, [r7, #12]
 800de92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	685a      	ldr	r2, [r3, #4]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	693a      	ldr	r2, [r7, #16]
 800dea0:	621a      	str	r2, [r3, #32]
}
 800dea2:	bf00      	nop
 800dea4:	371c      	adds	r7, #28
 800dea6:	46bd      	mov	sp, r7
 800dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deac:	4770      	bx	lr
 800deae:	bf00      	nop
 800deb0:	feff8fff 	.word	0xfeff8fff
 800deb4:	40010000 	.word	0x40010000
 800deb8:	40010400 	.word	0x40010400
 800debc:	40014000 	.word	0x40014000
 800dec0:	40014400 	.word	0x40014400
 800dec4:	40014800 	.word	0x40014800

0800dec8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dec8:	b480      	push	{r7}
 800deca:	b087      	sub	sp, #28
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6a1b      	ldr	r3, [r3, #32]
 800ded6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6a1b      	ldr	r3, [r3, #32]
 800dedc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	685b      	ldr	r3, [r3, #4]
 800dee8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800deee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800def0:	68fa      	ldr	r2, [r7, #12]
 800def2:	4b21      	ldr	r3, [pc, #132]	@ (800df78 <TIM_OC5_SetConfig+0xb0>)
 800def4:	4013      	ands	r3, r2
 800def6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	68fa      	ldr	r2, [r7, #12]
 800defe:	4313      	orrs	r3, r2
 800df00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800df08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	689b      	ldr	r3, [r3, #8]
 800df0e:	041b      	lsls	r3, r3, #16
 800df10:	693a      	ldr	r2, [r7, #16]
 800df12:	4313      	orrs	r3, r2
 800df14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	4a18      	ldr	r2, [pc, #96]	@ (800df7c <TIM_OC5_SetConfig+0xb4>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d00f      	beq.n	800df3e <TIM_OC5_SetConfig+0x76>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	4a17      	ldr	r2, [pc, #92]	@ (800df80 <TIM_OC5_SetConfig+0xb8>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d00b      	beq.n	800df3e <TIM_OC5_SetConfig+0x76>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	4a16      	ldr	r2, [pc, #88]	@ (800df84 <TIM_OC5_SetConfig+0xbc>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d007      	beq.n	800df3e <TIM_OC5_SetConfig+0x76>
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	4a15      	ldr	r2, [pc, #84]	@ (800df88 <TIM_OC5_SetConfig+0xc0>)
 800df32:	4293      	cmp	r3, r2
 800df34:	d003      	beq.n	800df3e <TIM_OC5_SetConfig+0x76>
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	4a14      	ldr	r2, [pc, #80]	@ (800df8c <TIM_OC5_SetConfig+0xc4>)
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d109      	bne.n	800df52 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800df44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	695b      	ldr	r3, [r3, #20]
 800df4a:	021b      	lsls	r3, r3, #8
 800df4c:	697a      	ldr	r2, [r7, #20]
 800df4e:	4313      	orrs	r3, r2
 800df50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	697a      	ldr	r2, [r7, #20]
 800df56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	68fa      	ldr	r2, [r7, #12]
 800df5c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	685a      	ldr	r2, [r3, #4]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	693a      	ldr	r2, [r7, #16]
 800df6a:	621a      	str	r2, [r3, #32]
}
 800df6c:	bf00      	nop
 800df6e:	371c      	adds	r7, #28
 800df70:	46bd      	mov	sp, r7
 800df72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df76:	4770      	bx	lr
 800df78:	fffeff8f 	.word	0xfffeff8f
 800df7c:	40010000 	.word	0x40010000
 800df80:	40010400 	.word	0x40010400
 800df84:	40014000 	.word	0x40014000
 800df88:	40014400 	.word	0x40014400
 800df8c:	40014800 	.word	0x40014800

0800df90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800df90:	b480      	push	{r7}
 800df92:	b087      	sub	sp, #28
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6a1b      	ldr	r3, [r3, #32]
 800df9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6a1b      	ldr	r3, [r3, #32]
 800dfa4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	685b      	ldr	r3, [r3, #4]
 800dfb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dfb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dfb8:	68fa      	ldr	r2, [r7, #12]
 800dfba:	4b22      	ldr	r3, [pc, #136]	@ (800e044 <TIM_OC6_SetConfig+0xb4>)
 800dfbc:	4013      	ands	r3, r2
 800dfbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	021b      	lsls	r3, r3, #8
 800dfc6:	68fa      	ldr	r2, [r7, #12]
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800dfd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	689b      	ldr	r3, [r3, #8]
 800dfd8:	051b      	lsls	r3, r3, #20
 800dfda:	693a      	ldr	r2, [r7, #16]
 800dfdc:	4313      	orrs	r3, r2
 800dfde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	4a19      	ldr	r2, [pc, #100]	@ (800e048 <TIM_OC6_SetConfig+0xb8>)
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	d00f      	beq.n	800e008 <TIM_OC6_SetConfig+0x78>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	4a18      	ldr	r2, [pc, #96]	@ (800e04c <TIM_OC6_SetConfig+0xbc>)
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d00b      	beq.n	800e008 <TIM_OC6_SetConfig+0x78>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	4a17      	ldr	r2, [pc, #92]	@ (800e050 <TIM_OC6_SetConfig+0xc0>)
 800dff4:	4293      	cmp	r3, r2
 800dff6:	d007      	beq.n	800e008 <TIM_OC6_SetConfig+0x78>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	4a16      	ldr	r2, [pc, #88]	@ (800e054 <TIM_OC6_SetConfig+0xc4>)
 800dffc:	4293      	cmp	r3, r2
 800dffe:	d003      	beq.n	800e008 <TIM_OC6_SetConfig+0x78>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	4a15      	ldr	r2, [pc, #84]	@ (800e058 <TIM_OC6_SetConfig+0xc8>)
 800e004:	4293      	cmp	r3, r2
 800e006:	d109      	bne.n	800e01c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e00e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	695b      	ldr	r3, [r3, #20]
 800e014:	029b      	lsls	r3, r3, #10
 800e016:	697a      	ldr	r2, [r7, #20]
 800e018:	4313      	orrs	r3, r2
 800e01a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	697a      	ldr	r2, [r7, #20]
 800e020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	68fa      	ldr	r2, [r7, #12]
 800e026:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	685a      	ldr	r2, [r3, #4]
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	693a      	ldr	r2, [r7, #16]
 800e034:	621a      	str	r2, [r3, #32]
}
 800e036:	bf00      	nop
 800e038:	371c      	adds	r7, #28
 800e03a:	46bd      	mov	sp, r7
 800e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e040:	4770      	bx	lr
 800e042:	bf00      	nop
 800e044:	feff8fff 	.word	0xfeff8fff
 800e048:	40010000 	.word	0x40010000
 800e04c:	40010400 	.word	0x40010400
 800e050:	40014000 	.word	0x40014000
 800e054:	40014400 	.word	0x40014400
 800e058:	40014800 	.word	0x40014800

0800e05c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b087      	sub	sp, #28
 800e060:	af00      	add	r7, sp, #0
 800e062:	60f8      	str	r0, [r7, #12]
 800e064:	60b9      	str	r1, [r7, #8]
 800e066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	6a1b      	ldr	r3, [r3, #32]
 800e06c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	6a1b      	ldr	r3, [r3, #32]
 800e072:	f023 0201 	bic.w	r2, r3, #1
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	699b      	ldr	r3, [r3, #24]
 800e07e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	011b      	lsls	r3, r3, #4
 800e08c:	693a      	ldr	r2, [r7, #16]
 800e08e:	4313      	orrs	r3, r2
 800e090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	f023 030a 	bic.w	r3, r3, #10
 800e098:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e09a:	697a      	ldr	r2, [r7, #20]
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	693a      	ldr	r2, [r7, #16]
 800e0a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	697a      	ldr	r2, [r7, #20]
 800e0ac:	621a      	str	r2, [r3, #32]
}
 800e0ae:	bf00      	nop
 800e0b0:	371c      	adds	r7, #28
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b8:	4770      	bx	lr

0800e0ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e0ba:	b480      	push	{r7}
 800e0bc:	b087      	sub	sp, #28
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	60f8      	str	r0, [r7, #12]
 800e0c2:	60b9      	str	r1, [r7, #8]
 800e0c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	6a1b      	ldr	r3, [r3, #32]
 800e0ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	6a1b      	ldr	r3, [r3, #32]
 800e0d0:	f023 0210 	bic.w	r2, r3, #16
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	699b      	ldr	r3, [r3, #24]
 800e0dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e0e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	031b      	lsls	r3, r3, #12
 800e0ea:	693a      	ldr	r2, [r7, #16]
 800e0ec:	4313      	orrs	r3, r2
 800e0ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e0f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	011b      	lsls	r3, r3, #4
 800e0fc:	697a      	ldr	r2, [r7, #20]
 800e0fe:	4313      	orrs	r3, r2
 800e100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	693a      	ldr	r2, [r7, #16]
 800e106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	697a      	ldr	r2, [r7, #20]
 800e10c:	621a      	str	r2, [r3, #32]
}
 800e10e:	bf00      	nop
 800e110:	371c      	adds	r7, #28
 800e112:	46bd      	mov	sp, r7
 800e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e118:	4770      	bx	lr
	...

0800e11c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e11c:	b480      	push	{r7}
 800e11e:	b085      	sub	sp, #20
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
 800e124:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	689b      	ldr	r3, [r3, #8]
 800e12a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e12c:	68fa      	ldr	r2, [r7, #12]
 800e12e:	4b09      	ldr	r3, [pc, #36]	@ (800e154 <TIM_ITRx_SetConfig+0x38>)
 800e130:	4013      	ands	r3, r2
 800e132:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e134:	683a      	ldr	r2, [r7, #0]
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	4313      	orrs	r3, r2
 800e13a:	f043 0307 	orr.w	r3, r3, #7
 800e13e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	68fa      	ldr	r2, [r7, #12]
 800e144:	609a      	str	r2, [r3, #8]
}
 800e146:	bf00      	nop
 800e148:	3714      	adds	r7, #20
 800e14a:	46bd      	mov	sp, r7
 800e14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e150:	4770      	bx	lr
 800e152:	bf00      	nop
 800e154:	ffcfff8f 	.word	0xffcfff8f

0800e158 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e158:	b480      	push	{r7}
 800e15a:	b087      	sub	sp, #28
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	60f8      	str	r0, [r7, #12]
 800e160:	60b9      	str	r1, [r7, #8]
 800e162:	607a      	str	r2, [r7, #4]
 800e164:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	689b      	ldr	r3, [r3, #8]
 800e16a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e172:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	021a      	lsls	r2, r3, #8
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	431a      	orrs	r2, r3
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	4313      	orrs	r3, r2
 800e180:	697a      	ldr	r2, [r7, #20]
 800e182:	4313      	orrs	r3, r2
 800e184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	697a      	ldr	r2, [r7, #20]
 800e18a:	609a      	str	r2, [r3, #8]
}
 800e18c:	bf00      	nop
 800e18e:	371c      	adds	r7, #28
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr

0800e198 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e198:	b480      	push	{r7}
 800e19a:	b087      	sub	sp, #28
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	60f8      	str	r0, [r7, #12]
 800e1a0:	60b9      	str	r1, [r7, #8]
 800e1a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	f003 031f 	and.w	r3, r3, #31
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	fa02 f303 	lsl.w	r3, r2, r3
 800e1b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	6a1a      	ldr	r2, [r3, #32]
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	43db      	mvns	r3, r3
 800e1ba:	401a      	ands	r2, r3
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	6a1a      	ldr	r2, [r3, #32]
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	f003 031f 	and.w	r3, r3, #31
 800e1ca:	6879      	ldr	r1, [r7, #4]
 800e1cc:	fa01 f303 	lsl.w	r3, r1, r3
 800e1d0:	431a      	orrs	r2, r3
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	621a      	str	r2, [r3, #32]
}
 800e1d6:	bf00      	nop
 800e1d8:	371c      	adds	r7, #28
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e0:	4770      	bx	lr
	...

0800e1e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b085      	sub	sp, #20
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e1f4:	2b01      	cmp	r3, #1
 800e1f6:	d101      	bne.n	800e1fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e1f8:	2302      	movs	r3, #2
 800e1fa:	e077      	b.n	800e2ec <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2201      	movs	r2, #1
 800e200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2202      	movs	r2, #2
 800e208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	685b      	ldr	r3, [r3, #4]
 800e212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	689b      	ldr	r3, [r3, #8]
 800e21a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4a35      	ldr	r2, [pc, #212]	@ (800e2f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e222:	4293      	cmp	r3, r2
 800e224:	d004      	beq.n	800e230 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4a34      	ldr	r2, [pc, #208]	@ (800e2fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d108      	bne.n	800e242 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e236:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	685b      	ldr	r3, [r3, #4]
 800e23c:	68fa      	ldr	r2, [r7, #12]
 800e23e:	4313      	orrs	r3, r2
 800e240:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e248:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	68fa      	ldr	r2, [r7, #12]
 800e250:	4313      	orrs	r3, r2
 800e252:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	68fa      	ldr	r2, [r7, #12]
 800e25a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	4a25      	ldr	r2, [pc, #148]	@ (800e2f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e262:	4293      	cmp	r3, r2
 800e264:	d02c      	beq.n	800e2c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e26e:	d027      	beq.n	800e2c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4a22      	ldr	r2, [pc, #136]	@ (800e300 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d022      	beq.n	800e2c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	4a21      	ldr	r2, [pc, #132]	@ (800e304 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e280:	4293      	cmp	r3, r2
 800e282:	d01d      	beq.n	800e2c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	4a1f      	ldr	r2, [pc, #124]	@ (800e308 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d018      	beq.n	800e2c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	4a1a      	ldr	r2, [pc, #104]	@ (800e2fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e294:	4293      	cmp	r3, r2
 800e296:	d013      	beq.n	800e2c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	4a1b      	ldr	r2, [pc, #108]	@ (800e30c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	d00e      	beq.n	800e2c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4a1a      	ldr	r2, [pc, #104]	@ (800e310 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	d009      	beq.n	800e2c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	4a18      	ldr	r2, [pc, #96]	@ (800e314 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d004      	beq.n	800e2c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	4a17      	ldr	r2, [pc, #92]	@ (800e318 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d10c      	bne.n	800e2da <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e2c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	689b      	ldr	r3, [r3, #8]
 800e2cc:	68ba      	ldr	r2, [r7, #8]
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	68ba      	ldr	r2, [r7, #8]
 800e2d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2201      	movs	r2, #1
 800e2de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e2ea:	2300      	movs	r3, #0
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3714      	adds	r7, #20
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr
 800e2f8:	40010000 	.word	0x40010000
 800e2fc:	40010400 	.word	0x40010400
 800e300:	40000400 	.word	0x40000400
 800e304:	40000800 	.word	0x40000800
 800e308:	40000c00 	.word	0x40000c00
 800e30c:	40001800 	.word	0x40001800
 800e310:	40014000 	.word	0x40014000
 800e314:	4000e000 	.word	0x4000e000
 800e318:	4000e400 	.word	0x4000e400

0800e31c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e31c:	b480      	push	{r7}
 800e31e:	b083      	sub	sp, #12
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e324:	bf00      	nop
 800e326:	370c      	adds	r7, #12
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr

0800e330 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e330:	b480      	push	{r7}
 800e332:	b083      	sub	sp, #12
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e338:	bf00      	nop
 800e33a:	370c      	adds	r7, #12
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr

0800e344 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e344:	b480      	push	{r7}
 800e346:	b083      	sub	sp, #12
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e34c:	bf00      	nop
 800e34e:	370c      	adds	r7, #12
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr

0800e358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d101      	bne.n	800e36a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e366:	2301      	movs	r3, #1
 800e368:	e042      	b.n	800e3f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e370:	2b00      	cmp	r3, #0
 800e372:	d106      	bne.n	800e382 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2200      	movs	r2, #0
 800e378:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f7f4 fe8d 	bl	800309c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2224      	movs	r2, #36	@ 0x24
 800e386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	681a      	ldr	r2, [r3, #0]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f022 0201 	bic.w	r2, r2, #1
 800e398:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d002      	beq.n	800e3a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f001 fafa 	bl	800f99c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f000 fc8b 	bl	800ecc4 <UART_SetConfig>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	2b01      	cmp	r3, #1
 800e3b2:	d101      	bne.n	800e3b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	e01b      	b.n	800e3f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	685a      	ldr	r2, [r3, #4]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e3c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	689a      	ldr	r2, [r3, #8]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e3d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	681a      	ldr	r2, [r3, #0]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f042 0201 	orr.w	r2, r2, #1
 800e3e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f001 fb79 	bl	800fae0 <UART_CheckIdleState>
 800e3ee:	4603      	mov	r3, r0
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3708      	adds	r7, #8
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}

0800e3f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b08a      	sub	sp, #40	@ 0x28
 800e3fc:	af02      	add	r7, sp, #8
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	603b      	str	r3, [r7, #0]
 800e404:	4613      	mov	r3, r2
 800e406:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e40e:	2b20      	cmp	r3, #32
 800e410:	d17b      	bne.n	800e50a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d002      	beq.n	800e41e <HAL_UART_Transmit+0x26>
 800e418:	88fb      	ldrh	r3, [r7, #6]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d101      	bne.n	800e422 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e41e:	2301      	movs	r3, #1
 800e420:	e074      	b.n	800e50c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2200      	movs	r2, #0
 800e426:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	2221      	movs	r2, #33	@ 0x21
 800e42e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e432:	f7f5 f8d1 	bl	80035d8 <HAL_GetTick>
 800e436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	88fa      	ldrh	r2, [r7, #6]
 800e43c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	88fa      	ldrh	r2, [r7, #6]
 800e444:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	689b      	ldr	r3, [r3, #8]
 800e44c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e450:	d108      	bne.n	800e464 <HAL_UART_Transmit+0x6c>
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	691b      	ldr	r3, [r3, #16]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d104      	bne.n	800e464 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e45a:	2300      	movs	r3, #0
 800e45c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	61bb      	str	r3, [r7, #24]
 800e462:	e003      	b.n	800e46c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e468:	2300      	movs	r3, #0
 800e46a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e46c:	e030      	b.n	800e4d0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	9300      	str	r3, [sp, #0]
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	2200      	movs	r2, #0
 800e476:	2180      	movs	r1, #128	@ 0x80
 800e478:	68f8      	ldr	r0, [r7, #12]
 800e47a:	f001 fbdb 	bl	800fc34 <UART_WaitOnFlagUntilTimeout>
 800e47e:	4603      	mov	r3, r0
 800e480:	2b00      	cmp	r3, #0
 800e482:	d005      	beq.n	800e490 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	2220      	movs	r2, #32
 800e488:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e48c:	2303      	movs	r3, #3
 800e48e:	e03d      	b.n	800e50c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d10b      	bne.n	800e4ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e496:	69bb      	ldr	r3, [r7, #24]
 800e498:	881b      	ldrh	r3, [r3, #0]
 800e49a:	461a      	mov	r2, r3
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e4a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e4a6:	69bb      	ldr	r3, [r7, #24]
 800e4a8:	3302      	adds	r3, #2
 800e4aa:	61bb      	str	r3, [r7, #24]
 800e4ac:	e007      	b.n	800e4be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e4ae:	69fb      	ldr	r3, [r7, #28]
 800e4b0:	781a      	ldrb	r2, [r3, #0]
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	3b01      	subs	r3, #1
 800e4c8:	b29a      	uxth	r2, r3
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d1c8      	bne.n	800e46e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	9300      	str	r3, [sp, #0]
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	2140      	movs	r1, #64	@ 0x40
 800e4e6:	68f8      	ldr	r0, [r7, #12]
 800e4e8:	f001 fba4 	bl	800fc34 <UART_WaitOnFlagUntilTimeout>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d005      	beq.n	800e4fe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	2220      	movs	r2, #32
 800e4f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e4fa:	2303      	movs	r3, #3
 800e4fc:	e006      	b.n	800e50c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	2220      	movs	r2, #32
 800e502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e506:	2300      	movs	r3, #0
 800e508:	e000      	b.n	800e50c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e50a:	2302      	movs	r3, #2
  }
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3720      	adds	r7, #32
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b0ba      	sub	sp, #232	@ 0xe8
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	69db      	ldr	r3, [r3, #28]
 800e522:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	689b      	ldr	r3, [r3, #8]
 800e536:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e53a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e53e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e542:	4013      	ands	r3, r2
 800e544:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e548:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d11b      	bne.n	800e588 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e554:	f003 0320 	and.w	r3, r3, #32
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d015      	beq.n	800e588 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e55c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e560:	f003 0320 	and.w	r3, r3, #32
 800e564:	2b00      	cmp	r3, #0
 800e566:	d105      	bne.n	800e574 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e56c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e570:	2b00      	cmp	r3, #0
 800e572:	d009      	beq.n	800e588 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e578:	2b00      	cmp	r3, #0
 800e57a:	f000 8377 	beq.w	800ec6c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	4798      	blx	r3
      }
      return;
 800e586:	e371      	b.n	800ec6c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e588:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	f000 8123 	beq.w	800e7d8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e592:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e596:	4b8d      	ldr	r3, [pc, #564]	@ (800e7cc <HAL_UART_IRQHandler+0x2b8>)
 800e598:	4013      	ands	r3, r2
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d106      	bne.n	800e5ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e59e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e5a2:	4b8b      	ldr	r3, [pc, #556]	@ (800e7d0 <HAL_UART_IRQHandler+0x2bc>)
 800e5a4:	4013      	ands	r3, r2
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	f000 8116 	beq.w	800e7d8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e5ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5b0:	f003 0301 	and.w	r3, r3, #1
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d011      	beq.n	800e5dc <HAL_UART_IRQHandler+0xc8>
 800e5b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e5bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d00b      	beq.n	800e5dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	2201      	movs	r2, #1
 800e5ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5d2:	f043 0201 	orr.w	r2, r3, #1
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e5dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5e0:	f003 0302 	and.w	r3, r3, #2
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d011      	beq.n	800e60c <HAL_UART_IRQHandler+0xf8>
 800e5e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e5ec:	f003 0301 	and.w	r3, r3, #1
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d00b      	beq.n	800e60c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	2202      	movs	r2, #2
 800e5fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e602:	f043 0204 	orr.w	r2, r3, #4
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e60c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e610:	f003 0304 	and.w	r3, r3, #4
 800e614:	2b00      	cmp	r3, #0
 800e616:	d011      	beq.n	800e63c <HAL_UART_IRQHandler+0x128>
 800e618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e61c:	f003 0301 	and.w	r3, r3, #1
 800e620:	2b00      	cmp	r3, #0
 800e622:	d00b      	beq.n	800e63c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	2204      	movs	r2, #4
 800e62a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e632:	f043 0202 	orr.w	r2, r3, #2
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e63c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e640:	f003 0308 	and.w	r3, r3, #8
 800e644:	2b00      	cmp	r3, #0
 800e646:	d017      	beq.n	800e678 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e64c:	f003 0320 	and.w	r3, r3, #32
 800e650:	2b00      	cmp	r3, #0
 800e652:	d105      	bne.n	800e660 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e654:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e658:	4b5c      	ldr	r3, [pc, #368]	@ (800e7cc <HAL_UART_IRQHandler+0x2b8>)
 800e65a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d00b      	beq.n	800e678 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2208      	movs	r2, #8
 800e666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e66e:	f043 0208 	orr.w	r2, r3, #8
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e67c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e680:	2b00      	cmp	r3, #0
 800e682:	d012      	beq.n	800e6aa <HAL_UART_IRQHandler+0x196>
 800e684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e688:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d00c      	beq.n	800e6aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e698:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6a0:	f043 0220 	orr.w	r2, r3, #32
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	f000 82dd 	beq.w	800ec70 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e6b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e6ba:	f003 0320 	and.w	r3, r3, #32
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d013      	beq.n	800e6ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e6c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e6c6:	f003 0320 	and.w	r3, r3, #32
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d105      	bne.n	800e6da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e6ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e6d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d007      	beq.n	800e6ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d003      	beq.n	800e6ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	689b      	ldr	r3, [r3, #8]
 800e6fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6fe:	2b40      	cmp	r3, #64	@ 0x40
 800e700:	d005      	beq.n	800e70e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e706:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d054      	beq.n	800e7b8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f001 fc20 	bl	800ff54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	689b      	ldr	r3, [r3, #8]
 800e71a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e71e:	2b40      	cmp	r3, #64	@ 0x40
 800e720:	d146      	bne.n	800e7b0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	3308      	adds	r3, #8
 800e728:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e72c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e730:	e853 3f00 	ldrex	r3, [r3]
 800e734:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e738:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e73c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e740:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	3308      	adds	r3, #8
 800e74a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e74e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e752:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e756:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e75a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e75e:	e841 2300 	strex	r3, r2, [r1]
 800e762:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e766:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d1d9      	bne.n	800e722 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e774:	2b00      	cmp	r3, #0
 800e776:	d017      	beq.n	800e7a8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e77e:	4a15      	ldr	r2, [pc, #84]	@ (800e7d4 <HAL_UART_IRQHandler+0x2c0>)
 800e780:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e788:	4618      	mov	r0, r3
 800e78a:	f7f8 fa03 	bl	8006b94 <HAL_DMA_Abort_IT>
 800e78e:	4603      	mov	r3, r0
 800e790:	2b00      	cmp	r3, #0
 800e792:	d019      	beq.n	800e7c8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e79a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e79c:	687a      	ldr	r2, [r7, #4]
 800e79e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e7a2:	4610      	mov	r0, r2
 800e7a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7a6:	e00f      	b.n	800e7c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f000 fa81 	bl	800ecb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7ae:	e00b      	b.n	800e7c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 fa7d 	bl	800ecb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7b6:	e007      	b.n	800e7c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f000 fa79 	bl	800ecb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e7c6:	e253      	b.n	800ec70 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7c8:	bf00      	nop
    return;
 800e7ca:	e251      	b.n	800ec70 <HAL_UART_IRQHandler+0x75c>
 800e7cc:	10000001 	.word	0x10000001
 800e7d0:	04000120 	.word	0x04000120
 800e7d4:	08010021 	.word	0x08010021

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	f040 81e7 	bne.w	800ebb0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e7e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e7e6:	f003 0310 	and.w	r3, r3, #16
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	f000 81e0 	beq.w	800ebb0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e7f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7f4:	f003 0310 	and.w	r3, r3, #16
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	f000 81d9 	beq.w	800ebb0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	2210      	movs	r2, #16
 800e804:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	689b      	ldr	r3, [r3, #8]
 800e80c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e810:	2b40      	cmp	r3, #64	@ 0x40
 800e812:	f040 8151 	bne.w	800eab8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	4a96      	ldr	r2, [pc, #600]	@ (800ea78 <HAL_UART_IRQHandler+0x564>)
 800e820:	4293      	cmp	r3, r2
 800e822:	d068      	beq.n	800e8f6 <HAL_UART_IRQHandler+0x3e2>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	4a93      	ldr	r2, [pc, #588]	@ (800ea7c <HAL_UART_IRQHandler+0x568>)
 800e82e:	4293      	cmp	r3, r2
 800e830:	d061      	beq.n	800e8f6 <HAL_UART_IRQHandler+0x3e2>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	4a91      	ldr	r2, [pc, #580]	@ (800ea80 <HAL_UART_IRQHandler+0x56c>)
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d05a      	beq.n	800e8f6 <HAL_UART_IRQHandler+0x3e2>
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	4a8e      	ldr	r2, [pc, #568]	@ (800ea84 <HAL_UART_IRQHandler+0x570>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d053      	beq.n	800e8f6 <HAL_UART_IRQHandler+0x3e2>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	4a8c      	ldr	r2, [pc, #560]	@ (800ea88 <HAL_UART_IRQHandler+0x574>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d04c      	beq.n	800e8f6 <HAL_UART_IRQHandler+0x3e2>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	4a89      	ldr	r2, [pc, #548]	@ (800ea8c <HAL_UART_IRQHandler+0x578>)
 800e866:	4293      	cmp	r3, r2
 800e868:	d045      	beq.n	800e8f6 <HAL_UART_IRQHandler+0x3e2>
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	4a87      	ldr	r2, [pc, #540]	@ (800ea90 <HAL_UART_IRQHandler+0x57c>)
 800e874:	4293      	cmp	r3, r2
 800e876:	d03e      	beq.n	800e8f6 <HAL_UART_IRQHandler+0x3e2>
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4a84      	ldr	r2, [pc, #528]	@ (800ea94 <HAL_UART_IRQHandler+0x580>)
 800e882:	4293      	cmp	r3, r2
 800e884:	d037      	beq.n	800e8f6 <HAL_UART_IRQHandler+0x3e2>
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	4a82      	ldr	r2, [pc, #520]	@ (800ea98 <HAL_UART_IRQHandler+0x584>)
 800e890:	4293      	cmp	r3, r2
 800e892:	d030      	beq.n	800e8f6 <HAL_UART_IRQHandler+0x3e2>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	4a7f      	ldr	r2, [pc, #508]	@ (800ea9c <HAL_UART_IRQHandler+0x588>)
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d029      	beq.n	800e8f6 <HAL_UART_IRQHandler+0x3e2>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	4a7d      	ldr	r2, [pc, #500]	@ (800eaa0 <HAL_UART_IRQHandler+0x58c>)
 800e8ac:	4293      	cmp	r3, r2
 800e8ae:	d022      	beq.n	800e8f6 <HAL_UART_IRQHandler+0x3e2>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	4a7a      	ldr	r2, [pc, #488]	@ (800eaa4 <HAL_UART_IRQHandler+0x590>)
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d01b      	beq.n	800e8f6 <HAL_UART_IRQHandler+0x3e2>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	4a78      	ldr	r2, [pc, #480]	@ (800eaa8 <HAL_UART_IRQHandler+0x594>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d014      	beq.n	800e8f6 <HAL_UART_IRQHandler+0x3e2>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	4a75      	ldr	r2, [pc, #468]	@ (800eaac <HAL_UART_IRQHandler+0x598>)
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	d00d      	beq.n	800e8f6 <HAL_UART_IRQHandler+0x3e2>
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	4a73      	ldr	r2, [pc, #460]	@ (800eab0 <HAL_UART_IRQHandler+0x59c>)
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	d006      	beq.n	800e8f6 <HAL_UART_IRQHandler+0x3e2>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4a70      	ldr	r2, [pc, #448]	@ (800eab4 <HAL_UART_IRQHandler+0x5a0>)
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d106      	bne.n	800e904 <HAL_UART_IRQHandler+0x3f0>
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	685b      	ldr	r3, [r3, #4]
 800e900:	b29b      	uxth	r3, r3
 800e902:	e005      	b.n	800e910 <HAL_UART_IRQHandler+0x3fc>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	b29b      	uxth	r3, r3
 800e910:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e914:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e918:	2b00      	cmp	r3, #0
 800e91a:	f000 81ab 	beq.w	800ec74 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e924:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e928:	429a      	cmp	r2, r3
 800e92a:	f080 81a3 	bcs.w	800ec74 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e934:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e93e:	69db      	ldr	r3, [r3, #28]
 800e940:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e944:	f000 8087 	beq.w	800ea56 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e950:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e954:	e853 3f00 	ldrex	r3, [r3]
 800e958:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e95c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e960:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e964:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	461a      	mov	r2, r3
 800e96e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e972:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e976:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e97a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e97e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e982:	e841 2300 	strex	r3, r2, [r1]
 800e986:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e98a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d1da      	bne.n	800e948 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	3308      	adds	r3, #8
 800e998:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e99a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e99c:	e853 3f00 	ldrex	r3, [r3]
 800e9a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e9a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e9a4:	f023 0301 	bic.w	r3, r3, #1
 800e9a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	3308      	adds	r3, #8
 800e9b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e9b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e9ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e9be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e9c2:	e841 2300 	strex	r3, r2, [r1]
 800e9c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e9c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d1e1      	bne.n	800e992 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	3308      	adds	r3, #8
 800e9d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e9d8:	e853 3f00 	ldrex	r3, [r3]
 800e9dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e9de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e9e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e9e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	3308      	adds	r3, #8
 800e9ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e9f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e9f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e9f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e9fa:	e841 2300 	strex	r3, r2, [r1]
 800e9fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ea00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d1e3      	bne.n	800e9ce <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2220      	movs	r2, #32
 800ea0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2200      	movs	r2, #0
 800ea12:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea1c:	e853 3f00 	ldrex	r3, [r3]
 800ea20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ea22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea24:	f023 0310 	bic.w	r3, r3, #16
 800ea28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	461a      	mov	r2, r3
 800ea32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ea36:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ea38:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ea3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ea3e:	e841 2300 	strex	r3, r2, [r1]
 800ea42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ea44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d1e4      	bne.n	800ea14 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7f7 fd81 	bl	8006558 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2202      	movs	r2, #2
 800ea5a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ea68:	b29b      	uxth	r3, r3
 800ea6a:	1ad3      	subs	r3, r2, r3
 800ea6c:	b29b      	uxth	r3, r3
 800ea6e:	4619      	mov	r1, r3
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f7f2 ff7b 	bl	800196c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ea76:	e0fd      	b.n	800ec74 <HAL_UART_IRQHandler+0x760>
 800ea78:	40020010 	.word	0x40020010
 800ea7c:	40020028 	.word	0x40020028
 800ea80:	40020040 	.word	0x40020040
 800ea84:	40020058 	.word	0x40020058
 800ea88:	40020070 	.word	0x40020070
 800ea8c:	40020088 	.word	0x40020088
 800ea90:	400200a0 	.word	0x400200a0
 800ea94:	400200b8 	.word	0x400200b8
 800ea98:	40020410 	.word	0x40020410
 800ea9c:	40020428 	.word	0x40020428
 800eaa0:	40020440 	.word	0x40020440
 800eaa4:	40020458 	.word	0x40020458
 800eaa8:	40020470 	.word	0x40020470
 800eaac:	40020488 	.word	0x40020488
 800eab0:	400204a0 	.word	0x400204a0
 800eab4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eac4:	b29b      	uxth	r3, r3
 800eac6:	1ad3      	subs	r3, r2, r3
 800eac8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ead2:	b29b      	uxth	r3, r3
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	f000 80cf 	beq.w	800ec78 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800eada:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800eade:	2b00      	cmp	r3, #0
 800eae0:	f000 80ca 	beq.w	800ec78 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaec:	e853 3f00 	ldrex	r3, [r3]
 800eaf0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800eaf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eaf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eaf8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	461a      	mov	r2, r3
 800eb02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800eb06:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb08:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eb0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eb0e:	e841 2300 	strex	r3, r2, [r1]
 800eb12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800eb14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d1e4      	bne.n	800eae4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	3308      	adds	r3, #8
 800eb20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb24:	e853 3f00 	ldrex	r3, [r3]
 800eb28:	623b      	str	r3, [r7, #32]
   return(result);
 800eb2a:	6a3a      	ldr	r2, [r7, #32]
 800eb2c:	4b55      	ldr	r3, [pc, #340]	@ (800ec84 <HAL_UART_IRQHandler+0x770>)
 800eb2e:	4013      	ands	r3, r2
 800eb30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	3308      	adds	r3, #8
 800eb3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800eb3e:	633a      	str	r2, [r7, #48]	@ 0x30
 800eb40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eb44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb46:	e841 2300 	strex	r3, r2, [r1]
 800eb4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800eb4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d1e3      	bne.n	800eb1a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2220      	movs	r2, #32
 800eb56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2200      	movs	r2, #0
 800eb64:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	e853 3f00 	ldrex	r3, [r3]
 800eb72:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	f023 0310 	bic.w	r3, r3, #16
 800eb7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	461a      	mov	r2, r3
 800eb84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800eb88:	61fb      	str	r3, [r7, #28]
 800eb8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb8c:	69b9      	ldr	r1, [r7, #24]
 800eb8e:	69fa      	ldr	r2, [r7, #28]
 800eb90:	e841 2300 	strex	r3, r2, [r1]
 800eb94:	617b      	str	r3, [r7, #20]
   return(result);
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d1e4      	bne.n	800eb66 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2202      	movs	r2, #2
 800eba0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800eba2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800eba6:	4619      	mov	r1, r3
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f7f2 fedf 	bl	800196c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ebae:	e063      	b.n	800ec78 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ebb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d00e      	beq.n	800ebda <HAL_UART_IRQHandler+0x6c6>
 800ebbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ebc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d008      	beq.n	800ebda <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ebd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f001 ff82 	bl	8010adc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ebd8:	e051      	b.n	800ec7e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ebda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d014      	beq.n	800ec10 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ebe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ebea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d105      	bne.n	800ebfe <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ebf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ebf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d008      	beq.n	800ec10 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d03a      	beq.n	800ec7c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	4798      	blx	r3
    }
    return;
 800ec0e:	e035      	b.n	800ec7c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ec10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d009      	beq.n	800ec30 <HAL_UART_IRQHandler+0x71c>
 800ec1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d003      	beq.n	800ec30 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f001 fa0f 	bl	801004c <UART_EndTransmit_IT>
    return;
 800ec2e:	e026      	b.n	800ec7e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ec30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d009      	beq.n	800ec50 <HAL_UART_IRQHandler+0x73c>
 800ec3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec40:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d003      	beq.n	800ec50 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f001 ff5b 	bl	8010b04 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec4e:	e016      	b.n	800ec7e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ec50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d010      	beq.n	800ec7e <HAL_UART_IRQHandler+0x76a>
 800ec5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	da0c      	bge.n	800ec7e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f001 ff43 	bl	8010af0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec6a:	e008      	b.n	800ec7e <HAL_UART_IRQHandler+0x76a>
      return;
 800ec6c:	bf00      	nop
 800ec6e:	e006      	b.n	800ec7e <HAL_UART_IRQHandler+0x76a>
    return;
 800ec70:	bf00      	nop
 800ec72:	e004      	b.n	800ec7e <HAL_UART_IRQHandler+0x76a>
      return;
 800ec74:	bf00      	nop
 800ec76:	e002      	b.n	800ec7e <HAL_UART_IRQHandler+0x76a>
      return;
 800ec78:	bf00      	nop
 800ec7a:	e000      	b.n	800ec7e <HAL_UART_IRQHandler+0x76a>
    return;
 800ec7c:	bf00      	nop
  }
}
 800ec7e:	37e8      	adds	r7, #232	@ 0xe8
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}
 800ec84:	effffffe 	.word	0xeffffffe

0800ec88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b083      	sub	sp, #12
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ec90:	bf00      	nop
 800ec92:	370c      	adds	r7, #12
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr

0800ec9c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b083      	sub	sp, #12
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800eca4:	bf00      	nop
 800eca6:	370c      	adds	r7, #12
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecae:	4770      	bx	lr

0800ecb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ecb0:	b480      	push	{r7}
 800ecb2:	b083      	sub	sp, #12
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ecb8:	bf00      	nop
 800ecba:	370c      	adds	r7, #12
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr

0800ecc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ecc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ecc8:	b092      	sub	sp, #72	@ 0x48
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	689a      	ldr	r2, [r3, #8]
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	691b      	ldr	r3, [r3, #16]
 800ecdc:	431a      	orrs	r2, r3
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	695b      	ldr	r3, [r3, #20]
 800ece2:	431a      	orrs	r2, r3
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	69db      	ldr	r3, [r3, #28]
 800ece8:	4313      	orrs	r3, r2
 800ecea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	681a      	ldr	r2, [r3, #0]
 800ecf2:	4bbe      	ldr	r3, [pc, #760]	@ (800efec <UART_SetConfig+0x328>)
 800ecf4:	4013      	ands	r3, r2
 800ecf6:	697a      	ldr	r2, [r7, #20]
 800ecf8:	6812      	ldr	r2, [r2, #0]
 800ecfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ecfc:	430b      	orrs	r3, r1
 800ecfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	68da      	ldr	r2, [r3, #12]
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	430a      	orrs	r2, r1
 800ed14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	699b      	ldr	r3, [r3, #24]
 800ed1a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	4ab3      	ldr	r2, [pc, #716]	@ (800eff0 <UART_SetConfig+0x32c>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d004      	beq.n	800ed30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	6a1b      	ldr	r3, [r3, #32]
 800ed2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ed2c:	4313      	orrs	r3, r2
 800ed2e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	689a      	ldr	r2, [r3, #8]
 800ed36:	4baf      	ldr	r3, [pc, #700]	@ (800eff4 <UART_SetConfig+0x330>)
 800ed38:	4013      	ands	r3, r2
 800ed3a:	697a      	ldr	r2, [r7, #20]
 800ed3c:	6812      	ldr	r2, [r2, #0]
 800ed3e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ed40:	430b      	orrs	r3, r1
 800ed42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed4a:	f023 010f 	bic.w	r1, r3, #15
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	430a      	orrs	r2, r1
 800ed58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	4aa6      	ldr	r2, [pc, #664]	@ (800eff8 <UART_SetConfig+0x334>)
 800ed60:	4293      	cmp	r3, r2
 800ed62:	d177      	bne.n	800ee54 <UART_SetConfig+0x190>
 800ed64:	4ba5      	ldr	r3, [pc, #660]	@ (800effc <UART_SetConfig+0x338>)
 800ed66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ed6c:	2b28      	cmp	r3, #40	@ 0x28
 800ed6e:	d86d      	bhi.n	800ee4c <UART_SetConfig+0x188>
 800ed70:	a201      	add	r2, pc, #4	@ (adr r2, 800ed78 <UART_SetConfig+0xb4>)
 800ed72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed76:	bf00      	nop
 800ed78:	0800ee1d 	.word	0x0800ee1d
 800ed7c:	0800ee4d 	.word	0x0800ee4d
 800ed80:	0800ee4d 	.word	0x0800ee4d
 800ed84:	0800ee4d 	.word	0x0800ee4d
 800ed88:	0800ee4d 	.word	0x0800ee4d
 800ed8c:	0800ee4d 	.word	0x0800ee4d
 800ed90:	0800ee4d 	.word	0x0800ee4d
 800ed94:	0800ee4d 	.word	0x0800ee4d
 800ed98:	0800ee25 	.word	0x0800ee25
 800ed9c:	0800ee4d 	.word	0x0800ee4d
 800eda0:	0800ee4d 	.word	0x0800ee4d
 800eda4:	0800ee4d 	.word	0x0800ee4d
 800eda8:	0800ee4d 	.word	0x0800ee4d
 800edac:	0800ee4d 	.word	0x0800ee4d
 800edb0:	0800ee4d 	.word	0x0800ee4d
 800edb4:	0800ee4d 	.word	0x0800ee4d
 800edb8:	0800ee2d 	.word	0x0800ee2d
 800edbc:	0800ee4d 	.word	0x0800ee4d
 800edc0:	0800ee4d 	.word	0x0800ee4d
 800edc4:	0800ee4d 	.word	0x0800ee4d
 800edc8:	0800ee4d 	.word	0x0800ee4d
 800edcc:	0800ee4d 	.word	0x0800ee4d
 800edd0:	0800ee4d 	.word	0x0800ee4d
 800edd4:	0800ee4d 	.word	0x0800ee4d
 800edd8:	0800ee35 	.word	0x0800ee35
 800eddc:	0800ee4d 	.word	0x0800ee4d
 800ede0:	0800ee4d 	.word	0x0800ee4d
 800ede4:	0800ee4d 	.word	0x0800ee4d
 800ede8:	0800ee4d 	.word	0x0800ee4d
 800edec:	0800ee4d 	.word	0x0800ee4d
 800edf0:	0800ee4d 	.word	0x0800ee4d
 800edf4:	0800ee4d 	.word	0x0800ee4d
 800edf8:	0800ee3d 	.word	0x0800ee3d
 800edfc:	0800ee4d 	.word	0x0800ee4d
 800ee00:	0800ee4d 	.word	0x0800ee4d
 800ee04:	0800ee4d 	.word	0x0800ee4d
 800ee08:	0800ee4d 	.word	0x0800ee4d
 800ee0c:	0800ee4d 	.word	0x0800ee4d
 800ee10:	0800ee4d 	.word	0x0800ee4d
 800ee14:	0800ee4d 	.word	0x0800ee4d
 800ee18:	0800ee45 	.word	0x0800ee45
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee22:	e326      	b.n	800f472 <UART_SetConfig+0x7ae>
 800ee24:	2304      	movs	r3, #4
 800ee26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee2a:	e322      	b.n	800f472 <UART_SetConfig+0x7ae>
 800ee2c:	2308      	movs	r3, #8
 800ee2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee32:	e31e      	b.n	800f472 <UART_SetConfig+0x7ae>
 800ee34:	2310      	movs	r3, #16
 800ee36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee3a:	e31a      	b.n	800f472 <UART_SetConfig+0x7ae>
 800ee3c:	2320      	movs	r3, #32
 800ee3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee42:	e316      	b.n	800f472 <UART_SetConfig+0x7ae>
 800ee44:	2340      	movs	r3, #64	@ 0x40
 800ee46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee4a:	e312      	b.n	800f472 <UART_SetConfig+0x7ae>
 800ee4c:	2380      	movs	r3, #128	@ 0x80
 800ee4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee52:	e30e      	b.n	800f472 <UART_SetConfig+0x7ae>
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	4a69      	ldr	r2, [pc, #420]	@ (800f000 <UART_SetConfig+0x33c>)
 800ee5a:	4293      	cmp	r3, r2
 800ee5c:	d130      	bne.n	800eec0 <UART_SetConfig+0x1fc>
 800ee5e:	4b67      	ldr	r3, [pc, #412]	@ (800effc <UART_SetConfig+0x338>)
 800ee60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee62:	f003 0307 	and.w	r3, r3, #7
 800ee66:	2b05      	cmp	r3, #5
 800ee68:	d826      	bhi.n	800eeb8 <UART_SetConfig+0x1f4>
 800ee6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ee70 <UART_SetConfig+0x1ac>)
 800ee6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee70:	0800ee89 	.word	0x0800ee89
 800ee74:	0800ee91 	.word	0x0800ee91
 800ee78:	0800ee99 	.word	0x0800ee99
 800ee7c:	0800eea1 	.word	0x0800eea1
 800ee80:	0800eea9 	.word	0x0800eea9
 800ee84:	0800eeb1 	.word	0x0800eeb1
 800ee88:	2300      	movs	r3, #0
 800ee8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee8e:	e2f0      	b.n	800f472 <UART_SetConfig+0x7ae>
 800ee90:	2304      	movs	r3, #4
 800ee92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee96:	e2ec      	b.n	800f472 <UART_SetConfig+0x7ae>
 800ee98:	2308      	movs	r3, #8
 800ee9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee9e:	e2e8      	b.n	800f472 <UART_SetConfig+0x7ae>
 800eea0:	2310      	movs	r3, #16
 800eea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eea6:	e2e4      	b.n	800f472 <UART_SetConfig+0x7ae>
 800eea8:	2320      	movs	r3, #32
 800eeaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeae:	e2e0      	b.n	800f472 <UART_SetConfig+0x7ae>
 800eeb0:	2340      	movs	r3, #64	@ 0x40
 800eeb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeb6:	e2dc      	b.n	800f472 <UART_SetConfig+0x7ae>
 800eeb8:	2380      	movs	r3, #128	@ 0x80
 800eeba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eebe:	e2d8      	b.n	800f472 <UART_SetConfig+0x7ae>
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	4a4f      	ldr	r2, [pc, #316]	@ (800f004 <UART_SetConfig+0x340>)
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d130      	bne.n	800ef2c <UART_SetConfig+0x268>
 800eeca:	4b4c      	ldr	r3, [pc, #304]	@ (800effc <UART_SetConfig+0x338>)
 800eecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eece:	f003 0307 	and.w	r3, r3, #7
 800eed2:	2b05      	cmp	r3, #5
 800eed4:	d826      	bhi.n	800ef24 <UART_SetConfig+0x260>
 800eed6:	a201      	add	r2, pc, #4	@ (adr r2, 800eedc <UART_SetConfig+0x218>)
 800eed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eedc:	0800eef5 	.word	0x0800eef5
 800eee0:	0800eefd 	.word	0x0800eefd
 800eee4:	0800ef05 	.word	0x0800ef05
 800eee8:	0800ef0d 	.word	0x0800ef0d
 800eeec:	0800ef15 	.word	0x0800ef15
 800eef0:	0800ef1d 	.word	0x0800ef1d
 800eef4:	2300      	movs	r3, #0
 800eef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eefa:	e2ba      	b.n	800f472 <UART_SetConfig+0x7ae>
 800eefc:	2304      	movs	r3, #4
 800eefe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef02:	e2b6      	b.n	800f472 <UART_SetConfig+0x7ae>
 800ef04:	2308      	movs	r3, #8
 800ef06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef0a:	e2b2      	b.n	800f472 <UART_SetConfig+0x7ae>
 800ef0c:	2310      	movs	r3, #16
 800ef0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef12:	e2ae      	b.n	800f472 <UART_SetConfig+0x7ae>
 800ef14:	2320      	movs	r3, #32
 800ef16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef1a:	e2aa      	b.n	800f472 <UART_SetConfig+0x7ae>
 800ef1c:	2340      	movs	r3, #64	@ 0x40
 800ef1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef22:	e2a6      	b.n	800f472 <UART_SetConfig+0x7ae>
 800ef24:	2380      	movs	r3, #128	@ 0x80
 800ef26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef2a:	e2a2      	b.n	800f472 <UART_SetConfig+0x7ae>
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	4a35      	ldr	r2, [pc, #212]	@ (800f008 <UART_SetConfig+0x344>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d130      	bne.n	800ef98 <UART_SetConfig+0x2d4>
 800ef36:	4b31      	ldr	r3, [pc, #196]	@ (800effc <UART_SetConfig+0x338>)
 800ef38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef3a:	f003 0307 	and.w	r3, r3, #7
 800ef3e:	2b05      	cmp	r3, #5
 800ef40:	d826      	bhi.n	800ef90 <UART_SetConfig+0x2cc>
 800ef42:	a201      	add	r2, pc, #4	@ (adr r2, 800ef48 <UART_SetConfig+0x284>)
 800ef44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef48:	0800ef61 	.word	0x0800ef61
 800ef4c:	0800ef69 	.word	0x0800ef69
 800ef50:	0800ef71 	.word	0x0800ef71
 800ef54:	0800ef79 	.word	0x0800ef79
 800ef58:	0800ef81 	.word	0x0800ef81
 800ef5c:	0800ef89 	.word	0x0800ef89
 800ef60:	2300      	movs	r3, #0
 800ef62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef66:	e284      	b.n	800f472 <UART_SetConfig+0x7ae>
 800ef68:	2304      	movs	r3, #4
 800ef6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef6e:	e280      	b.n	800f472 <UART_SetConfig+0x7ae>
 800ef70:	2308      	movs	r3, #8
 800ef72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef76:	e27c      	b.n	800f472 <UART_SetConfig+0x7ae>
 800ef78:	2310      	movs	r3, #16
 800ef7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef7e:	e278      	b.n	800f472 <UART_SetConfig+0x7ae>
 800ef80:	2320      	movs	r3, #32
 800ef82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef86:	e274      	b.n	800f472 <UART_SetConfig+0x7ae>
 800ef88:	2340      	movs	r3, #64	@ 0x40
 800ef8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef8e:	e270      	b.n	800f472 <UART_SetConfig+0x7ae>
 800ef90:	2380      	movs	r3, #128	@ 0x80
 800ef92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef96:	e26c      	b.n	800f472 <UART_SetConfig+0x7ae>
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	4a1b      	ldr	r2, [pc, #108]	@ (800f00c <UART_SetConfig+0x348>)
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	d142      	bne.n	800f028 <UART_SetConfig+0x364>
 800efa2:	4b16      	ldr	r3, [pc, #88]	@ (800effc <UART_SetConfig+0x338>)
 800efa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efa6:	f003 0307 	and.w	r3, r3, #7
 800efaa:	2b05      	cmp	r3, #5
 800efac:	d838      	bhi.n	800f020 <UART_SetConfig+0x35c>
 800efae:	a201      	add	r2, pc, #4	@ (adr r2, 800efb4 <UART_SetConfig+0x2f0>)
 800efb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efb4:	0800efcd 	.word	0x0800efcd
 800efb8:	0800efd5 	.word	0x0800efd5
 800efbc:	0800efdd 	.word	0x0800efdd
 800efc0:	0800efe5 	.word	0x0800efe5
 800efc4:	0800f011 	.word	0x0800f011
 800efc8:	0800f019 	.word	0x0800f019
 800efcc:	2300      	movs	r3, #0
 800efce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efd2:	e24e      	b.n	800f472 <UART_SetConfig+0x7ae>
 800efd4:	2304      	movs	r3, #4
 800efd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efda:	e24a      	b.n	800f472 <UART_SetConfig+0x7ae>
 800efdc:	2308      	movs	r3, #8
 800efde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efe2:	e246      	b.n	800f472 <UART_SetConfig+0x7ae>
 800efe4:	2310      	movs	r3, #16
 800efe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efea:	e242      	b.n	800f472 <UART_SetConfig+0x7ae>
 800efec:	cfff69f3 	.word	0xcfff69f3
 800eff0:	58000c00 	.word	0x58000c00
 800eff4:	11fff4ff 	.word	0x11fff4ff
 800eff8:	40011000 	.word	0x40011000
 800effc:	58024400 	.word	0x58024400
 800f000:	40004400 	.word	0x40004400
 800f004:	40004800 	.word	0x40004800
 800f008:	40004c00 	.word	0x40004c00
 800f00c:	40005000 	.word	0x40005000
 800f010:	2320      	movs	r3, #32
 800f012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f016:	e22c      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f018:	2340      	movs	r3, #64	@ 0x40
 800f01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f01e:	e228      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f020:	2380      	movs	r3, #128	@ 0x80
 800f022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f026:	e224      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	4ab1      	ldr	r2, [pc, #708]	@ (800f2f4 <UART_SetConfig+0x630>)
 800f02e:	4293      	cmp	r3, r2
 800f030:	d176      	bne.n	800f120 <UART_SetConfig+0x45c>
 800f032:	4bb1      	ldr	r3, [pc, #708]	@ (800f2f8 <UART_SetConfig+0x634>)
 800f034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f036:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f03a:	2b28      	cmp	r3, #40	@ 0x28
 800f03c:	d86c      	bhi.n	800f118 <UART_SetConfig+0x454>
 800f03e:	a201      	add	r2, pc, #4	@ (adr r2, 800f044 <UART_SetConfig+0x380>)
 800f040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f044:	0800f0e9 	.word	0x0800f0e9
 800f048:	0800f119 	.word	0x0800f119
 800f04c:	0800f119 	.word	0x0800f119
 800f050:	0800f119 	.word	0x0800f119
 800f054:	0800f119 	.word	0x0800f119
 800f058:	0800f119 	.word	0x0800f119
 800f05c:	0800f119 	.word	0x0800f119
 800f060:	0800f119 	.word	0x0800f119
 800f064:	0800f0f1 	.word	0x0800f0f1
 800f068:	0800f119 	.word	0x0800f119
 800f06c:	0800f119 	.word	0x0800f119
 800f070:	0800f119 	.word	0x0800f119
 800f074:	0800f119 	.word	0x0800f119
 800f078:	0800f119 	.word	0x0800f119
 800f07c:	0800f119 	.word	0x0800f119
 800f080:	0800f119 	.word	0x0800f119
 800f084:	0800f0f9 	.word	0x0800f0f9
 800f088:	0800f119 	.word	0x0800f119
 800f08c:	0800f119 	.word	0x0800f119
 800f090:	0800f119 	.word	0x0800f119
 800f094:	0800f119 	.word	0x0800f119
 800f098:	0800f119 	.word	0x0800f119
 800f09c:	0800f119 	.word	0x0800f119
 800f0a0:	0800f119 	.word	0x0800f119
 800f0a4:	0800f101 	.word	0x0800f101
 800f0a8:	0800f119 	.word	0x0800f119
 800f0ac:	0800f119 	.word	0x0800f119
 800f0b0:	0800f119 	.word	0x0800f119
 800f0b4:	0800f119 	.word	0x0800f119
 800f0b8:	0800f119 	.word	0x0800f119
 800f0bc:	0800f119 	.word	0x0800f119
 800f0c0:	0800f119 	.word	0x0800f119
 800f0c4:	0800f109 	.word	0x0800f109
 800f0c8:	0800f119 	.word	0x0800f119
 800f0cc:	0800f119 	.word	0x0800f119
 800f0d0:	0800f119 	.word	0x0800f119
 800f0d4:	0800f119 	.word	0x0800f119
 800f0d8:	0800f119 	.word	0x0800f119
 800f0dc:	0800f119 	.word	0x0800f119
 800f0e0:	0800f119 	.word	0x0800f119
 800f0e4:	0800f111 	.word	0x0800f111
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0ee:	e1c0      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f0f0:	2304      	movs	r3, #4
 800f0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0f6:	e1bc      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f0f8:	2308      	movs	r3, #8
 800f0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0fe:	e1b8      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f100:	2310      	movs	r3, #16
 800f102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f106:	e1b4      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f108:	2320      	movs	r3, #32
 800f10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f10e:	e1b0      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f110:	2340      	movs	r3, #64	@ 0x40
 800f112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f116:	e1ac      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f118:	2380      	movs	r3, #128	@ 0x80
 800f11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f11e:	e1a8      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	4a75      	ldr	r2, [pc, #468]	@ (800f2fc <UART_SetConfig+0x638>)
 800f126:	4293      	cmp	r3, r2
 800f128:	d130      	bne.n	800f18c <UART_SetConfig+0x4c8>
 800f12a:	4b73      	ldr	r3, [pc, #460]	@ (800f2f8 <UART_SetConfig+0x634>)
 800f12c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f12e:	f003 0307 	and.w	r3, r3, #7
 800f132:	2b05      	cmp	r3, #5
 800f134:	d826      	bhi.n	800f184 <UART_SetConfig+0x4c0>
 800f136:	a201      	add	r2, pc, #4	@ (adr r2, 800f13c <UART_SetConfig+0x478>)
 800f138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f13c:	0800f155 	.word	0x0800f155
 800f140:	0800f15d 	.word	0x0800f15d
 800f144:	0800f165 	.word	0x0800f165
 800f148:	0800f16d 	.word	0x0800f16d
 800f14c:	0800f175 	.word	0x0800f175
 800f150:	0800f17d 	.word	0x0800f17d
 800f154:	2300      	movs	r3, #0
 800f156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f15a:	e18a      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f15c:	2304      	movs	r3, #4
 800f15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f162:	e186      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f164:	2308      	movs	r3, #8
 800f166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f16a:	e182      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f16c:	2310      	movs	r3, #16
 800f16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f172:	e17e      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f174:	2320      	movs	r3, #32
 800f176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f17a:	e17a      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f17c:	2340      	movs	r3, #64	@ 0x40
 800f17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f182:	e176      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f184:	2380      	movs	r3, #128	@ 0x80
 800f186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f18a:	e172      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	4a5b      	ldr	r2, [pc, #364]	@ (800f300 <UART_SetConfig+0x63c>)
 800f192:	4293      	cmp	r3, r2
 800f194:	d130      	bne.n	800f1f8 <UART_SetConfig+0x534>
 800f196:	4b58      	ldr	r3, [pc, #352]	@ (800f2f8 <UART_SetConfig+0x634>)
 800f198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f19a:	f003 0307 	and.w	r3, r3, #7
 800f19e:	2b05      	cmp	r3, #5
 800f1a0:	d826      	bhi.n	800f1f0 <UART_SetConfig+0x52c>
 800f1a2:	a201      	add	r2, pc, #4	@ (adr r2, 800f1a8 <UART_SetConfig+0x4e4>)
 800f1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1a8:	0800f1c1 	.word	0x0800f1c1
 800f1ac:	0800f1c9 	.word	0x0800f1c9
 800f1b0:	0800f1d1 	.word	0x0800f1d1
 800f1b4:	0800f1d9 	.word	0x0800f1d9
 800f1b8:	0800f1e1 	.word	0x0800f1e1
 800f1bc:	0800f1e9 	.word	0x0800f1e9
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1c6:	e154      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f1c8:	2304      	movs	r3, #4
 800f1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1ce:	e150      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f1d0:	2308      	movs	r3, #8
 800f1d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1d6:	e14c      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f1d8:	2310      	movs	r3, #16
 800f1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1de:	e148      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f1e0:	2320      	movs	r3, #32
 800f1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1e6:	e144      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f1e8:	2340      	movs	r3, #64	@ 0x40
 800f1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1ee:	e140      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f1f0:	2380      	movs	r3, #128	@ 0x80
 800f1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1f6:	e13c      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	4a41      	ldr	r2, [pc, #260]	@ (800f304 <UART_SetConfig+0x640>)
 800f1fe:	4293      	cmp	r3, r2
 800f200:	f040 8082 	bne.w	800f308 <UART_SetConfig+0x644>
 800f204:	4b3c      	ldr	r3, [pc, #240]	@ (800f2f8 <UART_SetConfig+0x634>)
 800f206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f208:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f20c:	2b28      	cmp	r3, #40	@ 0x28
 800f20e:	d86d      	bhi.n	800f2ec <UART_SetConfig+0x628>
 800f210:	a201      	add	r2, pc, #4	@ (adr r2, 800f218 <UART_SetConfig+0x554>)
 800f212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f216:	bf00      	nop
 800f218:	0800f2bd 	.word	0x0800f2bd
 800f21c:	0800f2ed 	.word	0x0800f2ed
 800f220:	0800f2ed 	.word	0x0800f2ed
 800f224:	0800f2ed 	.word	0x0800f2ed
 800f228:	0800f2ed 	.word	0x0800f2ed
 800f22c:	0800f2ed 	.word	0x0800f2ed
 800f230:	0800f2ed 	.word	0x0800f2ed
 800f234:	0800f2ed 	.word	0x0800f2ed
 800f238:	0800f2c5 	.word	0x0800f2c5
 800f23c:	0800f2ed 	.word	0x0800f2ed
 800f240:	0800f2ed 	.word	0x0800f2ed
 800f244:	0800f2ed 	.word	0x0800f2ed
 800f248:	0800f2ed 	.word	0x0800f2ed
 800f24c:	0800f2ed 	.word	0x0800f2ed
 800f250:	0800f2ed 	.word	0x0800f2ed
 800f254:	0800f2ed 	.word	0x0800f2ed
 800f258:	0800f2cd 	.word	0x0800f2cd
 800f25c:	0800f2ed 	.word	0x0800f2ed
 800f260:	0800f2ed 	.word	0x0800f2ed
 800f264:	0800f2ed 	.word	0x0800f2ed
 800f268:	0800f2ed 	.word	0x0800f2ed
 800f26c:	0800f2ed 	.word	0x0800f2ed
 800f270:	0800f2ed 	.word	0x0800f2ed
 800f274:	0800f2ed 	.word	0x0800f2ed
 800f278:	0800f2d5 	.word	0x0800f2d5
 800f27c:	0800f2ed 	.word	0x0800f2ed
 800f280:	0800f2ed 	.word	0x0800f2ed
 800f284:	0800f2ed 	.word	0x0800f2ed
 800f288:	0800f2ed 	.word	0x0800f2ed
 800f28c:	0800f2ed 	.word	0x0800f2ed
 800f290:	0800f2ed 	.word	0x0800f2ed
 800f294:	0800f2ed 	.word	0x0800f2ed
 800f298:	0800f2dd 	.word	0x0800f2dd
 800f29c:	0800f2ed 	.word	0x0800f2ed
 800f2a0:	0800f2ed 	.word	0x0800f2ed
 800f2a4:	0800f2ed 	.word	0x0800f2ed
 800f2a8:	0800f2ed 	.word	0x0800f2ed
 800f2ac:	0800f2ed 	.word	0x0800f2ed
 800f2b0:	0800f2ed 	.word	0x0800f2ed
 800f2b4:	0800f2ed 	.word	0x0800f2ed
 800f2b8:	0800f2e5 	.word	0x0800f2e5
 800f2bc:	2301      	movs	r3, #1
 800f2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2c2:	e0d6      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f2c4:	2304      	movs	r3, #4
 800f2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2ca:	e0d2      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f2cc:	2308      	movs	r3, #8
 800f2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2d2:	e0ce      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f2d4:	2310      	movs	r3, #16
 800f2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2da:	e0ca      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f2dc:	2320      	movs	r3, #32
 800f2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2e2:	e0c6      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f2e4:	2340      	movs	r3, #64	@ 0x40
 800f2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2ea:	e0c2      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f2ec:	2380      	movs	r3, #128	@ 0x80
 800f2ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2f2:	e0be      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f2f4:	40011400 	.word	0x40011400
 800f2f8:	58024400 	.word	0x58024400
 800f2fc:	40007800 	.word	0x40007800
 800f300:	40007c00 	.word	0x40007c00
 800f304:	40011800 	.word	0x40011800
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	4aad      	ldr	r2, [pc, #692]	@ (800f5c4 <UART_SetConfig+0x900>)
 800f30e:	4293      	cmp	r3, r2
 800f310:	d176      	bne.n	800f400 <UART_SetConfig+0x73c>
 800f312:	4bad      	ldr	r3, [pc, #692]	@ (800f5c8 <UART_SetConfig+0x904>)
 800f314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f316:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f31a:	2b28      	cmp	r3, #40	@ 0x28
 800f31c:	d86c      	bhi.n	800f3f8 <UART_SetConfig+0x734>
 800f31e:	a201      	add	r2, pc, #4	@ (adr r2, 800f324 <UART_SetConfig+0x660>)
 800f320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f324:	0800f3c9 	.word	0x0800f3c9
 800f328:	0800f3f9 	.word	0x0800f3f9
 800f32c:	0800f3f9 	.word	0x0800f3f9
 800f330:	0800f3f9 	.word	0x0800f3f9
 800f334:	0800f3f9 	.word	0x0800f3f9
 800f338:	0800f3f9 	.word	0x0800f3f9
 800f33c:	0800f3f9 	.word	0x0800f3f9
 800f340:	0800f3f9 	.word	0x0800f3f9
 800f344:	0800f3d1 	.word	0x0800f3d1
 800f348:	0800f3f9 	.word	0x0800f3f9
 800f34c:	0800f3f9 	.word	0x0800f3f9
 800f350:	0800f3f9 	.word	0x0800f3f9
 800f354:	0800f3f9 	.word	0x0800f3f9
 800f358:	0800f3f9 	.word	0x0800f3f9
 800f35c:	0800f3f9 	.word	0x0800f3f9
 800f360:	0800f3f9 	.word	0x0800f3f9
 800f364:	0800f3d9 	.word	0x0800f3d9
 800f368:	0800f3f9 	.word	0x0800f3f9
 800f36c:	0800f3f9 	.word	0x0800f3f9
 800f370:	0800f3f9 	.word	0x0800f3f9
 800f374:	0800f3f9 	.word	0x0800f3f9
 800f378:	0800f3f9 	.word	0x0800f3f9
 800f37c:	0800f3f9 	.word	0x0800f3f9
 800f380:	0800f3f9 	.word	0x0800f3f9
 800f384:	0800f3e1 	.word	0x0800f3e1
 800f388:	0800f3f9 	.word	0x0800f3f9
 800f38c:	0800f3f9 	.word	0x0800f3f9
 800f390:	0800f3f9 	.word	0x0800f3f9
 800f394:	0800f3f9 	.word	0x0800f3f9
 800f398:	0800f3f9 	.word	0x0800f3f9
 800f39c:	0800f3f9 	.word	0x0800f3f9
 800f3a0:	0800f3f9 	.word	0x0800f3f9
 800f3a4:	0800f3e9 	.word	0x0800f3e9
 800f3a8:	0800f3f9 	.word	0x0800f3f9
 800f3ac:	0800f3f9 	.word	0x0800f3f9
 800f3b0:	0800f3f9 	.word	0x0800f3f9
 800f3b4:	0800f3f9 	.word	0x0800f3f9
 800f3b8:	0800f3f9 	.word	0x0800f3f9
 800f3bc:	0800f3f9 	.word	0x0800f3f9
 800f3c0:	0800f3f9 	.word	0x0800f3f9
 800f3c4:	0800f3f1 	.word	0x0800f3f1
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3ce:	e050      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f3d0:	2304      	movs	r3, #4
 800f3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3d6:	e04c      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f3d8:	2308      	movs	r3, #8
 800f3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3de:	e048      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f3e0:	2310      	movs	r3, #16
 800f3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3e6:	e044      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f3e8:	2320      	movs	r3, #32
 800f3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3ee:	e040      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f3f0:	2340      	movs	r3, #64	@ 0x40
 800f3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3f6:	e03c      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f3f8:	2380      	movs	r3, #128	@ 0x80
 800f3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3fe:	e038      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	4a71      	ldr	r2, [pc, #452]	@ (800f5cc <UART_SetConfig+0x908>)
 800f406:	4293      	cmp	r3, r2
 800f408:	d130      	bne.n	800f46c <UART_SetConfig+0x7a8>
 800f40a:	4b6f      	ldr	r3, [pc, #444]	@ (800f5c8 <UART_SetConfig+0x904>)
 800f40c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f40e:	f003 0307 	and.w	r3, r3, #7
 800f412:	2b05      	cmp	r3, #5
 800f414:	d826      	bhi.n	800f464 <UART_SetConfig+0x7a0>
 800f416:	a201      	add	r2, pc, #4	@ (adr r2, 800f41c <UART_SetConfig+0x758>)
 800f418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f41c:	0800f435 	.word	0x0800f435
 800f420:	0800f43d 	.word	0x0800f43d
 800f424:	0800f445 	.word	0x0800f445
 800f428:	0800f44d 	.word	0x0800f44d
 800f42c:	0800f455 	.word	0x0800f455
 800f430:	0800f45d 	.word	0x0800f45d
 800f434:	2302      	movs	r3, #2
 800f436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f43a:	e01a      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f43c:	2304      	movs	r3, #4
 800f43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f442:	e016      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f444:	2308      	movs	r3, #8
 800f446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f44a:	e012      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f44c:	2310      	movs	r3, #16
 800f44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f452:	e00e      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f454:	2320      	movs	r3, #32
 800f456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f45a:	e00a      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f45c:	2340      	movs	r3, #64	@ 0x40
 800f45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f462:	e006      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f464:	2380      	movs	r3, #128	@ 0x80
 800f466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f46a:	e002      	b.n	800f472 <UART_SetConfig+0x7ae>
 800f46c:	2380      	movs	r3, #128	@ 0x80
 800f46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	4a55      	ldr	r2, [pc, #340]	@ (800f5cc <UART_SetConfig+0x908>)
 800f478:	4293      	cmp	r3, r2
 800f47a:	f040 80f8 	bne.w	800f66e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f47e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f482:	2b20      	cmp	r3, #32
 800f484:	dc46      	bgt.n	800f514 <UART_SetConfig+0x850>
 800f486:	2b02      	cmp	r3, #2
 800f488:	db75      	blt.n	800f576 <UART_SetConfig+0x8b2>
 800f48a:	3b02      	subs	r3, #2
 800f48c:	2b1e      	cmp	r3, #30
 800f48e:	d872      	bhi.n	800f576 <UART_SetConfig+0x8b2>
 800f490:	a201      	add	r2, pc, #4	@ (adr r2, 800f498 <UART_SetConfig+0x7d4>)
 800f492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f496:	bf00      	nop
 800f498:	0800f51b 	.word	0x0800f51b
 800f49c:	0800f577 	.word	0x0800f577
 800f4a0:	0800f523 	.word	0x0800f523
 800f4a4:	0800f577 	.word	0x0800f577
 800f4a8:	0800f577 	.word	0x0800f577
 800f4ac:	0800f577 	.word	0x0800f577
 800f4b0:	0800f533 	.word	0x0800f533
 800f4b4:	0800f577 	.word	0x0800f577
 800f4b8:	0800f577 	.word	0x0800f577
 800f4bc:	0800f577 	.word	0x0800f577
 800f4c0:	0800f577 	.word	0x0800f577
 800f4c4:	0800f577 	.word	0x0800f577
 800f4c8:	0800f577 	.word	0x0800f577
 800f4cc:	0800f577 	.word	0x0800f577
 800f4d0:	0800f543 	.word	0x0800f543
 800f4d4:	0800f577 	.word	0x0800f577
 800f4d8:	0800f577 	.word	0x0800f577
 800f4dc:	0800f577 	.word	0x0800f577
 800f4e0:	0800f577 	.word	0x0800f577
 800f4e4:	0800f577 	.word	0x0800f577
 800f4e8:	0800f577 	.word	0x0800f577
 800f4ec:	0800f577 	.word	0x0800f577
 800f4f0:	0800f577 	.word	0x0800f577
 800f4f4:	0800f577 	.word	0x0800f577
 800f4f8:	0800f577 	.word	0x0800f577
 800f4fc:	0800f577 	.word	0x0800f577
 800f500:	0800f577 	.word	0x0800f577
 800f504:	0800f577 	.word	0x0800f577
 800f508:	0800f577 	.word	0x0800f577
 800f50c:	0800f577 	.word	0x0800f577
 800f510:	0800f569 	.word	0x0800f569
 800f514:	2b40      	cmp	r3, #64	@ 0x40
 800f516:	d02a      	beq.n	800f56e <UART_SetConfig+0x8aa>
 800f518:	e02d      	b.n	800f576 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f51a:	f7fc f89b 	bl	800b654 <HAL_RCCEx_GetD3PCLK1Freq>
 800f51e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f520:	e02f      	b.n	800f582 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f526:	4618      	mov	r0, r3
 800f528:	f7fc f8aa 	bl	800b680 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f52c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f52e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f530:	e027      	b.n	800f582 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f532:	f107 0318 	add.w	r3, r7, #24
 800f536:	4618      	mov	r0, r3
 800f538:	f7fc f9f6 	bl	800b928 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f53c:	69fb      	ldr	r3, [r7, #28]
 800f53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f540:	e01f      	b.n	800f582 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f542:	4b21      	ldr	r3, [pc, #132]	@ (800f5c8 <UART_SetConfig+0x904>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	f003 0320 	and.w	r3, r3, #32
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d009      	beq.n	800f562 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f54e:	4b1e      	ldr	r3, [pc, #120]	@ (800f5c8 <UART_SetConfig+0x904>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	08db      	lsrs	r3, r3, #3
 800f554:	f003 0303 	and.w	r3, r3, #3
 800f558:	4a1d      	ldr	r2, [pc, #116]	@ (800f5d0 <UART_SetConfig+0x90c>)
 800f55a:	fa22 f303 	lsr.w	r3, r2, r3
 800f55e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f560:	e00f      	b.n	800f582 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f562:	4b1b      	ldr	r3, [pc, #108]	@ (800f5d0 <UART_SetConfig+0x90c>)
 800f564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f566:	e00c      	b.n	800f582 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f568:	4b1a      	ldr	r3, [pc, #104]	@ (800f5d4 <UART_SetConfig+0x910>)
 800f56a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f56c:	e009      	b.n	800f582 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f56e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f574:	e005      	b.n	800f582 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f576:	2300      	movs	r3, #0
 800f578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f57a:	2301      	movs	r3, #1
 800f57c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f580:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f584:	2b00      	cmp	r3, #0
 800f586:	f000 81ee 	beq.w	800f966 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f58e:	4a12      	ldr	r2, [pc, #72]	@ (800f5d8 <UART_SetConfig+0x914>)
 800f590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f594:	461a      	mov	r2, r3
 800f596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f598:	fbb3 f3f2 	udiv	r3, r3, r2
 800f59c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	685a      	ldr	r2, [r3, #4]
 800f5a2:	4613      	mov	r3, r2
 800f5a4:	005b      	lsls	r3, r3, #1
 800f5a6:	4413      	add	r3, r2
 800f5a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d305      	bcc.n	800f5ba <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f5b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d910      	bls.n	800f5dc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f5c0:	e1d1      	b.n	800f966 <UART_SetConfig+0xca2>
 800f5c2:	bf00      	nop
 800f5c4:	40011c00 	.word	0x40011c00
 800f5c8:	58024400 	.word	0x58024400
 800f5cc:	58000c00 	.word	0x58000c00
 800f5d0:	03d09000 	.word	0x03d09000
 800f5d4:	003d0900 	.word	0x003d0900
 800f5d8:	08010ec0 	.word	0x08010ec0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f5dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5de:	2200      	movs	r2, #0
 800f5e0:	60bb      	str	r3, [r7, #8]
 800f5e2:	60fa      	str	r2, [r7, #12]
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5e8:	4ac0      	ldr	r2, [pc, #768]	@ (800f8ec <UART_SetConfig+0xc28>)
 800f5ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f5ee:	b29b      	uxth	r3, r3
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	603b      	str	r3, [r7, #0]
 800f5f4:	607a      	str	r2, [r7, #4]
 800f5f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f5fe:	f7f0 fe85 	bl	800030c <__aeabi_uldivmod>
 800f602:	4602      	mov	r2, r0
 800f604:	460b      	mov	r3, r1
 800f606:	4610      	mov	r0, r2
 800f608:	4619      	mov	r1, r3
 800f60a:	f04f 0200 	mov.w	r2, #0
 800f60e:	f04f 0300 	mov.w	r3, #0
 800f612:	020b      	lsls	r3, r1, #8
 800f614:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f618:	0202      	lsls	r2, r0, #8
 800f61a:	6979      	ldr	r1, [r7, #20]
 800f61c:	6849      	ldr	r1, [r1, #4]
 800f61e:	0849      	lsrs	r1, r1, #1
 800f620:	2000      	movs	r0, #0
 800f622:	460c      	mov	r4, r1
 800f624:	4605      	mov	r5, r0
 800f626:	eb12 0804 	adds.w	r8, r2, r4
 800f62a:	eb43 0905 	adc.w	r9, r3, r5
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	2200      	movs	r2, #0
 800f634:	469a      	mov	sl, r3
 800f636:	4693      	mov	fp, r2
 800f638:	4652      	mov	r2, sl
 800f63a:	465b      	mov	r3, fp
 800f63c:	4640      	mov	r0, r8
 800f63e:	4649      	mov	r1, r9
 800f640:	f7f0 fe64 	bl	800030c <__aeabi_uldivmod>
 800f644:	4602      	mov	r2, r0
 800f646:	460b      	mov	r3, r1
 800f648:	4613      	mov	r3, r2
 800f64a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f64e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f652:	d308      	bcc.n	800f666 <UART_SetConfig+0x9a2>
 800f654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f656:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f65a:	d204      	bcs.n	800f666 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f65c:	697b      	ldr	r3, [r7, #20]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f662:	60da      	str	r2, [r3, #12]
 800f664:	e17f      	b.n	800f966 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f666:	2301      	movs	r3, #1
 800f668:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f66c:	e17b      	b.n	800f966 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	69db      	ldr	r3, [r3, #28]
 800f672:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f676:	f040 80bd 	bne.w	800f7f4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f67a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f67e:	2b20      	cmp	r3, #32
 800f680:	dc48      	bgt.n	800f714 <UART_SetConfig+0xa50>
 800f682:	2b00      	cmp	r3, #0
 800f684:	db7b      	blt.n	800f77e <UART_SetConfig+0xaba>
 800f686:	2b20      	cmp	r3, #32
 800f688:	d879      	bhi.n	800f77e <UART_SetConfig+0xaba>
 800f68a:	a201      	add	r2, pc, #4	@ (adr r2, 800f690 <UART_SetConfig+0x9cc>)
 800f68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f690:	0800f71b 	.word	0x0800f71b
 800f694:	0800f723 	.word	0x0800f723
 800f698:	0800f77f 	.word	0x0800f77f
 800f69c:	0800f77f 	.word	0x0800f77f
 800f6a0:	0800f72b 	.word	0x0800f72b
 800f6a4:	0800f77f 	.word	0x0800f77f
 800f6a8:	0800f77f 	.word	0x0800f77f
 800f6ac:	0800f77f 	.word	0x0800f77f
 800f6b0:	0800f73b 	.word	0x0800f73b
 800f6b4:	0800f77f 	.word	0x0800f77f
 800f6b8:	0800f77f 	.word	0x0800f77f
 800f6bc:	0800f77f 	.word	0x0800f77f
 800f6c0:	0800f77f 	.word	0x0800f77f
 800f6c4:	0800f77f 	.word	0x0800f77f
 800f6c8:	0800f77f 	.word	0x0800f77f
 800f6cc:	0800f77f 	.word	0x0800f77f
 800f6d0:	0800f74b 	.word	0x0800f74b
 800f6d4:	0800f77f 	.word	0x0800f77f
 800f6d8:	0800f77f 	.word	0x0800f77f
 800f6dc:	0800f77f 	.word	0x0800f77f
 800f6e0:	0800f77f 	.word	0x0800f77f
 800f6e4:	0800f77f 	.word	0x0800f77f
 800f6e8:	0800f77f 	.word	0x0800f77f
 800f6ec:	0800f77f 	.word	0x0800f77f
 800f6f0:	0800f77f 	.word	0x0800f77f
 800f6f4:	0800f77f 	.word	0x0800f77f
 800f6f8:	0800f77f 	.word	0x0800f77f
 800f6fc:	0800f77f 	.word	0x0800f77f
 800f700:	0800f77f 	.word	0x0800f77f
 800f704:	0800f77f 	.word	0x0800f77f
 800f708:	0800f77f 	.word	0x0800f77f
 800f70c:	0800f77f 	.word	0x0800f77f
 800f710:	0800f771 	.word	0x0800f771
 800f714:	2b40      	cmp	r3, #64	@ 0x40
 800f716:	d02e      	beq.n	800f776 <UART_SetConfig+0xab2>
 800f718:	e031      	b.n	800f77e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f71a:	f7fa f8fd 	bl	8009918 <HAL_RCC_GetPCLK1Freq>
 800f71e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f720:	e033      	b.n	800f78a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f722:	f7fa f90f 	bl	8009944 <HAL_RCC_GetPCLK2Freq>
 800f726:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f728:	e02f      	b.n	800f78a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f72a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f72e:	4618      	mov	r0, r3
 800f730:	f7fb ffa6 	bl	800b680 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f738:	e027      	b.n	800f78a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f73a:	f107 0318 	add.w	r3, r7, #24
 800f73e:	4618      	mov	r0, r3
 800f740:	f7fc f8f2 	bl	800b928 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f744:	69fb      	ldr	r3, [r7, #28]
 800f746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f748:	e01f      	b.n	800f78a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f74a:	4b69      	ldr	r3, [pc, #420]	@ (800f8f0 <UART_SetConfig+0xc2c>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	f003 0320 	and.w	r3, r3, #32
 800f752:	2b00      	cmp	r3, #0
 800f754:	d009      	beq.n	800f76a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f756:	4b66      	ldr	r3, [pc, #408]	@ (800f8f0 <UART_SetConfig+0xc2c>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	08db      	lsrs	r3, r3, #3
 800f75c:	f003 0303 	and.w	r3, r3, #3
 800f760:	4a64      	ldr	r2, [pc, #400]	@ (800f8f4 <UART_SetConfig+0xc30>)
 800f762:	fa22 f303 	lsr.w	r3, r2, r3
 800f766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f768:	e00f      	b.n	800f78a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f76a:	4b62      	ldr	r3, [pc, #392]	@ (800f8f4 <UART_SetConfig+0xc30>)
 800f76c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f76e:	e00c      	b.n	800f78a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f770:	4b61      	ldr	r3, [pc, #388]	@ (800f8f8 <UART_SetConfig+0xc34>)
 800f772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f774:	e009      	b.n	800f78a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f77c:	e005      	b.n	800f78a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f77e:	2300      	movs	r3, #0
 800f780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f782:	2301      	movs	r3, #1
 800f784:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f788:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f78a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	f000 80ea 	beq.w	800f966 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f796:	4a55      	ldr	r2, [pc, #340]	@ (800f8ec <UART_SetConfig+0xc28>)
 800f798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f79c:	461a      	mov	r2, r3
 800f79e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f7a4:	005a      	lsls	r2, r3, #1
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	685b      	ldr	r3, [r3, #4]
 800f7aa:	085b      	lsrs	r3, r3, #1
 800f7ac:	441a      	add	r2, r3
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ba:	2b0f      	cmp	r3, #15
 800f7bc:	d916      	bls.n	800f7ec <UART_SetConfig+0xb28>
 800f7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f7c4:	d212      	bcs.n	800f7ec <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7c8:	b29b      	uxth	r3, r3
 800f7ca:	f023 030f 	bic.w	r3, r3, #15
 800f7ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7d2:	085b      	lsrs	r3, r3, #1
 800f7d4:	b29b      	uxth	r3, r3
 800f7d6:	f003 0307 	and.w	r3, r3, #7
 800f7da:	b29a      	uxth	r2, r3
 800f7dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f7de:	4313      	orrs	r3, r2
 800f7e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f7e8:	60da      	str	r2, [r3, #12]
 800f7ea:	e0bc      	b.n	800f966 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f7f2:	e0b8      	b.n	800f966 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f7f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f7f8:	2b20      	cmp	r3, #32
 800f7fa:	dc4b      	bgt.n	800f894 <UART_SetConfig+0xbd0>
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	f2c0 8087 	blt.w	800f910 <UART_SetConfig+0xc4c>
 800f802:	2b20      	cmp	r3, #32
 800f804:	f200 8084 	bhi.w	800f910 <UART_SetConfig+0xc4c>
 800f808:	a201      	add	r2, pc, #4	@ (adr r2, 800f810 <UART_SetConfig+0xb4c>)
 800f80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f80e:	bf00      	nop
 800f810:	0800f89b 	.word	0x0800f89b
 800f814:	0800f8a3 	.word	0x0800f8a3
 800f818:	0800f911 	.word	0x0800f911
 800f81c:	0800f911 	.word	0x0800f911
 800f820:	0800f8ab 	.word	0x0800f8ab
 800f824:	0800f911 	.word	0x0800f911
 800f828:	0800f911 	.word	0x0800f911
 800f82c:	0800f911 	.word	0x0800f911
 800f830:	0800f8bb 	.word	0x0800f8bb
 800f834:	0800f911 	.word	0x0800f911
 800f838:	0800f911 	.word	0x0800f911
 800f83c:	0800f911 	.word	0x0800f911
 800f840:	0800f911 	.word	0x0800f911
 800f844:	0800f911 	.word	0x0800f911
 800f848:	0800f911 	.word	0x0800f911
 800f84c:	0800f911 	.word	0x0800f911
 800f850:	0800f8cb 	.word	0x0800f8cb
 800f854:	0800f911 	.word	0x0800f911
 800f858:	0800f911 	.word	0x0800f911
 800f85c:	0800f911 	.word	0x0800f911
 800f860:	0800f911 	.word	0x0800f911
 800f864:	0800f911 	.word	0x0800f911
 800f868:	0800f911 	.word	0x0800f911
 800f86c:	0800f911 	.word	0x0800f911
 800f870:	0800f911 	.word	0x0800f911
 800f874:	0800f911 	.word	0x0800f911
 800f878:	0800f911 	.word	0x0800f911
 800f87c:	0800f911 	.word	0x0800f911
 800f880:	0800f911 	.word	0x0800f911
 800f884:	0800f911 	.word	0x0800f911
 800f888:	0800f911 	.word	0x0800f911
 800f88c:	0800f911 	.word	0x0800f911
 800f890:	0800f903 	.word	0x0800f903
 800f894:	2b40      	cmp	r3, #64	@ 0x40
 800f896:	d037      	beq.n	800f908 <UART_SetConfig+0xc44>
 800f898:	e03a      	b.n	800f910 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f89a:	f7fa f83d 	bl	8009918 <HAL_RCC_GetPCLK1Freq>
 800f89e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f8a0:	e03c      	b.n	800f91c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f8a2:	f7fa f84f 	bl	8009944 <HAL_RCC_GetPCLK2Freq>
 800f8a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f8a8:	e038      	b.n	800f91c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f8aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7fb fee6 	bl	800b680 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f8b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8b8:	e030      	b.n	800f91c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f8ba:	f107 0318 	add.w	r3, r7, #24
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7fc f832 	bl	800b928 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f8c4:	69fb      	ldr	r3, [r7, #28]
 800f8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8c8:	e028      	b.n	800f91c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f8ca:	4b09      	ldr	r3, [pc, #36]	@ (800f8f0 <UART_SetConfig+0xc2c>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f003 0320 	and.w	r3, r3, #32
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d012      	beq.n	800f8fc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f8d6:	4b06      	ldr	r3, [pc, #24]	@ (800f8f0 <UART_SetConfig+0xc2c>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	08db      	lsrs	r3, r3, #3
 800f8dc:	f003 0303 	and.w	r3, r3, #3
 800f8e0:	4a04      	ldr	r2, [pc, #16]	@ (800f8f4 <UART_SetConfig+0xc30>)
 800f8e2:	fa22 f303 	lsr.w	r3, r2, r3
 800f8e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f8e8:	e018      	b.n	800f91c <UART_SetConfig+0xc58>
 800f8ea:	bf00      	nop
 800f8ec:	08010ec0 	.word	0x08010ec0
 800f8f0:	58024400 	.word	0x58024400
 800f8f4:	03d09000 	.word	0x03d09000
 800f8f8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f8fc:	4b24      	ldr	r3, [pc, #144]	@ (800f990 <UART_SetConfig+0xccc>)
 800f8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f900:	e00c      	b.n	800f91c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f902:	4b24      	ldr	r3, [pc, #144]	@ (800f994 <UART_SetConfig+0xcd0>)
 800f904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f906:	e009      	b.n	800f91c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f908:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f90c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f90e:	e005      	b.n	800f91c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f910:	2300      	movs	r3, #0
 800f912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f914:	2301      	movs	r3, #1
 800f916:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f91a:	bf00      	nop
    }

    if (pclk != 0U)
 800f91c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d021      	beq.n	800f966 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f926:	4a1c      	ldr	r2, [pc, #112]	@ (800f998 <UART_SetConfig+0xcd4>)
 800f928:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f92c:	461a      	mov	r2, r3
 800f92e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f930:	fbb3 f2f2 	udiv	r2, r3, r2
 800f934:	697b      	ldr	r3, [r7, #20]
 800f936:	685b      	ldr	r3, [r3, #4]
 800f938:	085b      	lsrs	r3, r3, #1
 800f93a:	441a      	add	r2, r3
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	685b      	ldr	r3, [r3, #4]
 800f940:	fbb2 f3f3 	udiv	r3, r2, r3
 800f944:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f948:	2b0f      	cmp	r3, #15
 800f94a:	d909      	bls.n	800f960 <UART_SetConfig+0xc9c>
 800f94c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f94e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f952:	d205      	bcs.n	800f960 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f956:	b29a      	uxth	r2, r3
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	60da      	str	r2, [r3, #12]
 800f95e:	e002      	b.n	800f966 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f960:	2301      	movs	r3, #1
 800f962:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	2201      	movs	r2, #1
 800f96a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f96e:	697b      	ldr	r3, [r7, #20]
 800f970:	2201      	movs	r2, #1
 800f972:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	2200      	movs	r2, #0
 800f97a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	2200      	movs	r2, #0
 800f980:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f982:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f986:	4618      	mov	r0, r3
 800f988:	3748      	adds	r7, #72	@ 0x48
 800f98a:	46bd      	mov	sp, r7
 800f98c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f990:	03d09000 	.word	0x03d09000
 800f994:	003d0900 	.word	0x003d0900
 800f998:	08010ec0 	.word	0x08010ec0

0800f99c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f99c:	b480      	push	{r7}
 800f99e:	b083      	sub	sp, #12
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9a8:	f003 0308 	and.w	r3, r3, #8
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d00a      	beq.n	800f9c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	685b      	ldr	r3, [r3, #4]
 800f9b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	430a      	orrs	r2, r1
 800f9c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9ca:	f003 0301 	and.w	r3, r3, #1
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d00a      	beq.n	800f9e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	685b      	ldr	r3, [r3, #4]
 800f9d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	430a      	orrs	r2, r1
 800f9e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9ec:	f003 0302 	and.w	r3, r3, #2
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d00a      	beq.n	800fa0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	685b      	ldr	r3, [r3, #4]
 800f9fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	430a      	orrs	r2, r1
 800fa08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa0e:	f003 0304 	and.w	r3, r3, #4
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d00a      	beq.n	800fa2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	685b      	ldr	r3, [r3, #4]
 800fa1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	430a      	orrs	r2, r1
 800fa2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa30:	f003 0310 	and.w	r3, r3, #16
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d00a      	beq.n	800fa4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	689b      	ldr	r3, [r3, #8]
 800fa3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	430a      	orrs	r2, r1
 800fa4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa52:	f003 0320 	and.w	r3, r3, #32
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d00a      	beq.n	800fa70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	689b      	ldr	r3, [r3, #8]
 800fa60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	430a      	orrs	r2, r1
 800fa6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d01a      	beq.n	800fab2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	685b      	ldr	r3, [r3, #4]
 800fa82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	430a      	orrs	r2, r1
 800fa90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fa9a:	d10a      	bne.n	800fab2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	685b      	ldr	r3, [r3, #4]
 800faa2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	430a      	orrs	r2, r1
 800fab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d00a      	beq.n	800fad4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	685b      	ldr	r3, [r3, #4]
 800fac4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	430a      	orrs	r2, r1
 800fad2:	605a      	str	r2, [r3, #4]
  }
}
 800fad4:	bf00      	nop
 800fad6:	370c      	adds	r7, #12
 800fad8:	46bd      	mov	sp, r7
 800fada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fade:	4770      	bx	lr

0800fae0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b098      	sub	sp, #96	@ 0x60
 800fae4:	af02      	add	r7, sp, #8
 800fae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2200      	movs	r2, #0
 800faec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800faf0:	f7f3 fd72 	bl	80035d8 <HAL_GetTick>
 800faf4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	f003 0308 	and.w	r3, r3, #8
 800fb00:	2b08      	cmp	r3, #8
 800fb02:	d12f      	bne.n	800fb64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fb04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fb08:	9300      	str	r3, [sp, #0]
 800fb0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f000 f88e 	bl	800fc34 <UART_WaitOnFlagUntilTimeout>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d022      	beq.n	800fb64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb26:	e853 3f00 	ldrex	r3, [r3]
 800fb2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fb2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fb32:	653b      	str	r3, [r7, #80]	@ 0x50
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	461a      	mov	r2, r3
 800fb3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fb3c:	647b      	str	r3, [r7, #68]	@ 0x44
 800fb3e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fb42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fb44:	e841 2300 	strex	r3, r2, [r1]
 800fb48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fb4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d1e6      	bne.n	800fb1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2220      	movs	r2, #32
 800fb54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fb60:	2303      	movs	r3, #3
 800fb62:	e063      	b.n	800fc2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	f003 0304 	and.w	r3, r3, #4
 800fb6e:	2b04      	cmp	r3, #4
 800fb70:	d149      	bne.n	800fc06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fb72:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fb76:	9300      	str	r3, [sp, #0]
 800fb78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fb80:	6878      	ldr	r0, [r7, #4]
 800fb82:	f000 f857 	bl	800fc34 <UART_WaitOnFlagUntilTimeout>
 800fb86:	4603      	mov	r3, r0
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d03c      	beq.n	800fc06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb94:	e853 3f00 	ldrex	r3, [r3]
 800fb98:	623b      	str	r3, [r7, #32]
   return(result);
 800fb9a:	6a3b      	ldr	r3, [r7, #32]
 800fb9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	461a      	mov	r2, r3
 800fba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fbaa:	633b      	str	r3, [r7, #48]	@ 0x30
 800fbac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fbb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbb2:	e841 2300 	strex	r3, r2, [r1]
 800fbb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fbb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d1e6      	bne.n	800fb8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	3308      	adds	r3, #8
 800fbc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbc6:	693b      	ldr	r3, [r7, #16]
 800fbc8:	e853 3f00 	ldrex	r3, [r3]
 800fbcc:	60fb      	str	r3, [r7, #12]
   return(result);
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	f023 0301 	bic.w	r3, r3, #1
 800fbd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	3308      	adds	r3, #8
 800fbdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fbde:	61fa      	str	r2, [r7, #28]
 800fbe0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbe2:	69b9      	ldr	r1, [r7, #24]
 800fbe4:	69fa      	ldr	r2, [r7, #28]
 800fbe6:	e841 2300 	strex	r3, r2, [r1]
 800fbea:	617b      	str	r3, [r7, #20]
   return(result);
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d1e5      	bne.n	800fbbe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	2220      	movs	r2, #32
 800fbf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fc02:	2303      	movs	r3, #3
 800fc04:	e012      	b.n	800fc2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2220      	movs	r2, #32
 800fc0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2220      	movs	r2, #32
 800fc12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2200      	movs	r2, #0
 800fc1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2200      	movs	r2, #0
 800fc26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fc2a:	2300      	movs	r3, #0
}
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	3758      	adds	r7, #88	@ 0x58
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}

0800fc34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b084      	sub	sp, #16
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	60f8      	str	r0, [r7, #12]
 800fc3c:	60b9      	str	r1, [r7, #8]
 800fc3e:	603b      	str	r3, [r7, #0]
 800fc40:	4613      	mov	r3, r2
 800fc42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fc44:	e04f      	b.n	800fce6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fc46:	69bb      	ldr	r3, [r7, #24]
 800fc48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc4c:	d04b      	beq.n	800fce6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fc4e:	f7f3 fcc3 	bl	80035d8 <HAL_GetTick>
 800fc52:	4602      	mov	r2, r0
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	1ad3      	subs	r3, r2, r3
 800fc58:	69ba      	ldr	r2, [r7, #24]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d302      	bcc.n	800fc64 <UART_WaitOnFlagUntilTimeout+0x30>
 800fc5e:	69bb      	ldr	r3, [r7, #24]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d101      	bne.n	800fc68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fc64:	2303      	movs	r3, #3
 800fc66:	e04e      	b.n	800fd06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	f003 0304 	and.w	r3, r3, #4
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d037      	beq.n	800fce6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fc76:	68bb      	ldr	r3, [r7, #8]
 800fc78:	2b80      	cmp	r3, #128	@ 0x80
 800fc7a:	d034      	beq.n	800fce6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	2b40      	cmp	r3, #64	@ 0x40
 800fc80:	d031      	beq.n	800fce6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	69db      	ldr	r3, [r3, #28]
 800fc88:	f003 0308 	and.w	r3, r3, #8
 800fc8c:	2b08      	cmp	r3, #8
 800fc8e:	d110      	bne.n	800fcb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	2208      	movs	r2, #8
 800fc96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fc98:	68f8      	ldr	r0, [r7, #12]
 800fc9a:	f000 f95b 	bl	800ff54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	2208      	movs	r2, #8
 800fca2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	2200      	movs	r2, #0
 800fcaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fcae:	2301      	movs	r3, #1
 800fcb0:	e029      	b.n	800fd06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	69db      	ldr	r3, [r3, #28]
 800fcb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fcbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fcc0:	d111      	bne.n	800fce6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fcca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fccc:	68f8      	ldr	r0, [r7, #12]
 800fcce:	f000 f941 	bl	800ff54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	2220      	movs	r2, #32
 800fcd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	2200      	movs	r2, #0
 800fcde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fce2:	2303      	movs	r3, #3
 800fce4:	e00f      	b.n	800fd06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	69da      	ldr	r2, [r3, #28]
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	4013      	ands	r3, r2
 800fcf0:	68ba      	ldr	r2, [r7, #8]
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	bf0c      	ite	eq
 800fcf6:	2301      	moveq	r3, #1
 800fcf8:	2300      	movne	r3, #0
 800fcfa:	b2db      	uxtb	r3, r3
 800fcfc:	461a      	mov	r2, r3
 800fcfe:	79fb      	ldrb	r3, [r7, #7]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d0a0      	beq.n	800fc46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fd04:	2300      	movs	r3, #0
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	3710      	adds	r7, #16
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}
	...

0800fd10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fd10:	b480      	push	{r7}
 800fd12:	b0a3      	sub	sp, #140	@ 0x8c
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	60f8      	str	r0, [r7, #12]
 800fd18:	60b9      	str	r1, [r7, #8]
 800fd1a:	4613      	mov	r3, r2
 800fd1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	68ba      	ldr	r2, [r7, #8]
 800fd22:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	88fa      	ldrh	r2, [r7, #6]
 800fd28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	88fa      	ldrh	r2, [r7, #6]
 800fd30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	2200      	movs	r2, #0
 800fd38:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	689b      	ldr	r3, [r3, #8]
 800fd3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fd42:	d10e      	bne.n	800fd62 <UART_Start_Receive_IT+0x52>
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	691b      	ldr	r3, [r3, #16]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d105      	bne.n	800fd58 <UART_Start_Receive_IT+0x48>
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800fd52:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800fd56:	e02d      	b.n	800fdb4 <UART_Start_Receive_IT+0xa4>
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	22ff      	movs	r2, #255	@ 0xff
 800fd5c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800fd60:	e028      	b.n	800fdb4 <UART_Start_Receive_IT+0xa4>
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	689b      	ldr	r3, [r3, #8]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d10d      	bne.n	800fd86 <UART_Start_Receive_IT+0x76>
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	691b      	ldr	r3, [r3, #16]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d104      	bne.n	800fd7c <UART_Start_Receive_IT+0x6c>
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	22ff      	movs	r2, #255	@ 0xff
 800fd76:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800fd7a:	e01b      	b.n	800fdb4 <UART_Start_Receive_IT+0xa4>
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	227f      	movs	r2, #127	@ 0x7f
 800fd80:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800fd84:	e016      	b.n	800fdb4 <UART_Start_Receive_IT+0xa4>
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	689b      	ldr	r3, [r3, #8]
 800fd8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fd8e:	d10d      	bne.n	800fdac <UART_Start_Receive_IT+0x9c>
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	691b      	ldr	r3, [r3, #16]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d104      	bne.n	800fda2 <UART_Start_Receive_IT+0x92>
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	227f      	movs	r2, #127	@ 0x7f
 800fd9c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800fda0:	e008      	b.n	800fdb4 <UART_Start_Receive_IT+0xa4>
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	223f      	movs	r2, #63	@ 0x3f
 800fda6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800fdaa:	e003      	b.n	800fdb4 <UART_Start_Receive_IT+0xa4>
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	2200      	movs	r2, #0
 800fdb0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	2222      	movs	r2, #34	@ 0x22
 800fdc0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	3308      	adds	r3, #8
 800fdca:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fdce:	e853 3f00 	ldrex	r3, [r3]
 800fdd2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800fdd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fdd6:	f043 0301 	orr.w	r3, r3, #1
 800fdda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	3308      	adds	r3, #8
 800fde4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800fde8:	673a      	str	r2, [r7, #112]	@ 0x70
 800fdea:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdec:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800fdee:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800fdf0:	e841 2300 	strex	r3, r2, [r1]
 800fdf4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800fdf6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d1e3      	bne.n	800fdc4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fe04:	d14f      	bne.n	800fea6 <UART_Start_Receive_IT+0x196>
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800fe0c:	88fa      	ldrh	r2, [r7, #6]
 800fe0e:	429a      	cmp	r2, r3
 800fe10:	d349      	bcc.n	800fea6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	689b      	ldr	r3, [r3, #8]
 800fe16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fe1a:	d107      	bne.n	800fe2c <UART_Start_Receive_IT+0x11c>
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	691b      	ldr	r3, [r3, #16]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d103      	bne.n	800fe2c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	4a47      	ldr	r2, [pc, #284]	@ (800ff44 <UART_Start_Receive_IT+0x234>)
 800fe28:	675a      	str	r2, [r3, #116]	@ 0x74
 800fe2a:	e002      	b.n	800fe32 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	4a46      	ldr	r2, [pc, #280]	@ (800ff48 <UART_Start_Receive_IT+0x238>)
 800fe30:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	691b      	ldr	r3, [r3, #16]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d01a      	beq.n	800fe70 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fe42:	e853 3f00 	ldrex	r3, [r3]
 800fe46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800fe48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fe4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fe4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	461a      	mov	r2, r3
 800fe58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fe5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fe5e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe60:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800fe62:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800fe64:	e841 2300 	strex	r3, r2, [r1]
 800fe68:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800fe6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d1e4      	bne.n	800fe3a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	3308      	adds	r3, #8
 800fe76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe7a:	e853 3f00 	ldrex	r3, [r3]
 800fe7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fe80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fe86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	3308      	adds	r3, #8
 800fe8e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800fe90:	64ba      	str	r2, [r7, #72]	@ 0x48
 800fe92:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe94:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fe96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fe98:	e841 2300 	strex	r3, r2, [r1]
 800fe9c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800fe9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d1e5      	bne.n	800fe70 <UART_Start_Receive_IT+0x160>
 800fea4:	e046      	b.n	800ff34 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	689b      	ldr	r3, [r3, #8]
 800feaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800feae:	d107      	bne.n	800fec0 <UART_Start_Receive_IT+0x1b0>
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	691b      	ldr	r3, [r3, #16]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d103      	bne.n	800fec0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	4a24      	ldr	r2, [pc, #144]	@ (800ff4c <UART_Start_Receive_IT+0x23c>)
 800febc:	675a      	str	r2, [r3, #116]	@ 0x74
 800febe:	e002      	b.n	800fec6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	4a23      	ldr	r2, [pc, #140]	@ (800ff50 <UART_Start_Receive_IT+0x240>)
 800fec4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	691b      	ldr	r3, [r3, #16]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d019      	beq.n	800ff02 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fed6:	e853 3f00 	ldrex	r3, [r3]
 800feda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fede:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800fee2:	677b      	str	r3, [r7, #116]	@ 0x74
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	461a      	mov	r2, r3
 800feea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800feec:	637b      	str	r3, [r7, #52]	@ 0x34
 800feee:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fef0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800fef2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fef4:	e841 2300 	strex	r3, r2, [r1]
 800fef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800fefa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d1e6      	bne.n	800fece <UART_Start_Receive_IT+0x1be>
 800ff00:	e018      	b.n	800ff34 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	e853 3f00 	ldrex	r3, [r3]
 800ff0e:	613b      	str	r3, [r7, #16]
   return(result);
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	f043 0320 	orr.w	r3, r3, #32
 800ff16:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	461a      	mov	r2, r3
 800ff1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ff20:	623b      	str	r3, [r7, #32]
 800ff22:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff24:	69f9      	ldr	r1, [r7, #28]
 800ff26:	6a3a      	ldr	r2, [r7, #32]
 800ff28:	e841 2300 	strex	r3, r2, [r1]
 800ff2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ff2e:	69bb      	ldr	r3, [r7, #24]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d1e6      	bne.n	800ff02 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ff34:	2300      	movs	r3, #0
}
 800ff36:	4618      	mov	r0, r3
 800ff38:	378c      	adds	r7, #140	@ 0x8c
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff40:	4770      	bx	lr
 800ff42:	bf00      	nop
 800ff44:	08010775 	.word	0x08010775
 800ff48:	08010415 	.word	0x08010415
 800ff4c:	0801025d 	.word	0x0801025d
 800ff50:	080100a5 	.word	0x080100a5

0800ff54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ff54:	b480      	push	{r7}
 800ff56:	b095      	sub	sp, #84	@ 0x54
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff64:	e853 3f00 	ldrex	r3, [r3]
 800ff68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ff6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ff70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	461a      	mov	r2, r3
 800ff78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ff7a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ff7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ff80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ff82:	e841 2300 	strex	r3, r2, [r1]
 800ff86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ff88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d1e6      	bne.n	800ff5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	3308      	adds	r3, #8
 800ff94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff96:	6a3b      	ldr	r3, [r7, #32]
 800ff98:	e853 3f00 	ldrex	r3, [r3]
 800ff9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ff9e:	69fa      	ldr	r2, [r7, #28]
 800ffa0:	4b1e      	ldr	r3, [pc, #120]	@ (801001c <UART_EndRxTransfer+0xc8>)
 800ffa2:	4013      	ands	r3, r2
 800ffa4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	3308      	adds	r3, #8
 800ffac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ffae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ffb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ffb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ffb6:	e841 2300 	strex	r3, r2, [r1]
 800ffba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ffbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d1e5      	bne.n	800ff8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ffc6:	2b01      	cmp	r3, #1
 800ffc8:	d118      	bne.n	800fffc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	e853 3f00 	ldrex	r3, [r3]
 800ffd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	f023 0310 	bic.w	r3, r3, #16
 800ffde:	647b      	str	r3, [r7, #68]	@ 0x44
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	461a      	mov	r2, r3
 800ffe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ffe8:	61bb      	str	r3, [r7, #24]
 800ffea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffec:	6979      	ldr	r1, [r7, #20]
 800ffee:	69ba      	ldr	r2, [r7, #24]
 800fff0:	e841 2300 	strex	r3, r2, [r1]
 800fff4:	613b      	str	r3, [r7, #16]
   return(result);
 800fff6:	693b      	ldr	r3, [r7, #16]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d1e6      	bne.n	800ffca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2220      	movs	r2, #32
 8010000:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2200      	movs	r2, #0
 8010008:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2200      	movs	r2, #0
 801000e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010010:	bf00      	nop
 8010012:	3754      	adds	r7, #84	@ 0x54
 8010014:	46bd      	mov	sp, r7
 8010016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001a:	4770      	bx	lr
 801001c:	effffffe 	.word	0xeffffffe

08010020 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b084      	sub	sp, #16
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801002c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	2200      	movs	r2, #0
 8010032:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	2200      	movs	r2, #0
 801003a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801003e:	68f8      	ldr	r0, [r7, #12]
 8010040:	f7fe fe36 	bl	800ecb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010044:	bf00      	nop
 8010046:	3710      	adds	r7, #16
 8010048:	46bd      	mov	sp, r7
 801004a:	bd80      	pop	{r7, pc}

0801004c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b088      	sub	sp, #32
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	e853 3f00 	ldrex	r3, [r3]
 8010060:	60bb      	str	r3, [r7, #8]
   return(result);
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010068:	61fb      	str	r3, [r7, #28]
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	461a      	mov	r2, r3
 8010070:	69fb      	ldr	r3, [r7, #28]
 8010072:	61bb      	str	r3, [r7, #24]
 8010074:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010076:	6979      	ldr	r1, [r7, #20]
 8010078:	69ba      	ldr	r2, [r7, #24]
 801007a:	e841 2300 	strex	r3, r2, [r1]
 801007e:	613b      	str	r3, [r7, #16]
   return(result);
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d1e6      	bne.n	8010054 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2220      	movs	r2, #32
 801008a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2200      	movs	r2, #0
 8010092:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f7fe fdf7 	bl	800ec88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801009a:	bf00      	nop
 801009c:	3720      	adds	r7, #32
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}
	...

080100a4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b09c      	sub	sp, #112	@ 0x70
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80100b2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80100bc:	2b22      	cmp	r3, #34	@ 0x22
 80100be:	f040 80be 	bne.w	801023e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80100cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80100d0:	b2d9      	uxtb	r1, r3
 80100d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80100d6:	b2da      	uxtb	r2, r3
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80100dc:	400a      	ands	r2, r1
 80100de:	b2d2      	uxtb	r2, r2
 80100e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80100e6:	1c5a      	adds	r2, r3, #1
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80100f2:	b29b      	uxth	r3, r3
 80100f4:	3b01      	subs	r3, #1
 80100f6:	b29a      	uxth	r2, r3
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010104:	b29b      	uxth	r3, r3
 8010106:	2b00      	cmp	r3, #0
 8010108:	f040 80a1 	bne.w	801024e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010112:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010114:	e853 3f00 	ldrex	r3, [r3]
 8010118:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801011a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801011c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010120:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	461a      	mov	r2, r3
 8010128:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801012a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801012c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801012e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010130:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010132:	e841 2300 	strex	r3, r2, [r1]
 8010136:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010138:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801013a:	2b00      	cmp	r3, #0
 801013c:	d1e6      	bne.n	801010c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	3308      	adds	r3, #8
 8010144:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010148:	e853 3f00 	ldrex	r3, [r3]
 801014c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801014e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010150:	f023 0301 	bic.w	r3, r3, #1
 8010154:	667b      	str	r3, [r7, #100]	@ 0x64
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	3308      	adds	r3, #8
 801015c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801015e:	647a      	str	r2, [r7, #68]	@ 0x44
 8010160:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010162:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010164:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010166:	e841 2300 	strex	r3, r2, [r1]
 801016a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801016c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801016e:	2b00      	cmp	r3, #0
 8010170:	d1e5      	bne.n	801013e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	2220      	movs	r2, #32
 8010176:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2200      	movs	r2, #0
 801017e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2200      	movs	r2, #0
 8010184:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	4a33      	ldr	r2, [pc, #204]	@ (8010258 <UART_RxISR_8BIT+0x1b4>)
 801018c:	4293      	cmp	r3, r2
 801018e:	d01f      	beq.n	80101d0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	685b      	ldr	r3, [r3, #4]
 8010196:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801019a:	2b00      	cmp	r3, #0
 801019c:	d018      	beq.n	80101d0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101a6:	e853 3f00 	ldrex	r3, [r3]
 80101aa:	623b      	str	r3, [r7, #32]
   return(result);
 80101ac:	6a3b      	ldr	r3, [r7, #32]
 80101ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80101b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	461a      	mov	r2, r3
 80101ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80101bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80101be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80101c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80101c4:	e841 2300 	strex	r3, r2, [r1]
 80101c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80101ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d1e6      	bne.n	801019e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80101d4:	2b01      	cmp	r3, #1
 80101d6:	d12e      	bne.n	8010236 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2200      	movs	r2, #0
 80101dc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101e4:	693b      	ldr	r3, [r7, #16]
 80101e6:	e853 3f00 	ldrex	r3, [r3]
 80101ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	f023 0310 	bic.w	r3, r3, #16
 80101f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	461a      	mov	r2, r3
 80101fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80101fc:	61fb      	str	r3, [r7, #28]
 80101fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010200:	69b9      	ldr	r1, [r7, #24]
 8010202:	69fa      	ldr	r2, [r7, #28]
 8010204:	e841 2300 	strex	r3, r2, [r1]
 8010208:	617b      	str	r3, [r7, #20]
   return(result);
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d1e6      	bne.n	80101de <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	69db      	ldr	r3, [r3, #28]
 8010216:	f003 0310 	and.w	r3, r3, #16
 801021a:	2b10      	cmp	r3, #16
 801021c:	d103      	bne.n	8010226 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	2210      	movs	r2, #16
 8010224:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801022c:	4619      	mov	r1, r3
 801022e:	6878      	ldr	r0, [r7, #4]
 8010230:	f7f1 fb9c 	bl	800196c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010234:	e00b      	b.n	801024e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010236:	6878      	ldr	r0, [r7, #4]
 8010238:	f7fe fd30 	bl	800ec9c <HAL_UART_RxCpltCallback>
}
 801023c:	e007      	b.n	801024e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	699a      	ldr	r2, [r3, #24]
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	f042 0208 	orr.w	r2, r2, #8
 801024c:	619a      	str	r2, [r3, #24]
}
 801024e:	bf00      	nop
 8010250:	3770      	adds	r7, #112	@ 0x70
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}
 8010256:	bf00      	nop
 8010258:	58000c00 	.word	0x58000c00

0801025c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b09c      	sub	sp, #112	@ 0x70
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801026a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010274:	2b22      	cmp	r3, #34	@ 0x22
 8010276:	f040 80be 	bne.w	80103f6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010280:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010288:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801028a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801028e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8010292:	4013      	ands	r3, r2
 8010294:	b29a      	uxth	r2, r3
 8010296:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010298:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801029e:	1c9a      	adds	r2, r3, #2
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80102aa:	b29b      	uxth	r3, r3
 80102ac:	3b01      	subs	r3, #1
 80102ae:	b29a      	uxth	r2, r3
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80102bc:	b29b      	uxth	r3, r3
 80102be:	2b00      	cmp	r3, #0
 80102c0:	f040 80a1 	bne.w	8010406 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80102cc:	e853 3f00 	ldrex	r3, [r3]
 80102d0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80102d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80102d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80102d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	461a      	mov	r2, r3
 80102e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80102e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80102e4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80102e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80102ea:	e841 2300 	strex	r3, r2, [r1]
 80102ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80102f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d1e6      	bne.n	80102c4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	3308      	adds	r3, #8
 80102fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010300:	e853 3f00 	ldrex	r3, [r3]
 8010304:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010308:	f023 0301 	bic.w	r3, r3, #1
 801030c:	663b      	str	r3, [r7, #96]	@ 0x60
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	3308      	adds	r3, #8
 8010314:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010316:	643a      	str	r2, [r7, #64]	@ 0x40
 8010318:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801031a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801031c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801031e:	e841 2300 	strex	r3, r2, [r1]
 8010322:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010326:	2b00      	cmp	r3, #0
 8010328:	d1e5      	bne.n	80102f6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2220      	movs	r2, #32
 801032e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2200      	movs	r2, #0
 8010336:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	2200      	movs	r2, #0
 801033c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	4a33      	ldr	r2, [pc, #204]	@ (8010410 <UART_RxISR_16BIT+0x1b4>)
 8010344:	4293      	cmp	r3, r2
 8010346:	d01f      	beq.n	8010388 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010352:	2b00      	cmp	r3, #0
 8010354:	d018      	beq.n	8010388 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801035c:	6a3b      	ldr	r3, [r7, #32]
 801035e:	e853 3f00 	ldrex	r3, [r3]
 8010362:	61fb      	str	r3, [r7, #28]
   return(result);
 8010364:	69fb      	ldr	r3, [r7, #28]
 8010366:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801036a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	461a      	mov	r2, r3
 8010372:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010374:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010376:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010378:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801037a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801037c:	e841 2300 	strex	r3, r2, [r1]
 8010380:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010384:	2b00      	cmp	r3, #0
 8010386:	d1e6      	bne.n	8010356 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801038c:	2b01      	cmp	r3, #1
 801038e:	d12e      	bne.n	80103ee <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2200      	movs	r2, #0
 8010394:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	e853 3f00 	ldrex	r3, [r3]
 80103a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80103a4:	68bb      	ldr	r3, [r7, #8]
 80103a6:	f023 0310 	bic.w	r3, r3, #16
 80103aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	461a      	mov	r2, r3
 80103b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80103b4:	61bb      	str	r3, [r7, #24]
 80103b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103b8:	6979      	ldr	r1, [r7, #20]
 80103ba:	69ba      	ldr	r2, [r7, #24]
 80103bc:	e841 2300 	strex	r3, r2, [r1]
 80103c0:	613b      	str	r3, [r7, #16]
   return(result);
 80103c2:	693b      	ldr	r3, [r7, #16]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d1e6      	bne.n	8010396 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	69db      	ldr	r3, [r3, #28]
 80103ce:	f003 0310 	and.w	r3, r3, #16
 80103d2:	2b10      	cmp	r3, #16
 80103d4:	d103      	bne.n	80103de <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	2210      	movs	r2, #16
 80103dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80103e4:	4619      	mov	r1, r3
 80103e6:	6878      	ldr	r0, [r7, #4]
 80103e8:	f7f1 fac0 	bl	800196c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80103ec:	e00b      	b.n	8010406 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f7fe fc54 	bl	800ec9c <HAL_UART_RxCpltCallback>
}
 80103f4:	e007      	b.n	8010406 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	699a      	ldr	r2, [r3, #24]
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	f042 0208 	orr.w	r2, r2, #8
 8010404:	619a      	str	r2, [r3, #24]
}
 8010406:	bf00      	nop
 8010408:	3770      	adds	r7, #112	@ 0x70
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}
 801040e:	bf00      	nop
 8010410:	58000c00 	.word	0x58000c00

08010414 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b0ac      	sub	sp, #176	@ 0xb0
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010422:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	69db      	ldr	r3, [r3, #28]
 801042c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	689b      	ldr	r3, [r3, #8]
 8010440:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801044a:	2b22      	cmp	r3, #34	@ 0x22
 801044c:	f040 8180 	bne.w	8010750 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010456:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801045a:	e123      	b.n	80106a4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010462:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010466:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801046a:	b2d9      	uxtb	r1, r3
 801046c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8010470:	b2da      	uxtb	r2, r3
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010476:	400a      	ands	r2, r1
 8010478:	b2d2      	uxtb	r2, r2
 801047a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010480:	1c5a      	adds	r2, r3, #1
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801048c:	b29b      	uxth	r3, r3
 801048e:	3b01      	subs	r3, #1
 8010490:	b29a      	uxth	r2, r3
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	69db      	ldr	r3, [r3, #28]
 801049e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80104a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80104a6:	f003 0307 	and.w	r3, r3, #7
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d053      	beq.n	8010556 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80104ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80104b2:	f003 0301 	and.w	r3, r3, #1
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d011      	beq.n	80104de <UART_RxISR_8BIT_FIFOEN+0xca>
 80104ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80104be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d00b      	beq.n	80104de <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	2201      	movs	r2, #1
 80104cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80104d4:	f043 0201 	orr.w	r2, r3, #1
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80104de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80104e2:	f003 0302 	and.w	r3, r3, #2
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d011      	beq.n	801050e <UART_RxISR_8BIT_FIFOEN+0xfa>
 80104ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80104ee:	f003 0301 	and.w	r3, r3, #1
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d00b      	beq.n	801050e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	2202      	movs	r2, #2
 80104fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010504:	f043 0204 	orr.w	r2, r3, #4
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801050e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010512:	f003 0304 	and.w	r3, r3, #4
 8010516:	2b00      	cmp	r3, #0
 8010518:	d011      	beq.n	801053e <UART_RxISR_8BIT_FIFOEN+0x12a>
 801051a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801051e:	f003 0301 	and.w	r3, r3, #1
 8010522:	2b00      	cmp	r3, #0
 8010524:	d00b      	beq.n	801053e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	2204      	movs	r2, #4
 801052c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010534:	f043 0202 	orr.w	r2, r3, #2
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010544:	2b00      	cmp	r3, #0
 8010546:	d006      	beq.n	8010556 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010548:	6878      	ldr	r0, [r7, #4]
 801054a:	f7fe fbb1 	bl	800ecb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	2200      	movs	r2, #0
 8010552:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801055c:	b29b      	uxth	r3, r3
 801055e:	2b00      	cmp	r3, #0
 8010560:	f040 80a0 	bne.w	80106a4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801056a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801056c:	e853 3f00 	ldrex	r3, [r3]
 8010570:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8010572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010578:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	461a      	mov	r2, r3
 8010582:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010586:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010588:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801058a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801058c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801058e:	e841 2300 	strex	r3, r2, [r1]
 8010592:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8010594:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010596:	2b00      	cmp	r3, #0
 8010598:	d1e4      	bne.n	8010564 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	3308      	adds	r3, #8
 80105a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80105a4:	e853 3f00 	ldrex	r3, [r3]
 80105a8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80105aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80105ac:	4b6e      	ldr	r3, [pc, #440]	@ (8010768 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80105ae:	4013      	ands	r3, r2
 80105b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	3308      	adds	r3, #8
 80105ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80105be:	66ba      	str	r2, [r7, #104]	@ 0x68
 80105c0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105c2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80105c4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80105c6:	e841 2300 	strex	r3, r2, [r1]
 80105ca:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80105cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d1e3      	bne.n	801059a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	2220      	movs	r2, #32
 80105d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2200      	movs	r2, #0
 80105de:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2200      	movs	r2, #0
 80105e4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	4a60      	ldr	r2, [pc, #384]	@ (801076c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80105ec:	4293      	cmp	r3, r2
 80105ee:	d021      	beq.n	8010634 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	685b      	ldr	r3, [r3, #4]
 80105f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d01a      	beq.n	8010634 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010604:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010606:	e853 3f00 	ldrex	r3, [r3]
 801060a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801060c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801060e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	461a      	mov	r2, r3
 801061c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010620:	657b      	str	r3, [r7, #84]	@ 0x54
 8010622:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010624:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010626:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010628:	e841 2300 	strex	r3, r2, [r1]
 801062c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801062e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010630:	2b00      	cmp	r3, #0
 8010632:	d1e4      	bne.n	80105fe <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010638:	2b01      	cmp	r3, #1
 801063a:	d130      	bne.n	801069e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	2200      	movs	r2, #0
 8010640:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801064a:	e853 3f00 	ldrex	r3, [r3]
 801064e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010652:	f023 0310 	bic.w	r3, r3, #16
 8010656:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	461a      	mov	r2, r3
 8010660:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010664:	643b      	str	r3, [r7, #64]	@ 0x40
 8010666:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010668:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801066a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801066c:	e841 2300 	strex	r3, r2, [r1]
 8010670:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010674:	2b00      	cmp	r3, #0
 8010676:	d1e4      	bne.n	8010642 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	69db      	ldr	r3, [r3, #28]
 801067e:	f003 0310 	and.w	r3, r3, #16
 8010682:	2b10      	cmp	r3, #16
 8010684:	d103      	bne.n	801068e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	2210      	movs	r2, #16
 801068c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010694:	4619      	mov	r1, r3
 8010696:	6878      	ldr	r0, [r7, #4]
 8010698:	f7f1 f968 	bl	800196c <HAL_UARTEx_RxEventCallback>
 801069c:	e002      	b.n	80106a4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801069e:	6878      	ldr	r0, [r7, #4]
 80106a0:	f7fe fafc 	bl	800ec9c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80106a4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d006      	beq.n	80106ba <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80106ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80106b0:	f003 0320 	and.w	r3, r3, #32
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	f47f aed1 	bne.w	801045c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80106c0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80106c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d049      	beq.n	8010760 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80106d2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d242      	bcs.n	8010760 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	3308      	adds	r3, #8
 80106e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106e2:	6a3b      	ldr	r3, [r7, #32]
 80106e4:	e853 3f00 	ldrex	r3, [r3]
 80106e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80106ea:	69fb      	ldr	r3, [r7, #28]
 80106ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80106f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	3308      	adds	r3, #8
 80106fa:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80106fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010700:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010702:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010706:	e841 2300 	strex	r3, r2, [r1]
 801070a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801070c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801070e:	2b00      	cmp	r3, #0
 8010710:	d1e3      	bne.n	80106da <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	4a16      	ldr	r2, [pc, #88]	@ (8010770 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8010716:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	e853 3f00 	ldrex	r3, [r3]
 8010724:	60bb      	str	r3, [r7, #8]
   return(result);
 8010726:	68bb      	ldr	r3, [r7, #8]
 8010728:	f043 0320 	orr.w	r3, r3, #32
 801072c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	461a      	mov	r2, r3
 8010736:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801073a:	61bb      	str	r3, [r7, #24]
 801073c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801073e:	6979      	ldr	r1, [r7, #20]
 8010740:	69ba      	ldr	r2, [r7, #24]
 8010742:	e841 2300 	strex	r3, r2, [r1]
 8010746:	613b      	str	r3, [r7, #16]
   return(result);
 8010748:	693b      	ldr	r3, [r7, #16]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d1e4      	bne.n	8010718 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801074e:	e007      	b.n	8010760 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	699a      	ldr	r2, [r3, #24]
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	f042 0208 	orr.w	r2, r2, #8
 801075e:	619a      	str	r2, [r3, #24]
}
 8010760:	bf00      	nop
 8010762:	37b0      	adds	r7, #176	@ 0xb0
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}
 8010768:	effffffe 	.word	0xeffffffe
 801076c:	58000c00 	.word	0x58000c00
 8010770:	080100a5 	.word	0x080100a5

08010774 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b0ae      	sub	sp, #184	@ 0xb8
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010782:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	69db      	ldr	r3, [r3, #28]
 801078c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	689b      	ldr	r3, [r3, #8]
 80107a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80107aa:	2b22      	cmp	r3, #34	@ 0x22
 80107ac:	f040 8184 	bne.w	8010ab8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80107b6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80107ba:	e127      	b.n	8010a0c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107c2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80107ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80107ce:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80107d2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80107d6:	4013      	ands	r3, r2
 80107d8:	b29a      	uxth	r2, r3
 80107da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80107de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80107e4:	1c9a      	adds	r2, r3, #2
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80107f0:	b29b      	uxth	r3, r3
 80107f2:	3b01      	subs	r3, #1
 80107f4:	b29a      	uxth	r2, r3
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	69db      	ldr	r3, [r3, #28]
 8010802:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010806:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801080a:	f003 0307 	and.w	r3, r3, #7
 801080e:	2b00      	cmp	r3, #0
 8010810:	d053      	beq.n	80108ba <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010812:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010816:	f003 0301 	and.w	r3, r3, #1
 801081a:	2b00      	cmp	r3, #0
 801081c:	d011      	beq.n	8010842 <UART_RxISR_16BIT_FIFOEN+0xce>
 801081e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010826:	2b00      	cmp	r3, #0
 8010828:	d00b      	beq.n	8010842 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	2201      	movs	r2, #1
 8010830:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010838:	f043 0201 	orr.w	r2, r3, #1
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010842:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010846:	f003 0302 	and.w	r3, r3, #2
 801084a:	2b00      	cmp	r3, #0
 801084c:	d011      	beq.n	8010872 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801084e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010852:	f003 0301 	and.w	r3, r3, #1
 8010856:	2b00      	cmp	r3, #0
 8010858:	d00b      	beq.n	8010872 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	2202      	movs	r2, #2
 8010860:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010868:	f043 0204 	orr.w	r2, r3, #4
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010872:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010876:	f003 0304 	and.w	r3, r3, #4
 801087a:	2b00      	cmp	r3, #0
 801087c:	d011      	beq.n	80108a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801087e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010882:	f003 0301 	and.w	r3, r3, #1
 8010886:	2b00      	cmp	r3, #0
 8010888:	d00b      	beq.n	80108a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	2204      	movs	r2, #4
 8010890:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010898:	f043 0202 	orr.w	r2, r3, #2
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d006      	beq.n	80108ba <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f7fe f9ff 	bl	800ecb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2200      	movs	r2, #0
 80108b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80108c0:	b29b      	uxth	r3, r3
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	f040 80a2 	bne.w	8010a0c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80108d0:	e853 3f00 	ldrex	r3, [r3]
 80108d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80108d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80108d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80108dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	461a      	mov	r2, r3
 80108e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80108ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80108ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80108f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80108f6:	e841 2300 	strex	r3, r2, [r1]
 80108fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80108fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d1e2      	bne.n	80108c8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	3308      	adds	r3, #8
 8010908:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801090a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801090c:	e853 3f00 	ldrex	r3, [r3]
 8010910:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010912:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010914:	4b6e      	ldr	r3, [pc, #440]	@ (8010ad0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8010916:	4013      	ands	r3, r2
 8010918:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	3308      	adds	r3, #8
 8010922:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8010926:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010928:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801092a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801092c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801092e:	e841 2300 	strex	r3, r2, [r1]
 8010932:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010934:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010936:	2b00      	cmp	r3, #0
 8010938:	d1e3      	bne.n	8010902 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	2220      	movs	r2, #32
 801093e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	2200      	movs	r2, #0
 8010946:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2200      	movs	r2, #0
 801094c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	4a60      	ldr	r2, [pc, #384]	@ (8010ad4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010954:	4293      	cmp	r3, r2
 8010956:	d021      	beq.n	801099c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	685b      	ldr	r3, [r3, #4]
 801095e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010962:	2b00      	cmp	r3, #0
 8010964:	d01a      	beq.n	801099c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801096c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801096e:	e853 3f00 	ldrex	r3, [r3]
 8010972:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010974:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010976:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801097a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	461a      	mov	r2, r3
 8010984:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010988:	65bb      	str	r3, [r7, #88]	@ 0x58
 801098a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801098c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801098e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010990:	e841 2300 	strex	r3, r2, [r1]
 8010994:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010998:	2b00      	cmp	r3, #0
 801099a:	d1e4      	bne.n	8010966 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80109a0:	2b01      	cmp	r3, #1
 80109a2:	d130      	bne.n	8010a06 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2200      	movs	r2, #0
 80109a8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109b2:	e853 3f00 	ldrex	r3, [r3]
 80109b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80109b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80109ba:	f023 0310 	bic.w	r3, r3, #16
 80109be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	461a      	mov	r2, r3
 80109c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80109cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80109ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80109d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80109d4:	e841 2300 	strex	r3, r2, [r1]
 80109d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80109da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d1e4      	bne.n	80109aa <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	69db      	ldr	r3, [r3, #28]
 80109e6:	f003 0310 	and.w	r3, r3, #16
 80109ea:	2b10      	cmp	r3, #16
 80109ec:	d103      	bne.n	80109f6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	2210      	movs	r2, #16
 80109f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80109fc:	4619      	mov	r1, r3
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f7f0 ffb4 	bl	800196c <HAL_UARTEx_RxEventCallback>
 8010a04:	e002      	b.n	8010a0c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f7fe f948 	bl	800ec9c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010a0c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d006      	beq.n	8010a22 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8010a14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010a18:	f003 0320 	and.w	r3, r3, #32
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	f47f aecd 	bne.w	80107bc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010a28:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010a2c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d049      	beq.n	8010ac8 <UART_RxISR_16BIT_FIFOEN+0x354>
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010a3a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8010a3e:	429a      	cmp	r2, r3
 8010a40:	d242      	bcs.n	8010ac8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	3308      	adds	r3, #8
 8010a48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a4c:	e853 3f00 	ldrex	r3, [r3]
 8010a50:	623b      	str	r3, [r7, #32]
   return(result);
 8010a52:	6a3b      	ldr	r3, [r7, #32]
 8010a54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010a58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	3308      	adds	r3, #8
 8010a62:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8010a66:	633a      	str	r2, [r7, #48]	@ 0x30
 8010a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010a6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a6e:	e841 2300 	strex	r3, r2, [r1]
 8010a72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d1e3      	bne.n	8010a42 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	4a16      	ldr	r2, [pc, #88]	@ (8010ad8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8010a7e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a86:	693b      	ldr	r3, [r7, #16]
 8010a88:	e853 3f00 	ldrex	r3, [r3]
 8010a8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	f043 0320 	orr.w	r3, r3, #32
 8010a94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010aa2:	61fb      	str	r3, [r7, #28]
 8010aa4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aa6:	69b9      	ldr	r1, [r7, #24]
 8010aa8:	69fa      	ldr	r2, [r7, #28]
 8010aaa:	e841 2300 	strex	r3, r2, [r1]
 8010aae:	617b      	str	r3, [r7, #20]
   return(result);
 8010ab0:	697b      	ldr	r3, [r7, #20]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d1e4      	bne.n	8010a80 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010ab6:	e007      	b.n	8010ac8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	699a      	ldr	r2, [r3, #24]
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	f042 0208 	orr.w	r2, r2, #8
 8010ac6:	619a      	str	r2, [r3, #24]
}
 8010ac8:	bf00      	nop
 8010aca:	37b8      	adds	r7, #184	@ 0xb8
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}
 8010ad0:	effffffe 	.word	0xeffffffe
 8010ad4:	58000c00 	.word	0x58000c00
 8010ad8:	0801025d 	.word	0x0801025d

08010adc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010adc:	b480      	push	{r7}
 8010ade:	b083      	sub	sp, #12
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010ae4:	bf00      	nop
 8010ae6:	370c      	adds	r7, #12
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aee:	4770      	bx	lr

08010af0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010af0:	b480      	push	{r7}
 8010af2:	b083      	sub	sp, #12
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010af8:	bf00      	nop
 8010afa:	370c      	adds	r7, #12
 8010afc:	46bd      	mov	sp, r7
 8010afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b02:	4770      	bx	lr

08010b04 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010b04:	b480      	push	{r7}
 8010b06:	b083      	sub	sp, #12
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010b0c:	bf00      	nop
 8010b0e:	370c      	adds	r7, #12
 8010b10:	46bd      	mov	sp, r7
 8010b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b16:	4770      	bx	lr

08010b18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010b18:	b480      	push	{r7}
 8010b1a:	b085      	sub	sp, #20
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010b26:	2b01      	cmp	r3, #1
 8010b28:	d101      	bne.n	8010b2e <HAL_UARTEx_DisableFifoMode+0x16>
 8010b2a:	2302      	movs	r3, #2
 8010b2c:	e027      	b.n	8010b7e <HAL_UARTEx_DisableFifoMode+0x66>
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	2201      	movs	r2, #1
 8010b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2224      	movs	r2, #36	@ 0x24
 8010b3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	681a      	ldr	r2, [r3, #0]
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	f022 0201 	bic.w	r2, r2, #1
 8010b54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010b5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2200      	movs	r2, #0
 8010b62:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	68fa      	ldr	r2, [r7, #12]
 8010b6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2220      	movs	r2, #32
 8010b70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2200      	movs	r2, #0
 8010b78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010b7c:	2300      	movs	r3, #0
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	3714      	adds	r7, #20
 8010b82:	46bd      	mov	sp, r7
 8010b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b88:	4770      	bx	lr

08010b8a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010b8a:	b580      	push	{r7, lr}
 8010b8c:	b084      	sub	sp, #16
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	6078      	str	r0, [r7, #4]
 8010b92:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010b9a:	2b01      	cmp	r3, #1
 8010b9c:	d101      	bne.n	8010ba2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010b9e:	2302      	movs	r3, #2
 8010ba0:	e02d      	b.n	8010bfe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	2201      	movs	r2, #1
 8010ba6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	2224      	movs	r2, #36	@ 0x24
 8010bae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	681a      	ldr	r2, [r3, #0]
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	f022 0201 	bic.w	r2, r2, #1
 8010bc8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	689b      	ldr	r3, [r3, #8]
 8010bd0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	683a      	ldr	r2, [r7, #0]
 8010bda:	430a      	orrs	r2, r1
 8010bdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f000 f8a0 	bl	8010d24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	68fa      	ldr	r2, [r7, #12]
 8010bea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2220      	movs	r2, #32
 8010bf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010bfc:	2300      	movs	r3, #0
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	3710      	adds	r7, #16
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}

08010c06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010c06:	b580      	push	{r7, lr}
 8010c08:	b084      	sub	sp, #16
 8010c0a:	af00      	add	r7, sp, #0
 8010c0c:	6078      	str	r0, [r7, #4]
 8010c0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010c16:	2b01      	cmp	r3, #1
 8010c18:	d101      	bne.n	8010c1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010c1a:	2302      	movs	r3, #2
 8010c1c:	e02d      	b.n	8010c7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2201      	movs	r2, #1
 8010c22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	2224      	movs	r2, #36	@ 0x24
 8010c2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	681a      	ldr	r2, [r3, #0]
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	f022 0201 	bic.w	r2, r2, #1
 8010c44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	689b      	ldr	r3, [r3, #8]
 8010c4c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	683a      	ldr	r2, [r7, #0]
 8010c56:	430a      	orrs	r2, r1
 8010c58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010c5a:	6878      	ldr	r0, [r7, #4]
 8010c5c:	f000 f862 	bl	8010d24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	68fa      	ldr	r2, [r7, #12]
 8010c66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2220      	movs	r2, #32
 8010c6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2200      	movs	r2, #0
 8010c74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010c78:	2300      	movs	r3, #0
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3710      	adds	r7, #16
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}

08010c82 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010c82:	b580      	push	{r7, lr}
 8010c84:	b08c      	sub	sp, #48	@ 0x30
 8010c86:	af00      	add	r7, sp, #0
 8010c88:	60f8      	str	r0, [r7, #12]
 8010c8a:	60b9      	str	r1, [r7, #8]
 8010c8c:	4613      	mov	r3, r2
 8010c8e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8010c90:	2300      	movs	r3, #0
 8010c92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010c9c:	2b20      	cmp	r3, #32
 8010c9e:	d13b      	bne.n	8010d18 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d002      	beq.n	8010cac <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8010ca6:	88fb      	ldrh	r3, [r7, #6]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d101      	bne.n	8010cb0 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8010cac:	2301      	movs	r3, #1
 8010cae:	e034      	b.n	8010d1a <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	2201      	movs	r2, #1
 8010cb4:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	2200      	movs	r2, #0
 8010cba:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8010cbc:	88fb      	ldrh	r3, [r7, #6]
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	68b9      	ldr	r1, [r7, #8]
 8010cc2:	68f8      	ldr	r0, [r7, #12]
 8010cc4:	f7ff f824 	bl	800fd10 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ccc:	2b01      	cmp	r3, #1
 8010cce:	d11d      	bne.n	8010d0c <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	2210      	movs	r2, #16
 8010cd6:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cde:	69bb      	ldr	r3, [r7, #24]
 8010ce0:	e853 3f00 	ldrex	r3, [r3]
 8010ce4:	617b      	str	r3, [r7, #20]
   return(result);
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	f043 0310 	orr.w	r3, r3, #16
 8010cec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	461a      	mov	r2, r3
 8010cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8010cf8:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cfa:	6a39      	ldr	r1, [r7, #32]
 8010cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010cfe:	e841 2300 	strex	r3, r2, [r1]
 8010d02:	61fb      	str	r3, [r7, #28]
   return(result);
 8010d04:	69fb      	ldr	r3, [r7, #28]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d1e6      	bne.n	8010cd8 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8010d0a:	e002      	b.n	8010d12 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8010d12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010d16:	e000      	b.n	8010d1a <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8010d18:	2302      	movs	r3, #2
  }
}
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	3730      	adds	r7, #48	@ 0x30
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}
	...

08010d24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010d24:	b480      	push	{r7}
 8010d26:	b085      	sub	sp, #20
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d108      	bne.n	8010d46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	2201      	movs	r2, #1
 8010d38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2201      	movs	r2, #1
 8010d40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010d44:	e031      	b.n	8010daa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010d46:	2310      	movs	r3, #16
 8010d48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010d4a:	2310      	movs	r3, #16
 8010d4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	689b      	ldr	r3, [r3, #8]
 8010d54:	0e5b      	lsrs	r3, r3, #25
 8010d56:	b2db      	uxtb	r3, r3
 8010d58:	f003 0307 	and.w	r3, r3, #7
 8010d5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	689b      	ldr	r3, [r3, #8]
 8010d64:	0f5b      	lsrs	r3, r3, #29
 8010d66:	b2db      	uxtb	r3, r3
 8010d68:	f003 0307 	and.w	r3, r3, #7
 8010d6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010d6e:	7bbb      	ldrb	r3, [r7, #14]
 8010d70:	7b3a      	ldrb	r2, [r7, #12]
 8010d72:	4911      	ldr	r1, [pc, #68]	@ (8010db8 <UARTEx_SetNbDataToProcess+0x94>)
 8010d74:	5c8a      	ldrb	r2, [r1, r2]
 8010d76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010d7a:	7b3a      	ldrb	r2, [r7, #12]
 8010d7c:	490f      	ldr	r1, [pc, #60]	@ (8010dbc <UARTEx_SetNbDataToProcess+0x98>)
 8010d7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010d80:	fb93 f3f2 	sdiv	r3, r3, r2
 8010d84:	b29a      	uxth	r2, r3
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010d8c:	7bfb      	ldrb	r3, [r7, #15]
 8010d8e:	7b7a      	ldrb	r2, [r7, #13]
 8010d90:	4909      	ldr	r1, [pc, #36]	@ (8010db8 <UARTEx_SetNbDataToProcess+0x94>)
 8010d92:	5c8a      	ldrb	r2, [r1, r2]
 8010d94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010d98:	7b7a      	ldrb	r2, [r7, #13]
 8010d9a:	4908      	ldr	r1, [pc, #32]	@ (8010dbc <UARTEx_SetNbDataToProcess+0x98>)
 8010d9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010d9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010da2:	b29a      	uxth	r2, r3
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010daa:	bf00      	nop
 8010dac:	3714      	adds	r7, #20
 8010dae:	46bd      	mov	sp, r7
 8010db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db4:	4770      	bx	lr
 8010db6:	bf00      	nop
 8010db8:	08010ed8 	.word	0x08010ed8
 8010dbc:	08010ee0 	.word	0x08010ee0

08010dc0 <memset>:
 8010dc0:	4402      	add	r2, r0
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	4293      	cmp	r3, r2
 8010dc6:	d100      	bne.n	8010dca <memset+0xa>
 8010dc8:	4770      	bx	lr
 8010dca:	f803 1b01 	strb.w	r1, [r3], #1
 8010dce:	e7f9      	b.n	8010dc4 <memset+0x4>

08010dd0 <__libc_init_array>:
 8010dd0:	b570      	push	{r4, r5, r6, lr}
 8010dd2:	4d0d      	ldr	r5, [pc, #52]	@ (8010e08 <__libc_init_array+0x38>)
 8010dd4:	4c0d      	ldr	r4, [pc, #52]	@ (8010e0c <__libc_init_array+0x3c>)
 8010dd6:	1b64      	subs	r4, r4, r5
 8010dd8:	10a4      	asrs	r4, r4, #2
 8010dda:	2600      	movs	r6, #0
 8010ddc:	42a6      	cmp	r6, r4
 8010dde:	d109      	bne.n	8010df4 <__libc_init_array+0x24>
 8010de0:	4d0b      	ldr	r5, [pc, #44]	@ (8010e10 <__libc_init_array+0x40>)
 8010de2:	4c0c      	ldr	r4, [pc, #48]	@ (8010e14 <__libc_init_array+0x44>)
 8010de4:	f000 f826 	bl	8010e34 <_init>
 8010de8:	1b64      	subs	r4, r4, r5
 8010dea:	10a4      	asrs	r4, r4, #2
 8010dec:	2600      	movs	r6, #0
 8010dee:	42a6      	cmp	r6, r4
 8010df0:	d105      	bne.n	8010dfe <__libc_init_array+0x2e>
 8010df2:	bd70      	pop	{r4, r5, r6, pc}
 8010df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010df8:	4798      	blx	r3
 8010dfa:	3601      	adds	r6, #1
 8010dfc:	e7ee      	b.n	8010ddc <__libc_init_array+0xc>
 8010dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e02:	4798      	blx	r3
 8010e04:	3601      	adds	r6, #1
 8010e06:	e7f2      	b.n	8010dee <__libc_init_array+0x1e>
 8010e08:	08010ef0 	.word	0x08010ef0
 8010e0c:	08010ef0 	.word	0x08010ef0
 8010e10:	08010ef0 	.word	0x08010ef0
 8010e14:	08010ef4 	.word	0x08010ef4

08010e18 <memcpy>:
 8010e18:	440a      	add	r2, r1
 8010e1a:	4291      	cmp	r1, r2
 8010e1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010e20:	d100      	bne.n	8010e24 <memcpy+0xc>
 8010e22:	4770      	bx	lr
 8010e24:	b510      	push	{r4, lr}
 8010e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010e2e:	4291      	cmp	r1, r2
 8010e30:	d1f9      	bne.n	8010e26 <memcpy+0xe>
 8010e32:	bd10      	pop	{r4, pc}

08010e34 <_init>:
 8010e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e36:	bf00      	nop
 8010e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e3a:	bc08      	pop	{r3}
 8010e3c:	469e      	mov	lr, r3
 8010e3e:	4770      	bx	lr

08010e40 <_fini>:
 8010e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e42:	bf00      	nop
 8010e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e46:	bc08      	pop	{r3}
 8010e48:	469e      	mov	lr, r3
 8010e4a:	4770      	bx	lr
